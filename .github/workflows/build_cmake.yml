name: Desktop OS Builds

on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  CMAKE_VERSION: 3.18.3
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Build", artifact: "Windows.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "gcc-9", cxx: "g++-9",
            cmake_platform: "-A x64"
          }
        - {
            name: "Ubuntu Build", artifact: "Linux.tar.xz",
            os: ubuntu-16.04,
            build_type: "Release", cc: "gcc-9", cxx: "g++-9",
            cmake_platform: ""
          }

    steps:
    - name: Cancel Build(s)
      uses: styfle/cancel-workflow-action@0.7.0
      if: "github.ref != 'refs/heads/main'"
      with:
        access_token: ${{ github.token }}

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Setup python3
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install mako
      run: python -m pip install mako

    - name: Update Submodules
      run: git submodule update --init --recursive

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        execute_process(
          COMMAND cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
            ${{ matrix.config.cmake_platform }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --build build --config $ENV{BUILD_TYPE}
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()

    - name: Run Tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ctest -j ${N} -C $ENV{BUILD_TYPE} -E System --output-on-failure
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
            message(FATAL_ERROR "Running tests failed!")
        endif()

    - name: Tar Linux Server Binaries
      if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases')) && (runner.os == 'Linux') }}
      run: >-
        tar -cvzf ni-grpc-device-server-linux-glibc2_23-x64.tar.gz
        -C ${GITHUB_WORKSPACE}/build
        ni_grpc_device_server
        server_config.json
        -C ${GITHUB_WORKSPACE}
        LICENSE
        ThirdPartyNotices.txt

    - name: Upload Linux Server Binaries Artifact
      uses: actions/upload-artifact@v2
      if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases')) && (runner.os == 'Linux') }}
      with:
        name: ni-grpc-device-server-linux-glibc2_23-x64
        path: ni-grpc-device-server-linux-glibc2_23-x64.tar.gz
        retention-days: 5

    - name: Upload Windows Server Binaries Artifact
      uses: actions/upload-artifact@v2
      if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases')) && (runner.os == 'Windows') }}
      with:
        name: ni-grpc-device-server-windows-x64
        path: |
          build/Release/ni_grpc_device_server.exe
          build/Release/server_config.json
          LICENSE
          ThirdPartyNotices.txt
        retention-days: 5
