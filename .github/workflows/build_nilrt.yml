name: NI Linux Real-Time Build

on:
  workflow_call:
  workflow_dispatch:

env:
  CMAKE_VERSION: 3.18.3
  BUILD_TYPE: Release

jobs:
  build-nilrt:
    name: NILRT Cross Compile with GCC 6.3.0
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Setup python3
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v5
      with:
          version: 1.12.1

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    # The URL used to download this toolchain may change in the future as
    # improvements to hosting and exports of the NILRT toolchain are made.
    - name: Install NI Linux RT CC Toolchain
      run: |
        wget -nv https://download.ni.com/support/softlib/labview/labview_rt/2018/Linux%20Toolchains/linux/oecore-x86_64-core2-64-toolchain-6.0.sh
        sudo chmod a+x ./oecore-x86_64-core2-64-toolchain-6.0.sh
        sudo ./oecore-x86_64-core2-64-toolchain-6.0.sh -y -d $GITHUB_WORKSPACE/nilrt-toolchain/
        echo "$GITHUB_WORKSPACE/nilrt-toolchain/sysroots/x86_64-nilrtsdk-linux/usr/bin/x86_64-nilrt-linux" >> $GITHUB_PATH

    - name: Update Submodules
      id: submodules
      run: |
        git submodule update --init --recursive
        echo "grpc-commit=$(git rev-parse --short @:./third_party/grpc)" >> $GITHUB_OUTPUT

    - name: Cache Host OS gRPC Support
      uses: actions/cache@v4
      id: hostgrpccache
      env:
        cache-name: hostgrpccache
      with:
        path: third_party/grpc/build/
        key: ${{ github.repository }}-${{ runner.os }}-${{ env.cache-name }}-${{ steps.submodules.outputs.grpc-commit }}

    - name: Configure Host OS gRPC Support
      if: steps.hostgrpccache.outputs.cache-hit != 'true'
      run: >
        cmake
        -S $GITHUB_WORKSPACE/third_party/grpc/
        -B $GITHUB_WORKSPACE/third_party/grpc/build
        -D CMAKE_BUILD_TYPE=$BUILD_TYPE
        -D gRPC_INSTALL=ON
        -D gRPC_BUILD_TESTS=OFF
        -G "Ninja"

    - name: Build Host OS gRPC Support
      if: steps.hostgrpccache.outputs.cache-hit != 'true'
      run: >
        cmake
        --build $GITHUB_WORKSPACE/third_party/grpc/build
        -j ${{ steps.cpu-cores.outputs.count }}

    - name: Install Host OS gRPC Support
      run: sudo cmake --install $GITHUB_WORKSPACE/third_party/grpc/build

    - name: Configure Cross Compile
      run: >
        cmake
        -S .
        -B build
        -D CMAKE_BUILD_TYPE=$BUILD_TYPE
        -D USE_NILRT_LEGACY_TOOLCHAIN=on
        -G "Ninja"

    - name: Cross Compile
      run: >
        cmake
        --build build
        -j ${{ steps.cpu-cores.outputs.count }}

    # The generated source in git must match the output of workflow builds.
    # If this step fails, something is changing during build. Either:
    # 1. Fix non-deterministic codegen, OR
    # 2. Build locally to ensure generated files are up-to-date.
    - name: Check for files dirtied by codegen
      run: git diff --exit-code

    - name: Tar Server Build Files
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases') }}
      run: >-
        tar -cvzf ni-grpc-device-server-ni-linux-rt-x64.tar.gz
        -C $GITHUB_WORKSPACE/build
        ni_grpc_device_server
        server_config.json
        server_capabilities.json
        -C $GITHUB_WORKSPACE
        LICENSE
        ThirdPartyNotices.txt

    - name: Upload Server Artifact
      uses: actions/upload-artifact@v4
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases') }}
      with:
        name: ni-grpc-device-server-ni-linux-rt-x64
        path: ni-grpc-device-server-ni-linux-rt-x64.tar.gz
        retention-days: 5

    - name: Tar Test Build Files
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases') }}
      run: >-
        tar -cvzf ni-grpc-device-tests-ni-linux-rt-x64.tar.gz
        -C $GITHUB_WORKSPACE/build
        certs/
        IntegrationTestsRunner
        libTestApi.so
        SystemTestsRunner
        test_localhost_config.json
        test_mutual_tls_config.json
        UnitTestsRunner
        -C $GITHUB_WORKSPACE
        LICENSE
        ThirdPartyNotices.txt

    - name: Upload Tests Artifact
      uses: actions/upload-artifact@v4
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases') }}
      with:
        name: ni-grpc-device-tests-ni-linux-rt-x64
        path: ni-grpc-device-tests-ni-linux-rt-x64.tar.gz
        retention-days: 5
