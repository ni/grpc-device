<%
import common_helpers
import service_helpers

config = data["config"]

namespace = f"{config['namespace_component']}_grpc"
module_name = config["module_name"]
resource_repository_deps = service_helpers.get_driver_shared_resource_repository_ptr_deps(config, data["functions"])
service_class_prefix = config["service_class_prefix"]
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service registrar implementation for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
#include "${module_name}_library.h"

#include <grpcpp/server_builder.h>

#include "${module_name}_service.h"
#include "${module_name}_service_registrar.h"

namespace ${namespace} {

std::shared_ptr<void> register_service(
  grpc::ServerBuilder& builder,
% for resource_handle_type in resource_repository_deps:
  const ${resource_repository_deps[resource_handle_type].resource_repository_type}& ${resource_repository_deps[resource_handle_type].local_name},
% endfor
  const nidevice_grpc::FeatureToggles& feature_toggles)
{
  auto toggles = ${service_class_prefix}FeatureToggles(feature_toggles);

  if (toggles.is_enabled)
  {
    auto library = std::make_shared<${service_class_prefix}Library>();
    auto service = std::make_shared<${service_class_prefix}Service>(
      library,
% for resource_handle_type in resource_repository_deps:
      ${resource_repository_deps[resource_handle_type].local_name},
% endfor
      toggles);
    builder.RegisterService(service.get());
    return service;
  }

  return {};
}

} // ${namespace}
