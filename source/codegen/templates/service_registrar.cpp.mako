<%
import common_helpers
import service_helpers

config = data["config"]

namespace = f"{config['namespace_component']}_grpc"
module_name = config["module_name"]
resource_repository_type = service_helpers.get_driver_shared_resource_repository_ptr_type(config)
service_class_prefix = config["service_class_prefix"]

cross_driver_session_deps = service_helpers.get_cross_driver_session_dependencies(data["functions"])
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service registrar implementation for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
#include "${module_name}_library.h"

#include <grpcpp/server_builder.h>

#include "${module_name}_service.h"
#include "${module_name}_service_registrar.h"

namespace ${namespace} {

namespace {
struct LibraryAndService {
  LibraryAndService(
    const ${resource_repository_type}& resource_repository,
% for cross_driver_dep in cross_driver_session_deps:
    const ${cross_driver_dep.resource_repository_type}& ${cross_driver_dep.local_name},
% endfor
    const ${service_class_prefix}FeatureToggles& feature_toggles) 
      : library(), 
      service(
        &library, 
        resource_repository, 
% for cross_driver_dep in cross_driver_session_deps:
        ${cross_driver_dep.local_name},
% endfor
        feature_toggles) {
  }
  ${service_class_prefix}Library library;
  ${service_class_prefix}Service service;
};
}

std::shared_ptr<void> register_service(
  grpc::ServerBuilder& builder, 
  const ${resource_repository_type}& resource_repository,
% for cross_driver_dep in cross_driver_session_deps:
  const ${cross_driver_dep.resource_repository_type}& ${cross_driver_dep.local_name},
% endfor
  const nidevice_grpc::FeatureToggles& feature_toggles)
{
  auto toggles = ${service_class_prefix}FeatureToggles(feature_toggles);

  if (toggles.is_enabled)
  {
    auto library_and_service_ptr = std::make_shared<LibraryAndService>(
      resource_repository,
% for cross_driver_dep in cross_driver_session_deps:
      ${cross_driver_dep.local_name},
% endfor
      toggles);
    auto& service = library_and_service_ptr->service;
    builder.RegisterService(&service);
    return library_and_service_ptr;
  }

  return {};
}

} // ${namespace}
