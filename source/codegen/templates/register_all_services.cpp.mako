<%
import common_helpers
import service_helpers

driver_configs = [data["config"] for data in drivers]
driver_cross_driver_session_deps = [service_helpers.get_cross_driver_session_dependencies(data["functions"]) for data in drivers]
module_names = [config["module_name"] for config in driver_configs]
handle_types = [service_helpers.get_resource_handle_type(config) for config in driver_configs]
repository_type_to_local_name = {
  t: f"{common_helpers.pascal_to_snake(t)}_repository"
  for t in handle_types
}
%>\
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Register all services implementation.
//---------------------------------------------------------------------
#include "register_all_services.h"

#include <string>
#include <vector>

#include <server/core_service_registrar.h>
#include <server/session_repository.h>

% for module_name in module_names:
#include "${module_name}/${module_name}_service_registrar.h"
% endfor

namespace nidevice_grpc {

std::shared_ptr<void> register_all_services(
  grpc::ServerBuilder& server_builder,
  const nidevice_grpc::FeatureToggles& feature_toggles)
{
  auto service_vector = std::make_shared<std::vector<std::shared_ptr<void>>>();

  auto session_repository = std::make_shared<nidevice_grpc::SessionRepository>();
  auto core_service = nidevice_grpc::register_core_service(server_builder, session_repository);
  service_vector->insert(
    service_vector->end(), 
    {session_repository, core_service});

% for type_name, local_name in repository_type_to_local_name.items():
  auto ${local_name} = std::make_shared<nidevice_grpc::SessionResourceRepository<${type_name}>>(session_repository.get());
% endfor

% for config, cross_driver_session_deps in zip(driver_configs, driver_cross_driver_session_deps):
<%
  namespace = f"{config['namespace_component']}_grpc"
  resource_handle_type = service_helpers.get_resource_handle_type(config)
  resource_repository_local_name = repository_type_to_local_name[resource_handle_type]
%>\
  service_vector->push_back(
    ${namespace}::register_service(
      server_builder, 
      ${resource_repository_local_name},
% for cross_driver_dep in cross_driver_session_deps:
      ${repository_type_to_local_name[cross_driver_dep.resource_handle_type]},
% endfor
      feature_toggles));
% endfor

  return service_vector;
}

} // nidevice_grpc
