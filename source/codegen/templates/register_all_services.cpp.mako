<%
import common_helpers
import service_helpers

driver_configs = [data["config"] for data in drivers]
repository_type_to_config = service_helpers.list_session_repository_handle_types(driver_configs)
%>\
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Register all services implementation.
//---------------------------------------------------------------------
#include "register_all_services.h"

#include <string>
#include <vector>

#include <server/core_service_registrar.h>
#include <server/session_repository.h>

% for config in driver_configs:
<%
  module_name = config["module_name"]
%>\
<%block filter="common_helpers.os_conditional_compile_block(config)">\
#include "${module_name}/${module_name}_service_registrar.h"
</%block>\
% endfor

namespace nidevice_grpc {

std::shared_ptr<void> register_all_services(
  grpc::ServerBuilder& server_builder,
  const nidevice_grpc::FeatureToggles& feature_toggles)
{
  auto service_vector = std::make_shared<std::vector<std::shared_ptr<void>>>();

  auto session_repository = std::make_shared<nidevice_grpc::SessionRepository>();
  auto core_service = nidevice_grpc::register_core_service(server_builder, session_repository);
  service_vector->insert(
    service_vector->end(), 
    {session_repository, core_service});

% for type_name, config in repository_type_to_config.items():
<%block filter="common_helpers.os_conditional_compile_block(config)">\
  auto ${config["local_name"]} = std::make_shared<nidevice_grpc::SessionResourceRepository<${type_name}>>(session_repository.get());
</%block>\
% endfor

% for driver in drivers:
<%
  config = driver["config"]
  namespace = f"{config['namespace_component']}_grpc"
  resource_handle_deps = service_helpers.get_driver_shared_resource_repository_ptr_deps(config, driver["functions"])
%>\
<%block filter="common_helpers.os_conditional_compile_block(config)">\
  service_vector->push_back(
    ${namespace}::register_service(
      server_builder, 
% for resource_handle_type in resource_handle_deps:
      ${repository_type_to_config[resource_handle_type]["local_name"]},
% endfor
      feature_toggles));
</%block>\
% endfor

  return service_vector;
}

} // nidevice_grpc
