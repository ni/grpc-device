<%
import common_helpers
import service_helpers

config = data["config"]

include_guard_name = service_helpers.get_include_guard_name(config, "_SERVICE_REGISTRAR_H")
namespace = f"{config['namespace_component']}_grpc"
resource_handle_type = service_helpers.get_resource_handle_type(config)
resource_repository_type = service_helpers.get_driver_shared_resource_repository_ptr_type(config)
cross_driver_session_deps = service_helpers.get_cross_driver_session_dependencies(data["functions"])
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service registrar header for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
#ifndef ${include_guard_name}
#define ${include_guard_name}
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>

#include <memory>

#include <${config["c_header"]}> // for ${resource_handle_type}

namespace grpc {
class ServerBuilder;
}

namespace ${namespace} {
using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;

std::shared_ptr<void> register_service(
  grpc::ServerBuilder& server_builder, 
  const ${resource_repository_type}& resource_repository,
% for cross_driver_dep in cross_driver_session_deps:
  const ${cross_driver_dep.resource_repository_type}& ${cross_driver_dep.local_name},
% endfor
  const nidevice_grpc::FeatureToggles& feature_toggles);

} // ${namespace}

#endif  // ${include_guard_name}
