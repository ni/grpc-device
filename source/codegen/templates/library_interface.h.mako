<%
import common_helpers
import service_helpers

config = data['config']
functions = data['functions']

service_class_prefix = config["service_class_prefix"]
include_guard_name = service_helpers.get_include_guard_name(config, "_LIBRARY_WRAPPER_H")
%>\
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with ${config["driver_name"]}
//---------------------------------------------------------------------
#ifndef ${include_guard_name}
#define ${include_guard_name}

#include <grpcpp/grpcpp.h>
#include <${config["c_header"]}>

namespace ${config["namespace_component"]}_grpc {

class ${service_class_prefix}LibraryInterface {
 public:
  virtual ~${service_class_prefix}LibraryInterface() {}

% for method_name in service_helpers.filter_api_functions(functions):
<%
  f = functions[method_name]
  parameters = f['parameters']
  return_type = f['returns']
%>\
  virtual ${return_type} ${method_name}(${service_helpers.create_params(parameters, expand_varargs=True)}) = 0;
% endfor
};

}  // namespace ${config["namespace_component"]}_grpc
#endif  // ${include_guard_name}
