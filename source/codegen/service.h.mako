<%
import common_helpers
import handler_helpers

config = data['config']
functions = data['functions']

service_class_prefix = config["service_class_prefix"]
driver_namespaces = handler_helpers.get_namespace_segments(config)
include_guard_name = handler_helpers.get_include_guard_name(config, "_SERVICE_H")
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
## Define section
#ifndef ${include_guard_name}
#define ${include_guard_name}

## Include section
#include <${config["module_name"]}.grpc.pb.h>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <condition_variable>
#include "${config["module_name"]}_library_wrapper.h"
#include "core_server/hardware/grpc/internal/shared_library.h"
#include "core_server/hardware/grpc/internal/session_repository.h"

% for namespace in driver_namespaces:
namespace ${namespace} {
% endfor

class ${service_class_prefix}Service final : public ${service_class_prefix}::Service {
public:
  ${service_class_prefix}Service(${service_class_prefix}LibraryWrapper* library_wrapper, ni::hardware::grpc::internal::SessionRepository* session_repository);
  virtual ~${service_class_prefix}Service();
% for function in common_helpers.filter_proto_rpc_functions(functions):
<%
  f = functions[function]
  method_name = common_helpers.snake_to_camel(function)
%>\
  ::grpc::Status ${method_name}(::grpc::ServerContext* context, const ${method_name}Request* request, ${method_name}Response* response) override;
% endfor

private:
  ${service_class_prefix}LibraryWrapper* library_wrapper_;
  ni::hardware::grpc::internal::SessionRepository* session_repository_;
};

% for namespace in reversed(driver_namespaces):
} // namespace ${namespace}
% endfor
#endif  // ${include_guard_name}
