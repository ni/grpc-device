<%
attributes = data['attributes']
config = data['config']
namespace_prefix = config["namespace_component"] + "_grpc"

u8_attrs = []
i16_attrs = []
u16_attrs = []
i32_attrs = []
u32_attrs = []
u64_attrs = []
bool_attrs = []
string_attrs = []
bytes_attrs = []

for key, attr in attributes.items():
    attr_type = attr["type"]
    attr_name = f"VI_ATTR_{attr['name']}"
    if ("MEM_BASE" in attr['name']
      or "MEM_SIZE" in attr['name']
      or "WIN_BASE" in attr['name']
      or "WIN_SIZE" in attr['name']
    ):
        u32_attrs.append(f"{attr_name}_32")
        u64_attrs.append(f"{attr_name}_64")
    elif attr_type in ["ViUInt8"]:
        u8_attrs.append(attr_name)
    elif attr_type in ["ViInt16"]:
        i16_attrs.append(attr_name)
    elif attr_type in ["ViUInt16"]:
        u16_attrs.append(attr_name)
    elif attr_type in ["ViInt32", "ViStatus"]:
        i32_attrs.append(attr_name)
    elif attr_type in ["ViUInt32", "ViVersion", "ViAccessMode"]:
        u32_attrs.append(attr_name)
    elif attr_type in ["ViBusAddress", "ViBusSize"]:
        u64_attrs.append(attr_name)
    elif attr_type in ["ViBoolean"]:
        bool_attrs.append(attr_name)
    elif attr_type in ["ViString"]:
        string_attrs.append(attr_name)
    elif attr_type in ["ViUInt8 []"]:
        bytes_attrs.append(attr_name)
%>
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
#ifndef VISA_ATTRIBUTE_TYPES_H
#define VISA_ATTRIBUTE_TYPES_H

#include <visa/visa_service.h>

namespace ${namespace_prefix} {

  inline AttributeValueData::DataCase GetAttributeType(ViAttr attributeID)
  {
    switch (attributeID) {
% for attr in sorted(u8_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueU8;

% for attr in sorted(i16_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueI16;

% for attr in sorted(u16_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueU16;

% for attr in sorted(i32_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueI32;

% for attr in sorted(u32_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueU32;

% for attr in sorted(u64_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueU64;

% for attr in sorted(bool_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueBool;

% for attr in sorted(string_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueString;

% for attr in sorted(bytes_attrs):
      case ${attr}:
% endfor
        return AttributeValueData::kValueBytes;

      default:
        return AttributeValueData::DATA_NOT_SET;
      }
  }
}

#endif
