<%
def driver_name_to_pascal(driver_name):
  driver_name = list(driver_name.lower())
  index = 0
  driver_name[index] = driver_name[index].upper();
  for x in driver_name :
      if x == '-' :
          driver_name[index+1] = driver_name[index+1].upper();
          del driver_name[index]
         
      index = index + 1
  return ("".join(driver_name))
  
def driver_name_add_underscore(driver_name):
  driver_name = list(driver_name)
  index = 0
  for x in driver_name :
      if x == '-' :
          driver_name[index] = "_";
         
      index = index + 1
  return ("".join(driver_name))

driver_name_pascal = driver_name_to_pascal(data["config"]["driver_name"])
driver_name_caps_underscore = driver_name_add_underscore(data["config"]["driver_name"])
module_name = data["config"]["module_name"]
def is_output_parameter(parameter):
    if "out" in parameter["direction"]:
      return True
    return False

def is_input_parameter(parameter):
    if "in" in parameter["direction"]:
        return True
    return False

def is_array(dataType):
  if dataType.find("[]") != -1:
    return True
  return False
  
def camel_to_snake(camelString):
  camelString = list(camelString)
  index = 0
  for x in camelString :
      if x.isupper():
          camelString[index] = camelString[index].lower();
          camelString.insert(index, "_")
          
      index = index + 1
  return ("".join(camelString))

def snake_to_camel(snake_string):
  snake_string = list(snake_string)
  index = 0
  snake_string[index] = snake_string[index].upper();
  for x in snake_string :
      if x == '_':
          snake_string[index+1] = snake_string[index+1].upper();
          del snake_string[index]         
      index = index + 1
  return ("".join(snake_string))

def pascal_to_camel(pascal_string) :
  pascal_string = list(pascal_string)
  pascal_string[0] = pascal_string[0].lower();
  return ("".join(pascal_string))
  
  
driver_name_camel = pascal_to_camel(driver_name_pascal) 
c_function_prefix = data["config"]["c_function_prefix"] 
%>\
//---------------------------------------------------------------------
//---------------------------------------------------------------------
"This file is automatically generated. All manual edits will be lost."
//---------------------------------------------------------------------
//---------------------------------------------------------------------
Proto file for the ${driver_name_camel} Metadata
//---------------------------------------------------------------------
//---------------------------------------------------------------------
Syntax = "proto3";
//---------------------------------------------------------------------
//---------------------------------------------------------------------
package ${driver_name_camel}; 

//---------------------------------------------------------------------
// The ${driver_name_pascal}Service definition.
//---------------------------------------------------------------------
service ${driver_name_pascal}Service {
% for function in data["functions"]:
<% 
   method_name = snake_to_camel(function)
%>\
  rpc ${method_name}(${method_name}Request) returns (${method_name}Response) {};
% endfor
}

//---------------------------------------------------------------------
// The ${driver_name_pascal}Attributes definition.
//---------------------------------------------------------------------
enum ${driver_name_pascal}Attributes {
  ${c_function_prefix.upper()}UNSPECIFIED = 0;
% for attribute in data["attributes"]:
<%
   attribute_name = data["attributes"][attribute]["name"]
%>\
  ${c_function_prefix.upper()}${attribute_name} = ${attribute};
% endfor
}

//---------------------------------------------------------------------
// The ${driver_name_pascal}Enums definition.
//---------------------------------------------------------------------
enum ${driver_name_pascal}Values {
  ${c_function_prefix.upper()}UNSPECIFIED = 0;
% for enum_list in data["enums"]:
<%
enums = data["enums"][enum_list]
%>\
% for values in enums :
<%
value_array = enums[values]
%>\
% for value in value_array :
<%
enum_name = value["name"]
enum_name = enum_name.replace((module_name.upper())+'_VAL_',(c_function_prefix.upper()))
%>\
  ${enum_name} = ${value["value"]};
% endfor   
% endfor    
% endfor
}

% for function in data["functions"]:
<% 
  parameter_array = data["functions"][function]["parameters"] 
  input_parameters = [p for p in parameter_array if is_input_parameter(p)]
  output_parameters = [p for p in parameter_array if is_output_parameter(p)]
  index = 0
%>\

message ${snake_to_camel(function)}Request {
% for parameter in input_parameters:
<%  
  index  = index +1
  parameter_type = parameter["type"]
  if is_array(parameter_type) is True:
    parameter_type = "repeated " + parameter_type.replace('[]','')
%>\
  ${parameter_type} ${camel_to_snake(parameter["name"])} = ${index}  
% endfor
}

message ${snake_to_camel(function)}Response {
  int32 status = 1;
<%
  index = 1
%>\
% for parameter in output_parameters:
<%  
  index = index + 1
  parameter_type = parameter["type"]
  if is_array(parameter_type) is True:
    parameter_type = "repeated " + parameter_type.replace('[]','')
%>\
  ${parameter_type} ${camel_to_snake(parameter["name"])} = ${index}  
%endfor  
}
% endfor