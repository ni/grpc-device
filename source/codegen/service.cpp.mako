<%
import re
import common_helpers
import handler_helpers
attributes = data['attributes']
config = data['config']
enums = data['enums']
functions = data['functions']

driver_name_pascal = common_helpers.driver_name_to_pascal(data["config"]["driver_name"])
driver_name_caps_underscore = common_helpers.driver_name_add_underscore(data["config"]["driver_name"])
module_name = data["config"]["module_name"]
  
driver_name_camel = common_helpers.pascal_to_camel(driver_name_pascal)
driver_prefix = module_name
c_function_prefix = data["config"]["c_function_prefix"] 
linux_library_name = config['library_info']['Linux']['64bit']['name']
linux_library_name = "./" + linux_library_name + '.so'
windows_libary_name = config['library_info']['Windows']['64bit']['name']

driver_full_namespace = common_helpers.get_service_namespace(driver_name_caps_underscore)
driver_namespaces = driver_full_namespace.split(".")
reversed_driver_namespaces = driver_namespaces.copy()
reversed_driver_namespaces.reverse()

library_name = driver_name_pascal
service_name = driver_name_pascal + "Service"
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the ${driver_name_camel} Metadata
//---------------------------------------------------------------------
#include <thread>
#include <sstream>
#include <fstream>
#include <iostream>
#include <${driver_name_pascal.lower()}_service.h>
#include <atomic>

## Namespaces
% for namespace in driver_namespaces:
namespace ${namespace}
{
% endfor
  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  namespace internal = ni::hardware::grpc::internal;
## Function pointers to driver library
% for method_name in handler_helpers.filter_api_functions(functions):
<%
    f = functions[method_name]
    parameters = f['parameters']
    handler_helpers.sanitize_names(parameters)
%>\
% if not common_helpers.has_array_parameter(f):
  using ${c_function_prefix}${method_name}Ptr = int (*)(${handler_helpers.create_params(parameters, driver_name_pascal)});
% endif
%endfor

  #if defined(_MSC_VER)
    static const char* driver_api_library_name = "${windows_libary_name}";
  #else
    static const char* driver_api_library_name = "${linux_library_name}";
  #endif

## Constructors
  ${service_name}::${service_name}(internal::SharedLibrary* shared_library, internal::SessionRepository* session_repository)
      : shared_library_(shared_library), session_repository_(session_repository) 
  {
    shared_library_->set_library_name(driver_api_library_name);
  }

% for method_name in common_helpers.filter_proto_rpc_functions(functions):
<%
    c_function_name = c_function_prefix + method_name
    f = functions[method_name]
    method_name = common_helpers.snake_to_camel(method_name)
    parameters = f['parameters']
    handler_helpers.sanitize_names(parameters)
    input_parameters = [p for p in parameters if common_helpers.is_input_parameter(p)]
    output_parameters = [p for p in parameters if common_helpers.is_output_parameter(p)]
%>\
  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status ${service_name}::${method_name}(::grpc::ServerContext* context, const ${method_name}Request* request, ${method_name}Response* response)
  {
% if common_helpers.has_array_parameter(f):
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

<% continue %>
% endif
    shared_library_->load();
    if (!shared_library_->is_loaded()) {
      std::string message("The library could not be loaded: ");
      message += driver_api_library_name;
      return ::grpc::Status(::grpc::NOT_FOUND, message.c_str());
    }
    auto ${common_helpers.pascal_to_snake(method_name)}_function = reinterpret_cast<${c_function_name}Ptr>(shared_library_->get_function_pointer("${c_function_name}"));
    if (${common_helpers.pascal_to_snake(method_name)}_function == nullptr) {
      return ::grpc::Status(::grpc::NOT_FOUND, "The requested function was not found: ${c_function_name}");
    }

%for parameter in input_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
  paramter_name_ctype = parameter_name + "_ctype"
  parameter_type = handler_helpers.get_c_type(parameter, driver_name_pascal)
%>\
%if common_helpers.is_enum(parameter) == True:
    ## TODO: Handle non integer enums
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto ${parameter_name} = static_cast<${parameter_type}>(${handler_helpers.get_request_value(parameter, driver_name_pascal)});
    ${parameter_type} ${parameter_name};
% else:
    ${parameter_type} ${parameter_name} = ${handler_helpers.get_request_value(parameter, driver_name_pascal)}
% endif
%endfor
%for parameter in output_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
  paramter_name_ctype = parameter_name + "_ctype"
  parameter_type = handler_helpers.get_c_type(parameter, driver_name_pascal)
%>\
%if common_helpers.is_enum(parameter) == True:
    ${parameter_type} ${paramter_name_ctype};
<%
     parameter['cppName'] = paramter_name_ctype
%>\
%else:
    ${parameter_type} ${parameter_name};
%endif
%endfor
    auto status = ${common_helpers.pascal_to_snake(method_name)}_function(${handler_helpers.create_args(parameters)});
<%
     parameter['cppName'] = parameter_name
%>\
    response->set_status(status);
%if output_parameters:
    if (status == 0) {
%for parameter in output_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
  paramter_name_ctype = parameter_name + "_ctype"
  parameter_type = handler_helpers.get_c_type(parameter, driver_name_pascal)
%>\
## TODO: Figure out how to format ViSession responses. Look at Cifra's example for an idea.
%if common_helpers.is_enum(parameter) == True:
      ##TODO: Handle non int types
      response->set_${parameter_name}(static_cast<${parameter["enum"]}>(${paramter_name_ctype}));
% else:
      response->set_${parameter_name}(${parameter_name});
%endif
%endfor
    }
%endif
    return ::grpc::Status::OK;
  }

% endfor
% for namespace in reversed_driver_namespaces:
} // namespace ${namespace}
% endfor
