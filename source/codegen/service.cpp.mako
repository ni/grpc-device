<%
import common_helpers
import handler_helpers

attributes = data['attributes']
config = data['config']
enums = data['enums']
functions = data['functions']

service_class_prefix = config["service_class_prefix"]
namespace_prefix = "ni::" + config["namespace_component"] + "::grpc::"
module_name = config["module_name"]
c_function_prefix = config["c_function_prefix"]
linux_library_name = config['library_info']['Linux']['64bit']['name']
windows_libary_name = config['library_info']['Windows']['64bit']['name']
%>\
\
\
<%doc>
  Get the request snippet for 
</%doc>\
<%def name="get_request_value(parameter)">\
<%
  field_name = common_helpers.camel_to_snake(parameter["name"])
  request_snippet = f'request->{field_name}()'
  c_type = parameter['type']
%>\
% if c_type == 'ViConstString':
${request_snippet}.c_str()\
% elif c_type == 'ViString' or c_type == 'ViRsrc':
(${c_type})${request_snippet}.c_str()\
% elif c_type == 'ViInt8[]' or c_type == 'ViChar[]':
(${c_type[:-2]}*)${request_snippet}.c_str()\
% elif c_type == 'ViChar' or c_type == 'ViInt16' or c_type == 'ViInt8' or 'enum' in parameter:
(${c_type})${request_snippet}\
% elif c_type == 'ViSession':
session_repository_->access_session(${request_snippet}.id(), ${request_snippet}.name())\
% else:
${request_snippet}\
% endif
</%def>\
\
\
<%doc>
  Get the whole request snippet for an input parameter.
</%doc>\
<%def name="get_request_snippet(parameter)">\
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
  parameter_name_ctype = parameter_name + "_ctype"
  parameter_type = parameter['type']
%>\
%if common_helpers.is_enum(parameter) == True:
    ## TODO: Handle non integer enums
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto ${parameter_name} = static_cast<${parameter_type}>(${get_request_value(parameter=parameter)});
    ${parameter_type} ${parameter_name};\
% else:
    ${parameter_type} ${parameter_name} = ${get_request_value(parameter=parameter)};\
% endif
</%def>\
\
\
<%doc>
  Method to blah blah blah.
</%doc>\
<%def name="testin_1234()">
  empty
</%def>\
\
\
<%doc>
  Method to blah blah blah.
</%doc>\
<%def name="testin_1235()">
  empty
</%def>\
\
\
<%doc>
  Method to blah blah blah.
</%doc>\
<%def name="testin_1236()">
  empty
</%def>\
\
\
<%doc>
  Method to blah blah blah.
</%doc>\
<%def name="testin_1237()">
  empty
</%def>\
\
\
<%doc>
  File starts below this point.
  The above is helper mako methods.
</%doc>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
#include "${module_name}_service.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <atomic>

## Namespaces
namespace ni {
namespace ${config["namespace_component"]} {
namespace grpc {

  namespace internal = ni::hardware::grpc::internal;

## Constructors
  ${service_class_prefix}Service::${service_class_prefix}Service(${service_class_prefix}LibraryWrapper* library_wrapper, internal::SessionRepository* session_repository)
      : library_wrapper_(library_wrapper), session_repository_(session_repository)
  {
  }

  ${service_class_prefix}Service::~${service_class_prefix}Service()
  {
  }

% for function in common_helpers.filter_proto_rpc_functions(functions):
<%
    f = functions[function]
    c_function_name = c_function_prefix + function
    method_name = common_helpers.snake_to_camel(function)
    parameters = f['parameters']
    handler_helpers.sanitize_names(parameters)
    input_parameters = [p for p in parameters if common_helpers.is_input_parameter(p)]
    output_parameters = [p for p in parameters if common_helpers.is_output_parameter(p)]
%>\
  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status ${service_class_prefix}Service::${method_name}(::grpc::ServerContext* context, const ${method_name}Request* request, ${method_name}Response* response)
  {
% if common_helpers.has_unsupported_parameter(f):
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

<% continue %>
% endif
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("${c_function_name}");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

%for parameter in input_parameters:
${get_request_snippet(parameter=parameter)}
%endfor
## Handle init session methods
% if function == config['init_function']:
<%
  session_output_param = next((parameter for parameter in output_parameters if parameter['type'] == 'ViSession'), None)
  session_output_var_name = session_output_param['cppName']
%>\
    
    auto init_lambda = [&] () -> std::tuple<int, uint32_t> {
    ViSession ${session_output_var_name};
    int status = library_wrapper_->${function}(${handler_helpers.create_args(parameters)});
    return std::make_tuple(status, vi);
    };
    uint32_t session_id;
    std::string session_name = request->session_name();
    auto cleanup_lambda = [&] (uint32_t id) { library_wrapper_->${config['close_function']}(id); };
    int status = session_repository_->add_session(session_name, init_lambda, cleanup_lambda, session_id);
    response->set_status(status);
    if (status == 0) {
      ni::hardware::grpc::Session session;
      session.set_id(session_id);
      response->set_allocated_${session_output_var_name}(&session);
    }
    return ::grpc::Status::OK;
  }

<% continue %>
% endif ## Handle Init Session Methods
%for parameter in output_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
  parameter['cppName'] = parameter_name
  if common_helpers.is_enum(parameter):
    parameter['cppName'] = parameter['cppName'] + "_ctype"
  parameter_type = parameter['type']
%>\
    ${parameter_type} ${parameter['cppName']};
%endfor
%if function == config['close_function']:
    session_repository_->remove_session(${handler_helpers.create_args(parameters)});
%else:
    auto status = library_wrapper_->${function}(${handler_helpers.create_args(parameters)});
    response->set_status(status);
%endif
%if output_parameters:
    if (status == 0) {
%for parameter in output_parameters:
%if common_helpers.is_enum(parameter) == True:
      ##TODO: Handle non int types
      response->set_${parameter_name}(static_cast<${namespace_prefix}${parameter["enum"]}>(${parameter['cppName']}));
% else:
      ${handler_helpers.get_response_value(parameter)}
%endif
%endfor
    }
%endif
    return ::grpc::Status::OK;
  }

% endfor

} // namespace grpc
} // namespace ${config["namespace_component"]}
} // namespace ni
