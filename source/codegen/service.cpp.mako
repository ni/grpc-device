<%
import common_helpers
import handler_helpers

config = data['config']
enums = data['enums']
functions = data['functions']

service_class_prefix = config["service_class_prefix"]
namespace_prefix = "ni::" + config["namespace_component"] + "::grpc::"
module_name = config["module_name"]
c_function_prefix = config["c_function_prefix"]
linux_library_name = config['library_info']['Linux']['64bit']['name']
windows_libary_name = config['library_info']['Windows']['64bit']['name']
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
#include "${module_name}_service.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <atomic>

## Namespaces
namespace ni {
namespace ${config["namespace_component"]} {
namespace grpc {

  namespace internal = ni::hardware::grpc::internal;

## Constructors
  ${service_class_prefix}Service::${service_class_prefix}Service(${service_class_prefix}LibraryWrapper* library_wrapper, internal::SessionRepository* session_repository)
      : library_wrapper_(library_wrapper), session_repository_(session_repository)
  {
  }

  ${service_class_prefix}Service::~${service_class_prefix}Service()
  {
  }

% for function in common_helpers.filter_proto_rpc_functions(functions):
<%
    f = functions[function]
    c_function_name = c_function_prefix + function
    method_name = common_helpers.snake_to_camel(function)
    parameters = f['parameters']
    handler_helpers.sanitize_names(parameters)
    input_parameters = [p for p in parameters if common_helpers.is_input_parameter(p)]
    output_parameters = [p for p in parameters if common_helpers.is_output_parameter(p)]
%>\
  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status ${service_class_prefix}Service::${method_name}(::grpc::ServerContext* context, const ${method_name}Request* request, ${method_name}Response* response)
  {
% if common_helpers.has_unsupported_parameter(f):
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

<% continue %>
% endif
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("${c_function_name}");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

%for parameter in input_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
%>\
%if common_helpers.is_enum(parameter) == True: 
%if enums[parameter["enum"]].get("generate-mappings", False):
<% 
  map_name = parameter["enum"].lower() + "_input_map_"
  iterator_name = parameter_name + "_imap_it"
%>\
    auto ${iterator_name} = ${map_name}.find(request->${parameter_name}());
    
    if (${iterator_name} == ${map_name}.end()) {
      return ::grpc::Status(::grpc::INVALID_ARGUMENT, "The value for ${parameter_name} was not specified or out of range.");
    }
%if parameter['type'] == "ViConstString": 
    auto ${parameter_name} = static_cast<${parameter['type']}>((${iterator_name}->second).c_str());
%else:
    auto ${parameter_name} = static_cast<${parameter['type']}>(${iterator_name}->second);
%endif
%else:
    auto ${parameter_name} = ${handler_helpers.get_request_value(parameter)};
%endif
% else:
    ${parameter['type']} ${parameter_name} = ${handler_helpers.get_request_value(parameter)};
% endif
%endfor
%for parameter in output_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
%>\
    ${parameter['type']} ${parameter_name} {};
%endfor
    auto status = library_wrapper_->${function}(${handler_helpers.create_args(parameters)});
<%
     parameter['cppName'] = parameter_name
%>\
    response->set_status(status);
%if output_parameters:
    if (status == 0) {
%for parameter in output_parameters:
<%
  parameter_name = common_helpers.camel_to_snake(parameter['cppName'])
%>\
## TODO: Figure out how to format ViSession responses. Look at Cifra's example for an idea.
%if common_helpers.is_enum(parameter) == True:
%if enums[parameter["enum"]].get("generate-mappings", False):
<% 
  map_name = parameter["enum"].lower() + "_output_map_"
  iterator_name = parameter_name + "_imap_it"
%>\
    
    auto ${iterator_name} = ${map_name}.find(${parameter_name});
    if(${iterator_name} == ${map_name}.end()) {
      return ::grpc::Status(::grpc::INVALID_ARGUMENT, "The value for ${parameter_name} was not specified or out of range.");
    }
      response->set_${parameter_name}(static_cast<${namespace_prefix}${parameter["enum"]}>(${iterator_name}->second));
%else:
      response->set_${parameter_name}(static_cast<${namespace_prefix}${parameter["enum"]}>(${parameter_name}));
%endif
% else:
      response->set_${parameter_name}(${parameter_name});
%endif
%endfor
    }
%endif
    return ::grpc::Status::OK;
  }

%endfor
} // namespace grpc
} // namespace ${config["namespace_component"]}
} // namespace ni
