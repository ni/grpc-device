<%
import common_helpers
import proto_helpers
driver_name_pascal = common_helpers.driver_name_to_pascal(data["config"]["driver_name"])
driver_name_caps_underscore = common_helpers.driver_name_add_underscore(data["config"]["driver_name"])
module_name = data["config"]["module_name"]
  
driver_name_camel = common_helpers.pascal_to_camel(driver_name_pascal) 
c_function_prefix = data["config"]["c_function_prefix"] 

%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Proto file for the ${driver_name_camel} Metadata
//---------------------------------------------------------------------
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ni.${module_name.replace("ni", "")}.grpc";
option java_outer_classname = "${driver_name_pascal}";
option csharp_namespace = "NationalInstruments.${driver_name_pascal.replace("Ni", "")}.Grpc";

package ${common_helpers.get_service_namespace(driver_name_caps_underscore)}; 

service ${driver_name_pascal} {
% for function in common_helpers.filter_proto_rpc_functions(data["functions"]):
<% 
   method_name = common_helpers.snake_to_camel(function)
%>\
  rpc ${method_name}(${method_name}Request) returns (${method_name}Response);
% endfor
}

enum ${driver_name_pascal}Attributes {
  ${driver_name_camel.upper()}_UNSPECIFIED = 0;
% for attribute in data["attributes"]:
<%
   attribute_name = data["attributes"][attribute]["name"]
%>\
  ${driver_name_camel.upper()}_${attribute_name} = ${attribute};
% endfor
}

% for enum_list in data["enums"]:
<%
  enum_name = common_helpers.camel_to_snake(common_helpers.pascal_to_camel(enum_list)).upper()
  enums = data["enums"][enum_list]
  allow_alias = proto_helpers.determine_allow_alias(enums)
  used_enums = common_helpers.get_used_enums(data["functions"], data["attributes"])
  if enum_list not in used_enums:
    continue
%>\
enum ${enum_list} {
% if allow_alias == True:
  option allow_alias = true;
% endif
  ${enum_name}_UNSPECIFIED = 0;
<%
nonint_index = 1
%>\
% for values in enums:
% for value in enums[values]:
<%
if isinstance(value["value"], int) is False:
  value["value"] = nonint_index
  nonint_index = nonint_index+1
%>\
  ${enum_name}_${value["name"]} = ${value["value"]};
% endfor   
% endfor
}  
  
% endfor
% for function in common_helpers.filter_proto_rpc_functions(data["functions"]):
<% 
  parameter_array = data["functions"][function]["parameters"] 
  input_parameters = [p for p in parameter_array if common_helpers.is_input_parameter(p)]
  output_parameters = [p for p in parameter_array if common_helpers.is_output_parameter(p)]
  index = 0
%>\
message ${common_helpers.snake_to_camel(function)}Request {
% for parameter in input_parameters:
<%  
  index  = index + 1
  parameter_type = proto_helpers.determine_function_parameter_type(parameter, driver_name_pascal)
%>\
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index};  
% endfor
}

message ${common_helpers.snake_to_camel(function)}Response {
  int32 status = 1;
<%
  index = 1
%>\
% for parameter in output_parameters:
<%  
  index = index + 1
  parameter_type = proto_helpers.determine_function_parameter_type(parameter, driver_name_pascal)
%>\
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index}; 
%endfor  
}

% endfor