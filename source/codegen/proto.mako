<%
import common_helpers
import proto_helpers
driver_name_pascal = common_helpers.driver_name_to_pascal(data["config"]["driver_name"])
driver_name_caps_underscore = common_helpers.driver_name_add_underscore(data["config"]["driver_name"])
module_name = data["config"]["module_name"]
  
driver_name_camel = common_helpers.pascal_to_camel(driver_name_pascal) 
c_function_prefix = data["config"]["c_function_prefix"] 

%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Proto file for the ${driver_name_camel} Metadata
//---------------------------------------------------------------------
Syntax = "proto3";
package ${driver_name_camel}; 
The ${driver_name_pascal}Service definition.

service ${driver_name_pascal}Service {
% for function in data["functions"]:
<% 
   method_name = common_helpers.snake_to_camel(function)
%>\
  rpc ${method_name}(${method_name}Request) returns (${method_name}Response);
% endfor
}

//---------------------------------------------------------------------
// The ${driver_name_pascal}Attributes definition.
//---------------------------------------------------------------------
enum ${driver_name_pascal}Attributes {
  ${c_function_prefix.upper()}UNSPECIFIED = 0;
% for attribute in data["attributes"]:
<%
   attribute_name = data["attributes"][attribute]["name"]
%>\
  ${c_function_prefix.upper()}${attribute_name} = ${attribute};
% endfor
}

//---------------------------------------------------------------------
// The ${driver_name_pascal}Enums definition.
//---------------------------------------------------------------------
enum ${driver_name_pascal}Values {
  ${c_function_prefix.upper()}UNSPECIFIED = 0;
% for enum_list in data["enums"]:
<%
enums = data["enums"][enum_list]
%>\
% for values in enums :
% for value in enums[values] :
<%
enum_name = value["name"].replace((module_name.upper()) + '_VAL_', (c_function_prefix.upper()))
%>\
  ${enum_name} = ${value["value"]};
% endfor   
% endfor    
% endfor
}

% for function in data["functions"]:
<% 
  parameter_array = data["functions"][function]["parameters"] 
  input_parameters = [p for p in parameter_array if common_helpers.is_input_parameter(p)]
  output_parameters = [p for p in parameter_array if common_helpers.is_output_parameter(p)]
  index = 0
%>\

message ${common_helpers.snake_to_camel(function)}Request {
% for parameter in input_parameters:
<%  
  index  = index + 1
  parameter_type = proto_helpers.get_grpc_type_from_ivi(parameter["type"], driver_name_camel)
  if common_helpers.is_array(parameter_type) is True:
    parameter_type = "repeated " + parameter_type.replace('[]', '')
%>\
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index}  
% endfor
}

message ${common_helpers.snake_to_camel(function)}Response {
  int32 status = 1;
<%
  index = 1
%>\
% for parameter in output_parameters:
<%  
  index = index + 1
  parameter_type = proto_helpers.get_grpc_type_from_ivi(parameter["type"], driver_name_camel)
  if common_helpers.is_array(parameter_type) is True:
    parameter_type = "repeated " + parameter_type.replace('[]', '')
%>\
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index}  
%endfor  
}

% endfor