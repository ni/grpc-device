<%
import common_helpers
import proto_helpers

config = data["config"]
attributes = data["attributes"]
enums = data["enums"]
functions = data["functions"]
lookup = data["lookup"]
has_custom_template = False
if len(config["custom_types"]) > 0:
  custom_template = "custom_proto.mako"
  has_custom_template = True
service_class_prefix = config["service_class_prefix"]
attribute_value_prefix = service_class_prefix.upper() + "_ATTRIBUTE"
used_enums = common_helpers.get_used_enums(functions, attributes)
%>\

//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Proto file for the ${config["driver_name"]} Metadata
//---------------------------------------------------------------------
syntax = "proto3";

option java_multiple_files = true;
option java_package = "${config["java_package"]}";
option java_outer_classname = "${service_class_prefix}";
option csharp_namespace = "${config["csharp_namespace"]}";

package grpc.${config["namespace_component"]};

import "session.proto";

service ${service_class_prefix} {
% for function in common_helpers.filter_proto_rpc_functions(functions):
<%
  common_helpers.mark_non_grpc_params(functions[function]["parameters"])
  method_name = common_helpers.snake_to_pascal(function)
%>\
  rpc ${method_name}(${method_name}Request) returns (${method_name}Response);
% endfor
}

enum ${service_class_prefix}Attributes {
  ${attribute_value_prefix}_UNSPECIFIED = 0;
% for attribute in attributes:
<%
   attribute_name = attributes[attribute]["name"]
%>\
  ${attribute_value_prefix}_${attribute_name} = ${attribute};
% endfor
}

% for enum_name in (e for e in enums if e in used_enums):
<%
  enum_value_prefix = common_helpers.pascal_to_snake(enum_name).upper()
  enum = enums[enum_name]
  allow_alias = proto_helpers.determine_allow_alias(enum)
%>\
enum ${enum_name} {
% if allow_alias == True:
  option allow_alias = true;
% endif
  ${enum_value_prefix}_UNSPECIFIED = 0;
<%
nonint_index = 1
%>\
% for value in enum["values"]:
% if enum.get("generate-mappings", false):
  ${enum_value_prefix}_${value["name"]} = ${nonint_index};
<%
  nonint_index = nonint_index+1
%>\
% else:
  ${enum_value_prefix}_${value["name"]} = ${value["value"]};
%endif
% endfor
}

% endfor
%if has_custom_template:
${lookup.get_template(custom_template).render()}
%endif
% for function in common_helpers.filter_proto_rpc_functions(functions):
<%
  parameter_array = proto_helpers.filter_parameters_for_grpc_fields(functions[function]["parameters"])
  input_parameters = [p for p in parameter_array if common_helpers.is_input_parameter(p)]
  if common_helpers.is_init_method(functions[function]):
    session_name_param = {'direction': 'in','name': 'session_name','type': 'ViString'}
    input_parameters.insert(0, session_name_param)
  output_parameters = [p for p in parameter_array if common_helpers.is_output_parameter(p)]
  index = 0
%>\
message ${common_helpers.snake_to_pascal(function)}Request {
% for parameter in input_parameters:
<%
  index  = index + 1
  if 'grpc_type' in parameter:
    parameter_type = parameter['grpc_type']
  else:
    parameter_type = proto_helpers.determine_function_parameter_type(parameter, service_class_prefix)
%>\
%if 'enum' in parameter:
<%
  index = index + 1
  is_array = common_helpers.is_array(parameter["type"])
  non_enum_type = proto_helpers.get_grpc_type_from_ivi(parameter["type"], is_array, service_class_prefix)
  parameter_name = common_helpers.camel_to_snake(parameter["name"])
%>\
  oneof ${parameter_name}_enum {
    ${parameter_type} ${parameter_name} = ${index-1};
    ${non_enum_type} ${parameter_name}_raw = ${index};
  }
%else:
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index};
%endif
% endfor
}

message ${common_helpers.snake_to_pascal(function)}Response {
  int32 status = 1;
<%
  index = 1
%>\
% for parameter in output_parameters:
<%
  index = index + 1
  if "grpc_type" in parameter:
    parameter_type = parameter["grpc_type"]
  else:
    parameter_type = proto_helpers.determine_function_parameter_type(parameter, service_class_prefix)
%>\
%if 'enum' in parameter:
<%
  index = index + 1
  is_array = common_helpers.is_array(parameter["type"])
  non_enum_type = proto_helpers.get_grpc_type_from_ivi(parameter["type"], is_array, service_class_prefix)
%>\
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index-1};
  ${non_enum_type} ${common_helpers.camel_to_snake(parameter["name"])}_raw = ${index};
%else:
  ${parameter_type} ${common_helpers.camel_to_snake(parameter["name"])} = ${index};
%endif
%endfor
}

% endfor