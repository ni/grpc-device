<%
import common_helpers
import handler_helpers

config = data['config']
functions = data['functions']

service_class_prefix = config["service_class_prefix"]
include_guard_name = handler_helpers.get_include_guard_name(config, "_LIBRARY_WRAPPER_H")
%>\
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with ${config["driver_name"]}
//---------------------------------------------------------------------
## Define section
#ifndef ${include_guard_name}
#define ${include_guard_name}

## Include section
#include <grpcpp/grpcpp.h>
#include <${config["c_header"]}>

namespace grpc {
namespace ${config["namespace_component"]} {

class ${service_class_prefix}LibraryInterface {
 public:
  virtual ~${service_class_prefix}LibraryInterface() {}

% for method_name in handler_helpers.filter_api_functions(functions):
<%
  f = functions[method_name]
  parameters = f['parameters']
  handler_helpers.sanitize_names(parameters)
  return_type = f['returns']
%>\
  virtual ${return_type} ${method_name}(${handler_helpers.create_params(parameters)}) = 0;
%endfor
};

}  // namespace ${config["namespace_component"]}
}  // namespace grpc
#endif  // ${include_guard_name}
