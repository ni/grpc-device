//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-Digital Pattern Driver Metadata
//---------------------------------------------------------------------
#include "nidigitalpattern_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niDigital_64.dll";
#else
static const char* kLibraryName = "libnidigital.so";
#endif

namespace nidigitalpattern_grpc {

NiDigitalLibrary::NiDigitalLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Abort = reinterpret_cast<AbortPtr>(shared_library_.get_function_pointer("niDigital_Abort"));
  function_pointers_.AbortKeepAlive = reinterpret_cast<AbortKeepAlivePtr>(shared_library_.get_function_pointer("niDigital_AbortKeepAlive"));
  function_pointers_.ApplyLevelsAndTiming = reinterpret_cast<ApplyLevelsAndTimingPtr>(shared_library_.get_function_pointer("niDigital_ApplyLevelsAndTiming"));
  function_pointers_.ApplyTDROffsets = reinterpret_cast<ApplyTDROffsetsPtr>(shared_library_.get_function_pointer("niDigital_ApplyTDROffsets"));
  function_pointers_.BurstPattern = reinterpret_cast<BurstPatternPtr>(shared_library_.get_function_pointer("niDigital_BurstPattern"));
  function_pointers_.BurstPatternSynchronized = reinterpret_cast<BurstPatternSynchronizedPtr>(shared_library_.get_function_pointer("niDigital_BurstPatternSynchronized"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niDigital_ClearError"));
  function_pointers_.ClockGeneratorAbort = reinterpret_cast<ClockGeneratorAbortPtr>(shared_library_.get_function_pointer("niDigital_ClockGenerator_Abort"));
  function_pointers_.ClockGeneratorGenerateClock = reinterpret_cast<ClockGeneratorGenerateClockPtr>(shared_library_.get_function_pointer("niDigital_ClockGenerator_GenerateClock"));
  function_pointers_.ClockGeneratorInitiate = reinterpret_cast<ClockGeneratorInitiatePtr>(shared_library_.get_function_pointer("niDigital_ClockGenerator_Initiate"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niDigital_close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niDigital_Commit"));
  function_pointers_.ConfigureActiveLoadLevels = reinterpret_cast<ConfigureActiveLoadLevelsPtr>(shared_library_.get_function_pointer("niDigital_ConfigureActiveLoadLevels"));
  function_pointers_.ConfigureCycleNumberHistoryRAMTrigger = reinterpret_cast<ConfigureCycleNumberHistoryRAMTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigureCycleNumberHistoryRAMTrigger"));
  function_pointers_.ConfigureDigitalEdgeConditionalJumpTrigger = reinterpret_cast<ConfigureDigitalEdgeConditionalJumpTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigureDigitalEdgeConditionalJumpTrigger"));
  function_pointers_.ConfigureDigitalEdgeStartTrigger = reinterpret_cast<ConfigureDigitalEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigureDigitalEdgeStartTrigger"));
  function_pointers_.ConfigureFirstFailureHistoryRAMTrigger = reinterpret_cast<ConfigureFirstFailureHistoryRAMTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigureFirstFailureHistoryRAMTrigger"));
  function_pointers_.ConfigureHistoryRAMCyclesToAcquire = reinterpret_cast<ConfigureHistoryRAMCyclesToAcquirePtr>(shared_library_.get_function_pointer("niDigital_ConfigureHistoryRAMCyclesToAcquire"));
  function_pointers_.ConfigurePatternBurstSites = reinterpret_cast<ConfigurePatternBurstSitesPtr>(shared_library_.get_function_pointer("niDigital_ConfigurePatternBurstSites"));
  function_pointers_.ConfigurePatternLabelHistoryRAMTrigger = reinterpret_cast<ConfigurePatternLabelHistoryRAMTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigurePatternLabelHistoryRAMTrigger"));
  function_pointers_.ConfigureSoftwareEdgeConditionalJumpTrigger = reinterpret_cast<ConfigureSoftwareEdgeConditionalJumpTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigureSoftwareEdgeConditionalJumpTrigger"));
  function_pointers_.ConfigureSoftwareEdgeStartTrigger = reinterpret_cast<ConfigureSoftwareEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niDigital_ConfigureSoftwareEdgeStartTrigger"));
  function_pointers_.ConfigureStartLabel = reinterpret_cast<ConfigureStartLabelPtr>(shared_library_.get_function_pointer("niDigital_ConfigureStartLabel"));
  function_pointers_.ConfigureTerminationMode = reinterpret_cast<ConfigureTerminationModePtr>(shared_library_.get_function_pointer("niDigital_ConfigureTerminationMode"));
  function_pointers_.ConfigureTimeSetCompareEdgesStrobe = reinterpret_cast<ConfigureTimeSetCompareEdgesStrobePtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetCompareEdgesStrobe"));
  function_pointers_.ConfigureTimeSetCompareEdgesStrobe2x = reinterpret_cast<ConfigureTimeSetCompareEdgesStrobe2xPtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetCompareEdgesStrobe2x"));
  function_pointers_.ConfigureTimeSetDriveEdges = reinterpret_cast<ConfigureTimeSetDriveEdgesPtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetDriveEdges"));
  function_pointers_.ConfigureTimeSetDriveEdges2x = reinterpret_cast<ConfigureTimeSetDriveEdges2xPtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetDriveEdges2x"));
  function_pointers_.ConfigureTimeSetDriveFormat = reinterpret_cast<ConfigureTimeSetDriveFormatPtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetDriveFormat"));
  function_pointers_.ConfigureTimeSetEdge = reinterpret_cast<ConfigureTimeSetEdgePtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetEdge"));
  function_pointers_.ConfigureTimeSetEdgeMultiplier = reinterpret_cast<ConfigureTimeSetEdgeMultiplierPtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetEdgeMultiplier"));
  function_pointers_.ConfigureTimeSetPeriod = reinterpret_cast<ConfigureTimeSetPeriodPtr>(shared_library_.get_function_pointer("niDigital_ConfigureTimeSetPeriod"));
  function_pointers_.ConfigureVoltageLevels = reinterpret_cast<ConfigureVoltageLevelsPtr>(shared_library_.get_function_pointer("niDigital_ConfigureVoltageLevels"));
  function_pointers_.CreateCaptureWaveformFromFileDigicapture = reinterpret_cast<CreateCaptureWaveformFromFileDigicapturePtr>(shared_library_.get_function_pointer("niDigital_CreateCaptureWaveformFromFileDigicapture"));
  function_pointers_.CreateCaptureWaveformParallel = reinterpret_cast<CreateCaptureWaveformParallelPtr>(shared_library_.get_function_pointer("niDigital_CreateCaptureWaveformParallel"));
  function_pointers_.CreateCaptureWaveformSerial = reinterpret_cast<CreateCaptureWaveformSerialPtr>(shared_library_.get_function_pointer("niDigital_CreateCaptureWaveformSerial"));
  function_pointers_.CreateChannelMap = reinterpret_cast<CreateChannelMapPtr>(shared_library_.get_function_pointer("niDigital_CreateChannelMap"));
  function_pointers_.CreatePinGroup = reinterpret_cast<CreatePinGroupPtr>(shared_library_.get_function_pointer("niDigital_CreatePinGroup"));
  function_pointers_.CreatePinMap = reinterpret_cast<CreatePinMapPtr>(shared_library_.get_function_pointer("niDigital_CreatePinMap"));
  function_pointers_.CreateSourceWaveformFromFileTDMS = reinterpret_cast<CreateSourceWaveformFromFileTDMSPtr>(shared_library_.get_function_pointer("niDigital_CreateSourceWaveformFromFileTDMS"));
  function_pointers_.CreateSourceWaveformParallel = reinterpret_cast<CreateSourceWaveformParallelPtr>(shared_library_.get_function_pointer("niDigital_CreateSourceWaveformParallel"));
  function_pointers_.CreateSourceWaveformSerial = reinterpret_cast<CreateSourceWaveformSerialPtr>(shared_library_.get_function_pointer("niDigital_CreateSourceWaveformSerial"));
  function_pointers_.CreateTimeSet = reinterpret_cast<CreateTimeSetPtr>(shared_library_.get_function_pointer("niDigital_CreateTimeSet"));
  function_pointers_.DeleteAllTimeSets = reinterpret_cast<DeleteAllTimeSetsPtr>(shared_library_.get_function_pointer("niDigital_DeleteAllTimeSets"));
  function_pointers_.DisableConditionalJumpTrigger = reinterpret_cast<DisableConditionalJumpTriggerPtr>(shared_library_.get_function_pointer("niDigital_DisableConditionalJumpTrigger"));
  function_pointers_.DisableSites = reinterpret_cast<DisableSitesPtr>(shared_library_.get_function_pointer("niDigital_DisableSites"));
  function_pointers_.DisableStartTrigger = reinterpret_cast<DisableStartTriggerPtr>(shared_library_.get_function_pointer("niDigital_DisableStartTrigger"));
  function_pointers_.EnableMatchFailCombination = reinterpret_cast<EnableMatchFailCombinationPtr>(shared_library_.get_function_pointer("niDigital_EnableMatchFailCombination"));
  function_pointers_.EnableSites = reinterpret_cast<EnableSitesPtr>(shared_library_.get_function_pointer("niDigital_EnableSites"));
  function_pointers_.EndChannelMap = reinterpret_cast<EndChannelMapPtr>(shared_library_.get_function_pointer("niDigital_EndChannelMap"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_.get_function_pointer("niDigital_error_message"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_.get_function_pointer("niDigital_ExportSignal"));
  function_pointers_.FetchCaptureWaveformU32 = reinterpret_cast<FetchCaptureWaveformU32Ptr>(shared_library_.get_function_pointer("niDigital_FetchCaptureWaveformU32"));
  function_pointers_.FetchHistoryRAMCycleInformation = reinterpret_cast<FetchHistoryRAMCycleInformationPtr>(shared_library_.get_function_pointer("niDigital_FetchHistoryRAMCycleInformation"));
  function_pointers_.FetchHistoryRAMCyclePinData = reinterpret_cast<FetchHistoryRAMCyclePinDataPtr>(shared_library_.get_function_pointer("niDigital_FetchHistoryRAMCyclePinData"));
  function_pointers_.FetchHistoryRAMScanCycleNumber = reinterpret_cast<FetchHistoryRAMScanCycleNumberPtr>(shared_library_.get_function_pointer("niDigital_FetchHistoryRAMScanCycleNumber"));
  function_pointers_.FrequencyCounterConfigureMeasurementMode = reinterpret_cast<FrequencyCounterConfigureMeasurementModePtr>(shared_library_.get_function_pointer("niDigital_FrequencyCounter_ConfigureMeasurementMode"));
  function_pointers_.FrequencyCounterConfigureMeasurementTime = reinterpret_cast<FrequencyCounterConfigureMeasurementTimePtr>(shared_library_.get_function_pointer("niDigital_FrequencyCounter_ConfigureMeasurementTime"));
  function_pointers_.FrequencyCounterMeasureFrequency = reinterpret_cast<FrequencyCounterMeasureFrequencyPtr>(shared_library_.get_function_pointer("niDigital_FrequencyCounter_MeasureFrequency"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDigital_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDigital_GetAttributeViInt32"));
  function_pointers_.GetAttributeViInt64 = reinterpret_cast<GetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niDigital_GetAttributeViInt64"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDigital_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niDigital_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niDigital_GetAttributeViString"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niDigital_GetChannelName"));
  function_pointers_.GetChannelNameFromString = reinterpret_cast<GetChannelNameFromStringPtr>(shared_library_.get_function_pointer("niDigital_GetChannelNameFromString"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niDigital_GetError"));
  function_pointers_.GetFailCount = reinterpret_cast<GetFailCountPtr>(shared_library_.get_function_pointer("niDigital_GetFailCount"));
  function_pointers_.GetHistoryRAMSampleCount = reinterpret_cast<GetHistoryRAMSampleCountPtr>(shared_library_.get_function_pointer("niDigital_GetHistoryRAMSampleCount"));
  function_pointers_.GetPatternName = reinterpret_cast<GetPatternNamePtr>(shared_library_.get_function_pointer("niDigital_GetPatternName"));
  function_pointers_.GetPatternPinIndexes = reinterpret_cast<GetPatternPinIndexesPtr>(shared_library_.get_function_pointer("niDigital_GetPatternPinIndexes"));
  function_pointers_.GetPatternPinList = reinterpret_cast<GetPatternPinListPtr>(shared_library_.get_function_pointer("niDigital_GetPatternPinList"));
  function_pointers_.GetPinName = reinterpret_cast<GetPinNamePtr>(shared_library_.get_function_pointer("niDigital_GetPinName"));
  function_pointers_.GetPinResultsPinInformation = reinterpret_cast<GetPinResultsPinInformationPtr>(shared_library_.get_function_pointer("niDigital_GetPinResultsPinInformation"));
  function_pointers_.GetSitePassFail = reinterpret_cast<GetSitePassFailPtr>(shared_library_.get_function_pointer("niDigital_GetSitePassFail"));
  function_pointers_.GetSiteResultsSiteNumbers = reinterpret_cast<GetSiteResultsSiteNumbersPtr>(shared_library_.get_function_pointer("niDigital_GetSiteResultsSiteNumbers"));
  function_pointers_.GetTimeSetDriveFormat = reinterpret_cast<GetTimeSetDriveFormatPtr>(shared_library_.get_function_pointer("niDigital_GetTimeSetDriveFormat"));
  function_pointers_.GetTimeSetEdge = reinterpret_cast<GetTimeSetEdgePtr>(shared_library_.get_function_pointer("niDigital_GetTimeSetEdge"));
  function_pointers_.GetTimeSetEdgeMultiplier = reinterpret_cast<GetTimeSetEdgeMultiplierPtr>(shared_library_.get_function_pointer("niDigital_GetTimeSetEdgeMultiplier"));
  function_pointers_.GetTimeSetName = reinterpret_cast<GetTimeSetNamePtr>(shared_library_.get_function_pointer("niDigital_GetTimeSetName"));
  function_pointers_.GetTimeSetPeriod = reinterpret_cast<GetTimeSetPeriodPtr>(shared_library_.get_function_pointer("niDigital_GetTimeSetPeriod"));
  function_pointers_.Init = reinterpret_cast<InitPtr>(shared_library_.get_function_pointer("niDigital_init"));
  function_pointers_.InitWithOptions = reinterpret_cast<InitWithOptionsPtr>(shared_library_.get_function_pointer("niDigital_InitWithOptions"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("niDigital_Initiate"));
  function_pointers_.IsDone = reinterpret_cast<IsDonePtr>(shared_library_.get_function_pointer("niDigital_IsDone"));
  function_pointers_.IsSiteEnabled = reinterpret_cast<IsSiteEnabledPtr>(shared_library_.get_function_pointer("niDigital_IsSiteEnabled"));
  function_pointers_.LoadLevels = reinterpret_cast<LoadLevelsPtr>(shared_library_.get_function_pointer("niDigital_LoadLevels"));
  function_pointers_.LoadPattern = reinterpret_cast<LoadPatternPtr>(shared_library_.get_function_pointer("niDigital_LoadPattern"));
  function_pointers_.LoadPinMap = reinterpret_cast<LoadPinMapPtr>(shared_library_.get_function_pointer("niDigital_LoadPinMap"));
  function_pointers_.LoadSpecifications = reinterpret_cast<LoadSpecificationsPtr>(shared_library_.get_function_pointer("niDigital_LoadSpecifications"));
  function_pointers_.LoadTiming = reinterpret_cast<LoadTimingPtr>(shared_library_.get_function_pointer("niDigital_LoadTiming"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niDigital_LockSession"));
  function_pointers_.MapPinToChannel = reinterpret_cast<MapPinToChannelPtr>(shared_library_.get_function_pointer("niDigital_MapPinToChannel"));
  function_pointers_.PPMUConfigureApertureTime = reinterpret_cast<PPMUConfigureApertureTimePtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureApertureTime"));
  function_pointers_.PPMUConfigureCurrentLevel = reinterpret_cast<PPMUConfigureCurrentLevelPtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureCurrentLevel"));
  function_pointers_.PPMUConfigureCurrentLevelRange = reinterpret_cast<PPMUConfigureCurrentLevelRangePtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureCurrentLevelRange"));
  function_pointers_.PPMUConfigureCurrentLimit = reinterpret_cast<PPMUConfigureCurrentLimitPtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureCurrentLimit"));
  function_pointers_.PPMUConfigureCurrentLimitRange = reinterpret_cast<PPMUConfigureCurrentLimitRangePtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureCurrentLimitRange"));
  function_pointers_.PPMUConfigureOutputFunction = reinterpret_cast<PPMUConfigureOutputFunctionPtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureOutputFunction"));
  function_pointers_.PPMUConfigureVoltageLevel = reinterpret_cast<PPMUConfigureVoltageLevelPtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureVoltageLevel"));
  function_pointers_.PPMUConfigureVoltageLimits = reinterpret_cast<PPMUConfigureVoltageLimitsPtr>(shared_library_.get_function_pointer("niDigital_PPMU_ConfigureVoltageLimits"));
  function_pointers_.PPMUMeasure = reinterpret_cast<PPMUMeasurePtr>(shared_library_.get_function_pointer("niDigital_PPMU_Measure"));
  function_pointers_.PPMUSource = reinterpret_cast<PPMUSourcePtr>(shared_library_.get_function_pointer("niDigital_PPMU_Source"));
  function_pointers_.ReadSequencerFlag = reinterpret_cast<ReadSequencerFlagPtr>(shared_library_.get_function_pointer("niDigital_ReadSequencerFlag"));
  function_pointers_.ReadSequencerRegister = reinterpret_cast<ReadSequencerRegisterPtr>(shared_library_.get_function_pointer("niDigital_ReadSequencerRegister"));
  function_pointers_.ReadStatic = reinterpret_cast<ReadStaticPtr>(shared_library_.get_function_pointer("niDigital_ReadStatic"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niDigital_reset"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("niDigital_ResetAttribute"));
  function_pointers_.ResetDevice = reinterpret_cast<ResetDevicePtr>(shared_library_.get_function_pointer("niDigital_ResetDevice"));
  function_pointers_.SelectFunction = reinterpret_cast<SelectFunctionPtr>(shared_library_.get_function_pointer("niDigital_SelectFunction"));
  function_pointers_.SelfCalibrate = reinterpret_cast<SelfCalibratePtr>(shared_library_.get_function_pointer("niDigital_SelfCalibrate"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niDigital_self_test"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("niDigital_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDigital_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDigital_SetAttributeViInt32"));
  function_pointers_.SetAttributeViInt64 = reinterpret_cast<SetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niDigital_SetAttributeViInt64"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDigital_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niDigital_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niDigital_SetAttributeViString"));
  function_pointers_.TDR = reinterpret_cast<TDRPtr>(shared_library_.get_function_pointer("niDigital_TDR"));
  function_pointers_.UnloadAllPatterns = reinterpret_cast<UnloadAllPatternsPtr>(shared_library_.get_function_pointer("niDigital_UnloadAllPatterns"));
  function_pointers_.UnloadSpecifications = reinterpret_cast<UnloadSpecificationsPtr>(shared_library_.get_function_pointer("niDigital_UnloadSpecifications"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niDigital_UnlockSession"));
  function_pointers_.WaitUntilDone = reinterpret_cast<WaitUntilDonePtr>(shared_library_.get_function_pointer("niDigital_WaitUntilDone"));
  function_pointers_.WriteSequencerFlag = reinterpret_cast<WriteSequencerFlagPtr>(shared_library_.get_function_pointer("niDigital_WriteSequencerFlag"));
  function_pointers_.WriteSequencerFlagSynchronized = reinterpret_cast<WriteSequencerFlagSynchronizedPtr>(shared_library_.get_function_pointer("niDigital_WriteSequencerFlagSynchronized"));
  function_pointers_.WriteSequencerRegister = reinterpret_cast<WriteSequencerRegisterPtr>(shared_library_.get_function_pointer("niDigital_WriteSequencerRegister"));
  function_pointers_.WriteSourceWaveformBroadcastU32 = reinterpret_cast<WriteSourceWaveformBroadcastU32Ptr>(shared_library_.get_function_pointer("niDigital_WriteSourceWaveformBroadcastU32"));
  function_pointers_.WriteSourceWaveformDataFromFileTDMS = reinterpret_cast<WriteSourceWaveformDataFromFileTDMSPtr>(shared_library_.get_function_pointer("niDigital_WriteSourceWaveformDataFromFileTDMS"));
  function_pointers_.WriteSourceWaveformSiteUniqueU32 = reinterpret_cast<WriteSourceWaveformSiteUniqueU32Ptr>(shared_library_.get_function_pointer("niDigital_WriteSourceWaveformSiteUniqueU32"));
  function_pointers_.WriteStatic = reinterpret_cast<WriteStaticPtr>(shared_library_.get_function_pointer("niDigital_WriteStatic"));
}

NiDigitalLibrary::~NiDigitalLibrary()
{
}

::grpc::Status NiDigitalLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiDigitalLibrary::Abort(ViSession vi)
{
  if (!function_pointers_.Abort) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_Abort.");
  }
  return function_pointers_.Abort(vi);
}

ViStatus NiDigitalLibrary::AbortKeepAlive(ViSession vi)
{
  if (!function_pointers_.AbortKeepAlive) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_AbortKeepAlive.");
  }
  return function_pointers_.AbortKeepAlive(vi);
}

ViStatus NiDigitalLibrary::ApplyLevelsAndTiming(ViSession vi, ViConstString siteList, ViConstString levelsSheet, ViConstString timingSheet, ViConstString initialStateHighPins, ViConstString initialStateLowPins, ViConstString initialStateTristatePins)
{
  if (!function_pointers_.ApplyLevelsAndTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ApplyLevelsAndTiming.");
  }
  return function_pointers_.ApplyLevelsAndTiming(vi, siteList, levelsSheet, timingSheet, initialStateHighPins, initialStateLowPins, initialStateTristatePins);
}

ViStatus NiDigitalLibrary::ApplyTDROffsets(ViSession vi, ViConstString channelList, ViInt32 numOffsets, ViReal64 offsets[])
{
  if (!function_pointers_.ApplyTDROffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ApplyTDROffsets.");
  }
  return function_pointers_.ApplyTDROffsets(vi, channelList, numOffsets, offsets);
}

ViStatus NiDigitalLibrary::BurstPattern(ViSession vi, ViConstString siteList, ViConstString startLabel, ViBoolean selectDigitalFunction, ViBoolean waitUntilDone, ViReal64 timeout)
{
  if (!function_pointers_.BurstPattern) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_BurstPattern.");
  }
  return function_pointers_.BurstPattern(vi, siteList, startLabel, selectDigitalFunction, waitUntilDone, timeout);
}

ViStatus NiDigitalLibrary::BurstPatternSynchronized(ViUInt32 sessionCount, ViSession sessions[], ViConstString siteList, ViConstString startLabel, ViBoolean selectDigitalFunction, ViBoolean waitUntilDone, ViReal64 timeout)
{
  if (!function_pointers_.BurstPatternSynchronized) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_BurstPatternSynchronized.");
  }
  return function_pointers_.BurstPatternSynchronized(sessionCount, sessions, siteList, startLabel, selectDigitalFunction, waitUntilDone, timeout);
}

ViStatus NiDigitalLibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ClearError.");
  }
  return function_pointers_.ClearError(vi);
}

ViStatus NiDigitalLibrary::ClockGeneratorAbort(ViSession vi, ViConstString channelList)
{
  if (!function_pointers_.ClockGeneratorAbort) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ClockGenerator_Abort.");
  }
  return function_pointers_.ClockGeneratorAbort(vi, channelList);
}

ViStatus NiDigitalLibrary::ClockGeneratorGenerateClock(ViSession vi, ViConstString channelList, ViReal64 frequency, ViBoolean selectDigitalFunction)
{
  if (!function_pointers_.ClockGeneratorGenerateClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ClockGenerator_GenerateClock.");
  }
  return function_pointers_.ClockGeneratorGenerateClock(vi, channelList, frequency, selectDigitalFunction);
}

ViStatus NiDigitalLibrary::ClockGeneratorInitiate(ViSession vi, ViConstString channelList)
{
  if (!function_pointers_.ClockGeneratorInitiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ClockGenerator_Initiate.");
  }
  return function_pointers_.ClockGeneratorInitiate(vi, channelList);
}

ViStatus NiDigitalLibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_close.");
  }
  return function_pointers_.Close(vi);
}

ViStatus NiDigitalLibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_Commit.");
  }
  return function_pointers_.Commit(vi);
}

ViStatus NiDigitalLibrary::ConfigureActiveLoadLevels(ViSession vi, ViConstString channelList, ViReal64 iol, ViReal64 ioh, ViReal64 vcom)
{
  if (!function_pointers_.ConfigureActiveLoadLevels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureActiveLoadLevels.");
  }
  return function_pointers_.ConfigureActiveLoadLevels(vi, channelList, iol, ioh, vcom);
}

ViStatus NiDigitalLibrary::ConfigureCycleNumberHistoryRAMTrigger(ViSession vi, ViInt64 cycleNumber, ViInt32 pretriggerSamples)
{
  if (!function_pointers_.ConfigureCycleNumberHistoryRAMTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureCycleNumberHistoryRAMTrigger.");
  }
  return function_pointers_.ConfigureCycleNumberHistoryRAMTrigger(vi, cycleNumber, pretriggerSamples);
}

ViStatus NiDigitalLibrary::ConfigureDigitalEdgeConditionalJumpTrigger(ViSession vi, ViConstString triggerIdentifier, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeConditionalJumpTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureDigitalEdgeConditionalJumpTrigger.");
  }
  return function_pointers_.ConfigureDigitalEdgeConditionalJumpTrigger(vi, triggerIdentifier, source, edge);
}

ViStatus NiDigitalLibrary::ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureDigitalEdgeStartTrigger.");
  }
  return function_pointers_.ConfigureDigitalEdgeStartTrigger(vi, source, edge);
}

ViStatus NiDigitalLibrary::ConfigureFirstFailureHistoryRAMTrigger(ViSession vi, ViInt32 pretriggerSamples)
{
  if (!function_pointers_.ConfigureFirstFailureHistoryRAMTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureFirstFailureHistoryRAMTrigger.");
  }
  return function_pointers_.ConfigureFirstFailureHistoryRAMTrigger(vi, pretriggerSamples);
}

ViStatus NiDigitalLibrary::ConfigureHistoryRAMCyclesToAcquire(ViSession vi, ViInt32 cyclesToAcquire)
{
  if (!function_pointers_.ConfigureHistoryRAMCyclesToAcquire) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureHistoryRAMCyclesToAcquire.");
  }
  return function_pointers_.ConfigureHistoryRAMCyclesToAcquire(vi, cyclesToAcquire);
}

ViStatus NiDigitalLibrary::ConfigurePatternBurstSites(ViSession vi, ViConstString siteList)
{
  if (!function_pointers_.ConfigurePatternBurstSites) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigurePatternBurstSites.");
  }
  return function_pointers_.ConfigurePatternBurstSites(vi, siteList);
}

ViStatus NiDigitalLibrary::ConfigurePatternLabelHistoryRAMTrigger(ViSession vi, ViConstString label, ViInt64 vectorOffset, ViInt64 cycleOffset, ViInt32 pretriggerSamples)
{
  if (!function_pointers_.ConfigurePatternLabelHistoryRAMTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigurePatternLabelHistoryRAMTrigger.");
  }
  return function_pointers_.ConfigurePatternLabelHistoryRAMTrigger(vi, label, vectorOffset, cycleOffset, pretriggerSamples);
}

ViStatus NiDigitalLibrary::ConfigureSoftwareEdgeConditionalJumpTrigger(ViSession vi, ViConstString triggerIdentifier)
{
  if (!function_pointers_.ConfigureSoftwareEdgeConditionalJumpTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureSoftwareEdgeConditionalJumpTrigger.");
  }
  return function_pointers_.ConfigureSoftwareEdgeConditionalJumpTrigger(vi, triggerIdentifier);
}

ViStatus NiDigitalLibrary::ConfigureSoftwareEdgeStartTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureSoftwareEdgeStartTrigger.");
  }
  return function_pointers_.ConfigureSoftwareEdgeStartTrigger(vi);
}

ViStatus NiDigitalLibrary::ConfigureStartLabel(ViSession vi, ViConstString label)
{
  if (!function_pointers_.ConfigureStartLabel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureStartLabel.");
  }
  return function_pointers_.ConfigureStartLabel(vi, label);
}

ViStatus NiDigitalLibrary::ConfigureTerminationMode(ViSession vi, ViConstString channelList, ViInt32 mode)
{
  if (!function_pointers_.ConfigureTerminationMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTerminationMode.");
  }
  return function_pointers_.ConfigureTerminationMode(vi, channelList, mode);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetCompareEdgesStrobe(ViSession vi, ViConstString pinList, ViConstString timeSet, ViReal64 strobeEdge)
{
  if (!function_pointers_.ConfigureTimeSetCompareEdgesStrobe) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetCompareEdgesStrobe.");
  }
  return function_pointers_.ConfigureTimeSetCompareEdgesStrobe(vi, pinList, timeSet, strobeEdge);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetCompareEdgesStrobe2x(ViSession vi, ViConstString pinList, ViConstString timeSet, ViReal64 strobeEdge, ViReal64 strobe2Edge)
{
  if (!function_pointers_.ConfigureTimeSetCompareEdgesStrobe2x) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetCompareEdgesStrobe2x.");
  }
  return function_pointers_.ConfigureTimeSetCompareEdgesStrobe2x(vi, pinList, timeSet, strobeEdge, strobe2Edge);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetDriveEdges(ViSession vi, ViConstString pinList, ViConstString timeSet, ViInt32 format, ViReal64 driveOnEdge, ViReal64 driveDataEdge, ViReal64 driveReturnEdge, ViReal64 driveOffEdge)
{
  if (!function_pointers_.ConfigureTimeSetDriveEdges) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetDriveEdges.");
  }
  return function_pointers_.ConfigureTimeSetDriveEdges(vi, pinList, timeSet, format, driveOnEdge, driveDataEdge, driveReturnEdge, driveOffEdge);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetDriveEdges2x(ViSession vi, ViConstString pinList, ViConstString timeSet, ViInt32 format, ViReal64 driveOnEdge, ViReal64 driveDataEdge, ViReal64 driveReturnEdge, ViReal64 driveOffEdge, ViReal64 driveData2Edge, ViReal64 driveReturn2Edge)
{
  if (!function_pointers_.ConfigureTimeSetDriveEdges2x) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetDriveEdges2x.");
  }
  return function_pointers_.ConfigureTimeSetDriveEdges2x(vi, pinList, timeSet, format, driveOnEdge, driveDataEdge, driveReturnEdge, driveOffEdge, driveData2Edge, driveReturn2Edge);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetDriveFormat(ViSession vi, ViConstString pinList, ViConstString timeSet, ViInt32 driveFormat)
{
  if (!function_pointers_.ConfigureTimeSetDriveFormat) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetDriveFormat.");
  }
  return function_pointers_.ConfigureTimeSetDriveFormat(vi, pinList, timeSet, driveFormat);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetEdge(ViSession vi, ViConstString pinList, ViConstString timeSet, ViInt32 edge, ViReal64 time)
{
  if (!function_pointers_.ConfigureTimeSetEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetEdge.");
  }
  return function_pointers_.ConfigureTimeSetEdge(vi, pinList, timeSet, edge, time);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetEdgeMultiplier(ViSession vi, ViConstString pinList, ViConstString timeSet, ViInt32 edgeMultiplier)
{
  if (!function_pointers_.ConfigureTimeSetEdgeMultiplier) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetEdgeMultiplier.");
  }
  return function_pointers_.ConfigureTimeSetEdgeMultiplier(vi, pinList, timeSet, edgeMultiplier);
}

ViStatus NiDigitalLibrary::ConfigureTimeSetPeriod(ViSession vi, ViConstString timeSet, ViReal64 period)
{
  if (!function_pointers_.ConfigureTimeSetPeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureTimeSetPeriod.");
  }
  return function_pointers_.ConfigureTimeSetPeriod(vi, timeSet, period);
}

ViStatus NiDigitalLibrary::ConfigureVoltageLevels(ViSession vi, ViConstString channelList, ViReal64 vil, ViReal64 vih, ViReal64 vol, ViReal64 voh, ViReal64 vterm)
{
  if (!function_pointers_.ConfigureVoltageLevels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ConfigureVoltageLevels.");
  }
  return function_pointers_.ConfigureVoltageLevels(vi, channelList, vil, vih, vol, voh, vterm);
}

ViStatus NiDigitalLibrary::CreateCaptureWaveformFromFileDigicapture(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath)
{
  if (!function_pointers_.CreateCaptureWaveformFromFileDigicapture) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateCaptureWaveformFromFileDigicapture.");
  }
  return function_pointers_.CreateCaptureWaveformFromFileDigicapture(vi, waveformName, waveformFilePath);
}

ViStatus NiDigitalLibrary::CreateCaptureWaveformParallel(ViSession vi, ViConstString pinList, ViConstString waveformName)
{
  if (!function_pointers_.CreateCaptureWaveformParallel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateCaptureWaveformParallel.");
  }
  return function_pointers_.CreateCaptureWaveformParallel(vi, pinList, waveformName);
}

ViStatus NiDigitalLibrary::CreateCaptureWaveformSerial(ViSession vi, ViConstString pinList, ViConstString waveformName, ViUInt32 sampleWidth, ViInt32 bitOrder)
{
  if (!function_pointers_.CreateCaptureWaveformSerial) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateCaptureWaveformSerial.");
  }
  return function_pointers_.CreateCaptureWaveformSerial(vi, pinList, waveformName, sampleWidth, bitOrder);
}

ViStatus NiDigitalLibrary::CreateChannelMap(ViSession vi, ViInt32 numSites)
{
  if (!function_pointers_.CreateChannelMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateChannelMap.");
  }
  return function_pointers_.CreateChannelMap(vi, numSites);
}

ViStatus NiDigitalLibrary::CreatePinGroup(ViSession vi, ViConstString pinGroupName, ViConstString pinList)
{
  if (!function_pointers_.CreatePinGroup) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreatePinGroup.");
  }
  return function_pointers_.CreatePinGroup(vi, pinGroupName, pinList);
}

ViStatus NiDigitalLibrary::CreatePinMap(ViSession vi, ViConstString dutPinList, ViConstString systemPinList)
{
  if (!function_pointers_.CreatePinMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreatePinMap.");
  }
  return function_pointers_.CreatePinMap(vi, dutPinList, systemPinList);
}

ViStatus NiDigitalLibrary::CreateSourceWaveformFromFileTDMS(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath, ViBoolean writeWaveformData)
{
  if (!function_pointers_.CreateSourceWaveformFromFileTDMS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateSourceWaveformFromFileTDMS.");
  }
  return function_pointers_.CreateSourceWaveformFromFileTDMS(vi, waveformName, waveformFilePath, writeWaveformData);
}

ViStatus NiDigitalLibrary::CreateSourceWaveformParallel(ViSession vi, ViConstString pinList, ViConstString waveformName, ViInt32 dataMapping)
{
  if (!function_pointers_.CreateSourceWaveformParallel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateSourceWaveformParallel.");
  }
  return function_pointers_.CreateSourceWaveformParallel(vi, pinList, waveformName, dataMapping);
}

ViStatus NiDigitalLibrary::CreateSourceWaveformSerial(ViSession vi, ViConstString pinList, ViConstString waveformName, ViInt32 dataMapping, ViUInt32 sampleWidth, ViInt32 bitOrder)
{
  if (!function_pointers_.CreateSourceWaveformSerial) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateSourceWaveformSerial.");
  }
  return function_pointers_.CreateSourceWaveformSerial(vi, pinList, waveformName, dataMapping, sampleWidth, bitOrder);
}

ViStatus NiDigitalLibrary::CreateTimeSet(ViSession vi, ViConstString name)
{
  if (!function_pointers_.CreateTimeSet) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_CreateTimeSet.");
  }
  return function_pointers_.CreateTimeSet(vi, name);
}

ViStatus NiDigitalLibrary::DeleteAllTimeSets(ViSession vi)
{
  if (!function_pointers_.DeleteAllTimeSets) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_DeleteAllTimeSets.");
  }
  return function_pointers_.DeleteAllTimeSets(vi);
}

ViStatus NiDigitalLibrary::DisableConditionalJumpTrigger(ViSession vi, ViConstString triggerIdentifier)
{
  if (!function_pointers_.DisableConditionalJumpTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_DisableConditionalJumpTrigger.");
  }
  return function_pointers_.DisableConditionalJumpTrigger(vi, triggerIdentifier);
}

ViStatus NiDigitalLibrary::DisableSites(ViSession vi, ViConstString siteList)
{
  if (!function_pointers_.DisableSites) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_DisableSites.");
  }
  return function_pointers_.DisableSites(vi, siteList);
}

ViStatus NiDigitalLibrary::DisableStartTrigger(ViSession vi)
{
  if (!function_pointers_.DisableStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_DisableStartTrigger.");
  }
  return function_pointers_.DisableStartTrigger(vi);
}

ViStatus NiDigitalLibrary::EnableMatchFailCombination(ViUInt32 sessionCount, ViSession sessions[], ViSession syncSession)
{
  if (!function_pointers_.EnableMatchFailCombination) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_EnableMatchFailCombination.");
  }
  return function_pointers_.EnableMatchFailCombination(sessionCount, sessions, syncSession);
}

ViStatus NiDigitalLibrary::EnableSites(ViSession vi, ViConstString siteList)
{
  if (!function_pointers_.EnableSites) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_EnableSites.");
  }
  return function_pointers_.EnableSites(vi, siteList);
}

ViStatus NiDigitalLibrary::EndChannelMap(ViSession vi)
{
  if (!function_pointers_.EndChannelMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_EndChannelMap.");
  }
  return function_pointers_.EndChannelMap(vi);
}

ViStatus NiDigitalLibrary::ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_error_message.");
  }
  return function_pointers_.ErrorMessage(vi, errorCode, errorMessage);
}

ViStatus NiDigitalLibrary::ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ExportSignal.");
  }
  return function_pointers_.ExportSignal(vi, signal, signalIdentifier, outputTerminal);
}

ViStatus NiDigitalLibrary::FetchCaptureWaveformU32(ViSession vi, ViConstString siteList, ViConstString waveformName, ViInt32 samplesToRead, ViReal64 timeout, ViInt32 dataBufferSize, ViUInt32 data[], ViInt32* actualNumWaveforms, ViInt32* actualSamplesPerWaveform)
{
  if (!function_pointers_.FetchCaptureWaveformU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FetchCaptureWaveformU32.");
  }
  return function_pointers_.FetchCaptureWaveformU32(vi, siteList, waveformName, samplesToRead, timeout, dataBufferSize, data, actualNumWaveforms, actualSamplesPerWaveform);
}

ViStatus NiDigitalLibrary::FetchHistoryRAMCycleInformation(ViSession vi, ViConstString site, ViInt64 sampleIndex, ViInt32* patternIndex, ViInt32* timeSetIndex, ViInt64* vectorNumber, ViInt64* cycleNumber, ViInt32* numDutCycles)
{
  if (!function_pointers_.FetchHistoryRAMCycleInformation) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FetchHistoryRAMCycleInformation.");
  }
  return function_pointers_.FetchHistoryRAMCycleInformation(vi, site, sampleIndex, patternIndex, timeSetIndex, vectorNumber, cycleNumber, numDutCycles);
}

ViStatus NiDigitalLibrary::FetchHistoryRAMCyclePinData(ViSession vi, ViConstString site, ViConstString pinList, ViInt64 sampleIndex, ViInt32 dutCycleIndex, ViInt32 pinDataBufferSize, ViUInt8 expectedPinStates[], ViUInt8 actualPinStates[], ViBoolean perPinPassFail[], ViInt32* actualNumPinData)
{
  if (!function_pointers_.FetchHistoryRAMCyclePinData) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FetchHistoryRAMCyclePinData.");
  }
  return function_pointers_.FetchHistoryRAMCyclePinData(vi, site, pinList, sampleIndex, dutCycleIndex, pinDataBufferSize, expectedPinStates, actualPinStates, perPinPassFail, actualNumPinData);
}

ViStatus NiDigitalLibrary::FetchHistoryRAMScanCycleNumber(ViSession vi, ViConstString site, ViInt64 sampleIndex, ViInt64* scanCycleNumber)
{
  if (!function_pointers_.FetchHistoryRAMScanCycleNumber) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FetchHistoryRAMScanCycleNumber.");
  }
  return function_pointers_.FetchHistoryRAMScanCycleNumber(vi, site, sampleIndex, scanCycleNumber);
}

ViStatus NiDigitalLibrary::FrequencyCounterConfigureMeasurementMode(ViSession vi, ViInt32 measurementmode)
{
  if (!function_pointers_.FrequencyCounterConfigureMeasurementMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FrequencyCounter_ConfigureMeasurementMode.");
  }
  return function_pointers_.FrequencyCounterConfigureMeasurementMode(vi, measurementmode);
}

ViStatus NiDigitalLibrary::FrequencyCounterConfigureMeasurementTime(ViSession vi, ViConstString channelList, ViReal64 measurementTime)
{
  if (!function_pointers_.FrequencyCounterConfigureMeasurementTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FrequencyCounter_ConfigureMeasurementTime.");
  }
  return function_pointers_.FrequencyCounterConfigureMeasurementTime(vi, channelList, measurementTime);
}

ViStatus NiDigitalLibrary::FrequencyCounterMeasureFrequency(ViSession vi, ViConstString channelList, ViInt32 frequenciesBufferSize, ViReal64 frequencies[], ViInt32* actualNumFrequencies)
{
  if (!function_pointers_.FrequencyCounterMeasureFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_FrequencyCounter_MeasureFrequency.");
  }
  return function_pointers_.FrequencyCounterMeasureFrequency(vi, channelList, frequenciesBufferSize, frequencies, actualNumFrequencies);
}

ViStatus NiDigitalLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean* value)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetAttributeViBoolean.");
  }
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32* value)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetAttributeViInt32.");
  }
  return function_pointers_.GetAttributeViInt32(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt64* value)
{
  if (!function_pointers_.GetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetAttributeViInt64.");
  }
  return function_pointers_.GetAttributeViInt64(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64* value)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetAttributeViReal64.");
  }
  return function_pointers_.GetAttributeViReal64(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attribute, ViSession* value)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetAttributeViSession.");
  }
  return function_pointers_.GetAttributeViSession(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 bufferSize, ViChar value[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetAttributeViString.");
  }
  return function_pointers_.GetAttributeViString(vi, channelName, attribute, bufferSize, value);
}

ViStatus NiDigitalLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 nameBufferSize, ViChar name[])
{
  if (!function_pointers_.GetChannelName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetChannelName.");
  }
  return function_pointers_.GetChannelName(vi, index, nameBufferSize, name);
}

ViStatus NiDigitalLibrary::GetChannelNameFromString(ViSession vi, ViConstString index, ViInt32 nameBufferSize, ViChar name[])
{
  if (!function_pointers_.GetChannelNameFromString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetChannelNameFromString.");
  }
  return function_pointers_.GetChannelNameFromString(vi, index, nameBufferSize, name);
}

ViStatus NiDigitalLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetError.");
  }
  return function_pointers_.GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
}

ViStatus NiDigitalLibrary::GetFailCount(ViSession vi, ViConstString channelList, ViInt32 bufferSize, ViInt64 failureCount[], ViInt32* actualNumRead)
{
  if (!function_pointers_.GetFailCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetFailCount.");
  }
  return function_pointers_.GetFailCount(vi, channelList, bufferSize, failureCount, actualNumRead);
}

ViStatus NiDigitalLibrary::GetHistoryRAMSampleCount(ViSession vi, ViConstString site, ViInt64* sampleCount)
{
  if (!function_pointers_.GetHistoryRAMSampleCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetHistoryRAMSampleCount.");
  }
  return function_pointers_.GetHistoryRAMSampleCount(vi, site, sampleCount);
}

ViStatus NiDigitalLibrary::GetPatternName(ViSession vi, ViInt32 patternIndex, ViInt32 nameBufferSize, ViChar name[])
{
  if (!function_pointers_.GetPatternName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetPatternName.");
  }
  return function_pointers_.GetPatternName(vi, patternIndex, nameBufferSize, name);
}

ViStatus NiDigitalLibrary::GetPatternPinIndexes(ViSession vi, ViConstString startLabel, ViInt32 pinIndexesBufferSize, ViInt32 pinIndexes[], ViInt32* actualNumPins)
{
  if (!function_pointers_.GetPatternPinIndexes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetPatternPinIndexes.");
  }
  return function_pointers_.GetPatternPinIndexes(vi, startLabel, pinIndexesBufferSize, pinIndexes, actualNumPins);
}

ViStatus NiDigitalLibrary::GetPatternPinList(ViSession vi, ViConstString startLabel, ViInt32 pinListBufferSize, ViChar pinList[])
{
  if (!function_pointers_.GetPatternPinList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetPatternPinList.");
  }
  return function_pointers_.GetPatternPinList(vi, startLabel, pinListBufferSize, pinList);
}

ViStatus NiDigitalLibrary::GetPinName(ViSession vi, ViInt32 pinIndex, ViInt32 nameBufferSize, ViChar name[])
{
  if (!function_pointers_.GetPinName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetPinName.");
  }
  return function_pointers_.GetPinName(vi, pinIndex, nameBufferSize, name);
}

ViStatus NiDigitalLibrary::GetPinResultsPinInformation(ViSession vi, ViConstString channelList, ViInt32 bufferSize, ViInt32 pinIndexes[], ViInt32 siteNumbers[], ViInt32 channelIndexes[], ViInt32* actualNumValues)
{
  if (!function_pointers_.GetPinResultsPinInformation) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetPinResultsPinInformation.");
  }
  return function_pointers_.GetPinResultsPinInformation(vi, channelList, bufferSize, pinIndexes, siteNumbers, channelIndexes, actualNumValues);
}

ViStatus NiDigitalLibrary::GetSitePassFail(ViSession vi, ViConstString siteList, ViInt32 passFailBufferSize, ViBoolean passFail[], ViInt32* actualNumSites)
{
  if (!function_pointers_.GetSitePassFail) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetSitePassFail.");
  }
  return function_pointers_.GetSitePassFail(vi, siteList, passFailBufferSize, passFail, actualNumSites);
}

ViStatus NiDigitalLibrary::GetSiteResultsSiteNumbers(ViSession vi, ViConstString siteList, ViInt32 siteResultType, ViInt32 siteNumbersBufferSize, ViInt32 siteNumbers[], ViInt32* actualNumSiteNumbers)
{
  if (!function_pointers_.GetSiteResultsSiteNumbers) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetSiteResultsSiteNumbers.");
  }
  return function_pointers_.GetSiteResultsSiteNumbers(vi, siteList, siteResultType, siteNumbersBufferSize, siteNumbers, actualNumSiteNumbers);
}

ViStatus NiDigitalLibrary::GetTimeSetDriveFormat(ViSession vi, ViConstString pin, ViConstString timeSet, ViInt32* format)
{
  if (!function_pointers_.GetTimeSetDriveFormat) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetTimeSetDriveFormat.");
  }
  return function_pointers_.GetTimeSetDriveFormat(vi, pin, timeSet, format);
}

ViStatus NiDigitalLibrary::GetTimeSetEdge(ViSession vi, ViConstString pin, ViConstString timeSet, ViInt32 edge, ViReal64* time)
{
  if (!function_pointers_.GetTimeSetEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetTimeSetEdge.");
  }
  return function_pointers_.GetTimeSetEdge(vi, pin, timeSet, edge, time);
}

ViStatus NiDigitalLibrary::GetTimeSetEdgeMultiplier(ViSession vi, ViConstString pin, ViConstString timeSet, ViInt32* edgeMultiplier)
{
  if (!function_pointers_.GetTimeSetEdgeMultiplier) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetTimeSetEdgeMultiplier.");
  }
  return function_pointers_.GetTimeSetEdgeMultiplier(vi, pin, timeSet, edgeMultiplier);
}

ViStatus NiDigitalLibrary::GetTimeSetName(ViSession vi, ViInt32 timeSetIndex, ViInt32 nameBufferSize, ViChar name[])
{
  if (!function_pointers_.GetTimeSetName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetTimeSetName.");
  }
  return function_pointers_.GetTimeSetName(vi, timeSetIndex, nameBufferSize, name);
}

ViStatus NiDigitalLibrary::GetTimeSetPeriod(ViSession vi, ViConstString timeSet, ViReal64* period)
{
  if (!function_pointers_.GetTimeSetPeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_GetTimeSetPeriod.");
  }
  return function_pointers_.GetTimeSetPeriod(vi, timeSet, period);
}

ViStatus NiDigitalLibrary::Init(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* newVi)
{
  if (!function_pointers_.Init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_init.");
  }
  return function_pointers_.Init(resourceName, idQuery, resetDevice, newVi);
}

ViStatus NiDigitalLibrary::InitWithOptions(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* newVi)
{
  if (!function_pointers_.InitWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_InitWithOptions.");
  }
  return function_pointers_.InitWithOptions(resourceName, idQuery, resetDevice, optionString, newVi);
}

ViStatus NiDigitalLibrary::Initiate(ViSession vi)
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_Initiate.");
  }
  return function_pointers_.Initiate(vi);
}

ViStatus NiDigitalLibrary::IsDone(ViSession vi, ViBoolean* done)
{
  if (!function_pointers_.IsDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_IsDone.");
  }
  return function_pointers_.IsDone(vi, done);
}

ViStatus NiDigitalLibrary::IsSiteEnabled(ViSession vi, ViConstString site, ViBoolean* enable)
{
  if (!function_pointers_.IsSiteEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_IsSiteEnabled.");
  }
  return function_pointers_.IsSiteEnabled(vi, site, enable);
}

ViStatus NiDigitalLibrary::LoadLevels(ViSession vi, ViConstString levelsFilePath)
{
  if (!function_pointers_.LoadLevels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_LoadLevels.");
  }
  return function_pointers_.LoadLevels(vi, levelsFilePath);
}

ViStatus NiDigitalLibrary::LoadPattern(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.LoadPattern) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_LoadPattern.");
  }
  return function_pointers_.LoadPattern(vi, filePath);
}

ViStatus NiDigitalLibrary::LoadPinMap(ViSession vi, ViConstString pinMapFilePath)
{
  if (!function_pointers_.LoadPinMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_LoadPinMap.");
  }
  return function_pointers_.LoadPinMap(vi, pinMapFilePath);
}

ViStatus NiDigitalLibrary::LoadSpecifications(ViSession vi, ViConstString specificationsFilePath)
{
  if (!function_pointers_.LoadSpecifications) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_LoadSpecifications.");
  }
  return function_pointers_.LoadSpecifications(vi, specificationsFilePath);
}

ViStatus NiDigitalLibrary::LoadTiming(ViSession vi, ViConstString timingFilePath)
{
  if (!function_pointers_.LoadTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_LoadTiming.");
  }
  return function_pointers_.LoadTiming(vi, timingFilePath);
}

ViStatus NiDigitalLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_LockSession.");
  }
  return function_pointers_.LockSession(vi, callerHasLock);
}

ViStatus NiDigitalLibrary::MapPinToChannel(ViSession vi, ViConstString pin, ViInt32 site, ViConstString channel)
{
  if (!function_pointers_.MapPinToChannel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_MapPinToChannel.");
  }
  return function_pointers_.MapPinToChannel(vi, pin, site, channel);
}

ViStatus NiDigitalLibrary::PPMUConfigureApertureTime(ViSession vi, ViConstString channelList, ViReal64 apertureTime, ViInt32 units)
{
  if (!function_pointers_.PPMUConfigureApertureTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureApertureTime.");
  }
  return function_pointers_.PPMUConfigureApertureTime(vi, channelList, apertureTime, units);
}

ViStatus NiDigitalLibrary::PPMUConfigureCurrentLevel(ViSession vi, ViConstString channelList, ViReal64 currentLevel)
{
  if (!function_pointers_.PPMUConfigureCurrentLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureCurrentLevel.");
  }
  return function_pointers_.PPMUConfigureCurrentLevel(vi, channelList, currentLevel);
}

ViStatus NiDigitalLibrary::PPMUConfigureCurrentLevelRange(ViSession vi, ViConstString channelList, ViReal64 range)
{
  if (!function_pointers_.PPMUConfigureCurrentLevelRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureCurrentLevelRange.");
  }
  return function_pointers_.PPMUConfigureCurrentLevelRange(vi, channelList, range);
}

ViStatus NiDigitalLibrary::PPMUConfigureCurrentLimit(ViSession vi, ViConstString channelList, ViInt32 behavior, ViReal64 limit)
{
  if (!function_pointers_.PPMUConfigureCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureCurrentLimit.");
  }
  return function_pointers_.PPMUConfigureCurrentLimit(vi, channelList, behavior, limit);
}

ViStatus NiDigitalLibrary::PPMUConfigureCurrentLimitRange(ViSession vi, ViConstString channelList, ViReal64 range)
{
  if (!function_pointers_.PPMUConfigureCurrentLimitRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureCurrentLimitRange.");
  }
  return function_pointers_.PPMUConfigureCurrentLimitRange(vi, channelList, range);
}

ViStatus NiDigitalLibrary::PPMUConfigureOutputFunction(ViSession vi, ViConstString channelList, ViInt32 outputFunction)
{
  if (!function_pointers_.PPMUConfigureOutputFunction) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureOutputFunction.");
  }
  return function_pointers_.PPMUConfigureOutputFunction(vi, channelList, outputFunction);
}

ViStatus NiDigitalLibrary::PPMUConfigureVoltageLevel(ViSession vi, ViConstString channelList, ViReal64 voltageLevel)
{
  if (!function_pointers_.PPMUConfigureVoltageLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureVoltageLevel.");
  }
  return function_pointers_.PPMUConfigureVoltageLevel(vi, channelList, voltageLevel);
}

ViStatus NiDigitalLibrary::PPMUConfigureVoltageLimits(ViSession vi, ViConstString channelList, ViReal64 lowerVoltageLimit, ViReal64 upperVoltageLimit)
{
  if (!function_pointers_.PPMUConfigureVoltageLimits) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_ConfigureVoltageLimits.");
  }
  return function_pointers_.PPMUConfigureVoltageLimits(vi, channelList, lowerVoltageLimit, upperVoltageLimit);
}

ViStatus NiDigitalLibrary::PPMUMeasure(ViSession vi, ViConstString channelList, ViInt32 measurementType, ViInt32 bufferSize, ViReal64 measurements[], ViInt32* actualNumRead)
{
  if (!function_pointers_.PPMUMeasure) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_Measure.");
  }
  return function_pointers_.PPMUMeasure(vi, channelList, measurementType, bufferSize, measurements, actualNumRead);
}

ViStatus NiDigitalLibrary::PPMUSource(ViSession vi, ViConstString channelList)
{
  if (!function_pointers_.PPMUSource) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_PPMU_Source.");
  }
  return function_pointers_.PPMUSource(vi, channelList);
}

ViStatus NiDigitalLibrary::ReadSequencerFlag(ViSession vi, ViConstString flag, ViBoolean* value)
{
  if (!function_pointers_.ReadSequencerFlag) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ReadSequencerFlag.");
  }
  return function_pointers_.ReadSequencerFlag(vi, flag, value);
}

ViStatus NiDigitalLibrary::ReadSequencerRegister(ViSession vi, ViConstString reg, ViInt32* value)
{
  if (!function_pointers_.ReadSequencerRegister) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ReadSequencerRegister.");
  }
  return function_pointers_.ReadSequencerRegister(vi, reg, value);
}

ViStatus NiDigitalLibrary::ReadStatic(ViSession vi, ViConstString channelList, ViInt32 bufferSize, ViUInt8 data[], ViInt32* actualNumRead)
{
  if (!function_pointers_.ReadStatic) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ReadStatic.");
  }
  return function_pointers_.ReadStatic(vi, channelList, bufferSize, data, actualNumRead);
}

ViStatus NiDigitalLibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_reset.");
  }
  return function_pointers_.Reset(vi);
}

ViStatus NiDigitalLibrary::ResetAttribute(ViSession vi, ViConstString channelName, ViAttr attributeId)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(vi, channelName, attributeId);
}

ViStatus NiDigitalLibrary::ResetDevice(ViSession vi)
{
  if (!function_pointers_.ResetDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_ResetDevice.");
  }
  return function_pointers_.ResetDevice(vi);
}

ViStatus NiDigitalLibrary::SelectFunction(ViSession vi, ViConstString channelList, ViInt32 function)
{
  if (!function_pointers_.SelectFunction) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SelectFunction.");
  }
  return function_pointers_.SelectFunction(vi, channelList, function);
}

ViStatus NiDigitalLibrary::SelfCalibrate(ViSession vi)
{
  if (!function_pointers_.SelfCalibrate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SelfCalibrate.");
  }
  return function_pointers_.SelfCalibrate(vi);
}

ViStatus NiDigitalLibrary::SelfTest(ViSession vi, ViInt16* testResult, ViChar testMessage[2048])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_self_test.");
  }
  return function_pointers_.SelfTest(vi, testResult, testMessage);
}

ViStatus NiDigitalLibrary::SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger, ViConstString triggerIdentifier)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(vi, trigger, triggerIdentifier);
}

ViStatus NiDigitalLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean value)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SetAttributeViBoolean.");
  }
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 value)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SetAttributeViInt32.");
  }
  return function_pointers_.SetAttributeViInt32(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt64 value)
{
  if (!function_pointers_.SetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SetAttributeViInt64.");
  }
  return function_pointers_.SetAttributeViInt64(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64 value)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SetAttributeViReal64.");
  }
  return function_pointers_.SetAttributeViReal64(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attribute, ViSession value)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SetAttributeViSession.");
  }
  return function_pointers_.SetAttributeViSession(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attribute, ViConstString value)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_SetAttributeViString.");
  }
  return function_pointers_.SetAttributeViString(vi, channelName, attribute, value);
}

ViStatus NiDigitalLibrary::TDR(ViSession vi, ViConstString channelList, ViBoolean applyOffsets, ViInt32 offsetsBufferSize, ViReal64 offsets[], ViInt32* actualNumOffsets)
{
  if (!function_pointers_.TDR) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_TDR.");
  }
  return function_pointers_.TDR(vi, channelList, applyOffsets, offsetsBufferSize, offsets, actualNumOffsets);
}

ViStatus NiDigitalLibrary::UnloadAllPatterns(ViSession vi, ViBoolean unloadKeepAlivePattern)
{
  if (!function_pointers_.UnloadAllPatterns) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_UnloadAllPatterns.");
  }
  return function_pointers_.UnloadAllPatterns(vi, unloadKeepAlivePattern);
}

ViStatus NiDigitalLibrary::UnloadSpecifications(ViSession vi, ViConstString specificationsFilePath)
{
  if (!function_pointers_.UnloadSpecifications) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_UnloadSpecifications.");
  }
  return function_pointers_.UnloadSpecifications(vi, specificationsFilePath);
}

ViStatus NiDigitalLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_UnlockSession.");
  }
  return function_pointers_.UnlockSession(vi, callerHasLock);
}

ViStatus NiDigitalLibrary::WaitUntilDone(ViSession vi, ViReal64 timeout)
{
  if (!function_pointers_.WaitUntilDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WaitUntilDone.");
  }
  return function_pointers_.WaitUntilDone(vi, timeout);
}

ViStatus NiDigitalLibrary::WriteSequencerFlag(ViSession vi, ViConstString flag, ViBoolean value)
{
  if (!function_pointers_.WriteSequencerFlag) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteSequencerFlag.");
  }
  return function_pointers_.WriteSequencerFlag(vi, flag, value);
}

ViStatus NiDigitalLibrary::WriteSequencerFlagSynchronized(ViUInt32 sessionCount, ViSession sessions[], ViConstString flag, ViBoolean value)
{
  if (!function_pointers_.WriteSequencerFlagSynchronized) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteSequencerFlagSynchronized.");
  }
  return function_pointers_.WriteSequencerFlagSynchronized(sessionCount, sessions, flag, value);
}

ViStatus NiDigitalLibrary::WriteSequencerRegister(ViSession vi, ViConstString reg, ViInt32 value)
{
  if (!function_pointers_.WriteSequencerRegister) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteSequencerRegister.");
  }
  return function_pointers_.WriteSequencerRegister(vi, reg, value);
}

ViStatus NiDigitalLibrary::WriteSourceWaveformBroadcastU32(ViSession vi, ViConstString waveformName, ViInt32 waveformSize, ViUInt32 waveformData[])
{
  if (!function_pointers_.WriteSourceWaveformBroadcastU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteSourceWaveformBroadcastU32.");
  }
  return function_pointers_.WriteSourceWaveformBroadcastU32(vi, waveformName, waveformSize, waveformData);
}

ViStatus NiDigitalLibrary::WriteSourceWaveformDataFromFileTDMS(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath)
{
  if (!function_pointers_.WriteSourceWaveformDataFromFileTDMS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteSourceWaveformDataFromFileTDMS.");
  }
  return function_pointers_.WriteSourceWaveformDataFromFileTDMS(vi, waveformName, waveformFilePath);
}

ViStatus NiDigitalLibrary::WriteSourceWaveformSiteUniqueU32(ViSession vi, ViConstString siteList, ViConstString waveformName, ViInt32 numWaveforms, ViInt32 samplesPerWaveform, ViUInt32 waveformData[1])
{
  if (!function_pointers_.WriteSourceWaveformSiteUniqueU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteSourceWaveformSiteUniqueU32.");
  }
  return function_pointers_.WriteSourceWaveformSiteUniqueU32(vi, siteList, waveformName, numWaveforms, samplesPerWaveform, waveformData);
}

ViStatus NiDigitalLibrary::WriteStatic(ViSession vi, ViConstString channelList, ViUInt8 state)
{
  if (!function_pointers_.WriteStatic) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDigital_WriteStatic.");
  }
  return function_pointers_.WriteStatic(vi, channelList, state);
}

}  // namespace nidigitalpattern_grpc
