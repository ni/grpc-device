
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-Digital Pattern Driver.
//---------------------------------------------------------------------
#include "nidigitalpattern_client.h"

#include <grpcpp/grpcpp.h>

#include <nidigitalpattern.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nidigitalpattern_grpc::experimental::client {

AbortResponse
abort(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AbortRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AbortResponse{};

  raise_if_error(
      stub->Abort(&context, request, &response),
      context);

  return response;
}

AbortKeepAliveResponse
abort_keep_alive(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AbortKeepAliveRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AbortKeepAliveResponse{};

  raise_if_error(
      stub->AbortKeepAlive(&context, request, &response),
      context);

  return response;
}

ApplyLevelsAndTimingResponse
apply_levels_and_timing(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list, const pb::string& levels_sheet, const pb::string& timing_sheet, const pb::string& initial_state_high_pins, const pb::string& initial_state_low_pins, const pb::string& initial_state_tristate_pins)
{
  ::grpc::ClientContext context;

  auto request = ApplyLevelsAndTimingRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);
  request.set_levels_sheet(levels_sheet);
  request.set_timing_sheet(timing_sheet);
  request.set_initial_state_high_pins(initial_state_high_pins);
  request.set_initial_state_low_pins(initial_state_low_pins);
  request.set_initial_state_tristate_pins(initial_state_tristate_pins);

  auto response = ApplyLevelsAndTimingResponse{};

  raise_if_error(
      stub->ApplyLevelsAndTiming(&context, request, &response),
      context);

  return response;
}

ApplyTDROffsetsResponse
apply_tdr_offsets(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const std::vector<double>& offsets)
{
  ::grpc::ClientContext context;

  auto request = ApplyTDROffsetsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  copy_array(offsets, request.mutable_offsets());

  auto response = ApplyTDROffsetsResponse{};

  raise_if_error(
      stub->ApplyTDROffsets(&context, request, &response),
      context);

  return response;
}

BurstPatternResponse
burst_pattern(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list, const pb::string& start_label, const bool& select_digital_function, const bool& wait_until_done, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = BurstPatternRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);
  request.set_start_label(start_label);
  request.set_select_digital_function(select_digital_function);
  request.set_wait_until_done(wait_until_done);
  request.set_timeout(timeout);

  auto response = BurstPatternResponse{};

  raise_if_error(
      stub->BurstPattern(&context, request, &response),
      context);

  return response;
}

BurstPatternSynchronizedResponse
burst_pattern_synchronized(const StubPtr& stub, const pb::uint32& session_count, const std::vector<nidevice_grpc::Session>& sessions, const pb::string& site_list, const pb::string& start_label, const bool& select_digital_function, const bool& wait_until_done, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = BurstPatternSynchronizedRequest{};
  request.set_session_count(session_count);
  copy_array(sessions, request.mutable_sessions());
  request.set_site_list(site_list);
  request.set_start_label(start_label);
  request.set_select_digital_function(select_digital_function);
  request.set_wait_until_done(wait_until_done);
  request.set_timeout(timeout);

  auto response = BurstPatternSynchronizedResponse{};

  raise_if_error(
      stub->BurstPatternSynchronized(&context, request, &response),
      context);

  return response;
}

ClearErrorResponse
clear_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ClearErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ClearErrorResponse{};

  raise_if_error(
      stub->ClearError(&context, request, &response),
      context);

  return response;
}

ClockGeneratorAbortResponse
clock_generator_abort(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = ClockGeneratorAbortRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = ClockGeneratorAbortResponse{};

  raise_if_error(
      stub->ClockGeneratorAbort(&context, request, &response),
      context);

  return response;
}

ClockGeneratorGenerateClockResponse
clock_generator_generate_clock(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& frequency, const bool& select_digital_function)
{
  ::grpc::ClientContext context;

  auto request = ClockGeneratorGenerateClockRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_frequency(frequency);
  request.set_select_digital_function(select_digital_function);

  auto response = ClockGeneratorGenerateClockResponse{};

  raise_if_error(
      stub->ClockGeneratorGenerateClock(&context, request, &response),
      context);

  return response;
}

ClockGeneratorInitiateResponse
clock_generator_initiate(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = ClockGeneratorInitiateRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = ClockGeneratorInitiateResponse{};

  raise_if_error(
      stub->ClockGeneratorInitiate(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

CommitResponse
commit(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CommitRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CommitResponse{};

  raise_if_error(
      stub->Commit(&context, request, &response),
      context);

  return response;
}

ConfigureActiveLoadLevelsResponse
configure_active_load_levels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& iol, const double& ioh, const double& vcom)
{
  ::grpc::ClientContext context;

  auto request = ConfigureActiveLoadLevelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_iol(iol);
  request.set_ioh(ioh);
  request.set_vcom(vcom);

  auto response = ConfigureActiveLoadLevelsResponse{};

  raise_if_error(
      stub->ConfigureActiveLoadLevels(&context, request, &response),
      context);

  return response;
}

ConfigureCycleNumberHistoryRAMTriggerResponse
configure_cycle_number_history_ram_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int64& cycle_number, const pb::int32& pretrigger_samples)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCycleNumberHistoryRAMTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_cycle_number(cycle_number);
  request.set_pretrigger_samples(pretrigger_samples);

  auto response = ConfigureCycleNumberHistoryRAMTriggerResponse{};

  raise_if_error(
      stub->ConfigureCycleNumberHistoryRAMTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeConditionalJumpTriggerResponse
configure_digital_edge_conditional_jump_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_identifier, const pb::string& source, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeConditionalJumpTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_identifier(trigger_identifier);
  request.set_source(source);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeConditionalJumpTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeConditionalJumpTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeStartTriggerResponse
configure_digital_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& source, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_source(source);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureFirstFailureHistoryRAMTriggerResponse
configure_first_failure_history_ram_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& pretrigger_samples)
{
  ::grpc::ClientContext context;

  auto request = ConfigureFirstFailureHistoryRAMTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pretrigger_samples(pretrigger_samples);

  auto response = ConfigureFirstFailureHistoryRAMTriggerResponse{};

  raise_if_error(
      stub->ConfigureFirstFailureHistoryRAMTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureHistoryRAMCyclesToAcquireResponse
configure_history_ram_cycles_to_acquire(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<HistoryRamCyclesToAcquire, pb::int32>& cycles_to_acquire)
{
  ::grpc::ClientContext context;

  auto request = ConfigureHistoryRAMCyclesToAcquireRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto cycles_to_acquire_ptr = cycles_to_acquire.get_if<HistoryRamCyclesToAcquire>();
  const auto cycles_to_acquire_raw_ptr = cycles_to_acquire.get_if<pb::int32>();
  if (cycles_to_acquire_ptr) {
    request.set_cycles_to_acquire(*cycles_to_acquire_ptr);
  }
  else if (cycles_to_acquire_raw_ptr) {
    request.set_cycles_to_acquire_raw(*cycles_to_acquire_raw_ptr);
  }

  auto response = ConfigureHistoryRAMCyclesToAcquireResponse{};

  raise_if_error(
      stub->ConfigureHistoryRAMCyclesToAcquire(&context, request, &response),
      context);

  return response;
}

ConfigurePatternBurstSitesResponse
configure_pattern_burst_sites(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePatternBurstSitesRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);

  auto response = ConfigurePatternBurstSitesResponse{};

  raise_if_error(
      stub->ConfigurePatternBurstSites(&context, request, &response),
      context);

  return response;
}

ConfigurePatternLabelHistoryRAMTriggerResponse
configure_pattern_label_history_ram_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& label, const pb::int64& vector_offset, const pb::int64& cycle_offset, const pb::int32& pretrigger_samples)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePatternLabelHistoryRAMTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_label(label);
  request.set_vector_offset(vector_offset);
  request.set_cycle_offset(cycle_offset);
  request.set_pretrigger_samples(pretrigger_samples);

  auto response = ConfigurePatternLabelHistoryRAMTriggerResponse{};

  raise_if_error(
      stub->ConfigurePatternLabelHistoryRAMTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeConditionalJumpTriggerResponse
configure_software_edge_conditional_jump_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_identifier)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeConditionalJumpTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_identifier(trigger_identifier);

  auto response = ConfigureSoftwareEdgeConditionalJumpTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeConditionalJumpTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeStartTriggerResponse
configure_software_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgeStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureStartLabelResponse
configure_start_label(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& label)
{
  ::grpc::ClientContext context;

  auto request = ConfigureStartLabelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_label(label);

  auto response = ConfigureStartLabelResponse{};

  raise_if_error(
      stub->ConfigureStartLabel(&context, request, &response),
      context);

  return response;
}

ConfigureTerminationModeResponse
configure_termination_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<TerminationMode, pb::int32>& mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTerminationModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto mode_ptr = mode.get_if<TerminationMode>();
  const auto mode_raw_ptr = mode.get_if<pb::int32>();
  if (mode_ptr) {
    request.set_mode(*mode_ptr);
  }
  else if (mode_raw_ptr) {
    request.set_mode_raw(*mode_raw_ptr);
  }

  auto response = ConfigureTerminationModeResponse{};

  raise_if_error(
      stub->ConfigureTerminationMode(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetCompareEdgesStrobeResponse
configure_time_set_compare_edges_strobe(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const double& strobe_edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetCompareEdgesStrobeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  request.set_strobe_edge(strobe_edge);

  auto response = ConfigureTimeSetCompareEdgesStrobeResponse{};

  raise_if_error(
      stub->ConfigureTimeSetCompareEdgesStrobe(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetCompareEdgesStrobe2xResponse
configure_time_set_compare_edges_strobe2x(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const double& strobe_edge, const double& strobe2_edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetCompareEdgesStrobe2xRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  request.set_strobe_edge(strobe_edge);
  request.set_strobe2_edge(strobe2_edge);

  auto response = ConfigureTimeSetCompareEdgesStrobe2xResponse{};

  raise_if_error(
      stub->ConfigureTimeSetCompareEdgesStrobe2x(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetDriveEdgesResponse
configure_time_set_drive_edges(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const simple_variant<DriveFormat, pb::int32>& format, const double& drive_on_edge, const double& drive_data_edge, const double& drive_return_edge, const double& drive_off_edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetDriveEdgesRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  const auto format_ptr = format.get_if<DriveFormat>();
  const auto format_raw_ptr = format.get_if<pb::int32>();
  if (format_ptr) {
    request.set_format(*format_ptr);
  }
  else if (format_raw_ptr) {
    request.set_format_raw(*format_raw_ptr);
  }
  request.set_drive_on_edge(drive_on_edge);
  request.set_drive_data_edge(drive_data_edge);
  request.set_drive_return_edge(drive_return_edge);
  request.set_drive_off_edge(drive_off_edge);

  auto response = ConfigureTimeSetDriveEdgesResponse{};

  raise_if_error(
      stub->ConfigureTimeSetDriveEdges(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetDriveEdges2xResponse
configure_time_set_drive_edges2x(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const simple_variant<DriveFormat, pb::int32>& format, const double& drive_on_edge, const double& drive_data_edge, const double& drive_return_edge, const double& drive_off_edge, const double& drive_data2_edge, const double& drive_return2_edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetDriveEdges2xRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  const auto format_ptr = format.get_if<DriveFormat>();
  const auto format_raw_ptr = format.get_if<pb::int32>();
  if (format_ptr) {
    request.set_format(*format_ptr);
  }
  else if (format_raw_ptr) {
    request.set_format_raw(*format_raw_ptr);
  }
  request.set_drive_on_edge(drive_on_edge);
  request.set_drive_data_edge(drive_data_edge);
  request.set_drive_return_edge(drive_return_edge);
  request.set_drive_off_edge(drive_off_edge);
  request.set_drive_data2_edge(drive_data2_edge);
  request.set_drive_return2_edge(drive_return2_edge);

  auto response = ConfigureTimeSetDriveEdges2xResponse{};

  raise_if_error(
      stub->ConfigureTimeSetDriveEdges2x(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetDriveFormatResponse
configure_time_set_drive_format(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const simple_variant<DriveFormat, pb::int32>& drive_format)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetDriveFormatRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  const auto drive_format_ptr = drive_format.get_if<DriveFormat>();
  const auto drive_format_raw_ptr = drive_format.get_if<pb::int32>();
  if (drive_format_ptr) {
    request.set_drive_format(*drive_format_ptr);
  }
  else if (drive_format_raw_ptr) {
    request.set_drive_format_raw(*drive_format_raw_ptr);
  }

  auto response = ConfigureTimeSetDriveFormatResponse{};

  raise_if_error(
      stub->ConfigureTimeSetDriveFormat(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetEdgeResponse
configure_time_set_edge(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const simple_variant<TimeSetEdgeType, pb::int32>& edge, const double& time)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetEdgeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  const auto edge_ptr = edge.get_if<TimeSetEdgeType>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }
  request.set_time(time);

  auto response = ConfigureTimeSetEdgeResponse{};

  raise_if_error(
      stub->ConfigureTimeSetEdge(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetEdgeMultiplierResponse
configure_time_set_edge_multiplier(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& time_set_name, const pb::int32& edge_multiplier)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetEdgeMultiplierRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_time_set_name(time_set_name);
  request.set_edge_multiplier(edge_multiplier);

  auto response = ConfigureTimeSetEdgeMultiplierResponse{};

  raise_if_error(
      stub->ConfigureTimeSetEdgeMultiplier(&context, request, &response),
      context);

  return response;
}

ConfigureTimeSetPeriodResponse
configure_time_set_period(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& time_set_name, const double& period)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTimeSetPeriodRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_time_set_name(time_set_name);
  request.set_period(period);

  auto response = ConfigureTimeSetPeriodResponse{};

  raise_if_error(
      stub->ConfigureTimeSetPeriod(&context, request, &response),
      context);

  return response;
}

ConfigureVoltageLevelsResponse
configure_voltage_levels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& vil, const double& vih, const double& vol, const double& voh, const double& vterm)
{
  ::grpc::ClientContext context;

  auto request = ConfigureVoltageLevelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_vil(vil);
  request.set_vih(vih);
  request.set_vol(vol);
  request.set_voh(voh);
  request.set_vterm(vterm);

  auto response = ConfigureVoltageLevelsResponse{};

  raise_if_error(
      stub->ConfigureVoltageLevels(&context, request, &response),
      context);

  return response;
}

CreateCaptureWaveformFromFileDigicaptureResponse
create_capture_waveform_from_file_digicapture(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& waveform_name, const pb::string& waveform_file_path)
{
  ::grpc::ClientContext context;

  auto request = CreateCaptureWaveformFromFileDigicaptureRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_waveform_name(waveform_name);
  request.set_waveform_file_path(waveform_file_path);

  auto response = CreateCaptureWaveformFromFileDigicaptureResponse{};

  raise_if_error(
      stub->CreateCaptureWaveformFromFileDigicapture(&context, request, &response),
      context);

  return response;
}

CreateCaptureWaveformParallelResponse
create_capture_waveform_parallel(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& waveform_name)
{
  ::grpc::ClientContext context;

  auto request = CreateCaptureWaveformParallelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_waveform_name(waveform_name);

  auto response = CreateCaptureWaveformParallelResponse{};

  raise_if_error(
      stub->CreateCaptureWaveformParallel(&context, request, &response),
      context);

  return response;
}

CreateCaptureWaveformSerialResponse
create_capture_waveform_serial(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& waveform_name, const pb::uint32& sample_width, const simple_variant<BitOrder, pb::int32>& bit_order)
{
  ::grpc::ClientContext context;

  auto request = CreateCaptureWaveformSerialRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_waveform_name(waveform_name);
  request.set_sample_width(sample_width);
  const auto bit_order_ptr = bit_order.get_if<BitOrder>();
  const auto bit_order_raw_ptr = bit_order.get_if<pb::int32>();
  if (bit_order_ptr) {
    request.set_bit_order(*bit_order_ptr);
  }
  else if (bit_order_raw_ptr) {
    request.set_bit_order_raw(*bit_order_raw_ptr);
  }

  auto response = CreateCaptureWaveformSerialResponse{};

  raise_if_error(
      stub->CreateCaptureWaveformSerial(&context, request, &response),
      context);

  return response;
}

CreateChannelMapResponse
create_channel_map(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& num_sites)
{
  ::grpc::ClientContext context;

  auto request = CreateChannelMapRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_num_sites(num_sites);

  auto response = CreateChannelMapResponse{};

  raise_if_error(
      stub->CreateChannelMap(&context, request, &response),
      context);

  return response;
}

CreatePinGroupResponse
create_pin_group(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_group_name, const pb::string& pin_list)
{
  ::grpc::ClientContext context;

  auto request = CreatePinGroupRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_group_name(pin_group_name);
  request.set_pin_list(pin_list);

  auto response = CreatePinGroupResponse{};

  raise_if_error(
      stub->CreatePinGroup(&context, request, &response),
      context);

  return response;
}

CreatePinMapResponse
create_pin_map(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& dut_pin_list, const pb::string& system_pin_list)
{
  ::grpc::ClientContext context;

  auto request = CreatePinMapRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_dut_pin_list(dut_pin_list);
  request.set_system_pin_list(system_pin_list);

  auto response = CreatePinMapResponse{};

  raise_if_error(
      stub->CreatePinMap(&context, request, &response),
      context);

  return response;
}

CreateSourceWaveformFromFileTDMSResponse
create_source_waveform_from_file_tdms(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& waveform_name, const pb::string& waveform_file_path, const bool& write_waveform_data)
{
  ::grpc::ClientContext context;

  auto request = CreateSourceWaveformFromFileTDMSRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_waveform_name(waveform_name);
  request.set_waveform_file_path(waveform_file_path);
  request.set_write_waveform_data(write_waveform_data);

  auto response = CreateSourceWaveformFromFileTDMSResponse{};

  raise_if_error(
      stub->CreateSourceWaveformFromFileTDMS(&context, request, &response),
      context);

  return response;
}

CreateSourceWaveformParallelResponse
create_source_waveform_parallel(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& waveform_name, const simple_variant<SourceDataMapping, pb::int32>& data_mapping)
{
  ::grpc::ClientContext context;

  auto request = CreateSourceWaveformParallelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_waveform_name(waveform_name);
  const auto data_mapping_ptr = data_mapping.get_if<SourceDataMapping>();
  const auto data_mapping_raw_ptr = data_mapping.get_if<pb::int32>();
  if (data_mapping_ptr) {
    request.set_data_mapping(*data_mapping_ptr);
  }
  else if (data_mapping_raw_ptr) {
    request.set_data_mapping_raw(*data_mapping_raw_ptr);
  }

  auto response = CreateSourceWaveformParallelResponse{};

  raise_if_error(
      stub->CreateSourceWaveformParallel(&context, request, &response),
      context);

  return response;
}

CreateSourceWaveformSerialResponse
create_source_waveform_serial(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin_list, const pb::string& waveform_name, const simple_variant<SourceDataMapping, pb::int32>& data_mapping, const pb::uint32& sample_width, const simple_variant<BitOrder, pb::int32>& bit_order)
{
  ::grpc::ClientContext context;

  auto request = CreateSourceWaveformSerialRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_list(pin_list);
  request.set_waveform_name(waveform_name);
  const auto data_mapping_ptr = data_mapping.get_if<SourceDataMapping>();
  const auto data_mapping_raw_ptr = data_mapping.get_if<pb::int32>();
  if (data_mapping_ptr) {
    request.set_data_mapping(*data_mapping_ptr);
  }
  else if (data_mapping_raw_ptr) {
    request.set_data_mapping_raw(*data_mapping_raw_ptr);
  }
  request.set_sample_width(sample_width);
  const auto bit_order_ptr = bit_order.get_if<BitOrder>();
  const auto bit_order_raw_ptr = bit_order.get_if<pb::int32>();
  if (bit_order_ptr) {
    request.set_bit_order(*bit_order_ptr);
  }
  else if (bit_order_raw_ptr) {
    request.set_bit_order_raw(*bit_order_raw_ptr);
  }

  auto response = CreateSourceWaveformSerialResponse{};

  raise_if_error(
      stub->CreateSourceWaveformSerial(&context, request, &response),
      context);

  return response;
}

CreateTimeSetResponse
create_time_set(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& name)
{
  ::grpc::ClientContext context;

  auto request = CreateTimeSetRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_name(name);

  auto response = CreateTimeSetResponse{};

  raise_if_error(
      stub->CreateTimeSet(&context, request, &response),
      context);

  return response;
}

DeleteAllTimeSetsResponse
delete_all_time_sets(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DeleteAllTimeSetsRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DeleteAllTimeSetsResponse{};

  raise_if_error(
      stub->DeleteAllTimeSets(&context, request, &response),
      context);

  return response;
}

DisableConditionalJumpTriggerResponse
disable_conditional_jump_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_identifier)
{
  ::grpc::ClientContext context;

  auto request = DisableConditionalJumpTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_identifier(trigger_identifier);

  auto response = DisableConditionalJumpTriggerResponse{};

  raise_if_error(
      stub->DisableConditionalJumpTrigger(&context, request, &response),
      context);

  return response;
}

DisableSitesResponse
disable_sites(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list)
{
  ::grpc::ClientContext context;

  auto request = DisableSitesRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);

  auto response = DisableSitesResponse{};

  raise_if_error(
      stub->DisableSites(&context, request, &response),
      context);

  return response;
}

DisableStartTriggerResponse
disable_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableStartTriggerResponse{};

  raise_if_error(
      stub->DisableStartTrigger(&context, request, &response),
      context);

  return response;
}

EnableMatchFailCombinationResponse
enable_match_fail_combination(const StubPtr& stub, const pb::uint32& session_count, const std::vector<nidevice_grpc::Session>& sessions, const nidevice_grpc::Session& sync_session)
{
  ::grpc::ClientContext context;

  auto request = EnableMatchFailCombinationRequest{};
  request.set_session_count(session_count);
  copy_array(sessions, request.mutable_sessions());
  request.mutable_sync_session()->CopyFrom(sync_session);

  auto response = EnableMatchFailCombinationResponse{};

  raise_if_error(
      stub->EnableMatchFailCombination(&context, request, &response),
      context);

  return response;
}

EnableSitesResponse
enable_sites(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list)
{
  ::grpc::ClientContext context;

  auto request = EnableSitesRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);

  auto response = EnableSitesResponse{};

  raise_if_error(
      stub->EnableSites(&context, request, &response),
      context);

  return response;
}

EndChannelMapResponse
end_channel_map(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = EndChannelMapRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = EndChannelMapResponse{};

  raise_if_error(
      stub->EndChannelMap(&context, request, &response),
      context);

  return response;
}

ErrorMessageResponse
error_message(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = ErrorMessageRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);

  auto response = ErrorMessageResponse{};

  raise_if_error(
      stub->ErrorMessage(&context, request, &response),
      context);

  return response;
}

ExportSignalResponse
export_signal(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<ExportSignal, pb::int32>& signal, const pb::string& signal_identifier, const pb::string& output_terminal)
{
  ::grpc::ClientContext context;

  auto request = ExportSignalRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto signal_ptr = signal.get_if<ExportSignal>();
  const auto signal_raw_ptr = signal.get_if<pb::int32>();
  if (signal_ptr) {
    request.set_signal(*signal_ptr);
  }
  else if (signal_raw_ptr) {
    request.set_signal_raw(*signal_raw_ptr);
  }
  request.set_signal_identifier(signal_identifier);
  request.set_output_terminal(output_terminal);

  auto response = ExportSignalResponse{};

  raise_if_error(
      stub->ExportSignal(&context, request, &response),
      context);

  return response;
}

FetchCaptureWaveformU32Response
fetch_capture_waveform_u32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list, const pb::string& waveform_name, const pb::int32& samples_to_read, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = FetchCaptureWaveformU32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);
  request.set_waveform_name(waveform_name);
  request.set_samples_to_read(samples_to_read);
  request.set_timeout(timeout);

  auto response = FetchCaptureWaveformU32Response{};

  raise_if_error(
      stub->FetchCaptureWaveformU32(&context, request, &response),
      context);

  return response;
}

FetchHistoryRAMCycleInformationResponse
fetch_history_ram_cycle_information(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site, const pb::int64& sample_index)
{
  ::grpc::ClientContext context;

  auto request = FetchHistoryRAMCycleInformationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site(site);
  request.set_sample_index(sample_index);

  auto response = FetchHistoryRAMCycleInformationResponse{};

  raise_if_error(
      stub->FetchHistoryRAMCycleInformation(&context, request, &response),
      context);

  return response;
}

FetchHistoryRAMCyclePinDataResponse
fetch_history_ram_cycle_pin_data(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site, const pb::string& pin_list, const pb::int64& sample_index, const pb::int32& dut_cycle_index)
{
  ::grpc::ClientContext context;

  auto request = FetchHistoryRAMCyclePinDataRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site(site);
  request.set_pin_list(pin_list);
  request.set_sample_index(sample_index);
  request.set_dut_cycle_index(dut_cycle_index);

  auto response = FetchHistoryRAMCyclePinDataResponse{};

  raise_if_error(
      stub->FetchHistoryRAMCyclePinData(&context, request, &response),
      context);

  return response;
}

FetchHistoryRAMScanCycleNumberResponse
fetch_history_ram_scan_cycle_number(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site, const pb::int64& sample_index)
{
  ::grpc::ClientContext context;

  auto request = FetchHistoryRAMScanCycleNumberRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site(site);
  request.set_sample_index(sample_index);

  auto response = FetchHistoryRAMScanCycleNumberResponse{};

  raise_if_error(
      stub->FetchHistoryRAMScanCycleNumber(&context, request, &response),
      context);

  return response;
}

FrequencyCounterConfigureMeasurementModeResponse
frequency_counter_configure_measurement_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<FrequencyMeasurementMode, pb::int32>& measurement_mode)
{
  ::grpc::ClientContext context;

  auto request = FrequencyCounterConfigureMeasurementModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto measurement_mode_ptr = measurement_mode.get_if<FrequencyMeasurementMode>();
  const auto measurement_mode_raw_ptr = measurement_mode.get_if<pb::int32>();
  if (measurement_mode_ptr) {
    request.set_measurement_mode(*measurement_mode_ptr);
  }
  else if (measurement_mode_raw_ptr) {
    request.set_measurement_mode_raw(*measurement_mode_raw_ptr);
  }

  auto response = FrequencyCounterConfigureMeasurementModeResponse{};

  raise_if_error(
      stub->FrequencyCounterConfigureMeasurementMode(&context, request, &response),
      context);

  return response;
}

FrequencyCounterConfigureMeasurementTimeResponse
frequency_counter_configure_measurement_time(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& measurement_time)
{
  ::grpc::ClientContext context;

  auto request = FrequencyCounterConfigureMeasurementTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_measurement_time(measurement_time);

  auto response = FrequencyCounterConfigureMeasurementTimeResponse{};

  raise_if_error(
      stub->FrequencyCounterConfigureMeasurementTime(&context, request, &response),
      context);

  return response;
}

FrequencyCounterMeasureFrequencyResponse
frequency_counter_measure_frequency(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = FrequencyCounterMeasureFrequencyRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = FrequencyCounterMeasureFrequencyResponse{};

  raise_if_error(
      stub->FrequencyCounterMeasureFrequency(&context, request, &response),
      context);

  return response;
}

GetAttributeViBooleanResponse
get_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);

  auto response = GetAttributeViBooleanResponse{};

  raise_if_error(
      stub->GetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt32Response
get_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);

  auto response = GetAttributeViInt32Response{};

  raise_if_error(
      stub->GetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt64Response
get_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);

  auto response = GetAttributeViInt64Response{};

  raise_if_error(
      stub->GetAttributeViInt64(&context, request, &response),
      context);

  return response;
}

GetAttributeViReal64Response
get_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);

  auto response = GetAttributeViReal64Response{};

  raise_if_error(
      stub->GetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

GetAttributeViSessionResponse
get_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiDigitalAttribute& attribute)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute(attribute);

  auto response = GetAttributeViSessionResponse{};

  raise_if_error(
      stub->GetAttributeViSession(&context, request, &response),
      context);

  return response;
}

GetAttributeViStringResponse
get_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);

  auto response = GetAttributeViStringResponse{};

  raise_if_error(
      stub->GetAttributeViString(&context, request, &response),
      context);

  return response;
}

GetChannelNameResponse
get_channel_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& index)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_index(index);

  auto response = GetChannelNameResponse{};

  raise_if_error(
      stub->GetChannelName(&context, request, &response),
      context);

  return response;
}

GetChannelNameFromStringResponse
get_channel_name_from_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& indices)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameFromStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_indices(indices);

  auto response = GetChannelNameFromStringResponse{};

  raise_if_error(
      stub->GetChannelNameFromString(&context, request, &response),
      context);

  return response;
}

GetErrorResponse
get_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetErrorResponse{};

  raise_if_error(
      stub->GetError(&context, request, &response),
      context);

  return response;
}

GetFailCountResponse
get_fail_count(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = GetFailCountRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = GetFailCountResponse{};

  raise_if_error(
      stub->GetFailCount(&context, request, &response),
      context);

  return response;
}

GetHistoryRAMSampleCountResponse
get_history_ram_sample_count(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site)
{
  ::grpc::ClientContext context;

  auto request = GetHistoryRAMSampleCountRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site(site);

  auto response = GetHistoryRAMSampleCountResponse{};

  raise_if_error(
      stub->GetHistoryRAMSampleCount(&context, request, &response),
      context);

  return response;
}

GetPatternNameResponse
get_pattern_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& pattern_index)
{
  ::grpc::ClientContext context;

  auto request = GetPatternNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pattern_index(pattern_index);

  auto response = GetPatternNameResponse{};

  raise_if_error(
      stub->GetPatternName(&context, request, &response),
      context);

  return response;
}

GetPatternPinIndexesResponse
get_pattern_pin_indexes(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& start_label)
{
  ::grpc::ClientContext context;

  auto request = GetPatternPinIndexesRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_start_label(start_label);

  auto response = GetPatternPinIndexesResponse{};

  raise_if_error(
      stub->GetPatternPinIndexes(&context, request, &response),
      context);

  return response;
}

GetPatternPinListResponse
get_pattern_pin_list(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& start_label)
{
  ::grpc::ClientContext context;

  auto request = GetPatternPinListRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_start_label(start_label);

  auto response = GetPatternPinListResponse{};

  raise_if_error(
      stub->GetPatternPinList(&context, request, &response),
      context);

  return response;
}

GetPinNameResponse
get_pin_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& pin_index)
{
  ::grpc::ClientContext context;

  auto request = GetPinNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin_index(pin_index);

  auto response = GetPinNameResponse{};

  raise_if_error(
      stub->GetPinName(&context, request, &response),
      context);

  return response;
}

GetPinResultsPinInformationResponse
get_pin_results_pin_information(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = GetPinResultsPinInformationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = GetPinResultsPinInformationResponse{};

  raise_if_error(
      stub->GetPinResultsPinInformation(&context, request, &response),
      context);

  return response;
}

GetSitePassFailResponse
get_site_pass_fail(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list)
{
  ::grpc::ClientContext context;

  auto request = GetSitePassFailRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);

  auto response = GetSitePassFailResponse{};

  raise_if_error(
      stub->GetSitePassFail(&context, request, &response),
      context);

  return response;
}

GetSiteResultsSiteNumbersResponse
get_site_results_site_numbers(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list, const simple_variant<SiteResultType, pb::int32>& site_result_type)
{
  ::grpc::ClientContext context;

  auto request = GetSiteResultsSiteNumbersRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);
  const auto site_result_type_ptr = site_result_type.get_if<SiteResultType>();
  const auto site_result_type_raw_ptr = site_result_type.get_if<pb::int32>();
  if (site_result_type_ptr) {
    request.set_site_result_type(*site_result_type_ptr);
  }
  else if (site_result_type_raw_ptr) {
    request.set_site_result_type_raw(*site_result_type_raw_ptr);
  }

  auto response = GetSiteResultsSiteNumbersResponse{};

  raise_if_error(
      stub->GetSiteResultsSiteNumbers(&context, request, &response),
      context);

  return response;
}

GetTimeSetDriveFormatResponse
get_time_set_drive_format(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin, const pb::string& time_set_name)
{
  ::grpc::ClientContext context;

  auto request = GetTimeSetDriveFormatRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin(pin);
  request.set_time_set_name(time_set_name);

  auto response = GetTimeSetDriveFormatResponse{};

  raise_if_error(
      stub->GetTimeSetDriveFormat(&context, request, &response),
      context);

  return response;
}

GetTimeSetEdgeResponse
get_time_set_edge(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin, const pb::string& time_set_name, const simple_variant<TimeSetEdgeType, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = GetTimeSetEdgeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin(pin);
  request.set_time_set_name(time_set_name);
  const auto edge_ptr = edge.get_if<TimeSetEdgeType>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = GetTimeSetEdgeResponse{};

  raise_if_error(
      stub->GetTimeSetEdge(&context, request, &response),
      context);

  return response;
}

GetTimeSetEdgeMultiplierResponse
get_time_set_edge_multiplier(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin, const pb::string& time_set_name)
{
  ::grpc::ClientContext context;

  auto request = GetTimeSetEdgeMultiplierRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin(pin);
  request.set_time_set_name(time_set_name);

  auto response = GetTimeSetEdgeMultiplierResponse{};

  raise_if_error(
      stub->GetTimeSetEdgeMultiplier(&context, request, &response),
      context);

  return response;
}

GetTimeSetNameResponse
get_time_set_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& time_set_index)
{
  ::grpc::ClientContext context;

  auto request = GetTimeSetNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_time_set_index(time_set_index);

  auto response = GetTimeSetNameResponse{};

  raise_if_error(
      stub->GetTimeSetName(&context, request, &response),
      context);

  return response;
}

GetTimeSetPeriodResponse
get_time_set_period(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& time_set_name)
{
  ::grpc::ClientContext context;

  auto request = GetTimeSetPeriodRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_time_set_name(time_set_name);

  auto response = GetTimeSetPeriodResponse{};

  raise_if_error(
      stub->GetTimeSetPeriod(&context, request, &response),
      context);

  return response;
}

InitResponse
init(const StubPtr& stub, const pb::string& resource_name, const bool& id_query, const bool& reset_device, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitResponse{};

  raise_if_error(
      stub->Init(&context, request, &response),
      context);

  return response;
}

InitWithOptionsResponse
init_with_options(const StubPtr& stub, const pb::string& resource_name, const bool& id_query, const bool& reset_device, const pb::string& option_string, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitWithOptionsRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);
  request.set_option_string(option_string);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitWithOptionsResponse{};

  raise_if_error(
      stub->InitWithOptions(&context, request, &response),
      context);

  return response;
}

InitiateResponse
initiate(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = InitiateRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = InitiateResponse{};

  raise_if_error(
      stub->Initiate(&context, request, &response),
      context);

  return response;
}

IsDoneResponse
is_done(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = IsDoneRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = IsDoneResponse{};

  raise_if_error(
      stub->IsDone(&context, request, &response),
      context);

  return response;
}

IsSiteEnabledResponse
is_site_enabled(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site)
{
  ::grpc::ClientContext context;

  auto request = IsSiteEnabledRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site(site);

  auto response = IsSiteEnabledResponse{};

  raise_if_error(
      stub->IsSiteEnabled(&context, request, &response),
      context);

  return response;
}

LoadLevelsResponse
load_levels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = LoadLevelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = LoadLevelsResponse{};

  raise_if_error(
      stub->LoadLevels(&context, request, &response),
      context);

  return response;
}

LoadPatternResponse
load_pattern(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = LoadPatternRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = LoadPatternResponse{};

  raise_if_error(
      stub->LoadPattern(&context, request, &response),
      context);

  return response;
}

LoadPinMapResponse
load_pin_map(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = LoadPinMapRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = LoadPinMapResponse{};

  raise_if_error(
      stub->LoadPinMap(&context, request, &response),
      context);

  return response;
}

LoadSpecificationsResponse
load_specifications(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = LoadSpecificationsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = LoadSpecificationsResponse{};

  raise_if_error(
      stub->LoadSpecifications(&context, request, &response),
      context);

  return response;
}

LoadTimingResponse
load_timing(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = LoadTimingRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = LoadTimingResponse{};

  raise_if_error(
      stub->LoadTiming(&context, request, &response),
      context);

  return response;
}

MapPinToChannelResponse
map_pin_to_channel(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& pin, const pb::int32& site, const pb::string& channel)
{
  ::grpc::ClientContext context;

  auto request = MapPinToChannelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_pin(pin);
  request.set_site(site);
  request.set_channel(channel);

  auto response = MapPinToChannelResponse{};

  raise_if_error(
      stub->MapPinToChannel(&context, request, &response),
      context);

  return response;
}

PPMUConfigureApertureTimeResponse
ppmu_configure_aperture_time(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& aperture_time, const simple_variant<PpmuApertureTimeUnits, pb::int32>& units)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureApertureTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_aperture_time(aperture_time);
  const auto units_ptr = units.get_if<PpmuApertureTimeUnits>();
  const auto units_raw_ptr = units.get_if<pb::int32>();
  if (units_ptr) {
    request.set_units(*units_ptr);
  }
  else if (units_raw_ptr) {
    request.set_units_raw(*units_raw_ptr);
  }

  auto response = PPMUConfigureApertureTimeResponse{};

  raise_if_error(
      stub->PPMUConfigureApertureTime(&context, request, &response),
      context);

  return response;
}

PPMUConfigureCurrentLevelResponse
ppmu_configure_current_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& current_level)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureCurrentLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_current_level(current_level);

  auto response = PPMUConfigureCurrentLevelResponse{};

  raise_if_error(
      stub->PPMUConfigureCurrentLevel(&context, request, &response),
      context);

  return response;
}

PPMUConfigureCurrentLevelRangeResponse
ppmu_configure_current_level_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& range)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureCurrentLevelRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_range(range);

  auto response = PPMUConfigureCurrentLevelRangeResponse{};

  raise_if_error(
      stub->PPMUConfigureCurrentLevelRange(&context, request, &response),
      context);

  return response;
}

PPMUConfigureCurrentLimitResponse
ppmu_configure_current_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<PpmuCurrentLimitBehavior, pb::int32>& behavior, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureCurrentLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto behavior_ptr = behavior.get_if<PpmuCurrentLimitBehavior>();
  const auto behavior_raw_ptr = behavior.get_if<pb::int32>();
  if (behavior_ptr) {
    request.set_behavior(*behavior_ptr);
  }
  else if (behavior_raw_ptr) {
    request.set_behavior_raw(*behavior_raw_ptr);
  }
  request.set_limit(limit);

  auto response = PPMUConfigureCurrentLimitResponse{};

  raise_if_error(
      stub->PPMUConfigureCurrentLimit(&context, request, &response),
      context);

  return response;
}

PPMUConfigureCurrentLimitRangeResponse
ppmu_configure_current_limit_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& range)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureCurrentLimitRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_range(range);

  auto response = PPMUConfigureCurrentLimitRangeResponse{};

  raise_if_error(
      stub->PPMUConfigureCurrentLimitRange(&context, request, &response),
      context);

  return response;
}

PPMUConfigureOutputFunctionResponse
ppmu_configure_output_function(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<PpmuOutputFunction, pb::int32>& output_function)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureOutputFunctionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto output_function_ptr = output_function.get_if<PpmuOutputFunction>();
  const auto output_function_raw_ptr = output_function.get_if<pb::int32>();
  if (output_function_ptr) {
    request.set_output_function(*output_function_ptr);
  }
  else if (output_function_raw_ptr) {
    request.set_output_function_raw(*output_function_raw_ptr);
  }

  auto response = PPMUConfigureOutputFunctionResponse{};

  raise_if_error(
      stub->PPMUConfigureOutputFunction(&context, request, &response),
      context);

  return response;
}

PPMUConfigureVoltageLevelResponse
ppmu_configure_voltage_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& voltage_level)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureVoltageLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_voltage_level(voltage_level);

  auto response = PPMUConfigureVoltageLevelResponse{};

  raise_if_error(
      stub->PPMUConfigureVoltageLevel(&context, request, &response),
      context);

  return response;
}

PPMUConfigureVoltageLimitsResponse
ppmu_configure_voltage_limits(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& lower_voltage_limit, const double& upper_voltage_limit)
{
  ::grpc::ClientContext context;

  auto request = PPMUConfigureVoltageLimitsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_lower_voltage_limit(lower_voltage_limit);
  request.set_upper_voltage_limit(upper_voltage_limit);

  auto response = PPMUConfigureVoltageLimitsResponse{};

  raise_if_error(
      stub->PPMUConfigureVoltageLimits(&context, request, &response),
      context);

  return response;
}

PPMUMeasureResponse
ppmu_measure(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<PpmuMeasurementType, pb::int32>& measurement_type)
{
  ::grpc::ClientContext context;

  auto request = PPMUMeasureRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto measurement_type_ptr = measurement_type.get_if<PpmuMeasurementType>();
  const auto measurement_type_raw_ptr = measurement_type.get_if<pb::int32>();
  if (measurement_type_ptr) {
    request.set_measurement_type(*measurement_type_ptr);
  }
  else if (measurement_type_raw_ptr) {
    request.set_measurement_type_raw(*measurement_type_raw_ptr);
  }

  auto response = PPMUMeasureResponse{};

  raise_if_error(
      stub->PPMUMeasure(&context, request, &response),
      context);

  return response;
}

PPMUSourceResponse
ppmu_source(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = PPMUSourceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = PPMUSourceResponse{};

  raise_if_error(
      stub->PPMUSource(&context, request, &response),
      context);

  return response;
}

ReadSequencerFlagResponse
read_sequencer_flag(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& flag)
{
  ::grpc::ClientContext context;

  auto request = ReadSequencerFlagRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_flag(flag);

  auto response = ReadSequencerFlagResponse{};

  raise_if_error(
      stub->ReadSequencerFlag(&context, request, &response),
      context);

  return response;
}

ReadSequencerRegisterResponse
read_sequencer_register(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& reg)
{
  ::grpc::ClientContext context;

  auto request = ReadSequencerRegisterRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_reg(reg);

  auto response = ReadSequencerRegisterResponse{};

  raise_if_error(
      stub->ReadSequencerRegister(&context, request, &response),
      context);

  return response;
}

ReadStaticResponse
read_static(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = ReadStaticRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = ReadStaticResponse{};

  raise_if_error(
      stub->ReadStatic(&context, request, &response),
      context);

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response),
      context);

  return response;
}

ResetAttributeResponse
reset_attribute(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = ResetAttributeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = ResetAttributeResponse{};

  raise_if_error(
      stub->ResetAttribute(&context, request, &response),
      context);

  return response;
}

ResetDeviceResponse
reset_device(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetDeviceRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetDeviceResponse{};

  raise_if_error(
      stub->ResetDevice(&context, request, &response),
      context);

  return response;
}

SelectFunctionResponse
select_function(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<SelectedFunction, pb::int32>& function)
{
  ::grpc::ClientContext context;

  auto request = SelectFunctionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto function_ptr = function.get_if<SelectedFunction>();
  const auto function_raw_ptr = function.get_if<pb::int32>();
  if (function_ptr) {
    request.set_function(*function_ptr);
  }
  else if (function_raw_ptr) {
    request.set_function_raw(*function_raw_ptr);
  }

  auto response = SelectFunctionResponse{};

  raise_if_error(
      stub->SelectFunction(&context, request, &response),
      context);

  return response;
}

SelfCalibrateResponse
self_calibrate(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfCalibrateRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfCalibrateResponse{};

  raise_if_error(
      stub->SelfCalibrate(&context, request, &response),
      context);

  return response;
}

SelfTestResponse
self_test(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfTestRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfTestResponse{};

  raise_if_error(
      stub->SelfTest(&context, request, &response),
      context);

  return response;
}

SendSoftwareEdgeTriggerResponse
send_software_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<SoftwareTrigger, pb::int32>& trigger, const pb::string& trigger_identifier)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto trigger_ptr = trigger.get_if<SoftwareTrigger>();
  const auto trigger_raw_ptr = trigger.get_if<pb::int32>();
  if (trigger_ptr) {
    request.set_trigger(*trigger_ptr);
  }
  else if (trigger_raw_ptr) {
    request.set_trigger_raw(*trigger_raw_ptr);
  }
  request.set_trigger_identifier(trigger_identifier);

  auto response = SendSoftwareEdgeTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeTrigger(&context, request, &response),
      context);

  return response;
}

SetAttributeViBooleanResponse
set_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute, const bool& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);
  request.set_value(value);

  auto response = SetAttributeViBooleanResponse{};

  raise_if_error(
      stub->SetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt32Response
set_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute, const simple_variant<NiDigitalInt32AttributeValues, pb::int32>& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);
  const auto value_ptr = value.get_if<NiDigitalInt32AttributeValues>();
  const auto value_raw_ptr = value.get_if<pb::int32>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = SetAttributeViInt32Response{};

  raise_if_error(
      stub->SetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt64Response
set_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute, const pb::int64& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);
  request.set_value_raw(value);

  auto response = SetAttributeViInt64Response{};

  raise_if_error(
      stub->SetAttributeViInt64(&context, request, &response),
      context);

  return response;
}

SetAttributeViReal64Response
set_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute, const double& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);
  request.set_value_raw(value);

  auto response = SetAttributeViReal64Response{};

  raise_if_error(
      stub->SetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

SetAttributeViSessionResponse
set_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiDigitalAttribute& attribute, const nidevice_grpc::Session& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute(attribute);
  request.mutable_value()->CopyFrom(value);

  auto response = SetAttributeViSessionResponse{};

  raise_if_error(
      stub->SetAttributeViSession(&context, request, &response),
      context);

  return response;
}

SetAttributeViStringResponse
set_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDigitalAttribute& attribute, const pb::string& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute(attribute);
  request.set_value_raw(value);

  auto response = SetAttributeViStringResponse{};

  raise_if_error(
      stub->SetAttributeViString(&context, request, &response),
      context);

  return response;
}

TDRResponse
tdr(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const bool& apply_offsets)
{
  ::grpc::ClientContext context;

  auto request = TDRRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_apply_offsets(apply_offsets);

  auto response = TDRResponse{};

  raise_if_error(
      stub->TDR(&context, request, &response),
      context);

  return response;
}

UnloadAllPatternsResponse
unload_all_patterns(const StubPtr& stub, const nidevice_grpc::Session& vi, const bool& unload_keep_alive_pattern)
{
  ::grpc::ClientContext context;

  auto request = UnloadAllPatternsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_unload_keep_alive_pattern(unload_keep_alive_pattern);

  auto response = UnloadAllPatternsResponse{};

  raise_if_error(
      stub->UnloadAllPatterns(&context, request, &response),
      context);

  return response;
}

UnloadSpecificationsResponse
unload_specifications(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = UnloadSpecificationsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = UnloadSpecificationsResponse{};

  raise_if_error(
      stub->UnloadSpecifications(&context, request, &response),
      context);

  return response;
}

WaitUntilDoneResponse
wait_until_done(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitUntilDoneRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_timeout(timeout);

  auto response = WaitUntilDoneResponse{};

  raise_if_error(
      stub->WaitUntilDone(&context, request, &response),
      context);

  return response;
}

WriteSequencerFlagResponse
write_sequencer_flag(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& flag, const bool& value)
{
  ::grpc::ClientContext context;

  auto request = WriteSequencerFlagRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_flag(flag);
  request.set_value(value);

  auto response = WriteSequencerFlagResponse{};

  raise_if_error(
      stub->WriteSequencerFlag(&context, request, &response),
      context);

  return response;
}

WriteSequencerFlagSynchronizedResponse
write_sequencer_flag_synchronized(const StubPtr& stub, const pb::uint32& session_count, const std::vector<nidevice_grpc::Session>& sessions, const pb::string& flag, const bool& value)
{
  ::grpc::ClientContext context;

  auto request = WriteSequencerFlagSynchronizedRequest{};
  request.set_session_count(session_count);
  copy_array(sessions, request.mutable_sessions());
  request.set_flag(flag);
  request.set_value(value);

  auto response = WriteSequencerFlagSynchronizedResponse{};

  raise_if_error(
      stub->WriteSequencerFlagSynchronized(&context, request, &response),
      context);

  return response;
}

WriteSequencerRegisterResponse
write_sequencer_register(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& reg, const pb::int32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteSequencerRegisterRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_reg(reg);
  request.set_value(value);

  auto response = WriteSequencerRegisterResponse{};

  raise_if_error(
      stub->WriteSequencerRegister(&context, request, &response),
      context);

  return response;
}

WriteSourceWaveformBroadcastU32Response
write_source_waveform_broadcast_u32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& waveform_name, const std::vector<pb::uint32>& waveform_data)
{
  ::grpc::ClientContext context;

  auto request = WriteSourceWaveformBroadcastU32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_waveform_name(waveform_name);
  copy_array(waveform_data, request.mutable_waveform_data());

  auto response = WriteSourceWaveformBroadcastU32Response{};

  raise_if_error(
      stub->WriteSourceWaveformBroadcastU32(&context, request, &response),
      context);

  return response;
}

WriteSourceWaveformDataFromFileTDMSResponse
write_source_waveform_data_from_file_tdms(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& waveform_name, const pb::string& waveform_file_path)
{
  ::grpc::ClientContext context;

  auto request = WriteSourceWaveformDataFromFileTDMSRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_waveform_name(waveform_name);
  request.set_waveform_file_path(waveform_file_path);

  auto response = WriteSourceWaveformDataFromFileTDMSResponse{};

  raise_if_error(
      stub->WriteSourceWaveformDataFromFileTDMS(&context, request, &response),
      context);

  return response;
}

WriteSourceWaveformSiteUniqueU32Response
write_source_waveform_site_unique_u32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& site_list, const pb::string& waveform_name, const pb::int32& num_waveforms, const pb::int32& samples_per_waveform, const std::vector<pb::uint32>& waveform_data)
{
  ::grpc::ClientContext context;

  auto request = WriteSourceWaveformSiteUniqueU32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_site_list(site_list);
  request.set_waveform_name(waveform_name);
  request.set_num_waveforms(num_waveforms);
  request.set_samples_per_waveform(samples_per_waveform);
  copy_array(waveform_data, request.mutable_waveform_data());

  auto response = WriteSourceWaveformSiteUniqueU32Response{};

  raise_if_error(
      stub->WriteSourceWaveformSiteUniqueU32(&context, request, &response),
      context);

  return response;
}

WriteStaticResponse
write_static(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<WriteStaticPinState, pb::uint32>& state)
{
  ::grpc::ClientContext context;

  auto request = WriteStaticRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto state_ptr = state.get_if<WriteStaticPinState>();
  const auto state_raw_ptr = state.get_if<pb::uint32>();
  if (state_ptr) {
    request.set_state(*state_ptr);
  }
  else if (state_raw_ptr) {
    request.set_state_raw(*state_raw_ptr);
  }

  auto response = WriteStaticResponse{};

  raise_if_error(
      stub->WriteStatic(&context, request, &response),
      context);

  return response;
}


} // namespace nidigitalpattern_grpc::experimental::client
