
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service registrar implementation for the NI-Digital Pattern Driver Metadata
//---------------------------------------------------------------------
#include "nidigitalpattern_library.h"

#include <grpcpp/server_builder.h>

#include "nidigitalpattern_service.h"
#include "nidigitalpattern_service_registrar.h"

namespace nidigitalpattern_grpc {

namespace {
struct LibraryAndService {
  LibraryAndService(
    const std::shared_ptr<nidevice_grpc::SessionResourceRepository<ViSession>>& resource_repository,
    const NiDigitalFeatureToggles& feature_toggles)
      : library(std::make_shared<NiDigitalLibrary>()),
      service(std::make_shared<NiDigitalService>(
        library,
        resource_repository,
        feature_toggles)) {
  }
  std::shared_ptr<NiDigitalLibrary> library;
  std::shared_ptr<NiDigitalService> service;
};
}

std::shared_ptr<void> register_service(
  grpc::ServerBuilder& builder,
  const std::shared_ptr<nidevice_grpc::SessionResourceRepository<ViSession>>& resource_repository,
  const nidevice_grpc::FeatureToggles& feature_toggles)
{
  auto toggles = NiDigitalFeatureToggles(feature_toggles);

  if (toggles.is_enabled)
  {
    auto library_and_service_ptr = std::make_shared<LibraryAndService>(
      resource_repository,
      toggles);
    auto& service = library_and_service_ptr->service;
    builder.RegisterService(service.get());
    return library_and_service_ptr;
  }

  return {};
}

} // nidigitalpattern_grpc
