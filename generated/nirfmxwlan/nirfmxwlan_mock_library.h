//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-RFMXWLAN
//---------------------------------------------------------------------
#ifndef NIRFMXWLAN_GRPC_MOCK_LIBRARY_H
#define NIRFMXWLAN_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nirfmxwlan_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiRFmxWLANMockLibrary : public nirfmxwlan_grpc::NiRFmxWLANLibraryInterface {
 public:
  MOCK_METHOD(int32, AbortMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, AnalyzeIQ1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AnalyzeNWaveformsIQ, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0[], float64 dx[], NIComplexSingle iq[], int32 iqSize[], int32 arraySize, int32 reset), (override));
  MOCK_METHOD(int32, AnalyzeNWaveformsSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0[], float64 dx[], float32 spectrum[], int32 spectrumSize[], int32 arraySize, int32 reset), (override));
  MOCK_METHOD(int32, AnalyzeSpectrum1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AutoDetectSignal, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout), (override));
  MOCK_METHOD(int32, AutoLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, BuildChainString, (char selectorString[], int32 chainNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildGateString, (char selectorString[], int32 gateNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildOffsetString, (char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildSegmentString, (char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildSignalString, (char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, BuildStreamString, (char selectorString[], int32 streamNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildUserString, (char selectorString[], int32 userNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, CfgChannelBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 channelBandwidth), (override));
  MOCK_METHOD(int32, CfgDigitalEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgExternalAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency), (override));
  MOCK_METHOD(int32, CfgFrequencyArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, CfgFrequencyReference, (niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency), (override));
  MOCK_METHOD(int32, CfgIQPowerEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgMechanicalAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue), (override));
  MOCK_METHOD(int32, CfgNumberOfFrequencySegmentsAndReceiveChains, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfFrequencySegments, int32 numberOfReceiveChains), (override));
  MOCK_METHOD(int32, CfgRFAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue), (override));
  MOCK_METHOD(int32, CfgReferenceLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel), (override));
  MOCK_METHOD(int32, CfgSelectedPortsMultiple, (niRFmxInstrHandle instrumentHandle, char selectorString[], char selectedPorts[]), (override));
  MOCK_METHOD(int32, CfgSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgStandard, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 standard), (override));
  MOCK_METHOD(int32, CheckMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone), (override));
  MOCK_METHOD(int32, ClearAllNamedResults, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, ClearNamedResult, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CloneSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]), (override));
  MOCK_METHOD(int32, Close, (niRFmxInstrHandle instrumentHandle, int32 forceDestroy), (override));
  MOCK_METHOD(int32, Commit, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CreateSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DSSSModAccCfgAcquisitionLength, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 acquisitionLengthMode, float64 acquisitionLength), (override));
  MOCK_METHOD(int32, DSSSModAccCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, DSSSModAccCfgEVMUnit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit), (override));
  MOCK_METHOD(int32, DSSSModAccCfgMeasurementLength, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 maximumMeasurementLength), (override));
  MOCK_METHOD(int32, DSSSModAccCfgPowerMeasurementCustomGateArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startTime[], float64 stopTime[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, DSSSModAccCfgPowerMeasurementEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerMeasurementEnabled), (override));
  MOCK_METHOD(int32, DSSSModAccCfgPowerMeasurementNumberOfCustomGates, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCustomGates), (override));
  MOCK_METHOD(int32, DSSSModAccFetchAveragePowers, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preambleAveragePowerMean, float64* headerAveragePowerMean, float64* dataAveragePowerMean, float64* ppduAveragePowerMean), (override));
  MOCK_METHOD(int32, DSSSModAccFetchConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DSSSModAccFetchCustomGatePowersArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averagePowerMean[], float64 peakPowerMaximum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DSSSModAccFetchDecodedHeaderBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedHeaderBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DSSSModAccFetchDecodedPSDUBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedPSDUBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DSSSModAccFetchEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsevmMean, float64* peakEVM80211_2016Maximum, float64* peakEVM80211_2007Maximum, float64* peakEVM80211_1999Maximum, float64* frequencyErrorMean, float64* chipClockErrorMean, int32* numberOfChipsUsed), (override));
  MOCK_METHOD(int32, DSSSModAccFetchEVMPerChipMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmPerChipMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DSSSModAccFetchIQImpairments, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffsetMean, float64* iqGainImbalanceMean, float64* iqQuadratureErrorMean), (override));
  MOCK_METHOD(int32, DSSSModAccFetchPPDUInformation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* dataModulationFormat, int32* payloadLength, int32* preambleType, int32* lockedClocksBit, int32* headerCRCStatus, int32* psducrcStatus), (override));
  MOCK_METHOD(int32, DSSSModAccFetchPeakPowers, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preamblePeakPowerMaximum, float64* headerPeakPowerMaximum, float64* dataPeakPowerMaximum, float64* ppduPeakPowerMaximum), (override));
  MOCK_METHOD(int32, DeleteSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DisableTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, GetAllNamedResultNames, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists), (override));
  MOCK_METHOD(int32, GetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]), (override));
  MOCK_METHOD(int32, GetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetError, (niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, GetErrorString, (niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, Initialize, (char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession), (override));
  MOCK_METHOD(int32, InitializeFromNIRFSASession, (uInt32 nirfsaSession, niRFmxInstrHandle* handleOut), (override));
  MOCK_METHOD(int32, Initiate, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]), (override));
  MOCK_METHOD(int32, OFDMModAccAutoLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout), (override));
  MOCK_METHOD(int32, OFDMModAccCfg1ReferenceWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize), (override));
  MOCK_METHOD(int32, OFDMModAccCfgAcquisitionLength, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 acquisitionLengthMode, float64 acquisitionLength), (override));
  MOCK_METHOD(int32, OFDMModAccCfgAmplitudeTrackingEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amplitudeTrackingEnabled), (override));
  MOCK_METHOD(int32, OFDMModAccCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, OFDMModAccCfgChannelEstimationType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelEstimationType), (override));
  MOCK_METHOD(int32, OFDMModAccCfgCommonClockSourceEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled), (override));
  MOCK_METHOD(int32, OFDMModAccCfgEVMUnit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit), (override));
  MOCK_METHOD(int32, OFDMModAccCfgFrequencyErrorEstimationMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyErrorEstimationMethod), (override));
  MOCK_METHOD(int32, OFDMModAccCfgMeasurementLength, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 maximumMeasurementLength), (override));
  MOCK_METHOD(int32, OFDMModAccCfgMeasurementMode, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMode), (override));
  MOCK_METHOD(int32, OFDMModAccCfgNReferenceWaveforms, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0[], float64 dx[], NIComplexSingle referenceWaveform[], int32 referenceWaveformSize[], int32 arraySize), (override));
  MOCK_METHOD(int32, OFDMModAccCfgNoiseCompensationEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled), (override));
  MOCK_METHOD(int32, OFDMModAccCfgOptimizeDynamicRangeForEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 optimizeDynamicRangeForEVMEnabled, double optimizeDynamicRangeForEVMMargin), (override));
  MOCK_METHOD(int32, OFDMModAccCfgPhaseTrackingEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 phaseTrackingEnabled), (override));
  MOCK_METHOD(int32, OFDMModAccCfgSymbolClockErrorCorrectionEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 symbolClockErrorCorrectionEnabled), (override));
  MOCK_METHOD(int32, OFDMModAccClearNoiseCalibrationDatabase, (niRFmxInstrHandle instrumentHandle), (override));
  MOCK_METHOD(int32, OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchChainRMSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* chainRMSEVMMean, float64* chainDataRMSEVMMean, float64* chainPilotRMSEVMMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchChannelFrequencyResponseMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 channelFrequencyResponseMeanMagnitude[], float32 channelFrequencyResponseMeanPhase[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchCommonPilotErrorTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 commonPilotErrorMagnitude[], float32 commonPilotErrorPhase[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchCompositeRMSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* compositeRMSEVMMean, float64* compositeDataRMSEVMMean, float64* compositePilotRMSEVMMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchCrossPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* crossPowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchCustomGatePowersArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averagePowerMean[], float64 peakPowerMaximum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDataAveragePower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* dataAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDataConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDataPeakPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* dataPeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedEHTSIGBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedEHTSIGBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedLSIGBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedLSIGBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedPSDUBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedPSDUBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedSIGBBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedSIGBBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedSIGBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedSIGBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedServiceBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedServiceBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchDecodedUSIGBitsTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedUSIGBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchEVMSubcarrierIndices, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndices[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchFrequencyErrorCCDF10Percent, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorCCDF10Percent), (override));
  MOCK_METHOD(int32, OFDMModAccFetchFrequencyErrorMean, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchGroupDelayMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 groupDelayMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchGuardIntervalType, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* guardIntervalType), (override));
  MOCK_METHOD(int32, OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqGainImbalancePerSubcarrierMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchIQImpairments, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* relativeIQOriginOffsetMean, float64* iqGainImbalanceMean, float64* iqQuadratureErrorMean, float64* absoluteIQOriginOffsetMean, float64* iqTimingSkewMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqQuadratureErrorPerSubcarrierMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchLSIGParityCheckStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* lsigParityCheckStatus), (override));
  MOCK_METHOD(int32, OFDMModAccFetchLTFSize, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ltfSize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchMCSIndex, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* mcsIndex), (override));
  MOCK_METHOD(int32, OFDMModAccFetchNumberOfHESIGBSymbols, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfHESIGBSymbols), (override));
  MOCK_METHOD(int32, OFDMModAccFetchNumberOfSpaceTimeStreams, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfSpaceTimeStreams), (override));
  MOCK_METHOD(int32, OFDMModAccFetchNumberOfUsers, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfUsers), (override));
  MOCK_METHOD(int32, OFDMModAccFetchNumberofSymbolsUsed, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfSymbolsUsed), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPEAveragePower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPEDuration, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peDuration), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPEPeakPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* pePeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPPDUAveragePower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* ppduAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPPDUPeakPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* ppduPeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPPDUType, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ppduType), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPSDUCRCStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* psducrcStatus), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPhaseNoisePSDMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseNoisePSDMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPilotConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pilotConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreambleAveragePowers80211ac, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* vhtsigaAveragePowerMean, float64* vhtstfAveragePowerMean, float64* vhtltfAveragePowerMean, float64* vhtsigbAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreambleAveragePowers80211ax, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigAveragePowerMean, float64* hesigaAveragePowerMean, float64* hesigbAveragePowerMean, float64* hestfAveragePowerMean, float64* heltfAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreambleAveragePowers80211n, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* htsigAveragePowerMean, float64* htstfAveragePowerMean, float64* htdltfAveragePowerMean, float64* hteltfAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreambleAveragePowersCommon, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lstfAveragePowerMean, float64* lltfAveragePowerMean, float64* lsigAveragePowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreambleFrequencyErrorTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 preambleFrequencyError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreamblePeakPowers80211ac, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* vhtsigaPeakPowerMaximum, float64* vhtstfPeakPowerMaximum, float64* vhtltfPeakPowerMaximum, float64* vhtsigbPeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreamblePeakPowers80211ax, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigPeakPowerMaximum, float64* hesigaPeakPowerMaximum, float64* hesigbPeakPowerMaximum, float64* hestfPeakPowerMaximum, float64* heltfPeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreamblePeakPowers80211n, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* htsigPeakPowerMaximum, float64* htstfPeakPowerMaximum, float64* htdltfPeakPowerMaximum, float64* hteltfPeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchPreamblePeakPowersCommon, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lstfPeakPowerMaximum, float64* lltfPeakPowerMaximum, float64* lsigPeakPowerMaximum), (override));
  MOCK_METHOD(int32, OFDMModAccFetchRUOffsetAndSize, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ruOffset, int32* ruSize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSIGBCRCStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* sigbcrcStatus), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSIGCRCStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* sigcrcStatus), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSpectralFlatness, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spectralFlatnessMargin, int32* spectralFlatnessMarginSubcarrierIndex), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSpectralFlatnessMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatnessMean[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchStreamRMSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* streamRMSEVMMean, float64* streamDataRMSEVMMean, float64* streamPilotRMSEVMMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndex, float64* x0, float64* dx, float32 subcarrierChainEVMPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndex, float64* x0, float64* dx, float32 subcarrierStreamEVMPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 symbolIndex, float64* x0, float64* dx, float32 symbolChainEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSymbolClockErrorMean, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* symbolClockErrorMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 symbolIndex, float64* x0, float64* dx, float32 symbolStreamEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUnusedToneError, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* unusedToneErrorMargin, int32* unusedToneErrorMarginRUIndex), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUnusedToneErrorMarginPerRU, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 unusedToneErrorMarginPerRU[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUnusedToneErrorMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 unusedToneError[], float32 unusedToneErrorMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserDataConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle userDataConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserPilotConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle userPilotConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* userPowerMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserStreamRMSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* userStreamRMSEVMMean, float64* userStreamDataRMSEVMMean, float64* userStreamPilotRMSEVMMean), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OFDMModAccValidateCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid), (override));
  MOCK_METHOD(int32, PowerRampCfgAcquisitionLength, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 acquisitionLength), (override));
  MOCK_METHOD(int32, PowerRampCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, PowerRampFetchFallTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rawWaveform[], float32 processedWaveform[], float32 threshold[], float32 powerReference[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PowerRampFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* riseTimeMean, float64* fallTimeMean), (override));
  MOCK_METHOD(int32, PowerRampFetchRiseTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rawWaveform[], float32 processedWaveform[], float32 threshold[], float32 powerReference[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ResetAttribute, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID), (override));
  MOCK_METHOD(int32, ResetToDefault, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, SEMCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, SEMCfgMaskType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 maskType), (override));
  MOCK_METHOD(int32, SEMCfgNumberOfOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets), (override));
  MOCK_METHOD(int32, SEMCfgOffsetFrequencyArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeLimitArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgSpan, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spanAuto, float64 span), (override));
  MOCK_METHOD(int32, SEMCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, SEMFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus), (override));
  MOCK_METHOD(int32, SEMFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SelectMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces), (override));
  MOCK_METHOD(int32, SendSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle), (override));
  MOCK_METHOD(int32, SetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]), (override));
  MOCK_METHOD(int32, SetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, TXPCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, TXPCfgBurstDetectionEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstDetectionEnabled), (override));
  MOCK_METHOD(int32, TXPCfgMaximumMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 maximumMeasurementInterval), (override));
  MOCK_METHOD(int32, TXPFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averagePowerMean, float64* peakPowerMaximum), (override));
  MOCK_METHOD(int32, TXPFetchPowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, WaitForAcquisitionComplete, (niRFmxInstrHandle instrumentHandle, float64 timeout), (override));
  MOCK_METHOD(int32, WaitForMeasurementComplete, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIRFMXWLAN_GRPC_MOCK_LIBRARY_H
