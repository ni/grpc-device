//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-RFMXWLAN Metadata
//---------------------------------------------------------------------
#include "nirfmxwlan_library.h"

namespace nirfmxwlan_grpc {

int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxWLAN_AbortMeasurements(instrumentHandle, selectorString);
}

int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  return RFmxWLAN_AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 AnalyzeNWaveformsIQ(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0[], float64 dx[], NIComplexSingle iq[], int32 iqSize[], int32 arraySize, int32 reset)
{
  return RFmxWLAN_AnalyzeNWaveformsIQ(instrumentHandle, selectorString, resultName, x0, dx, iq, iqSize, arraySize, reset);
}

int32 AnalyzeNWaveformsSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0[], float64 dx[], float32 spectrum[], int32 spectrumSize[], int32 arraySize, int32 reset)
{
  return RFmxWLAN_AnalyzeNWaveformsSpectrum(instrumentHandle, selectorString, resultName, x0, dx, spectrum, spectrumSize, arraySize, reset);
}

int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  return RFmxWLAN_AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
}

int32 AutoDetectSignal(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  return RFmxWLAN_AutoDetectSignal(instrumentHandle, selectorString, timeout);
}

int32 AutoDetectSignalAnalysisOnly(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize)
{
  return RFmxWLAN_AutoDetectSignalAnalysisOnly(instrumentHandle, selectorString, x0, dx, iq, arraySize);
}

int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxWLAN_AutoLevel(instrumentHandle, selectorString, measurementInterval);
}

int32 BuildChainString(char selectorString[], int32 chainNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxWLAN_BuildChainString(selectorString, chainNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildGateString(char selectorString[], int32 gateNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxWLAN_BuildGateString(selectorString, gateNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxWLAN_BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxWLAN_BuildSegmentString(selectorString, segmentNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  return RFmxWLAN_BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 BuildStreamString(char selectorString[], int32 streamNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxWLAN_BuildStreamString(selectorString, streamNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildUserString(char selectorString[], int32 userNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxWLAN_BuildUserString(selectorString, userNumber, selectorStringOutLength, selectorStringOut);
}

int32 CfgChannelBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 channelBandwidth)
{
  return RFmxWLAN_CfgChannelBandwidth(instrumentHandle, selectorString, channelBandwidth);
}

int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  return RFmxWLAN_CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  return RFmxWLAN_CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  return RFmxWLAN_CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 CfgFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency[], int32 numberOfElements)
{
  return RFmxWLAN_CfgFrequencyArray(instrumentHandle, selectorString, centerFrequency, numberOfElements);
}

int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  return RFmxWLAN_CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  return RFmxWLAN_CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
}

int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  return RFmxWLAN_CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 CfgNumberOfFrequencySegmentsAndReceiveChains(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfFrequencySegments, int32 numberOfReceiveChains)
{
  return RFmxWLAN_CfgNumberOfFrequencySegmentsAndReceiveChains(instrumentHandle, selectorString, numberOfFrequencySegments, numberOfReceiveChains);
}

int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  return RFmxWLAN_CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  return RFmxWLAN_CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 CfgSelectedPortsMultiple(niRFmxInstrHandle instrumentHandle, char selectorString[], char selectedPorts[])
{
  return RFmxWLAN_CfgSelectedPortsMultiple(instrumentHandle, selectorString, selectedPorts);
}

int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  return RFmxWLAN_CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 CfgStandard(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 standard)
{
  return RFmxWLAN_CfgStandard(instrumentHandle, selectorString, standard);
}

int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  return RFmxWLAN_CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxWLAN_ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxWLAN_ClearNamedResult(instrumentHandle, selectorString);
}

int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  return RFmxWLAN_CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  return RFmxWLAN_Close(instrumentHandle, forceDestroy);
}

int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxWLAN_Commit(instrumentHandle, selectorString);
}

int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  return RFmxWLAN_CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 DSSSModAccCfgAcquisitionLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 acquisitionLengthMode, float64 acquisitionLength)
{
  return RFmxWLAN_DSSSModAccCfgAcquisitionLength(instrumentHandle, selectorString, acquisitionLengthMode, acquisitionLength);
}

int32 DSSSModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxWLAN_DSSSModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 DSSSModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit)
{
  return RFmxWLAN_DSSSModAccCfgEVMUnit(instrumentHandle, selectorString, evmUnit);
}

int32 DSSSModAccCfgMeasurementLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 maximumMeasurementLength)
{
  return RFmxWLAN_DSSSModAccCfgMeasurementLength(instrumentHandle, selectorString, measurementOffset, maximumMeasurementLength);
}

int32 DSSSModAccCfgPowerMeasurementCustomGateArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startTime[], float64 stopTime[], int32 numberOfElements)
{
  return RFmxWLAN_DSSSModAccCfgPowerMeasurementCustomGateArray(instrumentHandle, selectorString, startTime, stopTime, numberOfElements);
}

int32 DSSSModAccCfgPowerMeasurementEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerMeasurementEnabled)
{
  return RFmxWLAN_DSSSModAccCfgPowerMeasurementEnabled(instrumentHandle, selectorString, powerMeasurementEnabled);
}

int32 DSSSModAccCfgPowerMeasurementNumberOfCustomGates(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCustomGates)
{
  return RFmxWLAN_DSSSModAccCfgPowerMeasurementNumberOfCustomGates(instrumentHandle, selectorString, numberOfCustomGates);
}

int32 DSSSModAccFetchAveragePowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preambleAveragePowerMean, float64* headerAveragePowerMean, float64* dataAveragePowerMean, float64* ppduAveragePowerMean)
{
  return RFmxWLAN_DSSSModAccFetchAveragePowers(instrumentHandle, selectorString, timeout, preambleAveragePowerMean, headerAveragePowerMean, dataAveragePowerMean, ppduAveragePowerMean);
}

int32 DSSSModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_DSSSModAccFetchConstellationTrace(instrumentHandle, selectorString, timeout, constellation, arraySize, actualArraySize);
}

int32 DSSSModAccFetchCustomGatePowersArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averagePowerMean[], float64 peakPowerMaximum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_DSSSModAccFetchCustomGatePowersArray(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum, arraySize, actualArraySize);
}

int32 DSSSModAccFetchDecodedHeaderBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedHeaderBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_DSSSModAccFetchDecodedHeaderBitsTrace(instrumentHandle, selectorString, timeout, decodedHeaderBits, arraySize, actualArraySize);
}

int32 DSSSModAccFetchDecodedPSDUBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedPSDUBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_DSSSModAccFetchDecodedPSDUBitsTrace(instrumentHandle, selectorString, timeout, decodedPSDUBits, arraySize, actualArraySize);
}

int32 DSSSModAccFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsevmMean, float64* peakEVM80211_2016Maximum, float64* peakEVM80211_2007Maximum, float64* peakEVM80211_1999Maximum, float64* frequencyErrorMean, float64* chipClockErrorMean, int32* numberOfChipsUsed)
{
  return RFmxWLAN_DSSSModAccFetchEVM(instrumentHandle, selectorString, timeout, rmsevmMean, peakEVM80211_2016Maximum, peakEVM80211_2007Maximum, peakEVM80211_1999Maximum, frequencyErrorMean, chipClockErrorMean, numberOfChipsUsed);
}

int32 DSSSModAccFetchEVMPerChipMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmPerChipMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_DSSSModAccFetchEVMPerChipMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, evmPerChipMean, arraySize, actualArraySize);
}

int32 DSSSModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffsetMean, float64* iqGainImbalanceMean, float64* iqQuadratureErrorMean)
{
  return RFmxWLAN_DSSSModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, iqOriginOffsetMean, iqGainImbalanceMean, iqQuadratureErrorMean);
}

int32 DSSSModAccFetchPPDUInformation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* dataModulationFormat, int32* payloadLength, int32* preambleType, int32* lockedClocksBit, int32* headerCRCStatus, int32* psducrcStatus)
{
  return RFmxWLAN_DSSSModAccFetchPPDUInformation(instrumentHandle, selectorString, timeout, dataModulationFormat, payloadLength, preambleType, lockedClocksBit, headerCRCStatus, psducrcStatus);
}

int32 DSSSModAccFetchPeakPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preamblePeakPowerMaximum, float64* headerPeakPowerMaximum, float64* dataPeakPowerMaximum, float64* ppduPeakPowerMaximum)
{
  return RFmxWLAN_DSSSModAccFetchPeakPowers(instrumentHandle, selectorString, timeout, preamblePeakPowerMaximum, headerPeakPowerMaximum, dataPeakPowerMaximum, ppduPeakPowerMaximum);
}

int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  return RFmxWLAN_DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxWLAN_DisableTrigger(instrumentHandle, selectorString);
}

int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  return RFmxWLAN_GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  return RFmxWLAN_GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  return RFmxWLAN_GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  return RFmxWLAN_GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  return RFmxWLAN_GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  return RFmxWLAN_GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  return RFmxWLAN_GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  return RFmxWLAN_GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  return RFmxWLAN_GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  return RFmxWLAN_GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  return RFmxWLAN_GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxWLAN_GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxWLAN_GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  return RFmxWLAN_Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  return RFmxWLAN_InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  return RFmxWLAN_Initiate(instrumentHandle, selectorString, resultName);
}

int32 OFDMModAccAutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  return RFmxWLAN_OFDMModAccAutoLevel(instrumentHandle, selectorString, timeout);
}

int32 OFDMModAccCfg1ReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize)
{
  return RFmxWLAN_OFDMModAccCfg1ReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize);
}

int32 OFDMModAccCfgAcquisitionLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 acquisitionLengthMode, float64 acquisitionLength)
{
  return RFmxWLAN_OFDMModAccCfgAcquisitionLength(instrumentHandle, selectorString, acquisitionLengthMode, acquisitionLength);
}

int32 OFDMModAccCfgAmplitudeTrackingEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amplitudeTrackingEnabled)
{
  return RFmxWLAN_OFDMModAccCfgAmplitudeTrackingEnabled(instrumentHandle, selectorString, amplitudeTrackingEnabled);
}

int32 OFDMModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxWLAN_OFDMModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 OFDMModAccCfgChannelEstimationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelEstimationType)
{
  return RFmxWLAN_OFDMModAccCfgChannelEstimationType(instrumentHandle, selectorString, channelEstimationType);
}

int32 OFDMModAccCfgCommonClockSourceEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled)
{
  return RFmxWLAN_OFDMModAccCfgCommonClockSourceEnabled(instrumentHandle, selectorString, commonClockSourceEnabled);
}

int32 OFDMModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit)
{
  return RFmxWLAN_OFDMModAccCfgEVMUnit(instrumentHandle, selectorString, evmUnit);
}

int32 OFDMModAccCfgFrequencyErrorEstimationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyErrorEstimationMethod)
{
  return RFmxWLAN_OFDMModAccCfgFrequencyErrorEstimationMethod(instrumentHandle, selectorString, frequencyErrorEstimationMethod);
}

int32 OFDMModAccCfgMeasurementLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 maximumMeasurementLength)
{
  return RFmxWLAN_OFDMModAccCfgMeasurementLength(instrumentHandle, selectorString, measurementOffset, maximumMeasurementLength);
}

int32 OFDMModAccCfgMeasurementMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMode)
{
  return RFmxWLAN_OFDMModAccCfgMeasurementMode(instrumentHandle, selectorString, measurementMode);
}

int32 OFDMModAccCfgNReferenceWaveforms(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0[], float64 dx[], NIComplexSingle referenceWaveform[], int32 referenceWaveformSize[], int32 arraySize)
{
  return RFmxWLAN_OFDMModAccCfgNReferenceWaveforms(instrumentHandle, selectorString, x0, dx, referenceWaveform, referenceWaveformSize, arraySize);
}

int32 OFDMModAccCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  return RFmxWLAN_OFDMModAccCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 OFDMModAccCfgOptimizeDynamicRangeForEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 optimizeDynamicRangeForEVMEnabled, double optimizeDynamicRangeForEVMMargin)
{
  return RFmxWLAN_OFDMModAccCfgOptimizeDynamicRangeForEVM(instrumentHandle, selectorString, optimizeDynamicRangeForEVMEnabled, optimizeDynamicRangeForEVMMargin);
}

int32 OFDMModAccCfgPhaseTrackingEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 phaseTrackingEnabled)
{
  return RFmxWLAN_OFDMModAccCfgPhaseTrackingEnabled(instrumentHandle, selectorString, phaseTrackingEnabled);
}

int32 OFDMModAccCfgSymbolClockErrorCorrectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 symbolClockErrorCorrectionEnabled)
{
  return RFmxWLAN_OFDMModAccCfgSymbolClockErrorCorrectionEnabled(instrumentHandle, selectorString, symbolClockErrorCorrectionEnabled);
}

int32 OFDMModAccClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle)
{
  return RFmxWLAN_OFDMModAccClearNoiseCalibrationDatabase(instrumentHandle);
}

int32 OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainPilotRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchChainRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* chainRMSEVMMean, float64* chainDataRMSEVMMean, float64* chainPilotRMSEVMMean)
{
  return RFmxWLAN_OFDMModAccFetchChainRMSEVM(instrumentHandle, selectorString, timeout, chainRMSEVMMean, chainDataRMSEVMMean, chainPilotRMSEVMMean);
}

int32 OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchChannelFrequencyResponseMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 channelFrequencyResponseMeanMagnitude[], float32 channelFrequencyResponseMeanPhase[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchChannelFrequencyResponseMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, channelFrequencyResponseMeanMagnitude, channelFrequencyResponseMeanPhase, arraySize, actualArraySize);
}

int32 OFDMModAccFetchCommonPilotErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 commonPilotErrorMagnitude[], float32 commonPilotErrorPhase[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchCommonPilotErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, commonPilotErrorMagnitude, commonPilotErrorPhase, arraySize, actualArraySize);
}

int32 OFDMModAccFetchCompositeRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* compositeRMSEVMMean, float64* compositeDataRMSEVMMean, float64* compositePilotRMSEVMMean)
{
  return RFmxWLAN_OFDMModAccFetchCompositeRMSEVM(instrumentHandle, selectorString, timeout, compositeRMSEVMMean, compositeDataRMSEVMMean, compositePilotRMSEVMMean);
}

int32 OFDMModAccFetchCrossPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* crossPowerMean)
{
  return RFmxWLAN_OFDMModAccFetchCrossPower(instrumentHandle, selectorString, timeout, crossPowerMean);
}

int32 OFDMModAccFetchCustomGatePowersArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averagePowerMean[], float64 peakPowerMaximum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchCustomGatePowersArray(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDataAveragePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* dataAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchDataAveragePower(instrumentHandle, selectorString, timeout, dataAveragePowerMean);
}

int32 OFDMModAccFetchDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDataConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDataPeakPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* dataPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchDataPeakPower(instrumentHandle, selectorString, timeout, dataPeakPowerMaximum);
}

int32 OFDMModAccFetchDecodedEHTSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedEHTSIGBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedEHTSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedEHTSIGBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDecodedLSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedLSIGBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedLSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedLSIGBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDecodedPSDUBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedPSDUBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedPSDUBitsTrace(instrumentHandle, selectorString, timeout, decodedPSDUBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDecodedSIGBBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedSIGBBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedSIGBBitsTrace(instrumentHandle, selectorString, timeout, decodedSIGBBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDecodedSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedSIGBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedSIGBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDecodedServiceBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedServiceBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedServiceBitsTrace(instrumentHandle, selectorString, timeout, decodedServiceBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchDecodedUSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedUSIGBits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchDecodedUSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedUSIGBits, arraySize, actualArraySize);
}

int32 OFDMModAccFetchEVMSubcarrierIndices(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndices[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchEVMSubcarrierIndices(instrumentHandle, selectorString, timeout, subcarrierIndices, arraySize, actualArraySize);
}

int32 OFDMModAccFetchFrequencyErrorCCDF10Percent(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorCCDF10Percent)
{
  return RFmxWLAN_OFDMModAccFetchFrequencyErrorCCDF10Percent(instrumentHandle, selectorString, timeout, frequencyErrorCCDF10Percent);
}

int32 OFDMModAccFetchFrequencyErrorMean(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorMean)
{
  return RFmxWLAN_OFDMModAccFetchFrequencyErrorMean(instrumentHandle, selectorString, timeout, frequencyErrorMean);
}

int32 OFDMModAccFetchGroupDelayMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 groupDelayMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchGroupDelayMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, groupDelayMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchGuardIntervalType(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* guardIntervalType)
{
  return RFmxWLAN_OFDMModAccFetchGuardIntervalType(instrumentHandle, selectorString, timeout, guardIntervalType);
}

int32 OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqGainImbalancePerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqGainImbalancePerSubcarrierMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* relativeIQOriginOffsetMean, float64* iqGainImbalanceMean, float64* iqQuadratureErrorMean, float64* absoluteIQOriginOffsetMean, float64* iqTimingSkewMean)
{
  return RFmxWLAN_OFDMModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, relativeIQOriginOffsetMean, iqGainImbalanceMean, iqQuadratureErrorMean, absoluteIQOriginOffsetMean, iqTimingSkewMean);
}

int32 OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqQuadratureErrorPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqQuadratureErrorPerSubcarrierMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchLSIGParityCheckStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* lsigParityCheckStatus)
{
  return RFmxWLAN_OFDMModAccFetchLSIGParityCheckStatus(instrumentHandle, selectorString, timeout, lsigParityCheckStatus);
}

int32 OFDMModAccFetchLTFSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ltfSize)
{
  return RFmxWLAN_OFDMModAccFetchLTFSize(instrumentHandle, selectorString, timeout, ltfSize);
}

int32 OFDMModAccFetchMCSIndex(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* mcsIndex)
{
  return RFmxWLAN_OFDMModAccFetchMCSIndex(instrumentHandle, selectorString, timeout, mcsIndex);
}

int32 OFDMModAccFetchNumberOfHESIGBSymbols(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfHESIGBSymbols)
{
  return RFmxWLAN_OFDMModAccFetchNumberOfHESIGBSymbols(instrumentHandle, selectorString, timeout, numberOfHESIGBSymbols);
}

int32 OFDMModAccFetchNumberOfSpaceTimeStreams(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfSpaceTimeStreams)
{
  return RFmxWLAN_OFDMModAccFetchNumberOfSpaceTimeStreams(instrumentHandle, selectorString, timeout, numberOfSpaceTimeStreams);
}

int32 OFDMModAccFetchNumberOfUsers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfUsers)
{
  return RFmxWLAN_OFDMModAccFetchNumberOfUsers(instrumentHandle, selectorString, timeout, numberOfUsers);
}

int32 OFDMModAccFetchNumberofSymbolsUsed(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfSymbolsUsed)
{
  return RFmxWLAN_OFDMModAccFetchNumberofSymbolsUsed(instrumentHandle, selectorString, timeout, numberOfSymbolsUsed);
}

int32 OFDMModAccFetchPEAveragePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPEAveragePower(instrumentHandle, selectorString, timeout, peAveragePowerMean);
}

int32 OFDMModAccFetchPEDuration(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peDuration)
{
  return RFmxWLAN_OFDMModAccFetchPEDuration(instrumentHandle, selectorString, timeout, peDuration);
}

int32 OFDMModAccFetchPEPeakPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* pePeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPEPeakPower(instrumentHandle, selectorString, timeout, pePeakPowerMaximum);
}

int32 OFDMModAccFetchPPDUAveragePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* ppduAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPPDUAveragePower(instrumentHandle, selectorString, timeout, ppduAveragePowerMean);
}

int32 OFDMModAccFetchPPDUPeakPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* ppduPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPPDUPeakPower(instrumentHandle, selectorString, timeout, ppduPeakPowerMaximum);
}

int32 OFDMModAccFetchPPDUType(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ppduType)
{
  return RFmxWLAN_OFDMModAccFetchPPDUType(instrumentHandle, selectorString, timeout, ppduType);
}

int32 OFDMModAccFetchPSDUCRCStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* psducrcStatus)
{
  return RFmxWLAN_OFDMModAccFetchPSDUCRCStatus(instrumentHandle, selectorString, timeout, psducrcStatus);
}

int32 OFDMModAccFetchPhaseNoisePSDMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseNoisePSDMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchPhaseNoisePSDMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseNoisePSDMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchPilotConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pilotConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchPilotConstellationTrace(instrumentHandle, selectorString, timeout, pilotConstellation, arraySize, actualArraySize);
}

int32 OFDMModAccFetchPreambleAveragePowers80211ac(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* vhtsigaAveragePowerMean, float64* vhtstfAveragePowerMean, float64* vhtltfAveragePowerMean, float64* vhtsigbAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11ac(instrumentHandle, selectorString, timeout, vhtsigaAveragePowerMean, vhtstfAveragePowerMean, vhtltfAveragePowerMean, vhtsigbAveragePowerMean);
}

int32 OFDMModAccFetchPreambleAveragePowers80211ax(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigAveragePowerMean, float64* hesigaAveragePowerMean, float64* hesigbAveragePowerMean, float64* hestfAveragePowerMean, float64* heltfAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11ax(instrumentHandle, selectorString, timeout, rlsigAveragePowerMean, hesigaAveragePowerMean, hesigbAveragePowerMean, hestfAveragePowerMean, heltfAveragePowerMean);
}

int32 OFDMModAccFetchPreambleAveragePowers80211be(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigAveragePowerMean, float64* usigAveragePowerMean, float64* ehtsigAveragePowerMean, float64* ehtstfAveragePowerMean, float64* ehtltfAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11be(instrumentHandle, selectorString, timeout, rlsigAveragePowerMean, usigAveragePowerMean, ehtsigAveragePowerMean, ehtstfAveragePowerMean, ehtltfAveragePowerMean);
}

int32 OFDMModAccFetchPreambleAveragePowers80211n(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* htsigAveragePowerMean, float64* htstfAveragePowerMean, float64* htdltfAveragePowerMean, float64* hteltfAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11n(instrumentHandle, selectorString, timeout, htsigAveragePowerMean, htstfAveragePowerMean, htdltfAveragePowerMean, hteltfAveragePowerMean);
}

int32 OFDMModAccFetchPreambleAveragePowersCommon(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lstfAveragePowerMean, float64* lltfAveragePowerMean, float64* lsigAveragePowerMean)
{
  return RFmxWLAN_OFDMModAccFetchPreambleAveragePowersCommon(instrumentHandle, selectorString, timeout, lstfAveragePowerMean, lltfAveragePowerMean, lsigAveragePowerMean);
}

int32 OFDMModAccFetchPreambleFrequencyErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 preambleFrequencyError[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchPreambleFrequencyErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, preambleFrequencyError, arraySize, actualArraySize);
}

int32 OFDMModAccFetchPreamblePeakPowers80211ac(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* vhtsigaPeakPowerMaximum, float64* vhtstfPeakPowerMaximum, float64* vhtltfPeakPowerMaximum, float64* vhtsigbPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11ac(instrumentHandle, selectorString, timeout, vhtsigaPeakPowerMaximum, vhtstfPeakPowerMaximum, vhtltfPeakPowerMaximum, vhtsigbPeakPowerMaximum);
}

int32 OFDMModAccFetchPreamblePeakPowers80211ax(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigPeakPowerMaximum, float64* hesigaPeakPowerMaximum, float64* hesigbPeakPowerMaximum, float64* hestfPeakPowerMaximum, float64* heltfPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11ax(instrumentHandle, selectorString, timeout, rlsigPeakPowerMaximum, hesigaPeakPowerMaximum, hesigbPeakPowerMaximum, hestfPeakPowerMaximum, heltfPeakPowerMaximum);
}

int32 OFDMModAccFetchPreamblePeakPowers80211be(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigPeakPowerMaximum, float64* usigPeakPowerMaximum, float64* ehtsigPeakPowerMaximum, float64* ehtstfPeakPowerMaximum, float64* ehtltfPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11be(instrumentHandle, selectorString, timeout, rlsigPeakPowerMaximum, usigPeakPowerMaximum, ehtsigPeakPowerMaximum, ehtstfPeakPowerMaximum, ehtltfPeakPowerMaximum);
}

int32 OFDMModAccFetchPreamblePeakPowers80211n(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* htsigPeakPowerMaximum, float64* htstfPeakPowerMaximum, float64* htdltfPeakPowerMaximum, float64* hteltfPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11n(instrumentHandle, selectorString, timeout, htsigPeakPowerMaximum, htstfPeakPowerMaximum, htdltfPeakPowerMaximum, hteltfPeakPowerMaximum);
}

int32 OFDMModAccFetchPreamblePeakPowersCommon(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lstfPeakPowerMaximum, float64* lltfPeakPowerMaximum, float64* lsigPeakPowerMaximum)
{
  return RFmxWLAN_OFDMModAccFetchPreamblePeakPowersCommon(instrumentHandle, selectorString, timeout, lstfPeakPowerMaximum, lltfPeakPowerMaximum, lsigPeakPowerMaximum);
}

int32 OFDMModAccFetchRUOffsetAndSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ruOffset, int32* ruSize)
{
  return RFmxWLAN_OFDMModAccFetchRUOffsetAndSize(instrumentHandle, selectorString, timeout, ruOffset, ruSize);
}

int32 OFDMModAccFetchSIGBCRCStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* sigbcrcStatus)
{
  return RFmxWLAN_OFDMModAccFetchSIGBCRCStatus(instrumentHandle, selectorString, timeout, sigbcrcStatus);
}

int32 OFDMModAccFetchSIGCRCStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* sigcrcStatus)
{
  return RFmxWLAN_OFDMModAccFetchSIGCRCStatus(instrumentHandle, selectorString, timeout, sigcrcStatus);
}

int32 OFDMModAccFetchSpectralFlatness(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spectralFlatnessMargin, int32* spectralFlatnessMarginSubcarrierIndex)
{
  return RFmxWLAN_OFDMModAccFetchSpectralFlatness(instrumentHandle, selectorString, timeout, spectralFlatnessMargin, spectralFlatnessMarginSubcarrierIndex);
}

int32 OFDMModAccFetchSpectralFlatnessMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatnessMean[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchSpectralFlatnessMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, spectralFlatnessMean, spectralFlatnessLowerMask, spectralFlatnessUpperMask, arraySize, actualArraySize);
}

int32 OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamPilotRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchStreamRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* streamRMSEVMMean, float64* streamDataRMSEVMMean, float64* streamPilotRMSEVMMean)
{
  return RFmxWLAN_OFDMModAccFetchStreamRMSEVM(instrumentHandle, selectorString, timeout, streamRMSEVMMean, streamDataRMSEVMMean, streamPilotRMSEVMMean);
}

int32 OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndex, float64* x0, float64* dx, float32 subcarrierChainEVMPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, subcarrierIndex, x0, dx, subcarrierChainEVMPerSymbol, arraySize, actualArraySize);
}

int32 OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndex, float64* x0, float64* dx, float32 subcarrierStreamEVMPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, subcarrierIndex, x0, dx, subcarrierStreamEVMPerSymbol, arraySize, actualArraySize);
}

int32 OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 symbolIndex, float64* x0, float64* dx, float32 symbolChainEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, symbolIndex, x0, dx, symbolChainEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 OFDMModAccFetchSymbolClockErrorMean(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* symbolClockErrorMean)
{
  return RFmxWLAN_OFDMModAccFetchSymbolClockErrorMean(instrumentHandle, selectorString, timeout, symbolClockErrorMean);
}

int32 OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 symbolIndex, float64* x0, float64* dx, float32 symbolStreamEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, symbolIndex, x0, dx, symbolStreamEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUnusedToneError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* unusedToneErrorMargin, int32* unusedToneErrorMarginRUIndex)
{
  return RFmxWLAN_OFDMModAccFetchUnusedToneError(instrumentHandle, selectorString, timeout, unusedToneErrorMargin, unusedToneErrorMarginRUIndex);
}

int32 OFDMModAccFetchUnusedToneErrorMarginPerRU(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 unusedToneErrorMarginPerRU[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUnusedToneErrorMarginPerRU(instrumentHandle, selectorString, timeout, unusedToneErrorMarginPerRU, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUnusedToneErrorMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 unusedToneError[], float32 unusedToneErrorMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUnusedToneErrorMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, unusedToneError, unusedToneErrorMask, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUserDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle userDataConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUserDataConstellationTrace(instrumentHandle, selectorString, timeout, userDataConstellation, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUserPilotConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle userPilotConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUserPilotConstellationTrace(instrumentHandle, selectorString, timeout, userPilotConstellation, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUserPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* userPowerMean)
{
  return RFmxWLAN_OFDMModAccFetchUserPower(instrumentHandle, selectorString, timeout, userPowerMean);
}

int32 OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamPilotRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUserStreamRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* userStreamRMSEVMMean, float64* userStreamDataRMSEVMMean, float64* userStreamPilotRMSEVMMean)
{
  return RFmxWLAN_OFDMModAccFetchUserStreamRMSEVM(instrumentHandle, selectorString, timeout, userStreamRMSEVMMean, userStreamDataRMSEVMMean, userStreamPilotRMSEVMMean);
}

int32 OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
}

int32 OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 OFDMModAccValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid)
{
  return RFmxWLAN_OFDMModAccValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
}

int32 PowerRampCfgAcquisitionLength(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 acquisitionLength)
{
  return RFmxWLAN_PowerRampCfgAcquisitionLength(instrumentHandle, selectorString, acquisitionLength);
}

int32 PowerRampCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxWLAN_PowerRampCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 PowerRampFetchFallTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rawWaveform[], float32 processedWaveform[], float32 threshold[], float32 powerReference[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_PowerRampFetchFallTrace(instrumentHandle, selectorString, timeout, x0, dx, rawWaveform, processedWaveform, threshold, powerReference, arraySize, actualArraySize);
}

int32 PowerRampFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* riseTimeMean, float64* fallTimeMean)
{
  return RFmxWLAN_PowerRampFetchMeasurement(instrumentHandle, selectorString, timeout, riseTimeMean, fallTimeMean);
}

int32 PowerRampFetchRiseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rawWaveform[], float32 processedWaveform[], float32 threshold[], float32 powerReference[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_PowerRampFetchRiseTrace(instrumentHandle, selectorString, timeout, x0, dx, rawWaveform, processedWaveform, threshold, powerReference, arraySize, actualArraySize);
}

int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  return RFmxWLAN_ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxWLAN_ResetToDefault(instrumentHandle, selectorString);
}

int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxWLAN_SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 SEMCfgMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 maskType)
{
  return RFmxWLAN_SEMCfgMaskType(instrumentHandle, selectorString, maskType);
}

int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  return RFmxWLAN_SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements)
{
  return RFmxWLAN_SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband, numberOfElements);
}

int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  return RFmxWLAN_SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop, numberOfElements);
}

int32 SEMCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spanAuto, float64 span)
{
  return RFmxWLAN_SEMCfgSpan(instrumentHandle, selectorString, spanAuto, span);
}

int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxWLAN_SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 SEMFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  return RFmxWLAN_SEMFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
}

int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  return RFmxWLAN_SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  return RFmxWLAN_SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
}

int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  return RFmxWLAN_SEMFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, compositeMask, arraySize, actualArraySize);
}

int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  return RFmxWLAN_SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  return RFmxWLAN_SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
}

int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
}

int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  return RFmxWLAN_SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  return RFmxWLAN_SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  return RFmxWLAN_SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  return RFmxWLAN_SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  return RFmxWLAN_SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  return RFmxWLAN_SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  return RFmxWLAN_SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  return RFmxWLAN_SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  return RFmxWLAN_SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  return RFmxWLAN_SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  return RFmxWLAN_SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  return RFmxWLAN_SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  return RFmxWLAN_SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 TXPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxWLAN_TXPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 TXPCfgBurstDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstDetectionEnabled)
{
  return RFmxWLAN_TXPCfgBurstDetectionEnabled(instrumentHandle, selectorString, burstDetectionEnabled);
}

int32 TXPCfgMaximumMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 maximumMeasurementInterval)
{
  return RFmxWLAN_TXPCfgMaximumMeasurementInterval(instrumentHandle, selectorString, maximumMeasurementInterval);
}

int32 TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averagePowerMean, float64* peakPowerMaximum)
{
  return RFmxWLAN_TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum);
}

int32 TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  return RFmxWLAN_TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
}

int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  return RFmxWLAN_WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  return RFmxWLAN_WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxwlan_grpc
