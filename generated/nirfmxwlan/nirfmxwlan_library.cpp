//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXWLAN Metadata
//---------------------------------------------------------------------
#include "nirfmxwlan_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxWLAN.dll";
#else
static const char* kLibraryName = "libnirfmxwlan.so.1";
#endif

namespace nirfmxwlan_grpc {

NiRFmxWLANLibrary::NiRFmxWLANLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_.get_function_pointer("RFmxWLAN_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_.get_function_pointer("RFmxWLAN_AnalyzeIQ1Waveform"));
  function_pointers_.AnalyzeNWaveformsIQ = reinterpret_cast<AnalyzeNWaveformsIQPtr>(shared_library_.get_function_pointer("RFmxWLAN_AnalyzeNWaveformsIQ"));
  function_pointers_.AnalyzeNWaveformsSpectrum = reinterpret_cast<AnalyzeNWaveformsSpectrumPtr>(shared_library_.get_function_pointer("RFmxWLAN_AnalyzeNWaveformsSpectrum"));
  function_pointers_.AnalyzeSpectrum1Waveform = reinterpret_cast<AnalyzeSpectrum1WaveformPtr>(shared_library_.get_function_pointer("RFmxWLAN_AnalyzeSpectrum1Waveform"));
  function_pointers_.AutoDetectSignal = reinterpret_cast<AutoDetectSignalPtr>(shared_library_.get_function_pointer("RFmxWLAN_AutoDetectSignal"));
  function_pointers_.AutoDetectSignalAnalysisOnly = reinterpret_cast<AutoDetectSignalAnalysisOnlyPtr>(shared_library_.get_function_pointer("RFmxWLAN_AutoDetectSignalAnalysisOnly"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_.get_function_pointer("RFmxWLAN_AutoLevel"));
  function_pointers_.BuildChainString = reinterpret_cast<BuildChainStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildChainString"));
  function_pointers_.BuildGateString = reinterpret_cast<BuildGateStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildGateString"));
  function_pointers_.BuildOffsetString = reinterpret_cast<BuildOffsetStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildOffsetString"));
  function_pointers_.BuildSegmentString = reinterpret_cast<BuildSegmentStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildSegmentString"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildSignalString"));
  function_pointers_.BuildStreamString = reinterpret_cast<BuildStreamStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildStreamString"));
  function_pointers_.BuildUserString = reinterpret_cast<BuildUserStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_BuildUserString"));
  function_pointers_.CfgChannelBandwidth = reinterpret_cast<CfgChannelBandwidthPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgChannelBandwidth"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgFrequency"));
  function_pointers_.CfgFrequencyArray = reinterpret_cast<CfgFrequencyArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgFrequencyArray"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgMechanicalAttenuation"));
  function_pointers_.CfgNumberOfFrequencySegmentsAndReceiveChains = reinterpret_cast<CfgNumberOfFrequencySegmentsAndReceiveChainsPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgNumberOfFrequencySegmentsAndReceiveChains"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgReferenceLevel"));
  function_pointers_.CfgSelectedPortsMultiple = reinterpret_cast<CfgSelectedPortsMultiplePtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgSelectedPortsMultiple"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgSoftwareEdgeTrigger"));
  function_pointers_.CfgStandard = reinterpret_cast<CfgStandardPtr>(shared_library_.get_function_pointer("RFmxWLAN_CfgStandard"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxWLAN_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_.get_function_pointer("RFmxWLAN_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_.get_function_pointer("RFmxWLAN_ClearNamedResult"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxWLAN_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("RFmxWLAN_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("RFmxWLAN_Commit"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxWLAN_CreateSignalConfiguration"));
  function_pointers_.DSSSModAccCfgAcquisitionLength = reinterpret_cast<DSSSModAccCfgAcquisitionLengthPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgAcquisitionLength"));
  function_pointers_.DSSSModAccCfgAveraging = reinterpret_cast<DSSSModAccCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgAveraging"));
  function_pointers_.DSSSModAccCfgEVMUnit = reinterpret_cast<DSSSModAccCfgEVMUnitPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgEVMUnit"));
  function_pointers_.DSSSModAccCfgMeasurementLength = reinterpret_cast<DSSSModAccCfgMeasurementLengthPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgMeasurementLength"));
  function_pointers_.DSSSModAccCfgPowerMeasurementCustomGateArray = reinterpret_cast<DSSSModAccCfgPowerMeasurementCustomGateArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgPowerMeasurementCustomGateArray"));
  function_pointers_.DSSSModAccCfgPowerMeasurementEnabled = reinterpret_cast<DSSSModAccCfgPowerMeasurementEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgPowerMeasurementEnabled"));
  function_pointers_.DSSSModAccCfgPowerMeasurementNumberOfCustomGates = reinterpret_cast<DSSSModAccCfgPowerMeasurementNumberOfCustomGatesPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccCfgPowerMeasurementNumberOfCustomGates"));
  function_pointers_.DSSSModAccFetchAveragePowers = reinterpret_cast<DSSSModAccFetchAveragePowersPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchAveragePowers"));
  function_pointers_.DSSSModAccFetchConstellationTrace = reinterpret_cast<DSSSModAccFetchConstellationTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchConstellationTrace"));
  function_pointers_.DSSSModAccFetchCustomGatePowersArray = reinterpret_cast<DSSSModAccFetchCustomGatePowersArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchCustomGatePowersArray"));
  function_pointers_.DSSSModAccFetchDecodedHeaderBitsTrace = reinterpret_cast<DSSSModAccFetchDecodedHeaderBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchDecodedHeaderBitsTrace"));
  function_pointers_.DSSSModAccFetchDecodedPSDUBitsTrace = reinterpret_cast<DSSSModAccFetchDecodedPSDUBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchDecodedPSDUBitsTrace"));
  function_pointers_.DSSSModAccFetchEVM = reinterpret_cast<DSSSModAccFetchEVMPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchEVM"));
  function_pointers_.DSSSModAccFetchEVMPerChipMeanTrace = reinterpret_cast<DSSSModAccFetchEVMPerChipMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchEVMPerChipMeanTrace"));
  function_pointers_.DSSSModAccFetchIQImpairments = reinterpret_cast<DSSSModAccFetchIQImpairmentsPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchIQImpairments"));
  function_pointers_.DSSSModAccFetchPPDUInformation = reinterpret_cast<DSSSModAccFetchPPDUInformationPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchPPDUInformation"));
  function_pointers_.DSSSModAccFetchPeakPowers = reinterpret_cast<DSSSModAccFetchPeakPowersPtr>(shared_library_.get_function_pointer("RFmxWLAN_DSSSModAccFetchPeakPowers"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxWLAN_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_.get_function_pointer("RFmxWLAN_DisableTrigger"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetErrorString"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("RFmxWLAN_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_.get_function_pointer("RFmxWLAN_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("RFmxWLAN_Initiate"));
  function_pointers_.OFDMModAccAutoLevel = reinterpret_cast<OFDMModAccAutoLevelPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccAutoLevel"));
  function_pointers_.OFDMModAccCfg1ReferenceWaveform = reinterpret_cast<OFDMModAccCfg1ReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfg1ReferenceWaveform"));
  function_pointers_.OFDMModAccCfgAcquisitionLength = reinterpret_cast<OFDMModAccCfgAcquisitionLengthPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgAcquisitionLength"));
  function_pointers_.OFDMModAccCfgAmplitudeTrackingEnabled = reinterpret_cast<OFDMModAccCfgAmplitudeTrackingEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgAmplitudeTrackingEnabled"));
  function_pointers_.OFDMModAccCfgAveraging = reinterpret_cast<OFDMModAccCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgAveraging"));
  function_pointers_.OFDMModAccCfgChannelEstimationType = reinterpret_cast<OFDMModAccCfgChannelEstimationTypePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgChannelEstimationType"));
  function_pointers_.OFDMModAccCfgCommonClockSourceEnabled = reinterpret_cast<OFDMModAccCfgCommonClockSourceEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgCommonClockSourceEnabled"));
  function_pointers_.OFDMModAccCfgEVMUnit = reinterpret_cast<OFDMModAccCfgEVMUnitPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgEVMUnit"));
  function_pointers_.OFDMModAccCfgFrequencyErrorEstimationMethod = reinterpret_cast<OFDMModAccCfgFrequencyErrorEstimationMethodPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgFrequencyErrorEstimationMethod"));
  function_pointers_.OFDMModAccCfgMeasurementLength = reinterpret_cast<OFDMModAccCfgMeasurementLengthPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgMeasurementLength"));
  function_pointers_.OFDMModAccCfgMeasurementMode = reinterpret_cast<OFDMModAccCfgMeasurementModePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgMeasurementMode"));
  function_pointers_.OFDMModAccCfgNReferenceWaveforms = reinterpret_cast<OFDMModAccCfgNReferenceWaveformsPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgNReferenceWaveforms"));
  function_pointers_.OFDMModAccCfgNoiseCompensationEnabled = reinterpret_cast<OFDMModAccCfgNoiseCompensationEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgNoiseCompensationEnabled"));
  function_pointers_.OFDMModAccCfgOptimizeDynamicRangeForEVM = reinterpret_cast<OFDMModAccCfgOptimizeDynamicRangeForEVMPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgOptimizeDynamicRangeForEVM"));
  function_pointers_.OFDMModAccCfgPhaseTrackingEnabled = reinterpret_cast<OFDMModAccCfgPhaseTrackingEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgPhaseTrackingEnabled"));
  function_pointers_.OFDMModAccCfgSymbolClockErrorCorrectionEnabled = reinterpret_cast<OFDMModAccCfgSymbolClockErrorCorrectionEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCfgSymbolClockErrorCorrectionEnabled"));
  function_pointers_.OFDMModAccClearNoiseCalibrationDatabase = reinterpret_cast<OFDMModAccClearNoiseCalibrationDatabasePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccClearNoiseCalibrationDatabase"));
  function_pointers_.OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchChainRMSEVM = reinterpret_cast<OFDMModAccFetchChainRMSEVMPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchChainRMSEVM"));
  function_pointers_.OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchChainRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchChannelFrequencyResponseMeanTrace = reinterpret_cast<OFDMModAccFetchChannelFrequencyResponseMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchChannelFrequencyResponseMeanTrace"));
  function_pointers_.OFDMModAccFetchCommonPilotErrorTrace = reinterpret_cast<OFDMModAccFetchCommonPilotErrorTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchCommonPilotErrorTrace"));
  function_pointers_.OFDMModAccFetchCompositeRMSEVM = reinterpret_cast<OFDMModAccFetchCompositeRMSEVMPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchCompositeRMSEVM"));
  function_pointers_.OFDMModAccFetchCrossPower = reinterpret_cast<OFDMModAccFetchCrossPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchCrossPower"));
  function_pointers_.OFDMModAccFetchCustomGatePowersArray = reinterpret_cast<OFDMModAccFetchCustomGatePowersArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchCustomGatePowersArray"));
  function_pointers_.OFDMModAccFetchDataAveragePower = reinterpret_cast<OFDMModAccFetchDataAveragePowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDataAveragePower"));
  function_pointers_.OFDMModAccFetchDataConstellationTrace = reinterpret_cast<OFDMModAccFetchDataConstellationTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDataConstellationTrace"));
  function_pointers_.OFDMModAccFetchDataPeakPower = reinterpret_cast<OFDMModAccFetchDataPeakPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDataPeakPower"));
  function_pointers_.OFDMModAccFetchDecodedEHTSIGBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedEHTSIGBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedEHTSIGBitsTrace"));
  function_pointers_.OFDMModAccFetchDecodedLSIGBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedLSIGBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedLSIGBitsTrace"));
  function_pointers_.OFDMModAccFetchDecodedPSDUBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedPSDUBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedPSDUBitsTrace"));
  function_pointers_.OFDMModAccFetchDecodedSIGBBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedSIGBBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedSIGBBitsTrace"));
  function_pointers_.OFDMModAccFetchDecodedSIGBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedSIGBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedSIGBitsTrace"));
  function_pointers_.OFDMModAccFetchDecodedServiceBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedServiceBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedServiceBitsTrace"));
  function_pointers_.OFDMModAccFetchDecodedUSIGBitsTrace = reinterpret_cast<OFDMModAccFetchDecodedUSIGBitsTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchDecodedUSIGBitsTrace"));
  function_pointers_.OFDMModAccFetchEVMSubcarrierIndices = reinterpret_cast<OFDMModAccFetchEVMSubcarrierIndicesPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchEVMSubcarrierIndices"));
  function_pointers_.OFDMModAccFetchFrequencyErrorCCDF10Percent = reinterpret_cast<OFDMModAccFetchFrequencyErrorCCDF10PercentPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchFrequencyErrorCCDF10Percent"));
  function_pointers_.OFDMModAccFetchFrequencyErrorMean = reinterpret_cast<OFDMModAccFetchFrequencyErrorMeanPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchFrequencyErrorMean"));
  function_pointers_.OFDMModAccFetchGroupDelayMeanTrace = reinterpret_cast<OFDMModAccFetchGroupDelayMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchGroupDelayMeanTrace"));
  function_pointers_.OFDMModAccFetchGuardIntervalType = reinterpret_cast<OFDMModAccFetchGuardIntervalTypePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchGuardIntervalType"));
  function_pointers_.OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace = reinterpret_cast<OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace"));
  function_pointers_.OFDMModAccFetchIQImpairments = reinterpret_cast<OFDMModAccFetchIQImpairmentsPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchIQImpairments"));
  function_pointers_.OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace = reinterpret_cast<OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace"));
  function_pointers_.OFDMModAccFetchLSIGParityCheckStatus = reinterpret_cast<OFDMModAccFetchLSIGParityCheckStatusPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchLSIGParityCheckStatus"));
  function_pointers_.OFDMModAccFetchLTFSize = reinterpret_cast<OFDMModAccFetchLTFSizePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchLTFSize"));
  function_pointers_.OFDMModAccFetchMCSIndex = reinterpret_cast<OFDMModAccFetchMCSIndexPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchMCSIndex"));
  function_pointers_.OFDMModAccFetchNumberOfHESIGBSymbols = reinterpret_cast<OFDMModAccFetchNumberOfHESIGBSymbolsPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchNumberOfHESIGBSymbols"));
  function_pointers_.OFDMModAccFetchNumberOfSpaceTimeStreams = reinterpret_cast<OFDMModAccFetchNumberOfSpaceTimeStreamsPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchNumberOfSpaceTimeStreams"));
  function_pointers_.OFDMModAccFetchNumberOfUsers = reinterpret_cast<OFDMModAccFetchNumberOfUsersPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchNumberOfUsers"));
  function_pointers_.OFDMModAccFetchNumberofSymbolsUsed = reinterpret_cast<OFDMModAccFetchNumberofSymbolsUsedPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchNumberofSymbolsUsed"));
  function_pointers_.OFDMModAccFetchPEAveragePower = reinterpret_cast<OFDMModAccFetchPEAveragePowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPEAveragePower"));
  function_pointers_.OFDMModAccFetchPEDuration = reinterpret_cast<OFDMModAccFetchPEDurationPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPEDuration"));
  function_pointers_.OFDMModAccFetchPEPeakPower = reinterpret_cast<OFDMModAccFetchPEPeakPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPEPeakPower"));
  function_pointers_.OFDMModAccFetchPPDUAveragePower = reinterpret_cast<OFDMModAccFetchPPDUAveragePowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPPDUAveragePower"));
  function_pointers_.OFDMModAccFetchPPDUPeakPower = reinterpret_cast<OFDMModAccFetchPPDUPeakPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPPDUPeakPower"));
  function_pointers_.OFDMModAccFetchPPDUType = reinterpret_cast<OFDMModAccFetchPPDUTypePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPPDUType"));
  function_pointers_.OFDMModAccFetchPSDUCRCStatus = reinterpret_cast<OFDMModAccFetchPSDUCRCStatusPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPSDUCRCStatus"));
  function_pointers_.OFDMModAccFetchPhaseNoisePSDMeanTrace = reinterpret_cast<OFDMModAccFetchPhaseNoisePSDMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPhaseNoisePSDMeanTrace"));
  function_pointers_.OFDMModAccFetchPilotConstellationTrace = reinterpret_cast<OFDMModAccFetchPilotConstellationTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPilotConstellationTrace"));
  function_pointers_.OFDMModAccFetchPreambleAveragePowers80211ac = reinterpret_cast<OFDMModAccFetchPreambleAveragePowers80211acPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11ac"));
  function_pointers_.OFDMModAccFetchPreambleAveragePowers80211ax = reinterpret_cast<OFDMModAccFetchPreambleAveragePowers80211axPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11ax"));
  function_pointers_.OFDMModAccFetchPreambleAveragePowers80211be = reinterpret_cast<OFDMModAccFetchPreambleAveragePowers80211bePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11be"));
  function_pointers_.OFDMModAccFetchPreambleAveragePowers80211n = reinterpret_cast<OFDMModAccFetchPreambleAveragePowers80211nPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11n"));
  function_pointers_.OFDMModAccFetchPreambleAveragePowersCommon = reinterpret_cast<OFDMModAccFetchPreambleAveragePowersCommonPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreambleAveragePowersCommon"));
  function_pointers_.OFDMModAccFetchPreambleFrequencyErrorTrace = reinterpret_cast<OFDMModAccFetchPreambleFrequencyErrorTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreambleFrequencyErrorTrace"));
  function_pointers_.OFDMModAccFetchPreamblePeakPowers80211ac = reinterpret_cast<OFDMModAccFetchPreamblePeakPowers80211acPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11ac"));
  function_pointers_.OFDMModAccFetchPreamblePeakPowers80211ax = reinterpret_cast<OFDMModAccFetchPreamblePeakPowers80211axPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11ax"));
  function_pointers_.OFDMModAccFetchPreamblePeakPowers80211be = reinterpret_cast<OFDMModAccFetchPreamblePeakPowers80211bePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11be"));
  function_pointers_.OFDMModAccFetchPreamblePeakPowers80211n = reinterpret_cast<OFDMModAccFetchPreamblePeakPowers80211nPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11n"));
  function_pointers_.OFDMModAccFetchPreamblePeakPowersCommon = reinterpret_cast<OFDMModAccFetchPreamblePeakPowersCommonPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchPreamblePeakPowersCommon"));
  function_pointers_.OFDMModAccFetchRUOffsetAndSize = reinterpret_cast<OFDMModAccFetchRUOffsetAndSizePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchRUOffsetAndSize"));
  function_pointers_.OFDMModAccFetchSIGBCRCStatus = reinterpret_cast<OFDMModAccFetchSIGBCRCStatusPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSIGBCRCStatus"));
  function_pointers_.OFDMModAccFetchSIGCRCStatus = reinterpret_cast<OFDMModAccFetchSIGCRCStatusPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSIGCRCStatus"));
  function_pointers_.OFDMModAccFetchSpectralFlatness = reinterpret_cast<OFDMModAccFetchSpectralFlatnessPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSpectralFlatness"));
  function_pointers_.OFDMModAccFetchSpectralFlatnessMeanTrace = reinterpret_cast<OFDMModAccFetchSpectralFlatnessMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSpectralFlatnessMeanTrace"));
  function_pointers_.OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchStreamRMSEVM = reinterpret_cast<OFDMModAccFetchStreamRMSEVMPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchStreamRMSEVM"));
  function_pointers_.OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchStreamRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace = reinterpret_cast<OFDMModAccFetchSubcarrierChainEVMPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace"));
  function_pointers_.OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace = reinterpret_cast<OFDMModAccFetchSubcarrierStreamEVMPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace"));
  function_pointers_.OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace = reinterpret_cast<OFDMModAccFetchSymbolChainEVMPerSubcarrierTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace"));
  function_pointers_.OFDMModAccFetchSymbolClockErrorMean = reinterpret_cast<OFDMModAccFetchSymbolClockErrorMeanPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSymbolClockErrorMean"));
  function_pointers_.OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace = reinterpret_cast<OFDMModAccFetchSymbolStreamEVMPerSubcarrierTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace"));
  function_pointers_.OFDMModAccFetchUnusedToneError = reinterpret_cast<OFDMModAccFetchUnusedToneErrorPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUnusedToneError"));
  function_pointers_.OFDMModAccFetchUnusedToneErrorMarginPerRU = reinterpret_cast<OFDMModAccFetchUnusedToneErrorMarginPerRUPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUnusedToneErrorMarginPerRU"));
  function_pointers_.OFDMModAccFetchUnusedToneErrorMeanTrace = reinterpret_cast<OFDMModAccFetchUnusedToneErrorMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUnusedToneErrorMeanTrace"));
  function_pointers_.OFDMModAccFetchUserDataConstellationTrace = reinterpret_cast<OFDMModAccFetchUserDataConstellationTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserDataConstellationTrace"));
  function_pointers_.OFDMModAccFetchUserPilotConstellationTrace = reinterpret_cast<OFDMModAccFetchUserPilotConstellationTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserPilotConstellationTrace"));
  function_pointers_.OFDMModAccFetchUserPower = reinterpret_cast<OFDMModAccFetchUserPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserPower"));
  function_pointers_.OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccFetchUserStreamRMSEVM = reinterpret_cast<OFDMModAccFetchUserStreamRMSEVMPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserStreamRMSEVM"));
  function_pointers_.OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace = reinterpret_cast<OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace"));
  function_pointers_.OFDMModAccValidateCalibrationData = reinterpret_cast<OFDMModAccValidateCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccValidateCalibrationData"));
  function_pointers_.PowerRampCfgAcquisitionLength = reinterpret_cast<PowerRampCfgAcquisitionLengthPtr>(shared_library_.get_function_pointer("RFmxWLAN_PowerRampCfgAcquisitionLength"));
  function_pointers_.PowerRampCfgAveraging = reinterpret_cast<PowerRampCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxWLAN_PowerRampCfgAveraging"));
  function_pointers_.PowerRampFetchFallTrace = reinterpret_cast<PowerRampFetchFallTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_PowerRampFetchFallTrace"));
  function_pointers_.PowerRampFetchMeasurement = reinterpret_cast<PowerRampFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxWLAN_PowerRampFetchMeasurement"));
  function_pointers_.PowerRampFetchRiseTrace = reinterpret_cast<PowerRampFetchRiseTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_PowerRampFetchRiseTrace"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("RFmxWLAN_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_.get_function_pointer("RFmxWLAN_ResetToDefault"));
  function_pointers_.SEMCfgAveraging = reinterpret_cast<SEMCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgAveraging"));
  function_pointers_.SEMCfgMaskType = reinterpret_cast<SEMCfgMaskTypePtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgMaskType"));
  function_pointers_.SEMCfgNumberOfOffsets = reinterpret_cast<SEMCfgNumberOfOffsetsPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgNumberOfOffsets"));
  function_pointers_.SEMCfgOffsetFrequencyArray = reinterpret_cast<SEMCfgOffsetFrequencyArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgOffsetFrequencyArray"));
  function_pointers_.SEMCfgOffsetRelativeLimitArray = reinterpret_cast<SEMCfgOffsetRelativeLimitArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgOffsetRelativeLimitArray"));
  function_pointers_.SEMCfgSpan = reinterpret_cast<SEMCfgSpanPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgSpan"));
  function_pointers_.SEMCfgSweepTime = reinterpret_cast<SEMCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMCfgSweepTime"));
  function_pointers_.SEMFetchCarrierMeasurement = reinterpret_cast<SEMFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchCarrierMeasurement"));
  function_pointers_.SEMFetchLowerOffsetMargin = reinterpret_cast<SEMFetchLowerOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchLowerOffsetMargin"));
  function_pointers_.SEMFetchLowerOffsetMarginArray = reinterpret_cast<SEMFetchLowerOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchLowerOffsetMarginArray"));
  function_pointers_.SEMFetchLowerOffsetPower = reinterpret_cast<SEMFetchLowerOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchLowerOffsetPower"));
  function_pointers_.SEMFetchLowerOffsetPowerArray = reinterpret_cast<SEMFetchLowerOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchLowerOffsetPowerArray"));
  function_pointers_.SEMFetchMeasurementStatus = reinterpret_cast<SEMFetchMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchMeasurementStatus"));
  function_pointers_.SEMFetchSpectrum = reinterpret_cast<SEMFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchSpectrum"));
  function_pointers_.SEMFetchUpperOffsetMargin = reinterpret_cast<SEMFetchUpperOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchUpperOffsetMargin"));
  function_pointers_.SEMFetchUpperOffsetMarginArray = reinterpret_cast<SEMFetchUpperOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchUpperOffsetMarginArray"));
  function_pointers_.SEMFetchUpperOffsetPower = reinterpret_cast<SEMFetchUpperOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchUpperOffsetPower"));
  function_pointers_.SEMFetchUpperOffsetPowerArray = reinterpret_cast<SEMFetchUpperOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SEMFetchUpperOffsetPowerArray"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_.get_function_pointer("RFmxWLAN_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxWLAN_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxWLAN_SetAttributeU8Array"));
  function_pointers_.TXPCfgAveraging = reinterpret_cast<TXPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxWLAN_TXPCfgAveraging"));
  function_pointers_.TXPCfgBurstDetectionEnabled = reinterpret_cast<TXPCfgBurstDetectionEnabledPtr>(shared_library_.get_function_pointer("RFmxWLAN_TXPCfgBurstDetectionEnabled"));
  function_pointers_.TXPCfgMaximumMeasurementInterval = reinterpret_cast<TXPCfgMaximumMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxWLAN_TXPCfgMaximumMeasurementInterval"));
  function_pointers_.TXPFetchMeasurement = reinterpret_cast<TXPFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxWLAN_TXPFetchMeasurement"));
  function_pointers_.TXPFetchPowerTrace = reinterpret_cast<TXPFetchPowerTracePtr>(shared_library_.get_function_pointer("RFmxWLAN_TXPFetchPowerTrace"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_.get_function_pointer("RFmxWLAN_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_.get_function_pointer("RFmxWLAN_WaitForMeasurementComplete"));
}

NiRFmxWLANLibrary::~NiRFmxWLANLibrary()
{
}

::grpc::Status NiRFmxWLANLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxWLANLibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AbortMeasurements.");
  }
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
}

int32 NiRFmxWLANLibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AnalyzeIQ1Waveform.");
  }
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 NiRFmxWLANLibrary::AnalyzeNWaveformsIQ(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0[], float64 dx[], NIComplexSingle iq[], int32 iqSize[], int32 arraySize, int32 reset)
{
  if (!function_pointers_.AnalyzeNWaveformsIQ) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AnalyzeNWaveformsIQ.");
  }
  return function_pointers_.AnalyzeNWaveformsIQ(instrumentHandle, selectorString, resultName, x0, dx, iq, iqSize, arraySize, reset);
}

int32 NiRFmxWLANLibrary::AnalyzeNWaveformsSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0[], float64 dx[], float32 spectrum[], int32 spectrumSize[], int32 arraySize, int32 reset)
{
  if (!function_pointers_.AnalyzeNWaveformsSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AnalyzeNWaveformsSpectrum.");
  }
  return function_pointers_.AnalyzeNWaveformsSpectrum(instrumentHandle, selectorString, resultName, x0, dx, spectrum, spectrumSize, arraySize, reset);
}

int32 NiRFmxWLANLibrary::AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeSpectrum1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AnalyzeSpectrum1Waveform.");
  }
  return function_pointers_.AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
}

int32 NiRFmxWLANLibrary::AutoDetectSignal(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.AutoDetectSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AutoDetectSignal.");
  }
  return function_pointers_.AutoDetectSignal(instrumentHandle, selectorString, timeout);
}

int32 NiRFmxWLANLibrary::AutoDetectSignalAnalysisOnly(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize)
{
  if (!function_pointers_.AutoDetectSignalAnalysisOnly) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AutoDetectSignalAnalysisOnly.");
  }
  return function_pointers_.AutoDetectSignalAnalysisOnly(instrumentHandle, selectorString, x0, dx, iq, arraySize);
}

int32 NiRFmxWLANLibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_AutoLevel.");
  }
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, measurementInterval);
}

int32 NiRFmxWLANLibrary::BuildChainString(char selectorString[], int32 chainNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildChainString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildChainString.");
  }
  return function_pointers_.BuildChainString(selectorString, chainNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxWLANLibrary::BuildGateString(char selectorString[], int32 gateNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildGateString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildGateString.");
  }
  return function_pointers_.BuildGateString(selectorString, gateNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxWLANLibrary::BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildOffsetString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildOffsetString.");
  }
  return function_pointers_.BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxWLANLibrary::BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSegmentString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildSegmentString.");
  }
  return function_pointers_.BuildSegmentString(selectorString, segmentNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxWLANLibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildSignalString.");
  }
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 NiRFmxWLANLibrary::BuildStreamString(char selectorString[], int32 streamNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildStreamString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildStreamString.");
  }
  return function_pointers_.BuildStreamString(selectorString, streamNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxWLANLibrary::BuildUserString(char selectorString[], int32 userNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildUserString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_BuildUserString.");
  }
  return function_pointers_.BuildUserString(selectorString, userNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxWLANLibrary::CfgChannelBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 channelBandwidth)
{
  if (!function_pointers_.CfgChannelBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgChannelBandwidth.");
  }
  return function_pointers_.CfgChannelBandwidth(instrumentHandle, selectorString, channelBandwidth);
}

int32 NiRFmxWLANLibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgDigitalEdgeTrigger.");
  }
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 NiRFmxWLANLibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgExternalAttenuation.");
  }
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 NiRFmxWLANLibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgFrequency.");
  }
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 NiRFmxWLANLibrary::CfgFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency[], int32 numberOfElements)
{
  if (!function_pointers_.CfgFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgFrequencyArray.");
  }
  return function_pointers_.CfgFrequencyArray(instrumentHandle, selectorString, centerFrequency, numberOfElements);
}

int32 NiRFmxWLANLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgFrequencyReference.");
  }
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 NiRFmxWLANLibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgIQPowerEdgeTrigger.");
  }
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
}

int32 NiRFmxWLANLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgMechanicalAttenuation.");
  }
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 NiRFmxWLANLibrary::CfgNumberOfFrequencySegmentsAndReceiveChains(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfFrequencySegments, int32 numberOfReceiveChains)
{
  if (!function_pointers_.CfgNumberOfFrequencySegmentsAndReceiveChains) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgNumberOfFrequencySegmentsAndReceiveChains.");
  }
  return function_pointers_.CfgNumberOfFrequencySegmentsAndReceiveChains(instrumentHandle, selectorString, numberOfFrequencySegments, numberOfReceiveChains);
}

int32 NiRFmxWLANLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgRFAttenuation.");
  }
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 NiRFmxWLANLibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgReferenceLevel.");
  }
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 NiRFmxWLANLibrary::CfgSelectedPortsMultiple(niRFmxInstrHandle instrumentHandle, char selectorString[], char selectedPorts[])
{
  if (!function_pointers_.CfgSelectedPortsMultiple) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgSelectedPortsMultiple.");
  }
  return function_pointers_.CfgSelectedPortsMultiple(instrumentHandle, selectorString, selectedPorts);
}

int32 NiRFmxWLANLibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgSoftwareEdgeTrigger.");
  }
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 NiRFmxWLANLibrary::CfgStandard(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 standard)
{
  if (!function_pointers_.CfgStandard) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CfgStandard.");
  }
  return function_pointers_.CfgStandard(instrumentHandle, selectorString, standard);
}

int32 NiRFmxWLANLibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CheckMeasurementStatus.");
  }
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 NiRFmxWLANLibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_ClearAllNamedResults.");
  }
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 NiRFmxWLANLibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_ClearNamedResult.");
  }
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
}

int32 NiRFmxWLANLibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CloneSignalConfiguration.");
  }
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 NiRFmxWLANLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_Close.");
  }
  return function_pointers_.Close(instrumentHandle, forceDestroy);
}

int32 NiRFmxWLANLibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_Commit.");
  }
  return function_pointers_.Commit(instrumentHandle, selectorString);
}

int32 NiRFmxWLANLibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_CreateSignalConfiguration.");
  }
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgAcquisitionLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 acquisitionLengthMode, float64 acquisitionLength)
{
  if (!function_pointers_.DSSSModAccCfgAcquisitionLength) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgAcquisitionLength.");
  }
  return function_pointers_.DSSSModAccCfgAcquisitionLength(instrumentHandle, selectorString, acquisitionLengthMode, acquisitionLength);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.DSSSModAccCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgAveraging.");
  }
  return function_pointers_.DSSSModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit)
{
  if (!function_pointers_.DSSSModAccCfgEVMUnit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgEVMUnit.");
  }
  return function_pointers_.DSSSModAccCfgEVMUnit(instrumentHandle, selectorString, evmUnit);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgMeasurementLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 maximumMeasurementLength)
{
  if (!function_pointers_.DSSSModAccCfgMeasurementLength) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgMeasurementLength.");
  }
  return function_pointers_.DSSSModAccCfgMeasurementLength(instrumentHandle, selectorString, measurementOffset, maximumMeasurementLength);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgPowerMeasurementCustomGateArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startTime[], float64 stopTime[], int32 numberOfElements)
{
  if (!function_pointers_.DSSSModAccCfgPowerMeasurementCustomGateArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgPowerMeasurementCustomGateArray.");
  }
  return function_pointers_.DSSSModAccCfgPowerMeasurementCustomGateArray(instrumentHandle, selectorString, startTime, stopTime, numberOfElements);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgPowerMeasurementEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerMeasurementEnabled)
{
  if (!function_pointers_.DSSSModAccCfgPowerMeasurementEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgPowerMeasurementEnabled.");
  }
  return function_pointers_.DSSSModAccCfgPowerMeasurementEnabled(instrumentHandle, selectorString, powerMeasurementEnabled);
}

int32 NiRFmxWLANLibrary::DSSSModAccCfgPowerMeasurementNumberOfCustomGates(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCustomGates)
{
  if (!function_pointers_.DSSSModAccCfgPowerMeasurementNumberOfCustomGates) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccCfgPowerMeasurementNumberOfCustomGates.");
  }
  return function_pointers_.DSSSModAccCfgPowerMeasurementNumberOfCustomGates(instrumentHandle, selectorString, numberOfCustomGates);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchAveragePowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preambleAveragePowerMean, float64* headerAveragePowerMean, float64* dataAveragePowerMean, float64* ppduAveragePowerMean)
{
  if (!function_pointers_.DSSSModAccFetchAveragePowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchAveragePowers.");
  }
  return function_pointers_.DSSSModAccFetchAveragePowers(instrumentHandle, selectorString, timeout, preambleAveragePowerMean, headerAveragePowerMean, dataAveragePowerMean, ppduAveragePowerMean);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DSSSModAccFetchConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchConstellationTrace.");
  }
  return function_pointers_.DSSSModAccFetchConstellationTrace(instrumentHandle, selectorString, timeout, constellation, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchCustomGatePowersArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averagePowerMean[], float64 peakPowerMaximum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DSSSModAccFetchCustomGatePowersArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchCustomGatePowersArray.");
  }
  return function_pointers_.DSSSModAccFetchCustomGatePowersArray(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchDecodedHeaderBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedHeaderBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DSSSModAccFetchDecodedHeaderBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchDecodedHeaderBitsTrace.");
  }
  return function_pointers_.DSSSModAccFetchDecodedHeaderBitsTrace(instrumentHandle, selectorString, timeout, decodedHeaderBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchDecodedPSDUBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedPSDUBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DSSSModAccFetchDecodedPSDUBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchDecodedPSDUBitsTrace.");
  }
  return function_pointers_.DSSSModAccFetchDecodedPSDUBitsTrace(instrumentHandle, selectorString, timeout, decodedPSDUBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsevmMean, float64* peakEVM80211_2016Maximum, float64* peakEVM80211_2007Maximum, float64* peakEVM80211_1999Maximum, float64* frequencyErrorMean, float64* chipClockErrorMean, int32* numberOfChipsUsed)
{
  if (!function_pointers_.DSSSModAccFetchEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchEVM.");
  }
  return function_pointers_.DSSSModAccFetchEVM(instrumentHandle, selectorString, timeout, rmsevmMean, peakEVM80211_2016Maximum, peakEVM80211_2007Maximum, peakEVM80211_1999Maximum, frequencyErrorMean, chipClockErrorMean, numberOfChipsUsed);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchEVMPerChipMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmPerChipMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DSSSModAccFetchEVMPerChipMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchEVMPerChipMeanTrace.");
  }
  return function_pointers_.DSSSModAccFetchEVMPerChipMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, evmPerChipMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffsetMean, float64* iqGainImbalanceMean, float64* iqQuadratureErrorMean)
{
  if (!function_pointers_.DSSSModAccFetchIQImpairments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchIQImpairments.");
  }
  return function_pointers_.DSSSModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, iqOriginOffsetMean, iqGainImbalanceMean, iqQuadratureErrorMean);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchPPDUInformation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* dataModulationFormat, int32* payloadLength, int32* preambleType, int32* lockedClocksBit, int32* headerCRCStatus, int32* psducrcStatus)
{
  if (!function_pointers_.DSSSModAccFetchPPDUInformation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchPPDUInformation.");
  }
  return function_pointers_.DSSSModAccFetchPPDUInformation(instrumentHandle, selectorString, timeout, dataModulationFormat, payloadLength, preambleType, lockedClocksBit, headerCRCStatus, psducrcStatus);
}

int32 NiRFmxWLANLibrary::DSSSModAccFetchPeakPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preamblePeakPowerMaximum, float64* headerPeakPowerMaximum, float64* dataPeakPowerMaximum, float64* ppduPeakPowerMaximum)
{
  if (!function_pointers_.DSSSModAccFetchPeakPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DSSSModAccFetchPeakPowers.");
  }
  return function_pointers_.DSSSModAccFetchPeakPowers(instrumentHandle, selectorString, timeout, preamblePeakPowerMaximum, headerPeakPowerMaximum, dataPeakPowerMaximum, ppduPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DeleteSignalConfiguration.");
  }
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxWLANLibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_DisableTrigger.");
  }
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
}

int32 NiRFmxWLANLibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAllNamedResultNames.");
  }
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 NiRFmxWLANLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeF32.");
  }
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeF32Array.");
  }
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeF64.");
  }
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeF64Array.");
  }
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI16.");
  }
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI32.");
  }
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI32Array.");
  }
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI64.");
  }
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI64Array.");
  }
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI8.");
  }
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeI8Array.");
  }
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeString.");
  }
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeU16.");
  }
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeU32.");
  }
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeU32Array.");
  }
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeU64Array.");
  }
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeU8.");
  }
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetAttributeU8Array.");
  }
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxWLANLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxWLANLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_Initialize.");
  }
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 NiRFmxWLANLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_InitializeFromNIRFSASession.");
  }
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 NiRFmxWLANLibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_Initiate.");
  }
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
}

int32 NiRFmxWLANLibrary::OFDMModAccAutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.OFDMModAccAutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccAutoLevel.");
  }
  return function_pointers_.OFDMModAccAutoLevel(instrumentHandle, selectorString, timeout);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfg1ReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize)
{
  if (!function_pointers_.OFDMModAccCfg1ReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfg1ReferenceWaveform.");
  }
  return function_pointers_.OFDMModAccCfg1ReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgAcquisitionLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 acquisitionLengthMode, float64 acquisitionLength)
{
  if (!function_pointers_.OFDMModAccCfgAcquisitionLength) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgAcquisitionLength.");
  }
  return function_pointers_.OFDMModAccCfgAcquisitionLength(instrumentHandle, selectorString, acquisitionLengthMode, acquisitionLength);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgAmplitudeTrackingEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amplitudeTrackingEnabled)
{
  if (!function_pointers_.OFDMModAccCfgAmplitudeTrackingEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgAmplitudeTrackingEnabled.");
  }
  return function_pointers_.OFDMModAccCfgAmplitudeTrackingEnabled(instrumentHandle, selectorString, amplitudeTrackingEnabled);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.OFDMModAccCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgAveraging.");
  }
  return function_pointers_.OFDMModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgChannelEstimationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelEstimationType)
{
  if (!function_pointers_.OFDMModAccCfgChannelEstimationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgChannelEstimationType.");
  }
  return function_pointers_.OFDMModAccCfgChannelEstimationType(instrumentHandle, selectorString, channelEstimationType);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgCommonClockSourceEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled)
{
  if (!function_pointers_.OFDMModAccCfgCommonClockSourceEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgCommonClockSourceEnabled.");
  }
  return function_pointers_.OFDMModAccCfgCommonClockSourceEnabled(instrumentHandle, selectorString, commonClockSourceEnabled);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit)
{
  if (!function_pointers_.OFDMModAccCfgEVMUnit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgEVMUnit.");
  }
  return function_pointers_.OFDMModAccCfgEVMUnit(instrumentHandle, selectorString, evmUnit);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgFrequencyErrorEstimationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyErrorEstimationMethod)
{
  if (!function_pointers_.OFDMModAccCfgFrequencyErrorEstimationMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgFrequencyErrorEstimationMethod.");
  }
  return function_pointers_.OFDMModAccCfgFrequencyErrorEstimationMethod(instrumentHandle, selectorString, frequencyErrorEstimationMethod);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgMeasurementLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 maximumMeasurementLength)
{
  if (!function_pointers_.OFDMModAccCfgMeasurementLength) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgMeasurementLength.");
  }
  return function_pointers_.OFDMModAccCfgMeasurementLength(instrumentHandle, selectorString, measurementOffset, maximumMeasurementLength);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgMeasurementMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMode)
{
  if (!function_pointers_.OFDMModAccCfgMeasurementMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgMeasurementMode.");
  }
  return function_pointers_.OFDMModAccCfgMeasurementMode(instrumentHandle, selectorString, measurementMode);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgNReferenceWaveforms(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0[], float64 dx[], NIComplexSingle referenceWaveform[], int32 referenceWaveformSize[], int32 arraySize)
{
  if (!function_pointers_.OFDMModAccCfgNReferenceWaveforms) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgNReferenceWaveforms.");
  }
  return function_pointers_.OFDMModAccCfgNReferenceWaveforms(instrumentHandle, selectorString, x0, dx, referenceWaveform, referenceWaveformSize, arraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.OFDMModAccCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgNoiseCompensationEnabled.");
  }
  return function_pointers_.OFDMModAccCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgOptimizeDynamicRangeForEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 optimizeDynamicRangeForEVMEnabled, double optimizeDynamicRangeForEVMMargin)
{
  if (!function_pointers_.OFDMModAccCfgOptimizeDynamicRangeForEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgOptimizeDynamicRangeForEVM.");
  }
  return function_pointers_.OFDMModAccCfgOptimizeDynamicRangeForEVM(instrumentHandle, selectorString, optimizeDynamicRangeForEVMEnabled, optimizeDynamicRangeForEVMMargin);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgPhaseTrackingEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 phaseTrackingEnabled)
{
  if (!function_pointers_.OFDMModAccCfgPhaseTrackingEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgPhaseTrackingEnabled.");
  }
  return function_pointers_.OFDMModAccCfgPhaseTrackingEnabled(instrumentHandle, selectorString, phaseTrackingEnabled);
}

int32 NiRFmxWLANLibrary::OFDMModAccCfgSymbolClockErrorCorrectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 symbolClockErrorCorrectionEnabled)
{
  if (!function_pointers_.OFDMModAccCfgSymbolClockErrorCorrectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCfgSymbolClockErrorCorrectionEnabled.");
  }
  return function_pointers_.OFDMModAccCfgSymbolClockErrorCorrectionEnabled(instrumentHandle, selectorString, symbolClockErrorCorrectionEnabled);
}

int32 NiRFmxWLANLibrary::OFDMModAccClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.OFDMModAccClearNoiseCalibrationDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccClearNoiseCalibrationDatabase.");
  }
  return function_pointers_.OFDMModAccClearNoiseCalibrationDatabase(instrumentHandle);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchChainDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchChainPilotRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainPilotRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchChainRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* chainRMSEVMMean, float64* chainDataRMSEVMMean, float64* chainPilotRMSEVMMean)
{
  if (!function_pointers_.OFDMModAccFetchChainRMSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchChainRMSEVM.");
  }
  return function_pointers_.OFDMModAccFetchChainRMSEVM(instrumentHandle, selectorString, timeout, chainRMSEVMMean, chainDataRMSEVMMean, chainPilotRMSEVMMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchChainRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chainRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchChainRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, chainRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchChannelFrequencyResponseMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 channelFrequencyResponseMeanMagnitude[], float32 channelFrequencyResponseMeanPhase[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchChannelFrequencyResponseMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchChannelFrequencyResponseMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchChannelFrequencyResponseMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, channelFrequencyResponseMeanMagnitude, channelFrequencyResponseMeanPhase, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchCommonPilotErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 commonPilotErrorMagnitude[], float32 commonPilotErrorPhase[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchCommonPilotErrorTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchCommonPilotErrorTrace.");
  }
  return function_pointers_.OFDMModAccFetchCommonPilotErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, commonPilotErrorMagnitude, commonPilotErrorPhase, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchCompositeRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* compositeRMSEVMMean, float64* compositeDataRMSEVMMean, float64* compositePilotRMSEVMMean)
{
  if (!function_pointers_.OFDMModAccFetchCompositeRMSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchCompositeRMSEVM.");
  }
  return function_pointers_.OFDMModAccFetchCompositeRMSEVM(instrumentHandle, selectorString, timeout, compositeRMSEVMMean, compositeDataRMSEVMMean, compositePilotRMSEVMMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchCrossPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* crossPowerMean)
{
  if (!function_pointers_.OFDMModAccFetchCrossPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchCrossPower.");
  }
  return function_pointers_.OFDMModAccFetchCrossPower(instrumentHandle, selectorString, timeout, crossPowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchCustomGatePowersArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averagePowerMean[], float64 peakPowerMaximum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchCustomGatePowersArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchCustomGatePowersArray.");
  }
  return function_pointers_.OFDMModAccFetchCustomGatePowersArray(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDataAveragePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* dataAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchDataAveragePower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDataAveragePower.");
  }
  return function_pointers_.OFDMModAccFetchDataAveragePower(instrumentHandle, selectorString, timeout, dataAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDataConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDataConstellationTrace.");
  }
  return function_pointers_.OFDMModAccFetchDataConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDataPeakPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* dataPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchDataPeakPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDataPeakPower.");
  }
  return function_pointers_.OFDMModAccFetchDataPeakPower(instrumentHandle, selectorString, timeout, dataPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedEHTSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedEHTSIGBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedEHTSIGBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedEHTSIGBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedEHTSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedEHTSIGBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedLSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedLSIGBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedLSIGBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedLSIGBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedLSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedLSIGBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedPSDUBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedPSDUBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedPSDUBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedPSDUBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedPSDUBitsTrace(instrumentHandle, selectorString, timeout, decodedPSDUBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedSIGBBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedSIGBBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedSIGBBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedSIGBBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedSIGBBitsTrace(instrumentHandle, selectorString, timeout, decodedSIGBBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedSIGBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedSIGBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedSIGBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedSIGBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedServiceBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedServiceBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedServiceBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedServiceBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedServiceBitsTrace(instrumentHandle, selectorString, timeout, decodedServiceBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchDecodedUSIGBitsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 decodedUSIGBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchDecodedUSIGBitsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchDecodedUSIGBitsTrace.");
  }
  return function_pointers_.OFDMModAccFetchDecodedUSIGBitsTrace(instrumentHandle, selectorString, timeout, decodedUSIGBits, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchEVMSubcarrierIndices(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndices[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchEVMSubcarrierIndices) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchEVMSubcarrierIndices.");
  }
  return function_pointers_.OFDMModAccFetchEVMSubcarrierIndices(instrumentHandle, selectorString, timeout, subcarrierIndices, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchFrequencyErrorCCDF10Percent(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorCCDF10Percent)
{
  if (!function_pointers_.OFDMModAccFetchFrequencyErrorCCDF10Percent) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchFrequencyErrorCCDF10Percent.");
  }
  return function_pointers_.OFDMModAccFetchFrequencyErrorCCDF10Percent(instrumentHandle, selectorString, timeout, frequencyErrorCCDF10Percent);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchFrequencyErrorMean(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorMean)
{
  if (!function_pointers_.OFDMModAccFetchFrequencyErrorMean) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchFrequencyErrorMean.");
  }
  return function_pointers_.OFDMModAccFetchFrequencyErrorMean(instrumentHandle, selectorString, timeout, frequencyErrorMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchGroupDelayMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 groupDelayMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchGroupDelayMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchGroupDelayMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchGroupDelayMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, groupDelayMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchGuardIntervalType(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* guardIntervalType)
{
  if (!function_pointers_.OFDMModAccFetchGuardIntervalType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchGuardIntervalType.");
  }
  return function_pointers_.OFDMModAccFetchGuardIntervalType(instrumentHandle, selectorString, timeout, guardIntervalType);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqGainImbalancePerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchIQGainImbalancePerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqGainImbalancePerSubcarrierMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* relativeIQOriginOffsetMean, float64* iqGainImbalanceMean, float64* iqQuadratureErrorMean, float64* absoluteIQOriginOffsetMean, float64* iqTimingSkewMean)
{
  if (!function_pointers_.OFDMModAccFetchIQImpairments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchIQImpairments.");
  }
  return function_pointers_.OFDMModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, relativeIQOriginOffsetMean, iqGainImbalanceMean, iqQuadratureErrorMean, absoluteIQOriginOffsetMean, iqTimingSkewMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqQuadratureErrorPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqQuadratureErrorPerSubcarrierMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchLSIGParityCheckStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* lsigParityCheckStatus)
{
  if (!function_pointers_.OFDMModAccFetchLSIGParityCheckStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchLSIGParityCheckStatus.");
  }
  return function_pointers_.OFDMModAccFetchLSIGParityCheckStatus(instrumentHandle, selectorString, timeout, lsigParityCheckStatus);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchLTFSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ltfSize)
{
  if (!function_pointers_.OFDMModAccFetchLTFSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchLTFSize.");
  }
  return function_pointers_.OFDMModAccFetchLTFSize(instrumentHandle, selectorString, timeout, ltfSize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchMCSIndex(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* mcsIndex)
{
  if (!function_pointers_.OFDMModAccFetchMCSIndex) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchMCSIndex.");
  }
  return function_pointers_.OFDMModAccFetchMCSIndex(instrumentHandle, selectorString, timeout, mcsIndex);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchNumberOfHESIGBSymbols(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfHESIGBSymbols)
{
  if (!function_pointers_.OFDMModAccFetchNumberOfHESIGBSymbols) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchNumberOfHESIGBSymbols.");
  }
  return function_pointers_.OFDMModAccFetchNumberOfHESIGBSymbols(instrumentHandle, selectorString, timeout, numberOfHESIGBSymbols);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchNumberOfSpaceTimeStreams(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfSpaceTimeStreams)
{
  if (!function_pointers_.OFDMModAccFetchNumberOfSpaceTimeStreams) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchNumberOfSpaceTimeStreams.");
  }
  return function_pointers_.OFDMModAccFetchNumberOfSpaceTimeStreams(instrumentHandle, selectorString, timeout, numberOfSpaceTimeStreams);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchNumberOfUsers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfUsers)
{
  if (!function_pointers_.OFDMModAccFetchNumberOfUsers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchNumberOfUsers.");
  }
  return function_pointers_.OFDMModAccFetchNumberOfUsers(instrumentHandle, selectorString, timeout, numberOfUsers);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchNumberofSymbolsUsed(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfSymbolsUsed)
{
  if (!function_pointers_.OFDMModAccFetchNumberofSymbolsUsed) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchNumberofSymbolsUsed.");
  }
  return function_pointers_.OFDMModAccFetchNumberofSymbolsUsed(instrumentHandle, selectorString, timeout, numberOfSymbolsUsed);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPEAveragePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPEAveragePower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPEAveragePower.");
  }
  return function_pointers_.OFDMModAccFetchPEAveragePower(instrumentHandle, selectorString, timeout, peAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPEDuration(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peDuration)
{
  if (!function_pointers_.OFDMModAccFetchPEDuration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPEDuration.");
  }
  return function_pointers_.OFDMModAccFetchPEDuration(instrumentHandle, selectorString, timeout, peDuration);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPEPeakPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* pePeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPEPeakPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPEPeakPower.");
  }
  return function_pointers_.OFDMModAccFetchPEPeakPower(instrumentHandle, selectorString, timeout, pePeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPPDUAveragePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* ppduAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPPDUAveragePower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPPDUAveragePower.");
  }
  return function_pointers_.OFDMModAccFetchPPDUAveragePower(instrumentHandle, selectorString, timeout, ppduAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPPDUPeakPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* ppduPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPPDUPeakPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPPDUPeakPower.");
  }
  return function_pointers_.OFDMModAccFetchPPDUPeakPower(instrumentHandle, selectorString, timeout, ppduPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPPDUType(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ppduType)
{
  if (!function_pointers_.OFDMModAccFetchPPDUType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPPDUType.");
  }
  return function_pointers_.OFDMModAccFetchPPDUType(instrumentHandle, selectorString, timeout, ppduType);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPSDUCRCStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* psducrcStatus)
{
  if (!function_pointers_.OFDMModAccFetchPSDUCRCStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPSDUCRCStatus.");
  }
  return function_pointers_.OFDMModAccFetchPSDUCRCStatus(instrumentHandle, selectorString, timeout, psducrcStatus);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPhaseNoisePSDMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseNoisePSDMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchPhaseNoisePSDMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPhaseNoisePSDMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchPhaseNoisePSDMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseNoisePSDMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPilotConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pilotConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchPilotConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPilotConstellationTrace.");
  }
  return function_pointers_.OFDMModAccFetchPilotConstellationTrace(instrumentHandle, selectorString, timeout, pilotConstellation, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreambleAveragePowers80211ac(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* vhtsigaAveragePowerMean, float64* vhtstfAveragePowerMean, float64* vhtltfAveragePowerMean, float64* vhtsigbAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPreambleAveragePowers80211ac) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11ac.");
  }
  return function_pointers_.OFDMModAccFetchPreambleAveragePowers80211ac(instrumentHandle, selectorString, timeout, vhtsigaAveragePowerMean, vhtstfAveragePowerMean, vhtltfAveragePowerMean, vhtsigbAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreambleAveragePowers80211ax(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigAveragePowerMean, float64* hesigaAveragePowerMean, float64* hesigbAveragePowerMean, float64* hestfAveragePowerMean, float64* heltfAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPreambleAveragePowers80211ax) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11ax.");
  }
  return function_pointers_.OFDMModAccFetchPreambleAveragePowers80211ax(instrumentHandle, selectorString, timeout, rlsigAveragePowerMean, hesigaAveragePowerMean, hesigbAveragePowerMean, hestfAveragePowerMean, heltfAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreambleAveragePowers80211be(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigAveragePowerMean, float64* usigAveragePowerMean, float64* ehtsigAveragePowerMean, float64* ehtstfAveragePowerMean, float64* ehtltfAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPreambleAveragePowers80211be) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11be.");
  }
  return function_pointers_.OFDMModAccFetchPreambleAveragePowers80211be(instrumentHandle, selectorString, timeout, rlsigAveragePowerMean, usigAveragePowerMean, ehtsigAveragePowerMean, ehtstfAveragePowerMean, ehtltfAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreambleAveragePowers80211n(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* htsigAveragePowerMean, float64* htstfAveragePowerMean, float64* htdltfAveragePowerMean, float64* hteltfAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPreambleAveragePowers80211n) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreambleAveragePowers802_11n.");
  }
  return function_pointers_.OFDMModAccFetchPreambleAveragePowers80211n(instrumentHandle, selectorString, timeout, htsigAveragePowerMean, htstfAveragePowerMean, htdltfAveragePowerMean, hteltfAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreambleAveragePowersCommon(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lstfAveragePowerMean, float64* lltfAveragePowerMean, float64* lsigAveragePowerMean)
{
  if (!function_pointers_.OFDMModAccFetchPreambleAveragePowersCommon) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreambleAveragePowersCommon.");
  }
  return function_pointers_.OFDMModAccFetchPreambleAveragePowersCommon(instrumentHandle, selectorString, timeout, lstfAveragePowerMean, lltfAveragePowerMean, lsigAveragePowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreambleFrequencyErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 preambleFrequencyError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchPreambleFrequencyErrorTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreambleFrequencyErrorTrace.");
  }
  return function_pointers_.OFDMModAccFetchPreambleFrequencyErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, preambleFrequencyError, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreamblePeakPowers80211ac(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* vhtsigaPeakPowerMaximum, float64* vhtstfPeakPowerMaximum, float64* vhtltfPeakPowerMaximum, float64* vhtsigbPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPreamblePeakPowers80211ac) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11ac.");
  }
  return function_pointers_.OFDMModAccFetchPreamblePeakPowers80211ac(instrumentHandle, selectorString, timeout, vhtsigaPeakPowerMaximum, vhtstfPeakPowerMaximum, vhtltfPeakPowerMaximum, vhtsigbPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreamblePeakPowers80211ax(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigPeakPowerMaximum, float64* hesigaPeakPowerMaximum, float64* hesigbPeakPowerMaximum, float64* hestfPeakPowerMaximum, float64* heltfPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPreamblePeakPowers80211ax) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11ax.");
  }
  return function_pointers_.OFDMModAccFetchPreamblePeakPowers80211ax(instrumentHandle, selectorString, timeout, rlsigPeakPowerMaximum, hesigaPeakPowerMaximum, hesigbPeakPowerMaximum, hestfPeakPowerMaximum, heltfPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreamblePeakPowers80211be(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rlsigPeakPowerMaximum, float64* usigPeakPowerMaximum, float64* ehtsigPeakPowerMaximum, float64* ehtstfPeakPowerMaximum, float64* ehtltfPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPreamblePeakPowers80211be) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11be.");
  }
  return function_pointers_.OFDMModAccFetchPreamblePeakPowers80211be(instrumentHandle, selectorString, timeout, rlsigPeakPowerMaximum, usigPeakPowerMaximum, ehtsigPeakPowerMaximum, ehtstfPeakPowerMaximum, ehtltfPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreamblePeakPowers80211n(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* htsigPeakPowerMaximum, float64* htstfPeakPowerMaximum, float64* htdltfPeakPowerMaximum, float64* hteltfPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPreamblePeakPowers80211n) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreamblePeakPowers802_11n.");
  }
  return function_pointers_.OFDMModAccFetchPreamblePeakPowers80211n(instrumentHandle, selectorString, timeout, htsigPeakPowerMaximum, htstfPeakPowerMaximum, htdltfPeakPowerMaximum, hteltfPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchPreamblePeakPowersCommon(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lstfPeakPowerMaximum, float64* lltfPeakPowerMaximum, float64* lsigPeakPowerMaximum)
{
  if (!function_pointers_.OFDMModAccFetchPreamblePeakPowersCommon) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchPreamblePeakPowersCommon.");
  }
  return function_pointers_.OFDMModAccFetchPreamblePeakPowersCommon(instrumentHandle, selectorString, timeout, lstfPeakPowerMaximum, lltfPeakPowerMaximum, lsigPeakPowerMaximum);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchRUOffsetAndSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* ruOffset, int32* ruSize)
{
  if (!function_pointers_.OFDMModAccFetchRUOffsetAndSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchRUOffsetAndSize.");
  }
  return function_pointers_.OFDMModAccFetchRUOffsetAndSize(instrumentHandle, selectorString, timeout, ruOffset, ruSize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSIGBCRCStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* sigbcrcStatus)
{
  if (!function_pointers_.OFDMModAccFetchSIGBCRCStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSIGBCRCStatus.");
  }
  return function_pointers_.OFDMModAccFetchSIGBCRCStatus(instrumentHandle, selectorString, timeout, sigbcrcStatus);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSIGCRCStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* sigcrcStatus)
{
  if (!function_pointers_.OFDMModAccFetchSIGCRCStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSIGCRCStatus.");
  }
  return function_pointers_.OFDMModAccFetchSIGCRCStatus(instrumentHandle, selectorString, timeout, sigcrcStatus);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSpectralFlatness(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spectralFlatnessMargin, int32* spectralFlatnessMarginSubcarrierIndex)
{
  if (!function_pointers_.OFDMModAccFetchSpectralFlatness) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSpectralFlatness.");
  }
  return function_pointers_.OFDMModAccFetchSpectralFlatness(instrumentHandle, selectorString, timeout, spectralFlatnessMargin, spectralFlatnessMarginSubcarrierIndex);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSpectralFlatnessMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatnessMean[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchSpectralFlatnessMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSpectralFlatnessMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchSpectralFlatnessMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, spectralFlatnessMean, spectralFlatnessLowerMask, spectralFlatnessUpperMask, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchStreamDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchStreamPilotRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamPilotRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchStreamRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* streamRMSEVMMean, float64* streamDataRMSEVMMean, float64* streamPilotRMSEVMMean)
{
  if (!function_pointers_.OFDMModAccFetchStreamRMSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchStreamRMSEVM.");
  }
  return function_pointers_.OFDMModAccFetchStreamRMSEVM(instrumentHandle, selectorString, timeout, streamRMSEVMMean, streamDataRMSEVMMean, streamPilotRMSEVMMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchStreamRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 streamRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchStreamRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, streamRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndex, float64* x0, float64* dx, float32 subcarrierChainEVMPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace.");
  }
  return function_pointers_.OFDMModAccFetchSubcarrierChainEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, subcarrierIndex, x0, dx, subcarrierChainEVMPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 subcarrierIndex, float64* x0, float64* dx, float32 subcarrierStreamEVMPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace.");
  }
  return function_pointers_.OFDMModAccFetchSubcarrierStreamEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, subcarrierIndex, x0, dx, subcarrierStreamEVMPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 symbolIndex, float64* x0, float64* dx, float32 symbolChainEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace.");
  }
  return function_pointers_.OFDMModAccFetchSymbolChainEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, symbolIndex, x0, dx, symbolChainEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSymbolClockErrorMean(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* symbolClockErrorMean)
{
  if (!function_pointers_.OFDMModAccFetchSymbolClockErrorMean) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSymbolClockErrorMean.");
  }
  return function_pointers_.OFDMModAccFetchSymbolClockErrorMean(instrumentHandle, selectorString, timeout, symbolClockErrorMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 symbolIndex, float64* x0, float64* dx, float32 symbolStreamEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace.");
  }
  return function_pointers_.OFDMModAccFetchSymbolStreamEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, symbolIndex, x0, dx, symbolStreamEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUnusedToneError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* unusedToneErrorMargin, int32* unusedToneErrorMarginRUIndex)
{
  if (!function_pointers_.OFDMModAccFetchUnusedToneError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUnusedToneError.");
  }
  return function_pointers_.OFDMModAccFetchUnusedToneError(instrumentHandle, selectorString, timeout, unusedToneErrorMargin, unusedToneErrorMarginRUIndex);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUnusedToneErrorMarginPerRU(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 unusedToneErrorMarginPerRU[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUnusedToneErrorMarginPerRU) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUnusedToneErrorMarginPerRU.");
  }
  return function_pointers_.OFDMModAccFetchUnusedToneErrorMarginPerRU(instrumentHandle, selectorString, timeout, unusedToneErrorMarginPerRU, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUnusedToneErrorMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 unusedToneError[], float32 unusedToneErrorMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUnusedToneErrorMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUnusedToneErrorMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchUnusedToneErrorMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, unusedToneError, unusedToneErrorMask, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle userDataConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUserDataConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserDataConstellationTrace.");
  }
  return function_pointers_.OFDMModAccFetchUserDataConstellationTrace(instrumentHandle, selectorString, timeout, userDataConstellation, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserPilotConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle userPilotConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUserPilotConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserPilotConstellationTrace.");
  }
  return function_pointers_.OFDMModAccFetchUserPilotConstellationTrace(instrumentHandle, selectorString, timeout, userPilotConstellation, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* userPowerMean)
{
  if (!function_pointers_.OFDMModAccFetchUserPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserPower.");
  }
  return function_pointers_.OFDMModAccFetchUserPower(instrumentHandle, selectorString, timeout, userPowerMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchUserStreamDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamPilotRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchUserStreamPilotRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamPilotRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserStreamRMSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* userStreamRMSEVMMean, float64* userStreamDataRMSEVMMean, float64* userStreamPilotRMSEVMMean)
{
  if (!function_pointers_.OFDMModAccFetchUserStreamRMSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserStreamRMSEVM.");
  }
  return function_pointers_.OFDMModAccFetchUserStreamRMSEVM(instrumentHandle, selectorString, timeout, userStreamRMSEVMMean, userStreamDataRMSEVMMean, userStreamPilotRMSEVMMean);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchUserStreamRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 userStreamRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace.");
  }
  return function_pointers_.OFDMModAccFetchUserStreamRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, userStreamRMSEVMPerSymbolMean, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::OFDMModAccValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid)
{
  if (!function_pointers_.OFDMModAccValidateCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccValidateCalibrationData.");
  }
  return function_pointers_.OFDMModAccValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
}

int32 NiRFmxWLANLibrary::PowerRampCfgAcquisitionLength(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 acquisitionLength)
{
  if (!function_pointers_.PowerRampCfgAcquisitionLength) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_PowerRampCfgAcquisitionLength.");
  }
  return function_pointers_.PowerRampCfgAcquisitionLength(instrumentHandle, selectorString, acquisitionLength);
}

int32 NiRFmxWLANLibrary::PowerRampCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.PowerRampCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_PowerRampCfgAveraging.");
  }
  return function_pointers_.PowerRampCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxWLANLibrary::PowerRampFetchFallTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rawWaveform[], float32 processedWaveform[], float32 threshold[], float32 powerReference[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PowerRampFetchFallTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_PowerRampFetchFallTrace.");
  }
  return function_pointers_.PowerRampFetchFallTrace(instrumentHandle, selectorString, timeout, x0, dx, rawWaveform, processedWaveform, threshold, powerReference, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::PowerRampFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* riseTimeMean, float64* fallTimeMean)
{
  if (!function_pointers_.PowerRampFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_PowerRampFetchMeasurement.");
  }
  return function_pointers_.PowerRampFetchMeasurement(instrumentHandle, selectorString, timeout, riseTimeMean, fallTimeMean);
}

int32 NiRFmxWLANLibrary::PowerRampFetchRiseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rawWaveform[], float32 processedWaveform[], float32 threshold[], float32 powerReference[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PowerRampFetchRiseTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_PowerRampFetchRiseTrace.");
  }
  return function_pointers_.PowerRampFetchRiseTrace(instrumentHandle, selectorString, timeout, x0, dx, rawWaveform, processedWaveform, threshold, powerReference, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 NiRFmxWLANLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_ResetToDefault.");
  }
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
}

int32 NiRFmxWLANLibrary::SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.SEMCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgAveraging.");
  }
  return function_pointers_.SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxWLANLibrary::SEMCfgMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 maskType)
{
  if (!function_pointers_.SEMCfgMaskType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgMaskType.");
  }
  return function_pointers_.SEMCfgMaskType(instrumentHandle, selectorString, maskType);
}

int32 NiRFmxWLANLibrary::SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  if (!function_pointers_.SEMCfgNumberOfOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgNumberOfOffsets.");
  }
  return function_pointers_.SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 NiRFmxWLANLibrary::SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgOffsetFrequencyArray.");
  }
  return function_pointers_.SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband, numberOfElements);
}

int32 NiRFmxWLANLibrary::SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgOffsetRelativeLimitArray.");
  }
  return function_pointers_.SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop, numberOfElements);
}

int32 NiRFmxWLANLibrary::SEMCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spanAuto, float64 span)
{
  if (!function_pointers_.SEMCfgSpan) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgSpan.");
  }
  return function_pointers_.SEMCfgSpan(instrumentHandle, selectorString, spanAuto, span);
}

int32 NiRFmxWLANLibrary::SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.SEMCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMCfgSweepTime.");
  }
  return function_pointers_.SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 NiRFmxWLANLibrary::SEMFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  if (!function_pointers_.SEMFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchCarrierMeasurement.");
  }
  return function_pointers_.SEMFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
}

int32 NiRFmxWLANLibrary::SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchLowerOffsetMargin.");
  }
  return function_pointers_.SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 NiRFmxWLANLibrary::SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchLowerOffsetMarginArray.");
  }
  return function_pointers_.SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchLowerOffsetPower.");
  }
  return function_pointers_.SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
}

int32 NiRFmxWLANLibrary::SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchLowerOffsetPowerArray.");
  }
  return function_pointers_.SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  if (!function_pointers_.SEMFetchMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchMeasurementStatus.");
  }
  return function_pointers_.SEMFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 NiRFmxWLANLibrary::SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchSpectrum.");
  }
  return function_pointers_.SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, compositeMask, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchUpperOffsetMargin.");
  }
  return function_pointers_.SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 NiRFmxWLANLibrary::SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchUpperOffsetMarginArray.");
  }
  return function_pointers_.SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchUpperOffsetPower.");
  }
  return function_pointers_.SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
}

int32 NiRFmxWLANLibrary::SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SEMFetchUpperOffsetPowerArray.");
  }
  return function_pointers_.SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SelectMeasurements.");
  }
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 NiRFmxWLANLibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 NiRFmxWLANLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeF32.");
  }
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeF32Array.");
  }
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeF64.");
  }
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeF64Array.");
  }
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI16.");
  }
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI32.");
  }
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI32Array.");
  }
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI64.");
  }
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI64Array.");
  }
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI8.");
  }
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeI8Array.");
  }
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeString.");
  }
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeU16.");
  }
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeU32.");
  }
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeU32Array.");
  }
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeU64Array.");
  }
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeU8.");
  }
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxWLANLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_SetAttributeU8Array.");
  }
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxWLANLibrary::TXPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.TXPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_TXPCfgAveraging.");
  }
  return function_pointers_.TXPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxWLANLibrary::TXPCfgBurstDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstDetectionEnabled)
{
  if (!function_pointers_.TXPCfgBurstDetectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_TXPCfgBurstDetectionEnabled.");
  }
  return function_pointers_.TXPCfgBurstDetectionEnabled(instrumentHandle, selectorString, burstDetectionEnabled);
}

int32 NiRFmxWLANLibrary::TXPCfgMaximumMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 maximumMeasurementInterval)
{
  if (!function_pointers_.TXPCfgMaximumMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_TXPCfgMaximumMeasurementInterval.");
  }
  return function_pointers_.TXPCfgMaximumMeasurementInterval(instrumentHandle, selectorString, maximumMeasurementInterval);
}

int32 NiRFmxWLANLibrary::TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averagePowerMean, float64* peakPowerMaximum)
{
  if (!function_pointers_.TXPFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_TXPFetchMeasurement.");
  }
  return function_pointers_.TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum);
}

int32 NiRFmxWLANLibrary::TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.TXPFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_TXPFetchPowerTrace.");
  }
  return function_pointers_.TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
}

int32 NiRFmxWLANLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_WaitForAcquisitionComplete.");
  }
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 NiRFmxWLANLibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_WaitForMeasurementComplete.");
  }
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxwlan_grpc
