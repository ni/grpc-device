//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-TClk
//---------------------------------------------------------------------
#ifndef NITCLK_GRPC_LIBRARY_WRAPPER_H
#define NITCLK_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>
#include <niTClk.h>

namespace nitclk_grpc {

class NiTClkLibraryInterface {
 public:
  virtual ~NiTClkLibraryInterface() {}

  virtual ViStatus ConfigureForHomogeneousTriggers(ViUInt32 sessionCount, ViSession sessions[]) = 0;
  virtual ViStatus FinishSyncPulseSenderSynchronize(ViUInt32 sessionCount, ViSession sessions[], ViReal64 minTime) = 0;
  virtual ViStatus GetAttributeViReal64(ViSession session, ViConstString channelName, ViAttr attributeId, ViReal64* value) = 0;
  virtual ViStatus GetAttributeViSession(ViSession session, ViConstString channelName, ViAttr attributeId, ViSession* value) = 0;
  virtual ViStatus GetAttributeViString(ViSession session, ViConstString channelName, ViAttr attributeId, ViInt32 bufSize, ViChar value[]) = 0;
  virtual ViStatus GetExtendedErrorInfo(ViChar errorString[], ViUInt32 errorStringSize) = 0;
  virtual ViStatus Initiate(ViUInt32 sessionCount, ViSession sessions[]) = 0;
  virtual ViStatus IsDone(ViUInt32 sessionCount, ViSession sessions[], ViBoolean* done) = 0;
  virtual ViStatus SetAttributeViReal64(ViSession session, ViConstString channelName, ViAttr attributeId, ViReal64 value) = 0;
  virtual ViStatus SetAttributeViSession(ViSession session, ViConstString channelName, ViAttr attributeId, ViSession value) = 0;
  virtual ViStatus SetAttributeViString(ViSession session, ViConstString channelName, ViAttr attributeId, ViConstString value) = 0;
  virtual ViStatus SetupForSyncPulseSenderSynchronize(ViUInt32 sessionCount, ViSession sessions[], ViReal64 minTime) = 0;
  virtual ViStatus Synchronize(ViUInt32 sessionCount, ViSession sessions[], ViReal64 minTclkPeriod) = 0;
  virtual ViStatus SynchronizeToSyncPulseSender(ViUInt32 sessionCount, ViSession sessions[], ViReal64 minTime) = 0;
  virtual ViStatus WaitUntilDone(ViUInt32 sessionCount, ViSession sessions[], ViReal64 timeout) = 0;
};

}  // namespace nitclk_grpc
#endif  // NITCLK_GRPC_LIBRARY_WRAPPER_H
