
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-TClk.
//---------------------------------------------------------------------
#include "nitclk_client.h"

#include <grpcpp/grpcpp.h>

#include <nitclk.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nitclk_grpc::experimental::client {

ConfigureForHomogeneousTriggersResponse
configure_for_homogeneous_triggers(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions)
{
  ::grpc::ClientContext context;

  auto request = ConfigureForHomogeneousTriggersRequest{};
  copy_array(sessions, request.mutable_sessions());

  auto response = ConfigureForHomogeneousTriggersResponse{};

  raise_if_error(
      stub->ConfigureForHomogeneousTriggers(&context, request, &response),
      context);

  return response;
}

FinishSyncPulseSenderSynchronizeResponse
finish_sync_pulse_sender_synchronize(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions, const double& min_time)
{
  ::grpc::ClientContext context;

  auto request = FinishSyncPulseSenderSynchronizeRequest{};
  copy_array(sessions, request.mutable_sessions());
  request.set_min_time(min_time);

  auto response = FinishSyncPulseSenderSynchronizeResponse{};

  raise_if_error(
      stub->FinishSyncPulseSenderSynchronize(&context, request, &response),
      context);

  return response;
}

GetAttributeViReal64Response
get_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::string& channel_name, const NiTClkAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViReal64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViReal64Response{};

  raise_if_error(
      stub->GetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

GetAttributeViSessionResponse
get_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::string& channel_name, const NiTClkAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViSessionRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViSessionResponse{};

  raise_if_error(
      stub->GetAttributeViSession(&context, request, &response),
      context);

  return response;
}

GetAttributeViStringResponse
get_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::string& channel_name, const NiTClkAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViStringRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViStringResponse{};

  raise_if_error(
      stub->GetAttributeViString(&context, request, &response),
      context);

  return response;
}

GetExtendedErrorInfoResponse
get_extended_error_info(const StubPtr& stub)
{
  ::grpc::ClientContext context;

  auto request = GetExtendedErrorInfoRequest{};

  auto response = GetExtendedErrorInfoResponse{};

  raise_if_error(
      stub->GetExtendedErrorInfo(&context, request, &response),
      context);

  return response;
}

InitiateResponse
initiate(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions)
{
  ::grpc::ClientContext context;

  auto request = InitiateRequest{};
  copy_array(sessions, request.mutable_sessions());

  auto response = InitiateResponse{};

  raise_if_error(
      stub->Initiate(&context, request, &response),
      context);

  return response;
}

IsDoneResponse
is_done(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions)
{
  ::grpc::ClientContext context;

  auto request = IsDoneRequest{};
  copy_array(sessions, request.mutable_sessions());

  auto response = IsDoneResponse{};

  raise_if_error(
      stub->IsDone(&context, request, &response),
      context);

  return response;
}

SetAttributeViReal64Response
set_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::string& channel_name, const NiTClkAttribute& attribute_id, const double& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViReal64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_value_raw(value);

  auto response = SetAttributeViReal64Response{};

  raise_if_error(
      stub->SetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

SetAttributeViSessionResponse
set_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::string& channel_name, const NiTClkAttribute& attribute_id, const nidevice_grpc::Session& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViSessionRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.mutable_value()->CopyFrom(value);

  auto response = SetAttributeViSessionResponse{};

  raise_if_error(
      stub->SetAttributeViSession(&context, request, &response),
      context);

  return response;
}

SetAttributeViStringResponse
set_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::string& channel_name, const NiTClkAttribute& attribute_id, const pb::string& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViStringRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_value_raw(value);

  auto response = SetAttributeViStringResponse{};

  raise_if_error(
      stub->SetAttributeViString(&context, request, &response),
      context);

  return response;
}

SetupForSyncPulseSenderSynchronizeResponse
setup_for_sync_pulse_sender_synchronize(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions, const double& min_time)
{
  ::grpc::ClientContext context;

  auto request = SetupForSyncPulseSenderSynchronizeRequest{};
  copy_array(sessions, request.mutable_sessions());
  request.set_min_time(min_time);

  auto response = SetupForSyncPulseSenderSynchronizeResponse{};

  raise_if_error(
      stub->SetupForSyncPulseSenderSynchronize(&context, request, &response),
      context);

  return response;
}

SynchronizeResponse
synchronize(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions, const double& min_tclk_period)
{
  ::grpc::ClientContext context;

  auto request = SynchronizeRequest{};
  copy_array(sessions, request.mutable_sessions());
  request.set_min_tclk_period(min_tclk_period);

  auto response = SynchronizeResponse{};

  raise_if_error(
      stub->Synchronize(&context, request, &response),
      context);

  return response;
}

SynchronizeToSyncPulseSenderResponse
synchronize_to_sync_pulse_sender(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions, const double& min_time)
{
  ::grpc::ClientContext context;

  auto request = SynchronizeToSyncPulseSenderRequest{};
  copy_array(sessions, request.mutable_sessions());
  request.set_min_time(min_time);

  auto response = SynchronizeToSyncPulseSenderResponse{};

  raise_if_error(
      stub->SynchronizeToSyncPulseSender(&context, request, &response),
      context);

  return response;
}

WaitUntilDoneResponse
wait_until_done(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& sessions, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitUntilDoneRequest{};
  copy_array(sessions, request.mutable_sessions());
  request.set_timeout(timeout);

  auto response = WaitUntilDoneResponse{};

  raise_if_error(
      stub->WaitUntilDone(&context, request, &response),
      context);

  return response;
}


} // namespace nitclk_grpc::experimental::client
