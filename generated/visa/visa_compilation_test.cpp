//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the VISA Metadata
//---------------------------------------------------------------------
#include "visa_library.h"

namespace visa_grpc {

ViStatus AssertIntrSignal(ViSession vi, ViInt16 mode, ViUInt32 statusId)
{
  return viAssertIntrSignal(vi, mode, statusId);
}

ViStatus AssertTrigger(ViSession vi, ViUInt16 protocol)
{
  return viAssertTrigger(vi, protocol);
}

ViStatus AssertUtilSignal(ViSession vi, ViUInt16 mode)
{
  return viAssertUtilSignal(vi, mode);
}

ViStatus Clear(ViSession vi)
{
  return viClear(vi);
}

ViStatus Close(ViSession vi)
{
  return viClose(vi);
}

ViStatus CloseEvent(ViEvent eventHandle)
{
  return viClose(eventHandle);
}

ViStatus DisableEvent(ViSession vi, ViEventType eventType, ViUInt16 eventMechanism)
{
  return viDisableEvent(vi, eventType, eventMechanism);
}

ViStatus DiscardEvents(ViSession vi, ViEventType eventType, ViUInt16 eventMechanism)
{
  return viDiscardEvents(vi, eventType, eventMechanism);
}

ViStatus EnableEvent(ViSession vi, ViEventType eventType, ViUInt16 eventMechanism, ViEventFilter filterContext)
{
  return viEnableEvent(vi, eventType, eventMechanism, filterContext);
}

ViStatus FindRsrc(ViSession rsrcManagerHandle, ViConstString expression, ViFindList* findHandle, ViUInt32* returnCount, ViChar instrumentDescriptor[256])
{
  return viFindRsrc(rsrcManagerHandle, expression, findHandle, returnCount, instrumentDescriptor);
}

ViStatus Flush(ViSession vi, ViUInt16 mask)
{
  return viFlush(vi, mask);
}

ViStatus GetAttribute(ViSession vi, ViAttr attributeName, void* attributeValue)
{
  return viGetAttribute(vi, attributeName, attributeValue);
}

ViStatus GetAttributeEvent(ViEvent eventHandle, ViAttr attributeName, void* attributeValue)
{
  return viGetAttribute(eventHandle, attributeName, attributeValue);
}

ViStatus GpibCommand(ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount)
{
  return viGpibCommand(vi, buffer, count, returnCount);
}

ViStatus GpibControlATN(ViSession vi, ViUInt16 mode)
{
  return viGpibControlATN(vi, mode);
}

ViStatus GpibControlREN(ViSession vi, ViUInt16 mode)
{
  return viGpibControlREN(vi, mode);
}

ViStatus GpibPassControl(ViSession vi, ViUInt16 primaryAddress, ViUInt16 secondaryAddress)
{
  return viGpibPassControl(vi, primaryAddress, secondaryAddress);
}

ViStatus GpibSendIFC(ViSession vi)
{
  return viGpibSendIFC(vi);
}

ViStatus In16(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt16* value)
{
  return viIn16Ex(vi, addressSpace, offset, value);
}

ViStatus In32(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt32* value)
{
  return viIn32Ex(vi, addressSpace, offset, value);
}

ViStatus In64(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt64* value)
{
  return viIn64Ex(vi, addressSpace, offset, value);
}

ViStatus In8(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt8* value)
{
  return viIn8Ex(vi, addressSpace, offset, value);
}

ViStatus Lock(ViSession vi, ViAccessMode lockType, ViUInt32 timeout, ViConstKeyId requestedKey, ViChar accessKey[256])
{
  return viLock(vi, lockType, timeout, requestedKey, accessKey);
}

ViStatus MapAddress(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize mapSize, ViBoolean ownerAccess, ViAddr suggestedAddress, ViAddr* address)
{
  return viMapAddressEx(vi, addressSpace, offset, mapSize, ownerAccess, suggestedAddress, address);
}

ViStatus MapTrigger(ViSession vi, ViInt16 triggerSource, ViInt16 triggerDestination, ViUInt16 mode)
{
  return viMapTrigger(vi, triggerSource, triggerDestination, mode);
}

ViStatus MemAlloc(ViSession vi, ViUInt32 size, ViBusAddress* offset)
{
  return viMemAlloc(vi, size, offset);
}

ViStatus MemAllocEx(ViSession vi, ViBusSize size, ViBusAddress64* offset)
{
  return viMemAllocEx(vi, size, offset);
}

ViStatus MemFree(ViSession vi, ViBusAddress64 offset)
{
  return viMemFreeEx(vi, offset);
}

ViStatus MoveIn16(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt16 buffer[])
{
  return viMoveIn16Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveIn32(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt32 buffer[])
{
  return viMoveIn32Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveIn64(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt64 buffer[])
{
  return viMoveIn64Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveIn8(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt8 buffer[])
{
  return viMoveIn8Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveOut16(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt16 buffer[])
{
  return viMoveOut16Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveOut32(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt32 buffer[])
{
  return viMoveOut32Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveOut64(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt64 buffer[])
{
  return viMoveOut64Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus MoveOut8(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt8 buffer[])
{
  return viMoveOut8Ex(vi, addressSpace, offset, count, buffer);
}

ViStatus Open(ViSession rsrcManagerHandle, ViConstRsrc instrumentDescriptor, ViAccessMode accessMode, ViUInt32 openTimeout, ViSession* vi)
{
  return viOpen(rsrcManagerHandle, instrumentDescriptor, accessMode, openTimeout, vi);
}

ViStatus Out16(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt16 value)
{
  return viOut16Ex(vi, addressSpace, offset, value);
}

ViStatus Out32(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt32 value)
{
  return viOut32Ex(vi, addressSpace, offset, value);
}

ViStatus Out64(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt64 value)
{
  return viOut64Ex(vi, addressSpace, offset, value);
}

ViStatus Out8(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt8 value)
{
  return viOut8Ex(vi, addressSpace, offset, value);
}

ViStatus ParseRsrc(ViSession sessionHandle, ViConstRsrc resourceName, ViUInt16* interfaceType, ViUInt16* interfaceNumber, ViChar resourceClass[256], ViChar expandedUnaliasedName[256], ViChar aliasIfExists[256])
{
  return viParseRsrcEx(sessionHandle, resourceName, interfaceType, interfaceNumber, resourceClass, expandedUnaliasedName, aliasIfExists);
}

void Peek16(ViSession vi, ViAddr address, ViUInt16* value)
{
  return viPeek16(vi, address, value);
}

void Peek32(ViSession vi, ViAddr address, ViUInt32* value)
{
  return viPeek32(vi, address, value);
}

void Peek64(ViSession vi, ViAddr address, ViUInt64* value)
{
  return viPeek64(vi, address, value);
}

void Peek8(ViSession vi, ViAddr address, ViUInt8* value)
{
  return viPeek8(vi, address, value);
}

void Poke16(ViSession vi, ViAddr address, ViUInt16 value)
{
  return viPoke16(vi, address, value);
}

void Poke32(ViSession vi, ViAddr address, ViUInt32 value)
{
  return viPoke32(vi, address, value);
}

void Poke64(ViSession vi, ViAddr address, ViUInt64 value)
{
  return viPoke64(vi, address, value);
}

void Poke8(ViSession vi, ViAddr address, ViUInt8 value)
{
  return viPoke8(vi, address, value);
}

ViStatus PxiReserveTriggers(ViSession vi, ViInt16 cnt, ViInt16 trigBuses[], ViInt16 trigLines[], ViInt16* failureIndex)
{
  return viPxiReserveTriggers(vi, cnt, trigBuses, trigLines, failureIndex);
}

ViStatus Read(ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount)
{
  return viRead(vi, buffer, count, returnCount);
}

ViStatus ReadAsync(ViSession vi, ViByte readBuffer[], ViUInt32 count, ViJobId* jobIdentifier)
{
  return viReadAsync(vi, readBuffer, count, jobIdentifier);
}

ViStatus ReadSTB(ViSession vi, ViUInt16* statusByte)
{
  return viReadSTB(vi, statusByte);
}

ViStatus SetAttribute(ViSession vi, ViAttr attributeName, ViAttrState attributeValue)
{
  return viSetAttribute(vi, attributeName, attributeValue);
}

ViStatus SetBuf(ViSession vi, ViUInt16 mask, ViUInt32 bufferSize)
{
  return viSetBuf(vi, mask, bufferSize);
}

ViStatus StatusDesc(ViSession vi, ViStatus statusValue, ViChar statusDescription[256])
{
  return viStatusDesc(vi, statusValue, statusDescription);
}

ViStatus Terminate(ViSession vi, ViUInt16 degree, ViJobId jobIdentifier)
{
  return viTerminate(vi, degree, jobIdentifier);
}

ViStatus Unlock(ViSession vi)
{
  return viUnlock(vi);
}

ViStatus UnmapAddress(ViSession vi)
{
  return viUnmapAddress(vi);
}

ViStatus UnmapTrigger(ViSession vi, ViInt16 triggerSource, ViInt16 triggerDestination)
{
  return viUnmapTrigger(vi, triggerSource, triggerDestination);
}

ViStatus UsbControlIn(ViSession vi, ViInt16 bmRequestType, ViInt16 bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViByte buffer[], ViUInt16* returnCount)
{
  return viUsbControlIn(vi, bmRequestType, bRequest, wValue, wIndex, wLength, buffer, returnCount);
}

ViStatus UsbControlOut(ViSession vi, ViInt16 bmRequestType, ViInt16 bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViByte buffer[])
{
  return viUsbControlOut(vi, bmRequestType, bRequest, wValue, wIndex, wLength, buffer);
}

ViStatus VxiCommandQuery(ViSession vi, ViUInt16 mode, ViUInt32 command, ViUInt32* commandResponse)
{
  return viVxiCommandQuery(vi, mode, command, commandResponse);
}

ViStatus WaitOnEvent(ViSession vi, ViEventType inEventType, ViUInt32 timeout, ViEventType* outEventType, ViEvent* eventHandle)
{
  return viWaitOnEvent(vi, inEventType, timeout, outEventType, eventHandle);
}

ViStatus Write(ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount)
{
  return viWrite(vi, buffer, count, returnCount);
}

ViStatus WriteAsync(ViSession vi, ViByte buffer[], ViUInt32 count, ViJobId* jobIdentifier)
{
  return viWriteAsync(vi, buffer, count, jobIdentifier);
}

}  // namespace visa_grpc
