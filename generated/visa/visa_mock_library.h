//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for VISA
//---------------------------------------------------------------------
#ifndef VISA_GRPC_MOCK_LIBRARY_H
#define VISA_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "visa_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class VisaMockLibrary : public visa_grpc::VisaLibraryInterface {
 public:
  MOCK_METHOD(ViStatus, AssertIntrSignal, (ViSession vi, ViInt16 mode, ViUInt32 statusId), (override));
  MOCK_METHOD(ViStatus, AssertTrigger, (ViSession vi, ViUInt16 protocol), (override));
  MOCK_METHOD(ViStatus, AssertUtilSignal, (ViSession vi, ViUInt16 mode), (override));
  MOCK_METHOD(ViStatus, Clear, (ViSession vi), (override));
  MOCK_METHOD(ViStatus, Close, (ViObject objectHandle), (override));
  MOCK_METHOD(ViStatus, DisableEvent, (ViSession vi, ViEventType eventType, ViUInt16 eventMechanism), (override));
  MOCK_METHOD(ViStatus, DiscardEvents, (ViSession vi, ViEventType eventType, ViUInt16 eventMechanism), (override));
  MOCK_METHOD(ViStatus, EnableEvent, (ViSession vi, ViEventType eventType, ViUInt16 eventMechanism, ViEventFilter filterContext), (override));
  MOCK_METHOD(ViStatus, FindNext, (ViFindList findHandle, ViChar instrumentDescriptor[256]), (override));
  MOCK_METHOD(ViStatus, FindRsrc, (ViSession rsrcManagerHandle, ViConstString expression, ViFindList* findHandle, ViUInt32* returnCount, ViChar instrumentDescriptor[256]), (override));
  MOCK_METHOD(ViStatus, Flush, (ViSession vi, ViUInt16 mask), (override));
  MOCK_METHOD(ViStatus, GetAttribute, (ViObject objectHandle, ViAttr attributeName, void* attributeValue), (override));
  MOCK_METHOD(ViStatus, GpibCommand, (ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount), (override));
  MOCK_METHOD(ViStatus, GpibControlATN, (ViSession vi, ViUInt16 mode), (override));
  MOCK_METHOD(ViStatus, GpibControlREN, (ViSession vi, ViUInt16 mode), (override));
  MOCK_METHOD(ViStatus, GpibPassControl, (ViSession vi, ViUInt16 primaryAddress, ViUInt16 secondaryAddress), (override));
  MOCK_METHOD(ViStatus, GpibSendIFC, (ViSession vi), (override));
  MOCK_METHOD(ViStatus, In16, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt16* value), (override));
  MOCK_METHOD(ViStatus, In32, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt32* value), (override));
  MOCK_METHOD(ViStatus, In64, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt64* value), (override));
  MOCK_METHOD(ViStatus, In8, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt8* value), (override));
  MOCK_METHOD(ViStatus, Lock, (ViSession vi, ViAccessMode lockType, ViUInt32 timeout, ViConstKeyId requestedKey, ViChar accessKey[256]), (override));
  MOCK_METHOD(ViStatus, MapAddress, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize mapSize, ViBoolean ownerAccess, ViAddr suggestedAddress, ViAddr* address), (override));
  MOCK_METHOD(ViStatus, MapTrigger, (ViSession vi, ViInt16 triggerSource, ViInt16 triggerDestination, ViUInt16 mode), (override));
  MOCK_METHOD(ViStatus, MemAlloc, (ViSession vi, ViUInt32 size, ViBusAddress* offset), (override));
  MOCK_METHOD(ViStatus, MemAllocEx, (ViSession vi, ViBusSize size, ViBusAddress64* offset), (override));
  MOCK_METHOD(ViStatus, MemFree, (ViSession vi, ViBusAddress64 offset), (override));
  MOCK_METHOD(ViStatus, MoveIn16, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt16 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveIn32, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt32 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveIn64, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt64 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveIn8, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt8 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveOut16, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt16 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveOut32, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt32 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveOut64, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt64 buffer[]), (override));
  MOCK_METHOD(ViStatus, MoveOut8, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt8 buffer[]), (override));
  MOCK_METHOD(ViStatus, Open, (ViSession rsrcManagerHandle, ViConstRsrc instrumentDescriptor, ViAccessMode accessMode, ViUInt32 openTimeout, ViSession* vi), (override));
  MOCK_METHOD(ViStatus, OpenDefaultRM, (ViSession* rsrcManagerHandle), (override));
  MOCK_METHOD(ViStatus, Out16, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt16 value), (override));
  MOCK_METHOD(ViStatus, Out32, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt32 value), (override));
  MOCK_METHOD(ViStatus, Out64, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt64 value), (override));
  MOCK_METHOD(ViStatus, Out8, (ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt8 value), (override));
  MOCK_METHOD(ViStatus, ParseRsrc, (ViSession sessionHandle, ViConstRsrc resourceName, ViUInt16* interfaceType, ViUInt16* interfaceNumber, ViChar resourceClass[256], ViChar expandedUnaliasedName[256], ViChar aliasIfExists[256]), (override));
  MOCK_METHOD(void, Peek16, (ViSession vi, ViAddr address, ViUInt16* value), (override));
  MOCK_METHOD(void, Peek32, (ViSession vi, ViAddr address, ViUInt32* value), (override));
  MOCK_METHOD(void, Peek64, (ViSession vi, ViAddr address, ViUInt64* value), (override));
  MOCK_METHOD(void, Peek8, (ViSession vi, ViAddr address, ViUInt8* value), (override));
  MOCK_METHOD(void, Poke16, (ViSession vi, ViAddr address, ViUInt16 value), (override));
  MOCK_METHOD(void, Poke32, (ViSession vi, ViAddr address, ViUInt32 value), (override));
  MOCK_METHOD(void, Poke64, (ViSession vi, ViAddr address, ViUInt64 value), (override));
  MOCK_METHOD(void, Poke8, (ViSession vi, ViAddr address, ViUInt8 value), (override));
  MOCK_METHOD(ViStatus, PxiReserveTriggers, (ViSession vi, ViInt16 cnt, ViInt16 trigBuses[], ViInt16 trigLines[], ViInt16* failureIndex), (override));
  MOCK_METHOD(ViStatus, Read, (ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount), (override));
  MOCK_METHOD(ViStatus, ReadAsync, (ViSession vi, ViByte readBuffer[], ViUInt32 count, ViJobId* jobIdentifier), (override));
  MOCK_METHOD(ViStatus, ReadSTB, (ViSession vi, ViUInt16* statusByte), (override));
  MOCK_METHOD(ViStatus, SetAttribute, (ViObject objectHandle, ViAttr attributeName, ViAttrState attributeValue), (override));
  MOCK_METHOD(ViStatus, SetBuf, (ViSession vi, ViUInt16 mask, ViUInt32 bufferSize), (override));
  MOCK_METHOD(ViStatus, StatusDesc, (ViObject objectHandle, ViStatus statusValue, ViChar statusDescription[256]), (override));
  MOCK_METHOD(ViStatus, Terminate, (ViSession vi, ViUInt16 degree, ViJobId jobIdentifier), (override));
  MOCK_METHOD(ViStatus, Unlock, (ViSession vi), (override));
  MOCK_METHOD(ViStatus, UnmapAddress, (ViSession vi), (override));
  MOCK_METHOD(ViStatus, UnmapTrigger, (ViSession vi, ViInt16 triggerSource, ViInt16 triggerDestination), (override));
  MOCK_METHOD(ViStatus, UsbControlIn, (ViSession vi, ViInt16 bmRequestType, ViInt16 bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViByte buffer[], ViUInt16* returnCount), (override));
  MOCK_METHOD(ViStatus, UsbControlOut, (ViSession vi, ViInt16 bmRequestType, ViInt16 bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViByte buffer[]), (override));
  MOCK_METHOD(ViStatus, VxiCommandQuery, (ViSession vi, ViUInt16 mode, ViUInt32 command, ViUInt32* commandResponse), (override));
  MOCK_METHOD(ViStatus, WaitOnEvent, (ViSession vi, ViEventType inEventType, ViUInt32 timeout, ViEventType* outEventType, ViEvent* eventHandle), (override));
  MOCK_METHOD(ViStatus, Write, (ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount), (override));
  MOCK_METHOD(ViStatus, WriteAsync, (ViSession vi, ViByte buffer[], ViUInt32 count, ViJobId* jobIdentifier), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // VISA_GRPC_MOCK_LIBRARY_H
