//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for VISA
//---------------------------------------------------------------------
#ifndef VISA_GRPC_LIBRARY_H
#define VISA_GRPC_LIBRARY_H

#include "visa_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace visa_grpc {

class VisaLibrary : public visa_grpc::VisaLibraryInterface {
 public:
  VisaLibrary();
  explicit VisaLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~VisaLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  ViStatus AssertIntrSignal(ViSession vi, ViInt16 mode, ViUInt32 statusId);
  ViStatus AssertTrigger(ViSession vi, ViUInt16 protocol);
  ViStatus AssertUtilSignal(ViSession vi, ViUInt16 mode);
  ViStatus Clear(ViSession vi);
  ViStatus Close(ViObject objectHandle);
  ViStatus DisableEvent(ViSession vi, ViEventType eventType, ViUInt16 eventMechanism);
  ViStatus DiscardEvents(ViSession vi, ViEventType eventType, ViUInt16 eventMechanism);
  ViStatus EnableEvent(ViSession vi, ViEventType eventType, ViUInt16 eventMechanism, ViEventFilter filterContext);
  ViStatus FindNext(ViFindList findHandle, ViChar instrumentDescriptor[256]);
  ViStatus FindRsrc(ViSession rsrcManagerHandle, ViConstString expression, ViFindList* findHandle, ViUInt32* returnCount, ViChar instrumentDescriptor[256]);
  ViStatus Flush(ViSession vi, ViUInt16 mask);
  ViStatus GetAttribute(ViObject objectHandle, ViAttr attributeName, void* attributeValue);
  ViStatus GpibCommand(ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount);
  ViStatus GpibControlATN(ViSession vi, ViUInt16 mode);
  ViStatus GpibControlREN(ViSession vi, ViUInt16 mode);
  ViStatus GpibPassControl(ViSession vi, ViUInt16 primaryAddress, ViUInt16 secondaryAddress);
  ViStatus GpibSendIFC(ViSession vi);
  ViStatus In16Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt16* value);
  ViStatus In32Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt32* value);
  ViStatus In64Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt64* value);
  ViStatus In8Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt8* value);
  ViStatus Lock(ViSession vi, ViAccessMode lockType, ViUInt32 timeout, ViConstKeyId requestedKey, ViChar accessKey[256]);
  ViStatus MapAddressEx(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize mapSize, ViBoolean ownerAccess, ViAddr suggestedAddress, ViAddr* address);
  ViStatus MapTrigger(ViSession vi, ViInt16 triggerSource, ViInt16 triggerDestination, ViUInt16 mode);
  ViStatus MemAlloc(ViSession vi, ViUInt32 size, ViBusAddress* offset);
  ViStatus MemAllocEx(ViSession vi, ViBusSize size, ViBusAddress64* offset);
  ViStatus MemFreeEx(ViSession vi, ViBusAddress64 offset);
  ViStatus MoveIn16Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt16 buffer[]);
  ViStatus MoveIn32Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt32 buffer[]);
  ViStatus MoveIn64Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt64 buffer[]);
  ViStatus MoveIn8Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt8 buffer[]);
  ViStatus MoveOut16Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt16 buffer[]);
  ViStatus MoveOut32Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt32 buffer[]);
  ViStatus MoveOut64Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt64 buffer[]);
  ViStatus MoveOut8Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViBusSize count, ViUInt8 buffer[]);
  ViStatus Open(ViSession rsrcManagerHandle, ViConstRsrc instrumentDescriptor, ViAccessMode accessMode, ViUInt32 openTimeout, ViSession* vi);
  ViStatus OpenDefaultRM(ViSession* rsrcManagerHandle);
  ViStatus Out16Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt16 value);
  ViStatus Out32Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt32 value);
  ViStatus Out64Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt64 value);
  ViStatus Out8Ex(ViSession vi, ViUInt16 addressSpace, ViBusAddress64 offset, ViUInt8 value);
  ViStatus ParseRsrcEx(ViSession sessionHandle, ViConstRsrc resourceName, ViUInt16* interfaceType, ViUInt16* interfaceNumber, ViChar resourceClass[256], ViChar expandedUnaliasedName[256], ViChar aliasIfExists[256]);
  void Peek16(ViSession vi, ViAddr address, ViUInt16* value);
  void Peek32(ViSession vi, ViAddr address, ViUInt32* value);
  void Peek64(ViSession vi, ViAddr address, ViUInt64* value);
  void Peek8(ViSession vi, ViAddr address, ViUInt8* value);
  void Poke16(ViSession vi, ViAddr address, ViUInt16 value);
  void Poke32(ViSession vi, ViAddr address, ViUInt32 value);
  void Poke64(ViSession vi, ViAddr address, ViUInt64 value);
  void Poke8(ViSession vi, ViAddr address, ViUInt8 value);
  ViStatus PxiReserveTriggers(ViSession vi, ViInt16 cnt, ViInt16 trigBuses[], ViInt16 trigLines[], ViInt16* failureIndex);
  ViStatus Read(ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount);
  ViStatus ReadAsync(ViSession vi, void* readBuffer, ViUInt32 count, ViJobId* jobIdentifier);
  ViStatus ReadSTB(ViSession vi, ViUInt16* statusByte);
  ViStatus SetAttribute(ViObject objectHandle, ViAttr attributeName, ViAttrState attributeValue);
  ViStatus SetBuf(ViSession vi, ViUInt16 mask, ViUInt32 bufferSize);
  ViStatus StatusDesc(ViObject objectHandle, ViStatus statusValue, ViChar statusDescription[256]);
  ViStatus Terminate(ViSession vi, ViUInt16 degree, ViJobId jobIdentifier);
  ViStatus Unlock(ViSession vi);
  ViStatus UnmapAddress(ViSession vi);
  ViStatus UnmapTrigger(ViSession vi, ViInt16 triggerSource, ViInt16 triggerDestination);
  ViStatus UsbControlIn(ViSession vi, ViInt16 bmRequestType, ViInt16 bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViByte buffer[], ViUInt16* returnCount);
  ViStatus UsbControlOut(ViSession vi, ViInt16 bmRequestType, ViInt16 bRequest, ViUInt16 wValue, ViUInt16 wIndex, ViUInt16 wLength, ViByte buffer[]);
  ViStatus VxiCommandQuery(ViSession vi, ViUInt16 mode, ViUInt32 command, ViUInt32* commandResponse);
  ViStatus WaitOnEvent(ViSession vi, ViEventType inEventType, ViUInt32 timeout, ViEventType* outEventType, ViEvent* eventHandle);
  ViStatus Write(ViSession vi, ViByte buffer[], ViUInt32 count, ViUInt32* returnCount);
  ViStatus WriteAsync(ViSession vi, ViByte buffer[], ViUInt32 count, ViJobId* jobIdentifier);

 private:
  using AssertIntrSignalPtr = decltype(&viAssertIntrSignal);
  using AssertTriggerPtr = decltype(&viAssertTrigger);
  using AssertUtilSignalPtr = decltype(&viAssertUtilSignal);
  using ClearPtr = decltype(&viClear);
  using ClosePtr = decltype(&viClose);
  using DisableEventPtr = decltype(&viDisableEvent);
  using DiscardEventsPtr = decltype(&viDiscardEvents);
  using EnableEventPtr = decltype(&viEnableEvent);
  using FindNextPtr = ViStatus (*)(ViFindList findHandle, ViChar instrumentDescriptor[256]);
  using FindRsrcPtr = decltype(&viFindRsrc);
  using FlushPtr = decltype(&viFlush);
  using GetAttributePtr = decltype(&viGetAttribute);
  using GpibCommandPtr = decltype(&viGpibCommand);
  using GpibControlATNPtr = decltype(&viGpibControlATN);
  using GpibControlRENPtr = decltype(&viGpibControlREN);
  using GpibPassControlPtr = decltype(&viGpibPassControl);
  using GpibSendIFCPtr = decltype(&viGpibSendIFC);
  using In16ExPtr = decltype(&viIn16Ex);
  using In32ExPtr = decltype(&viIn32Ex);
  using In64ExPtr = decltype(&viIn64Ex);
  using In8ExPtr = decltype(&viIn8Ex);
  using LockPtr = decltype(&viLock);
  using MapAddressExPtr = decltype(&viMapAddressEx);
  using MapTriggerPtr = decltype(&viMapTrigger);
  using MemAllocPtr = decltype(&viMemAlloc);
  using MemAllocExPtr = decltype(&viMemAllocEx);
  using MemFreeExPtr = decltype(&viMemFreeEx);
  using MoveIn16ExPtr = decltype(&viMoveIn16Ex);
  using MoveIn32ExPtr = decltype(&viMoveIn32Ex);
  using MoveIn64ExPtr = decltype(&viMoveIn64Ex);
  using MoveIn8ExPtr = decltype(&viMoveIn8Ex);
  using MoveOut16ExPtr = decltype(&viMoveOut16Ex);
  using MoveOut32ExPtr = decltype(&viMoveOut32Ex);
  using MoveOut64ExPtr = decltype(&viMoveOut64Ex);
  using MoveOut8ExPtr = decltype(&viMoveOut8Ex);
  using OpenPtr = decltype(&viOpen);
  using OpenDefaultRMPtr = ViStatus (*)(ViSession* rsrcManagerHandle);
  using Out16ExPtr = decltype(&viOut16Ex);
  using Out32ExPtr = decltype(&viOut32Ex);
  using Out64ExPtr = decltype(&viOut64Ex);
  using Out8ExPtr = decltype(&viOut8Ex);
  using ParseRsrcExPtr = decltype(&viParseRsrcEx);
  using Peek16Ptr = decltype(&viPeek16);
  using Peek32Ptr = decltype(&viPeek32);
  using Peek64Ptr = decltype(&viPeek64);
  using Peek8Ptr = decltype(&viPeek8);
  using Poke16Ptr = decltype(&viPoke16);
  using Poke32Ptr = decltype(&viPoke32);
  using Poke64Ptr = decltype(&viPoke64);
  using Poke8Ptr = decltype(&viPoke8);
  using PxiReserveTriggersPtr = decltype(&viPxiReserveTriggers);
  using ReadPtr = decltype(&viRead);
  using ReadAsyncPtr = decltype(&viReadAsync);
  using ReadSTBPtr = decltype(&viReadSTB);
  using SetAttributePtr = decltype(&viSetAttribute);
  using SetBufPtr = decltype(&viSetBuf);
  using StatusDescPtr = decltype(&viStatusDesc);
  using TerminatePtr = decltype(&viTerminate);
  using UnlockPtr = decltype(&viUnlock);
  using UnmapAddressPtr = decltype(&viUnmapAddress);
  using UnmapTriggerPtr = decltype(&viUnmapTrigger);
  using UsbControlInPtr = decltype(&viUsbControlIn);
  using UsbControlOutPtr = decltype(&viUsbControlOut);
  using VxiCommandQueryPtr = decltype(&viVxiCommandQuery);
  using WaitOnEventPtr = decltype(&viWaitOnEvent);
  using WritePtr = decltype(&viWrite);
  using WriteAsyncPtr = decltype(&viWriteAsync);

  typedef struct FunctionPointers {
    AssertIntrSignalPtr AssertIntrSignal;
    AssertTriggerPtr AssertTrigger;
    AssertUtilSignalPtr AssertUtilSignal;
    ClearPtr Clear;
    ClosePtr Close;
    DisableEventPtr DisableEvent;
    DiscardEventsPtr DiscardEvents;
    EnableEventPtr EnableEvent;
    FindNextPtr FindNext;
    FindRsrcPtr FindRsrc;
    FlushPtr Flush;
    GetAttributePtr GetAttribute;
    GpibCommandPtr GpibCommand;
    GpibControlATNPtr GpibControlATN;
    GpibControlRENPtr GpibControlREN;
    GpibPassControlPtr GpibPassControl;
    GpibSendIFCPtr GpibSendIFC;
    In16ExPtr In16Ex;
    In32ExPtr In32Ex;
    In64ExPtr In64Ex;
    In8ExPtr In8Ex;
    LockPtr Lock;
    MapAddressExPtr MapAddressEx;
    MapTriggerPtr MapTrigger;
    MemAllocPtr MemAlloc;
    MemAllocExPtr MemAllocEx;
    MemFreeExPtr MemFreeEx;
    MoveIn16ExPtr MoveIn16Ex;
    MoveIn32ExPtr MoveIn32Ex;
    MoveIn64ExPtr MoveIn64Ex;
    MoveIn8ExPtr MoveIn8Ex;
    MoveOut16ExPtr MoveOut16Ex;
    MoveOut32ExPtr MoveOut32Ex;
    MoveOut64ExPtr MoveOut64Ex;
    MoveOut8ExPtr MoveOut8Ex;
    OpenPtr Open;
    OpenDefaultRMPtr OpenDefaultRM;
    Out16ExPtr Out16Ex;
    Out32ExPtr Out32Ex;
    Out64ExPtr Out64Ex;
    Out8ExPtr Out8Ex;
    ParseRsrcExPtr ParseRsrcEx;
    Peek16Ptr Peek16;
    Peek32Ptr Peek32;
    Peek64Ptr Peek64;
    Peek8Ptr Peek8;
    Poke16Ptr Poke16;
    Poke32Ptr Poke32;
    Poke64Ptr Poke64;
    Poke8Ptr Poke8;
    PxiReserveTriggersPtr PxiReserveTriggers;
    ReadPtr Read;
    ReadAsyncPtr ReadAsync;
    ReadSTBPtr ReadSTB;
    SetAttributePtr SetAttribute;
    SetBufPtr SetBuf;
    StatusDescPtr StatusDesc;
    TerminatePtr Terminate;
    UnlockPtr Unlock;
    UnmapAddressPtr UnmapAddress;
    UnmapTriggerPtr UnmapTrigger;
    UsbControlInPtr UsbControlIn;
    UsbControlOutPtr UsbControlOut;
    VxiCommandQueryPtr VxiCommandQuery;
    WaitOnEventPtr WaitOnEvent;
    WritePtr Write;
    WriteAsyncPtr WriteAsync;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace visa_grpc

#endif  // VISA_GRPC_LIBRARY_H
