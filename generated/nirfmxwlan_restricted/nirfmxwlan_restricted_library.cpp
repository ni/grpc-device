//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXWLAN-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nirfmxwlan_restricted_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxWLAN.dll";
#else
static const char* kLibraryName = "libnirfmxwlan.so.1";
#endif

namespace nirfmxwlan_restricted_grpc {

NiRFmxWLANRestrictedLibrary::NiRFmxWLANRestrictedLibrary() : NiRFmxWLANRestrictedLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

NiRFmxWLANRestrictedLibrary::NiRFmxWLANRestrictedLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.GetChannelList = reinterpret_cast<GetChannelListPtr>(shared_library_->get_function_pointer("RFmxWLAN_GetChannelList"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_->get_function_pointer("RFmxWLAN_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_->get_function_pointer("RFmxWLAN_GetErrorString"));
  function_pointers_.OFDMModAccFetchCommonPilotErrorTraceIndB = reinterpret_cast<OFDMModAccFetchCommonPilotErrorTraceIndBPtr>(shared_library_->get_function_pointer("RFmxWLAN_OFDMModAccFetchCommonPilotErrorTraceIndB"));
  function_pointers_.OFDMModAccLoad1ReferenceWaveformFromTDMSFile = reinterpret_cast<OFDMModAccLoad1ReferenceWaveformFromTDMSFilePtr>(shared_library_->get_function_pointer("RFmxWLAN_OFDMModAccLoad1ReferenceWaveformFromTDMSFile"));
  function_pointers_.OFDMModAccNoiseCalibrate = reinterpret_cast<OFDMModAccNoiseCalibratePtr>(shared_library_->get_function_pointer("RFmxWLAN_OFDMModAccNoiseCalibrate"));
}

NiRFmxWLANRestrictedLibrary::~NiRFmxWLANRestrictedLibrary()
{
}

::grpc::Status NiRFmxWLANRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxWLANRestrictedLibrary::GetChannelList(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 WLANBand, float64 centerFrequencies[], float64 channelBandwidths[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetChannelList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetChannelList.");
  }
  return function_pointers_.GetChannelList(instrumentHandle, selectorString, WLANBand, centerFrequencies, channelBandwidths, arraySize, actualArraySize);
}

int32 NiRFmxWLANRestrictedLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxWLANRestrictedLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxWLANRestrictedLibrary::OFDMModAccFetchCommonPilotErrorTraceIndB(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 commonPilotErrorMagnitude[], float32 commonPilotErrorPhase[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchCommonPilotErrorTraceIndB) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchCommonPilotErrorTraceIndB.");
  }
  return function_pointers_.OFDMModAccFetchCommonPilotErrorTraceIndB(instrumentHandle, selectorString, timeout, x0, dx, commonPilotErrorMagnitude, commonPilotErrorPhase, arraySize, actualArraySize);
}

int32 NiRFmxWLANRestrictedLibrary::OFDMModAccLoad1ReferenceWaveformFromTDMSFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char waveformFilePath[], int32 waveformIndex)
{
  if (!function_pointers_.OFDMModAccLoad1ReferenceWaveformFromTDMSFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccLoad1ReferenceWaveformFromTDMSFile.");
  }
  return function_pointers_.OFDMModAccLoad1ReferenceWaveformFromTDMSFile(instrumentHandle, selectorString, waveformFilePath, waveformIndex);
}

int32 NiRFmxWLANRestrictedLibrary::OFDMModAccNoiseCalibrate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sharedLOConnection)
{
  if (!function_pointers_.OFDMModAccNoiseCalibrate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccNoiseCalibrate.");
  }
  return function_pointers_.OFDMModAccNoiseCalibrate(instrumentHandle, selectorString, sharedLOConnection);
}

}  // namespace nirfmxwlan_restricted_grpc
