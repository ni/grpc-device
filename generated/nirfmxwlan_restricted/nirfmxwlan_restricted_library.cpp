//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXWLAN-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nirfmxwlan_restricted_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxWLAN.dll";
#else
static const char* kLibraryName = "libnirfmxwlan.so.1";
#endif

namespace nirfmxwlan_restricted_grpc {

NiRFmxWLANRestrictedLibrary::NiRFmxWLANRestrictedLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.GetChannelList = reinterpret_cast<GetChannelListPtr>(shared_library_.get_function_pointer("RFmxWLAN_GetChannelList"));
  function_pointers_.OFDMModAccFetchCommonPilotErrorTraceIndB = reinterpret_cast<OFDMModAccFetchCommonPilotErrorTraceIndBPtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccFetchCommonPilotErrorTraceIndB"));
  function_pointers_.OFDMModAccCNoiseCalibrate = reinterpret_cast<OFDMModAccCNoiseCalibratePtr>(shared_library_.get_function_pointer("RFmxWLAN_OFDMModAccCNoiseCalibrate"));
}

NiRFmxWLANRestrictedLibrary::~NiRFmxWLANRestrictedLibrary()
{
}

::grpc::Status NiRFmxWLANRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxWLANRestrictedLibrary::GetChannelList(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 WLANBand, float64 centerFrequencies[], float64 channelBandwidths[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetChannelList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_GetChannelList.");
  }
  return function_pointers_.GetChannelList(instrumentHandle, selectorString, WLANBand, centerFrequencies, channelBandwidths, arraySize, actualArraySize);
}

int32 NiRFmxWLANRestrictedLibrary::OFDMModAccFetchCommonPilotErrorTraceIndB(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 commonPilotErrorMagnitude[], float32 commonPilotErrorPhase[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OFDMModAccFetchCommonPilotErrorTraceIndB) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccFetchCommonPilotErrorTraceIndB.");
  }
  return function_pointers_.OFDMModAccFetchCommonPilotErrorTraceIndB(instrumentHandle, selectorString, timeout, x0, dx, commonPilotErrorMagnitude, commonPilotErrorPhase, arraySize, actualArraySize);
}

int32 NiRFmxWLANRestrictedLibrary::OFDMModAccCNoiseCalibrate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sharedLOConnection)
{
  if (!function_pointers_.OFDMModAccCNoiseCalibrate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxWLAN_OFDMModAccCNoiseCalibrate.");
  }
  return function_pointers_.OFDMModAccCNoiseCalibrate(instrumentHandle, selectorString, sharedLOConnection);
}

}  // namespace nirfmxwlan_restricted_grpc
