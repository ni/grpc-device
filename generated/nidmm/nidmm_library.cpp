//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-DMM Metadata
//---------------------------------------------------------------------
#include "nidmm_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nidmm_64.dll";
#else
static const char* kLibraryName = "libnidmm.so";
#endif

namespace nidmm_grpc {

NiDmmLibrary::NiDmmLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Abort = reinterpret_cast<AbortPtr>(shared_library_.get_function_pointer("niDMM_Abort"));
  function_pointers_.CheckAttributeViBoolean = reinterpret_cast<CheckAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDMM_CheckAttributeViBoolean"));
  function_pointers_.CheckAttributeViInt32 = reinterpret_cast<CheckAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDMM_CheckAttributeViInt32"));
  function_pointers_.CheckAttributeViReal64 = reinterpret_cast<CheckAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDMM_CheckAttributeViReal64"));
  function_pointers_.CheckAttributeViSession = reinterpret_cast<CheckAttributeViSessionPtr>(shared_library_.get_function_pointer("niDMM_CheckAttributeViSession"));
  function_pointers_.CheckAttributeViString = reinterpret_cast<CheckAttributeViStringPtr>(shared_library_.get_function_pointer("niDMM_CheckAttributeViString"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niDMM_ClearError"));
  function_pointers_.ClearInterchangeWarnings = reinterpret_cast<ClearInterchangeWarningsPtr>(shared_library_.get_function_pointer("niDMM_ClearInterchangeWarnings"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niDMM_close"));
  function_pointers_.ConfigureACBandwidth = reinterpret_cast<ConfigureACBandwidthPtr>(shared_library_.get_function_pointer("niDMM_ConfigureACBandwidth"));
  function_pointers_.ConfigureADCCalibration = reinterpret_cast<ConfigureADCCalibrationPtr>(shared_library_.get_function_pointer("niDMM_ConfigureADCCalibration"));
  function_pointers_.ConfigureAutoZeroMode = reinterpret_cast<ConfigureAutoZeroModePtr>(shared_library_.get_function_pointer("niDMM_ConfigureAutoZeroMode"));
  function_pointers_.ConfigureCableCompType = reinterpret_cast<ConfigureCableCompTypePtr>(shared_library_.get_function_pointer("niDMM_ConfigureCableCompType"));
  function_pointers_.ConfigureCurrentSource = reinterpret_cast<ConfigureCurrentSourcePtr>(shared_library_.get_function_pointer("niDMM_ConfigureCurrentSource"));
  function_pointers_.ConfigureFixedRefJunction = reinterpret_cast<ConfigureFixedRefJunctionPtr>(shared_library_.get_function_pointer("niDMM_ConfigureFixedRefJunction"));
  function_pointers_.ConfigureFrequencyVoltageRange = reinterpret_cast<ConfigureFrequencyVoltageRangePtr>(shared_library_.get_function_pointer("niDMM_ConfigureFrequencyVoltageRange"));
  function_pointers_.ConfigureMeasCompleteDest = reinterpret_cast<ConfigureMeasCompleteDestPtr>(shared_library_.get_function_pointer("niDMM_ConfigureMeasCompleteDest"));
  function_pointers_.ConfigureMeasCompleteSlope = reinterpret_cast<ConfigureMeasCompleteSlopePtr>(shared_library_.get_function_pointer("niDMM_ConfigureMeasCompleteSlope"));
  function_pointers_.ConfigureMeasurementAbsolute = reinterpret_cast<ConfigureMeasurementAbsolutePtr>(shared_library_.get_function_pointer("niDMM_ConfigureMeasurementAbsolute"));
  function_pointers_.ConfigureMeasurementDigits = reinterpret_cast<ConfigureMeasurementDigitsPtr>(shared_library_.get_function_pointer("niDMM_ConfigureMeasurementDigits"));
  function_pointers_.ConfigureMultiPoint = reinterpret_cast<ConfigureMultiPointPtr>(shared_library_.get_function_pointer("niDMM_ConfigureMultiPoint"));
  function_pointers_.ConfigureOffsetCompOhms = reinterpret_cast<ConfigureOffsetCompOhmsPtr>(shared_library_.get_function_pointer("niDMM_ConfigureOffsetCompOhms"));
  function_pointers_.ConfigureOpenCableCompValues = reinterpret_cast<ConfigureOpenCableCompValuesPtr>(shared_library_.get_function_pointer("niDMM_ConfigureOpenCableCompValues"));
  function_pointers_.ConfigurePowerLineFrequency = reinterpret_cast<ConfigurePowerLineFrequencyPtr>(shared_library_.get_function_pointer("niDMM_ConfigurePowerLineFrequency"));
  function_pointers_.ConfigureRTDCustom = reinterpret_cast<ConfigureRTDCustomPtr>(shared_library_.get_function_pointer("niDMM_ConfigureRTDCustom"));
  function_pointers_.ConfigureRTDType = reinterpret_cast<ConfigureRTDTypePtr>(shared_library_.get_function_pointer("niDMM_ConfigureRTDType"));
  function_pointers_.ConfigureSampleTriggerSlope = reinterpret_cast<ConfigureSampleTriggerSlopePtr>(shared_library_.get_function_pointer("niDMM_ConfigureSampleTriggerSlope"));
  function_pointers_.ConfigureShortCableCompValues = reinterpret_cast<ConfigureShortCableCompValuesPtr>(shared_library_.get_function_pointer("niDMM_ConfigureShortCableCompValues"));
  function_pointers_.ConfigureThermistorCustom = reinterpret_cast<ConfigureThermistorCustomPtr>(shared_library_.get_function_pointer("niDMM_ConfigureThermistorCustom"));
  function_pointers_.ConfigureThermistorType = reinterpret_cast<ConfigureThermistorTypePtr>(shared_library_.get_function_pointer("niDMM_ConfigureThermistorType"));
  function_pointers_.ConfigureThermocouple = reinterpret_cast<ConfigureThermocouplePtr>(shared_library_.get_function_pointer("niDMM_ConfigureThermocouple"));
  function_pointers_.ConfigureTransducerType = reinterpret_cast<ConfigureTransducerTypePtr>(shared_library_.get_function_pointer("niDMM_ConfigureTransducerType"));
  function_pointers_.ConfigureTrigger = reinterpret_cast<ConfigureTriggerPtr>(shared_library_.get_function_pointer("niDMM_ConfigureTrigger"));
  function_pointers_.ConfigureTriggerSlope = reinterpret_cast<ConfigureTriggerSlopePtr>(shared_library_.get_function_pointer("niDMM_ConfigureTriggerSlope"));
  function_pointers_.ConfigureWaveformAcquisition = reinterpret_cast<ConfigureWaveformAcquisitionPtr>(shared_library_.get_function_pointer("niDMM_ConfigureWaveformAcquisition"));
  function_pointers_.ConfigureWaveformCoupling = reinterpret_cast<ConfigureWaveformCouplingPtr>(shared_library_.get_function_pointer("niDMM_ConfigureWaveformCoupling"));
  function_pointers_.Control = reinterpret_cast<ControlPtr>(shared_library_.get_function_pointer("niDMM_Control"));
  function_pointers_.Control4022 = reinterpret_cast<Control4022Ptr>(shared_library_.get_function_pointer("niDMM_4022Control"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niDMM_Disable"));
  function_pointers_.ExportAttributeConfigurationBuffer = reinterpret_cast<ExportAttributeConfigurationBufferPtr>(shared_library_.get_function_pointer("niDMM_ExportAttributeConfigurationBuffer"));
  function_pointers_.ExportAttributeConfigurationFile = reinterpret_cast<ExportAttributeConfigurationFilePtr>(shared_library_.get_function_pointer("niDMM_ExportAttributeConfigurationFile"));
  function_pointers_.Fetch = reinterpret_cast<FetchPtr>(shared_library_.get_function_pointer("niDMM_Fetch"));
  function_pointers_.FetchMultiPoint = reinterpret_cast<FetchMultiPointPtr>(shared_library_.get_function_pointer("niDMM_FetchMultiPoint"));
  function_pointers_.FetchWaveform = reinterpret_cast<FetchWaveformPtr>(shared_library_.get_function_pointer("niDMM_FetchWaveform"));
  function_pointers_.GetApertureTimeInfo = reinterpret_cast<GetApertureTimeInfoPtr>(shared_library_.get_function_pointer("niDMM_GetApertureTimeInfo"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDMM_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDMM_GetAttributeViInt32"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDMM_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niDMM_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niDMM_GetAttributeViString"));
  function_pointers_.GetAutoRangeValue = reinterpret_cast<GetAutoRangeValuePtr>(shared_library_.get_function_pointer("niDMM_GetAutoRangeValue"));
  function_pointers_.GetCalDateAndTime = reinterpret_cast<GetCalDateAndTimePtr>(shared_library_.get_function_pointer("niDMM_GetCalDateAndTime"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niDMM_GetChannelName"));
  function_pointers_.GetDevTemp = reinterpret_cast<GetDevTempPtr>(shared_library_.get_function_pointer("niDMM_GetDevTemp"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niDMM_GetError"));
  function_pointers_.GetErrorMessage = reinterpret_cast<GetErrorMessagePtr>(shared_library_.get_function_pointer("niDMM_GetErrorMessage"));
  function_pointers_.GetExtCalRecommendedInterval = reinterpret_cast<GetExtCalRecommendedIntervalPtr>(shared_library_.get_function_pointer("niDMM_GetExtCalRecommendedInterval"));
  function_pointers_.GetLastCalTemp = reinterpret_cast<GetLastCalTempPtr>(shared_library_.get_function_pointer("niDMM_GetLastCalTemp"));
  function_pointers_.GetMeasurementPeriod = reinterpret_cast<GetMeasurementPeriodPtr>(shared_library_.get_function_pointer("niDMM_GetMeasurementPeriod"));
  function_pointers_.GetNextCoercionRecord = reinterpret_cast<GetNextCoercionRecordPtr>(shared_library_.get_function_pointer("niDMM_GetNextCoercionRecord"));
  function_pointers_.GetNextInterchangeWarning = reinterpret_cast<GetNextInterchangeWarningPtr>(shared_library_.get_function_pointer("niDMM_GetNextInterchangeWarning"));
  function_pointers_.GetSelfCalSupported = reinterpret_cast<GetSelfCalSupportedPtr>(shared_library_.get_function_pointer("niDMM_GetSelfCalSupported"));
  function_pointers_.ImportAttributeConfigurationBuffer = reinterpret_cast<ImportAttributeConfigurationBufferPtr>(shared_library_.get_function_pointer("niDMM_ImportAttributeConfigurationBuffer"));
  function_pointers_.ImportAttributeConfigurationFile = reinterpret_cast<ImportAttributeConfigurationFilePtr>(shared_library_.get_function_pointer("niDMM_ImportAttributeConfigurationFile"));
  function_pointers_.Init = reinterpret_cast<InitPtr>(shared_library_.get_function_pointer("niDMM_init"));
  function_pointers_.InitWithOptions = reinterpret_cast<InitWithOptionsPtr>(shared_library_.get_function_pointer("niDMM_InitWithOptions"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("niDMM_Initiate"));
  function_pointers_.InvalidateAllAttributes = reinterpret_cast<InvalidateAllAttributesPtr>(shared_library_.get_function_pointer("niDMM_InvalidateAllAttributes"));
  function_pointers_.IsOverRange = reinterpret_cast<IsOverRangePtr>(shared_library_.get_function_pointer("niDMM_IsOverRange"));
  function_pointers_.IsUnderRange = reinterpret_cast<IsUnderRangePtr>(shared_library_.get_function_pointer("niDMM_IsUnderRange"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niDMM_LockSession"));
  function_pointers_.PerformOpenCableComp = reinterpret_cast<PerformOpenCableCompPtr>(shared_library_.get_function_pointer("niDMM_PerformOpenCableComp"));
  function_pointers_.PerformShortCableComp = reinterpret_cast<PerformShortCableCompPtr>(shared_library_.get_function_pointer("niDMM_PerformShortCableComp"));
  function_pointers_.Read = reinterpret_cast<ReadPtr>(shared_library_.get_function_pointer("niDMM_Read"));
  function_pointers_.ReadMultiPoint = reinterpret_cast<ReadMultiPointPtr>(shared_library_.get_function_pointer("niDMM_ReadMultiPoint"));
  function_pointers_.ReadStatus = reinterpret_cast<ReadStatusPtr>(shared_library_.get_function_pointer("niDMM_ReadStatus"));
  function_pointers_.ReadWaveform = reinterpret_cast<ReadWaveformPtr>(shared_library_.get_function_pointer("niDMM_ReadWaveform"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niDMM_reset"));
  function_pointers_.ResetInterchangeCheck = reinterpret_cast<ResetInterchangeCheckPtr>(shared_library_.get_function_pointer("niDMM_ResetInterchangeCheck"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niDMM_ResetWithDefaults"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niDMM_revision_query"));
  function_pointers_.SelfCal = reinterpret_cast<SelfCalPtr>(shared_library_.get_function_pointer("niDMM_SelfCal"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niDMM_self_test"));
  function_pointers_.SendSoftwareTrigger = reinterpret_cast<SendSoftwareTriggerPtr>(shared_library_.get_function_pointer("niDMM_SendSoftwareTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDMM_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDMM_SetAttributeViInt32"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDMM_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niDMM_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niDMM_SetAttributeViString"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niDMM_UnlockSession"));
}

NiDmmLibrary::~NiDmmLibrary()
{
}

::grpc::Status NiDmmLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiDmmLibrary::Abort(ViSession vi)
{
  if (!function_pointers_.Abort) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_Abort.");
  }
#if defined(_MSC_VER)
  return niDMM_Abort(vi);
#else
  return function_pointers_.Abort(vi);
#endif
}

ViStatus NiDmmLibrary::CheckAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.CheckAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_CheckAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niDMM_CheckAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::CheckAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.CheckAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_CheckAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niDMM_CheckAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::CheckAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.CheckAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_CheckAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niDMM_CheckAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::CheckAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.CheckAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_CheckAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niDMM_CheckAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::CheckAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  if (!function_pointers_.CheckAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_CheckAttributeViString.");
  }
#if defined(_MSC_VER)
  return niDMM_CheckAttributeViString(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViString(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ClearError.");
  }
#if defined(_MSC_VER)
  return niDMM_ClearError(vi);
#else
  return function_pointers_.ClearError(vi);
#endif
}

ViStatus NiDmmLibrary::ClearInterchangeWarnings(ViSession vi)
{
  if (!function_pointers_.ClearInterchangeWarnings) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ClearInterchangeWarnings.");
  }
#if defined(_MSC_VER)
  return niDMM_ClearInterchangeWarnings(vi);
#else
  return function_pointers_.ClearInterchangeWarnings(vi);
#endif
}

ViStatus NiDmmLibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_close.");
  }
#if defined(_MSC_VER)
  return niDMM_close(vi);
#else
  return function_pointers_.Close(vi);
#endif
}

ViStatus NiDmmLibrary::ConfigureACBandwidth(ViSession vi, ViReal64 acMinimumFrequencyHz, ViReal64 acMaximumFrequencyHz)
{
  if (!function_pointers_.ConfigureACBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureACBandwidth.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureACBandwidth(vi, acMinimumFrequencyHz, acMaximumFrequencyHz);
#else
  return function_pointers_.ConfigureACBandwidth(vi, acMinimumFrequencyHz, acMaximumFrequencyHz);
#endif
}

ViStatus NiDmmLibrary::ConfigureADCCalibration(ViSession vi, ViInt32 adcCalibration)
{
  if (!function_pointers_.ConfigureADCCalibration) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureADCCalibration.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureADCCalibration(vi, adcCalibration);
#else
  return function_pointers_.ConfigureADCCalibration(vi, adcCalibration);
#endif
}

ViStatus NiDmmLibrary::ConfigureAutoZeroMode(ViSession vi, ViInt32 autoZeroMode)
{
  if (!function_pointers_.ConfigureAutoZeroMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureAutoZeroMode.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureAutoZeroMode(vi, autoZeroMode);
#else
  return function_pointers_.ConfigureAutoZeroMode(vi, autoZeroMode);
#endif
}

ViStatus NiDmmLibrary::ConfigureCableCompType(ViSession vi, ViInt32 cableCompType)
{
  if (!function_pointers_.ConfigureCableCompType) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureCableCompType.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureCableCompType(vi, cableCompType);
#else
  return function_pointers_.ConfigureCableCompType(vi, cableCompType);
#endif
}

ViStatus NiDmmLibrary::ConfigureCurrentSource(ViSession vi, ViReal64 currentSource)
{
  if (!function_pointers_.ConfigureCurrentSource) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureCurrentSource.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureCurrentSource(vi, currentSource);
#else
  return function_pointers_.ConfigureCurrentSource(vi, currentSource);
#endif
}

ViStatus NiDmmLibrary::ConfigureFixedRefJunction(ViSession vi, ViReal64 fixedReferenceJunction)
{
  if (!function_pointers_.ConfigureFixedRefJunction) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureFixedRefJunction.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureFixedRefJunction(vi, fixedReferenceJunction);
#else
  return function_pointers_.ConfigureFixedRefJunction(vi, fixedReferenceJunction);
#endif
}

ViStatus NiDmmLibrary::ConfigureFrequencyVoltageRange(ViSession vi, ViReal64 voltageRange)
{
  if (!function_pointers_.ConfigureFrequencyVoltageRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureFrequencyVoltageRange.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureFrequencyVoltageRange(vi, voltageRange);
#else
  return function_pointers_.ConfigureFrequencyVoltageRange(vi, voltageRange);
#endif
}

ViStatus NiDmmLibrary::ConfigureMeasCompleteDest(ViSession vi, ViInt32 measCompleteDestination)
{
  if (!function_pointers_.ConfigureMeasCompleteDest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureMeasCompleteDest.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureMeasCompleteDest(vi, measCompleteDestination);
#else
  return function_pointers_.ConfigureMeasCompleteDest(vi, measCompleteDestination);
#endif
}

ViStatus NiDmmLibrary::ConfigureMeasCompleteSlope(ViSession vi, ViInt32 measCompleteSlope)
{
  if (!function_pointers_.ConfigureMeasCompleteSlope) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureMeasCompleteSlope.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureMeasCompleteSlope(vi, measCompleteSlope);
#else
  return function_pointers_.ConfigureMeasCompleteSlope(vi, measCompleteSlope);
#endif
}

ViStatus NiDmmLibrary::ConfigureMeasurementAbsolute(ViSession vi, ViInt32 measurementFunction, ViReal64 range, ViReal64 resolutionAbsolute)
{
  if (!function_pointers_.ConfigureMeasurementAbsolute) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureMeasurementAbsolute.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureMeasurementAbsolute(vi, measurementFunction, range, resolutionAbsolute);
#else
  return function_pointers_.ConfigureMeasurementAbsolute(vi, measurementFunction, range, resolutionAbsolute);
#endif
}

ViStatus NiDmmLibrary::ConfigureMeasurementDigits(ViSession vi, ViInt32 measurementFunction, ViReal64 range, ViReal64 resolutionDigits)
{
  if (!function_pointers_.ConfigureMeasurementDigits) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureMeasurementDigits.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureMeasurementDigits(vi, measurementFunction, range, resolutionDigits);
#else
  return function_pointers_.ConfigureMeasurementDigits(vi, measurementFunction, range, resolutionDigits);
#endif
}

ViStatus NiDmmLibrary::ConfigureMultiPoint(ViSession vi, ViInt32 triggerCount, ViInt32 sampleCount, ViInt32 sampleTrigger, ViReal64 sampleInterval)
{
  if (!function_pointers_.ConfigureMultiPoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureMultiPoint.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureMultiPoint(vi, triggerCount, sampleCount, sampleTrigger, sampleInterval);
#else
  return function_pointers_.ConfigureMultiPoint(vi, triggerCount, sampleCount, sampleTrigger, sampleInterval);
#endif
}

ViStatus NiDmmLibrary::ConfigureOffsetCompOhms(ViSession vi, ViInt32 offsetCompOhms)
{
  if (!function_pointers_.ConfigureOffsetCompOhms) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureOffsetCompOhms.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureOffsetCompOhms(vi, offsetCompOhms);
#else
  return function_pointers_.ConfigureOffsetCompOhms(vi, offsetCompOhms);
#endif
}

ViStatus NiDmmLibrary::ConfigureOpenCableCompValues(ViSession vi, ViReal64 conductance, ViReal64 susceptance)
{
  if (!function_pointers_.ConfigureOpenCableCompValues) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureOpenCableCompValues.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureOpenCableCompValues(vi, conductance, susceptance);
#else
  return function_pointers_.ConfigureOpenCableCompValues(vi, conductance, susceptance);
#endif
}

ViStatus NiDmmLibrary::ConfigurePowerLineFrequency(ViSession vi, ViReal64 powerLineFrequencyHz)
{
  if (!function_pointers_.ConfigurePowerLineFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigurePowerLineFrequency.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigurePowerLineFrequency(vi, powerLineFrequencyHz);
#else
  return function_pointers_.ConfigurePowerLineFrequency(vi, powerLineFrequencyHz);
#endif
}

ViStatus NiDmmLibrary::ConfigureRTDCustom(ViSession vi, ViReal64 rtdA, ViReal64 rtdB, ViReal64 rtdC)
{
  if (!function_pointers_.ConfigureRTDCustom) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureRTDCustom.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureRTDCustom(vi, rtdA, rtdB, rtdC);
#else
  return function_pointers_.ConfigureRTDCustom(vi, rtdA, rtdB, rtdC);
#endif
}

ViStatus NiDmmLibrary::ConfigureRTDType(ViSession vi, ViInt32 rtdType, ViReal64 rtdResistance)
{
  if (!function_pointers_.ConfigureRTDType) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureRTDType.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureRTDType(vi, rtdType, rtdResistance);
#else
  return function_pointers_.ConfigureRTDType(vi, rtdType, rtdResistance);
#endif
}

ViStatus NiDmmLibrary::ConfigureSampleTriggerSlope(ViSession vi, ViInt32 sampleTriggerSlope)
{
  if (!function_pointers_.ConfigureSampleTriggerSlope) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureSampleTriggerSlope.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureSampleTriggerSlope(vi, sampleTriggerSlope);
#else
  return function_pointers_.ConfigureSampleTriggerSlope(vi, sampleTriggerSlope);
#endif
}

ViStatus NiDmmLibrary::ConfigureShortCableCompValues(ViSession vi, ViReal64 resistance, ViReal64 reactance)
{
  if (!function_pointers_.ConfigureShortCableCompValues) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureShortCableCompValues.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureShortCableCompValues(vi, resistance, reactance);
#else
  return function_pointers_.ConfigureShortCableCompValues(vi, resistance, reactance);
#endif
}

ViStatus NiDmmLibrary::ConfigureThermistorCustom(ViSession vi, ViReal64 thermistorA, ViReal64 thermistorB, ViReal64 thermistorC)
{
  if (!function_pointers_.ConfigureThermistorCustom) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureThermistorCustom.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureThermistorCustom(vi, thermistorA, thermistorB, thermistorC);
#else
  return function_pointers_.ConfigureThermistorCustom(vi, thermistorA, thermistorB, thermistorC);
#endif
}

ViStatus NiDmmLibrary::ConfigureThermistorType(ViSession vi, ViInt32 thermistorType)
{
  if (!function_pointers_.ConfigureThermistorType) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureThermistorType.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureThermistorType(vi, thermistorType);
#else
  return function_pointers_.ConfigureThermistorType(vi, thermistorType);
#endif
}

ViStatus NiDmmLibrary::ConfigureThermocouple(ViSession vi, ViInt32 thermocoupleType, ViInt32 referenceJunctionType)
{
  if (!function_pointers_.ConfigureThermocouple) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureThermocouple.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureThermocouple(vi, thermocoupleType, referenceJunctionType);
#else
  return function_pointers_.ConfigureThermocouple(vi, thermocoupleType, referenceJunctionType);
#endif
}

ViStatus NiDmmLibrary::ConfigureTransducerType(ViSession vi, ViInt32 transducerType)
{
  if (!function_pointers_.ConfigureTransducerType) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureTransducerType.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureTransducerType(vi, transducerType);
#else
  return function_pointers_.ConfigureTransducerType(vi, transducerType);
#endif
}

ViStatus NiDmmLibrary::ConfigureTrigger(ViSession vi, ViInt32 triggerSource, ViReal64 triggerDelay)
{
  if (!function_pointers_.ConfigureTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureTrigger.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureTrigger(vi, triggerSource, triggerDelay);
#else
  return function_pointers_.ConfigureTrigger(vi, triggerSource, triggerDelay);
#endif
}

ViStatus NiDmmLibrary::ConfigureTriggerSlope(ViSession vi, ViInt32 triggerSlope)
{
  if (!function_pointers_.ConfigureTriggerSlope) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureTriggerSlope.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureTriggerSlope(vi, triggerSlope);
#else
  return function_pointers_.ConfigureTriggerSlope(vi, triggerSlope);
#endif
}

ViStatus NiDmmLibrary::ConfigureWaveformAcquisition(ViSession vi, ViInt32 measurementFunction, ViReal64 range, ViReal64 rate, ViInt32 waveformPoints)
{
  if (!function_pointers_.ConfigureWaveformAcquisition) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureWaveformAcquisition.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureWaveformAcquisition(vi, measurementFunction, range, rate, waveformPoints);
#else
  return function_pointers_.ConfigureWaveformAcquisition(vi, measurementFunction, range, rate, waveformPoints);
#endif
}

ViStatus NiDmmLibrary::ConfigureWaveformCoupling(ViSession vi, ViInt32 waveformCoupling)
{
  if (!function_pointers_.ConfigureWaveformCoupling) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ConfigureWaveformCoupling.");
  }
#if defined(_MSC_VER)
  return niDMM_ConfigureWaveformCoupling(vi, waveformCoupling);
#else
  return function_pointers_.ConfigureWaveformCoupling(vi, waveformCoupling);
#endif
}

ViStatus NiDmmLibrary::Control(ViSession vi, ViInt32 controlAction)
{
  if (!function_pointers_.Control) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_Control.");
  }
#if defined(_MSC_VER)
  return niDMM_Control(vi, controlAction);
#else
  return function_pointers_.Control(vi, controlAction);
#endif
}

ViStatus NiDmmLibrary::Control4022(ViRsrc resourceName, ViInt32 configuration)
{
  if (!function_pointers_.Control4022) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_4022Control.");
  }
#if defined(_MSC_VER)
  return niDMM_4022Control(resourceName, configuration);
#else
  return function_pointers_.Control4022(resourceName, configuration);
#endif
}

ViStatus NiDmmLibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_Disable.");
  }
#if defined(_MSC_VER)
  return niDMM_Disable(vi);
#else
  return function_pointers_.Disable(vi);
#endif
}

ViStatus NiDmmLibrary::ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViInt8 configuration[])
{
  if (!function_pointers_.ExportAttributeConfigurationBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ExportAttributeConfigurationBuffer.");
  }
#if defined(_MSC_VER)
  return niDMM_ExportAttributeConfigurationBuffer(vi, size, configuration);
#else
  return function_pointers_.ExportAttributeConfigurationBuffer(vi, size, configuration);
#endif
}

ViStatus NiDmmLibrary::ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.ExportAttributeConfigurationFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ExportAttributeConfigurationFile.");
  }
#if defined(_MSC_VER)
  return niDMM_ExportAttributeConfigurationFile(vi, filePath);
#else
  return function_pointers_.ExportAttributeConfigurationFile(vi, filePath);
#endif
}

ViStatus NiDmmLibrary::Fetch(ViSession vi, ViInt32 maximumTime, ViReal64* reading)
{
  if (!function_pointers_.Fetch) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_Fetch.");
  }
#if defined(_MSC_VER)
  return niDMM_Fetch(vi, maximumTime, reading);
#else
  return function_pointers_.Fetch(vi, maximumTime, reading);
#endif
}

ViStatus NiDmmLibrary::FetchMultiPoint(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 readingArray[], ViInt32* actualNumberOfPoints)
{
  if (!function_pointers_.FetchMultiPoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_FetchMultiPoint.");
  }
#if defined(_MSC_VER)
  return niDMM_FetchMultiPoint(vi, maximumTime, arraySize, readingArray, actualNumberOfPoints);
#else
  return function_pointers_.FetchMultiPoint(vi, maximumTime, arraySize, readingArray, actualNumberOfPoints);
#endif
}

ViStatus NiDmmLibrary::FetchWaveform(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 waveformArray[], ViInt32* actualNumberOfPoints)
{
  if (!function_pointers_.FetchWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_FetchWaveform.");
  }
#if defined(_MSC_VER)
  return niDMM_FetchWaveform(vi, maximumTime, arraySize, waveformArray, actualNumberOfPoints);
#else
  return function_pointers_.FetchWaveform(vi, maximumTime, arraySize, waveformArray, actualNumberOfPoints);
#endif
}

ViStatus NiDmmLibrary::GetApertureTimeInfo(ViSession vi, ViReal64* apertureTime, ViInt32* apertureTimeUnits)
{
  if (!function_pointers_.GetApertureTimeInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetApertureTimeInfo.");
  }
#if defined(_MSC_VER)
  return niDMM_GetApertureTimeInfo(vi, apertureTime, apertureTimeUnits);
#else
  return function_pointers_.GetApertureTimeInfo(vi, apertureTime, apertureTimeUnits);
#endif
}

ViStatus NiDmmLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niDMM_GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niDMM_GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niDMM_GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niDMM_GetAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niDMM_GetAttributeViString(vi, channelName, attributeId, bufferSize, attributeValue);
#else
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, bufferSize, attributeValue);
#endif
}

ViStatus NiDmmLibrary::GetAutoRangeValue(ViSession vi, ViReal64* actualRange)
{
  if (!function_pointers_.GetAutoRangeValue) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetAutoRangeValue.");
  }
#if defined(_MSC_VER)
  return niDMM_GetAutoRangeValue(vi, actualRange);
#else
  return function_pointers_.GetAutoRangeValue(vi, actualRange);
#endif
}

ViStatus NiDmmLibrary::GetCalDateAndTime(ViSession vi, ViInt32 calType, ViInt32* month, ViInt32* day, ViInt32* year, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetCalDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetCalDateAndTime.");
  }
#if defined(_MSC_VER)
  return niDMM_GetCalDateAndTime(vi, calType, month, day, year, hour, minute);
#else
  return function_pointers_.GetCalDateAndTime(vi, calType, month, day, year, hour, minute);
#endif
}

ViStatus NiDmmLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelString[])
{
  if (!function_pointers_.GetChannelName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetChannelName.");
  }
#if defined(_MSC_VER)
  return niDMM_GetChannelName(vi, index, bufferSize, channelString);
#else
  return function_pointers_.GetChannelName(vi, index, bufferSize, channelString);
#endif
}

ViStatus NiDmmLibrary::GetDevTemp(ViSession vi, ViString options, ViReal64* temperature)
{
  if (!function_pointers_.GetDevTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetDevTemp.");
  }
#if defined(_MSC_VER)
  return niDMM_GetDevTemp(vi, options, temperature);
#else
  return function_pointers_.GetDevTemp(vi, options, temperature);
#endif
}

ViStatus NiDmmLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 bufferSize, ViChar description[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetError.");
  }
#if defined(_MSC_VER)
  return niDMM_GetError(vi, errorCode, bufferSize, description);
#else
  return function_pointers_.GetError(vi, errorCode, bufferSize, description);
#endif
}

ViStatus NiDmmLibrary::GetErrorMessage(ViSession vi, ViStatus errorCode, ViInt32 bufferSize, ViChar errorMessage[])
{
  if (!function_pointers_.GetErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetErrorMessage.");
  }
#if defined(_MSC_VER)
  return niDMM_GetErrorMessage(vi, errorCode, bufferSize, errorMessage);
#else
  return function_pointers_.GetErrorMessage(vi, errorCode, bufferSize, errorMessage);
#endif
}

ViStatus NiDmmLibrary::GetExtCalRecommendedInterval(ViSession vi, ViInt32* months)
{
  if (!function_pointers_.GetExtCalRecommendedInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetExtCalRecommendedInterval.");
  }
#if defined(_MSC_VER)
  return niDMM_GetExtCalRecommendedInterval(vi, months);
#else
  return function_pointers_.GetExtCalRecommendedInterval(vi, months);
#endif
}

ViStatus NiDmmLibrary::GetLastCalTemp(ViSession vi, ViInt32 calType, ViReal64* temperature)
{
  if (!function_pointers_.GetLastCalTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetLastCalTemp.");
  }
#if defined(_MSC_VER)
  return niDMM_GetLastCalTemp(vi, calType, temperature);
#else
  return function_pointers_.GetLastCalTemp(vi, calType, temperature);
#endif
}

ViStatus NiDmmLibrary::GetMeasurementPeriod(ViSession vi, ViReal64* period)
{
  if (!function_pointers_.GetMeasurementPeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetMeasurementPeriod.");
  }
#if defined(_MSC_VER)
  return niDMM_GetMeasurementPeriod(vi, period);
#else
  return function_pointers_.GetMeasurementPeriod(vi, period);
#endif
}

ViStatus NiDmmLibrary::GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[])
{
  if (!function_pointers_.GetNextCoercionRecord) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetNextCoercionRecord.");
  }
#if defined(_MSC_VER)
  return niDMM_GetNextCoercionRecord(vi, bufferSize, coercionRecord);
#else
  return function_pointers_.GetNextCoercionRecord(vi, bufferSize, coercionRecord);
#endif
}

ViStatus NiDmmLibrary::GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[])
{
  if (!function_pointers_.GetNextInterchangeWarning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetNextInterchangeWarning.");
  }
#if defined(_MSC_VER)
  return niDMM_GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
#else
  return function_pointers_.GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
#endif
}

ViStatus NiDmmLibrary::GetSelfCalSupported(ViSession vi, ViBoolean* selfCalSupported)
{
  if (!function_pointers_.GetSelfCalSupported) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetSelfCalSupported.");
  }
#if defined(_MSC_VER)
  return niDMM_GetSelfCalSupported(vi, selfCalSupported);
#else
  return function_pointers_.GetSelfCalSupported(vi, selfCalSupported);
#endif
}

ViStatus NiDmmLibrary::ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViInt8 configuration[])
{
  if (!function_pointers_.ImportAttributeConfigurationBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ImportAttributeConfigurationBuffer.");
  }
#if defined(_MSC_VER)
  return niDMM_ImportAttributeConfigurationBuffer(vi, size, configuration);
#else
  return function_pointers_.ImportAttributeConfigurationBuffer(vi, size, configuration);
#endif
}

ViStatus NiDmmLibrary::ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.ImportAttributeConfigurationFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ImportAttributeConfigurationFile.");
  }
#if defined(_MSC_VER)
  return niDMM_ImportAttributeConfigurationFile(vi, filePath);
#else
  return function_pointers_.ImportAttributeConfigurationFile(vi, filePath);
#endif
}

ViStatus NiDmmLibrary::Init(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.Init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_init.");
  }
#if defined(_MSC_VER)
  return niDMM_init(resourceName, idQuery, resetDevice, vi);
#else
  return function_pointers_.Init(resourceName, idQuery, resetDevice, vi);
#endif
}

ViStatus NiDmmLibrary::InitWithOptions(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViString optionString, ViSession* vi)
{
  if (!function_pointers_.InitWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_InitWithOptions.");
  }
#if defined(_MSC_VER)
  return niDMM_InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
#else
  return function_pointers_.InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
#endif
}

ViStatus NiDmmLibrary::Initiate(ViSession vi)
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_Initiate.");
  }
#if defined(_MSC_VER)
  return niDMM_Initiate(vi);
#else
  return function_pointers_.Initiate(vi);
#endif
}

ViStatus NiDmmLibrary::InvalidateAllAttributes(ViSession vi)
{
  if (!function_pointers_.InvalidateAllAttributes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_InvalidateAllAttributes.");
  }
#if defined(_MSC_VER)
  return niDMM_InvalidateAllAttributes(vi);
#else
  return function_pointers_.InvalidateAllAttributes(vi);
#endif
}

ViStatus NiDmmLibrary::IsOverRange(ViSession vi, ViReal64 measurementValue, ViBoolean* isOverRange)
{
  if (!function_pointers_.IsOverRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_IsOverRange.");
  }
#if defined(_MSC_VER)
  return niDMM_IsOverRange(vi, measurementValue, isOverRange);
#else
  return function_pointers_.IsOverRange(vi, measurementValue, isOverRange);
#endif
}

ViStatus NiDmmLibrary::IsUnderRange(ViSession vi, ViReal64 measurementValue, ViBoolean* isUnderRange)
{
  if (!function_pointers_.IsUnderRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_IsUnderRange.");
  }
#if defined(_MSC_VER)
  return niDMM_IsUnderRange(vi, measurementValue, isUnderRange);
#else
  return function_pointers_.IsUnderRange(vi, measurementValue, isUnderRange);
#endif
}

ViStatus NiDmmLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_LockSession.");
  }
  return function_pointers_.LockSession(vi, callerHasLock);
}

ViStatus NiDmmLibrary::PerformOpenCableComp(ViSession vi, ViReal64* conductance, ViReal64* susceptance)
{
  if (!function_pointers_.PerformOpenCableComp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_PerformOpenCableComp.");
  }
#if defined(_MSC_VER)
  return niDMM_PerformOpenCableComp(vi, conductance, susceptance);
#else
  return function_pointers_.PerformOpenCableComp(vi, conductance, susceptance);
#endif
}

ViStatus NiDmmLibrary::PerformShortCableComp(ViSession vi, ViReal64* resistance, ViReal64* reactance)
{
  if (!function_pointers_.PerformShortCableComp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_PerformShortCableComp.");
  }
#if defined(_MSC_VER)
  return niDMM_PerformShortCableComp(vi, resistance, reactance);
#else
  return function_pointers_.PerformShortCableComp(vi, resistance, reactance);
#endif
}

ViStatus NiDmmLibrary::Read(ViSession vi, ViInt32 maximumTime, ViReal64* reading)
{
  if (!function_pointers_.Read) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_Read.");
  }
#if defined(_MSC_VER)
  return niDMM_Read(vi, maximumTime, reading);
#else
  return function_pointers_.Read(vi, maximumTime, reading);
#endif
}

ViStatus NiDmmLibrary::ReadMultiPoint(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 readingArray[], ViInt32* actualNumberOfPoints)
{
  if (!function_pointers_.ReadMultiPoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ReadMultiPoint.");
  }
#if defined(_MSC_VER)
  return niDMM_ReadMultiPoint(vi, maximumTime, arraySize, readingArray, actualNumberOfPoints);
#else
  return function_pointers_.ReadMultiPoint(vi, maximumTime, arraySize, readingArray, actualNumberOfPoints);
#endif
}

ViStatus NiDmmLibrary::ReadStatus(ViSession vi, ViInt32* acquisitionBacklog, ViInt16* acquisitionStatus)
{
  if (!function_pointers_.ReadStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ReadStatus.");
  }
#if defined(_MSC_VER)
  return niDMM_ReadStatus(vi, acquisitionBacklog, acquisitionStatus);
#else
  return function_pointers_.ReadStatus(vi, acquisitionBacklog, acquisitionStatus);
#endif
}

ViStatus NiDmmLibrary::ReadWaveform(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 waveformArray[], ViInt32* actualNumberOfPoints)
{
  if (!function_pointers_.ReadWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ReadWaveform.");
  }
#if defined(_MSC_VER)
  return niDMM_ReadWaveform(vi, maximumTime, arraySize, waveformArray, actualNumberOfPoints);
#else
  return function_pointers_.ReadWaveform(vi, maximumTime, arraySize, waveformArray, actualNumberOfPoints);
#endif
}

ViStatus NiDmmLibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_reset.");
  }
#if defined(_MSC_VER)
  return niDMM_reset(vi);
#else
  return function_pointers_.Reset(vi);
#endif
}

ViStatus NiDmmLibrary::ResetInterchangeCheck(ViSession vi)
{
  if (!function_pointers_.ResetInterchangeCheck) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ResetInterchangeCheck.");
  }
#if defined(_MSC_VER)
  return niDMM_ResetInterchangeCheck(vi);
#else
  return function_pointers_.ResetInterchangeCheck(vi);
#endif
}

ViStatus NiDmmLibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_ResetWithDefaults.");
  }
#if defined(_MSC_VER)
  return niDMM_ResetWithDefaults(vi);
#else
  return function_pointers_.ResetWithDefaults(vi);
#endif
}

ViStatus NiDmmLibrary::RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_revision_query.");
  }
#if defined(_MSC_VER)
  return niDMM_revision_query(vi, instrumentDriverRevision, firmwareRevision);
#else
  return function_pointers_.RevisionQuery(vi, instrumentDriverRevision, firmwareRevision);
#endif
}

ViStatus NiDmmLibrary::SelfCal(ViSession vi)
{
  if (!function_pointers_.SelfCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SelfCal.");
  }
#if defined(_MSC_VER)
  return niDMM_SelfCal(vi);
#else
  return function_pointers_.SelfCal(vi);
#endif
}

ViStatus NiDmmLibrary::SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_self_test.");
  }
#if defined(_MSC_VER)
  return niDMM_self_test(vi, selfTestResult, selfTestMessage);
#else
  return function_pointers_.SelfTest(vi, selfTestResult, selfTestMessage);
#endif
}

ViStatus NiDmmLibrary::SendSoftwareTrigger(ViSession vi)
{
  if (!function_pointers_.SendSoftwareTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SendSoftwareTrigger.");
  }
#if defined(_MSC_VER)
  return niDMM_SendSoftwareTrigger(vi);
#else
  return function_pointers_.SendSoftwareTrigger(vi);
#endif
}

ViStatus NiDmmLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niDMM_SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niDMM_SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niDMM_SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niDMM_SetAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niDMM_SetAttributeViString(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDmmLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_UnlockSession.");
  }
  return function_pointers_.UnlockSession(vi, callerHasLock);
}

}  // namespace nidmm_grpc
