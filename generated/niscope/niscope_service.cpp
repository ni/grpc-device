
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SCOPE Metadata
//---------------------------------------------------------------------
#include "niscope_service.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <atomic>

namespace ni {
namespace scope {
namespace grpc {

  namespace internal = ni::hardware::grpc::internal;

  NiScopeService::NiScopeService(NiScopeLibraryWrapper* library_wrapper, internal::SessionRepository* session_repository)
      : library_wrapper_(library_wrapper), session_repository_(session_repository)
  {
  }

  NiScopeService::~NiScopeService()
  {
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Abort(::grpc::ServerContext* context, const AbortRequest* request, AbortResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_Abort");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->Abort(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::AcquisitionStatus(::grpc::ServerContext* context, const AcquisitionStatusRequest* request, AcquisitionStatusResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_AcquisitionStatus");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViInt32 acquisition_status {};
    auto status = library_wrapper_->AcquisitionStatus(vi, &acquisition_status);
    response->set_status(status);
    if (status == 0) {
      response->set_acquisition_status(static_cast<ni::scope::grpc::AcquisitionStatus>(acquisition_status));
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::AddWaveformProcessing(::grpc::ServerContext* context, const AddWaveformProcessingRequest* request, AddWaveformProcessingResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_AddWaveformProcessing");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    auto meas_function = (ViInt32)request->meas_function();
    auto status = library_wrapper_->AddWaveformProcessing(vi, channel_list, meas_function);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::AutoSetup(::grpc::ServerContext* context, const AutoSetupRequest* request, AutoSetupResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_AutoSetup");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->AutoSetup(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::CalSelfCalibrate(::grpc::ServerContext* context, const CalSelfCalibrateRequest* request, CalSelfCalibrateResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_CalSelfCalibrate");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    auto option = (ViInt32)request->option();
    auto status = library_wrapper_->CalSelfCalibrate(vi, channel_list, option);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ClearWaveformMeasurementStats(::grpc::ServerContext* context, const ClearWaveformMeasurementStatsRequest* request, ClearWaveformMeasurementStatsResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ClearWaveformMeasurementStats");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    auto clearable_measurement_function = (ViInt32)request->clearable_measurement_function();
    auto status = library_wrapper_->ClearWaveformMeasurementStats(vi, channel_list, clearable_measurement_function);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ClearWaveformProcessing(::grpc::ServerContext* context, const ClearWaveformProcessingRequest* request, ClearWaveformProcessingResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ClearWaveformProcessing");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    auto status = library_wrapper_->ClearWaveformProcessing(vi, channel_list);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Commit(::grpc::ServerContext* context, const CommitRequest* request, CommitResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_Commit");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->Commit(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureChanCharacteristics(::grpc::ServerContext* context, const ConfigureChanCharacteristicsRequest* request, ConfigureChanCharacteristicsResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureChanCharacteristics");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViReal64 input_impedance = request->input_impedance();
    ViReal64 max_input_frequency = request->max_input_frequency();
    auto status = library_wrapper_->ConfigureChanCharacteristics(vi, channel_list, input_impedance, max_input_frequency);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureEqualizationFilterCoefficients(::grpc::ServerContext* context, const ConfigureEqualizationFilterCoefficientsRequest* request, ConfigureEqualizationFilterCoefficientsResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureHorizontalTiming(::grpc::ServerContext* context, const ConfigureHorizontalTimingRequest* request, ConfigureHorizontalTimingResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureHorizontalTiming");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViReal64 min_sample_rate = request->min_sample_rate();
    ViInt32 min_num_pts = request->min_num_pts();
    ViReal64 ref_position = request->ref_position();
    ViInt32 num_records = request->num_records();
    ViBoolean enforce_realtime = request->enforce_realtime();
    auto status = library_wrapper_->ConfigureHorizontalTiming(vi, min_sample_rate, min_num_pts, ref_position, num_records, enforce_realtime);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureRefLevels(::grpc::ServerContext* context, const ConfigureRefLevelsRequest* request, ConfigureRefLevelsResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureRefLevels");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViReal64 low = request->low();
    ViReal64 mid = request->mid();
    ViReal64 high = request->high();
    auto status = library_wrapper_->ConfigureRefLevels(vi, low, mid, high);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerDigital(::grpc::ServerContext* context, const ConfigureTriggerDigitalRequest* request, ConfigureTriggerDigitalResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerDigital");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString trigger_source = request->trigger_source().c_str();
    auto slope = (ViInt32)request->slope();
    ViReal64 holdoff = request->holdoff();
    ViReal64 delay = request->delay();
    auto status = library_wrapper_->ConfigureTriggerDigital(vi, trigger_source, slope, holdoff, delay);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerEdge(::grpc::ServerContext* context, const ConfigureTriggerEdgeRequest* request, ConfigureTriggerEdgeResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerEdge");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString trigger_source = request->trigger_source().c_str();
    ViReal64 level = request->level();
    auto slope = (ViInt32)request->slope();
    auto trigger_coupling = (ViInt32)request->trigger_coupling();
    ViReal64 holdoff = request->holdoff();
    ViReal64 delay = request->delay();
    auto status = library_wrapper_->ConfigureTriggerEdge(vi, trigger_source, level, slope, trigger_coupling, holdoff, delay);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerHysteresis(::grpc::ServerContext* context, const ConfigureTriggerHysteresisRequest* request, ConfigureTriggerHysteresisResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerHysteresis");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString trigger_source = request->trigger_source().c_str();
    ViReal64 level = request->level();
    ViReal64 hysteresis = request->hysteresis();
    auto slope = (ViInt32)request->slope();
    auto trigger_coupling = (ViInt32)request->trigger_coupling();
    ViReal64 holdoff = request->holdoff();
    ViReal64 delay = request->delay();
    auto status = library_wrapper_->ConfigureTriggerHysteresis(vi, trigger_source, level, hysteresis, slope, trigger_coupling, holdoff, delay);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerImmediate(::grpc::ServerContext* context, const ConfigureTriggerImmediateRequest* request, ConfigureTriggerImmediateResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerImmediate");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->ConfigureTriggerImmediate(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerSoftware(::grpc::ServerContext* context, const ConfigureTriggerSoftwareRequest* request, ConfigureTriggerSoftwareResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerSoftware");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViReal64 holdoff = request->holdoff();
    ViReal64 delay = request->delay();
    auto status = library_wrapper_->ConfigureTriggerSoftware(vi, holdoff, delay);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerVideo(::grpc::ServerContext* context, const ConfigureTriggerVideoRequest* request, ConfigureTriggerVideoResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerVideo");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString trigger_source = request->trigger_source().c_str();
    ViBoolean enable_dc_restore = request->enable_dc_restore();
    auto signal_format = (ViInt32)request->signal_format();
    auto event_parameter = (ViInt32)request->event();
    ViInt32 line_number = request->line_number();
    auto polarity = (ViInt32)request->polarity();
    auto trigger_coupling = (ViInt32)request->trigger_coupling();
    ViReal64 holdoff = request->holdoff();
    ViReal64 delay = request->delay();
    auto status = library_wrapper_->ConfigureTriggerVideo(vi, trigger_source, enable_dc_restore, signal_format, event_parameter, line_number, polarity, trigger_coupling, holdoff, delay);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureTriggerWindow(::grpc::ServerContext* context, const ConfigureTriggerWindowRequest* request, ConfigureTriggerWindowResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureTriggerWindow");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString trigger_source = request->trigger_source().c_str();
    ViReal64 low_level = request->low_level();
    ViReal64 high_level = request->high_level();
    auto window_mode = (ViInt32)request->window_mode();
    auto trigger_coupling = (ViInt32)request->trigger_coupling();
    ViReal64 holdoff = request->holdoff();
    ViReal64 delay = request->delay();
    auto status = library_wrapper_->ConfigureTriggerWindow(vi, trigger_source, low_level, high_level, window_mode, trigger_coupling, holdoff, delay);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ConfigureVertical(::grpc::ServerContext* context, const ConfigureVerticalRequest* request, ConfigureVerticalResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ConfigureVertical");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViReal64 range = request->range();
    ViReal64 offset = request->offset();
    auto coupling = (ViInt32)request->coupling();
    ViReal64 probe_attenuation = request->probe_attenuation();
    ViBoolean enabled = request->enabled();
    auto status = library_wrapper_->ConfigureVertical(vi, channel_list, range, offset, coupling, probe_attenuation, enabled);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Disable(::grpc::ServerContext* context, const DisableRequest* request, DisableResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_Disable");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->Disable(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ExportAttributeConfigurationBuffer(::grpc::ServerContext* context, const ExportAttributeConfigurationBufferRequest* request, ExportAttributeConfigurationBufferResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ExportAttributeConfigurationFile(::grpc::ServerContext* context, const ExportAttributeConfigurationFileRequest* request, ExportAttributeConfigurationFileResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ExportAttributeConfigurationFile");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString file_path = request->file_path().c_str();
    auto status = library_wrapper_->ExportAttributeConfigurationFile(vi, file_path);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Fetch(::grpc::ServerContext* context, const FetchRequest* request, FetchResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::FetchArrayMeasurement(::grpc::ServerContext* context, const FetchArrayMeasurementRequest* request, FetchArrayMeasurementResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::FetchBinary16(::grpc::ServerContext* context, const FetchBinary16Request* request, FetchBinary16Response* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::FetchBinary32(::grpc::ServerContext* context, const FetchBinary32Request* request, FetchBinary32Response* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::FetchBinary8(::grpc::ServerContext* context, const FetchBinary8Request* request, FetchBinary8Response* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::FetchMeasurementStats(::grpc::ServerContext* context, const FetchMeasurementStatsRequest* request, FetchMeasurementStatsResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::GetAttributeViBoolean(::grpc::ServerContext* context, const GetAttributeViBooleanRequest* request, GetAttributeViBooleanResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_GetAttributeViBoolean");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViBoolean value {};
    auto status = library_wrapper_->GetAttributeViBoolean(vi, channel_list, attribute_id, &value);
    response->set_status(status);
    if (status == 0) {
      response->set_value(value);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::GetAttributeViInt32(::grpc::ServerContext* context, const GetAttributeViInt32Request* request, GetAttributeViInt32Response* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_GetAttributeViInt32");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViInt32 value {};
    auto status = library_wrapper_->GetAttributeViInt32(vi, channel_list, attribute_id, &value);
    response->set_status(status);
    if (status == 0) {
      response->set_value(value);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::GetAttributeViInt64(::grpc::ServerContext* context, const GetAttributeViInt64Request* request, GetAttributeViInt64Response* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_GetAttributeViInt64");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViInt64 value {};
    auto status = library_wrapper_->GetAttributeViInt64(vi, channel_list, attribute_id, &value);
    response->set_status(status);
    if (status == 0) {
      response->set_value(value);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::GetAttributeViReal64(::grpc::ServerContext* context, const GetAttributeViReal64Request* request, GetAttributeViReal64Response* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_GetAttributeViReal64");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViReal64 value {};
    auto status = library_wrapper_->GetAttributeViReal64(vi, channel_list, attribute_id, &value);
    response->set_status(status);
    if (status == 0) {
      response->set_value(value);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::GetAttributeViString(::grpc::ServerContext* context, const GetAttributeViStringRequest* request, GetAttributeViStringResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::GetEqualizationFilterCoefficients(::grpc::ServerContext* context, const GetEqualizationFilterCoefficientsRequest* request, GetEqualizationFilterCoefficientsResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ImportAttributeConfigurationBuffer(::grpc::ServerContext* context, const ImportAttributeConfigurationBufferRequest* request, ImportAttributeConfigurationBufferResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ImportAttributeConfigurationFile(::grpc::ServerContext* context, const ImportAttributeConfigurationFileRequest* request, ImportAttributeConfigurationFileResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ImportAttributeConfigurationFile");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString file_path = request->file_path().c_str();
    auto status = library_wrapper_->ImportAttributeConfigurationFile(vi, file_path);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::InitWithOptions(::grpc::ServerContext* context, const InitWithOptionsRequest* request, InitWithOptionsResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_InitWithOptions");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViRsrc resource_name = (ViRsrc)request->resource_name().c_str();
    ViBoolean id_query = request->id_query();
    ViBoolean reset_device = request->reset_device();
    ViConstString option_string = request->option_string().c_str();
    ViSession vi {};
    auto status = library_wrapper_->InitWithOptions(resource_name, id_query, reset_device, option_string, &vi);
    response->set_status(status);
    if (status == 0) {
      response->set_vi(vi);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::InitiateAcquisition(::grpc::ServerContext* context, const InitiateAcquisitionRequest* request, InitiateAcquisitionResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_InitiateAcquisition");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->InitiateAcquisition(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::LockSession(::grpc::ServerContext* context, const LockSessionRequest* request, LockSessionResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_LockSession");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViBoolean caller_has_lock {};
    auto status = library_wrapper_->LockSession(vi, &caller_has_lock);
    response->set_status(status);
    if (status == 0) {
      response->set_caller_has_lock(caller_has_lock);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ProbeCompensationSignalStart(::grpc::ServerContext* context, const ProbeCompensationSignalStartRequest* request, ProbeCompensationSignalStartResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ProbeCompensationSignalStart");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->ProbeCompensationSignalStart(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ProbeCompensationSignalStop(::grpc::ServerContext* context, const ProbeCompensationSignalStopRequest* request, ProbeCompensationSignalStopResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ProbeCompensationSignalStop");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->ProbeCompensationSignalStop(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Read(::grpc::ServerContext* context, const ReadRequest* request, ReadResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ResetDevice(::grpc::ServerContext* context, const ResetDeviceRequest* request, ResetDeviceResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ResetDevice");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->ResetDevice(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::ResetWithDefaults(::grpc::ServerContext* context, const ResetWithDefaultsRequest* request, ResetWithDefaultsResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_ResetWithDefaults");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->ResetWithDefaults(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SendSoftwareTriggerEdge(::grpc::ServerContext* context, const SendSoftwareTriggerEdgeRequest* request, SendSoftwareTriggerEdgeResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_SendSoftwareTriggerEdge");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto which_trigger = (ViInt32)request->which_trigger();
    auto status = library_wrapper_->SendSoftwareTriggerEdge(vi, which_trigger);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SetAttributeViBoolean(::grpc::ServerContext* context, const SetAttributeViBooleanRequest* request, SetAttributeViBooleanResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_SetAttributeViBoolean");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViBoolean value = request->value();
    auto status = library_wrapper_->SetAttributeViBoolean(vi, channel_list, attribute_id, value);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SetAttributeViInt32(::grpc::ServerContext* context, const SetAttributeViInt32Request* request, SetAttributeViInt32Response* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_SetAttributeViInt32");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViInt32 value = request->value();
    auto status = library_wrapper_->SetAttributeViInt32(vi, channel_list, attribute_id, value);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SetAttributeViInt64(::grpc::ServerContext* context, const SetAttributeViInt64Request* request, SetAttributeViInt64Response* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_SetAttributeViInt64");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViInt64 value = request->value();
    auto status = library_wrapper_->SetAttributeViInt64(vi, channel_list, attribute_id, value);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SetAttributeViReal64(::grpc::ServerContext* context, const SetAttributeViReal64Request* request, SetAttributeViReal64Response* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_SetAttributeViReal64");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViReal64 value = request->value();
    auto status = library_wrapper_->SetAttributeViReal64(vi, channel_list, attribute_id, value);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SetAttributeViString(::grpc::ServerContext* context, const SetAttributeViStringRequest* request, SetAttributeViStringResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_SetAttributeViString");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel_list = request->channel_list().c_str();
    ViAttr attribute_id = request->attribute_id();
    ViConstString value = request->value().c_str();
    auto status = library_wrapper_->SetAttributeViString(vi, channel_list, attribute_id, value);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::UnlockSession(::grpc::ServerContext* context, const UnlockSessionRequest* request, UnlockSessionResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_UnlockSession");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViBoolean caller_has_lock {};
    auto status = library_wrapper_->UnlockSession(vi, &caller_has_lock);
    response->set_status(status);
    if (status == 0) {
      response->set_caller_has_lock(caller_has_lock);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_close");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->close(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::Reset(::grpc::ServerContext* context, const ResetRequest* request, ResetResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niScope_reset");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->reset(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiScopeService::SelfTest(::grpc::ServerContext* context, const SelfTestRequest* request, SelfTestResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

} // namespace grpc
} // namespace scope
} // namespace ni
