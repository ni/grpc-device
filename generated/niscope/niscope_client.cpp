
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-SCOPE.
//---------------------------------------------------------------------
#include "niscope_client.h"

#include <grpcpp/grpcpp.h>

#include <niscope.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace niscope_grpc::experimental::client {

AbortResponse
abort(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AbortRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AbortResponse{};

  raise_if_error(
      stub->Abort(&context, request, &response));

  return response;
}

AcquisitionStatusResponse
acquisition_status(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AcquisitionStatusRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AcquisitionStatusResponse{};

  raise_if_error(
      stub->AcquisitionStatus(&context, request, &response));

  return response;
}

ActualMeasWfmSizeResponse
actual_meas_wfm_size(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<ArrayMeasurement, pb::int32>& array_meas_function)
{
  ::grpc::ClientContext context;

  auto request = ActualMeasWfmSizeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto array_meas_function_ptr = array_meas_function.get_if<ArrayMeasurement>();
  const auto array_meas_function_raw_ptr = array_meas_function.get_if<pb::int32>();
  if (array_meas_function_ptr) {
    request.set_array_meas_function(*array_meas_function_ptr);
  }
  else if (array_meas_function_raw_ptr) {
    request.set_array_meas_function_raw(*array_meas_function_raw_ptr);
  }

  auto response = ActualMeasWfmSizeResponse{};

  raise_if_error(
      stub->ActualMeasWfmSize(&context, request, &response));

  return response;
}

ActualNumWfmsResponse
actual_num_wfms(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = ActualNumWfmsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = ActualNumWfmsResponse{};

  raise_if_error(
      stub->ActualNumWfms(&context, request, &response));

  return response;
}

ActualRecordLengthResponse
actual_record_length(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ActualRecordLengthRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ActualRecordLengthResponse{};

  raise_if_error(
      stub->ActualRecordLength(&context, request, &response));

  return response;
}

AddWaveformProcessingResponse
add_waveform_processing(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<ArrayMeasurement, pb::int32>& meas_function)
{
  ::grpc::ClientContext context;

  auto request = AddWaveformProcessingRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto meas_function_ptr = meas_function.get_if<ArrayMeasurement>();
  const auto meas_function_raw_ptr = meas_function.get_if<pb::int32>();
  if (meas_function_ptr) {
    request.set_meas_function(*meas_function_ptr);
  }
  else if (meas_function_raw_ptr) {
    request.set_meas_function_raw(*meas_function_raw_ptr);
  }

  auto response = AddWaveformProcessingResponse{};

  raise_if_error(
      stub->AddWaveformProcessing(&context, request, &response));

  return response;
}

AdjustSampleClockRelativeDelayResponse
adjust_sample_clock_relative_delay(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = AdjustSampleClockRelativeDelayRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_delay(delay);

  auto response = AdjustSampleClockRelativeDelayResponse{};

  raise_if_error(
      stub->AdjustSampleClockRelativeDelay(&context, request, &response));

  return response;
}

AutoSetupResponse
auto_setup(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AutoSetupRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AutoSetupResponse{};

  raise_if_error(
      stub->AutoSetup(&context, request, &response));

  return response;
}

CableSenseSignalStartResponse
cable_sense_signal_start(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CableSenseSignalStartRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CableSenseSignalStartResponse{};

  raise_if_error(
      stub->CableSenseSignalStart(&context, request, &response));

  return response;
}

CableSenseSignalStopResponse
cable_sense_signal_stop(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CableSenseSignalStopRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CableSenseSignalStopResponse{};

  raise_if_error(
      stub->CableSenseSignalStop(&context, request, &response));

  return response;
}

CalSelfCalibrateResponse
cal_self_calibrate(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<Option, pb::int32>& option)
{
  ::grpc::ClientContext context;

  auto request = CalSelfCalibrateRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto option_ptr = option.get_if<Option>();
  const auto option_raw_ptr = option.get_if<pb::int32>();
  if (option_ptr) {
    request.set_option(*option_ptr);
  }
  else if (option_raw_ptr) {
    request.set_option_raw(*option_raw_ptr);
  }

  auto response = CalSelfCalibrateResponse{};

  raise_if_error(
      stub->CalSelfCalibrate(&context, request, &response));

  return response;
}

CheckAttributeViBooleanResponse
check_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const bool& value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  request.set_value(value);

  auto response = CheckAttributeViBooleanResponse{};

  raise_if_error(
      stub->CheckAttributeViBoolean(&context, request, &response));

  return response;
}

CheckAttributeViInt32Response
check_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const simple_variant<NiScopeInt32AttributeValues, pb::int32>& value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  const auto value_ptr = value.get_if<NiScopeInt32AttributeValues>();
  const auto value_raw_ptr = value.get_if<pb::int32>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = CheckAttributeViInt32Response{};

  raise_if_error(
      stub->CheckAttributeViInt32(&context, request, &response));

  return response;
}

CheckAttributeViInt64Response
check_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const simple_variant<NiScopeInt64AttributeValues, pb::int64>& value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  const auto value_ptr = value.get_if<NiScopeInt64AttributeValues>();
  const auto value_raw_ptr = value.get_if<pb::int64>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = CheckAttributeViInt64Response{};

  raise_if_error(
      stub->CheckAttributeViInt64(&context, request, &response));

  return response;
}

CheckAttributeViReal64Response
check_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const simple_variant<NiScopeReal64AttributeValues, double>& value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  const auto value_ptr = value.get_if<NiScopeReal64AttributeValues>();
  const auto value_raw_ptr = value.get_if<double>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = CheckAttributeViReal64Response{};

  raise_if_error(
      stub->CheckAttributeViReal64(&context, request, &response));

  return response;
}

CheckAttributeViSessionResponse
check_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const nidevice_grpc::Session& value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  request.mutable_value()->CopyFrom(value);

  auto response = CheckAttributeViSessionResponse{};

  raise_if_error(
      stub->CheckAttributeViSession(&context, request, &response));

  return response;
}

CheckAttributeViStringResponse
check_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const pb::string& value_raw)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  request.set_value_raw(value_raw);

  auto response = CheckAttributeViStringResponse{};

  raise_if_error(
      stub->CheckAttributeViString(&context, request, &response));

  return response;
}

ClearWaveformMeasurementStatsResponse
clear_waveform_measurement_stats(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const simple_variant<ClearableMeasurement, pb::int32>& clearable_measurement_function)
{
  ::grpc::ClientContext context;

  auto request = ClearWaveformMeasurementStatsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  const auto clearable_measurement_function_ptr = clearable_measurement_function.get_if<ClearableMeasurement>();
  const auto clearable_measurement_function_raw_ptr = clearable_measurement_function.get_if<pb::int32>();
  if (clearable_measurement_function_ptr) {
    request.set_clearable_measurement_function(*clearable_measurement_function_ptr);
  }
  else if (clearable_measurement_function_raw_ptr) {
    request.set_clearable_measurement_function_raw(*clearable_measurement_function_raw_ptr);
  }

  auto response = ClearWaveformMeasurementStatsResponse{};

  raise_if_error(
      stub->ClearWaveformMeasurementStats(&context, request, &response));

  return response;
}

ClearWaveformProcessingResponse
clear_waveform_processing(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = ClearWaveformProcessingRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = ClearWaveformProcessingResponse{};

  raise_if_error(
      stub->ClearWaveformProcessing(&context, request, &response));

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response));

  return response;
}

CommitResponse
commit(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CommitRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CommitResponse{};

  raise_if_error(
      stub->Commit(&context, request, &response));

  return response;
}

ConfigureAcquisitionResponse
configure_acquisition(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& acquisition_type)
{
  ::grpc::ClientContext context;

  auto request = ConfigureAcquisitionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_acquisition_type(acquisition_type);

  auto response = ConfigureAcquisitionResponse{};

  raise_if_error(
      stub->ConfigureAcquisition(&context, request, &response));

  return response;
}

ConfigureChanCharacteristicsResponse
configure_chan_characteristics(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& input_impedance, const double& max_input_frequency)
{
  ::grpc::ClientContext context;

  auto request = ConfigureChanCharacteristicsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_input_impedance(input_impedance);
  request.set_max_input_frequency(max_input_frequency);

  auto response = ConfigureChanCharacteristicsResponse{};

  raise_if_error(
      stub->ConfigureChanCharacteristics(&context, request, &response));

  return response;
}

ConfigureClockResponse
configure_clock(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& input_clock_source, const pb::string& output_clock_source, const pb::string& clock_sync_pulse_source, const bool& master_enabled)
{
  ::grpc::ClientContext context;

  auto request = ConfigureClockRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_input_clock_source(input_clock_source);
  request.set_output_clock_source(output_clock_source);
  request.set_clock_sync_pulse_source(clock_sync_pulse_source);
  request.set_master_enabled(master_enabled);

  auto response = ConfigureClockResponse{};

  raise_if_error(
      stub->ConfigureClock(&context, request, &response));

  return response;
}

ConfigureEqualizationFilterCoefficientsResponse
configure_equalization_filter_coefficients(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const std::vector<double>& coefficients)
{
  ::grpc::ClientContext context;

  auto request = ConfigureEqualizationFilterCoefficientsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  copy_array(coefficients, request.mutable_coefficients());

  auto response = ConfigureEqualizationFilterCoefficientsResponse{};

  raise_if_error(
      stub->ConfigureEqualizationFilterCoefficients(&context, request, &response));

  return response;
}

ConfigureHorizontalTimingResponse
configure_horizontal_timing(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& min_sample_rate, const pb::int32& min_num_pts, const double& ref_position, const pb::int32& num_records, const bool& enforce_realtime)
{
  ::grpc::ClientContext context;

  auto request = ConfigureHorizontalTimingRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_min_sample_rate(min_sample_rate);
  request.set_min_num_pts(min_num_pts);
  request.set_ref_position(ref_position);
  request.set_num_records(num_records);
  request.set_enforce_realtime(enforce_realtime);

  auto response = ConfigureHorizontalTimingResponse{};

  raise_if_error(
      stub->ConfigureHorizontalTiming(&context, request, &response));

  return response;
}

ConfigureTriggerDigitalResponse
configure_trigger_digital(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const simple_variant<TriggerSlope, pb::int32>& slope, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerDigitalRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  const auto slope_ptr = slope.get_if<TriggerSlope>();
  const auto slope_raw_ptr = slope.get_if<pb::int32>();
  if (slope_ptr) {
    request.set_slope(*slope_ptr);
  }
  else if (slope_raw_ptr) {
    request.set_slope_raw(*slope_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerDigitalResponse{};

  raise_if_error(
      stub->ConfigureTriggerDigital(&context, request, &response));

  return response;
}

ConfigureTriggerEdgeResponse
configure_trigger_edge(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const double& level, const simple_variant<TriggerSlope, pb::int32>& slope, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerEdgeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_level(level);
  const auto slope_ptr = slope.get_if<TriggerSlope>();
  const auto slope_raw_ptr = slope.get_if<pb::int32>();
  if (slope_ptr) {
    request.set_slope(*slope_ptr);
  }
  else if (slope_raw_ptr) {
    request.set_slope_raw(*slope_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerEdgeResponse{};

  raise_if_error(
      stub->ConfigureTriggerEdge(&context, request, &response));

  return response;
}

ConfigureTriggerGlitchResponse
configure_trigger_glitch(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const double& level, const double& width, const simple_variant<GlitchPolarity, pb::int32>& polarity, const simple_variant<GlitchCondition, pb::int32>& glitch_condition, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerGlitchRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_level(level);
  request.set_width(width);
  const auto polarity_ptr = polarity.get_if<GlitchPolarity>();
  const auto polarity_raw_ptr = polarity.get_if<pb::int32>();
  if (polarity_ptr) {
    request.set_polarity(*polarity_ptr);
  }
  else if (polarity_raw_ptr) {
    request.set_polarity_raw(*polarity_raw_ptr);
  }
  const auto glitch_condition_ptr = glitch_condition.get_if<GlitchCondition>();
  const auto glitch_condition_raw_ptr = glitch_condition.get_if<pb::int32>();
  if (glitch_condition_ptr) {
    request.set_glitch_condition(*glitch_condition_ptr);
  }
  else if (glitch_condition_raw_ptr) {
    request.set_glitch_condition_raw(*glitch_condition_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerGlitchResponse{};

  raise_if_error(
      stub->ConfigureTriggerGlitch(&context, request, &response));

  return response;
}

ConfigureTriggerHysteresisResponse
configure_trigger_hysteresis(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const double& level, const double& hysteresis, const simple_variant<TriggerSlope, pb::int32>& slope, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerHysteresisRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_level(level);
  request.set_hysteresis(hysteresis);
  const auto slope_ptr = slope.get_if<TriggerSlope>();
  const auto slope_raw_ptr = slope.get_if<pb::int32>();
  if (slope_ptr) {
    request.set_slope(*slope_ptr);
  }
  else if (slope_raw_ptr) {
    request.set_slope_raw(*slope_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerHysteresisResponse{};

  raise_if_error(
      stub->ConfigureTriggerHysteresis(&context, request, &response));

  return response;
}

ConfigureTriggerImmediateResponse
configure_trigger_immediate(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerImmediateRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureTriggerImmediateResponse{};

  raise_if_error(
      stub->ConfigureTriggerImmediate(&context, request, &response));

  return response;
}

ConfigureTriggerRuntResponse
configure_trigger_runt(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const double& low_threshold, const double& high_threshold, const simple_variant<RuntPolarity, pb::int32>& polarity, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerRuntRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_low_threshold(low_threshold);
  request.set_high_threshold(high_threshold);
  const auto polarity_ptr = polarity.get_if<RuntPolarity>();
  const auto polarity_raw_ptr = polarity.get_if<pb::int32>();
  if (polarity_ptr) {
    request.set_polarity(*polarity_ptr);
  }
  else if (polarity_raw_ptr) {
    request.set_polarity_raw(*polarity_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerRuntResponse{};

  raise_if_error(
      stub->ConfigureTriggerRunt(&context, request, &response));

  return response;
}

ConfigureTriggerSoftwareResponse
configure_trigger_software(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerSoftwareRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerSoftwareResponse{};

  raise_if_error(
      stub->ConfigureTriggerSoftware(&context, request, &response));

  return response;
}

ConfigureTriggerVideoResponse
configure_trigger_video(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const bool& enable_dc_restore, const simple_variant<VideoSignalFormat, pb::int32>& signal_format, const simple_variant<VideoTriggerEvent, pb::int32>& event, const pb::int32& line_number, const simple_variant<VideoPolarity, pb::int32>& polarity, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerVideoRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_enable_dc_restore(enable_dc_restore);
  const auto signal_format_ptr = signal_format.get_if<VideoSignalFormat>();
  const auto signal_format_raw_ptr = signal_format.get_if<pb::int32>();
  if (signal_format_ptr) {
    request.set_signal_format(*signal_format_ptr);
  }
  else if (signal_format_raw_ptr) {
    request.set_signal_format_raw(*signal_format_raw_ptr);
  }
  const auto event_ptr = event.get_if<VideoTriggerEvent>();
  const auto event_raw_ptr = event.get_if<pb::int32>();
  if (event_ptr) {
    request.set_event(*event_ptr);
  }
  else if (event_raw_ptr) {
    request.set_event_raw(*event_raw_ptr);
  }
  request.set_line_number(line_number);
  const auto polarity_ptr = polarity.get_if<VideoPolarity>();
  const auto polarity_raw_ptr = polarity.get_if<pb::int32>();
  if (polarity_ptr) {
    request.set_polarity(*polarity_ptr);
  }
  else if (polarity_raw_ptr) {
    request.set_polarity_raw(*polarity_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerVideoResponse{};

  raise_if_error(
      stub->ConfigureTriggerVideo(&context, request, &response));

  return response;
}

ConfigureTriggerWidthResponse
configure_trigger_width(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const double& level, const double& low_threshold, const double& high_threshold, const simple_variant<WidthPolarity, pb::int32>& polarity, const simple_variant<WidthCondition, pb::int32>& condition, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerWidthRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_level(level);
  request.set_low_threshold(low_threshold);
  request.set_high_threshold(high_threshold);
  const auto polarity_ptr = polarity.get_if<WidthPolarity>();
  const auto polarity_raw_ptr = polarity.get_if<pb::int32>();
  if (polarity_ptr) {
    request.set_polarity(*polarity_ptr);
  }
  else if (polarity_raw_ptr) {
    request.set_polarity_raw(*polarity_raw_ptr);
  }
  const auto condition_ptr = condition.get_if<WidthCondition>();
  const auto condition_raw_ptr = condition.get_if<pb::int32>();
  if (condition_ptr) {
    request.set_condition(*condition_ptr);
  }
  else if (condition_raw_ptr) {
    request.set_condition_raw(*condition_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerWidthResponse{};

  raise_if_error(
      stub->ConfigureTriggerWidth(&context, request, &response));

  return response;
}

ConfigureTriggerWindowResponse
configure_trigger_window(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& trigger_source, const double& low_level, const double& high_level, const simple_variant<TriggerWindowMode, pb::int32>& window_mode, const simple_variant<TriggerCoupling, pb::int32>& trigger_coupling, const double& holdoff, const double& delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerWindowRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_source(trigger_source);
  request.set_low_level(low_level);
  request.set_high_level(high_level);
  const auto window_mode_ptr = window_mode.get_if<TriggerWindowMode>();
  const auto window_mode_raw_ptr = window_mode.get_if<pb::int32>();
  if (window_mode_ptr) {
    request.set_window_mode(*window_mode_ptr);
  }
  else if (window_mode_raw_ptr) {
    request.set_window_mode_raw(*window_mode_raw_ptr);
  }
  const auto trigger_coupling_ptr = trigger_coupling.get_if<TriggerCoupling>();
  const auto trigger_coupling_raw_ptr = trigger_coupling.get_if<pb::int32>();
  if (trigger_coupling_ptr) {
    request.set_trigger_coupling(*trigger_coupling_ptr);
  }
  else if (trigger_coupling_raw_ptr) {
    request.set_trigger_coupling_raw(*trigger_coupling_raw_ptr);
  }
  request.set_holdoff(holdoff);
  request.set_delay(delay);

  auto response = ConfigureTriggerWindowResponse{};

  raise_if_error(
      stub->ConfigureTriggerWindow(&context, request, &response));

  return response;
}

ConfigureVerticalResponse
configure_vertical(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& range, const double& offset, const simple_variant<VerticalCoupling, pb::int32>& coupling, const double& probe_attenuation, const bool& enabled)
{
  ::grpc::ClientContext context;

  auto request = ConfigureVerticalRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_range(range);
  request.set_offset(offset);
  const auto coupling_ptr = coupling.get_if<VerticalCoupling>();
  const auto coupling_raw_ptr = coupling.get_if<pb::int32>();
  if (coupling_ptr) {
    request.set_coupling(*coupling_ptr);
  }
  else if (coupling_raw_ptr) {
    request.set_coupling_raw(*coupling_raw_ptr);
  }
  request.set_probe_attenuation(probe_attenuation);
  request.set_enabled(enabled);

  auto response = ConfigureVerticalResponse{};

  raise_if_error(
      stub->ConfigureVertical(&context, request, &response));

  return response;
}

DisableResponse
disable(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableResponse{};

  raise_if_error(
      stub->Disable(&context, request, &response));

  return response;
}

ErrorHandlerResponse
error_handler(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code, const pb::string& error_source)
{
  ::grpc::ClientContext context;

  auto request = ErrorHandlerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);
  request.set_error_source(error_source);

  auto response = ErrorHandlerResponse{};

  raise_if_error(
      stub->ErrorHandler(&context, request, &response));

  return response;
}

ExportAttributeConfigurationBufferResponse
export_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ExportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationBuffer(&context, request, &response));

  return response;
}

ExportAttributeConfigurationFileResponse
export_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ExportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationFile(&context, request, &response));

  return response;
}

ExportSignalResponse
export_signal(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<ExportableSignals, pb::int32>& signal, const pb::string& signal_identifier, const pb::string& output_terminal)
{
  ::grpc::ClientContext context;

  auto request = ExportSignalRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto signal_ptr = signal.get_if<ExportableSignals>();
  const auto signal_raw_ptr = signal.get_if<pb::int32>();
  if (signal_ptr) {
    request.set_signal(*signal_ptr);
  }
  else if (signal_raw_ptr) {
    request.set_signal_raw(*signal_raw_ptr);
  }
  request.set_signal_identifier(signal_identifier);
  request.set_output_terminal(output_terminal);

  auto response = ExportSignalResponse{};

  raise_if_error(
      stub->ExportSignal(&context, request, &response));

  return response;
}

FetchResponse
fetch(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = FetchRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = FetchResponse{};

  raise_if_error(
      stub->Fetch(&context, request, &response));

  return response;
}

FetchArrayMeasurementResponse
fetch_array_measurement(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const simple_variant<ArrayMeasurement, pb::int32>& array_meas_function)
{
  ::grpc::ClientContext context;

  auto request = FetchArrayMeasurementRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  const auto array_meas_function_ptr = array_meas_function.get_if<ArrayMeasurement>();
  const auto array_meas_function_raw_ptr = array_meas_function.get_if<pb::int32>();
  if (array_meas_function_ptr) {
    request.set_array_meas_function(*array_meas_function_ptr);
  }
  else if (array_meas_function_raw_ptr) {
    request.set_array_meas_function_raw(*array_meas_function_raw_ptr);
  }

  auto response = FetchArrayMeasurementResponse{};

  raise_if_error(
      stub->FetchArrayMeasurement(&context, request, &response));

  return response;
}

FetchBinary16Response
fetch_binary16(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = FetchBinary16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = FetchBinary16Response{};

  raise_if_error(
      stub->FetchBinary16(&context, request, &response));

  return response;
}

FetchBinary32Response
fetch_binary32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = FetchBinary32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = FetchBinary32Response{};

  raise_if_error(
      stub->FetchBinary32(&context, request, &response));

  return response;
}

FetchBinary8Response
fetch_binary8(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = FetchBinary8Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = FetchBinary8Response{};

  raise_if_error(
      stub->FetchBinary8(&context, request, &response));

  return response;
}

FetchComplexResponse
fetch_complex(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = FetchComplexRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = FetchComplexResponse{};

  raise_if_error(
      stub->FetchComplex(&context, request, &response));

  return response;
}

FetchComplexBinary16Response
fetch_complex_binary16(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = FetchComplexBinary16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = FetchComplexBinary16Response{};

  raise_if_error(
      stub->FetchComplexBinary16(&context, request, &response));

  return response;
}

FetchMeasurementResponse
fetch_measurement(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const simple_variant<ScalarMeasurement, pb::int32>& scalar_meas_function)
{
  ::grpc::ClientContext context;

  auto request = FetchMeasurementRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  const auto scalar_meas_function_ptr = scalar_meas_function.get_if<ScalarMeasurement>();
  const auto scalar_meas_function_raw_ptr = scalar_meas_function.get_if<pb::int32>();
  if (scalar_meas_function_ptr) {
    request.set_scalar_meas_function(*scalar_meas_function_ptr);
  }
  else if (scalar_meas_function_raw_ptr) {
    request.set_scalar_meas_function_raw(*scalar_meas_function_raw_ptr);
  }

  auto response = FetchMeasurementResponse{};

  raise_if_error(
      stub->FetchMeasurement(&context, request, &response));

  return response;
}

FetchMeasurementStatsResponse
fetch_measurement_stats(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const simple_variant<ScalarMeasurement, pb::int32>& scalar_meas_function)
{
  ::grpc::ClientContext context;

  auto request = FetchMeasurementStatsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  const auto scalar_meas_function_ptr = scalar_meas_function.get_if<ScalarMeasurement>();
  const auto scalar_meas_function_raw_ptr = scalar_meas_function.get_if<pb::int32>();
  if (scalar_meas_function_ptr) {
    request.set_scalar_meas_function(*scalar_meas_function_ptr);
  }
  else if (scalar_meas_function_raw_ptr) {
    request.set_scalar_meas_function_raw(*scalar_meas_function_raw_ptr);
  }

  auto response = FetchMeasurementStatsResponse{};

  raise_if_error(
      stub->FetchMeasurementStats(&context, request, &response));

  return response;
}

GetAttributeViBooleanResponse
get_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViBooleanResponse{};

  raise_if_error(
      stub->GetAttributeViBoolean(&context, request, &response));

  return response;
}

GetAttributeViInt32Response
get_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt32Response{};

  raise_if_error(
      stub->GetAttributeViInt32(&context, request, &response));

  return response;
}

GetAttributeViInt64Response
get_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt64Response{};

  raise_if_error(
      stub->GetAttributeViInt64(&context, request, &response));

  return response;
}

GetAttributeViReal64Response
get_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViReal64Response{};

  raise_if_error(
      stub->GetAttributeViReal64(&context, request, &response));

  return response;
}

GetAttributeViSessionResponse
get_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViSessionResponse{};

  raise_if_error(
      stub->GetAttributeViSession(&context, request, &response));

  return response;
}

GetAttributeViStringResponse
get_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViStringResponse{};

  raise_if_error(
      stub->GetAttributeViString(&context, request, &response));

  return response;
}

GetChannelNameResponse
get_channel_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& index)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_index(index);

  auto response = GetChannelNameResponse{};

  raise_if_error(
      stub->GetChannelName(&context, request, &response));

  return response;
}

GetChannelNameFromStringResponse
get_channel_name_from_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& index)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameFromStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_index(index);

  auto response = GetChannelNameFromStringResponse{};

  raise_if_error(
      stub->GetChannelNameFromString(&context, request, &response));

  return response;
}

GetEqualizationFilterCoefficientsResponse
get_equalization_filter_coefficients(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel, const pb::int32& number_of_coefficients)
{
  ::grpc::ClientContext context;

  auto request = GetEqualizationFilterCoefficientsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel(channel);
  request.set_number_of_coefficients(number_of_coefficients);

  auto response = GetEqualizationFilterCoefficientsResponse{};

  raise_if_error(
      stub->GetEqualizationFilterCoefficients(&context, request, &response));

  return response;
}

GetErrorResponse
get_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetErrorResponse{};

  raise_if_error(
      stub->GetError(&context, request, &response));

  return response;
}

GetErrorMessageResponse
get_error_message(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = GetErrorMessageRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);

  auto response = GetErrorMessageResponse{};

  raise_if_error(
      stub->GetErrorMessage(&context, request, &response));

  return response;
}

GetFrequencyResponseResponse
get_frequency_response(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel, const pb::int32& buffer_size)
{
  ::grpc::ClientContext context;

  auto request = GetFrequencyResponseRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel(channel);
  request.set_buffer_size(buffer_size);

  auto response = GetFrequencyResponseResponse{};

  raise_if_error(
      stub->GetFrequencyResponse(&context, request, &response));

  return response;
}

GetNormalizationCoefficientsResponse
get_normalization_coefficients(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = GetNormalizationCoefficientsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = GetNormalizationCoefficientsResponse{};

  raise_if_error(
      stub->GetNormalizationCoefficients(&context, request, &response));

  return response;
}

GetScalingCoefficientsResponse
get_scaling_coefficients(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list)
{
  ::grpc::ClientContext context;

  auto request = GetScalingCoefficientsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);

  auto response = GetScalingCoefficientsResponse{};

  raise_if_error(
      stub->GetScalingCoefficients(&context, request, &response));

  return response;
}

GetStreamEndpointHandleResponse
get_stream_endpoint_handle(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& stream_name)
{
  ::grpc::ClientContext context;

  auto request = GetStreamEndpointHandleRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_stream_name(stream_name);

  auto response = GetStreamEndpointHandleResponse{};

  raise_if_error(
      stub->GetStreamEndpointHandle(&context, request, &response));

  return response;
}

ImportAttributeConfigurationBufferResponse
import_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& configuration)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_configuration(configuration);

  auto response = ImportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationBuffer(&context, request, &response));

  return response;
}

ImportAttributeConfigurationFileResponse
import_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ImportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationFile(&context, request, &response));

  return response;
}

InitResponse
init(const StubPtr& stub, const pb::string& resource_name, const bool& id_query, const bool& reset_device)
{
  ::grpc::ClientContext context;

  auto request = InitRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);

  auto response = InitResponse{};

  raise_if_error(
      stub->Init(&context, request, &response));

  return response;
}

InitWithOptionsResponse
init_with_options(const StubPtr& stub, const pb::string& resource_name, const bool& id_query, const bool& reset_device, const pb::string& option_string)
{
  ::grpc::ClientContext context;

  auto request = InitWithOptionsRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);
  request.set_option_string(option_string);

  auto response = InitWithOptionsResponse{};

  raise_if_error(
      stub->InitWithOptions(&context, request, &response));

  return response;
}

InitiateAcquisitionResponse
initiate_acquisition(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = InitiateAcquisitionRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = InitiateAcquisitionResponse{};

  raise_if_error(
      stub->InitiateAcquisition(&context, request, &response));

  return response;
}

LockSessionResponse
lock_session(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = LockSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = LockSessionResponse{};

  raise_if_error(
      stub->LockSession(&context, request, &response));

  return response;
}

ProbeCompensationSignalStartResponse
probe_compensation_signal_start(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ProbeCompensationSignalStartRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ProbeCompensationSignalStartResponse{};

  raise_if_error(
      stub->ProbeCompensationSignalStart(&context, request, &response));

  return response;
}

ProbeCompensationSignalStopResponse
probe_compensation_signal_stop(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ProbeCompensationSignalStopRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ProbeCompensationSignalStopResponse{};

  raise_if_error(
      stub->ProbeCompensationSignalStop(&context, request, &response));

  return response;
}

ReadResponse
read(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const pb::int32& num_samples)
{
  ::grpc::ClientContext context;

  auto request = ReadRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  request.set_num_samples(num_samples);

  auto response = ReadResponse{};

  raise_if_error(
      stub->Read(&context, request, &response));

  return response;
}

ReadMeasurementResponse
read_measurement(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const double& timeout, const simple_variant<ScalarMeasurement, pb::int32>& scalar_meas_function)
{
  ::grpc::ClientContext context;

  auto request = ReadMeasurementRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_timeout(timeout);
  const auto scalar_meas_function_ptr = scalar_meas_function.get_if<ScalarMeasurement>();
  const auto scalar_meas_function_raw_ptr = scalar_meas_function.get_if<pb::int32>();
  if (scalar_meas_function_ptr) {
    request.set_scalar_meas_function(*scalar_meas_function_ptr);
  }
  else if (scalar_meas_function_raw_ptr) {
    request.set_scalar_meas_function_raw(*scalar_meas_function_raw_ptr);
  }

  auto response = ReadMeasurementResponse{};

  raise_if_error(
      stub->ReadMeasurement(&context, request, &response));

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response));

  return response;
}

ResetDeviceResponse
reset_device(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetDeviceRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetDeviceResponse{};

  raise_if_error(
      stub->ResetDevice(&context, request, &response));

  return response;
}

RevisionQueryResponse
revision_query(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = RevisionQueryRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = RevisionQueryResponse{};

  raise_if_error(
      stub->RevisionQuery(&context, request, &response));

  return response;
}

SampleModeResponse
sample_mode(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SampleModeRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SampleModeResponse{};

  raise_if_error(
      stub->SampleMode(&context, request, &response));

  return response;
}

SampleRateResponse
sample_rate(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SampleRateRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SampleRateResponse{};

  raise_if_error(
      stub->SampleRate(&context, request, &response));

  return response;
}

SelfTestResponse
self_test(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfTestRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfTestResponse{};

  raise_if_error(
      stub->SelfTest(&context, request, &response));

  return response;
}

SendSoftwareTriggerEdgeResponse
send_software_trigger_edge(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<WhichTrigger, pb::int32>& which_trigger)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareTriggerEdgeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto which_trigger_ptr = which_trigger.get_if<WhichTrigger>();
  const auto which_trigger_raw_ptr = which_trigger.get_if<pb::int32>();
  if (which_trigger_ptr) {
    request.set_which_trigger(*which_trigger_ptr);
  }
  else if (which_trigger_raw_ptr) {
    request.set_which_trigger_raw(*which_trigger_raw_ptr);
  }

  auto response = SendSoftwareTriggerEdgeResponse{};

  raise_if_error(
      stub->SendSoftwareTriggerEdge(&context, request, &response));

  return response;
}

SetAttributeViBooleanResponse
set_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const bool& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  request.set_value(value);

  auto response = SetAttributeViBooleanResponse{};

  raise_if_error(
      stub->SetAttributeViBoolean(&context, request, &response));

  return response;
}

SetAttributeViInt32Response
set_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const simple_variant<NiScopeInt32AttributeValues, pb::int32>& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  const auto value_ptr = value.get_if<NiScopeInt32AttributeValues>();
  const auto value_raw_ptr = value.get_if<pb::int32>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = SetAttributeViInt32Response{};

  raise_if_error(
      stub->SetAttributeViInt32(&context, request, &response));

  return response;
}

SetAttributeViInt64Response
set_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const simple_variant<NiScopeInt64AttributeValues, pb::int64>& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  const auto value_ptr = value.get_if<NiScopeInt64AttributeValues>();
  const auto value_raw_ptr = value.get_if<pb::int64>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = SetAttributeViInt64Response{};

  raise_if_error(
      stub->SetAttributeViInt64(&context, request, &response));

  return response;
}

SetAttributeViReal64Response
set_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const simple_variant<NiScopeReal64AttributeValues, double>& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  const auto value_ptr = value.get_if<NiScopeReal64AttributeValues>();
  const auto value_raw_ptr = value.get_if<double>();
  if (value_ptr) {
    request.set_value(*value_ptr);
  }
  else if (value_raw_ptr) {
    request.set_value_raw(*value_raw_ptr);
  }

  auto response = SetAttributeViReal64Response{};

  raise_if_error(
      stub->SetAttributeViReal64(&context, request, &response));

  return response;
}

SetAttributeViSessionResponse
set_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const nidevice_grpc::Session& value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  request.mutable_value()->CopyFrom(value);

  auto response = SetAttributeViSessionResponse{};

  raise_if_error(
      stub->SetAttributeViSession(&context, request, &response));

  return response;
}

SetAttributeViStringResponse
set_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_list, const NiScopeAttributes& attribute_id, const pb::string& value_raw)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_list(channel_list);
  request.set_attribute_id(attribute_id);
  request.set_value_raw(value_raw);

  auto response = SetAttributeViStringResponse{};

  raise_if_error(
      stub->SetAttributeViString(&context, request, &response));

  return response;
}

UnlockSessionResponse
unlock_session(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = UnlockSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = UnlockSessionResponse{};

  raise_if_error(
      stub->UnlockSession(&context, request, &response));

  return response;
}


} // namespace niscope_grpc::experimental::client
