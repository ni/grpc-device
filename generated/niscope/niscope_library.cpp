//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SCOPE Metadata
//---------------------------------------------------------------------
#include "niscope_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niScope_64.dll";
#else
static const char* kLibraryName = "libniscope.so";
#endif

namespace ni {
namespace scope {
namespace grpc {

NiScopeLibrary::NiScopeLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&load_status_, false, sizeof(load_status_));
  if (!loaded) {
    return;
  }
  load_status_.AbortExists = shared_library_.function_exists("niScope_Abort");
  load_status_.AcquisitionStatusExists = shared_library_.function_exists("niScope_AcquisitionStatus");
  load_status_.ActualMeasWfmSizeExists = shared_library_.function_exists("niScope_ActualMeasWfmSize");
  load_status_.ActualNumWfmsExists = shared_library_.function_exists("niScope_ActualNumWfms");
  load_status_.AddWaveformProcessingExists = shared_library_.function_exists("niScope_AddWaveformProcessing");
  load_status_.AutoSetupExists = shared_library_.function_exists("niScope_AutoSetup");
  load_status_.CalSelfCalibrateExists = shared_library_.function_exists("niScope_CalSelfCalibrate");
  load_status_.ClearWaveformMeasurementStatsExists = shared_library_.function_exists("niScope_ClearWaveformMeasurementStats");
  load_status_.ClearWaveformProcessingExists = shared_library_.function_exists("niScope_ClearWaveformProcessing");
  load_status_.CommitExists = shared_library_.function_exists("niScope_Commit");
  load_status_.ConfigureChanCharacteristicsExists = shared_library_.function_exists("niScope_ConfigureChanCharacteristics");
  load_status_.ConfigureEqualizationFilterCoefficientsExists = shared_library_.function_exists("niScope_ConfigureEqualizationFilterCoefficients");
  load_status_.ConfigureHorizontalTimingExists = shared_library_.function_exists("niScope_ConfigureHorizontalTiming");
  load_status_.ConfigureRefLevelsExists = shared_library_.function_exists("niScope_ConfigureRefLevels");
  load_status_.ConfigureTriggerDigitalExists = shared_library_.function_exists("niScope_ConfigureTriggerDigital");
  load_status_.ConfigureTriggerEdgeExists = shared_library_.function_exists("niScope_ConfigureTriggerEdge");
  load_status_.ConfigureTriggerHysteresisExists = shared_library_.function_exists("niScope_ConfigureTriggerHysteresis");
  load_status_.ConfigureTriggerImmediateExists = shared_library_.function_exists("niScope_ConfigureTriggerImmediate");
  load_status_.ConfigureTriggerSoftwareExists = shared_library_.function_exists("niScope_ConfigureTriggerSoftware");
  load_status_.ConfigureTriggerVideoExists = shared_library_.function_exists("niScope_ConfigureTriggerVideo");
  load_status_.ConfigureTriggerWindowExists = shared_library_.function_exists("niScope_ConfigureTriggerWindow");
  load_status_.ConfigureVerticalExists = shared_library_.function_exists("niScope_ConfigureVertical");
  load_status_.DisableExists = shared_library_.function_exists("niScope_Disable");
  load_status_.ExportAttributeConfigurationBufferExists = shared_library_.function_exists("niScope_ExportAttributeConfigurationBuffer");
  load_status_.ExportAttributeConfigurationFileExists = shared_library_.function_exists("niScope_ExportAttributeConfigurationFile");
  load_status_.FetchExists = shared_library_.function_exists("niScope_Fetch");
  load_status_.FetchArrayMeasurementExists = shared_library_.function_exists("niScope_FetchArrayMeasurement");
  load_status_.FetchBinary16Exists = shared_library_.function_exists("niScope_FetchBinary16");
  load_status_.FetchBinary32Exists = shared_library_.function_exists("niScope_FetchBinary32");
  load_status_.FetchBinary8Exists = shared_library_.function_exists("niScope_FetchBinary8");
  load_status_.FetchMeasurementStatsExists = shared_library_.function_exists("niScope_FetchMeasurementStats");
  load_status_.GetAttributeViBooleanExists = shared_library_.function_exists("niScope_GetAttributeViBoolean");
  load_status_.GetAttributeViInt32Exists = shared_library_.function_exists("niScope_GetAttributeViInt32");
  load_status_.GetAttributeViInt64Exists = shared_library_.function_exists("niScope_GetAttributeViInt64");
  load_status_.GetAttributeViReal64Exists = shared_library_.function_exists("niScope_GetAttributeViReal64");
  load_status_.GetAttributeViStringExists = shared_library_.function_exists("niScope_GetAttributeViString");
  load_status_.GetEqualizationFilterCoefficientsExists = shared_library_.function_exists("niScope_GetEqualizationFilterCoefficients");
  load_status_.GetErrorExists = shared_library_.function_exists("niScope_GetError");
  load_status_.ImportAttributeConfigurationBufferExists = shared_library_.function_exists("niScope_ImportAttributeConfigurationBuffer");
  load_status_.ImportAttributeConfigurationFileExists = shared_library_.function_exists("niScope_ImportAttributeConfigurationFile");
  load_status_.InitWithOptionsExists = shared_library_.function_exists("niScope_InitWithOptions");
  load_status_.InitiateAcquisitionExists = shared_library_.function_exists("niScope_InitiateAcquisition");
  load_status_.LockSessionExists = shared_library_.function_exists("niScope_LockSession");
  load_status_.ProbeCompensationSignalStartExists = shared_library_.function_exists("niScope_ProbeCompensationSignalStart");
  load_status_.ProbeCompensationSignalStopExists = shared_library_.function_exists("niScope_ProbeCompensationSignalStop");
  load_status_.ReadExists = shared_library_.function_exists("niScope_Read");
  load_status_.ResetDeviceExists = shared_library_.function_exists("niScope_ResetDevice");
  load_status_.ResetWithDefaultsExists = shared_library_.function_exists("niScope_ResetWithDefaults");
  load_status_.SendSoftwareTriggerEdgeExists = shared_library_.function_exists("niScope_SendSoftwareTriggerEdge");
  load_status_.SetAttributeViBooleanExists = shared_library_.function_exists("niScope_SetAttributeViBoolean");
  load_status_.SetAttributeViInt32Exists = shared_library_.function_exists("niScope_SetAttributeViInt32");
  load_status_.SetAttributeViInt64Exists = shared_library_.function_exists("niScope_SetAttributeViInt64");
  load_status_.SetAttributeViReal64Exists = shared_library_.function_exists("niScope_SetAttributeViReal64");
  load_status_.SetAttributeViStringExists = shared_library_.function_exists("niScope_SetAttributeViString");
  load_status_.UnlockSessionExists = shared_library_.function_exists("niScope_UnlockSession");
  load_status_.closeExists = shared_library_.function_exists("niScope_close");
  load_status_.error_messageExists = shared_library_.function_exists("niScope_error_message");
  load_status_.resetExists = shared_library_.function_exists("niScope_reset");
  load_status_.self_testExists = shared_library_.function_exists("niScope_self_test");
}

NiScopeLibrary::~NiScopeLibrary()
{
}

::grpc::Status NiScopeLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiScopeLibrary::Abort(ViSession vi)
{
  if (!load_status_.AbortExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_Abort.");
  }
  return niScope_Abort(vi);
}

ViStatus NiScopeLibrary::AcquisitionStatus(ViSession vi, ViInt32* acquisitionStatus)
{
  if (!load_status_.AcquisitionStatusExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_AcquisitionStatus.");
  }
  return niScope_AcquisitionStatus(vi, acquisitionStatus);
}

ViStatus NiScopeLibrary::ActualMeasWfmSize(ViSession vi, ViInt32 arrayMeasFunction, ViInt32* measWaveformSize)
{
  if (!load_status_.ActualMeasWfmSizeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ActualMeasWfmSize.");
  }
  return niScope_ActualMeasWfmSize(vi, arrayMeasFunction, measWaveformSize);
}

ViStatus NiScopeLibrary::ActualNumWfms(ViSession vi, ViConstString channelList, ViInt32* numWfms)
{
  if (!load_status_.ActualNumWfmsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ActualNumWfms.");
  }
  return niScope_ActualNumWfms(vi, channelList, numWfms);
}

ViStatus NiScopeLibrary::AddWaveformProcessing(ViSession vi, ViConstString channelList, ViInt32 measFunction)
{
  if (!load_status_.AddWaveformProcessingExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_AddWaveformProcessing.");
  }
  return niScope_AddWaveformProcessing(vi, channelList, measFunction);
}

ViStatus NiScopeLibrary::AutoSetup(ViSession vi)
{
  if (!load_status_.AutoSetupExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_AutoSetup.");
  }
  return niScope_AutoSetup(vi);
}

ViStatus NiScopeLibrary::CalSelfCalibrate(ViSession vi, ViConstString channelList, ViInt32 option)
{
  if (!load_status_.CalSelfCalibrateExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_CalSelfCalibrate.");
  }
  return niScope_CalSelfCalibrate(vi, channelList, option);
}

ViStatus NiScopeLibrary::ClearWaveformMeasurementStats(ViSession vi, ViConstString channelList, ViInt32 clearableMeasurementFunction)
{
  if (!load_status_.ClearWaveformMeasurementStatsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ClearWaveformMeasurementStats.");
  }
  return niScope_ClearWaveformMeasurementStats(vi, channelList, clearableMeasurementFunction);
}

ViStatus NiScopeLibrary::ClearWaveformProcessing(ViSession vi, ViConstString channelList)
{
  if (!load_status_.ClearWaveformProcessingExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ClearWaveformProcessing.");
  }
  return niScope_ClearWaveformProcessing(vi, channelList);
}

ViStatus NiScopeLibrary::Commit(ViSession vi)
{
  if (!load_status_.CommitExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_Commit.");
  }
  return niScope_Commit(vi);
}

ViStatus NiScopeLibrary::ConfigureChanCharacteristics(ViSession vi, ViConstString channelList, ViReal64 inputImpedance, ViReal64 maxInputFrequency)
{
  if (!load_status_.ConfigureChanCharacteristicsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureChanCharacteristics.");
  }
  return niScope_ConfigureChanCharacteristics(vi, channelList, inputImpedance, maxInputFrequency);
}

ViStatus NiScopeLibrary::ConfigureEqualizationFilterCoefficients(ViSession vi, ViConstString channelList, ViInt32 numberOfCoefficients, ViReal64 coefficients[])
{
  if (!load_status_.ConfigureEqualizationFilterCoefficientsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureEqualizationFilterCoefficients.");
  }
  return niScope_ConfigureEqualizationFilterCoefficients(vi, channelList, numberOfCoefficients, coefficients);
}

ViStatus NiScopeLibrary::ConfigureHorizontalTiming(ViSession vi, ViReal64 minSampleRate, ViInt32 minNumPts, ViReal64 refPosition, ViInt32 numRecords, ViBoolean enforceRealtime)
{
  if (!load_status_.ConfigureHorizontalTimingExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureHorizontalTiming.");
  }
  return niScope_ConfigureHorizontalTiming(vi, minSampleRate, minNumPts, refPosition, numRecords, enforceRealtime);
}

ViStatus NiScopeLibrary::ConfigureRefLevels(ViSession vi, ViReal64 low, ViReal64 mid, ViReal64 high)
{
  if (!load_status_.ConfigureRefLevelsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureRefLevels.");
  }
  return niScope_ConfigureRefLevels(vi, low, mid, high);
}

ViStatus NiScopeLibrary::ConfigureTriggerDigital(ViSession vi, ViConstString triggerSource, ViInt32 slope, ViReal64 holdoff, ViReal64 delay)
{
  if (!load_status_.ConfigureTriggerDigitalExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerDigital.");
  }
  return niScope_ConfigureTriggerDigital(vi, triggerSource, slope, holdoff, delay);
}

ViStatus NiScopeLibrary::ConfigureTriggerEdge(ViSession vi, ViConstString triggerSource, ViReal64 level, ViInt32 slope, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay)
{
  if (!load_status_.ConfigureTriggerEdgeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerEdge.");
  }
  return niScope_ConfigureTriggerEdge(vi, triggerSource, level, slope, triggerCoupling, holdoff, delay);
}

ViStatus NiScopeLibrary::ConfigureTriggerHysteresis(ViSession vi, ViConstString triggerSource, ViReal64 level, ViReal64 hysteresis, ViInt32 slope, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay)
{
  if (!load_status_.ConfigureTriggerHysteresisExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerHysteresis.");
  }
  return niScope_ConfigureTriggerHysteresis(vi, triggerSource, level, hysteresis, slope, triggerCoupling, holdoff, delay);
}

ViStatus NiScopeLibrary::ConfigureTriggerImmediate(ViSession vi)
{
  if (!load_status_.ConfigureTriggerImmediateExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerImmediate.");
  }
  return niScope_ConfigureTriggerImmediate(vi);
}

ViStatus NiScopeLibrary::ConfigureTriggerSoftware(ViSession vi, ViReal64 holdoff, ViReal64 delay)
{
  if (!load_status_.ConfigureTriggerSoftwareExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerSoftware.");
  }
  return niScope_ConfigureTriggerSoftware(vi, holdoff, delay);
}

ViStatus NiScopeLibrary::ConfigureTriggerVideo(ViSession vi, ViConstString triggerSource, ViBoolean enableDcRestore, ViInt32 signalFormat, ViInt32 eventParameter, ViInt32 lineNumber, ViInt32 polarity, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay)
{
  if (!load_status_.ConfigureTriggerVideoExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerVideo.");
  }
  return niScope_ConfigureTriggerVideo(vi, triggerSource, enableDcRestore, signalFormat, eventParameter, lineNumber, polarity, triggerCoupling, holdoff, delay);
}

ViStatus NiScopeLibrary::ConfigureTriggerWindow(ViSession vi, ViConstString triggerSource, ViReal64 lowLevel, ViReal64 highLevel, ViInt32 windowMode, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay)
{
  if (!load_status_.ConfigureTriggerWindowExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureTriggerWindow.");
  }
  return niScope_ConfigureTriggerWindow(vi, triggerSource, lowLevel, highLevel, windowMode, triggerCoupling, holdoff, delay);
}

ViStatus NiScopeLibrary::ConfigureVertical(ViSession vi, ViConstString channelList, ViReal64 range, ViReal64 offset, ViInt32 coupling, ViReal64 probeAttenuation, ViBoolean enabled)
{
  if (!load_status_.ConfigureVerticalExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ConfigureVertical.");
  }
  return niScope_ConfigureVertical(vi, channelList, range, offset, coupling, probeAttenuation, enabled);
}

ViStatus NiScopeLibrary::Disable(ViSession vi)
{
  if (!load_status_.DisableExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_Disable.");
  }
  return niScope_Disable(vi);
}

ViStatus NiScopeLibrary::ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 sizeInBytes, ViInt8 configuration[])
{
  if (!load_status_.ExportAttributeConfigurationBufferExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ExportAttributeConfigurationBuffer.");
  }
  return niScope_ExportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
}

ViStatus NiScopeLibrary::ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!load_status_.ExportAttributeConfigurationFileExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ExportAttributeConfigurationFile.");
  }
  return niScope_ExportAttributeConfigurationFile(vi, filePath);
}

ViStatus NiScopeLibrary::Fetch(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViReal64 waveform[], struct niScope_wfmInfo wfmInfo[])
{
  if (!load_status_.FetchExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_Fetch.");
  }
  return niScope_Fetch(vi, channelList, timeout, numSamples, waveform, wfmInfo);
}

ViStatus NiScopeLibrary::FetchArrayMeasurement(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 arrayMeasFunction, ViInt32 measurementWaveformSize, ViReal64 measWfm[], struct niScope_wfmInfo wfmInfo[])
{
  if (!load_status_.FetchArrayMeasurementExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_FetchArrayMeasurement.");
  }
  return niScope_FetchArrayMeasurement(vi, channelList, timeout, arrayMeasFunction, measurementWaveformSize, measWfm, wfmInfo);
}

ViStatus NiScopeLibrary::FetchBinary16(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt16 waveform[], struct niScope_wfmInfo wfmInfo[])
{
  if (!load_status_.FetchBinary16Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_FetchBinary16.");
  }
  return niScope_FetchBinary16(vi, channelList, timeout, numSamples, waveform, wfmInfo);
}

ViStatus NiScopeLibrary::FetchBinary32(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt32 waveform[], struct niScope_wfmInfo wfmInfo[])
{
  if (!load_status_.FetchBinary32Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_FetchBinary32.");
  }
  return niScope_FetchBinary32(vi, channelList, timeout, numSamples, waveform, wfmInfo);
}

ViStatus NiScopeLibrary::FetchBinary8(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt8 waveform[], struct niScope_wfmInfo wfmInfo[])
{
  if (!load_status_.FetchBinary8Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_FetchBinary8.");
  }
  return niScope_FetchBinary8(vi, channelList, timeout, numSamples, waveform, wfmInfo);
}

ViStatus NiScopeLibrary::FetchMeasurementStats(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 scalarMeasFunction, ViReal64 result[], ViReal64 mean[], ViReal64 stdev[], ViReal64 min[], ViReal64 max[], ViInt32 numInStats[])
{
  if (!load_status_.FetchMeasurementStatsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_FetchMeasurementStats.");
  }
  return niScope_FetchMeasurementStats(vi, channelList, timeout, scalarMeasFunction, result, mean, stdev, min, max, numInStats);
}

ViStatus NiScopeLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelList, ViAttr attributeId, ViBoolean* value)
{
  if (!load_status_.GetAttributeViBooleanExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetAttributeViBoolean.");
  }
  return niScope_GetAttributeViBoolean(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelList, ViAttr attributeId, ViInt32* value)
{
  if (!load_status_.GetAttributeViInt32Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetAttributeViInt32.");
  }
  return niScope_GetAttributeViInt32(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::GetAttributeViInt64(ViSession vi, ViConstString channelList, ViAttr attributeId, ViInt64* value)
{
  if (!load_status_.GetAttributeViInt64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetAttributeViInt64.");
  }
  return niScope_GetAttributeViInt64(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelList, ViAttr attributeId, ViReal64* value)
{
  if (!load_status_.GetAttributeViReal64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetAttributeViReal64.");
  }
  return niScope_GetAttributeViReal64(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::GetAttributeViString(ViSession vi, ViConstString channelList, ViAttr attributeId, ViInt32 bufSize, ViChar value[])
{
  if (!load_status_.GetAttributeViStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetAttributeViString.");
  }
  return niScope_GetAttributeViString(vi, channelList, attributeId, bufSize, value);
}

ViStatus NiScopeLibrary::GetEqualizationFilterCoefficients(ViSession vi, ViConstString channel, ViInt32 numberOfCoefficients, ViReal64 coefficients[])
{
  if (!load_status_.GetEqualizationFilterCoefficientsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetEqualizationFilterCoefficients.");
  }
  return niScope_GetEqualizationFilterCoefficients(vi, channel, numberOfCoefficients, coefficients);
}

ViStatus NiScopeLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 bufferSize, ViChar description[])
{
  if (!load_status_.GetErrorExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_GetError.");
  }
  return niScope_GetError(vi, errorCode, bufferSize, description);
}

ViStatus NiScopeLibrary::ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 sizeInBytes, ViInt8 configuration[])
{
  if (!load_status_.ImportAttributeConfigurationBufferExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ImportAttributeConfigurationBuffer.");
  }
  return niScope_ImportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
}

ViStatus NiScopeLibrary::ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!load_status_.ImportAttributeConfigurationFileExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ImportAttributeConfigurationFile.");
  }
  return niScope_ImportAttributeConfigurationFile(vi, filePath);
}

ViStatus NiScopeLibrary::InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* vi)
{
  if (!load_status_.InitWithOptionsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_InitWithOptions.");
  }
  return niScope_InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
}

ViStatus NiScopeLibrary::InitiateAcquisition(ViSession vi)
{
  if (!load_status_.InitiateAcquisitionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_InitiateAcquisition.");
  }
  return niScope_InitiateAcquisition(vi);
}

ViStatus NiScopeLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!load_status_.LockSessionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_LockSession.");
  }
  return niScope_LockSession(vi, callerHasLock);
}

ViStatus NiScopeLibrary::ProbeCompensationSignalStart(ViSession vi)
{
  if (!load_status_.ProbeCompensationSignalStartExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ProbeCompensationSignalStart.");
  }
  return niScope_ProbeCompensationSignalStart(vi);
}

ViStatus NiScopeLibrary::ProbeCompensationSignalStop(ViSession vi)
{
  if (!load_status_.ProbeCompensationSignalStopExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ProbeCompensationSignalStop.");
  }
  return niScope_ProbeCompensationSignalStop(vi);
}

ViStatus NiScopeLibrary::Read(ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViReal64 waveform[], struct niScope_wfmInfo wfmInfo[])
{
  if (!load_status_.ReadExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_Read.");
  }
  return niScope_Read(vi, channelList, timeout, numSamples, waveform, wfmInfo);
}

ViStatus NiScopeLibrary::ResetDevice(ViSession vi)
{
  if (!load_status_.ResetDeviceExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ResetDevice.");
  }
  return niScope_ResetDevice(vi);
}

ViStatus NiScopeLibrary::ResetWithDefaults(ViSession vi)
{
  if (!load_status_.ResetWithDefaultsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_ResetWithDefaults.");
  }
  return niScope_ResetWithDefaults(vi);
}

ViStatus NiScopeLibrary::SendSoftwareTriggerEdge(ViSession vi, ViInt32 whichTrigger)
{
  if (!load_status_.SendSoftwareTriggerEdgeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_SendSoftwareTriggerEdge.");
  }
  return niScope_SendSoftwareTriggerEdge(vi, whichTrigger);
}

ViStatus NiScopeLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelList, ViAttr attributeId, ViBoolean value)
{
  if (!load_status_.SetAttributeViBooleanExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_SetAttributeViBoolean.");
  }
  return niScope_SetAttributeViBoolean(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelList, ViAttr attributeId, ViInt32 value)
{
  if (!load_status_.SetAttributeViInt32Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_SetAttributeViInt32.");
  }
  return niScope_SetAttributeViInt32(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::SetAttributeViInt64(ViSession vi, ViConstString channelList, ViAttr attributeId, ViInt64 value)
{
  if (!load_status_.SetAttributeViInt64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_SetAttributeViInt64.");
  }
  return niScope_SetAttributeViInt64(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelList, ViAttr attributeId, ViReal64 value)
{
  if (!load_status_.SetAttributeViReal64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_SetAttributeViReal64.");
  }
  return niScope_SetAttributeViReal64(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::SetAttributeViString(ViSession vi, ViConstString channelList, ViAttr attributeId, ViConstString value)
{
  if (!load_status_.SetAttributeViStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_SetAttributeViString.");
  }
  return niScope_SetAttributeViString(vi, channelList, attributeId, value);
}

ViStatus NiScopeLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!load_status_.UnlockSessionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_UnlockSession.");
  }
  return niScope_UnlockSession(vi, callerHasLock);
}

ViStatus NiScopeLibrary::close(ViSession vi)
{
  if (!load_status_.closeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_close.");
  }
  return niScope_close(vi);
}

ViStatus NiScopeLibrary::error_message(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!load_status_.error_messageExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_error_message.");
  }
  return niScope_error_message(vi, errorCode, errorMessage);
}

ViStatus NiScopeLibrary::reset(ViSession vi)
{
  if (!load_status_.resetExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_reset.");
  }
  return niScope_reset(vi);
}

ViStatus NiScopeLibrary::self_test(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!load_status_.self_testExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niScope_self_test.");
  }
  return niScope_self_test(vi, selfTestResult, selfTestMessage);
}

}  // namespace ni
}  // namespace scope
}  // namespace grpc
