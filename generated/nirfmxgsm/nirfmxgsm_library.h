//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-RFMXGSM
//---------------------------------------------------------------------
#ifndef NIRFMXGSM_GRPC_LIBRARY_H
#define NIRFMXGSM_GRPC_LIBRARY_H

#include "nirfmxgsm_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxgsm_grpc {

class NiRFmxGSMLibrary : public nirfmxgsm_grpc::NiRFmxGSMLibraryInterface {
 public:
  NiRFmxGSMLibrary();
  explicit NiRFmxGSMLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxGSMLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved);
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel);
  int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]);
  int32 BuildSlotString(char selectorString[], int32 slotNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 CfgAutoTSCDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoTSCDetectionEnabled);
  int32 CfgBand(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 band);
  int32 CfgBurstSynchronizationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstSynchronizationType);
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger);
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation);
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency);
  int32 CfgFrequencyARFCN(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 band, int32 arfcn);
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency);
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 minimumQuietTimeMode, float64 minimumQuietTime, int32 iqPowerEdgeLevelType, int32 enableTrigger);
  int32 CfgLinkDirection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection);
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue);
  int32 CfgNumberOfTimeslots(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfTimeslots);
  int32 CfgPowerControlLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerControlLevel);
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation);
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue);
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel);
  int32 CfgSignalType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType, int32 burstType, int32 hbFilterWidth);
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger);
  int32 CfgTSC(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 tsc);
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* done);
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]);
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy);
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]);
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]);
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists);
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal);
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal);
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal);
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal);
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal);
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal);
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]);
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal);
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal);
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal);
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession);
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut);
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]);
  int32 ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount);
  int32 ModAccCfgDroopCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 droopCompensationEnabled);
  int32 ModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellationTrace[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 demodulatedBits[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchDetectedTSC(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedTSC);
  int32 ModAccFetchDetectedTSCArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedTSC[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* maximumRMSEVM, float64* meanPeakEVM, float64* maximumPeakEVM, float64* ninetyFifthPercentileEVM, float64* meanFrequencyError, int32* peakEVMSymbol);
  int32 ModAccFetchEVMAmplitudeDroop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanAmplitudeDroop, float64* maximumAmplitudeDroop);
  int32 ModAccFetchEVMMagnitudeError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanMagnitudeError, float64* maximumMagnitudeError);
  int32 ModAccFetchEVMPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPhaseError, float64* maximumPhaseError);
  int32 ModAccFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQGainImbalance, float64* maximumIQGainImbalance, float64* meanIQOriginOffset, float64* maximumIQOriginOffset);
  int32 ModAccFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPFER(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSPhaseError, float64* maximumRMSPhaseError, float64* meanPeakPhaseError, float64* maximumPeakPhaseError, float64* meanFrequencyError, int32* peakSymbol);
  int32 ModAccFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize);
  int32 ORFSCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 ORFSCfgEvaluationSymbols(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 evaluationSymbolsStart, int32 evaluationSymbolsIncludeTSC, float64 evaluationSymbolsStop);
  int32 ORFSCfgMeasurementType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementType);
  int32 ORFSCfgModulationCustomOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 modulationCustomOffsetFrequency[], int32 arraySize);
  int32 ORFSCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled);
  int32 ORFSCfgOffsetFrequencyMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyMode);
  int32 ORFSCfgSwitchingCustomOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 switchingCustomOffsetFrequency[], int32 arraySize);
  int32 ORFSFetchModulationPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 offsetFrequency[], float32 absolutePower[], float32 relativePower[], int32 arraySize, int32* actualArraySize);
  int32 ORFSFetchModulationResultsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* modulationCarrierPower, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize);
  int32 ORFSFetchSwitchingPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 offsetFrequency[], float32 absolutePower[], float32 relativePower[], int32 arraySize, int32* actualArraySize);
  int32 ORFSFetchSwitchingResultsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* switchingCarrierPower, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize);
  int32 PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 PVTFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus);
  int32 PVTFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 upperMask[], float32 signalPower[], float32 lowerMask[], int32 arraySize, int32* actualArraySize);
  int32 PVTFetchSlotMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* slotAveragePower, float64* slotBurstWidth, int32* slotMeasurementStatus, float64* slotMaximumPower, float64* slotMinimumPower, float64* slotBurstThreshold);
  int32 PVTFetchSlotMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotAveragePower[], float64 slotBurstWidth[], int32 slotMeasurementStatus[], float64 slotMaximumPower[], float64 slotMinimumPower[], float64 slotBurstThreshold[], int32 arraySize, int32* actualArraySize);
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID);
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces);
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle);
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal);
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize);
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal);
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize);
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal);
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal);
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize);
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal);
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize);
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal);
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize);
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]);
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal);
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal);
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize);
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize);
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal);
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize);
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout);
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout);

 private:
  using AbortMeasurementsPtr = decltype(&RFmxGSM_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxGSM_AnalyzeIQ1Waveform);
  using AutoLevelPtr = decltype(&RFmxGSM_AutoLevel);
  using BuildOffsetStringPtr = decltype(&RFmxGSM_BuildOffsetString);
  using BuildSignalStringPtr = decltype(&RFmxGSM_BuildSignalString);
  using BuildSlotStringPtr = decltype(&RFmxGSM_BuildSlotString);
  using CfgAutoTSCDetectionEnabledPtr = decltype(&RFmxGSM_CfgAutoTSCDetectionEnabled);
  using CfgBandPtr = decltype(&RFmxGSM_CfgBand);
  using CfgBurstSynchronizationTypePtr = decltype(&RFmxGSM_CfgBurstSynchronizationType);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxGSM_CfgDigitalEdgeTrigger);
  using CfgExternalAttenuationPtr = decltype(&RFmxGSM_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxGSM_CfgFrequency);
  using CfgFrequencyARFCNPtr = decltype(&RFmxGSM_CfgFrequencyARFCN);
  using CfgFrequencyReferencePtr = decltype(&RFmxGSM_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxGSM_CfgIQPowerEdgeTrigger);
  using CfgLinkDirectionPtr = decltype(&RFmxGSM_CfgLinkDirection);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxGSM_CfgMechanicalAttenuation);
  using CfgNumberOfTimeslotsPtr = decltype(&RFmxGSM_CfgNumberOfTimeslots);
  using CfgPowerControlLevelPtr = decltype(&RFmxGSM_CfgPowerControlLevel);
  using CfgRFPtr = decltype(&RFmxGSM_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxGSM_CfgRFAttenuation);
  using CfgReferenceLevelPtr = decltype(&RFmxGSM_CfgReferenceLevel);
  using CfgSignalTypePtr = decltype(&RFmxGSM_CfgSignalType);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxGSM_CfgSoftwareEdgeTrigger);
  using CfgTSCPtr = decltype(&RFmxGSM_CfgTSC);
  using CheckMeasurementStatusPtr = decltype(&RFmxGSM_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxGSM_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxGSM_ClearNamedResult);
  using CloneSignalConfigurationPtr = decltype(&RFmxGSM_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxGSM_Close);
  using CommitPtr = decltype(&RFmxGSM_Commit);
  using CreateSignalConfigurationPtr = decltype(&RFmxGSM_CreateSignalConfiguration);
  using DeleteSignalConfigurationPtr = decltype(&RFmxGSM_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxGSM_DisableTrigger);
  using GetAllNamedResultNamesPtr = decltype(&RFmxGSM_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxGSM_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxGSM_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxGSM_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxGSM_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxGSM_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxGSM_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxGSM_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxGSM_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxGSM_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxGSM_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxGSM_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxGSM_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxGSM_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxGSM_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxGSM_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxGSM_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxGSM_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxGSM_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxGSM_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxGSM_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxGSM_GetError);
  using GetErrorStringPtr = decltype(&RFmxGSM_GetErrorString);
  using InitializePtr = decltype(&RFmxGSM_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxGSM_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxGSM_Initiate);
  using ModAccCfgAveragingPtr = decltype(&RFmxGSM_ModAccCfgAveraging);
  using ModAccCfgDroopCompensationEnabledPtr = decltype(&RFmxGSM_ModAccCfgDroopCompensationEnabled);
  using ModAccFetchConstellationTracePtr = decltype(&RFmxGSM_ModAccFetchConstellationTrace);
  using ModAccFetchDemodulatedBitsPtr = decltype(&RFmxGSM_ModAccFetchDemodulatedBits);
  using ModAccFetchDetectedTSCPtr = decltype(&RFmxGSM_ModAccFetchDetectedTSC);
  using ModAccFetchDetectedTSCArrayPtr = decltype(&RFmxGSM_ModAccFetchDetectedTSCArray);
  using ModAccFetchEVMPtr = decltype(&RFmxGSM_ModAccFetchEVM);
  using ModAccFetchEVMAmplitudeDroopPtr = decltype(&RFmxGSM_ModAccFetchEVMAmplitudeDroop);
  using ModAccFetchEVMMagnitudeErrorPtr = decltype(&RFmxGSM_ModAccFetchEVMMagnitudeError);
  using ModAccFetchEVMPhaseErrorPtr = decltype(&RFmxGSM_ModAccFetchEVMPhaseError);
  using ModAccFetchEVMTracePtr = decltype(&RFmxGSM_ModAccFetchEVMTrace);
  using ModAccFetchIQImpairmentsPtr = decltype(&RFmxGSM_ModAccFetchIQImpairments);
  using ModAccFetchMagnitudeErrorTracePtr = decltype(&RFmxGSM_ModAccFetchMagnitudeErrorTrace);
  using ModAccFetchPFERPtr = decltype(&RFmxGSM_ModAccFetchPFER);
  using ModAccFetchPhaseErrorTracePtr = decltype(&RFmxGSM_ModAccFetchPhaseErrorTrace);
  using ORFSCfgAveragingPtr = decltype(&RFmxGSM_ORFSCfgAveraging);
  using ORFSCfgEvaluationSymbolsPtr = decltype(&RFmxGSM_ORFSCfgEvaluationSymbols);
  using ORFSCfgMeasurementTypePtr = decltype(&RFmxGSM_ORFSCfgMeasurementType);
  using ORFSCfgModulationCustomOffsetFrequencyArrayPtr = decltype(&RFmxGSM_ORFSCfgModulationCustomOffsetFrequencyArray);
  using ORFSCfgNoiseCompensationEnabledPtr = decltype(&RFmxGSM_ORFSCfgNoiseCompensationEnabled);
  using ORFSCfgOffsetFrequencyModePtr = decltype(&RFmxGSM_ORFSCfgOffsetFrequencyMode);
  using ORFSCfgSwitchingCustomOffsetFrequencyArrayPtr = decltype(&RFmxGSM_ORFSCfgSwitchingCustomOffsetFrequencyArray);
  using ORFSFetchModulationPowerTracePtr = decltype(&RFmxGSM_ORFSFetchModulationPowerTrace);
  using ORFSFetchModulationResultsArrayPtr = decltype(&RFmxGSM_ORFSFetchModulationResultsArray);
  using ORFSFetchSwitchingPowerTracePtr = decltype(&RFmxGSM_ORFSFetchSwitchingPowerTrace);
  using ORFSFetchSwitchingResultsArrayPtr = decltype(&RFmxGSM_ORFSFetchSwitchingResultsArray);
  using PVTCfgAveragingPtr = decltype(&RFmxGSM_PVTCfgAveraging);
  using PVTFetchMeasurementStatusPtr = decltype(&RFmxGSM_PVTFetchMeasurementStatus);
  using PVTFetchPowerTracePtr = decltype(&RFmxGSM_PVTFetchPowerTrace);
  using PVTFetchSlotMeasurementPtr = decltype(&RFmxGSM_PVTFetchSlotMeasurement);
  using PVTFetchSlotMeasurementArrayPtr = decltype(&RFmxGSM_PVTFetchSlotMeasurementArray);
  using ResetAttributePtr = decltype(&RFmxGSM_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxGSM_ResetToDefault);
  using SelectMeasurementsPtr = decltype(&RFmxGSM_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxGSM_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxGSM_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxGSM_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxGSM_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxGSM_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxGSM_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxGSM_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxGSM_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxGSM_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxGSM_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxGSM_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxGSM_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxGSM_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxGSM_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxGSM_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxGSM_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxGSM_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxGSM_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxGSM_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxGSM_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxGSM_SetAttributeU8Array);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxGSM_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxGSM_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AutoLevelPtr AutoLevel;
    BuildOffsetStringPtr BuildOffsetString;
    BuildSignalStringPtr BuildSignalString;
    BuildSlotStringPtr BuildSlotString;
    CfgAutoTSCDetectionEnabledPtr CfgAutoTSCDetectionEnabled;
    CfgBandPtr CfgBand;
    CfgBurstSynchronizationTypePtr CfgBurstSynchronizationType;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyARFCNPtr CfgFrequencyARFCN;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgLinkDirectionPtr CfgLinkDirection;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgNumberOfTimeslotsPtr CfgNumberOfTimeslots;
    CfgPowerControlLevelPtr CfgPowerControlLevel;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSignalTypePtr CfgSignalType;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CfgTSCPtr CfgTSC;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    ModAccCfgAveragingPtr ModAccCfgAveraging;
    ModAccCfgDroopCompensationEnabledPtr ModAccCfgDroopCompensationEnabled;
    ModAccFetchConstellationTracePtr ModAccFetchConstellationTrace;
    ModAccFetchDemodulatedBitsPtr ModAccFetchDemodulatedBits;
    ModAccFetchDetectedTSCPtr ModAccFetchDetectedTSC;
    ModAccFetchDetectedTSCArrayPtr ModAccFetchDetectedTSCArray;
    ModAccFetchEVMPtr ModAccFetchEVM;
    ModAccFetchEVMAmplitudeDroopPtr ModAccFetchEVMAmplitudeDroop;
    ModAccFetchEVMMagnitudeErrorPtr ModAccFetchEVMMagnitudeError;
    ModAccFetchEVMPhaseErrorPtr ModAccFetchEVMPhaseError;
    ModAccFetchEVMTracePtr ModAccFetchEVMTrace;
    ModAccFetchIQImpairmentsPtr ModAccFetchIQImpairments;
    ModAccFetchMagnitudeErrorTracePtr ModAccFetchMagnitudeErrorTrace;
    ModAccFetchPFERPtr ModAccFetchPFER;
    ModAccFetchPhaseErrorTracePtr ModAccFetchPhaseErrorTrace;
    ORFSCfgAveragingPtr ORFSCfgAveraging;
    ORFSCfgEvaluationSymbolsPtr ORFSCfgEvaluationSymbols;
    ORFSCfgMeasurementTypePtr ORFSCfgMeasurementType;
    ORFSCfgModulationCustomOffsetFrequencyArrayPtr ORFSCfgModulationCustomOffsetFrequencyArray;
    ORFSCfgNoiseCompensationEnabledPtr ORFSCfgNoiseCompensationEnabled;
    ORFSCfgOffsetFrequencyModePtr ORFSCfgOffsetFrequencyMode;
    ORFSCfgSwitchingCustomOffsetFrequencyArrayPtr ORFSCfgSwitchingCustomOffsetFrequencyArray;
    ORFSFetchModulationPowerTracePtr ORFSFetchModulationPowerTrace;
    ORFSFetchModulationResultsArrayPtr ORFSFetchModulationResultsArray;
    ORFSFetchSwitchingPowerTracePtr ORFSFetchSwitchingPowerTrace;
    ORFSFetchSwitchingResultsArrayPtr ORFSFetchSwitchingResultsArray;
    PVTCfgAveragingPtr PVTCfgAveraging;
    PVTFetchMeasurementStatusPtr PVTFetchMeasurementStatus;
    PVTFetchPowerTracePtr PVTFetchPowerTrace;
    PVTFetchSlotMeasurementPtr PVTFetchSlotMeasurement;
    PVTFetchSlotMeasurementArrayPtr PVTFetchSlotMeasurementArray;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxgsm_grpc

#endif  // NIRFMXGSM_GRPC_LIBRARY_H
