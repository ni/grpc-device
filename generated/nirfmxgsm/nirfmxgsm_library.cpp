//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXGSM Metadata
//---------------------------------------------------------------------
#include "nirfmxgsm_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxGSM.dll";
#else
static const char* kLibraryName = "libnirfmxgsm.so.1";
#endif

namespace nirfmxgsm_grpc {

NiRFmxGSMLibrary::NiRFmxGSMLibrary() : NiRFmxGSMLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

NiRFmxGSMLibrary::NiRFmxGSMLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_->get_function_pointer("RFmxGSM_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_->get_function_pointer("RFmxGSM_AnalyzeIQ1Waveform"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_->get_function_pointer("RFmxGSM_AutoLevel"));
  function_pointers_.BuildOffsetString = reinterpret_cast<BuildOffsetStringPtr>(shared_library_->get_function_pointer("RFmxGSM_BuildOffsetString"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_->get_function_pointer("RFmxGSM_BuildSignalString"));
  function_pointers_.BuildSlotString = reinterpret_cast<BuildSlotStringPtr>(shared_library_->get_function_pointer("RFmxGSM_BuildSlotString"));
  function_pointers_.CfgAutoTSCDetectionEnabled = reinterpret_cast<CfgAutoTSCDetectionEnabledPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgAutoTSCDetectionEnabled"));
  function_pointers_.CfgBand = reinterpret_cast<CfgBandPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgBand"));
  function_pointers_.CfgBurstSynchronizationType = reinterpret_cast<CfgBurstSynchronizationTypePtr>(shared_library_->get_function_pointer("RFmxGSM_CfgBurstSynchronizationType"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgFrequency"));
  function_pointers_.CfgFrequencyARFCN = reinterpret_cast<CfgFrequencyARFCNPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgFrequencyARFCN"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_->get_function_pointer("RFmxGSM_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgLinkDirection = reinterpret_cast<CfgLinkDirectionPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgLinkDirection"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgMechanicalAttenuation"));
  function_pointers_.CfgNumberOfTimeslots = reinterpret_cast<CfgNumberOfTimeslotsPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgNumberOfTimeslots"));
  function_pointers_.CfgPowerControlLevel = reinterpret_cast<CfgPowerControlLevelPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgPowerControlLevel"));
  function_pointers_.CfgRF = reinterpret_cast<CfgRFPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgRF"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgReferenceLevel"));
  function_pointers_.CfgSignalType = reinterpret_cast<CfgSignalTypePtr>(shared_library_->get_function_pointer("RFmxGSM_CfgSignalType"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgSoftwareEdgeTrigger"));
  function_pointers_.CfgTSC = reinterpret_cast<CfgTSCPtr>(shared_library_->get_function_pointer("RFmxGSM_CfgTSC"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_->get_function_pointer("RFmxGSM_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_->get_function_pointer("RFmxGSM_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_->get_function_pointer("RFmxGSM_ClearNamedResult"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_->get_function_pointer("RFmxGSM_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_->get_function_pointer("RFmxGSM_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_->get_function_pointer("RFmxGSM_Commit"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_->get_function_pointer("RFmxGSM_CreateSignalConfiguration"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_->get_function_pointer("RFmxGSM_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_->get_function_pointer("RFmxGSM_DisableTrigger"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_->get_function_pointer("RFmxGSM_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_->get_function_pointer("RFmxGSM_GetErrorString"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_->get_function_pointer("RFmxGSM_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_->get_function_pointer("RFmxGSM_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_->get_function_pointer("RFmxGSM_Initiate"));
  function_pointers_.ModAccCfgAveraging = reinterpret_cast<ModAccCfgAveragingPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccCfgAveraging"));
  function_pointers_.ModAccCfgDroopCompensationEnabled = reinterpret_cast<ModAccCfgDroopCompensationEnabledPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccCfgDroopCompensationEnabled"));
  function_pointers_.ModAccFetchConstellationTrace = reinterpret_cast<ModAccFetchConstellationTracePtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchConstellationTrace"));
  function_pointers_.ModAccFetchDemodulatedBits = reinterpret_cast<ModAccFetchDemodulatedBitsPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchDemodulatedBits"));
  function_pointers_.ModAccFetchDetectedTSC = reinterpret_cast<ModAccFetchDetectedTSCPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchDetectedTSC"));
  function_pointers_.ModAccFetchDetectedTSCArray = reinterpret_cast<ModAccFetchDetectedTSCArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchDetectedTSCArray"));
  function_pointers_.ModAccFetchEVM = reinterpret_cast<ModAccFetchEVMPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchEVM"));
  function_pointers_.ModAccFetchEVMAmplitudeDroop = reinterpret_cast<ModAccFetchEVMAmplitudeDroopPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchEVMAmplitudeDroop"));
  function_pointers_.ModAccFetchEVMMagnitudeError = reinterpret_cast<ModAccFetchEVMMagnitudeErrorPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchEVMMagnitudeError"));
  function_pointers_.ModAccFetchEVMPhaseError = reinterpret_cast<ModAccFetchEVMPhaseErrorPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchEVMPhaseError"));
  function_pointers_.ModAccFetchEVMTrace = reinterpret_cast<ModAccFetchEVMTracePtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchEVMTrace"));
  function_pointers_.ModAccFetchIQImpairments = reinterpret_cast<ModAccFetchIQImpairmentsPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchIQImpairments"));
  function_pointers_.ModAccFetchMagnitudeErrorTrace = reinterpret_cast<ModAccFetchMagnitudeErrorTracePtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchMagnitudeErrorTrace"));
  function_pointers_.ModAccFetchPFER = reinterpret_cast<ModAccFetchPFERPtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchPFER"));
  function_pointers_.ModAccFetchPhaseErrorTrace = reinterpret_cast<ModAccFetchPhaseErrorTracePtr>(shared_library_->get_function_pointer("RFmxGSM_ModAccFetchPhaseErrorTrace"));
  function_pointers_.ORFSCfgAveraging = reinterpret_cast<ORFSCfgAveragingPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgAveraging"));
  function_pointers_.ORFSCfgEvaluationSymbols = reinterpret_cast<ORFSCfgEvaluationSymbolsPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgEvaluationSymbols"));
  function_pointers_.ORFSCfgMeasurementType = reinterpret_cast<ORFSCfgMeasurementTypePtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgMeasurementType"));
  function_pointers_.ORFSCfgModulationCustomOffsetFrequencyArray = reinterpret_cast<ORFSCfgModulationCustomOffsetFrequencyArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgModulationCustomOffsetFrequencyArray"));
  function_pointers_.ORFSCfgNoiseCompensationEnabled = reinterpret_cast<ORFSCfgNoiseCompensationEnabledPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgNoiseCompensationEnabled"));
  function_pointers_.ORFSCfgOffsetFrequencyMode = reinterpret_cast<ORFSCfgOffsetFrequencyModePtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgOffsetFrequencyMode"));
  function_pointers_.ORFSCfgSwitchingCustomOffsetFrequencyArray = reinterpret_cast<ORFSCfgSwitchingCustomOffsetFrequencyArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSCfgSwitchingCustomOffsetFrequencyArray"));
  function_pointers_.ORFSFetchModulationPowerTrace = reinterpret_cast<ORFSFetchModulationPowerTracePtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSFetchModulationPowerTrace"));
  function_pointers_.ORFSFetchModulationResultsArray = reinterpret_cast<ORFSFetchModulationResultsArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSFetchModulationResultsArray"));
  function_pointers_.ORFSFetchSwitchingPowerTrace = reinterpret_cast<ORFSFetchSwitchingPowerTracePtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSFetchSwitchingPowerTrace"));
  function_pointers_.ORFSFetchSwitchingResultsArray = reinterpret_cast<ORFSFetchSwitchingResultsArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_ORFSFetchSwitchingResultsArray"));
  function_pointers_.PVTCfgAveraging = reinterpret_cast<PVTCfgAveragingPtr>(shared_library_->get_function_pointer("RFmxGSM_PVTCfgAveraging"));
  function_pointers_.PVTFetchMeasurementStatus = reinterpret_cast<PVTFetchMeasurementStatusPtr>(shared_library_->get_function_pointer("RFmxGSM_PVTFetchMeasurementStatus"));
  function_pointers_.PVTFetchPowerTrace = reinterpret_cast<PVTFetchPowerTracePtr>(shared_library_->get_function_pointer("RFmxGSM_PVTFetchPowerTrace"));
  function_pointers_.PVTFetchSlotMeasurement = reinterpret_cast<PVTFetchSlotMeasurementPtr>(shared_library_->get_function_pointer("RFmxGSM_PVTFetchSlotMeasurement"));
  function_pointers_.PVTFetchSlotMeasurementArray = reinterpret_cast<PVTFetchSlotMeasurementArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_PVTFetchSlotMeasurementArray"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_->get_function_pointer("RFmxGSM_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_->get_function_pointer("RFmxGSM_ResetToDefault"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_->get_function_pointer("RFmxGSM_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_->get_function_pointer("RFmxGSM_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_->get_function_pointer("RFmxGSM_SetAttributeU8Array"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_->get_function_pointer("RFmxGSM_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_->get_function_pointer("RFmxGSM_WaitForMeasurementComplete"));
}

NiRFmxGSMLibrary::~NiRFmxGSMLibrary()
{
}

::grpc::Status NiRFmxGSMLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxGSMLibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_AbortMeasurements.");
  }
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
}

int32 NiRFmxGSMLibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_AnalyzeIQ1Waveform.");
  }
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 NiRFmxGSMLibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_AutoLevel.");
  }
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, measurementInterval, referenceLevel);
}

int32 NiRFmxGSMLibrary::BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildOffsetString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_BuildOffsetString.");
  }
  return function_pointers_.BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxGSMLibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_BuildSignalString.");
  }
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 NiRFmxGSMLibrary::BuildSlotString(char selectorString[], int32 slotNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSlotString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_BuildSlotString.");
  }
  return function_pointers_.BuildSlotString(selectorString, slotNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxGSMLibrary::CfgAutoTSCDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoTSCDetectionEnabled)
{
  if (!function_pointers_.CfgAutoTSCDetectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgAutoTSCDetectionEnabled.");
  }
  return function_pointers_.CfgAutoTSCDetectionEnabled(instrumentHandle, selectorString, autoTSCDetectionEnabled);
}

int32 NiRFmxGSMLibrary::CfgBand(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 band)
{
  if (!function_pointers_.CfgBand) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgBand.");
  }
  return function_pointers_.CfgBand(instrumentHandle, selectorString, band);
}

int32 NiRFmxGSMLibrary::CfgBurstSynchronizationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstSynchronizationType)
{
  if (!function_pointers_.CfgBurstSynchronizationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgBurstSynchronizationType.");
  }
  return function_pointers_.CfgBurstSynchronizationType(instrumentHandle, selectorString, burstSynchronizationType);
}

int32 NiRFmxGSMLibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgDigitalEdgeTrigger.");
  }
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 NiRFmxGSMLibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgExternalAttenuation.");
  }
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 NiRFmxGSMLibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgFrequency.");
  }
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 NiRFmxGSMLibrary::CfgFrequencyARFCN(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 band, int32 arfcn)
{
  if (!function_pointers_.CfgFrequencyARFCN) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgFrequencyARFCN.");
  }
  return function_pointers_.CfgFrequencyARFCN(instrumentHandle, selectorString, linkDirection, band, arfcn);
}

int32 NiRFmxGSMLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgFrequencyReference.");
  }
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 NiRFmxGSMLibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 minimumQuietTimeMode, float64 minimumQuietTime, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgIQPowerEdgeTrigger.");
  }
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, minimumQuietTimeMode, minimumQuietTime, iqPowerEdgeLevelType, enableTrigger);
}

int32 NiRFmxGSMLibrary::CfgLinkDirection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection)
{
  if (!function_pointers_.CfgLinkDirection) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgLinkDirection.");
  }
  return function_pointers_.CfgLinkDirection(instrumentHandle, selectorString, linkDirection);
}

int32 NiRFmxGSMLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgMechanicalAttenuation.");
  }
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 NiRFmxGSMLibrary::CfgNumberOfTimeslots(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfTimeslots)
{
  if (!function_pointers_.CfgNumberOfTimeslots) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgNumberOfTimeslots.");
  }
  return function_pointers_.CfgNumberOfTimeslots(instrumentHandle, selectorString, numberOfTimeslots);
}

int32 NiRFmxGSMLibrary::CfgPowerControlLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerControlLevel)
{
  if (!function_pointers_.CfgPowerControlLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgPowerControlLevel.");
  }
  return function_pointers_.CfgPowerControlLevel(instrumentHandle, selectorString, powerControlLevel);
}

int32 NiRFmxGSMLibrary::CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  if (!function_pointers_.CfgRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgRF.");
  }
  return function_pointers_.CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
}

int32 NiRFmxGSMLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgRFAttenuation.");
  }
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 NiRFmxGSMLibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgReferenceLevel.");
  }
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 NiRFmxGSMLibrary::CfgSignalType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType, int32 burstType, int32 hbFilterWidth)
{
  if (!function_pointers_.CfgSignalType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgSignalType.");
  }
  return function_pointers_.CfgSignalType(instrumentHandle, selectorString, modulationType, burstType, hbFilterWidth);
}

int32 NiRFmxGSMLibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgSoftwareEdgeTrigger.");
  }
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 NiRFmxGSMLibrary::CfgTSC(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 tsc)
{
  if (!function_pointers_.CfgTSC) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CfgTSC.");
  }
  return function_pointers_.CfgTSC(instrumentHandle, selectorString, tsc);
}

int32 NiRFmxGSMLibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* done)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CheckMeasurementStatus.");
  }
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, done);
}

int32 NiRFmxGSMLibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ClearAllNamedResults.");
  }
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 NiRFmxGSMLibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ClearNamedResult.");
  }
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
}

int32 NiRFmxGSMLibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CloneSignalConfiguration.");
  }
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 NiRFmxGSMLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_Close.");
  }
  return function_pointers_.Close(instrumentHandle, forceDestroy);
}

int32 NiRFmxGSMLibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_Commit.");
  }
  return function_pointers_.Commit(instrumentHandle, selectorString);
}

int32 NiRFmxGSMLibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_CreateSignalConfiguration.");
  }
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxGSMLibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_DeleteSignalConfiguration.");
  }
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxGSMLibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_DisableTrigger.");
  }
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
}

int32 NiRFmxGSMLibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAllNamedResultNames.");
  }
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 NiRFmxGSMLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeF32.");
  }
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeF32Array.");
  }
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeF64.");
  }
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeF64Array.");
  }
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI16.");
  }
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI32.");
  }
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI32Array.");
  }
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI64.");
  }
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI64Array.");
  }
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI8.");
  }
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeI8Array.");
  }
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeString.");
  }
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeU16.");
  }
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeU32.");
  }
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeU32Array.");
  }
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeU64Array.");
  }
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeU8.");
  }
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetAttributeU8Array.");
  }
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxGSMLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxGSMLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_Initialize.");
  }
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 NiRFmxGSMLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_InitializeFromNIRFSASession.");
  }
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 NiRFmxGSMLibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_Initiate.");
  }
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
}

int32 NiRFmxGSMLibrary::ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.ModAccCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccCfgAveraging.");
  }
  return function_pointers_.ModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxGSMLibrary::ModAccCfgDroopCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 droopCompensationEnabled)
{
  if (!function_pointers_.ModAccCfgDroopCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccCfgDroopCompensationEnabled.");
  }
  return function_pointers_.ModAccCfgDroopCompensationEnabled(instrumentHandle, selectorString, droopCompensationEnabled);
}

int32 NiRFmxGSMLibrary::ModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellationTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchConstellationTrace.");
  }
  return function_pointers_.ModAccFetchConstellationTrace(instrumentHandle, selectorString, timeout, constellationTrace, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ModAccFetchDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 demodulatedBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDemodulatedBits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchDemodulatedBits.");
  }
  return function_pointers_.ModAccFetchDemodulatedBits(instrumentHandle, selectorString, timeout, demodulatedBits, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ModAccFetchDetectedTSC(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedTSC)
{
  if (!function_pointers_.ModAccFetchDetectedTSC) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchDetectedTSC.");
  }
  return function_pointers_.ModAccFetchDetectedTSC(instrumentHandle, selectorString, timeout, detectedTSC);
}

int32 NiRFmxGSMLibrary::ModAccFetchDetectedTSCArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedTSC[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDetectedTSCArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchDetectedTSCArray.");
  }
  return function_pointers_.ModAccFetchDetectedTSCArray(instrumentHandle, selectorString, timeout, detectedTSC, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ModAccFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* maximumRMSEVM, float64* meanPeakEVM, float64* maximumPeakEVM, float64* ninetyFifthPercentileEVM, float64* meanFrequencyError, int32* peakEVMSymbol)
{
  if (!function_pointers_.ModAccFetchEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchEVM.");
  }
  return function_pointers_.ModAccFetchEVM(instrumentHandle, selectorString, timeout, meanRMSEVM, maximumRMSEVM, meanPeakEVM, maximumPeakEVM, ninetyFifthPercentileEVM, meanFrequencyError, peakEVMSymbol);
}

int32 NiRFmxGSMLibrary::ModAccFetchEVMAmplitudeDroop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanAmplitudeDroop, float64* maximumAmplitudeDroop)
{
  if (!function_pointers_.ModAccFetchEVMAmplitudeDroop) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchEVMAmplitudeDroop.");
  }
  return function_pointers_.ModAccFetchEVMAmplitudeDroop(instrumentHandle, selectorString, timeout, meanAmplitudeDroop, maximumAmplitudeDroop);
}

int32 NiRFmxGSMLibrary::ModAccFetchEVMMagnitudeError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanMagnitudeError, float64* maximumMagnitudeError)
{
  if (!function_pointers_.ModAccFetchEVMMagnitudeError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchEVMMagnitudeError.");
  }
  return function_pointers_.ModAccFetchEVMMagnitudeError(instrumentHandle, selectorString, timeout, meanMagnitudeError, maximumMagnitudeError);
}

int32 NiRFmxGSMLibrary::ModAccFetchEVMPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPhaseError, float64* maximumPhaseError)
{
  if (!function_pointers_.ModAccFetchEVMPhaseError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchEVMPhaseError.");
  }
  return function_pointers_.ModAccFetchEVMPhaseError(instrumentHandle, selectorString, timeout, meanPhaseError, maximumPhaseError);
}

int32 NiRFmxGSMLibrary::ModAccFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchEVMTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchEVMTrace.");
  }
  return function_pointers_.ModAccFetchEVMTrace(instrumentHandle, selectorString, timeout, x0, dx, evm, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQGainImbalance, float64* maximumIQGainImbalance, float64* meanIQOriginOffset, float64* maximumIQOriginOffset)
{
  if (!function_pointers_.ModAccFetchIQImpairments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchIQImpairments.");
  }
  return function_pointers_.ModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, meanIQGainImbalance, maximumIQGainImbalance, meanIQOriginOffset, maximumIQOriginOffset);
}

int32 NiRFmxGSMLibrary::ModAccFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchMagnitudeErrorTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchMagnitudeErrorTrace.");
  }
  return function_pointers_.ModAccFetchMagnitudeErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, magnitudeError, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ModAccFetchPFER(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSPhaseError, float64* maximumRMSPhaseError, float64* meanPeakPhaseError, float64* maximumPeakPhaseError, float64* meanFrequencyError, int32* peakSymbol)
{
  if (!function_pointers_.ModAccFetchPFER) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchPFER.");
  }
  return function_pointers_.ModAccFetchPFER(instrumentHandle, selectorString, timeout, meanRMSPhaseError, maximumRMSPhaseError, meanPeakPhaseError, maximumPeakPhaseError, meanFrequencyError, peakSymbol);
}

int32 NiRFmxGSMLibrary::ModAccFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPhaseErrorTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ModAccFetchPhaseErrorTrace.");
  }
  return function_pointers_.ModAccFetchPhaseErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseError, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ORFSCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.ORFSCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgAveraging.");
  }
  return function_pointers_.ORFSCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxGSMLibrary::ORFSCfgEvaluationSymbols(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 evaluationSymbolsStart, int32 evaluationSymbolsIncludeTSC, float64 evaluationSymbolsStop)
{
  if (!function_pointers_.ORFSCfgEvaluationSymbols) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgEvaluationSymbols.");
  }
  return function_pointers_.ORFSCfgEvaluationSymbols(instrumentHandle, selectorString, evaluationSymbolsStart, evaluationSymbolsIncludeTSC, evaluationSymbolsStop);
}

int32 NiRFmxGSMLibrary::ORFSCfgMeasurementType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementType)
{
  if (!function_pointers_.ORFSCfgMeasurementType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgMeasurementType.");
  }
  return function_pointers_.ORFSCfgMeasurementType(instrumentHandle, selectorString, measurementType);
}

int32 NiRFmxGSMLibrary::ORFSCfgModulationCustomOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 modulationCustomOffsetFrequency[], int32 arraySize)
{
  if (!function_pointers_.ORFSCfgModulationCustomOffsetFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgModulationCustomOffsetFrequencyArray.");
  }
  return function_pointers_.ORFSCfgModulationCustomOffsetFrequencyArray(instrumentHandle, selectorString, modulationCustomOffsetFrequency, arraySize);
}

int32 NiRFmxGSMLibrary::ORFSCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.ORFSCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgNoiseCompensationEnabled.");
  }
  return function_pointers_.ORFSCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 NiRFmxGSMLibrary::ORFSCfgOffsetFrequencyMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyMode)
{
  if (!function_pointers_.ORFSCfgOffsetFrequencyMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgOffsetFrequencyMode.");
  }
  return function_pointers_.ORFSCfgOffsetFrequencyMode(instrumentHandle, selectorString, offsetFrequencyMode);
}

int32 NiRFmxGSMLibrary::ORFSCfgSwitchingCustomOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 switchingCustomOffsetFrequency[], int32 arraySize)
{
  if (!function_pointers_.ORFSCfgSwitchingCustomOffsetFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSCfgSwitchingCustomOffsetFrequencyArray.");
  }
  return function_pointers_.ORFSCfgSwitchingCustomOffsetFrequencyArray(instrumentHandle, selectorString, switchingCustomOffsetFrequency, arraySize);
}

int32 NiRFmxGSMLibrary::ORFSFetchModulationPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 offsetFrequency[], float32 absolutePower[], float32 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ORFSFetchModulationPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSFetchModulationPowerTrace.");
  }
  return function_pointers_.ORFSFetchModulationPowerTrace(instrumentHandle, selectorString, timeout, offsetFrequency, absolutePower, relativePower, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ORFSFetchModulationResultsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* modulationCarrierPower, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ORFSFetchModulationResultsArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSFetchModulationResultsArray.");
  }
  return function_pointers_.ORFSFetchModulationResultsArray(instrumentHandle, selectorString, timeout, modulationCarrierPower, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ORFSFetchSwitchingPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 offsetFrequency[], float32 absolutePower[], float32 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ORFSFetchSwitchingPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSFetchSwitchingPowerTrace.");
  }
  return function_pointers_.ORFSFetchSwitchingPowerTrace(instrumentHandle, selectorString, timeout, offsetFrequency, absolutePower, relativePower, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ORFSFetchSwitchingResultsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* switchingCarrierPower, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ORFSFetchSwitchingResultsArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ORFSFetchSwitchingResultsArray.");
  }
  return function_pointers_.ORFSFetchSwitchingResultsArray(instrumentHandle, selectorString, timeout, switchingCarrierPower, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.PVTCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_PVTCfgAveraging.");
  }
  return function_pointers_.PVTCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxGSMLibrary::PVTFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  if (!function_pointers_.PVTFetchMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_PVTFetchMeasurementStatus.");
  }
  return function_pointers_.PVTFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 NiRFmxGSMLibrary::PVTFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 upperMask[], float32 signalPower[], float32 lowerMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_PVTFetchPowerTrace.");
  }
  return function_pointers_.PVTFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, upperMask, signalPower, lowerMask, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::PVTFetchSlotMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* slotAveragePower, float64* slotBurstWidth, int32* slotMeasurementStatus, float64* slotMaximumPower, float64* slotMinimumPower, float64* slotBurstThreshold)
{
  if (!function_pointers_.PVTFetchSlotMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_PVTFetchSlotMeasurement.");
  }
  return function_pointers_.PVTFetchSlotMeasurement(instrumentHandle, selectorString, timeout, slotAveragePower, slotBurstWidth, slotMeasurementStatus, slotMaximumPower, slotMinimumPower, slotBurstThreshold);
}

int32 NiRFmxGSMLibrary::PVTFetchSlotMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotAveragePower[], float64 slotBurstWidth[], int32 slotMeasurementStatus[], float64 slotMaximumPower[], float64 slotMinimumPower[], float64 slotBurstThreshold[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchSlotMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_PVTFetchSlotMeasurementArray.");
  }
  return function_pointers_.PVTFetchSlotMeasurementArray(instrumentHandle, selectorString, timeout, slotAveragePower, slotBurstWidth, slotMeasurementStatus, slotMaximumPower, slotMinimumPower, slotBurstThreshold, arraySize, actualArraySize);
}

int32 NiRFmxGSMLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 NiRFmxGSMLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_ResetToDefault.");
  }
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
}

int32 NiRFmxGSMLibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SelectMeasurements.");
  }
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 NiRFmxGSMLibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 NiRFmxGSMLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeF32.");
  }
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeF32Array.");
  }
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeF64.");
  }
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeF64Array.");
  }
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI16.");
  }
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI32.");
  }
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI32Array.");
  }
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI64.");
  }
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI64Array.");
  }
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI8.");
  }
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeI8Array.");
  }
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeString.");
  }
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeU16.");
  }
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeU32.");
  }
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeU32Array.");
  }
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeU64Array.");
  }
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeU8.");
  }
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxGSMLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_SetAttributeU8Array.");
  }
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxGSMLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_WaitForAcquisitionComplete.");
  }
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 NiRFmxGSMLibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxGSM_WaitForMeasurementComplete.");
  }
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxgsm_grpc
