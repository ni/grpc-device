
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFMXGSM Metadata
//---------------------------------------------------------------------
#ifndef NIRFMXGSM_GRPC_SERVICE_H
#define NIRFMXGSM_GRPC_SERVICE_H

#include <nirfmxgsm.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfmxgsm_library_interface.h"

namespace nirfmxgsm_grpc {

struct NiRFmxGSMFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiRFmxGSMFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiRFmxGSMService final : public NiRFmxGSM::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<niRFmxInstrHandle>>;

  NiRFmxGSMService(
    NiRFmxGSMLibraryInterface* library,
    ResourceRepositorySharedPtr resource_repository,
    const NiRFmxGSMFeatureToggles& feature_toggles = {});
  virtual ~NiRFmxGSMService();
  
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status GetError(::grpc::ServerContext* context, const GetErrorRequest* request, GetErrorResponse* response) override;
  ::grpc::Status GetErrorString(::grpc::ServerContext* context, const GetErrorStringRequest* request, GetErrorStringResponse* response) override;
  ::grpc::Status Initialize(::grpc::ServerContext* context, const InitializeRequest* request, InitializeResponse* response) override;
private:
  NiRFmxGSMLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;
  ::grpc::Status ConvertApiErrorStatusForNiRFmxInstrHandle(::grpc::ServerContext* context, int32_t status, niRFmxInstrHandle instrumentHandle);

  NiRFmxGSMFeatureToggles feature_toggles_;
};

} // namespace nirfmxgsm_grpc

#endif  // NIRFMXGSM_GRPC_SERVICE_H
