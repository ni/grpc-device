//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-XNET
//---------------------------------------------------------------------
#ifndef NIXNET_GRPC_LIBRARY_WRAPPER_H
#define NIXNET_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>
#include <nixnet.h>

namespace nixnet_grpc {

class NiXnetLibraryInterface {
 public:
  virtual ~NiXnetLibraryInterface() {}

  virtual nxStatus_t Blink(nxSessionRef_t interfaceRef, u32 modifier) = 0;
  virtual nxStatus_t Clear(nxSessionRef_t session) = 0;
  virtual nxStatus_t ConnectTerminals(nxSessionRef_t session, const char source[], const char destination[]) = 0;
  virtual nxStatus_t ConvertByteArrayToFramesSinglePoint(nxSessionRef_t session, u8 valueBuffer[], u32 sizeOfValueBuffer, u8 buffer[], u32 sizeOfBuffer, u32* numberOfBytesReturned) = 0;
  virtual nxStatus_t ConvertFramesToByteArraySinglePoint(nxSessionRef_t session, u8* frameBuffer, u32 numberOfBytesForFrames, u8 valueBuffer[], u32 sizeOfValueBuffer) = 0;
  virtual nxStatus_t ConvertFramesToSignalsSinglePoint(nxSessionRef_t session, u8* frameBuffer, u32 numberOfBytesForFrames, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer) = 0;
  virtual nxStatus_t ConvertSignalsToFramesSinglePoint(nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer, u8 buffer[], u32 sizeOfBuffer, u32* numberOfBytesReturned) = 0;
  virtual nxStatus_t ConvertTimestamp100nsTo1ns(nxTimestamp100ns_t from_timestamp_100ns, nxTimestamp1ns_t* to_timestamp_1ns) = 0;
  virtual nxStatus_t ConvertTimestamp1nsTo100ns(nxTimestamp1ns_t from_timestamp_1ns, nxTimestamp100ns_t* to_timestamp_100ns) = 0;
  virtual nxStatus_t CreateSession(const char databaseName[], const char clusterName[], const char list[], const char interfaceParameter[], u32 mode, nxSessionRef_t* session) = 0;
  virtual nxStatus_t CreateSessionByRef(u32 numberOfDatabaseRef, nxDatabaseRef_t arrayOfDatabaseRef[], const char interfaceParameter[], u32 mode, nxSessionRef_t* session) = 0;
  virtual nxStatus_t DbAddAlias(const char databaseAlias[], const char databaseFilepath[], u32 defaultBaudRate) = 0;
  virtual nxStatus_t DbAddAlias64(const char databaseAlias[], const char databaseFilepath[], u64 defaultBaudRate) = 0;
  virtual nxStatus_t DbCloseDatabase(nxDatabaseRef_t database, u32 closeAllRefs) = 0;
  virtual nxStatus_t DbCreateObject(nxDatabaseRef_t parentObject, u32 objectClass, const char objectName[], nxDatabaseRef_t* dbObject) = 0;
  virtual nxStatus_t DbDeleteObject(nxDatabaseRef_t dbObject) = 0;
  virtual nxStatus_t DbDeploy(const char ipAddress[], const char databaseAlias[], u32 waitForComplete, u32* percentComplete) = 0;
  virtual nxStatus_t DbFindObject(nxDatabaseRef_t parentObject, u32 objectClass, const char objectName[], nxDatabaseRef_t* dbObject) = 0;
  virtual nxStatus_t DbGetDBCAttribute(nxDatabaseRef_t dbObject, u32 mode, const char attributeName[], u32 attributeTextSize, char attributeText[], u32* isDefault) = 0;
  virtual nxStatus_t DbGetDBCAttributeSize(nxDatabaseRef_t dbObject, u32 mode, const char attributeName[], u32* attributeTextSize) = 0;
  virtual nxStatus_t DbGetDatabaseList(const char ipAddress[], u32 sizeofAliasBuffer, char aliasBuffer[], u32 sizeofFilepathBuffer, char filepathBuffer[], u32* numberOfDatabases) = 0;
  virtual nxStatus_t DbGetDatabaseListSizes(const char ipAddress[], u32* sizeofAliasBuffer, u32* sizeofFilepathBuffer) = 0;
  virtual nxStatus_t DbGetProperty(nxDatabaseRef_t dbObject, u32 propertyID, u32 propertySize, void* propertyValue) = 0;
  virtual nxStatus_t DbGetPropertySize(nxDatabaseRef_t dbObject, u32 propertyID, u32* propertySize) = 0;
  virtual nxStatus_t DbMerge(nxDatabaseRef_t targetCluster, nxDatabaseRef_t sourceObj, u32 copyMode, char prefix[], u32 waitForComplete, u32* percentComplete) = 0;
  virtual nxStatus_t DbOpenDatabase(const char databaseName[], nxDatabaseRef_t* database) = 0;
  virtual nxStatus_t DbRemoveAlias(const char databaseAlias[]) = 0;
  virtual nxStatus_t DbSaveDatabase(nxDatabaseRef_t database, const char dbFilepath[]) = 0;
  virtual nxStatus_t DbSetProperty(nxDatabaseRef_t dbObject, u32 propertyID, u32 propertySize, void* propertyValue) = 0;
  virtual nxStatus_t DbUndeploy(const char ipAddress[], const char databaseAlias[]) = 0;
  virtual nxStatus_t DisconnectTerminals(nxSessionRef_t session, const char source[], const char destination[]) = 0;
  virtual nxStatus_t Flush(nxSessionRef_t session) = 0;
  virtual nxStatus_t FutureTimeTrigger(nxSessionRef_t session, nxTimestamp1ns_t when, u32 timescale) = 0;
  virtual nxStatus_t GetProperty(nxSessionRef_t session, u32 propertyID, u32 propertySize, void* propertyValue) = 0;
  virtual nxStatus_t GetPropertySize(nxSessionRef_t session, u32 propertyID, u32* propertySize) = 0;
  virtual nxStatus_t GetSubProperty(nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32 propertySize, void* propertyValue) = 0;
  virtual nxStatus_t GetSubPropertySize(nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32* propertySize) = 0;
  virtual nxStatus_t ReadFrame(nxSessionRef_t session, u8 buffer[], u32 sizeOfBuffer, f64 timeout, u32* numberOfBytesReturned) = 0;
  virtual nxStatus_t ReadSignalSinglePoint(nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer) = 0;
  virtual nxStatus_t ReadSignalWaveform(nxSessionRef_t session, f64 timeout, nxTimestamp100ns_t* startTime, f64* deltaTime, f64 valueBuffer[], u32 sizeOfValueBuffer, u32* numberOfValuesReturned) = 0;
  virtual nxStatus_t ReadSignalXY(nxSessionRef_t session, nxTimestamp100ns_t* timeLimit, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer, u32 numPairsBuffer[], u32 sizeOfNumPairsBuffer) = 0;
  virtual nxStatus_t ReadState(nxSessionRef_t session, u32 stateID, u32 stateSize, void* stateValue, nxStatus_t* fault) = 0;
  virtual nxStatus_t ReadStateTimeTrigger(nxSessionRef_t session, f64 timeout, u32 stateSize, _nxTimeLocalNetwork_t* stateValue) = 0;
  virtual nxStatus_t SetProperty(nxSessionRef_t session, u32 propertyID, u32 propertySize, void* propertyValue) = 0;
  virtual nxStatus_t SetSubProperty(nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32 propertySize, void* propertyValue) = 0;
  virtual nxStatus_t Start(nxSessionRef_t session, u32 scope) = 0;
  virtual void StatusToString(nxStatus_t statusID, u32 sizeofString, char statusDescription[2048]) = 0;
  virtual nxStatus_t Stop(nxSessionRef_t session, u32 scope) = 0;
  virtual nxStatus_t SystemClose(nxSessionRef_t system) = 0;
  virtual nxStatus_t SystemOpen(nxSessionRef_t* system) = 0;
  virtual nxStatus_t Wait(nxSessionRef_t session, u32 condition, u32 paramIn, f64 timeout, u32* paramOut) = 0;
  virtual nxStatus_t WriteFrame(nxSessionRef_t session, u8* buffer, u32 numberOfBytesForFrames, f64 timeout) = 0;
  virtual nxStatus_t WriteSignalSinglePoint(nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer) = 0;
  virtual nxStatus_t WriteSignalWaveform(nxSessionRef_t session, f64 timeout, f64 valueBuffer[], u32 sizeOfValueBuffer) = 0;
  virtual nxStatus_t WriteSignalXY(nxSessionRef_t session, f64 timeout, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer, u32 numPairsBuffer[], u32 sizeOfNumPairsBuffer) = 0;
  virtual nxStatus_t WriteState(nxSessionRef_t session, u32 stateID, u32 stateSize, void* stateValue) = 0;
};

}  // namespace nixnet_grpc
#endif  // NIXNET_GRPC_LIBRARY_WRAPPER_H
