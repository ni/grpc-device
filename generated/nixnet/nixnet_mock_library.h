//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-XNET
//---------------------------------------------------------------------
#ifndef NIXNET_GRPC_MOCK_LIBRARY_H
#define NIXNET_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nixnet_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiXnetMockLibrary : public nixnet_grpc::NiXnetLibraryInterface {
 public:
  MOCK_METHOD(nxStatus_t, Blink, (nxSessionRef_t interfaceRef, u32 modifier), (override));
  MOCK_METHOD(nxStatus_t, Clear, (nxSessionRef_t session), (override));
  MOCK_METHOD(nxStatus_t, ConnectTerminals, (nxSessionRef_t session, const char source[], const char destination[]), (override));
  MOCK_METHOD(nxStatus_t, ConvertByteArrayToFramesSinglePoint, (nxSessionRef_t session, u8 valueBuffer[], u32 sizeOfValueBuffer, u8 buffer[], u32 sizeOfBuffer, u32* numberOfBytesReturned), (override));
  MOCK_METHOD(nxStatus_t, ConvertFramesToByteArraySinglePoint, (nxSessionRef_t session, u8* frameBuffer, u32 numberOfBytesForFrames, u8 valueBuffer[], u32 sizeOfValueBuffer), (override));
  MOCK_METHOD(nxStatus_t, ConvertFramesToSignalsSinglePoint, (nxSessionRef_t session, u8* frameBuffer, u32 numberOfBytesForFrames, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer), (override));
  MOCK_METHOD(nxStatus_t, ConvertSignalsToFramesSinglePoint, (nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer, u8 buffer[], u32 sizeOfBuffer, u32* numberOfBytesReturned), (override));
  MOCK_METHOD(nxStatus_t, ConvertTimestamp100nsTo1ns, (nxTimestamp100ns_t from_timestamp_100ns, nxTimestamp1ns_t* to_timestamp_1ns), (override));
  MOCK_METHOD(nxStatus_t, ConvertTimestamp1nsTo100ns, (nxTimestamp1ns_t from_timestamp_1ns, nxTimestamp100ns_t* to_timestamp_100ns), (override));
  MOCK_METHOD(nxStatus_t, CreateSession, (const char databaseName[], const char clusterName[], const char list[], const char interfaceParameter[], u32 mode, nxSessionRef_t* session), (override));
  MOCK_METHOD(nxStatus_t, CreateSessionByRef, (u32 numberOfDatabaseRef, nxDatabaseRef_t arrayOfDatabaseRef[], const char interfaceParameter[], u32 mode, nxSessionRef_t* session), (override));
  MOCK_METHOD(nxStatus_t, DbAddAlias, (const char databaseAlias[], const char databaseFilepath[], u32 defaultBaudRate), (override));
  MOCK_METHOD(nxStatus_t, DbAddAlias64, (const char databaseAlias[], const char databaseFilepath[], u64 defaultBaudRate), (override));
  MOCK_METHOD(nxStatus_t, DbCloseDatabase, (nxDatabaseRef_t database, u32 closeAllRefs), (override));
  MOCK_METHOD(nxStatus_t, DbCreateObject, (nxDatabaseRef_t parentObject, u32 objectClass, const char objectName[], nxDatabaseRef_t* dbObject), (override));
  MOCK_METHOD(nxStatus_t, DbDeleteObject, (nxDatabaseRef_t dbObject), (override));
  MOCK_METHOD(nxStatus_t, DbDeploy, (const char ipAddress[], const char databaseAlias[], u32 waitForComplete, u32* percentComplete), (override));
  MOCK_METHOD(nxStatus_t, DbFindObject, (nxDatabaseRef_t parentObject, u32 objectClass, const char objectName[], nxDatabaseRef_t* dbObject), (override));
  MOCK_METHOD(nxStatus_t, DbGetDBCAttribute, (nxDatabaseRef_t dbObject, u32 mode, const char attributeName[], u32 attributeTextSize, char attributeText[], u32* isDefault), (override));
  MOCK_METHOD(nxStatus_t, DbGetDBCAttributeSize, (nxDatabaseRef_t dbObject, u32 mode, const char attributeName[], u32* attributeTextSize), (override));
  MOCK_METHOD(nxStatus_t, DbGetDatabaseList, (const char ipAddress[], u32 sizeofAliasBuffer, char aliasBuffer[], u32 sizeofFilepathBuffer, char filepathBuffer[], u32* numberOfDatabases), (override));
  MOCK_METHOD(nxStatus_t, DbGetDatabaseListSizes, (const char ipAddress[], u32* sizeofAliasBuffer, u32* sizeofFilepathBuffer), (override));
  MOCK_METHOD(nxStatus_t, DbGetProperty, (nxDatabaseRef_t dbObject, u32 propertyID, u32 propertySize, void* propertyValue), (override));
  MOCK_METHOD(nxStatus_t, DbGetPropertySize, (nxDatabaseRef_t dbObject, u32 propertyID, u32* propertySize), (override));
  MOCK_METHOD(nxStatus_t, DbMerge, (nxDatabaseRef_t targetCluster, nxDatabaseRef_t sourceObj, u32 copyMode, char prefix[], u32 waitForComplete, u32* percentComplete), (override));
  MOCK_METHOD(nxStatus_t, DbOpenDatabase, (const char databaseName[], nxDatabaseRef_t* database), (override));
  MOCK_METHOD(nxStatus_t, DbRemoveAlias, (const char databaseAlias[]), (override));
  MOCK_METHOD(nxStatus_t, DbSaveDatabase, (nxDatabaseRef_t database, const char dbFilepath[]), (override));
  MOCK_METHOD(nxStatus_t, DbSetProperty, (nxDatabaseRef_t dbObject, u32 propertyID, u32 propertySize, void* propertyValue), (override));
  MOCK_METHOD(nxStatus_t, DbUndeploy, (const char ipAddress[], const char databaseAlias[]), (override));
  MOCK_METHOD(nxStatus_t, DisconnectTerminals, (nxSessionRef_t session, const char source[], const char destination[]), (override));
  MOCK_METHOD(nxStatus_t, Flush, (nxSessionRef_t session), (override));
  MOCK_METHOD(nxStatus_t, FutureTimeTrigger, (nxSessionRef_t session, nxTimestamp1ns_t when, u32 timescale), (override));
  MOCK_METHOD(nxStatus_t, GetProperty, (nxSessionRef_t session, u32 propertyID, u32 propertySize, void* propertyValue), (override));
  MOCK_METHOD(nxStatus_t, GetPropertySize, (nxSessionRef_t session, u32 propertyID, u32* propertySize), (override));
  MOCK_METHOD(nxStatus_t, GetSubProperty, (nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32 propertySize, void* propertyValue), (override));
  MOCK_METHOD(nxStatus_t, GetSubPropertySize, (nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32* propertySize), (override));
  MOCK_METHOD(nxStatus_t, ReadFrame, (nxSessionRef_t session, u8 buffer[], u32 sizeOfBuffer, f64 timeout, u32* numberOfBytesReturned), (override));
  MOCK_METHOD(nxStatus_t, ReadSignalSinglePoint, (nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer), (override));
  MOCK_METHOD(nxStatus_t, ReadSignalWaveform, (nxSessionRef_t session, f64 timeout, nxTimestamp100ns_t* startTime, f64* deltaTime, f64 valueBuffer[], u32 sizeOfValueBuffer, u32* numberOfValuesReturned), (override));
  MOCK_METHOD(nxStatus_t, ReadSignalXY, (nxSessionRef_t session, nxTimestamp100ns_t* timeLimit, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer, u32 numPairsBuffer[], u32 sizeOfNumPairsBuffer), (override));
  MOCK_METHOD(nxStatus_t, ReadState, (nxSessionRef_t session, u32 stateID, u32 stateSize, void* stateValue, nxStatus_t* fault), (override));
  MOCK_METHOD(nxStatus_t, ReadStateTimeTrigger, (nxSessionRef_t session, f64 timeout, u32 stateSize, _nxTimeLocalNetwork_t* stateValue), (override));
  MOCK_METHOD(nxStatus_t, SetProperty, (nxSessionRef_t session, u32 propertyID, u32 propertySize, void* propertyValue), (override));
  MOCK_METHOD(nxStatus_t, SetSubProperty, (nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32 propertySize, void* propertyValue), (override));
  MOCK_METHOD(nxStatus_t, Start, (nxSessionRef_t session, u32 scope), (override));
  MOCK_METHOD(void, StatusToString, (nxStatus_t statusID, u32 sizeofString, char statusDescription[2048]), (override));
  MOCK_METHOD(nxStatus_t, Stop, (nxSessionRef_t session, u32 scope), (override));
  MOCK_METHOD(nxStatus_t, SystemClose, (nxSessionRef_t system), (override));
  MOCK_METHOD(nxStatus_t, SystemOpen, (nxSessionRef_t* system), (override));
  MOCK_METHOD(nxStatus_t, Wait, (nxSessionRef_t session, u32 condition, u32 paramIn, f64 timeout, u32* paramOut), (override));
  MOCK_METHOD(nxStatus_t, WriteFrame, (nxSessionRef_t session, u8* buffer, u32 numberOfBytesForFrames, f64 timeout), (override));
  MOCK_METHOD(nxStatus_t, WriteSignalSinglePoint, (nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer), (override));
  MOCK_METHOD(nxStatus_t, WriteSignalWaveform, (nxSessionRef_t session, f64 timeout, f64 valueBuffer[], u32 sizeOfValueBuffer), (override));
  MOCK_METHOD(nxStatus_t, WriteSignalXY, (nxSessionRef_t session, f64 timeout, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer, u32 numPairsBuffer[], u32 sizeOfNumPairsBuffer), (override));
  MOCK_METHOD(nxStatus_t, WriteState, (nxSessionRef_t session, u32 stateID, u32 stateSize, void* stateValue), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIXNET_GRPC_MOCK_LIBRARY_H
