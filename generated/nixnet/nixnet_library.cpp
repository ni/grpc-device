//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-XNET Metadata
//---------------------------------------------------------------------
#include "nixnet_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nixnet.dll";
#else
static const char* kLibraryName = "libnixnet.so";
#endif

namespace nixnet_grpc {

NiXnetLibrary::NiXnetLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Blink = reinterpret_cast<BlinkPtr>(shared_library_.get_function_pointer("nxBlink"));
  function_pointers_.Clear = reinterpret_cast<ClearPtr>(shared_library_.get_function_pointer("nxClear"));
  function_pointers_.ConnectTerminals = reinterpret_cast<ConnectTerminalsPtr>(shared_library_.get_function_pointer("nxConnectTerminals"));
  function_pointers_.ConvertByteArrayToFramesSinglePoint = reinterpret_cast<ConvertByteArrayToFramesSinglePointPtr>(shared_library_.get_function_pointer("nxConvertByteArrayToFramesSinglePoint"));
  function_pointers_.ConvertFramesToByteArraySinglePoint = reinterpret_cast<ConvertFramesToByteArraySinglePointPtr>(shared_library_.get_function_pointer("nxConvertFramesToByteArraySinglePoint"));
  function_pointers_.ConvertFramesToSignalsSinglePoint = reinterpret_cast<ConvertFramesToSignalsSinglePointPtr>(shared_library_.get_function_pointer("nxConvertFramesToSignalsSinglePoint"));
  function_pointers_.ConvertSignalsToFramesSinglePoint = reinterpret_cast<ConvertSignalsToFramesSinglePointPtr>(shared_library_.get_function_pointer("nxConvertSignalsToFramesSinglePoint"));
  function_pointers_.ConvertTimestamp100nsTo1ns = reinterpret_cast<ConvertTimestamp100nsTo1nsPtr>(shared_library_.get_function_pointer("nxConvertTimestamp100nsTo1ns"));
  function_pointers_.ConvertTimestamp1nsTo100ns = reinterpret_cast<ConvertTimestamp1nsTo100nsPtr>(shared_library_.get_function_pointer("nxConvertTimestamp1nsTo100ns"));
  function_pointers_.CreateSession = reinterpret_cast<CreateSessionPtr>(shared_library_.get_function_pointer("nxCreateSession"));
  function_pointers_.CreateSessionByRef = reinterpret_cast<CreateSessionByRefPtr>(shared_library_.get_function_pointer("nxCreateSessionByRef"));
  function_pointers_.DbAddAlias = reinterpret_cast<DbAddAliasPtr>(shared_library_.get_function_pointer("nxdbAddAlias"));
  function_pointers_.DbAddAlias64 = reinterpret_cast<DbAddAlias64Ptr>(shared_library_.get_function_pointer("nxdbAddAlias64"));
  function_pointers_.DbCloseDatabase = reinterpret_cast<DbCloseDatabasePtr>(shared_library_.get_function_pointer("nxdbCloseDatabase"));
  function_pointers_.DbCreateObject = reinterpret_cast<DbCreateObjectPtr>(shared_library_.get_function_pointer("nxdbCreateObject"));
  function_pointers_.DbDeleteObject = reinterpret_cast<DbDeleteObjectPtr>(shared_library_.get_function_pointer("nxdbDeleteObject"));
  function_pointers_.DbDeploy = reinterpret_cast<DbDeployPtr>(shared_library_.get_function_pointer("nxdbDeploy"));
  function_pointers_.DbFindObject = reinterpret_cast<DbFindObjectPtr>(shared_library_.get_function_pointer("nxdbFindObject"));
  function_pointers_.DbGetDBCAttribute = reinterpret_cast<DbGetDBCAttributePtr>(shared_library_.get_function_pointer("nxdbGetDBCAttribute"));
  function_pointers_.DbGetDBCAttributeSize = reinterpret_cast<DbGetDBCAttributeSizePtr>(shared_library_.get_function_pointer("nxdbGetDBCAttributeSize"));
  function_pointers_.DbGetDatabaseList = reinterpret_cast<DbGetDatabaseListPtr>(shared_library_.get_function_pointer("nxdbGetDatabaseList"));
  function_pointers_.DbGetDatabaseListSizes = reinterpret_cast<DbGetDatabaseListSizesPtr>(shared_library_.get_function_pointer("nxdbGetDatabaseListSizes"));
  function_pointers_.DbGetProperty = reinterpret_cast<DbGetPropertyPtr>(shared_library_.get_function_pointer("nxdbGetProperty"));
  function_pointers_.DbGetPropertySize = reinterpret_cast<DbGetPropertySizePtr>(shared_library_.get_function_pointer("nxdbGetPropertySize"));
  function_pointers_.DbMerge = reinterpret_cast<DbMergePtr>(shared_library_.get_function_pointer("nxdbMerge"));
  function_pointers_.DbOpenDatabase = reinterpret_cast<DbOpenDatabasePtr>(shared_library_.get_function_pointer("nxdbOpenDatabase"));
  function_pointers_.DbRemoveAlias = reinterpret_cast<DbRemoveAliasPtr>(shared_library_.get_function_pointer("nxdbRemoveAlias"));
  function_pointers_.DbSaveDatabase = reinterpret_cast<DbSaveDatabasePtr>(shared_library_.get_function_pointer("nxdbSaveDatabase"));
  function_pointers_.DbSetProperty = reinterpret_cast<DbSetPropertyPtr>(shared_library_.get_function_pointer("nxdbSetProperty"));
  function_pointers_.DbUndeploy = reinterpret_cast<DbUndeployPtr>(shared_library_.get_function_pointer("nxdbUndeploy"));
  function_pointers_.DisconnectTerminals = reinterpret_cast<DisconnectTerminalsPtr>(shared_library_.get_function_pointer("nxDisconnectTerminals"));
  function_pointers_.Flush = reinterpret_cast<FlushPtr>(shared_library_.get_function_pointer("nxFlush"));
  function_pointers_.FutureTimeTrigger = reinterpret_cast<FutureTimeTriggerPtr>(shared_library_.get_function_pointer("nxFutureTimeTrigger"));
  function_pointers_.GetProperty = reinterpret_cast<GetPropertyPtr>(shared_library_.get_function_pointer("nxGetProperty"));
  function_pointers_.GetPropertySize = reinterpret_cast<GetPropertySizePtr>(shared_library_.get_function_pointer("nxGetPropertySize"));
  function_pointers_.GetSubProperty = reinterpret_cast<GetSubPropertyPtr>(shared_library_.get_function_pointer("nxGetSubProperty"));
  function_pointers_.GetSubPropertySize = reinterpret_cast<GetSubPropertySizePtr>(shared_library_.get_function_pointer("nxGetSubPropertySize"));
  function_pointers_.ReadFrame = reinterpret_cast<ReadFramePtr>(shared_library_.get_function_pointer("nxReadFrame"));
  function_pointers_.ReadSignalSinglePoint = reinterpret_cast<ReadSignalSinglePointPtr>(shared_library_.get_function_pointer("nxReadSignalSinglePoint"));
  function_pointers_.ReadSignalWaveform = reinterpret_cast<ReadSignalWaveformPtr>(shared_library_.get_function_pointer("nxReadSignalWaveform"));
  function_pointers_.ReadSignalXY = reinterpret_cast<ReadSignalXYPtr>(shared_library_.get_function_pointer("nxReadSignalXY"));
  function_pointers_.ReadState = reinterpret_cast<ReadStatePtr>(shared_library_.get_function_pointer("nxReadState"));
  function_pointers_.ReadStateTimeTrigger = reinterpret_cast<ReadStateTimeTriggerPtr>(shared_library_.get_function_pointer("nxReadStateTimeTrigger"));
  function_pointers_.SetProperty = reinterpret_cast<SetPropertyPtr>(shared_library_.get_function_pointer("nxSetProperty"));
  function_pointers_.SetSubProperty = reinterpret_cast<SetSubPropertyPtr>(shared_library_.get_function_pointer("nxSetSubProperty"));
  function_pointers_.Start = reinterpret_cast<StartPtr>(shared_library_.get_function_pointer("nxStart"));
  function_pointers_.StatusToString = reinterpret_cast<StatusToStringPtr>(shared_library_.get_function_pointer("nxStatusToString"));
  function_pointers_.Stop = reinterpret_cast<StopPtr>(shared_library_.get_function_pointer("nxStop"));
  function_pointers_.SystemClose = reinterpret_cast<SystemClosePtr>(shared_library_.get_function_pointer("nxSystemClose"));
  function_pointers_.SystemOpen = reinterpret_cast<SystemOpenPtr>(shared_library_.get_function_pointer("nxSystemOpen"));
  function_pointers_.Wait = reinterpret_cast<WaitPtr>(shared_library_.get_function_pointer("nxWait"));
  function_pointers_.WriteFrame = reinterpret_cast<WriteFramePtr>(shared_library_.get_function_pointer("nxWriteFrame"));
  function_pointers_.WriteSignalSinglePoint = reinterpret_cast<WriteSignalSinglePointPtr>(shared_library_.get_function_pointer("nxWriteSignalSinglePoint"));
  function_pointers_.WriteSignalWaveform = reinterpret_cast<WriteSignalWaveformPtr>(shared_library_.get_function_pointer("nxWriteSignalWaveform"));
  function_pointers_.WriteSignalXY = reinterpret_cast<WriteSignalXYPtr>(shared_library_.get_function_pointer("nxWriteSignalXY"));
  function_pointers_.WriteState = reinterpret_cast<WriteStatePtr>(shared_library_.get_function_pointer("nxWriteState"));
}

NiXnetLibrary::~NiXnetLibrary()
{
}

::grpc::Status NiXnetLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

nxStatus_t NiXnetLibrary::Blink(nxSessionRef_t interfaceRef, u32 modifier)
{
  if (!function_pointers_.Blink) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxBlink.");
  }
#if defined(_MSC_VER)
  return nxBlink(interfaceRef, modifier);
#else
  return function_pointers_.Blink(interfaceRef, modifier);
#endif
}

nxStatus_t NiXnetLibrary::Clear(nxSessionRef_t session)
{
  if (!function_pointers_.Clear) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxClear.");
  }
#if defined(_MSC_VER)
  return nxClear(session);
#else
  return function_pointers_.Clear(session);
#endif
}

nxStatus_t NiXnetLibrary::ConnectTerminals(nxSessionRef_t session, const char source[], const char destination[])
{
  if (!function_pointers_.ConnectTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConnectTerminals.");
  }
#if defined(_MSC_VER)
  return nxConnectTerminals(session, source, destination);
#else
  return function_pointers_.ConnectTerminals(session, source, destination);
#endif
}

nxStatus_t NiXnetLibrary::ConvertByteArrayToFramesSinglePoint(nxSessionRef_t session, u8 valueBuffer[], u32 sizeOfValueBuffer, u8 buffer[], u32 sizeOfBuffer, u32* numberOfBytesReturned)
{
  if (!function_pointers_.ConvertByteArrayToFramesSinglePoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConvertByteArrayToFramesSinglePoint.");
  }
#if defined(_MSC_VER)
  return nxConvertByteArrayToFramesSinglePoint(session, valueBuffer, sizeOfValueBuffer, buffer, sizeOfBuffer, numberOfBytesReturned);
#else
  return function_pointers_.ConvertByteArrayToFramesSinglePoint(session, valueBuffer, sizeOfValueBuffer, buffer, sizeOfBuffer, numberOfBytesReturned);
#endif
}

nxStatus_t NiXnetLibrary::ConvertFramesToByteArraySinglePoint(nxSessionRef_t session, u8* frameBuffer, u32 numberOfBytesForFrames, u8 valueBuffer[], u32 sizeOfValueBuffer)
{
  if (!function_pointers_.ConvertFramesToByteArraySinglePoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConvertFramesToByteArraySinglePoint.");
  }
#if defined(_MSC_VER)
  return nxConvertFramesToByteArraySinglePoint(session, frameBuffer, numberOfBytesForFrames, valueBuffer, sizeOfValueBuffer);
#else
  return function_pointers_.ConvertFramesToByteArraySinglePoint(session, frameBuffer, numberOfBytesForFrames, valueBuffer, sizeOfValueBuffer);
#endif
}

nxStatus_t NiXnetLibrary::ConvertFramesToSignalsSinglePoint(nxSessionRef_t session, u8* frameBuffer, u32 numberOfBytesForFrames, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer)
{
  if (!function_pointers_.ConvertFramesToSignalsSinglePoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConvertFramesToSignalsSinglePoint.");
  }
#if defined(_MSC_VER)
  return nxConvertFramesToSignalsSinglePoint(session, frameBuffer, numberOfBytesForFrames, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer);
#else
  return function_pointers_.ConvertFramesToSignalsSinglePoint(session, frameBuffer, numberOfBytesForFrames, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer);
#endif
}

nxStatus_t NiXnetLibrary::ConvertSignalsToFramesSinglePoint(nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer, u8 buffer[], u32 sizeOfBuffer, u32* numberOfBytesReturned)
{
  if (!function_pointers_.ConvertSignalsToFramesSinglePoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConvertSignalsToFramesSinglePoint.");
  }
#if defined(_MSC_VER)
  return nxConvertSignalsToFramesSinglePoint(session, valueBuffer, sizeOfValueBuffer, buffer, sizeOfBuffer, numberOfBytesReturned);
#else
  return function_pointers_.ConvertSignalsToFramesSinglePoint(session, valueBuffer, sizeOfValueBuffer, buffer, sizeOfBuffer, numberOfBytesReturned);
#endif
}

nxStatus_t NiXnetLibrary::ConvertTimestamp100nsTo1ns(nxTimestamp100ns_t from_timestamp_100ns, nxTimestamp1ns_t* to_timestamp_1ns)
{
  if (!function_pointers_.ConvertTimestamp100nsTo1ns) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConvertTimestamp100nsTo1ns.");
  }
#if defined(_MSC_VER)
  return nxConvertTimestamp100nsTo1ns(from_timestamp_100ns, to_timestamp_1ns);
#else
  return function_pointers_.ConvertTimestamp100nsTo1ns(from_timestamp_100ns, to_timestamp_1ns);
#endif
}

nxStatus_t NiXnetLibrary::ConvertTimestamp1nsTo100ns(nxTimestamp1ns_t from_timestamp_1ns, nxTimestamp100ns_t* to_timestamp_100ns)
{
  if (!function_pointers_.ConvertTimestamp1nsTo100ns) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxConvertTimestamp1nsTo100ns.");
  }
#if defined(_MSC_VER)
  return nxConvertTimestamp1nsTo100ns(from_timestamp_1ns, to_timestamp_100ns);
#else
  return function_pointers_.ConvertTimestamp1nsTo100ns(from_timestamp_1ns, to_timestamp_100ns);
#endif
}

nxStatus_t NiXnetLibrary::CreateSession(const char databaseName[], const char clusterName[], const char list[], const char interfaceParameter[], u32 mode, nxSessionRef_t* session)
{
  if (!function_pointers_.CreateSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxCreateSession.");
  }
#if defined(_MSC_VER)
  return nxCreateSession(databaseName, clusterName, list, interfaceParameter, mode, session);
#else
  return function_pointers_.CreateSession(databaseName, clusterName, list, interfaceParameter, mode, session);
#endif
}

nxStatus_t NiXnetLibrary::CreateSessionByRef(u32 numberOfDatabaseRef, nxDatabaseRef_t arrayOfDatabaseRef[], const char interfaceParameter[], u32 mode, nxSessionRef_t* session)
{
  if (!function_pointers_.CreateSessionByRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxCreateSessionByRef.");
  }
#if defined(_MSC_VER)
  return nxCreateSessionByRef(numberOfDatabaseRef, arrayOfDatabaseRef, interfaceParameter, mode, session);
#else
  return function_pointers_.CreateSessionByRef(numberOfDatabaseRef, arrayOfDatabaseRef, interfaceParameter, mode, session);
#endif
}

nxStatus_t NiXnetLibrary::DbAddAlias(const char databaseAlias[], const char databaseFilepath[], u32 defaultBaudRate)
{
  if (!function_pointers_.DbAddAlias) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbAddAlias.");
  }
#if defined(_MSC_VER)
  return nxdbAddAlias(databaseAlias, databaseFilepath, defaultBaudRate);
#else
  return function_pointers_.DbAddAlias(databaseAlias, databaseFilepath, defaultBaudRate);
#endif
}

nxStatus_t NiXnetLibrary::DbAddAlias64(const char databaseAlias[], const char databaseFilepath[], u64 defaultBaudRate)
{
  if (!function_pointers_.DbAddAlias64) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbAddAlias64.");
  }
#if defined(_MSC_VER)
  return nxdbAddAlias64(databaseAlias, databaseFilepath, defaultBaudRate);
#else
  return function_pointers_.DbAddAlias64(databaseAlias, databaseFilepath, defaultBaudRate);
#endif
}

nxStatus_t NiXnetLibrary::DbCloseDatabase(nxDatabaseRef_t database, u32 closeAllRefs)
{
  if (!function_pointers_.DbCloseDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbCloseDatabase.");
  }
#if defined(_MSC_VER)
  return nxdbCloseDatabase(database, closeAllRefs);
#else
  return function_pointers_.DbCloseDatabase(database, closeAllRefs);
#endif
}

nxStatus_t NiXnetLibrary::DbCreateObject(nxDatabaseRef_t parentObject, u32 objectClass, const char objectName[], nxDatabaseRef_t* dbObject)
{
  if (!function_pointers_.DbCreateObject) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbCreateObject.");
  }
#if defined(_MSC_VER)
  return nxdbCreateObject(parentObject, objectClass, objectName, dbObject);
#else
  return function_pointers_.DbCreateObject(parentObject, objectClass, objectName, dbObject);
#endif
}

nxStatus_t NiXnetLibrary::DbDeleteObject(nxDatabaseRef_t dbObject)
{
  if (!function_pointers_.DbDeleteObject) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbDeleteObject.");
  }
#if defined(_MSC_VER)
  return nxdbDeleteObject(dbObject);
#else
  return function_pointers_.DbDeleteObject(dbObject);
#endif
}

nxStatus_t NiXnetLibrary::DbDeploy(const char ipAddress[], const char databaseAlias[], u32 waitForComplete, u32* percentComplete)
{
  if (!function_pointers_.DbDeploy) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbDeploy.");
  }
#if defined(_MSC_VER)
  return nxdbDeploy(ipAddress, databaseAlias, waitForComplete, percentComplete);
#else
  return function_pointers_.DbDeploy(ipAddress, databaseAlias, waitForComplete, percentComplete);
#endif
}

nxStatus_t NiXnetLibrary::DbFindObject(nxDatabaseRef_t parentObject, u32 objectClass, const char objectName[], nxDatabaseRef_t* dbObject)
{
  if (!function_pointers_.DbFindObject) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbFindObject.");
  }
#if defined(_MSC_VER)
  return nxdbFindObject(parentObject, objectClass, objectName, dbObject);
#else
  return function_pointers_.DbFindObject(parentObject, objectClass, objectName, dbObject);
#endif
}

nxStatus_t NiXnetLibrary::DbGetDBCAttribute(nxDatabaseRef_t dbObject, u32 mode, const char attributeName[], u32 attributeTextSize, char attributeText[], u32* isDefault)
{
  if (!function_pointers_.DbGetDBCAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbGetDBCAttribute.");
  }
#if defined(_MSC_VER)
  return nxdbGetDBCAttribute(dbObject, mode, attributeName, attributeTextSize, attributeText, isDefault);
#else
  return function_pointers_.DbGetDBCAttribute(dbObject, mode, attributeName, attributeTextSize, attributeText, isDefault);
#endif
}

nxStatus_t NiXnetLibrary::DbGetDBCAttributeSize(nxDatabaseRef_t dbObject, u32 mode, const char attributeName[], u32* attributeTextSize)
{
  if (!function_pointers_.DbGetDBCAttributeSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbGetDBCAttributeSize.");
  }
#if defined(_MSC_VER)
  return nxdbGetDBCAttributeSize(dbObject, mode, attributeName, attributeTextSize);
#else
  return function_pointers_.DbGetDBCAttributeSize(dbObject, mode, attributeName, attributeTextSize);
#endif
}

nxStatus_t NiXnetLibrary::DbGetDatabaseList(const char ipAddress[], u32 sizeofAliasBuffer, char aliasBuffer[], u32 sizeofFilepathBuffer, char filepathBuffer[], u32* numberOfDatabases)
{
  if (!function_pointers_.DbGetDatabaseList) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbGetDatabaseList.");
  }
#if defined(_MSC_VER)
  return nxdbGetDatabaseList(ipAddress, sizeofAliasBuffer, aliasBuffer, sizeofFilepathBuffer, filepathBuffer, numberOfDatabases);
#else
  return function_pointers_.DbGetDatabaseList(ipAddress, sizeofAliasBuffer, aliasBuffer, sizeofFilepathBuffer, filepathBuffer, numberOfDatabases);
#endif
}

nxStatus_t NiXnetLibrary::DbGetDatabaseListSizes(const char ipAddress[], u32* sizeofAliasBuffer, u32* sizeofFilepathBuffer)
{
  if (!function_pointers_.DbGetDatabaseListSizes) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbGetDatabaseListSizes.");
  }
#if defined(_MSC_VER)
  return nxdbGetDatabaseListSizes(ipAddress, sizeofAliasBuffer, sizeofFilepathBuffer);
#else
  return function_pointers_.DbGetDatabaseListSizes(ipAddress, sizeofAliasBuffer, sizeofFilepathBuffer);
#endif
}

nxStatus_t NiXnetLibrary::DbGetProperty(nxDatabaseRef_t dbObject, u32 propertyID, u32 propertySize, void* propertyValue)
{
  if (!function_pointers_.DbGetProperty) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbGetProperty.");
  }
#if defined(_MSC_VER)
  return nxdbGetProperty(dbObject, propertyID, propertySize, propertyValue);
#else
  return function_pointers_.DbGetProperty(dbObject, propertyID, propertySize, propertyValue);
#endif
}

nxStatus_t NiXnetLibrary::DbGetPropertySize(nxDatabaseRef_t dbObject, u32 propertyID, u32* propertySize)
{
  if (!function_pointers_.DbGetPropertySize) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbGetPropertySize.");
  }
#if defined(_MSC_VER)
  return nxdbGetPropertySize(dbObject, propertyID, propertySize);
#else
  return function_pointers_.DbGetPropertySize(dbObject, propertyID, propertySize);
#endif
}

nxStatus_t NiXnetLibrary::DbMerge(nxDatabaseRef_t targetCluster, nxDatabaseRef_t sourceObj, u32 copyMode, char prefix[], u32 waitForComplete, u32* percentComplete)
{
  if (!function_pointers_.DbMerge) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbMerge.");
  }
#if defined(_MSC_VER)
  return nxdbMerge(targetCluster, sourceObj, copyMode, prefix, waitForComplete, percentComplete);
#else
  return function_pointers_.DbMerge(targetCluster, sourceObj, copyMode, prefix, waitForComplete, percentComplete);
#endif
}

nxStatus_t NiXnetLibrary::DbOpenDatabase(const char databaseName[], nxDatabaseRef_t* database)
{
  if (!function_pointers_.DbOpenDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbOpenDatabase.");
  }
#if defined(_MSC_VER)
  return nxdbOpenDatabase(databaseName, database);
#else
  return function_pointers_.DbOpenDatabase(databaseName, database);
#endif
}

nxStatus_t NiXnetLibrary::DbRemoveAlias(const char databaseAlias[])
{
  if (!function_pointers_.DbRemoveAlias) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbRemoveAlias.");
  }
#if defined(_MSC_VER)
  return nxdbRemoveAlias(databaseAlias);
#else
  return function_pointers_.DbRemoveAlias(databaseAlias);
#endif
}

nxStatus_t NiXnetLibrary::DbSaveDatabase(nxDatabaseRef_t database, const char dbFilepath[])
{
  if (!function_pointers_.DbSaveDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbSaveDatabase.");
  }
#if defined(_MSC_VER)
  return nxdbSaveDatabase(database, dbFilepath);
#else
  return function_pointers_.DbSaveDatabase(database, dbFilepath);
#endif
}

nxStatus_t NiXnetLibrary::DbSetProperty(nxDatabaseRef_t dbObject, u32 propertyID, u32 propertySize, void* propertyValue)
{
  if (!function_pointers_.DbSetProperty) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbSetProperty.");
  }
#if defined(_MSC_VER)
  return nxdbSetProperty(dbObject, propertyID, propertySize, propertyValue);
#else
  return function_pointers_.DbSetProperty(dbObject, propertyID, propertySize, propertyValue);
#endif
}

nxStatus_t NiXnetLibrary::DbUndeploy(const char ipAddress[], const char databaseAlias[])
{
  if (!function_pointers_.DbUndeploy) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxdbUndeploy.");
  }
#if defined(_MSC_VER)
  return nxdbUndeploy(ipAddress, databaseAlias);
#else
  return function_pointers_.DbUndeploy(ipAddress, databaseAlias);
#endif
}

nxStatus_t NiXnetLibrary::DisconnectTerminals(nxSessionRef_t session, const char source[], const char destination[])
{
  if (!function_pointers_.DisconnectTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxDisconnectTerminals.");
  }
#if defined(_MSC_VER)
  return nxDisconnectTerminals(session, source, destination);
#else
  return function_pointers_.DisconnectTerminals(session, source, destination);
#endif
}

nxStatus_t NiXnetLibrary::Flush(nxSessionRef_t session)
{
  if (!function_pointers_.Flush) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxFlush.");
  }
#if defined(_MSC_VER)
  return nxFlush(session);
#else
  return function_pointers_.Flush(session);
#endif
}

nxStatus_t NiXnetLibrary::FutureTimeTrigger(nxSessionRef_t session, nxTimestamp1ns_t when, u32 timescale)
{
  if (!function_pointers_.FutureTimeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxFutureTimeTrigger.");
  }
#if defined(_MSC_VER)
  return nxFutureTimeTrigger(session, when, timescale);
#else
  return function_pointers_.FutureTimeTrigger(session, when, timescale);
#endif
}

nxStatus_t NiXnetLibrary::GetProperty(nxSessionRef_t session, u32 propertyID, u32 propertySize, void* propertyValue)
{
  if (!function_pointers_.GetProperty) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxGetProperty.");
  }
#if defined(_MSC_VER)
  return nxGetProperty(session, propertyID, propertySize, propertyValue);
#else
  return function_pointers_.GetProperty(session, propertyID, propertySize, propertyValue);
#endif
}

nxStatus_t NiXnetLibrary::GetPropertySize(nxSessionRef_t session, u32 propertyID, u32* propertySize)
{
  if (!function_pointers_.GetPropertySize) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxGetPropertySize.");
  }
#if defined(_MSC_VER)
  return nxGetPropertySize(session, propertyID, propertySize);
#else
  return function_pointers_.GetPropertySize(session, propertyID, propertySize);
#endif
}

nxStatus_t NiXnetLibrary::GetSubProperty(nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32 propertySize, void* propertyValue)
{
  if (!function_pointers_.GetSubProperty) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxGetSubProperty.");
  }
#if defined(_MSC_VER)
  return nxGetSubProperty(session, activeIndex, propertyID, propertySize, propertyValue);
#else
  return function_pointers_.GetSubProperty(session, activeIndex, propertyID, propertySize, propertyValue);
#endif
}

nxStatus_t NiXnetLibrary::GetSubPropertySize(nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32* propertySize)
{
  if (!function_pointers_.GetSubPropertySize) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxGetSubPropertySize.");
  }
#if defined(_MSC_VER)
  return nxGetSubPropertySize(session, activeIndex, propertyID, propertySize);
#else
  return function_pointers_.GetSubPropertySize(session, activeIndex, propertyID, propertySize);
#endif
}

nxStatus_t NiXnetLibrary::ReadFrame(nxSessionRef_t session, u8 buffer[], u32 sizeOfBuffer, f64 timeout, u32* numberOfBytesReturned)
{
  if (!function_pointers_.ReadFrame) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxReadFrame.");
  }
#if defined(_MSC_VER)
  return nxReadFrame(session, buffer, sizeOfBuffer, timeout, numberOfBytesReturned);
#else
  return function_pointers_.ReadFrame(session, buffer, sizeOfBuffer, timeout, numberOfBytesReturned);
#endif
}

nxStatus_t NiXnetLibrary::ReadSignalSinglePoint(nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer)
{
  if (!function_pointers_.ReadSignalSinglePoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxReadSignalSinglePoint.");
  }
#if defined(_MSC_VER)
  return nxReadSignalSinglePoint(session, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer);
#else
  return function_pointers_.ReadSignalSinglePoint(session, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer);
#endif
}

nxStatus_t NiXnetLibrary::ReadSignalWaveform(nxSessionRef_t session, f64 timeout, nxTimestamp100ns_t* startTime, f64* deltaTime, f64 valueBuffer[], u32 sizeOfValueBuffer, u32* numberOfValuesReturned)
{
  if (!function_pointers_.ReadSignalWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxReadSignalWaveform.");
  }
#if defined(_MSC_VER)
  return nxReadSignalWaveform(session, timeout, startTime, deltaTime, valueBuffer, sizeOfValueBuffer, numberOfValuesReturned);
#else
  return function_pointers_.ReadSignalWaveform(session, timeout, startTime, deltaTime, valueBuffer, sizeOfValueBuffer, numberOfValuesReturned);
#endif
}

nxStatus_t NiXnetLibrary::ReadSignalXY(nxSessionRef_t session, nxTimestamp100ns_t* timeLimit, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer, u32 numPairsBuffer[], u32 sizeOfNumPairsBuffer)
{
  if (!function_pointers_.ReadSignalXY) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxReadSignalXY.");
  }
#if defined(_MSC_VER)
  return nxReadSignalXY(session, timeLimit, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer, numPairsBuffer, sizeOfNumPairsBuffer);
#else
  return function_pointers_.ReadSignalXY(session, timeLimit, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer, numPairsBuffer, sizeOfNumPairsBuffer);
#endif
}

nxStatus_t NiXnetLibrary::ReadState(nxSessionRef_t session, u32 stateID, u32 stateSize, void* stateValue, nxStatus_t* fault)
{
  if (!function_pointers_.ReadState) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxReadState.");
  }
#if defined(_MSC_VER)
  return nxReadState(session, stateID, stateSize, stateValue, fault);
#else
  return function_pointers_.ReadState(session, stateID, stateSize, stateValue, fault);
#endif
}

nxStatus_t NiXnetLibrary::ReadStateTimeTrigger(nxSessionRef_t session, f64 timeout, u32 stateSize, _nxTimeLocalNetwork_t* stateValue)
{
  if (!function_pointers_.ReadStateTimeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxReadStateTimeTrigger.");
  }
#if defined(_MSC_VER)
  return nxReadStateTimeTrigger(session, timeout, stateSize, stateValue);
#else
  return function_pointers_.ReadStateTimeTrigger(session, timeout, stateSize, stateValue);
#endif
}

nxStatus_t NiXnetLibrary::SetProperty(nxSessionRef_t session, u32 propertyID, u32 propertySize, void* propertyValue)
{
  if (!function_pointers_.SetProperty) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxSetProperty.");
  }
#if defined(_MSC_VER)
  return nxSetProperty(session, propertyID, propertySize, propertyValue);
#else
  return function_pointers_.SetProperty(session, propertyID, propertySize, propertyValue);
#endif
}

nxStatus_t NiXnetLibrary::SetSubProperty(nxSessionRef_t session, u32 activeIndex, u32 propertyID, u32 propertySize, void* propertyValue)
{
  if (!function_pointers_.SetSubProperty) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxSetSubProperty.");
  }
#if defined(_MSC_VER)
  return nxSetSubProperty(session, activeIndex, propertyID, propertySize, propertyValue);
#else
  return function_pointers_.SetSubProperty(session, activeIndex, propertyID, propertySize, propertyValue);
#endif
}

nxStatus_t NiXnetLibrary::Start(nxSessionRef_t session, u32 scope)
{
  if (!function_pointers_.Start) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxStart.");
  }
#if defined(_MSC_VER)
  return nxStart(session, scope);
#else
  return function_pointers_.Start(session, scope);
#endif
}

void NiXnetLibrary::StatusToString(nxStatus_t statusID, u32 sizeofString, char statusDescription[2048])
{
  if (!function_pointers_.StatusToString) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxStatusToString.");
  }
#if defined(_MSC_VER)
  return nxStatusToString(statusID, sizeofString, statusDescription);
#else
  return function_pointers_.StatusToString(statusID, sizeofString, statusDescription);
#endif
}

nxStatus_t NiXnetLibrary::Stop(nxSessionRef_t session, u32 scope)
{
  if (!function_pointers_.Stop) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxStop.");
  }
#if defined(_MSC_VER)
  return nxStop(session, scope);
#else
  return function_pointers_.Stop(session, scope);
#endif
}

nxStatus_t NiXnetLibrary::SystemClose(nxSessionRef_t system)
{
  if (!function_pointers_.SystemClose) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxSystemClose.");
  }
#if defined(_MSC_VER)
  return nxSystemClose(system);
#else
  return function_pointers_.SystemClose(system);
#endif
}

nxStatus_t NiXnetLibrary::SystemOpen(nxSessionRef_t* system)
{
  if (!function_pointers_.SystemOpen) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxSystemOpen.");
  }
#if defined(_MSC_VER)
  return nxSystemOpen(system);
#else
  return function_pointers_.SystemOpen(system);
#endif
}

nxStatus_t NiXnetLibrary::Wait(nxSessionRef_t session, u32 condition, u32 paramIn, f64 timeout, u32* paramOut)
{
  if (!function_pointers_.Wait) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxWait.");
  }
#if defined(_MSC_VER)
  return nxWait(session, condition, paramIn, timeout, paramOut);
#else
  return function_pointers_.Wait(session, condition, paramIn, timeout, paramOut);
#endif
}

nxStatus_t NiXnetLibrary::WriteFrame(nxSessionRef_t session, u8* buffer, u32 numberOfBytesForFrames, f64 timeout)
{
  if (!function_pointers_.WriteFrame) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxWriteFrame.");
  }
#if defined(_MSC_VER)
  return nxWriteFrame(session, buffer, numberOfBytesForFrames, timeout);
#else
  return function_pointers_.WriteFrame(session, buffer, numberOfBytesForFrames, timeout);
#endif
}

nxStatus_t NiXnetLibrary::WriteSignalSinglePoint(nxSessionRef_t session, f64 valueBuffer[], u32 sizeOfValueBuffer)
{
  if (!function_pointers_.WriteSignalSinglePoint) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxWriteSignalSinglePoint.");
  }
#if defined(_MSC_VER)
  return nxWriteSignalSinglePoint(session, valueBuffer, sizeOfValueBuffer);
#else
  return function_pointers_.WriteSignalSinglePoint(session, valueBuffer, sizeOfValueBuffer);
#endif
}

nxStatus_t NiXnetLibrary::WriteSignalWaveform(nxSessionRef_t session, f64 timeout, f64 valueBuffer[], u32 sizeOfValueBuffer)
{
  if (!function_pointers_.WriteSignalWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxWriteSignalWaveform.");
  }
#if defined(_MSC_VER)
  return nxWriteSignalWaveform(session, timeout, valueBuffer, sizeOfValueBuffer);
#else
  return function_pointers_.WriteSignalWaveform(session, timeout, valueBuffer, sizeOfValueBuffer);
#endif
}

nxStatus_t NiXnetLibrary::WriteSignalXY(nxSessionRef_t session, f64 timeout, f64 valueBuffer[], u32 sizeOfValueBuffer, nxTimestamp100ns_t timestampBuffer[], u32 sizeOfTimestampBuffer, u32 numPairsBuffer[], u32 sizeOfNumPairsBuffer)
{
  if (!function_pointers_.WriteSignalXY) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxWriteSignalXY.");
  }
#if defined(_MSC_VER)
  return nxWriteSignalXY(session, timeout, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer, numPairsBuffer, sizeOfNumPairsBuffer);
#else
  return function_pointers_.WriteSignalXY(session, timeout, valueBuffer, sizeOfValueBuffer, timestampBuffer, sizeOfTimestampBuffer, numPairsBuffer, sizeOfNumPairsBuffer);
#endif
}

nxStatus_t NiXnetLibrary::WriteState(nxSessionRef_t session, u32 stateID, u32 stateSize, void* stateValue)
{
  if (!function_pointers_.WriteState) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxWriteState.");
  }
#if defined(_MSC_VER)
  return nxWriteState(session, stateID, stateSize, stateValue);
#else
  return function_pointers_.WriteState(session, stateID, stateSize, stateValue);
#endif
}

}  // namespace nixnet_grpc
