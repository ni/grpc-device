//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-DAQMX Metadata
//---------------------------------------------------------------------
#include "nidaqmx_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nicaiu.dll";
#else
static const char* kLibraryName = "libnidaqmx.so";
#endif

namespace nidaqmx_grpc {

NiDAQmxLibrary::NiDAQmxLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AddGlobalChansToTask = reinterpret_cast<AddGlobalChansToTaskPtr>(shared_library_.get_function_pointer("DAQmxAddGlobalChansToTask"));
  function_pointers_.ClearTask = reinterpret_cast<ClearTaskPtr>(shared_library_.get_function_pointer("DAQmxClearTask"));
  function_pointers_.CreateAIAccel4WireDCVoltageChan = reinterpret_cast<CreateAIAccel4WireDCVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIAccel4WireDCVoltageChan"));
  function_pointers_.CreateAIAccelChan = reinterpret_cast<CreateAIAccelChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIAccelChan"));
  function_pointers_.CreateAIAccelChargeChan = reinterpret_cast<CreateAIAccelChargeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIAccelChargeChan"));
  function_pointers_.CreateAIBridgeChan = reinterpret_cast<CreateAIBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIBridgeChan"));
  function_pointers_.CreateAIChargeChan = reinterpret_cast<CreateAIChargeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIChargeChan"));
  function_pointers_.CreateAICurrentChan = reinterpret_cast<CreateAICurrentChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAICurrentChan"));
  function_pointers_.CreateAICurrentRMSChan = reinterpret_cast<CreateAICurrentRMSChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAICurrentRMSChan"));
  function_pointers_.CreateAIForceBridgePolynomialChan = reinterpret_cast<CreateAIForceBridgePolynomialChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceBridgePolynomialChan"));
  function_pointers_.CreateAIForceBridgeTableChan = reinterpret_cast<CreateAIForceBridgeTableChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceBridgeTableChan"));
  function_pointers_.CreateAIForceBridgeTwoPointLinChan = reinterpret_cast<CreateAIForceBridgeTwoPointLinChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceBridgeTwoPointLinChan"));
  function_pointers_.CreateAIFreqVoltageChan = reinterpret_cast<CreateAIFreqVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIFreqVoltageChan"));
  function_pointers_.CreateAIMicrophoneChan = reinterpret_cast<CreateAIMicrophoneChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIMicrophoneChan"));
  function_pointers_.CreateAIPosEddyCurrProxProbeChan = reinterpret_cast<CreateAIPosEddyCurrProxProbeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPosEddyCurrProxProbeChan"));
  function_pointers_.CreateAIPosLVDTChan = reinterpret_cast<CreateAIPosLVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPosLVDTChan"));
  function_pointers_.CreateAIPosRVDTChan = reinterpret_cast<CreateAIPosRVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPosRVDTChan"));
  function_pointers_.CreateAIPressureBridgePolynomialChan = reinterpret_cast<CreateAIPressureBridgePolynomialChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPressureBridgePolynomialChan"));
  function_pointers_.CreateAIPressureBridgeTableChan = reinterpret_cast<CreateAIPressureBridgeTableChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPressureBridgeTableChan"));
  function_pointers_.CreateAIPressureBridgeTwoPointLinChan = reinterpret_cast<CreateAIPressureBridgeTwoPointLinChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPressureBridgeTwoPointLinChan"));
  function_pointers_.CreateAIResistanceChan = reinterpret_cast<CreateAIResistanceChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIResistanceChan"));
  function_pointers_.CreateAIStrainGageChan = reinterpret_cast<CreateAIStrainGageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIStrainGageChan"));
  function_pointers_.CreateAITorqueBridgePolynomialChan = reinterpret_cast<CreateAITorqueBridgePolynomialChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITorqueBridgePolynomialChan"));
  function_pointers_.CreateAITorqueBridgeTableChan = reinterpret_cast<CreateAITorqueBridgeTableChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITorqueBridgeTableChan"));
  function_pointers_.CreateAITorqueBridgeTwoPointLinChan = reinterpret_cast<CreateAITorqueBridgeTwoPointLinChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITorqueBridgeTwoPointLinChan"));
  function_pointers_.CreateAIVelocityIEPEChan = reinterpret_cast<CreateAIVelocityIEPEChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVelocityIEPEChan"));
  function_pointers_.CreateAIVoltageChan = reinterpret_cast<CreateAIVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVoltageChan"));
  function_pointers_.CreateAIVoltageChanWithExcit = reinterpret_cast<CreateAIVoltageChanWithExcitPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVoltageChanWithExcit"));
  function_pointers_.CreateAIVoltageRMSChan = reinterpret_cast<CreateAIVoltageRMSChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVoltageRMSChan"));
  function_pointers_.CreateAOCurrentChan = reinterpret_cast<CreateAOCurrentChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAOCurrentChan"));
  function_pointers_.CreateAOFuncGenChan = reinterpret_cast<CreateAOFuncGenChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAOFuncGenChan"));
  function_pointers_.CreateAOVoltageChan = reinterpret_cast<CreateAOVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAOVoltageChan"));
  function_pointers_.CreateCIAngEncoderChan = reinterpret_cast<CreateCIAngEncoderChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIAngEncoderChan"));
  function_pointers_.CreateCIAngVelocityChan = reinterpret_cast<CreateCIAngVelocityChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIAngVelocityChan"));
  function_pointers_.CreateCICountEdgesChan = reinterpret_cast<CreateCICountEdgesChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCICountEdgesChan"));
  function_pointers_.CreateCIDutyCycleChan = reinterpret_cast<CreateCIDutyCycleChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIDutyCycleChan"));
  function_pointers_.CreateCIFreqChan = reinterpret_cast<CreateCIFreqChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIFreqChan"));
  function_pointers_.CreateCIGPSTimestampChan = reinterpret_cast<CreateCIGPSTimestampChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIGPSTimestampChan"));
  function_pointers_.CreateCILinEncoderChan = reinterpret_cast<CreateCILinEncoderChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCILinEncoderChan"));
  function_pointers_.CreateCILinVelocityChan = reinterpret_cast<CreateCILinVelocityChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCILinVelocityChan"));
  function_pointers_.CreateCIPeriodChan = reinterpret_cast<CreateCIPeriodChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPeriodChan"));
  function_pointers_.CreateCIPulseChanFreq = reinterpret_cast<CreateCIPulseChanFreqPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseChanFreq"));
  function_pointers_.CreateCIPulseChanTicks = reinterpret_cast<CreateCIPulseChanTicksPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseChanTicks"));
  function_pointers_.CreateCIPulseChanTime = reinterpret_cast<CreateCIPulseChanTimePtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseChanTime"));
  function_pointers_.CreateCIPulseWidthChan = reinterpret_cast<CreateCIPulseWidthChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseWidthChan"));
  function_pointers_.CreateCISemiPeriodChan = reinterpret_cast<CreateCISemiPeriodChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCISemiPeriodChan"));
  function_pointers_.CreateCITwoEdgeSepChan = reinterpret_cast<CreateCITwoEdgeSepChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCITwoEdgeSepChan"));
  function_pointers_.CreateCOPulseChanFreq = reinterpret_cast<CreateCOPulseChanFreqPtr>(shared_library_.get_function_pointer("DAQmxCreateCOPulseChanFreq"));
  function_pointers_.CreateCOPulseChanTicks = reinterpret_cast<CreateCOPulseChanTicksPtr>(shared_library_.get_function_pointer("DAQmxCreateCOPulseChanTicks"));
  function_pointers_.CreateCOPulseChanTime = reinterpret_cast<CreateCOPulseChanTimePtr>(shared_library_.get_function_pointer("DAQmxCreateCOPulseChanTime"));
  function_pointers_.CreateDIChan = reinterpret_cast<CreateDIChanPtr>(shared_library_.get_function_pointer("DAQmxCreateDIChan"));
  function_pointers_.CreateDOChan = reinterpret_cast<CreateDOChanPtr>(shared_library_.get_function_pointer("DAQmxCreateDOChan"));
  function_pointers_.CreateTEDSAIAccelChan = reinterpret_cast<CreateTEDSAIAccelChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIAccelChan"));
  function_pointers_.CreateTEDSAIBridgeChan = reinterpret_cast<CreateTEDSAIBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIBridgeChan"));
  function_pointers_.CreateTEDSAICurrentChan = reinterpret_cast<CreateTEDSAICurrentChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAICurrentChan"));
  function_pointers_.CreateTEDSAIForceBridgeChan = reinterpret_cast<CreateTEDSAIForceBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIForceBridgeChan"));
  function_pointers_.CreateTEDSAIMicrophoneChan = reinterpret_cast<CreateTEDSAIMicrophoneChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIMicrophoneChan"));
  function_pointers_.CreateTEDSAIPosLVDTChan = reinterpret_cast<CreateTEDSAIPosLVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIPosLVDTChan"));
  function_pointers_.CreateTEDSAIPosRVDTChan = reinterpret_cast<CreateTEDSAIPosRVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIPosRVDTChan"));
  function_pointers_.CreateTEDSAIPressureBridgeChan = reinterpret_cast<CreateTEDSAIPressureBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIPressureBridgeChan"));
  function_pointers_.CreateTEDSAIResistanceChan = reinterpret_cast<CreateTEDSAIResistanceChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIResistanceChan"));
  function_pointers_.CreateTEDSAIStrainGageChan = reinterpret_cast<CreateTEDSAIStrainGageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIStrainGageChan"));
  function_pointers_.CreateTEDSAITorqueBridgeChan = reinterpret_cast<CreateTEDSAITorqueBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAITorqueBridgeChan"));
  function_pointers_.CreateTEDSAIVoltageChan = reinterpret_cast<CreateTEDSAIVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIVoltageChan"));
  function_pointers_.CreateTEDSAIVoltageChanWithExcit = reinterpret_cast<CreateTEDSAIVoltageChanWithExcitPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIVoltageChanWithExcit"));
  function_pointers_.CreateTask = reinterpret_cast<CreateTaskPtr>(shared_library_.get_function_pointer("DAQmxCreateTask"));
  function_pointers_.GetAIChanCalCalDate = reinterpret_cast<GetAIChanCalCalDatePtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalCalDate"));
  function_pointers_.GetAIChanCalExpDate = reinterpret_cast<GetAIChanCalExpDatePtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalExpDate"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("DAQmxGetErrorString"));
  function_pointers_.GetNthTaskChannel = reinterpret_cast<GetNthTaskChannelPtr>(shared_library_.get_function_pointer("DAQmxGetNthTaskChannel"));
  function_pointers_.GetNthTaskDevice = reinterpret_cast<GetNthTaskDevicePtr>(shared_library_.get_function_pointer("DAQmxGetNthTaskDevice"));
  function_pointers_.IsTaskDone = reinterpret_cast<IsTaskDonePtr>(shared_library_.get_function_pointer("DAQmxIsTaskDone"));
  function_pointers_.ReadAnalogF64 = reinterpret_cast<ReadAnalogF64Ptr>(shared_library_.get_function_pointer("DAQmxReadAnalogF64"));
  function_pointers_.ReadDigitalU16 = reinterpret_cast<ReadDigitalU16Ptr>(shared_library_.get_function_pointer("DAQmxReadDigitalU16"));
  function_pointers_.ReadDigitalU8 = reinterpret_cast<ReadDigitalU8Ptr>(shared_library_.get_function_pointer("DAQmxReadDigitalU8"));
  function_pointers_.SetAIChanCalCalDate = reinterpret_cast<SetAIChanCalCalDatePtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalCalDate"));
  function_pointers_.SetAIChanCalExpDate = reinterpret_cast<SetAIChanCalExpDatePtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalExpDate"));
  function_pointers_.StartTask = reinterpret_cast<StartTaskPtr>(shared_library_.get_function_pointer("DAQmxStartTask"));
  function_pointers_.StopTask = reinterpret_cast<StopTaskPtr>(shared_library_.get_function_pointer("DAQmxStopTask"));
  function_pointers_.TaskControl = reinterpret_cast<TaskControlPtr>(shared_library_.get_function_pointer("DAQmxTaskControl"));
  function_pointers_.WaitUntilTaskDone = reinterpret_cast<WaitUntilTaskDonePtr>(shared_library_.get_function_pointer("DAQmxWaitUntilTaskDone"));
  function_pointers_.WriteAnalogF64 = reinterpret_cast<WriteAnalogF64Ptr>(shared_library_.get_function_pointer("DAQmxWriteAnalogF64"));
  function_pointers_.WriteDigitalU16 = reinterpret_cast<WriteDigitalU16Ptr>(shared_library_.get_function_pointer("DAQmxWriteDigitalU16"));
  function_pointers_.WriteDigitalU8 = reinterpret_cast<WriteDigitalU8Ptr>(shared_library_.get_function_pointer("DAQmxWriteDigitalU8"));
}

NiDAQmxLibrary::~NiDAQmxLibrary()
{
}

::grpc::Status NiDAQmxLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiDAQmxLibrary::AddGlobalChansToTask(TaskHandle task, const char channelNames[])
{
  if (!function_pointers_.AddGlobalChansToTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxAddGlobalChansToTask.");
  }
#if defined(_MSC_VER)
  return DAQmxAddGlobalChansToTask(task, channelNames);
#else
  return function_pointers_.AddGlobalChansToTask(task, channelNames);
#endif
}

int32 NiDAQmxLibrary::ClearTask(TaskHandle task)
{
  if (!function_pointers_.ClearTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxClearTask.");
  }
#if defined(_MSC_VER)
  return DAQmxClearTask(task);
#else
  return function_pointers_.ClearTask(task);
#endif
}

int32 NiDAQmxLibrary::CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  if (!function_pointers_.CreateAIAccel4WireDCVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIAccel4WireDCVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#else
  return function_pointers_.CreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIAccelChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIAccelChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIAccelChargeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIAccelChargeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#else
  return function_pointers_.CreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[])
{
  if (!function_pointers_.CreateAIBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
#else
  return function_pointers_.CreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAIChargeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIChargeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAICurrentChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAICurrentChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#else
  return function_pointers_.CreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAICurrentRMSChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAICurrentRMSChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#else
  return function_pointers_.CreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceBridgePolynomialChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceBridgePolynomialChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceBridgeTableChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceBridgeTableChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceBridgeTwoPointLinChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceBridgeTwoPointLinChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[])
{
  if (!function_pointers_.CreateAIFreqVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIFreqVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
#else
  return function_pointers_.CreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIMicrophoneChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIMicrophoneChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPosEddyCurrProxProbeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPosEddyCurrProxProbeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#else
  return function_pointers_.CreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPosLVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPosLVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPosRVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPosRVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPressureBridgePolynomialChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPressureBridgePolynomialChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPressureBridgeTableChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPressureBridgeTableChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPressureBridgeTwoPointLinChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPressureBridgeTwoPointLinChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIResistanceChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIResistanceChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[])
{
  if (!function_pointers_.CreateAIStrainGageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIStrainGageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
#else
  return function_pointers_.CreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAITorqueBridgePolynomialChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITorqueBridgePolynomialChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAITorqueBridgeTableChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITorqueBridgeTableChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAITorqueBridgeTwoPointLinChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITorqueBridgeTwoPointLinChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVelocityIEPEChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVelocityIEPEChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVoltageChanWithExcit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVoltageChanWithExcit.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#else
  return function_pointers_.CreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVoltageRMSChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVoltageRMSChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAOCurrentChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAOCurrentChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset)
{
  if (!function_pointers_.CreateAOFuncGenChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAOFuncGenChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
#else
  return function_pointers_.CreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
#endif
}

int32 NiDAQmxLibrary::CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAOVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAOVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[])
{
  if (!function_pointers_.CreateCIAngEncoderChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIAngEncoderChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
#else
  return function_pointers_.CreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[])
{
  if (!function_pointers_.CreateCIAngVelocityChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIAngVelocityChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName);
#else
  return function_pointers_.CreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection)
{
  if (!function_pointers_.CreateCICountEdgesChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCICountEdgesChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection);
#else
  return function_pointers_.CreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection);
#endif
}

int32 NiDAQmxLibrary::CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[])
{
  if (!function_pointers_.CreateCIDutyCycleChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIDutyCycleChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName);
#else
  return function_pointers_.CreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  if (!function_pointers_.CreateCIFreqChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIFreqChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#else
  return function_pointers_.CreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[])
{
  if (!function_pointers_.CreateCIGPSTimestampChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIGPSTimestampChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
#else
  return function_pointers_.CreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[])
{
  if (!function_pointers_.CreateCILinEncoderChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCILinEncoderChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, distPerPulse, initialPos, customScaleName);
#else
  return function_pointers_.CreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, distPerPulse, initialPos, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[])
{
  if (!function_pointers_.CreateCILinVelocityChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCILinVelocityChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName);
#else
  return function_pointers_.CreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  if (!function_pointers_.CreateCIPeriodChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPeriodChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#else
  return function_pointers_.CreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  if (!function_pointers_.CreateCIPulseChanFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseChanFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#else
  return function_pointers_.CreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal)
{
  if (!function_pointers_.CreateCIPulseChanTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseChanTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
#else
  return function_pointers_.CreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  if (!function_pointers_.CreateCIPulseChanTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseChanTime.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#else
  return function_pointers_.CreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[])
{
  if (!function_pointers_.CreateCIPulseWidthChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseWidthChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
#else
  return function_pointers_.CreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateCISemiPeriodChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCISemiPeriodChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[])
{
  if (!function_pointers_.CreateCITwoEdgeSepChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCITwoEdgeSepChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
#else
  return function_pointers_.CreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle)
{
  if (!function_pointers_.CreateCOPulseChanFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCOPulseChanFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
#else
  return function_pointers_.CreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
#endif
}

int32 NiDAQmxLibrary::CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks)
{
  if (!function_pointers_.CreateCOPulseChanTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCOPulseChanTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
#else
  return function_pointers_.CreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
#endif
}

int32 NiDAQmxLibrary::CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime)
{
  if (!function_pointers_.CreateCOPulseChanTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCOPulseChanTime.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
#else
  return function_pointers_.CreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
#endif
}

int32 NiDAQmxLibrary::CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  if (!function_pointers_.CreateDIChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateDIChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateDIChan(task, lines, nameToAssignToLines, lineGrouping);
#else
  return function_pointers_.CreateDIChan(task, lines, nameToAssignToLines, lineGrouping);
#endif
}

int32 NiDAQmxLibrary::CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  if (!function_pointers_.CreateDOChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateDOChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateDOChan(task, lines, nameToAssignToLines, lineGrouping);
#else
  return function_pointers_.CreateDOChan(task, lines, nameToAssignToLines, lineGrouping);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIAccelChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIAccelChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAICurrentChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAICurrentChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIForceBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIForceBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIMicrophoneChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIMicrophoneChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIPosLVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIPosLVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIPosRVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIPosRVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIPressureBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIPressureBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIResistanceChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIResistanceChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIStrainGageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIStrainGageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
#else
  return function_pointers_.CreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAITorqueBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAITorqueBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIVoltageChanWithExcit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIVoltageChanWithExcit.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTask(const char sessionName[], TaskHandle* task)
{
  if (!function_pointers_.CreateTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTask.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTask(sessionName, task);
#else
  return function_pointers_.CreateTask(sessionName, task);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  if (!function_pointers_.GetAIChanCalCalDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalCalDate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.GetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  if (!function_pointers_.GetAIChanCalExpDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalExpDate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.GetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize)
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetErrorString.");
  }
#if defined(_MSC_VER)
  return DAQmxGetErrorString(errorCode, errorString, bufferSize);
#else
  return function_pointers_.GetErrorString(errorCode, errorString, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  if (!function_pointers_.GetNthTaskChannel) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetNthTaskChannel.");
  }
#if defined(_MSC_VER)
  return DAQmxGetNthTaskChannel(task, index, buffer, bufferSize);
#else
  return function_pointers_.GetNthTaskChannel(task, index, buffer, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  if (!function_pointers_.GetNthTaskDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetNthTaskDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxGetNthTaskDevice(task, index, buffer, bufferSize);
#else
  return function_pointers_.GetNthTaskDevice(task, index, buffer, bufferSize);
#endif
}

int32 NiDAQmxLibrary::IsTaskDone(TaskHandle task, bool32* isTaskDone)
{
  if (!function_pointers_.IsTaskDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxIsTaskDone.");
  }
#if defined(_MSC_VER)
  return DAQmxIsTaskDone(task, isTaskDone);
#else
  return function_pointers_.IsTaskDone(task, isTaskDone);
#endif
}

int32 NiDAQmxLibrary::ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadAnalogF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadAnalogF64.");
  }
#if defined(_MSC_VER)
  return DAQmxReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalU16.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalU8.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  if (!function_pointers_.SetAIChanCalCalDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalCalDate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.SetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  if (!function_pointers_.SetAIChanCalExpDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalExpDate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.SetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::StartTask(TaskHandle task)
{
  if (!function_pointers_.StartTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxStartTask.");
  }
#if defined(_MSC_VER)
  return DAQmxStartTask(task);
#else
  return function_pointers_.StartTask(task);
#endif
}

int32 NiDAQmxLibrary::StopTask(TaskHandle task)
{
  if (!function_pointers_.StopTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxStopTask.");
  }
#if defined(_MSC_VER)
  return DAQmxStopTask(task);
#else
  return function_pointers_.StopTask(task);
#endif
}

int32 NiDAQmxLibrary::TaskControl(TaskHandle task, int32 action)
{
  if (!function_pointers_.TaskControl) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxTaskControl.");
  }
#if defined(_MSC_VER)
  return DAQmxTaskControl(task, action);
#else
  return function_pointers_.TaskControl(task, action);
#endif
}

int32 NiDAQmxLibrary::WaitUntilTaskDone(TaskHandle task, float64 timeToWait)
{
  if (!function_pointers_.WaitUntilTaskDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWaitUntilTaskDone.");
  }
#if defined(_MSC_VER)
  return DAQmxWaitUntilTaskDone(task, timeToWait);
#else
  return function_pointers_.WaitUntilTaskDone(task, timeToWait);
#endif
}

int32 NiDAQmxLibrary::WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteAnalogF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteAnalogF64.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalU16.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalU8.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

}  // namespace nidaqmx_grpc
