//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-DAQMX Metadata
//---------------------------------------------------------------------
#include "nidaqmx_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nicaiu.dll";
#else
static const char* kLibraryName = "libnidaqmx.so";
#endif

namespace nidaqmx_grpc {

NiDAQmxLibrary::NiDAQmxLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AddCDAQSyncConnection = reinterpret_cast<AddCDAQSyncConnectionPtr>(shared_library_.get_function_pointer("DAQmxAddCDAQSyncConnection"));
  function_pointers_.AddGlobalChansToTask = reinterpret_cast<AddGlobalChansToTaskPtr>(shared_library_.get_function_pointer("DAQmxAddGlobalChansToTask"));
  function_pointers_.AddNetworkDevice = reinterpret_cast<AddNetworkDevicePtr>(shared_library_.get_function_pointer("DAQmxAddNetworkDevice"));
  function_pointers_.AreConfiguredCDAQSyncPortsDisconnected = reinterpret_cast<AreConfiguredCDAQSyncPortsDisconnectedPtr>(shared_library_.get_function_pointer("DAQmxAreConfiguredCDAQSyncPortsDisconnected"));
  function_pointers_.AutoConfigureCDAQSyncConnections = reinterpret_cast<AutoConfigureCDAQSyncConnectionsPtr>(shared_library_.get_function_pointer("DAQmxAutoConfigureCDAQSyncConnections"));
  function_pointers_.CalculateReversePolyCoeff = reinterpret_cast<CalculateReversePolyCoeffPtr>(shared_library_.get_function_pointer("DAQmxCalculateReversePolyCoeff"));
  function_pointers_.CfgAnlgEdgeRefTrig = reinterpret_cast<CfgAnlgEdgeRefTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgAnlgEdgeRefTrig"));
  function_pointers_.CfgAnlgEdgeStartTrig = reinterpret_cast<CfgAnlgEdgeStartTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgAnlgEdgeStartTrig"));
  function_pointers_.CfgAnlgMultiEdgeRefTrig = reinterpret_cast<CfgAnlgMultiEdgeRefTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgAnlgMultiEdgeRefTrig"));
  function_pointers_.CfgAnlgMultiEdgeStartTrig = reinterpret_cast<CfgAnlgMultiEdgeStartTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgAnlgMultiEdgeStartTrig"));
  function_pointers_.CfgAnlgWindowRefTrig = reinterpret_cast<CfgAnlgWindowRefTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgAnlgWindowRefTrig"));
  function_pointers_.CfgAnlgWindowStartTrig = reinterpret_cast<CfgAnlgWindowStartTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgAnlgWindowStartTrig"));
  function_pointers_.CfgBurstHandshakingTimingExportClock = reinterpret_cast<CfgBurstHandshakingTimingExportClockPtr>(shared_library_.get_function_pointer("DAQmxCfgBurstHandshakingTimingExportClock"));
  function_pointers_.CfgBurstHandshakingTimingImportClock = reinterpret_cast<CfgBurstHandshakingTimingImportClockPtr>(shared_library_.get_function_pointer("DAQmxCfgBurstHandshakingTimingImportClock"));
  function_pointers_.CfgChangeDetectionTiming = reinterpret_cast<CfgChangeDetectionTimingPtr>(shared_library_.get_function_pointer("DAQmxCfgChangeDetectionTiming"));
  function_pointers_.CfgDigEdgeRefTrig = reinterpret_cast<CfgDigEdgeRefTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgDigEdgeRefTrig"));
  function_pointers_.CfgDigEdgeStartTrig = reinterpret_cast<CfgDigEdgeStartTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgDigEdgeStartTrig"));
  function_pointers_.CfgDigPatternRefTrig = reinterpret_cast<CfgDigPatternRefTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgDigPatternRefTrig"));
  function_pointers_.CfgDigPatternStartTrig = reinterpret_cast<CfgDigPatternStartTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgDigPatternStartTrig"));
  function_pointers_.CfgHandshakingTiming = reinterpret_cast<CfgHandshakingTimingPtr>(shared_library_.get_function_pointer("DAQmxCfgHandshakingTiming"));
  function_pointers_.CfgImplicitTiming = reinterpret_cast<CfgImplicitTimingPtr>(shared_library_.get_function_pointer("DAQmxCfgImplicitTiming"));
  function_pointers_.CfgInputBuffer = reinterpret_cast<CfgInputBufferPtr>(shared_library_.get_function_pointer("DAQmxCfgInputBuffer"));
  function_pointers_.CfgOutputBuffer = reinterpret_cast<CfgOutputBufferPtr>(shared_library_.get_function_pointer("DAQmxCfgOutputBuffer"));
  function_pointers_.CfgPipelinedSampClkTiming = reinterpret_cast<CfgPipelinedSampClkTimingPtr>(shared_library_.get_function_pointer("DAQmxCfgPipelinedSampClkTiming"));
  function_pointers_.CfgSampClkTiming = reinterpret_cast<CfgSampClkTimingPtr>(shared_library_.get_function_pointer("DAQmxCfgSampClkTiming"));
  function_pointers_.CfgTimeStartTrig = reinterpret_cast<CfgTimeStartTrigPtr>(shared_library_.get_function_pointer("DAQmxCfgTimeStartTrig"));
  function_pointers_.CfgWatchdogAOExpirStates = reinterpret_cast<CfgWatchdogAOExpirStatesPtr>(shared_library_.get_function_pointer("DAQmxCfgWatchdogAOExpirStates"));
  function_pointers_.CfgWatchdogCOExpirStates = reinterpret_cast<CfgWatchdogCOExpirStatesPtr>(shared_library_.get_function_pointer("DAQmxCfgWatchdogCOExpirStates"));
  function_pointers_.CfgWatchdogDOExpirStates = reinterpret_cast<CfgWatchdogDOExpirStatesPtr>(shared_library_.get_function_pointer("DAQmxCfgWatchdogDOExpirStates"));
  function_pointers_.ClearTEDS = reinterpret_cast<ClearTEDSPtr>(shared_library_.get_function_pointer("DAQmxClearTEDS"));
  function_pointers_.ClearTask = reinterpret_cast<ClearTaskPtr>(shared_library_.get_function_pointer("DAQmxClearTask"));
  function_pointers_.ConfigureLogging = reinterpret_cast<ConfigureLoggingPtr>(shared_library_.get_function_pointer("DAQmxConfigureLogging"));
  function_pointers_.ConfigureTEDS = reinterpret_cast<ConfigureTEDSPtr>(shared_library_.get_function_pointer("DAQmxConfigureTEDS"));
  function_pointers_.ConnectTerms = reinterpret_cast<ConnectTermsPtr>(shared_library_.get_function_pointer("DAQmxConnectTerms"));
  function_pointers_.ControlWatchdogTask = reinterpret_cast<ControlWatchdogTaskPtr>(shared_library_.get_function_pointer("DAQmxControlWatchdogTask"));
  function_pointers_.CreateAIAccel4WireDCVoltageChan = reinterpret_cast<CreateAIAccel4WireDCVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIAccel4WireDCVoltageChan"));
  function_pointers_.CreateAIAccelChan = reinterpret_cast<CreateAIAccelChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIAccelChan"));
  function_pointers_.CreateAIAccelChargeChan = reinterpret_cast<CreateAIAccelChargeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIAccelChargeChan"));
  function_pointers_.CreateAIBridgeChan = reinterpret_cast<CreateAIBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIBridgeChan"));
  function_pointers_.CreateAIChargeChan = reinterpret_cast<CreateAIChargeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIChargeChan"));
  function_pointers_.CreateAICurrentChan = reinterpret_cast<CreateAICurrentChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAICurrentChan"));
  function_pointers_.CreateAICurrentRMSChan = reinterpret_cast<CreateAICurrentRMSChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAICurrentRMSChan"));
  function_pointers_.CreateAIForceBridgePolynomialChan = reinterpret_cast<CreateAIForceBridgePolynomialChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceBridgePolynomialChan"));
  function_pointers_.CreateAIForceBridgeTableChan = reinterpret_cast<CreateAIForceBridgeTableChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceBridgeTableChan"));
  function_pointers_.CreateAIForceBridgeTwoPointLinChan = reinterpret_cast<CreateAIForceBridgeTwoPointLinChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceBridgeTwoPointLinChan"));
  function_pointers_.CreateAIForceIEPEChan = reinterpret_cast<CreateAIForceIEPEChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIForceIEPEChan"));
  function_pointers_.CreateAIFreqVoltageChan = reinterpret_cast<CreateAIFreqVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIFreqVoltageChan"));
  function_pointers_.CreateAIMicrophoneChan = reinterpret_cast<CreateAIMicrophoneChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIMicrophoneChan"));
  function_pointers_.CreateAIPosEddyCurrProxProbeChan = reinterpret_cast<CreateAIPosEddyCurrProxProbeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPosEddyCurrProxProbeChan"));
  function_pointers_.CreateAIPosLVDTChan = reinterpret_cast<CreateAIPosLVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPosLVDTChan"));
  function_pointers_.CreateAIPosRVDTChan = reinterpret_cast<CreateAIPosRVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPosRVDTChan"));
  function_pointers_.CreateAIPressureBridgePolynomialChan = reinterpret_cast<CreateAIPressureBridgePolynomialChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPressureBridgePolynomialChan"));
  function_pointers_.CreateAIPressureBridgeTableChan = reinterpret_cast<CreateAIPressureBridgeTableChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPressureBridgeTableChan"));
  function_pointers_.CreateAIPressureBridgeTwoPointLinChan = reinterpret_cast<CreateAIPressureBridgeTwoPointLinChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIPressureBridgeTwoPointLinChan"));
  function_pointers_.CreateAIRTDChan = reinterpret_cast<CreateAIRTDChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIRTDChan"));
  function_pointers_.CreateAIResistanceChan = reinterpret_cast<CreateAIResistanceChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIResistanceChan"));
  function_pointers_.CreateAIRosetteStrainGageChan = reinterpret_cast<CreateAIRosetteStrainGageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIRosetteStrainGageChan"));
  function_pointers_.CreateAIStrainGageChan = reinterpret_cast<CreateAIStrainGageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIStrainGageChan"));
  function_pointers_.CreateAITempBuiltInSensorChan = reinterpret_cast<CreateAITempBuiltInSensorChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITempBuiltInSensorChan"));
  function_pointers_.CreateAIThrmcplChan = reinterpret_cast<CreateAIThrmcplChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIThrmcplChan"));
  function_pointers_.CreateAIThrmstrChanIex = reinterpret_cast<CreateAIThrmstrChanIexPtr>(shared_library_.get_function_pointer("DAQmxCreateAIThrmstrChanIex"));
  function_pointers_.CreateAIThrmstrChanVex = reinterpret_cast<CreateAIThrmstrChanVexPtr>(shared_library_.get_function_pointer("DAQmxCreateAIThrmstrChanVex"));
  function_pointers_.CreateAITorqueBridgePolynomialChan = reinterpret_cast<CreateAITorqueBridgePolynomialChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITorqueBridgePolynomialChan"));
  function_pointers_.CreateAITorqueBridgeTableChan = reinterpret_cast<CreateAITorqueBridgeTableChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITorqueBridgeTableChan"));
  function_pointers_.CreateAITorqueBridgeTwoPointLinChan = reinterpret_cast<CreateAITorqueBridgeTwoPointLinChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAITorqueBridgeTwoPointLinChan"));
  function_pointers_.CreateAIVelocityIEPEChan = reinterpret_cast<CreateAIVelocityIEPEChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVelocityIEPEChan"));
  function_pointers_.CreateAIVoltageChan = reinterpret_cast<CreateAIVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVoltageChan"));
  function_pointers_.CreateAIVoltageChanWithExcit = reinterpret_cast<CreateAIVoltageChanWithExcitPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVoltageChanWithExcit"));
  function_pointers_.CreateAIVoltageRMSChan = reinterpret_cast<CreateAIVoltageRMSChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAIVoltageRMSChan"));
  function_pointers_.CreateAOCurrentChan = reinterpret_cast<CreateAOCurrentChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAOCurrentChan"));
  function_pointers_.CreateAOFuncGenChan = reinterpret_cast<CreateAOFuncGenChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAOFuncGenChan"));
  function_pointers_.CreateAOVoltageChan = reinterpret_cast<CreateAOVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateAOVoltageChan"));
  function_pointers_.CreateCIAngEncoderChan = reinterpret_cast<CreateCIAngEncoderChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIAngEncoderChan"));
  function_pointers_.CreateCIAngVelocityChan = reinterpret_cast<CreateCIAngVelocityChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIAngVelocityChan"));
  function_pointers_.CreateCICountEdgesChan = reinterpret_cast<CreateCICountEdgesChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCICountEdgesChan"));
  function_pointers_.CreateCIDutyCycleChan = reinterpret_cast<CreateCIDutyCycleChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIDutyCycleChan"));
  function_pointers_.CreateCIFreqChan = reinterpret_cast<CreateCIFreqChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIFreqChan"));
  function_pointers_.CreateCIGPSTimestampChan = reinterpret_cast<CreateCIGPSTimestampChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIGPSTimestampChan"));
  function_pointers_.CreateCILinEncoderChan = reinterpret_cast<CreateCILinEncoderChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCILinEncoderChan"));
  function_pointers_.CreateCILinVelocityChan = reinterpret_cast<CreateCILinVelocityChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCILinVelocityChan"));
  function_pointers_.CreateCIPeriodChan = reinterpret_cast<CreateCIPeriodChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPeriodChan"));
  function_pointers_.CreateCIPulseChanFreq = reinterpret_cast<CreateCIPulseChanFreqPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseChanFreq"));
  function_pointers_.CreateCIPulseChanTicks = reinterpret_cast<CreateCIPulseChanTicksPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseChanTicks"));
  function_pointers_.CreateCIPulseChanTime = reinterpret_cast<CreateCIPulseChanTimePtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseChanTime"));
  function_pointers_.CreateCIPulseWidthChan = reinterpret_cast<CreateCIPulseWidthChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCIPulseWidthChan"));
  function_pointers_.CreateCISemiPeriodChan = reinterpret_cast<CreateCISemiPeriodChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCISemiPeriodChan"));
  function_pointers_.CreateCITwoEdgeSepChan = reinterpret_cast<CreateCITwoEdgeSepChanPtr>(shared_library_.get_function_pointer("DAQmxCreateCITwoEdgeSepChan"));
  function_pointers_.CreateCOPulseChanFreq = reinterpret_cast<CreateCOPulseChanFreqPtr>(shared_library_.get_function_pointer("DAQmxCreateCOPulseChanFreq"));
  function_pointers_.CreateCOPulseChanTicks = reinterpret_cast<CreateCOPulseChanTicksPtr>(shared_library_.get_function_pointer("DAQmxCreateCOPulseChanTicks"));
  function_pointers_.CreateCOPulseChanTime = reinterpret_cast<CreateCOPulseChanTimePtr>(shared_library_.get_function_pointer("DAQmxCreateCOPulseChanTime"));
  function_pointers_.CreateDIChan = reinterpret_cast<CreateDIChanPtr>(shared_library_.get_function_pointer("DAQmxCreateDIChan"));
  function_pointers_.CreateDOChan = reinterpret_cast<CreateDOChanPtr>(shared_library_.get_function_pointer("DAQmxCreateDOChan"));
  function_pointers_.CreateLinScale = reinterpret_cast<CreateLinScalePtr>(shared_library_.get_function_pointer("DAQmxCreateLinScale"));
  function_pointers_.CreateMapScale = reinterpret_cast<CreateMapScalePtr>(shared_library_.get_function_pointer("DAQmxCreateMapScale"));
  function_pointers_.CreatePolynomialScale = reinterpret_cast<CreatePolynomialScalePtr>(shared_library_.get_function_pointer("DAQmxCreatePolynomialScale"));
  function_pointers_.CreateTEDSAIAccelChan = reinterpret_cast<CreateTEDSAIAccelChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIAccelChan"));
  function_pointers_.CreateTEDSAIBridgeChan = reinterpret_cast<CreateTEDSAIBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIBridgeChan"));
  function_pointers_.CreateTEDSAICurrentChan = reinterpret_cast<CreateTEDSAICurrentChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAICurrentChan"));
  function_pointers_.CreateTEDSAIForceBridgeChan = reinterpret_cast<CreateTEDSAIForceBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIForceBridgeChan"));
  function_pointers_.CreateTEDSAIForceIEPEChan = reinterpret_cast<CreateTEDSAIForceIEPEChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIForceIEPEChan"));
  function_pointers_.CreateTEDSAIMicrophoneChan = reinterpret_cast<CreateTEDSAIMicrophoneChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIMicrophoneChan"));
  function_pointers_.CreateTEDSAIPosLVDTChan = reinterpret_cast<CreateTEDSAIPosLVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIPosLVDTChan"));
  function_pointers_.CreateTEDSAIPosRVDTChan = reinterpret_cast<CreateTEDSAIPosRVDTChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIPosRVDTChan"));
  function_pointers_.CreateTEDSAIPressureBridgeChan = reinterpret_cast<CreateTEDSAIPressureBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIPressureBridgeChan"));
  function_pointers_.CreateTEDSAIRTDChan = reinterpret_cast<CreateTEDSAIRTDChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIRTDChan"));
  function_pointers_.CreateTEDSAIResistanceChan = reinterpret_cast<CreateTEDSAIResistanceChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIResistanceChan"));
  function_pointers_.CreateTEDSAIStrainGageChan = reinterpret_cast<CreateTEDSAIStrainGageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIStrainGageChan"));
  function_pointers_.CreateTEDSAIThrmcplChan = reinterpret_cast<CreateTEDSAIThrmcplChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIThrmcplChan"));
  function_pointers_.CreateTEDSAIThrmstrChanIex = reinterpret_cast<CreateTEDSAIThrmstrChanIexPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIThrmstrChanIex"));
  function_pointers_.CreateTEDSAIThrmstrChanVex = reinterpret_cast<CreateTEDSAIThrmstrChanVexPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIThrmstrChanVex"));
  function_pointers_.CreateTEDSAITorqueBridgeChan = reinterpret_cast<CreateTEDSAITorqueBridgeChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAITorqueBridgeChan"));
  function_pointers_.CreateTEDSAIVoltageChan = reinterpret_cast<CreateTEDSAIVoltageChanPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIVoltageChan"));
  function_pointers_.CreateTEDSAIVoltageChanWithExcit = reinterpret_cast<CreateTEDSAIVoltageChanWithExcitPtr>(shared_library_.get_function_pointer("DAQmxCreateTEDSAIVoltageChanWithExcit"));
  function_pointers_.CreateTableScale = reinterpret_cast<CreateTableScalePtr>(shared_library_.get_function_pointer("DAQmxCreateTableScale"));
  function_pointers_.CreateTask = reinterpret_cast<CreateTaskPtr>(shared_library_.get_function_pointer("DAQmxCreateTask"));
  function_pointers_.CreateWatchdogTimerTask = reinterpret_cast<CreateWatchdogTimerTaskPtr>(shared_library_.get_function_pointer("DAQmxCreateWatchdogTimerTask"));
  function_pointers_.CreateWatchdogTimerTaskEx = reinterpret_cast<CreateWatchdogTimerTaskExPtr>(shared_library_.get_function_pointer("DAQmxCreateWatchdogTimerTaskEx"));
  function_pointers_.DeleteNetworkDevice = reinterpret_cast<DeleteNetworkDevicePtr>(shared_library_.get_function_pointer("DAQmxDeleteNetworkDevice"));
  function_pointers_.DeleteSavedGlobalChan = reinterpret_cast<DeleteSavedGlobalChanPtr>(shared_library_.get_function_pointer("DAQmxDeleteSavedGlobalChan"));
  function_pointers_.DeleteSavedScale = reinterpret_cast<DeleteSavedScalePtr>(shared_library_.get_function_pointer("DAQmxDeleteSavedScale"));
  function_pointers_.DeleteSavedTask = reinterpret_cast<DeleteSavedTaskPtr>(shared_library_.get_function_pointer("DAQmxDeleteSavedTask"));
  function_pointers_.DeviceSupportsCal = reinterpret_cast<DeviceSupportsCalPtr>(shared_library_.get_function_pointer("DAQmxDeviceSupportsCal"));
  function_pointers_.DisableRefTrig = reinterpret_cast<DisableRefTrigPtr>(shared_library_.get_function_pointer("DAQmxDisableRefTrig"));
  function_pointers_.DisableStartTrig = reinterpret_cast<DisableStartTrigPtr>(shared_library_.get_function_pointer("DAQmxDisableStartTrig"));
  function_pointers_.DisconnectTerms = reinterpret_cast<DisconnectTermsPtr>(shared_library_.get_function_pointer("DAQmxDisconnectTerms"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_.get_function_pointer("DAQmxExportSignal"));
  function_pointers_.GetAIACExcitFreq = reinterpret_cast<GetAIACExcitFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAIACExcitFreq"));
  function_pointers_.GetAIACExcitSyncEnable = reinterpret_cast<GetAIACExcitSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIACExcitSyncEnable"));
  function_pointers_.GetAIACExcitWireMode = reinterpret_cast<GetAIACExcitWireModePtr>(shared_library_.get_function_pointer("DAQmxGetAIACExcitWireMode"));
  function_pointers_.GetAIADCCustomTimingMode = reinterpret_cast<GetAIADCCustomTimingModePtr>(shared_library_.get_function_pointer("DAQmxGetAIADCCustomTimingMode"));
  function_pointers_.GetAIADCTimingMode = reinterpret_cast<GetAIADCTimingModePtr>(shared_library_.get_function_pointer("DAQmxGetAIADCTimingMode"));
  function_pointers_.GetAIAccel4WireDCVoltageSensitivity = reinterpret_cast<GetAIAccel4WireDCVoltageSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccel4WireDCVoltageSensitivity"));
  function_pointers_.GetAIAccel4WireDCVoltageSensitivityUnits = reinterpret_cast<GetAIAccel4WireDCVoltageSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccel4WireDCVoltageSensitivityUnits"));
  function_pointers_.GetAIAccelChargeSensitivity = reinterpret_cast<GetAIAccelChargeSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccelChargeSensitivity"));
  function_pointers_.GetAIAccelChargeSensitivityUnits = reinterpret_cast<GetAIAccelChargeSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccelChargeSensitivityUnits"));
  function_pointers_.GetAIAccelSensitivity = reinterpret_cast<GetAIAccelSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccelSensitivity"));
  function_pointers_.GetAIAccelSensitivityUnits = reinterpret_cast<GetAIAccelSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccelSensitivityUnits"));
  function_pointers_.GetAIAccelUnits = reinterpret_cast<GetAIAccelUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIAccelUnits"));
  function_pointers_.GetAIAcceldBRef = reinterpret_cast<GetAIAcceldBRefPtr>(shared_library_.get_function_pointer("DAQmxGetAIAcceldBRef"));
  function_pointers_.GetAIAtten = reinterpret_cast<GetAIAttenPtr>(shared_library_.get_function_pointer("DAQmxGetAIAtten"));
  function_pointers_.GetAIAutoZeroMode = reinterpret_cast<GetAIAutoZeroModePtr>(shared_library_.get_function_pointer("DAQmxGetAIAutoZeroMode"));
  function_pointers_.GetAIAveragingWinSize = reinterpret_cast<GetAIAveragingWinSizePtr>(shared_library_.get_function_pointer("DAQmxGetAIAveragingWinSize"));
  function_pointers_.GetAIBridgeBalanceCoarsePot = reinterpret_cast<GetAIBridgeBalanceCoarsePotPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeBalanceCoarsePot"));
  function_pointers_.GetAIBridgeBalanceFinePot = reinterpret_cast<GetAIBridgeBalanceFinePotPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeBalanceFinePot"));
  function_pointers_.GetAIBridgeCfg = reinterpret_cast<GetAIBridgeCfgPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeCfg"));
  function_pointers_.GetAIBridgeElectricalUnits = reinterpret_cast<GetAIBridgeElectricalUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeElectricalUnits"));
  function_pointers_.GetAIBridgeInitialRatio = reinterpret_cast<GetAIBridgeInitialRatioPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeInitialRatio"));
  function_pointers_.GetAIBridgeInitialVoltage = reinterpret_cast<GetAIBridgeInitialVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeInitialVoltage"));
  function_pointers_.GetAIBridgeNomResistance = reinterpret_cast<GetAIBridgeNomResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeNomResistance"));
  function_pointers_.GetAIBridgePhysicalUnits = reinterpret_cast<GetAIBridgePhysicalUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgePhysicalUnits"));
  function_pointers_.GetAIBridgePolyForwardCoeff = reinterpret_cast<GetAIBridgePolyForwardCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgePolyForwardCoeff"));
  function_pointers_.GetAIBridgePolyReverseCoeff = reinterpret_cast<GetAIBridgePolyReverseCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgePolyReverseCoeff"));
  function_pointers_.GetAIBridgeScaleType = reinterpret_cast<GetAIBridgeScaleTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeScaleType"));
  function_pointers_.GetAIBridgeShuntCalEnable = reinterpret_cast<GetAIBridgeShuntCalEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalEnable"));
  function_pointers_.GetAIBridgeShuntCalGainAdjust = reinterpret_cast<GetAIBridgeShuntCalGainAdjustPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalGainAdjust"));
  function_pointers_.GetAIBridgeShuntCalSelect = reinterpret_cast<GetAIBridgeShuntCalSelectPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalSelect"));
  function_pointers_.GetAIBridgeShuntCalShuntCalAActualResistance = reinterpret_cast<GetAIBridgeShuntCalShuntCalAActualResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalShuntCalAActualResistance"));
  function_pointers_.GetAIBridgeShuntCalShuntCalAResistance = reinterpret_cast<GetAIBridgeShuntCalShuntCalAResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalShuntCalAResistance"));
  function_pointers_.GetAIBridgeShuntCalShuntCalASrc = reinterpret_cast<GetAIBridgeShuntCalShuntCalASrcPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalShuntCalASrc"));
  function_pointers_.GetAIBridgeShuntCalShuntCalBActualResistance = reinterpret_cast<GetAIBridgeShuntCalShuntCalBActualResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalShuntCalBActualResistance"));
  function_pointers_.GetAIBridgeShuntCalShuntCalBResistance = reinterpret_cast<GetAIBridgeShuntCalShuntCalBResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeShuntCalShuntCalBResistance"));
  function_pointers_.GetAIBridgeTableElectricalVals = reinterpret_cast<GetAIBridgeTableElectricalValsPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeTableElectricalVals"));
  function_pointers_.GetAIBridgeTablePhysicalVals = reinterpret_cast<GetAIBridgeTablePhysicalValsPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeTablePhysicalVals"));
  function_pointers_.GetAIBridgeTwoPointLinFirstElectricalVal = reinterpret_cast<GetAIBridgeTwoPointLinFirstElectricalValPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeTwoPointLinFirstElectricalVal"));
  function_pointers_.GetAIBridgeTwoPointLinFirstPhysicalVal = reinterpret_cast<GetAIBridgeTwoPointLinFirstPhysicalValPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal"));
  function_pointers_.GetAIBridgeTwoPointLinSecondElectricalVal = reinterpret_cast<GetAIBridgeTwoPointLinSecondElectricalValPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeTwoPointLinSecondElectricalVal"));
  function_pointers_.GetAIBridgeTwoPointLinSecondPhysicalVal = reinterpret_cast<GetAIBridgeTwoPointLinSecondPhysicalValPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal"));
  function_pointers_.GetAIBridgeUnits = reinterpret_cast<GetAIBridgeUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIBridgeUnits"));
  function_pointers_.GetAIChanCalApplyCalIfExp = reinterpret_cast<GetAIChanCalApplyCalIfExpPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalApplyCalIfExp"));
  function_pointers_.GetAIChanCalCalDate = reinterpret_cast<GetAIChanCalCalDatePtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalCalDate"));
  function_pointers_.GetAIChanCalDesc = reinterpret_cast<GetAIChanCalDescPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalDesc"));
  function_pointers_.GetAIChanCalEnableCal = reinterpret_cast<GetAIChanCalEnableCalPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalEnableCal"));
  function_pointers_.GetAIChanCalExpDate = reinterpret_cast<GetAIChanCalExpDatePtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalExpDate"));
  function_pointers_.GetAIChanCalHasValidCalInfo = reinterpret_cast<GetAIChanCalHasValidCalInfoPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalHasValidCalInfo"));
  function_pointers_.GetAIChanCalOperatorName = reinterpret_cast<GetAIChanCalOperatorNamePtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalOperatorName"));
  function_pointers_.GetAIChanCalPolyForwardCoeff = reinterpret_cast<GetAIChanCalPolyForwardCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalPolyForwardCoeff"));
  function_pointers_.GetAIChanCalPolyReverseCoeff = reinterpret_cast<GetAIChanCalPolyReverseCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalPolyReverseCoeff"));
  function_pointers_.GetAIChanCalScaleType = reinterpret_cast<GetAIChanCalScaleTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalScaleType"));
  function_pointers_.GetAIChanCalTablePreScaledVals = reinterpret_cast<GetAIChanCalTablePreScaledValsPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalTablePreScaledVals"));
  function_pointers_.GetAIChanCalTableScaledVals = reinterpret_cast<GetAIChanCalTableScaledValsPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalTableScaledVals"));
  function_pointers_.GetAIChanCalVerifAcqVals = reinterpret_cast<GetAIChanCalVerifAcqValsPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalVerifAcqVals"));
  function_pointers_.GetAIChanCalVerifRefVals = reinterpret_cast<GetAIChanCalVerifRefValsPtr>(shared_library_.get_function_pointer("DAQmxGetAIChanCalVerifRefVals"));
  function_pointers_.GetAIChargeUnits = reinterpret_cast<GetAIChargeUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIChargeUnits"));
  function_pointers_.GetAIChopEnable = reinterpret_cast<GetAIChopEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIChopEnable"));
  function_pointers_.GetAICoupling = reinterpret_cast<GetAICouplingPtr>(shared_library_.get_function_pointer("DAQmxGetAICoupling"));
  function_pointers_.GetAICurrentACRMSUnits = reinterpret_cast<GetAICurrentACRMSUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAICurrentACRMSUnits"));
  function_pointers_.GetAICurrentShuntLoc = reinterpret_cast<GetAICurrentShuntLocPtr>(shared_library_.get_function_pointer("DAQmxGetAICurrentShuntLoc"));
  function_pointers_.GetAICurrentShuntResistance = reinterpret_cast<GetAICurrentShuntResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAICurrentShuntResistance"));
  function_pointers_.GetAICurrentUnits = reinterpret_cast<GetAICurrentUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAICurrentUnits"));
  function_pointers_.GetAICustomScaleName = reinterpret_cast<GetAICustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxGetAICustomScaleName"));
  function_pointers_.GetAIDCOffset = reinterpret_cast<GetAIDCOffsetPtr>(shared_library_.get_function_pointer("DAQmxGetAIDCOffset"));
  function_pointers_.GetAIDataXferCustomThreshold = reinterpret_cast<GetAIDataXferCustomThresholdPtr>(shared_library_.get_function_pointer("DAQmxGetAIDataXferCustomThreshold"));
  function_pointers_.GetAIDataXferMaxRate = reinterpret_cast<GetAIDataXferMaxRatePtr>(shared_library_.get_function_pointer("DAQmxGetAIDataXferMaxRate"));
  function_pointers_.GetAIDataXferMech = reinterpret_cast<GetAIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxGetAIDataXferMech"));
  function_pointers_.GetAIDataXferReqCond = reinterpret_cast<GetAIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxGetAIDataXferReqCond"));
  function_pointers_.GetAIDevScalingCoeff = reinterpret_cast<GetAIDevScalingCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAIDevScalingCoeff"));
  function_pointers_.GetAIDigFltrBandpassCenterFreq = reinterpret_cast<GetAIDigFltrBandpassCenterFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrBandpassCenterFreq"));
  function_pointers_.GetAIDigFltrBandpassWidth = reinterpret_cast<GetAIDigFltrBandpassWidthPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrBandpassWidth"));
  function_pointers_.GetAIDigFltrCoeff = reinterpret_cast<GetAIDigFltrCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrCoeff"));
  function_pointers_.GetAIDigFltrEnable = reinterpret_cast<GetAIDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrEnable"));
  function_pointers_.GetAIDigFltrHighpassCutoffFreq = reinterpret_cast<GetAIDigFltrHighpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrHighpassCutoffFreq"));
  function_pointers_.GetAIDigFltrLowpassCutoffFreq = reinterpret_cast<GetAIDigFltrLowpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrLowpassCutoffFreq"));
  function_pointers_.GetAIDigFltrNotchCenterFreq = reinterpret_cast<GetAIDigFltrNotchCenterFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrNotchCenterFreq"));
  function_pointers_.GetAIDigFltrNotchWidth = reinterpret_cast<GetAIDigFltrNotchWidthPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrNotchWidth"));
  function_pointers_.GetAIDigFltrOrder = reinterpret_cast<GetAIDigFltrOrderPtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrOrder"));
  function_pointers_.GetAIDigFltrResponse = reinterpret_cast<GetAIDigFltrResponsePtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrResponse"));
  function_pointers_.GetAIDigFltrType = reinterpret_cast<GetAIDigFltrTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIDigFltrType"));
  function_pointers_.GetAIDitherEnable = reinterpret_cast<GetAIDitherEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIDitherEnable"));
  function_pointers_.GetAIEddyCurrentProxProbeSensitivity = reinterpret_cast<GetAIEddyCurrentProxProbeSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIEddyCurrentProxProbeSensitivity"));
  function_pointers_.GetAIEddyCurrentProxProbeSensitivityUnits = reinterpret_cast<GetAIEddyCurrentProxProbeSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIEddyCurrentProxProbeSensitivityUnits"));
  function_pointers_.GetAIEddyCurrentProxProbeUnits = reinterpret_cast<GetAIEddyCurrentProxProbeUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIEddyCurrentProxProbeUnits"));
  function_pointers_.GetAIEnhancedAliasRejectionEnable = reinterpret_cast<GetAIEnhancedAliasRejectionEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIEnhancedAliasRejectionEnable"));
  function_pointers_.GetAIExcitActualVal = reinterpret_cast<GetAIExcitActualValPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitActualVal"));
  function_pointers_.GetAIExcitDCorAC = reinterpret_cast<GetAIExcitDCorACPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitDCorAC"));
  function_pointers_.GetAIExcitIdleOutputBehavior = reinterpret_cast<GetAIExcitIdleOutputBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitIdleOutputBehavior"));
  function_pointers_.GetAIExcitSense = reinterpret_cast<GetAIExcitSensePtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitSense"));
  function_pointers_.GetAIExcitSrc = reinterpret_cast<GetAIExcitSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitSrc"));
  function_pointers_.GetAIExcitUseForScaling = reinterpret_cast<GetAIExcitUseForScalingPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitUseForScaling"));
  function_pointers_.GetAIExcitUseMultiplexed = reinterpret_cast<GetAIExcitUseMultiplexedPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitUseMultiplexed"));
  function_pointers_.GetAIExcitVal = reinterpret_cast<GetAIExcitValPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitVal"));
  function_pointers_.GetAIExcitVoltageOrCurrent = reinterpret_cast<GetAIExcitVoltageOrCurrentPtr>(shared_library_.get_function_pointer("DAQmxGetAIExcitVoltageOrCurrent"));
  function_pointers_.GetAIFilterDelay = reinterpret_cast<GetAIFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterDelay"));
  function_pointers_.GetAIFilterDelayAdjustment = reinterpret_cast<GetAIFilterDelayAdjustmentPtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterDelayAdjustment"));
  function_pointers_.GetAIFilterDelayUnits = reinterpret_cast<GetAIFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterDelayUnits"));
  function_pointers_.GetAIFilterEnable = reinterpret_cast<GetAIFilterEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterEnable"));
  function_pointers_.GetAIFilterFreq = reinterpret_cast<GetAIFilterFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterFreq"));
  function_pointers_.GetAIFilterOrder = reinterpret_cast<GetAIFilterOrderPtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterOrder"));
  function_pointers_.GetAIFilterResponse = reinterpret_cast<GetAIFilterResponsePtr>(shared_library_.get_function_pointer("DAQmxGetAIFilterResponse"));
  function_pointers_.GetAIForceIEPESensorSensitivity = reinterpret_cast<GetAIForceIEPESensorSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIForceIEPESensorSensitivity"));
  function_pointers_.GetAIForceIEPESensorSensitivityUnits = reinterpret_cast<GetAIForceIEPESensorSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIForceIEPESensorSensitivityUnits"));
  function_pointers_.GetAIForceReadFromChan = reinterpret_cast<GetAIForceReadFromChanPtr>(shared_library_.get_function_pointer("DAQmxGetAIForceReadFromChan"));
  function_pointers_.GetAIForceUnits = reinterpret_cast<GetAIForceUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIForceUnits"));
  function_pointers_.GetAIFreqHyst = reinterpret_cast<GetAIFreqHystPtr>(shared_library_.get_function_pointer("DAQmxGetAIFreqHyst"));
  function_pointers_.GetAIFreqThreshVoltage = reinterpret_cast<GetAIFreqThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetAIFreqThreshVoltage"));
  function_pointers_.GetAIFreqUnits = reinterpret_cast<GetAIFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIFreqUnits"));
  function_pointers_.GetAIGain = reinterpret_cast<GetAIGainPtr>(shared_library_.get_function_pointer("DAQmxGetAIGain"));
  function_pointers_.GetAIInputLimitsFaultDetectEnable = reinterpret_cast<GetAIInputLimitsFaultDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIInputLimitsFaultDetectEnable"));
  function_pointers_.GetAIInputLimitsFaultDetectLowerLimit = reinterpret_cast<GetAIInputLimitsFaultDetectLowerLimitPtr>(shared_library_.get_function_pointer("DAQmxGetAIInputLimitsFaultDetectLowerLimit"));
  function_pointers_.GetAIInputLimitsFaultDetectUpperLimit = reinterpret_cast<GetAIInputLimitsFaultDetectUpperLimitPtr>(shared_library_.get_function_pointer("DAQmxGetAIInputLimitsFaultDetectUpperLimit"));
  function_pointers_.GetAIInputSrc = reinterpret_cast<GetAIInputSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAIInputSrc"));
  function_pointers_.GetAIIsTEDS = reinterpret_cast<GetAIIsTEDSPtr>(shared_library_.get_function_pointer("DAQmxGetAIIsTEDS"));
  function_pointers_.GetAILVDTSensitivity = reinterpret_cast<GetAILVDTSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAILVDTSensitivity"));
  function_pointers_.GetAILVDTSensitivityUnits = reinterpret_cast<GetAILVDTSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAILVDTSensitivityUnits"));
  function_pointers_.GetAILVDTUnits = reinterpret_cast<GetAILVDTUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAILVDTUnits"));
  function_pointers_.GetAILeadWireResistance = reinterpret_cast<GetAILeadWireResistancePtr>(shared_library_.get_function_pointer("DAQmxGetAILeadWireResistance"));
  function_pointers_.GetAILossyLSBRemovalCompressedSampSize = reinterpret_cast<GetAILossyLSBRemovalCompressedSampSizePtr>(shared_library_.get_function_pointer("DAQmxGetAILossyLSBRemovalCompressedSampSize"));
  function_pointers_.GetAILowpassCutoffFreq = reinterpret_cast<GetAILowpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAILowpassCutoffFreq"));
  function_pointers_.GetAILowpassEnable = reinterpret_cast<GetAILowpassEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAILowpassEnable"));
  function_pointers_.GetAILowpassSwitchCapClkSrc = reinterpret_cast<GetAILowpassSwitchCapClkSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAILowpassSwitchCapClkSrc"));
  function_pointers_.GetAILowpassSwitchCapExtClkDiv = reinterpret_cast<GetAILowpassSwitchCapExtClkDivPtr>(shared_library_.get_function_pointer("DAQmxGetAILowpassSwitchCapExtClkDiv"));
  function_pointers_.GetAILowpassSwitchCapExtClkFreq = reinterpret_cast<GetAILowpassSwitchCapExtClkFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAILowpassSwitchCapExtClkFreq"));
  function_pointers_.GetAILowpassSwitchCapOutClkDiv = reinterpret_cast<GetAILowpassSwitchCapOutClkDivPtr>(shared_library_.get_function_pointer("DAQmxGetAILowpassSwitchCapOutClkDiv"));
  function_pointers_.GetAIMax = reinterpret_cast<GetAIMaxPtr>(shared_library_.get_function_pointer("DAQmxGetAIMax"));
  function_pointers_.GetAIMeasType = reinterpret_cast<GetAIMeasTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIMeasType"));
  function_pointers_.GetAIMemMapEnable = reinterpret_cast<GetAIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIMemMapEnable"));
  function_pointers_.GetAIMicrophoneSensitivity = reinterpret_cast<GetAIMicrophoneSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIMicrophoneSensitivity"));
  function_pointers_.GetAIMin = reinterpret_cast<GetAIMinPtr>(shared_library_.get_function_pointer("DAQmxGetAIMin"));
  function_pointers_.GetAIOpenChanDetectEnable = reinterpret_cast<GetAIOpenChanDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIOpenChanDetectEnable"));
  function_pointers_.GetAIOpenThrmcplDetectEnable = reinterpret_cast<GetAIOpenThrmcplDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIOpenThrmcplDetectEnable"));
  function_pointers_.GetAIOvercurrentDetectEnable = reinterpret_cast<GetAIOvercurrentDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIOvercurrentDetectEnable"));
  function_pointers_.GetAIPowerSupplyFaultDetectEnable = reinterpret_cast<GetAIPowerSupplyFaultDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAIPowerSupplyFaultDetectEnable"));
  function_pointers_.GetAIPressureUnits = reinterpret_cast<GetAIPressureUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIPressureUnits"));
  function_pointers_.GetAIProbeAtten = reinterpret_cast<GetAIProbeAttenPtr>(shared_library_.get_function_pointer("DAQmxGetAIProbeAtten"));
  function_pointers_.GetAIRTDA = reinterpret_cast<GetAIRTDAPtr>(shared_library_.get_function_pointer("DAQmxGetAIRTDA"));
  function_pointers_.GetAIRTDB = reinterpret_cast<GetAIRTDBPtr>(shared_library_.get_function_pointer("DAQmxGetAIRTDB"));
  function_pointers_.GetAIRTDC = reinterpret_cast<GetAIRTDCPtr>(shared_library_.get_function_pointer("DAQmxGetAIRTDC"));
  function_pointers_.GetAIRTDR0 = reinterpret_cast<GetAIRTDR0Ptr>(shared_library_.get_function_pointer("DAQmxGetAIRTDR0"));
  function_pointers_.GetAIRTDType = reinterpret_cast<GetAIRTDTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIRTDType"));
  function_pointers_.GetAIRVDTSensitivity = reinterpret_cast<GetAIRVDTSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIRVDTSensitivity"));
  function_pointers_.GetAIRVDTSensitivityUnits = reinterpret_cast<GetAIRVDTSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIRVDTSensitivityUnits"));
  function_pointers_.GetAIRVDTUnits = reinterpret_cast<GetAIRVDTUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIRVDTUnits"));
  function_pointers_.GetAIRawDataCompressionType = reinterpret_cast<GetAIRawDataCompressionTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIRawDataCompressionType"));
  function_pointers_.GetAIRawSampJustification = reinterpret_cast<GetAIRawSampJustificationPtr>(shared_library_.get_function_pointer("DAQmxGetAIRawSampJustification"));
  function_pointers_.GetAIRawSampSize = reinterpret_cast<GetAIRawSampSizePtr>(shared_library_.get_function_pointer("DAQmxGetAIRawSampSize"));
  function_pointers_.GetAIRemoveFilterDelay = reinterpret_cast<GetAIRemoveFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxGetAIRemoveFilterDelay"));
  function_pointers_.GetAIResistanceCfg = reinterpret_cast<GetAIResistanceCfgPtr>(shared_library_.get_function_pointer("DAQmxGetAIResistanceCfg"));
  function_pointers_.GetAIResistanceUnits = reinterpret_cast<GetAIResistanceUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIResistanceUnits"));
  function_pointers_.GetAIResolution = reinterpret_cast<GetAIResolutionPtr>(shared_library_.get_function_pointer("DAQmxGetAIResolution"));
  function_pointers_.GetAIResolutionUnits = reinterpret_cast<GetAIResolutionUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIResolutionUnits"));
  function_pointers_.GetAIRngHigh = reinterpret_cast<GetAIRngHighPtr>(shared_library_.get_function_pointer("DAQmxGetAIRngHigh"));
  function_pointers_.GetAIRngLow = reinterpret_cast<GetAIRngLowPtr>(shared_library_.get_function_pointer("DAQmxGetAIRngLow"));
  function_pointers_.GetAIRosetteStrainGageOrientation = reinterpret_cast<GetAIRosetteStrainGageOrientationPtr>(shared_library_.get_function_pointer("DAQmxGetAIRosetteStrainGageOrientation"));
  function_pointers_.GetAIRosetteStrainGageRosetteMeasType = reinterpret_cast<GetAIRosetteStrainGageRosetteMeasTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIRosetteStrainGageRosetteMeasType"));
  function_pointers_.GetAIRosetteStrainGageRosetteType = reinterpret_cast<GetAIRosetteStrainGageRosetteTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIRosetteStrainGageRosetteType"));
  function_pointers_.GetAIRosetteStrainGageStrainChans = reinterpret_cast<GetAIRosetteStrainGageStrainChansPtr>(shared_library_.get_function_pointer("DAQmxGetAIRosetteStrainGageStrainChans"));
  function_pointers_.GetAISampAndHoldEnable = reinterpret_cast<GetAISampAndHoldEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAISampAndHoldEnable"));
  function_pointers_.GetAISensorPowerCfg = reinterpret_cast<GetAISensorPowerCfgPtr>(shared_library_.get_function_pointer("DAQmxGetAISensorPowerCfg"));
  function_pointers_.GetAISensorPowerType = reinterpret_cast<GetAISensorPowerTypePtr>(shared_library_.get_function_pointer("DAQmxGetAISensorPowerType"));
  function_pointers_.GetAISensorPowerVoltage = reinterpret_cast<GetAISensorPowerVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetAISensorPowerVoltage"));
  function_pointers_.GetAISoundPressureMaxSoundPressureLvl = reinterpret_cast<GetAISoundPressureMaxSoundPressureLvlPtr>(shared_library_.get_function_pointer("DAQmxGetAISoundPressureMaxSoundPressureLvl"));
  function_pointers_.GetAISoundPressureUnits = reinterpret_cast<GetAISoundPressureUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAISoundPressureUnits"));
  function_pointers_.GetAISoundPressuredBRef = reinterpret_cast<GetAISoundPressuredBRefPtr>(shared_library_.get_function_pointer("DAQmxGetAISoundPressuredBRef"));
  function_pointers_.GetAIStrainGageCfg = reinterpret_cast<GetAIStrainGageCfgPtr>(shared_library_.get_function_pointer("DAQmxGetAIStrainGageCfg"));
  function_pointers_.GetAIStrainGageForceReadFromChan = reinterpret_cast<GetAIStrainGageForceReadFromChanPtr>(shared_library_.get_function_pointer("DAQmxGetAIStrainGageForceReadFromChan"));
  function_pointers_.GetAIStrainGageGageFactor = reinterpret_cast<GetAIStrainGageGageFactorPtr>(shared_library_.get_function_pointer("DAQmxGetAIStrainGageGageFactor"));
  function_pointers_.GetAIStrainGagePoissonRatio = reinterpret_cast<GetAIStrainGagePoissonRatioPtr>(shared_library_.get_function_pointer("DAQmxGetAIStrainGagePoissonRatio"));
  function_pointers_.GetAIStrainUnits = reinterpret_cast<GetAIStrainUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIStrainUnits"));
  function_pointers_.GetAITEDSUnits = reinterpret_cast<GetAITEDSUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAITEDSUnits"));
  function_pointers_.GetAITempUnits = reinterpret_cast<GetAITempUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAITempUnits"));
  function_pointers_.GetAITermCfg = reinterpret_cast<GetAITermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetAITermCfg"));
  function_pointers_.GetAIThrmcplCJCChan = reinterpret_cast<GetAIThrmcplCJCChanPtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmcplCJCChan"));
  function_pointers_.GetAIThrmcplCJCSrc = reinterpret_cast<GetAIThrmcplCJCSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmcplCJCSrc"));
  function_pointers_.GetAIThrmcplCJCVal = reinterpret_cast<GetAIThrmcplCJCValPtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmcplCJCVal"));
  function_pointers_.GetAIThrmcplLeadOffsetVoltage = reinterpret_cast<GetAIThrmcplLeadOffsetVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmcplLeadOffsetVoltage"));
  function_pointers_.GetAIThrmcplScaleType = reinterpret_cast<GetAIThrmcplScaleTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmcplScaleType"));
  function_pointers_.GetAIThrmcplType = reinterpret_cast<GetAIThrmcplTypePtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmcplType"));
  function_pointers_.GetAIThrmstrA = reinterpret_cast<GetAIThrmstrAPtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmstrA"));
  function_pointers_.GetAIThrmstrB = reinterpret_cast<GetAIThrmstrBPtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmstrB"));
  function_pointers_.GetAIThrmstrC = reinterpret_cast<GetAIThrmstrCPtr>(shared_library_.get_function_pointer("DAQmxGetAIThrmstrC"));
  function_pointers_.GetAIThrmstrR1 = reinterpret_cast<GetAIThrmstrR1Ptr>(shared_library_.get_function_pointer("DAQmxGetAIThrmstrR1"));
  function_pointers_.GetAITorqueUnits = reinterpret_cast<GetAITorqueUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAITorqueUnits"));
  function_pointers_.GetAIUsbXferReqCount = reinterpret_cast<GetAIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxGetAIUsbXferReqCount"));
  function_pointers_.GetAIUsbXferReqSize = reinterpret_cast<GetAIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxGetAIUsbXferReqSize"));
  function_pointers_.GetAIVelocityIEPESensorSensitivity = reinterpret_cast<GetAIVelocityIEPESensorSensitivityPtr>(shared_library_.get_function_pointer("DAQmxGetAIVelocityIEPESensorSensitivity"));
  function_pointers_.GetAIVelocityIEPESensorSensitivityUnits = reinterpret_cast<GetAIVelocityIEPESensorSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIVelocityIEPESensorSensitivityUnits"));
  function_pointers_.GetAIVelocityIEPESensordBRef = reinterpret_cast<GetAIVelocityIEPESensordBRefPtr>(shared_library_.get_function_pointer("DAQmxGetAIVelocityIEPESensordBRef"));
  function_pointers_.GetAIVelocityUnits = reinterpret_cast<GetAIVelocityUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIVelocityUnits"));
  function_pointers_.GetAIVoltageACRMSUnits = reinterpret_cast<GetAIVoltageACRMSUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIVoltageACRMSUnits"));
  function_pointers_.GetAIVoltageUnits = reinterpret_cast<GetAIVoltageUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAIVoltageUnits"));
  function_pointers_.GetAIVoltagedBRef = reinterpret_cast<GetAIVoltagedBRefPtr>(shared_library_.get_function_pointer("DAQmxGetAIVoltagedBRef"));
  function_pointers_.GetAOCurrentUnits = reinterpret_cast<GetAOCurrentUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAOCurrentUnits"));
  function_pointers_.GetAOCustomScaleName = reinterpret_cast<GetAOCustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxGetAOCustomScaleName"));
  function_pointers_.GetAODACOffsetExtSrc = reinterpret_cast<GetAODACOffsetExtSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAODACOffsetExtSrc"));
  function_pointers_.GetAODACOffsetSrc = reinterpret_cast<GetAODACOffsetSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAODACOffsetSrc"));
  function_pointers_.GetAODACOffsetVal = reinterpret_cast<GetAODACOffsetValPtr>(shared_library_.get_function_pointer("DAQmxGetAODACOffsetVal"));
  function_pointers_.GetAODACRefAllowConnToGnd = reinterpret_cast<GetAODACRefAllowConnToGndPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRefAllowConnToGnd"));
  function_pointers_.GetAODACRefConnToGnd = reinterpret_cast<GetAODACRefConnToGndPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRefConnToGnd"));
  function_pointers_.GetAODACRefExtSrc = reinterpret_cast<GetAODACRefExtSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRefExtSrc"));
  function_pointers_.GetAODACRefSrc = reinterpret_cast<GetAODACRefSrcPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRefSrc"));
  function_pointers_.GetAODACRefVal = reinterpret_cast<GetAODACRefValPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRefVal"));
  function_pointers_.GetAODACRngHigh = reinterpret_cast<GetAODACRngHighPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRngHigh"));
  function_pointers_.GetAODACRngLow = reinterpret_cast<GetAODACRngLowPtr>(shared_library_.get_function_pointer("DAQmxGetAODACRngLow"));
  function_pointers_.GetAODataXferMech = reinterpret_cast<GetAODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxGetAODataXferMech"));
  function_pointers_.GetAODataXferReqCond = reinterpret_cast<GetAODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxGetAODataXferReqCond"));
  function_pointers_.GetAODevScalingCoeff = reinterpret_cast<GetAODevScalingCoeffPtr>(shared_library_.get_function_pointer("DAQmxGetAODevScalingCoeff"));
  function_pointers_.GetAOEnhancedImageRejectionEnable = reinterpret_cast<GetAOEnhancedImageRejectionEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAOEnhancedImageRejectionEnable"));
  function_pointers_.GetAOFilterDelay = reinterpret_cast<GetAOFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxGetAOFilterDelay"));
  function_pointers_.GetAOFilterDelayAdjustment = reinterpret_cast<GetAOFilterDelayAdjustmentPtr>(shared_library_.get_function_pointer("DAQmxGetAOFilterDelayAdjustment"));
  function_pointers_.GetAOFilterDelayUnits = reinterpret_cast<GetAOFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAOFilterDelayUnits"));
  function_pointers_.GetAOFuncGenAmplitude = reinterpret_cast<GetAOFuncGenAmplitudePtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenAmplitude"));
  function_pointers_.GetAOFuncGenFMDeviation = reinterpret_cast<GetAOFuncGenFMDeviationPtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenFMDeviation"));
  function_pointers_.GetAOFuncGenFreq = reinterpret_cast<GetAOFuncGenFreqPtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenFreq"));
  function_pointers_.GetAOFuncGenModulationType = reinterpret_cast<GetAOFuncGenModulationTypePtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenModulationType"));
  function_pointers_.GetAOFuncGenOffset = reinterpret_cast<GetAOFuncGenOffsetPtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenOffset"));
  function_pointers_.GetAOFuncGenSquareDutyCycle = reinterpret_cast<GetAOFuncGenSquareDutyCyclePtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenSquareDutyCycle"));
  function_pointers_.GetAOFuncGenType = reinterpret_cast<GetAOFuncGenTypePtr>(shared_library_.get_function_pointer("DAQmxGetAOFuncGenType"));
  function_pointers_.GetAOGain = reinterpret_cast<GetAOGainPtr>(shared_library_.get_function_pointer("DAQmxGetAOGain"));
  function_pointers_.GetAOIdleOutputBehavior = reinterpret_cast<GetAOIdleOutputBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetAOIdleOutputBehavior"));
  function_pointers_.GetAOLoadImpedance = reinterpret_cast<GetAOLoadImpedancePtr>(shared_library_.get_function_pointer("DAQmxGetAOLoadImpedance"));
  function_pointers_.GetAOMax = reinterpret_cast<GetAOMaxPtr>(shared_library_.get_function_pointer("DAQmxGetAOMax"));
  function_pointers_.GetAOMemMapEnable = reinterpret_cast<GetAOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAOMemMapEnable"));
  function_pointers_.GetAOMin = reinterpret_cast<GetAOMinPtr>(shared_library_.get_function_pointer("DAQmxGetAOMin"));
  function_pointers_.GetAOOutputImpedance = reinterpret_cast<GetAOOutputImpedancePtr>(shared_library_.get_function_pointer("DAQmxGetAOOutputImpedance"));
  function_pointers_.GetAOOutputType = reinterpret_cast<GetAOOutputTypePtr>(shared_library_.get_function_pointer("DAQmxGetAOOutputType"));
  function_pointers_.GetAOReglitchEnable = reinterpret_cast<GetAOReglitchEnablePtr>(shared_library_.get_function_pointer("DAQmxGetAOReglitchEnable"));
  function_pointers_.GetAOResolution = reinterpret_cast<GetAOResolutionPtr>(shared_library_.get_function_pointer("DAQmxGetAOResolution"));
  function_pointers_.GetAOResolutionUnits = reinterpret_cast<GetAOResolutionUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAOResolutionUnits"));
  function_pointers_.GetAOTermCfg = reinterpret_cast<GetAOTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetAOTermCfg"));
  function_pointers_.GetAOUsbXferReqCount = reinterpret_cast<GetAOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxGetAOUsbXferReqCount"));
  function_pointers_.GetAOUsbXferReqSize = reinterpret_cast<GetAOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxGetAOUsbXferReqSize"));
  function_pointers_.GetAOUseOnlyOnBrdMem = reinterpret_cast<GetAOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxGetAOUseOnlyOnBrdMem"));
  function_pointers_.GetAOVoltageCurrentLimit = reinterpret_cast<GetAOVoltageCurrentLimitPtr>(shared_library_.get_function_pointer("DAQmxGetAOVoltageCurrentLimit"));
  function_pointers_.GetAOVoltageUnits = reinterpret_cast<GetAOVoltageUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetAOVoltageUnits"));
  function_pointers_.GetArmStartTrigTimestampVal = reinterpret_cast<GetArmStartTrigTimestampValPtr>(shared_library_.get_function_pointer("DAQmxGetArmStartTrigTimestampVal"));
  function_pointers_.GetArmStartTrigTrigWhen = reinterpret_cast<GetArmStartTrigTrigWhenPtr>(shared_library_.get_function_pointer("DAQmxGetArmStartTrigTrigWhen"));
  function_pointers_.GetAutoConfiguredCDAQSyncConnections = reinterpret_cast<GetAutoConfiguredCDAQSyncConnectionsPtr>(shared_library_.get_function_pointer("DAQmxGetAutoConfiguredCDAQSyncConnections"));
  function_pointers_.GetBufInputBufSize = reinterpret_cast<GetBufInputBufSizePtr>(shared_library_.get_function_pointer("DAQmxGetBufInputBufSize"));
  function_pointers_.GetBufInputOnbrdBufSize = reinterpret_cast<GetBufInputOnbrdBufSizePtr>(shared_library_.get_function_pointer("DAQmxGetBufInputOnbrdBufSize"));
  function_pointers_.GetBufOutputBufSize = reinterpret_cast<GetBufOutputBufSizePtr>(shared_library_.get_function_pointer("DAQmxGetBufOutputBufSize"));
  function_pointers_.GetBufOutputOnbrdBufSize = reinterpret_cast<GetBufOutputOnbrdBufSizePtr>(shared_library_.get_function_pointer("DAQmxGetBufOutputOnbrdBufSize"));
  function_pointers_.GetCIAngEncoderInitialAngle = reinterpret_cast<GetCIAngEncoderInitialAnglePtr>(shared_library_.get_function_pointer("DAQmxGetCIAngEncoderInitialAngle"));
  function_pointers_.GetCIAngEncoderPulsesPerRev = reinterpret_cast<GetCIAngEncoderPulsesPerRevPtr>(shared_library_.get_function_pointer("DAQmxGetCIAngEncoderPulsesPerRev"));
  function_pointers_.GetCIAngEncoderUnits = reinterpret_cast<GetCIAngEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIAngEncoderUnits"));
  function_pointers_.GetCICount = reinterpret_cast<GetCICountPtr>(shared_library_.get_function_pointer("DAQmxGetCICount"));
  function_pointers_.GetCICountEdgesActiveEdge = reinterpret_cast<GetCICountEdgesActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesActiveEdge"));
  function_pointers_.GetCICountEdgesCountDirDigFltrEnable = reinterpret_cast<GetCICountEdgesCountDirDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirDigFltrEnable"));
  function_pointers_.GetCICountEdgesCountDirDigFltrMinPulseWidth = reinterpret_cast<GetCICountEdgesCountDirDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth"));
  function_pointers_.GetCICountEdgesCountDirDigFltrTimebaseRate = reinterpret_cast<GetCICountEdgesCountDirDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate"));
  function_pointers_.GetCICountEdgesCountDirDigFltrTimebaseSrc = reinterpret_cast<GetCICountEdgesCountDirDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc"));
  function_pointers_.GetCICountEdgesCountDirDigSyncEnable = reinterpret_cast<GetCICountEdgesCountDirDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirDigSyncEnable"));
  function_pointers_.GetCICountEdgesCountDirHyst = reinterpret_cast<GetCICountEdgesCountDirHystPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirHyst"));
  function_pointers_.GetCICountEdgesCountDirLogicLvlBehavior = reinterpret_cast<GetCICountEdgesCountDirLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirLogicLvlBehavior"));
  function_pointers_.GetCICountEdgesCountDirTermCfg = reinterpret_cast<GetCICountEdgesCountDirTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirTermCfg"));
  function_pointers_.GetCICountEdgesCountDirThreshVoltage = reinterpret_cast<GetCICountEdgesCountDirThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountDirThreshVoltage"));
  function_pointers_.GetCICountEdgesCountResetActiveEdge = reinterpret_cast<GetCICountEdgesCountResetActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetActiveEdge"));
  function_pointers_.GetCICountEdgesCountResetDigFltrEnable = reinterpret_cast<GetCICountEdgesCountResetDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetDigFltrEnable"));
  function_pointers_.GetCICountEdgesCountResetDigFltrMinPulseWidth = reinterpret_cast<GetCICountEdgesCountResetDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth"));
  function_pointers_.GetCICountEdgesCountResetDigFltrTimebaseRate = reinterpret_cast<GetCICountEdgesCountResetDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate"));
  function_pointers_.GetCICountEdgesCountResetDigFltrTimebaseSrc = reinterpret_cast<GetCICountEdgesCountResetDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc"));
  function_pointers_.GetCICountEdgesCountResetDigSyncEnable = reinterpret_cast<GetCICountEdgesCountResetDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetDigSyncEnable"));
  function_pointers_.GetCICountEdgesCountResetEnable = reinterpret_cast<GetCICountEdgesCountResetEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetEnable"));
  function_pointers_.GetCICountEdgesCountResetHyst = reinterpret_cast<GetCICountEdgesCountResetHystPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetHyst"));
  function_pointers_.GetCICountEdgesCountResetLogicLvlBehavior = reinterpret_cast<GetCICountEdgesCountResetLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetLogicLvlBehavior"));
  function_pointers_.GetCICountEdgesCountResetResetCount = reinterpret_cast<GetCICountEdgesCountResetResetCountPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetResetCount"));
  function_pointers_.GetCICountEdgesCountResetTerm = reinterpret_cast<GetCICountEdgesCountResetTermPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetTerm"));
  function_pointers_.GetCICountEdgesCountResetTermCfg = reinterpret_cast<GetCICountEdgesCountResetTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetTermCfg"));
  function_pointers_.GetCICountEdgesCountResetThreshVoltage = reinterpret_cast<GetCICountEdgesCountResetThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesCountResetThreshVoltage"));
  function_pointers_.GetCICountEdgesDigFltrEnable = reinterpret_cast<GetCICountEdgesDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDigFltrEnable"));
  function_pointers_.GetCICountEdgesDigFltrMinPulseWidth = reinterpret_cast<GetCICountEdgesDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDigFltrMinPulseWidth"));
  function_pointers_.GetCICountEdgesDigFltrTimebaseRate = reinterpret_cast<GetCICountEdgesDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDigFltrTimebaseRate"));
  function_pointers_.GetCICountEdgesDigFltrTimebaseSrc = reinterpret_cast<GetCICountEdgesDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDigFltrTimebaseSrc"));
  function_pointers_.GetCICountEdgesDigSyncEnable = reinterpret_cast<GetCICountEdgesDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDigSyncEnable"));
  function_pointers_.GetCICountEdgesDir = reinterpret_cast<GetCICountEdgesDirPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDir"));
  function_pointers_.GetCICountEdgesDirTerm = reinterpret_cast<GetCICountEdgesDirTermPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesDirTerm"));
  function_pointers_.GetCICountEdgesGateDigFltrEnable = reinterpret_cast<GetCICountEdgesGateDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateDigFltrEnable"));
  function_pointers_.GetCICountEdgesGateDigFltrMinPulseWidth = reinterpret_cast<GetCICountEdgesGateDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateDigFltrMinPulseWidth"));
  function_pointers_.GetCICountEdgesGateDigFltrTimebaseRate = reinterpret_cast<GetCICountEdgesGateDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateDigFltrTimebaseRate"));
  function_pointers_.GetCICountEdgesGateDigFltrTimebaseSrc = reinterpret_cast<GetCICountEdgesGateDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateDigFltrTimebaseSrc"));
  function_pointers_.GetCICountEdgesGateEnable = reinterpret_cast<GetCICountEdgesGateEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateEnable"));
  function_pointers_.GetCICountEdgesGateHyst = reinterpret_cast<GetCICountEdgesGateHystPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateHyst"));
  function_pointers_.GetCICountEdgesGateLogicLvlBehavior = reinterpret_cast<GetCICountEdgesGateLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateLogicLvlBehavior"));
  function_pointers_.GetCICountEdgesGateTerm = reinterpret_cast<GetCICountEdgesGateTermPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateTerm"));
  function_pointers_.GetCICountEdgesGateTermCfg = reinterpret_cast<GetCICountEdgesGateTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateTermCfg"));
  function_pointers_.GetCICountEdgesGateThreshVoltage = reinterpret_cast<GetCICountEdgesGateThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateThreshVoltage"));
  function_pointers_.GetCICountEdgesGateWhen = reinterpret_cast<GetCICountEdgesGateWhenPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesGateWhen"));
  function_pointers_.GetCICountEdgesHyst = reinterpret_cast<GetCICountEdgesHystPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesHyst"));
  function_pointers_.GetCICountEdgesInitialCnt = reinterpret_cast<GetCICountEdgesInitialCntPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesInitialCnt"));
  function_pointers_.GetCICountEdgesLogicLvlBehavior = reinterpret_cast<GetCICountEdgesLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesLogicLvlBehavior"));
  function_pointers_.GetCICountEdgesTerm = reinterpret_cast<GetCICountEdgesTermPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesTerm"));
  function_pointers_.GetCICountEdgesTermCfg = reinterpret_cast<GetCICountEdgesTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesTermCfg"));
  function_pointers_.GetCICountEdgesThreshVoltage = reinterpret_cast<GetCICountEdgesThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCICountEdgesThreshVoltage"));
  function_pointers_.GetCICtrTimebaseActiveEdge = reinterpret_cast<GetCICtrTimebaseActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseActiveEdge"));
  function_pointers_.GetCICtrTimebaseDigFltrEnable = reinterpret_cast<GetCICtrTimebaseDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseDigFltrEnable"));
  function_pointers_.GetCICtrTimebaseDigFltrMinPulseWidth = reinterpret_cast<GetCICtrTimebaseDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseDigFltrMinPulseWidth"));
  function_pointers_.GetCICtrTimebaseDigFltrTimebaseRate = reinterpret_cast<GetCICtrTimebaseDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseDigFltrTimebaseRate"));
  function_pointers_.GetCICtrTimebaseDigFltrTimebaseSrc = reinterpret_cast<GetCICtrTimebaseDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseDigFltrTimebaseSrc"));
  function_pointers_.GetCICtrTimebaseDigSyncEnable = reinterpret_cast<GetCICtrTimebaseDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseDigSyncEnable"));
  function_pointers_.GetCICtrTimebaseMasterTimebaseDiv = reinterpret_cast<GetCICtrTimebaseMasterTimebaseDivPtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseMasterTimebaseDiv"));
  function_pointers_.GetCICtrTimebaseRate = reinterpret_cast<GetCICtrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseRate"));
  function_pointers_.GetCICtrTimebaseSrc = reinterpret_cast<GetCICtrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCICtrTimebaseSrc"));
  function_pointers_.GetCICustomScaleName = reinterpret_cast<GetCICustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxGetCICustomScaleName"));
  function_pointers_.GetCIDataXferMech = reinterpret_cast<GetCIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxGetCIDataXferMech"));
  function_pointers_.GetCIDataXferReqCond = reinterpret_cast<GetCIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxGetCIDataXferReqCond"));
  function_pointers_.GetCIDupCountPrevent = reinterpret_cast<GetCIDupCountPreventPtr>(shared_library_.get_function_pointer("DAQmxGetCIDupCountPrevent"));
  function_pointers_.GetCIDutyCycleDigFltrEnable = reinterpret_cast<GetCIDutyCycleDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleDigFltrEnable"));
  function_pointers_.GetCIDutyCycleDigFltrMinPulseWidth = reinterpret_cast<GetCIDutyCycleDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleDigFltrMinPulseWidth"));
  function_pointers_.GetCIDutyCycleDigFltrTimebaseRate = reinterpret_cast<GetCIDutyCycleDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleDigFltrTimebaseRate"));
  function_pointers_.GetCIDutyCycleDigFltrTimebaseSrc = reinterpret_cast<GetCIDutyCycleDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleDigFltrTimebaseSrc"));
  function_pointers_.GetCIDutyCycleLogicLvlBehavior = reinterpret_cast<GetCIDutyCycleLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleLogicLvlBehavior"));
  function_pointers_.GetCIDutyCycleStartingEdge = reinterpret_cast<GetCIDutyCycleStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleStartingEdge"));
  function_pointers_.GetCIDutyCycleTerm = reinterpret_cast<GetCIDutyCycleTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleTerm"));
  function_pointers_.GetCIDutyCycleTermCfg = reinterpret_cast<GetCIDutyCycleTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIDutyCycleTermCfg"));
  function_pointers_.GetCIEncoderAInputDigFltrEnable = reinterpret_cast<GetCIEncoderAInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputDigFltrEnable"));
  function_pointers_.GetCIEncoderAInputDigFltrMinPulseWidth = reinterpret_cast<GetCIEncoderAInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputDigFltrMinPulseWidth"));
  function_pointers_.GetCIEncoderAInputDigFltrTimebaseRate = reinterpret_cast<GetCIEncoderAInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputDigFltrTimebaseRate"));
  function_pointers_.GetCIEncoderAInputDigFltrTimebaseSrc = reinterpret_cast<GetCIEncoderAInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputDigFltrTimebaseSrc"));
  function_pointers_.GetCIEncoderAInputDigSyncEnable = reinterpret_cast<GetCIEncoderAInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputDigSyncEnable"));
  function_pointers_.GetCIEncoderAInputLogicLvlBehavior = reinterpret_cast<GetCIEncoderAInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputLogicLvlBehavior"));
  function_pointers_.GetCIEncoderAInputTerm = reinterpret_cast<GetCIEncoderAInputTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputTerm"));
  function_pointers_.GetCIEncoderAInputTermCfg = reinterpret_cast<GetCIEncoderAInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderAInputTermCfg"));
  function_pointers_.GetCIEncoderBInputDigFltrEnable = reinterpret_cast<GetCIEncoderBInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputDigFltrEnable"));
  function_pointers_.GetCIEncoderBInputDigFltrMinPulseWidth = reinterpret_cast<GetCIEncoderBInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputDigFltrMinPulseWidth"));
  function_pointers_.GetCIEncoderBInputDigFltrTimebaseRate = reinterpret_cast<GetCIEncoderBInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputDigFltrTimebaseRate"));
  function_pointers_.GetCIEncoderBInputDigFltrTimebaseSrc = reinterpret_cast<GetCIEncoderBInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputDigFltrTimebaseSrc"));
  function_pointers_.GetCIEncoderBInputDigSyncEnable = reinterpret_cast<GetCIEncoderBInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputDigSyncEnable"));
  function_pointers_.GetCIEncoderBInputLogicLvlBehavior = reinterpret_cast<GetCIEncoderBInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputLogicLvlBehavior"));
  function_pointers_.GetCIEncoderBInputTerm = reinterpret_cast<GetCIEncoderBInputTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputTerm"));
  function_pointers_.GetCIEncoderBInputTermCfg = reinterpret_cast<GetCIEncoderBInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderBInputTermCfg"));
  function_pointers_.GetCIEncoderDecodingType = reinterpret_cast<GetCIEncoderDecodingTypePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderDecodingType"));
  function_pointers_.GetCIEncoderZIndexEnable = reinterpret_cast<GetCIEncoderZIndexEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZIndexEnable"));
  function_pointers_.GetCIEncoderZIndexPhase = reinterpret_cast<GetCIEncoderZIndexPhasePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZIndexPhase"));
  function_pointers_.GetCIEncoderZIndexVal = reinterpret_cast<GetCIEncoderZIndexValPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZIndexVal"));
  function_pointers_.GetCIEncoderZInputDigFltrEnable = reinterpret_cast<GetCIEncoderZInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputDigFltrEnable"));
  function_pointers_.GetCIEncoderZInputDigFltrMinPulseWidth = reinterpret_cast<GetCIEncoderZInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputDigFltrMinPulseWidth"));
  function_pointers_.GetCIEncoderZInputDigFltrTimebaseRate = reinterpret_cast<GetCIEncoderZInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputDigFltrTimebaseRate"));
  function_pointers_.GetCIEncoderZInputDigFltrTimebaseSrc = reinterpret_cast<GetCIEncoderZInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputDigFltrTimebaseSrc"));
  function_pointers_.GetCIEncoderZInputDigSyncEnable = reinterpret_cast<GetCIEncoderZInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputDigSyncEnable"));
  function_pointers_.GetCIEncoderZInputLogicLvlBehavior = reinterpret_cast<GetCIEncoderZInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputLogicLvlBehavior"));
  function_pointers_.GetCIEncoderZInputTerm = reinterpret_cast<GetCIEncoderZInputTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputTerm"));
  function_pointers_.GetCIEncoderZInputTermCfg = reinterpret_cast<GetCIEncoderZInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIEncoderZInputTermCfg"));
  function_pointers_.GetCIFilterDelay = reinterpret_cast<GetCIFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxGetCIFilterDelay"));
  function_pointers_.GetCIFilterDelayUnits = reinterpret_cast<GetCIFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIFilterDelayUnits"));
  function_pointers_.GetCIFilterEnable = reinterpret_cast<GetCIFilterEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIFilterEnable"));
  function_pointers_.GetCIFilterFreq = reinterpret_cast<GetCIFilterFreqPtr>(shared_library_.get_function_pointer("DAQmxGetCIFilterFreq"));
  function_pointers_.GetCIFilterOrder = reinterpret_cast<GetCIFilterOrderPtr>(shared_library_.get_function_pointer("DAQmxGetCIFilterOrder"));
  function_pointers_.GetCIFilterResponse = reinterpret_cast<GetCIFilterResponsePtr>(shared_library_.get_function_pointer("DAQmxGetCIFilterResponse"));
  function_pointers_.GetCIFreqDigFltrEnable = reinterpret_cast<GetCIFreqDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqDigFltrEnable"));
  function_pointers_.GetCIFreqDigFltrMinPulseWidth = reinterpret_cast<GetCIFreqDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqDigFltrMinPulseWidth"));
  function_pointers_.GetCIFreqDigFltrTimebaseRate = reinterpret_cast<GetCIFreqDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqDigFltrTimebaseRate"));
  function_pointers_.GetCIFreqDigFltrTimebaseSrc = reinterpret_cast<GetCIFreqDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqDigFltrTimebaseSrc"));
  function_pointers_.GetCIFreqDigSyncEnable = reinterpret_cast<GetCIFreqDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqDigSyncEnable"));
  function_pointers_.GetCIFreqDiv = reinterpret_cast<GetCIFreqDivPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqDiv"));
  function_pointers_.GetCIFreqEnableAveraging = reinterpret_cast<GetCIFreqEnableAveragingPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqEnableAveraging"));
  function_pointers_.GetCIFreqHyst = reinterpret_cast<GetCIFreqHystPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqHyst"));
  function_pointers_.GetCIFreqLogicLvlBehavior = reinterpret_cast<GetCIFreqLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqLogicLvlBehavior"));
  function_pointers_.GetCIFreqMeasMeth = reinterpret_cast<GetCIFreqMeasMethPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqMeasMeth"));
  function_pointers_.GetCIFreqMeasTime = reinterpret_cast<GetCIFreqMeasTimePtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqMeasTime"));
  function_pointers_.GetCIFreqStartingEdge = reinterpret_cast<GetCIFreqStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqStartingEdge"));
  function_pointers_.GetCIFreqTerm = reinterpret_cast<GetCIFreqTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqTerm"));
  function_pointers_.GetCIFreqTermCfg = reinterpret_cast<GetCIFreqTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqTermCfg"));
  function_pointers_.GetCIFreqThreshVoltage = reinterpret_cast<GetCIFreqThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqThreshVoltage"));
  function_pointers_.GetCIFreqUnits = reinterpret_cast<GetCIFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIFreqUnits"));
  function_pointers_.GetCIGPSSyncMethod = reinterpret_cast<GetCIGPSSyncMethodPtr>(shared_library_.get_function_pointer("DAQmxGetCIGPSSyncMethod"));
  function_pointers_.GetCIGPSSyncSrc = reinterpret_cast<GetCIGPSSyncSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIGPSSyncSrc"));
  function_pointers_.GetCILinEncoderDistPerPulse = reinterpret_cast<GetCILinEncoderDistPerPulsePtr>(shared_library_.get_function_pointer("DAQmxGetCILinEncoderDistPerPulse"));
  function_pointers_.GetCILinEncoderInitialPos = reinterpret_cast<GetCILinEncoderInitialPosPtr>(shared_library_.get_function_pointer("DAQmxGetCILinEncoderInitialPos"));
  function_pointers_.GetCILinEncoderUnits = reinterpret_cast<GetCILinEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCILinEncoderUnits"));
  function_pointers_.GetCIMax = reinterpret_cast<GetCIMaxPtr>(shared_library_.get_function_pointer("DAQmxGetCIMax"));
  function_pointers_.GetCIMaxMeasPeriod = reinterpret_cast<GetCIMaxMeasPeriodPtr>(shared_library_.get_function_pointer("DAQmxGetCIMaxMeasPeriod"));
  function_pointers_.GetCIMeasType = reinterpret_cast<GetCIMeasTypePtr>(shared_library_.get_function_pointer("DAQmxGetCIMeasType"));
  function_pointers_.GetCIMemMapEnable = reinterpret_cast<GetCIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIMemMapEnable"));
  function_pointers_.GetCIMin = reinterpret_cast<GetCIMinPtr>(shared_library_.get_function_pointer("DAQmxGetCIMin"));
  function_pointers_.GetCINumPossiblyInvalidSamps = reinterpret_cast<GetCINumPossiblyInvalidSampsPtr>(shared_library_.get_function_pointer("DAQmxGetCINumPossiblyInvalidSamps"));
  function_pointers_.GetCIOutputState = reinterpret_cast<GetCIOutputStatePtr>(shared_library_.get_function_pointer("DAQmxGetCIOutputState"));
  function_pointers_.GetCIPeriodDigFltrEnable = reinterpret_cast<GetCIPeriodDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodDigFltrEnable"));
  function_pointers_.GetCIPeriodDigFltrMinPulseWidth = reinterpret_cast<GetCIPeriodDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodDigFltrMinPulseWidth"));
  function_pointers_.GetCIPeriodDigFltrTimebaseRate = reinterpret_cast<GetCIPeriodDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodDigFltrTimebaseRate"));
  function_pointers_.GetCIPeriodDigFltrTimebaseSrc = reinterpret_cast<GetCIPeriodDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodDigFltrTimebaseSrc"));
  function_pointers_.GetCIPeriodDigSyncEnable = reinterpret_cast<GetCIPeriodDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodDigSyncEnable"));
  function_pointers_.GetCIPeriodDiv = reinterpret_cast<GetCIPeriodDivPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodDiv"));
  function_pointers_.GetCIPeriodEnableAveraging = reinterpret_cast<GetCIPeriodEnableAveragingPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodEnableAveraging"));
  function_pointers_.GetCIPeriodHyst = reinterpret_cast<GetCIPeriodHystPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodHyst"));
  function_pointers_.GetCIPeriodLogicLvlBehavior = reinterpret_cast<GetCIPeriodLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodLogicLvlBehavior"));
  function_pointers_.GetCIPeriodMeasMeth = reinterpret_cast<GetCIPeriodMeasMethPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodMeasMeth"));
  function_pointers_.GetCIPeriodMeasTime = reinterpret_cast<GetCIPeriodMeasTimePtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodMeasTime"));
  function_pointers_.GetCIPeriodStartingEdge = reinterpret_cast<GetCIPeriodStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodStartingEdge"));
  function_pointers_.GetCIPeriodTerm = reinterpret_cast<GetCIPeriodTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodTerm"));
  function_pointers_.GetCIPeriodTermCfg = reinterpret_cast<GetCIPeriodTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodTermCfg"));
  function_pointers_.GetCIPeriodThreshVoltage = reinterpret_cast<GetCIPeriodThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodThreshVoltage"));
  function_pointers_.GetCIPeriodUnits = reinterpret_cast<GetCIPeriodUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIPeriodUnits"));
  function_pointers_.GetCIPrescaler = reinterpret_cast<GetCIPrescalerPtr>(shared_library_.get_function_pointer("DAQmxGetCIPrescaler"));
  function_pointers_.GetCIPulseFreqDigFltrEnable = reinterpret_cast<GetCIPulseFreqDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqDigFltrEnable"));
  function_pointers_.GetCIPulseFreqDigFltrMinPulseWidth = reinterpret_cast<GetCIPulseFreqDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqDigFltrMinPulseWidth"));
  function_pointers_.GetCIPulseFreqDigFltrTimebaseRate = reinterpret_cast<GetCIPulseFreqDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqDigFltrTimebaseRate"));
  function_pointers_.GetCIPulseFreqDigFltrTimebaseSrc = reinterpret_cast<GetCIPulseFreqDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqDigFltrTimebaseSrc"));
  function_pointers_.GetCIPulseFreqDigSyncEnable = reinterpret_cast<GetCIPulseFreqDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqDigSyncEnable"));
  function_pointers_.GetCIPulseFreqLogicLvlBehavior = reinterpret_cast<GetCIPulseFreqLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqLogicLvlBehavior"));
  function_pointers_.GetCIPulseFreqStartEdge = reinterpret_cast<GetCIPulseFreqStartEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqStartEdge"));
  function_pointers_.GetCIPulseFreqTerm = reinterpret_cast<GetCIPulseFreqTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqTerm"));
  function_pointers_.GetCIPulseFreqTermCfg = reinterpret_cast<GetCIPulseFreqTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqTermCfg"));
  function_pointers_.GetCIPulseFreqUnits = reinterpret_cast<GetCIPulseFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseFreqUnits"));
  function_pointers_.GetCIPulseTicksDigFltrEnable = reinterpret_cast<GetCIPulseTicksDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksDigFltrEnable"));
  function_pointers_.GetCIPulseTicksDigFltrMinPulseWidth = reinterpret_cast<GetCIPulseTicksDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksDigFltrMinPulseWidth"));
  function_pointers_.GetCIPulseTicksDigFltrTimebaseRate = reinterpret_cast<GetCIPulseTicksDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksDigFltrTimebaseRate"));
  function_pointers_.GetCIPulseTicksDigFltrTimebaseSrc = reinterpret_cast<GetCIPulseTicksDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksDigFltrTimebaseSrc"));
  function_pointers_.GetCIPulseTicksDigSyncEnable = reinterpret_cast<GetCIPulseTicksDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksDigSyncEnable"));
  function_pointers_.GetCIPulseTicksLogicLvlBehavior = reinterpret_cast<GetCIPulseTicksLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksLogicLvlBehavior"));
  function_pointers_.GetCIPulseTicksStartEdge = reinterpret_cast<GetCIPulseTicksStartEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksStartEdge"));
  function_pointers_.GetCIPulseTicksTerm = reinterpret_cast<GetCIPulseTicksTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksTerm"));
  function_pointers_.GetCIPulseTicksTermCfg = reinterpret_cast<GetCIPulseTicksTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTicksTermCfg"));
  function_pointers_.GetCIPulseTimeDigFltrEnable = reinterpret_cast<GetCIPulseTimeDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeDigFltrEnable"));
  function_pointers_.GetCIPulseTimeDigFltrMinPulseWidth = reinterpret_cast<GetCIPulseTimeDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeDigFltrMinPulseWidth"));
  function_pointers_.GetCIPulseTimeDigFltrTimebaseRate = reinterpret_cast<GetCIPulseTimeDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeDigFltrTimebaseRate"));
  function_pointers_.GetCIPulseTimeDigFltrTimebaseSrc = reinterpret_cast<GetCIPulseTimeDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeDigFltrTimebaseSrc"));
  function_pointers_.GetCIPulseTimeDigSyncEnable = reinterpret_cast<GetCIPulseTimeDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeDigSyncEnable"));
  function_pointers_.GetCIPulseTimeLogicLvlBehavior = reinterpret_cast<GetCIPulseTimeLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeLogicLvlBehavior"));
  function_pointers_.GetCIPulseTimeStartEdge = reinterpret_cast<GetCIPulseTimeStartEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeStartEdge"));
  function_pointers_.GetCIPulseTimeTerm = reinterpret_cast<GetCIPulseTimeTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeTerm"));
  function_pointers_.GetCIPulseTimeTermCfg = reinterpret_cast<GetCIPulseTimeTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeTermCfg"));
  function_pointers_.GetCIPulseTimeUnits = reinterpret_cast<GetCIPulseTimeUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseTimeUnits"));
  function_pointers_.GetCIPulseWidthDigFltrEnable = reinterpret_cast<GetCIPulseWidthDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthDigFltrEnable"));
  function_pointers_.GetCIPulseWidthDigFltrMinPulseWidth = reinterpret_cast<GetCIPulseWidthDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthDigFltrMinPulseWidth"));
  function_pointers_.GetCIPulseWidthDigFltrTimebaseRate = reinterpret_cast<GetCIPulseWidthDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthDigFltrTimebaseRate"));
  function_pointers_.GetCIPulseWidthDigFltrTimebaseSrc = reinterpret_cast<GetCIPulseWidthDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthDigFltrTimebaseSrc"));
  function_pointers_.GetCIPulseWidthDigSyncEnable = reinterpret_cast<GetCIPulseWidthDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthDigSyncEnable"));
  function_pointers_.GetCIPulseWidthLogicLvlBehavior = reinterpret_cast<GetCIPulseWidthLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthLogicLvlBehavior"));
  function_pointers_.GetCIPulseWidthStartingEdge = reinterpret_cast<GetCIPulseWidthStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthStartingEdge"));
  function_pointers_.GetCIPulseWidthTerm = reinterpret_cast<GetCIPulseWidthTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthTerm"));
  function_pointers_.GetCIPulseWidthTermCfg = reinterpret_cast<GetCIPulseWidthTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthTermCfg"));
  function_pointers_.GetCIPulseWidthUnits = reinterpret_cast<GetCIPulseWidthUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIPulseWidthUnits"));
  function_pointers_.GetCISampClkOverrunBehavior = reinterpret_cast<GetCISampClkOverrunBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCISampClkOverrunBehavior"));
  function_pointers_.GetCISampClkOverrunSentinelVal = reinterpret_cast<GetCISampClkOverrunSentinelValPtr>(shared_library_.get_function_pointer("DAQmxGetCISampClkOverrunSentinelVal"));
  function_pointers_.GetCISemiPeriodDigFltrEnable = reinterpret_cast<GetCISemiPeriodDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodDigFltrEnable"));
  function_pointers_.GetCISemiPeriodDigFltrMinPulseWidth = reinterpret_cast<GetCISemiPeriodDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodDigFltrMinPulseWidth"));
  function_pointers_.GetCISemiPeriodDigFltrTimebaseRate = reinterpret_cast<GetCISemiPeriodDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodDigFltrTimebaseRate"));
  function_pointers_.GetCISemiPeriodDigFltrTimebaseSrc = reinterpret_cast<GetCISemiPeriodDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodDigFltrTimebaseSrc"));
  function_pointers_.GetCISemiPeriodDigSyncEnable = reinterpret_cast<GetCISemiPeriodDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodDigSyncEnable"));
  function_pointers_.GetCISemiPeriodLogicLvlBehavior = reinterpret_cast<GetCISemiPeriodLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodLogicLvlBehavior"));
  function_pointers_.GetCISemiPeriodStartingEdge = reinterpret_cast<GetCISemiPeriodStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodStartingEdge"));
  function_pointers_.GetCISemiPeriodTerm = reinterpret_cast<GetCISemiPeriodTermPtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodTerm"));
  function_pointers_.GetCISemiPeriodTermCfg = reinterpret_cast<GetCISemiPeriodTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodTermCfg"));
  function_pointers_.GetCISemiPeriodUnits = reinterpret_cast<GetCISemiPeriodUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCISemiPeriodUnits"));
  function_pointers_.GetCITCReached = reinterpret_cast<GetCITCReachedPtr>(shared_library_.get_function_pointer("DAQmxGetCITCReached"));
  function_pointers_.GetCIThreshVoltage = reinterpret_cast<GetCIThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxGetCIThreshVoltage"));
  function_pointers_.GetCITimestampInitialSeconds = reinterpret_cast<GetCITimestampInitialSecondsPtr>(shared_library_.get_function_pointer("DAQmxGetCITimestampInitialSeconds"));
  function_pointers_.GetCITimestampUnits = reinterpret_cast<GetCITimestampUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCITimestampUnits"));
  function_pointers_.GetCITwoEdgeSepFirstDigFltrEnable = reinterpret_cast<GetCITwoEdgeSepFirstDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstDigFltrEnable"));
  function_pointers_.GetCITwoEdgeSepFirstDigFltrMinPulseWidth = reinterpret_cast<GetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth"));
  function_pointers_.GetCITwoEdgeSepFirstDigFltrTimebaseRate = reinterpret_cast<GetCITwoEdgeSepFirstDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate"));
  function_pointers_.GetCITwoEdgeSepFirstDigFltrTimebaseSrc = reinterpret_cast<GetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc"));
  function_pointers_.GetCITwoEdgeSepFirstDigSyncEnable = reinterpret_cast<GetCITwoEdgeSepFirstDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstDigSyncEnable"));
  function_pointers_.GetCITwoEdgeSepFirstEdge = reinterpret_cast<GetCITwoEdgeSepFirstEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstEdge"));
  function_pointers_.GetCITwoEdgeSepFirstLogicLvlBehavior = reinterpret_cast<GetCITwoEdgeSepFirstLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior"));
  function_pointers_.GetCITwoEdgeSepFirstTerm = reinterpret_cast<GetCITwoEdgeSepFirstTermPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstTerm"));
  function_pointers_.GetCITwoEdgeSepFirstTermCfg = reinterpret_cast<GetCITwoEdgeSepFirstTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepFirstTermCfg"));
  function_pointers_.GetCITwoEdgeSepSecondDigFltrEnable = reinterpret_cast<GetCITwoEdgeSepSecondDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondDigFltrEnable"));
  function_pointers_.GetCITwoEdgeSepSecondDigFltrMinPulseWidth = reinterpret_cast<GetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth"));
  function_pointers_.GetCITwoEdgeSepSecondDigFltrTimebaseRate = reinterpret_cast<GetCITwoEdgeSepSecondDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate"));
  function_pointers_.GetCITwoEdgeSepSecondDigFltrTimebaseSrc = reinterpret_cast<GetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc"));
  function_pointers_.GetCITwoEdgeSepSecondDigSyncEnable = reinterpret_cast<GetCITwoEdgeSepSecondDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondDigSyncEnable"));
  function_pointers_.GetCITwoEdgeSepSecondEdge = reinterpret_cast<GetCITwoEdgeSepSecondEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondEdge"));
  function_pointers_.GetCITwoEdgeSepSecondLogicLvlBehavior = reinterpret_cast<GetCITwoEdgeSepSecondLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior"));
  function_pointers_.GetCITwoEdgeSepSecondTerm = reinterpret_cast<GetCITwoEdgeSepSecondTermPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondTerm"));
  function_pointers_.GetCITwoEdgeSepSecondTermCfg = reinterpret_cast<GetCITwoEdgeSepSecondTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepSecondTermCfg"));
  function_pointers_.GetCITwoEdgeSepUnits = reinterpret_cast<GetCITwoEdgeSepUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCITwoEdgeSepUnits"));
  function_pointers_.GetCIUsbXferReqCount = reinterpret_cast<GetCIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxGetCIUsbXferReqCount"));
  function_pointers_.GetCIUsbXferReqSize = reinterpret_cast<GetCIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxGetCIUsbXferReqSize"));
  function_pointers_.GetCIVelocityAngEncoderPulsesPerRev = reinterpret_cast<GetCIVelocityAngEncoderPulsesPerRevPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityAngEncoderPulsesPerRev"));
  function_pointers_.GetCIVelocityAngEncoderUnits = reinterpret_cast<GetCIVelocityAngEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityAngEncoderUnits"));
  function_pointers_.GetCIVelocityDiv = reinterpret_cast<GetCIVelocityDivPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityDiv"));
  function_pointers_.GetCIVelocityEncoderAInputDigFltrEnable = reinterpret_cast<GetCIVelocityEncoderAInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputDigFltrEnable"));
  function_pointers_.GetCIVelocityEncoderAInputDigFltrMinPulseWidth = reinterpret_cast<GetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth"));
  function_pointers_.GetCIVelocityEncoderAInputDigFltrTimebaseRate = reinterpret_cast<GetCIVelocityEncoderAInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate"));
  function_pointers_.GetCIVelocityEncoderAInputDigFltrTimebaseSrc = reinterpret_cast<GetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc"));
  function_pointers_.GetCIVelocityEncoderAInputLogicLvlBehavior = reinterpret_cast<GetCIVelocityEncoderAInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior"));
  function_pointers_.GetCIVelocityEncoderAInputTerm = reinterpret_cast<GetCIVelocityEncoderAInputTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputTerm"));
  function_pointers_.GetCIVelocityEncoderAInputTermCfg = reinterpret_cast<GetCIVelocityEncoderAInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderAInputTermCfg"));
  function_pointers_.GetCIVelocityEncoderBInputDigFltrEnable = reinterpret_cast<GetCIVelocityEncoderBInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputDigFltrEnable"));
  function_pointers_.GetCIVelocityEncoderBInputDigFltrMinPulseWidth = reinterpret_cast<GetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth"));
  function_pointers_.GetCIVelocityEncoderBInputDigFltrTimebaseRate = reinterpret_cast<GetCIVelocityEncoderBInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate"));
  function_pointers_.GetCIVelocityEncoderBInputDigFltrTimebaseSrc = reinterpret_cast<GetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc"));
  function_pointers_.GetCIVelocityEncoderBInputLogicLvlBehavior = reinterpret_cast<GetCIVelocityEncoderBInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior"));
  function_pointers_.GetCIVelocityEncoderBInputTerm = reinterpret_cast<GetCIVelocityEncoderBInputTermPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputTerm"));
  function_pointers_.GetCIVelocityEncoderBInputTermCfg = reinterpret_cast<GetCIVelocityEncoderBInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderBInputTermCfg"));
  function_pointers_.GetCIVelocityEncoderDecodingType = reinterpret_cast<GetCIVelocityEncoderDecodingTypePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityEncoderDecodingType"));
  function_pointers_.GetCIVelocityLinEncoderDistPerPulse = reinterpret_cast<GetCIVelocityLinEncoderDistPerPulsePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityLinEncoderDistPerPulse"));
  function_pointers_.GetCIVelocityLinEncoderUnits = reinterpret_cast<GetCIVelocityLinEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityLinEncoderUnits"));
  function_pointers_.GetCIVelocityMeasTime = reinterpret_cast<GetCIVelocityMeasTimePtr>(shared_library_.get_function_pointer("DAQmxGetCIVelocityMeasTime"));
  function_pointers_.GetCOAutoIncrCnt = reinterpret_cast<GetCOAutoIncrCntPtr>(shared_library_.get_function_pointer("DAQmxGetCOAutoIncrCnt"));
  function_pointers_.GetCOConstrainedGenMode = reinterpret_cast<GetCOConstrainedGenModePtr>(shared_library_.get_function_pointer("DAQmxGetCOConstrainedGenMode"));
  function_pointers_.GetCOCount = reinterpret_cast<GetCOCountPtr>(shared_library_.get_function_pointer("DAQmxGetCOCount"));
  function_pointers_.GetCOCtrTimebaseActiveEdge = reinterpret_cast<GetCOCtrTimebaseActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseActiveEdge"));
  function_pointers_.GetCOCtrTimebaseDigFltrEnable = reinterpret_cast<GetCOCtrTimebaseDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseDigFltrEnable"));
  function_pointers_.GetCOCtrTimebaseDigFltrMinPulseWidth = reinterpret_cast<GetCOCtrTimebaseDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth"));
  function_pointers_.GetCOCtrTimebaseDigFltrTimebaseRate = reinterpret_cast<GetCOCtrTimebaseDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseDigFltrTimebaseRate"));
  function_pointers_.GetCOCtrTimebaseDigFltrTimebaseSrc = reinterpret_cast<GetCOCtrTimebaseDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc"));
  function_pointers_.GetCOCtrTimebaseDigSyncEnable = reinterpret_cast<GetCOCtrTimebaseDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseDigSyncEnable"));
  function_pointers_.GetCOCtrTimebaseMasterTimebaseDiv = reinterpret_cast<GetCOCtrTimebaseMasterTimebaseDivPtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseMasterTimebaseDiv"));
  function_pointers_.GetCOCtrTimebaseRate = reinterpret_cast<GetCOCtrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseRate"));
  function_pointers_.GetCOCtrTimebaseSrc = reinterpret_cast<GetCOCtrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetCOCtrTimebaseSrc"));
  function_pointers_.GetCODataXferMech = reinterpret_cast<GetCODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxGetCODataXferMech"));
  function_pointers_.GetCODataXferReqCond = reinterpret_cast<GetCODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxGetCODataXferReqCond"));
  function_pointers_.GetCOEnableInitialDelayOnRetrigger = reinterpret_cast<GetCOEnableInitialDelayOnRetriggerPtr>(shared_library_.get_function_pointer("DAQmxGetCOEnableInitialDelayOnRetrigger"));
  function_pointers_.GetCOMemMapEnable = reinterpret_cast<GetCOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxGetCOMemMapEnable"));
  function_pointers_.GetCOOutputState = reinterpret_cast<GetCOOutputStatePtr>(shared_library_.get_function_pointer("DAQmxGetCOOutputState"));
  function_pointers_.GetCOOutputType = reinterpret_cast<GetCOOutputTypePtr>(shared_library_.get_function_pointer("DAQmxGetCOOutputType"));
  function_pointers_.GetCOPrescaler = reinterpret_cast<GetCOPrescalerPtr>(shared_library_.get_function_pointer("DAQmxGetCOPrescaler"));
  function_pointers_.GetCOPulseDone = reinterpret_cast<GetCOPulseDonePtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseDone"));
  function_pointers_.GetCOPulseDutyCyc = reinterpret_cast<GetCOPulseDutyCycPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseDutyCyc"));
  function_pointers_.GetCOPulseFreq = reinterpret_cast<GetCOPulseFreqPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseFreq"));
  function_pointers_.GetCOPulseFreqInitialDelay = reinterpret_cast<GetCOPulseFreqInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseFreqInitialDelay"));
  function_pointers_.GetCOPulseFreqUnits = reinterpret_cast<GetCOPulseFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseFreqUnits"));
  function_pointers_.GetCOPulseHighTicks = reinterpret_cast<GetCOPulseHighTicksPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseHighTicks"));
  function_pointers_.GetCOPulseHighTime = reinterpret_cast<GetCOPulseHighTimePtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseHighTime"));
  function_pointers_.GetCOPulseIdleState = reinterpret_cast<GetCOPulseIdleStatePtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseIdleState"));
  function_pointers_.GetCOPulseLowTicks = reinterpret_cast<GetCOPulseLowTicksPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseLowTicks"));
  function_pointers_.GetCOPulseLowTime = reinterpret_cast<GetCOPulseLowTimePtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseLowTime"));
  function_pointers_.GetCOPulseTerm = reinterpret_cast<GetCOPulseTermPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseTerm"));
  function_pointers_.GetCOPulseTicksInitialDelay = reinterpret_cast<GetCOPulseTicksInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseTicksInitialDelay"));
  function_pointers_.GetCOPulseTimeInitialDelay = reinterpret_cast<GetCOPulseTimeInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseTimeInitialDelay"));
  function_pointers_.GetCOPulseTimeUnits = reinterpret_cast<GetCOPulseTimeUnitsPtr>(shared_library_.get_function_pointer("DAQmxGetCOPulseTimeUnits"));
  function_pointers_.GetCORdyForNewVal = reinterpret_cast<GetCORdyForNewValPtr>(shared_library_.get_function_pointer("DAQmxGetCORdyForNewVal"));
  function_pointers_.GetCOUsbXferReqCount = reinterpret_cast<GetCOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxGetCOUsbXferReqCount"));
  function_pointers_.GetCOUsbXferReqSize = reinterpret_cast<GetCOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxGetCOUsbXferReqSize"));
  function_pointers_.GetCOUseOnlyOnBrdMem = reinterpret_cast<GetCOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxGetCOUseOnlyOnBrdMem"));
  function_pointers_.GetCalAccConnectionCount = reinterpret_cast<GetCalAccConnectionCountPtr>(shared_library_.get_function_pointer("DAQmxGetCalAccConnectionCount"));
  function_pointers_.GetCalDevTemp = reinterpret_cast<GetCalDevTempPtr>(shared_library_.get_function_pointer("DAQmxGetCalDevTemp"));
  function_pointers_.GetCalRecommendedAccConnectionCountLimit = reinterpret_cast<GetCalRecommendedAccConnectionCountLimitPtr>(shared_library_.get_function_pointer("DAQmxGetCalRecommendedAccConnectionCountLimit"));
  function_pointers_.GetCalUserDefinedInfo = reinterpret_cast<GetCalUserDefinedInfoPtr>(shared_library_.get_function_pointer("DAQmxGetCalUserDefinedInfo"));
  function_pointers_.GetCalUserDefinedInfoMaxSize = reinterpret_cast<GetCalUserDefinedInfoMaxSizePtr>(shared_library_.get_function_pointer("DAQmxGetCalUserDefinedInfoMaxSize"));
  function_pointers_.GetChanDescr = reinterpret_cast<GetChanDescrPtr>(shared_library_.get_function_pointer("DAQmxGetChanDescr"));
  function_pointers_.GetChanIsGlobal = reinterpret_cast<GetChanIsGlobalPtr>(shared_library_.get_function_pointer("DAQmxGetChanIsGlobal"));
  function_pointers_.GetChanSyncUnlockBehavior = reinterpret_cast<GetChanSyncUnlockBehaviorPtr>(shared_library_.get_function_pointer("DAQmxGetChanSyncUnlockBehavior"));
  function_pointers_.GetChanType = reinterpret_cast<GetChanTypePtr>(shared_library_.get_function_pointer("DAQmxGetChanType"));
  function_pointers_.GetDIAcquireOn = reinterpret_cast<GetDIAcquireOnPtr>(shared_library_.get_function_pointer("DAQmxGetDIAcquireOn"));
  function_pointers_.GetDIDataXferMech = reinterpret_cast<GetDIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxGetDIDataXferMech"));
  function_pointers_.GetDIDataXferReqCond = reinterpret_cast<GetDIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxGetDIDataXferReqCond"));
  function_pointers_.GetDIDigFltrEnable = reinterpret_cast<GetDIDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxGetDIDigFltrEnable"));
  function_pointers_.GetDIDigFltrEnableBusMode = reinterpret_cast<GetDIDigFltrEnableBusModePtr>(shared_library_.get_function_pointer("DAQmxGetDIDigFltrEnableBusMode"));
  function_pointers_.GetDIDigFltrMinPulseWidth = reinterpret_cast<GetDIDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxGetDIDigFltrMinPulseWidth"));
  function_pointers_.GetDIDigFltrTimebaseRate = reinterpret_cast<GetDIDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxGetDIDigFltrTimebaseRate"));
  function_pointers_.GetDIDigFltrTimebaseSrc = reinterpret_cast<GetDIDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxGetDIDigFltrTimebaseSrc"));
  function_pointers_.GetDIDigSyncEnable = reinterpret_cast<GetDIDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxGetDIDigSyncEnable"));
  function_pointers_.GetDIInvertLines = reinterpret_cast<GetDIInvertLinesPtr>(shared_library_.get_function_pointer("DAQmxGetDIInvertLines"));
  function_pointers_.GetDILogicFamily = reinterpret_cast<GetDILogicFamilyPtr>(shared_library_.get_function_pointer("DAQmxGetDILogicFamily"));
  function_pointers_.GetDIMemMapEnable = reinterpret_cast<GetDIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxGetDIMemMapEnable"));
  function_pointers_.GetDINumLines = reinterpret_cast<GetDINumLinesPtr>(shared_library_.get_function_pointer("DAQmxGetDINumLines"));
  function_pointers_.GetDITristate = reinterpret_cast<GetDITristatePtr>(shared_library_.get_function_pointer("DAQmxGetDITristate"));
  function_pointers_.GetDIUsbXferReqCount = reinterpret_cast<GetDIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxGetDIUsbXferReqCount"));
  function_pointers_.GetDIUsbXferReqSize = reinterpret_cast<GetDIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxGetDIUsbXferReqSize"));
  function_pointers_.GetDODataXferMech = reinterpret_cast<GetDODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxGetDODataXferMech"));
  function_pointers_.GetDODataXferReqCond = reinterpret_cast<GetDODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxGetDODataXferReqCond"));
  function_pointers_.GetDOGenerateOn = reinterpret_cast<GetDOGenerateOnPtr>(shared_library_.get_function_pointer("DAQmxGetDOGenerateOn"));
  function_pointers_.GetDOInvertLines = reinterpret_cast<GetDOInvertLinesPtr>(shared_library_.get_function_pointer("DAQmxGetDOInvertLines"));
  function_pointers_.GetDOLineStatesDoneState = reinterpret_cast<GetDOLineStatesDoneStatePtr>(shared_library_.get_function_pointer("DAQmxGetDOLineStatesDoneState"));
  function_pointers_.GetDOLineStatesPausedState = reinterpret_cast<GetDOLineStatesPausedStatePtr>(shared_library_.get_function_pointer("DAQmxGetDOLineStatesPausedState"));
  function_pointers_.GetDOLineStatesStartState = reinterpret_cast<GetDOLineStatesStartStatePtr>(shared_library_.get_function_pointer("DAQmxGetDOLineStatesStartState"));
  function_pointers_.GetDOLogicFamily = reinterpret_cast<GetDOLogicFamilyPtr>(shared_library_.get_function_pointer("DAQmxGetDOLogicFamily"));
  function_pointers_.GetDOMemMapEnable = reinterpret_cast<GetDOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxGetDOMemMapEnable"));
  function_pointers_.GetDONumLines = reinterpret_cast<GetDONumLinesPtr>(shared_library_.get_function_pointer("DAQmxGetDONumLines"));
  function_pointers_.GetDOOutputDriveType = reinterpret_cast<GetDOOutputDriveTypePtr>(shared_library_.get_function_pointer("DAQmxGetDOOutputDriveType"));
  function_pointers_.GetDOOvercurrentAutoReenable = reinterpret_cast<GetDOOvercurrentAutoReenablePtr>(shared_library_.get_function_pointer("DAQmxGetDOOvercurrentAutoReenable"));
  function_pointers_.GetDOOvercurrentLimit = reinterpret_cast<GetDOOvercurrentLimitPtr>(shared_library_.get_function_pointer("DAQmxGetDOOvercurrentLimit"));
  function_pointers_.GetDOOvercurrentReenablePeriod = reinterpret_cast<GetDOOvercurrentReenablePeriodPtr>(shared_library_.get_function_pointer("DAQmxGetDOOvercurrentReenablePeriod"));
  function_pointers_.GetDOTristate = reinterpret_cast<GetDOTristatePtr>(shared_library_.get_function_pointer("DAQmxGetDOTristate"));
  function_pointers_.GetDOUsbXferReqCount = reinterpret_cast<GetDOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxGetDOUsbXferReqCount"));
  function_pointers_.GetDOUsbXferReqSize = reinterpret_cast<GetDOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxGetDOUsbXferReqSize"));
  function_pointers_.GetDOUseOnlyOnBrdMem = reinterpret_cast<GetDOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxGetDOUseOnlyOnBrdMem"));
  function_pointers_.GetDigitalLogicFamilyPowerUpState = reinterpret_cast<GetDigitalLogicFamilyPowerUpStatePtr>(shared_library_.get_function_pointer("DAQmxGetDigitalLogicFamilyPowerUpState"));
  function_pointers_.GetDisconnectedCDAQSyncPorts = reinterpret_cast<GetDisconnectedCDAQSyncPortsPtr>(shared_library_.get_function_pointer("DAQmxGetDisconnectedCDAQSyncPorts"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("DAQmxGetErrorString"));
  function_pointers_.GetExtCalLastTemp = reinterpret_cast<GetExtCalLastTempPtr>(shared_library_.get_function_pointer("DAQmxGetExtCalLastTemp"));
  function_pointers_.GetExtCalRecommendedInterval = reinterpret_cast<GetExtCalRecommendedIntervalPtr>(shared_library_.get_function_pointer("DAQmxGetExtCalRecommendedInterval"));
  function_pointers_.GetExtendedErrorInfo = reinterpret_cast<GetExtendedErrorInfoPtr>(shared_library_.get_function_pointer("DAQmxGetExtendedErrorInfo"));
  function_pointers_.GetFirstSampClkWhen = reinterpret_cast<GetFirstSampClkWhenPtr>(shared_library_.get_function_pointer("DAQmxGetFirstSampClkWhen"));
  function_pointers_.GetFirstSampTimestampVal = reinterpret_cast<GetFirstSampTimestampValPtr>(shared_library_.get_function_pointer("DAQmxGetFirstSampTimestampVal"));
  function_pointers_.GetNthTaskChannel = reinterpret_cast<GetNthTaskChannelPtr>(shared_library_.get_function_pointer("DAQmxGetNthTaskChannel"));
  function_pointers_.GetNthTaskDevice = reinterpret_cast<GetNthTaskDevicePtr>(shared_library_.get_function_pointer("DAQmxGetNthTaskDevice"));
  function_pointers_.GetNthTaskReadChannel = reinterpret_cast<GetNthTaskReadChannelPtr>(shared_library_.get_function_pointer("DAQmxGetNthTaskReadChannel"));
  function_pointers_.GetPhysicalChanName = reinterpret_cast<GetPhysicalChanNamePtr>(shared_library_.get_function_pointer("DAQmxGetPhysicalChanName"));
  function_pointers_.GetRefTrigTimestampVal = reinterpret_cast<GetRefTrigTimestampValPtr>(shared_library_.get_function_pointer("DAQmxGetRefTrigTimestampVal"));
  function_pointers_.GetSelfCalLastDateAndTime = reinterpret_cast<GetSelfCalLastDateAndTimePtr>(shared_library_.get_function_pointer("DAQmxGetSelfCalLastDateAndTime"));
  function_pointers_.GetSelfCalLastTemp = reinterpret_cast<GetSelfCalLastTempPtr>(shared_library_.get_function_pointer("DAQmxGetSelfCalLastTemp"));
  function_pointers_.GetSelfCalSupported = reinterpret_cast<GetSelfCalSupportedPtr>(shared_library_.get_function_pointer("DAQmxGetSelfCalSupported"));
  function_pointers_.GetStartTrigTimestampVal = reinterpret_cast<GetStartTrigTimestampValPtr>(shared_library_.get_function_pointer("DAQmxGetStartTrigTimestampVal"));
  function_pointers_.GetStartTrigTrigWhen = reinterpret_cast<GetStartTrigTrigWhenPtr>(shared_library_.get_function_pointer("DAQmxGetStartTrigTrigWhen"));
  function_pointers_.GetSyncPulseTimeWhen = reinterpret_cast<GetSyncPulseTimeWhenPtr>(shared_library_.get_function_pointer("DAQmxGetSyncPulseTimeWhen"));
  function_pointers_.IsTaskDone = reinterpret_cast<IsTaskDonePtr>(shared_library_.get_function_pointer("DAQmxIsTaskDone"));
  function_pointers_.LoadTask = reinterpret_cast<LoadTaskPtr>(shared_library_.get_function_pointer("DAQmxLoadTask"));
  function_pointers_.ReadAnalogF64 = reinterpret_cast<ReadAnalogF64Ptr>(shared_library_.get_function_pointer("DAQmxReadAnalogF64"));
  function_pointers_.ReadAnalogScalarF64 = reinterpret_cast<ReadAnalogScalarF64Ptr>(shared_library_.get_function_pointer("DAQmxReadAnalogScalarF64"));
  function_pointers_.ReadBinaryI16 = reinterpret_cast<ReadBinaryI16Ptr>(shared_library_.get_function_pointer("DAQmxReadBinaryI16"));
  function_pointers_.ReadBinaryI32 = reinterpret_cast<ReadBinaryI32Ptr>(shared_library_.get_function_pointer("DAQmxReadBinaryI32"));
  function_pointers_.ReadBinaryU16 = reinterpret_cast<ReadBinaryU16Ptr>(shared_library_.get_function_pointer("DAQmxReadBinaryU16"));
  function_pointers_.ReadBinaryU32 = reinterpret_cast<ReadBinaryU32Ptr>(shared_library_.get_function_pointer("DAQmxReadBinaryU32"));
  function_pointers_.ReadCounterF64 = reinterpret_cast<ReadCounterF64Ptr>(shared_library_.get_function_pointer("DAQmxReadCounterF64"));
  function_pointers_.ReadCounterF64Ex = reinterpret_cast<ReadCounterF64ExPtr>(shared_library_.get_function_pointer("DAQmxReadCounterF64Ex"));
  function_pointers_.ReadCounterScalarF64 = reinterpret_cast<ReadCounterScalarF64Ptr>(shared_library_.get_function_pointer("DAQmxReadCounterScalarF64"));
  function_pointers_.ReadCounterScalarU32 = reinterpret_cast<ReadCounterScalarU32Ptr>(shared_library_.get_function_pointer("DAQmxReadCounterScalarU32"));
  function_pointers_.ReadCounterU32 = reinterpret_cast<ReadCounterU32Ptr>(shared_library_.get_function_pointer("DAQmxReadCounterU32"));
  function_pointers_.ReadCounterU32Ex = reinterpret_cast<ReadCounterU32ExPtr>(shared_library_.get_function_pointer("DAQmxReadCounterU32Ex"));
  function_pointers_.ReadCtrFreq = reinterpret_cast<ReadCtrFreqPtr>(shared_library_.get_function_pointer("DAQmxReadCtrFreq"));
  function_pointers_.ReadCtrFreqScalar = reinterpret_cast<ReadCtrFreqScalarPtr>(shared_library_.get_function_pointer("DAQmxReadCtrFreqScalar"));
  function_pointers_.ReadCtrTicks = reinterpret_cast<ReadCtrTicksPtr>(shared_library_.get_function_pointer("DAQmxReadCtrTicks"));
  function_pointers_.ReadCtrTicksScalar = reinterpret_cast<ReadCtrTicksScalarPtr>(shared_library_.get_function_pointer("DAQmxReadCtrTicksScalar"));
  function_pointers_.ReadCtrTime = reinterpret_cast<ReadCtrTimePtr>(shared_library_.get_function_pointer("DAQmxReadCtrTime"));
  function_pointers_.ReadCtrTimeScalar = reinterpret_cast<ReadCtrTimeScalarPtr>(shared_library_.get_function_pointer("DAQmxReadCtrTimeScalar"));
  function_pointers_.ReadDigitalLines = reinterpret_cast<ReadDigitalLinesPtr>(shared_library_.get_function_pointer("DAQmxReadDigitalLines"));
  function_pointers_.ReadDigitalScalarU32 = reinterpret_cast<ReadDigitalScalarU32Ptr>(shared_library_.get_function_pointer("DAQmxReadDigitalScalarU32"));
  function_pointers_.ReadDigitalU16 = reinterpret_cast<ReadDigitalU16Ptr>(shared_library_.get_function_pointer("DAQmxReadDigitalU16"));
  function_pointers_.ReadDigitalU32 = reinterpret_cast<ReadDigitalU32Ptr>(shared_library_.get_function_pointer("DAQmxReadDigitalU32"));
  function_pointers_.ReadDigitalU8 = reinterpret_cast<ReadDigitalU8Ptr>(shared_library_.get_function_pointer("DAQmxReadDigitalU8"));
  function_pointers_.ReadRaw = reinterpret_cast<ReadRawPtr>(shared_library_.get_function_pointer("DAQmxReadRaw"));
  function_pointers_.RegisterDoneEvent = reinterpret_cast<RegisterDoneEventPtr>(shared_library_.get_function_pointer("DAQmxRegisterDoneEvent"));
  function_pointers_.RegisterEveryNSamplesEvent = reinterpret_cast<RegisterEveryNSamplesEventPtr>(shared_library_.get_function_pointer("DAQmxRegisterEveryNSamplesEvent"));
  function_pointers_.RegisterSignalEvent = reinterpret_cast<RegisterSignalEventPtr>(shared_library_.get_function_pointer("DAQmxRegisterSignalEvent"));
  function_pointers_.RemoveCDAQSyncConnection = reinterpret_cast<RemoveCDAQSyncConnectionPtr>(shared_library_.get_function_pointer("DAQmxRemoveCDAQSyncConnection"));
  function_pointers_.ReserveNetworkDevice = reinterpret_cast<ReserveNetworkDevicePtr>(shared_library_.get_function_pointer("DAQmxReserveNetworkDevice"));
  function_pointers_.ResetAIACExcitFreq = reinterpret_cast<ResetAIACExcitFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAIACExcitFreq"));
  function_pointers_.ResetAIACExcitSyncEnable = reinterpret_cast<ResetAIACExcitSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIACExcitSyncEnable"));
  function_pointers_.ResetAIACExcitWireMode = reinterpret_cast<ResetAIACExcitWireModePtr>(shared_library_.get_function_pointer("DAQmxResetAIACExcitWireMode"));
  function_pointers_.ResetAIADCCustomTimingMode = reinterpret_cast<ResetAIADCCustomTimingModePtr>(shared_library_.get_function_pointer("DAQmxResetAIADCCustomTimingMode"));
  function_pointers_.ResetAIADCTimingMode = reinterpret_cast<ResetAIADCTimingModePtr>(shared_library_.get_function_pointer("DAQmxResetAIADCTimingMode"));
  function_pointers_.ResetAIAccel4WireDCVoltageSensitivity = reinterpret_cast<ResetAIAccel4WireDCVoltageSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccel4WireDCVoltageSensitivity"));
  function_pointers_.ResetAIAccel4WireDCVoltageSensitivityUnits = reinterpret_cast<ResetAIAccel4WireDCVoltageSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccel4WireDCVoltageSensitivityUnits"));
  function_pointers_.ResetAIAccelChargeSensitivity = reinterpret_cast<ResetAIAccelChargeSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccelChargeSensitivity"));
  function_pointers_.ResetAIAccelChargeSensitivityUnits = reinterpret_cast<ResetAIAccelChargeSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccelChargeSensitivityUnits"));
  function_pointers_.ResetAIAccelSensitivity = reinterpret_cast<ResetAIAccelSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccelSensitivity"));
  function_pointers_.ResetAIAccelSensitivityUnits = reinterpret_cast<ResetAIAccelSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccelSensitivityUnits"));
  function_pointers_.ResetAIAccelUnits = reinterpret_cast<ResetAIAccelUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIAccelUnits"));
  function_pointers_.ResetAIAcceldBRef = reinterpret_cast<ResetAIAcceldBRefPtr>(shared_library_.get_function_pointer("DAQmxResetAIAcceldBRef"));
  function_pointers_.ResetAIAtten = reinterpret_cast<ResetAIAttenPtr>(shared_library_.get_function_pointer("DAQmxResetAIAtten"));
  function_pointers_.ResetAIAutoZeroMode = reinterpret_cast<ResetAIAutoZeroModePtr>(shared_library_.get_function_pointer("DAQmxResetAIAutoZeroMode"));
  function_pointers_.ResetAIAveragingWinSize = reinterpret_cast<ResetAIAveragingWinSizePtr>(shared_library_.get_function_pointer("DAQmxResetAIAveragingWinSize"));
  function_pointers_.ResetAIBridgeBalanceCoarsePot = reinterpret_cast<ResetAIBridgeBalanceCoarsePotPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeBalanceCoarsePot"));
  function_pointers_.ResetAIBridgeBalanceFinePot = reinterpret_cast<ResetAIBridgeBalanceFinePotPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeBalanceFinePot"));
  function_pointers_.ResetAIBridgeCfg = reinterpret_cast<ResetAIBridgeCfgPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeCfg"));
  function_pointers_.ResetAIBridgeElectricalUnits = reinterpret_cast<ResetAIBridgeElectricalUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeElectricalUnits"));
  function_pointers_.ResetAIBridgeInitialRatio = reinterpret_cast<ResetAIBridgeInitialRatioPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeInitialRatio"));
  function_pointers_.ResetAIBridgeInitialVoltage = reinterpret_cast<ResetAIBridgeInitialVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeInitialVoltage"));
  function_pointers_.ResetAIBridgeNomResistance = reinterpret_cast<ResetAIBridgeNomResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeNomResistance"));
  function_pointers_.ResetAIBridgePhysicalUnits = reinterpret_cast<ResetAIBridgePhysicalUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgePhysicalUnits"));
  function_pointers_.ResetAIBridgePolyForwardCoeff = reinterpret_cast<ResetAIBridgePolyForwardCoeffPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgePolyForwardCoeff"));
  function_pointers_.ResetAIBridgePolyReverseCoeff = reinterpret_cast<ResetAIBridgePolyReverseCoeffPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgePolyReverseCoeff"));
  function_pointers_.ResetAIBridgeScaleType = reinterpret_cast<ResetAIBridgeScaleTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeScaleType"));
  function_pointers_.ResetAIBridgeShuntCalEnable = reinterpret_cast<ResetAIBridgeShuntCalEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalEnable"));
  function_pointers_.ResetAIBridgeShuntCalGainAdjust = reinterpret_cast<ResetAIBridgeShuntCalGainAdjustPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalGainAdjust"));
  function_pointers_.ResetAIBridgeShuntCalSelect = reinterpret_cast<ResetAIBridgeShuntCalSelectPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalSelect"));
  function_pointers_.ResetAIBridgeShuntCalShuntCalAActualResistance = reinterpret_cast<ResetAIBridgeShuntCalShuntCalAActualResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalShuntCalAActualResistance"));
  function_pointers_.ResetAIBridgeShuntCalShuntCalAResistance = reinterpret_cast<ResetAIBridgeShuntCalShuntCalAResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalShuntCalAResistance"));
  function_pointers_.ResetAIBridgeShuntCalShuntCalASrc = reinterpret_cast<ResetAIBridgeShuntCalShuntCalASrcPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalShuntCalASrc"));
  function_pointers_.ResetAIBridgeShuntCalShuntCalBActualResistance = reinterpret_cast<ResetAIBridgeShuntCalShuntCalBActualResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalShuntCalBActualResistance"));
  function_pointers_.ResetAIBridgeShuntCalShuntCalBResistance = reinterpret_cast<ResetAIBridgeShuntCalShuntCalBResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeShuntCalShuntCalBResistance"));
  function_pointers_.ResetAIBridgeTableElectricalVals = reinterpret_cast<ResetAIBridgeTableElectricalValsPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeTableElectricalVals"));
  function_pointers_.ResetAIBridgeTablePhysicalVals = reinterpret_cast<ResetAIBridgeTablePhysicalValsPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeTablePhysicalVals"));
  function_pointers_.ResetAIBridgeTwoPointLinFirstElectricalVal = reinterpret_cast<ResetAIBridgeTwoPointLinFirstElectricalValPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeTwoPointLinFirstElectricalVal"));
  function_pointers_.ResetAIBridgeTwoPointLinFirstPhysicalVal = reinterpret_cast<ResetAIBridgeTwoPointLinFirstPhysicalValPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal"));
  function_pointers_.ResetAIBridgeTwoPointLinSecondElectricalVal = reinterpret_cast<ResetAIBridgeTwoPointLinSecondElectricalValPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeTwoPointLinSecondElectricalVal"));
  function_pointers_.ResetAIBridgeTwoPointLinSecondPhysicalVal = reinterpret_cast<ResetAIBridgeTwoPointLinSecondPhysicalValPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal"));
  function_pointers_.ResetAIBridgeUnits = reinterpret_cast<ResetAIBridgeUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIBridgeUnits"));
  function_pointers_.ResetAIChanCalApplyCalIfExp = reinterpret_cast<ResetAIChanCalApplyCalIfExpPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalApplyCalIfExp"));
  function_pointers_.ResetAIChanCalDesc = reinterpret_cast<ResetAIChanCalDescPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalDesc"));
  function_pointers_.ResetAIChanCalEnableCal = reinterpret_cast<ResetAIChanCalEnableCalPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalEnableCal"));
  function_pointers_.ResetAIChanCalOperatorName = reinterpret_cast<ResetAIChanCalOperatorNamePtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalOperatorName"));
  function_pointers_.ResetAIChanCalPolyForwardCoeff = reinterpret_cast<ResetAIChanCalPolyForwardCoeffPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalPolyForwardCoeff"));
  function_pointers_.ResetAIChanCalPolyReverseCoeff = reinterpret_cast<ResetAIChanCalPolyReverseCoeffPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalPolyReverseCoeff"));
  function_pointers_.ResetAIChanCalScaleType = reinterpret_cast<ResetAIChanCalScaleTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalScaleType"));
  function_pointers_.ResetAIChanCalTablePreScaledVals = reinterpret_cast<ResetAIChanCalTablePreScaledValsPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalTablePreScaledVals"));
  function_pointers_.ResetAIChanCalTableScaledVals = reinterpret_cast<ResetAIChanCalTableScaledValsPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalTableScaledVals"));
  function_pointers_.ResetAIChanCalVerifAcqVals = reinterpret_cast<ResetAIChanCalVerifAcqValsPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalVerifAcqVals"));
  function_pointers_.ResetAIChanCalVerifRefVals = reinterpret_cast<ResetAIChanCalVerifRefValsPtr>(shared_library_.get_function_pointer("DAQmxResetAIChanCalVerifRefVals"));
  function_pointers_.ResetAIChargeUnits = reinterpret_cast<ResetAIChargeUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIChargeUnits"));
  function_pointers_.ResetAIChopEnable = reinterpret_cast<ResetAIChopEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIChopEnable"));
  function_pointers_.ResetAICoupling = reinterpret_cast<ResetAICouplingPtr>(shared_library_.get_function_pointer("DAQmxResetAICoupling"));
  function_pointers_.ResetAICurrentACRMSUnits = reinterpret_cast<ResetAICurrentACRMSUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAICurrentACRMSUnits"));
  function_pointers_.ResetAICurrentShuntLoc = reinterpret_cast<ResetAICurrentShuntLocPtr>(shared_library_.get_function_pointer("DAQmxResetAICurrentShuntLoc"));
  function_pointers_.ResetAICurrentShuntResistance = reinterpret_cast<ResetAICurrentShuntResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAICurrentShuntResistance"));
  function_pointers_.ResetAICurrentUnits = reinterpret_cast<ResetAICurrentUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAICurrentUnits"));
  function_pointers_.ResetAICustomScaleName = reinterpret_cast<ResetAICustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxResetAICustomScaleName"));
  function_pointers_.ResetAIDCOffset = reinterpret_cast<ResetAIDCOffsetPtr>(shared_library_.get_function_pointer("DAQmxResetAIDCOffset"));
  function_pointers_.ResetAIDataXferCustomThreshold = reinterpret_cast<ResetAIDataXferCustomThresholdPtr>(shared_library_.get_function_pointer("DAQmxResetAIDataXferCustomThreshold"));
  function_pointers_.ResetAIDataXferMaxRate = reinterpret_cast<ResetAIDataXferMaxRatePtr>(shared_library_.get_function_pointer("DAQmxResetAIDataXferMaxRate"));
  function_pointers_.ResetAIDataXferMech = reinterpret_cast<ResetAIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxResetAIDataXferMech"));
  function_pointers_.ResetAIDataXferReqCond = reinterpret_cast<ResetAIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxResetAIDataXferReqCond"));
  function_pointers_.ResetAIDigFltrBandpassCenterFreq = reinterpret_cast<ResetAIDigFltrBandpassCenterFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrBandpassCenterFreq"));
  function_pointers_.ResetAIDigFltrBandpassWidth = reinterpret_cast<ResetAIDigFltrBandpassWidthPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrBandpassWidth"));
  function_pointers_.ResetAIDigFltrCoeff = reinterpret_cast<ResetAIDigFltrCoeffPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrCoeff"));
  function_pointers_.ResetAIDigFltrEnable = reinterpret_cast<ResetAIDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrEnable"));
  function_pointers_.ResetAIDigFltrHighpassCutoffFreq = reinterpret_cast<ResetAIDigFltrHighpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrHighpassCutoffFreq"));
  function_pointers_.ResetAIDigFltrLowpassCutoffFreq = reinterpret_cast<ResetAIDigFltrLowpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrLowpassCutoffFreq"));
  function_pointers_.ResetAIDigFltrNotchCenterFreq = reinterpret_cast<ResetAIDigFltrNotchCenterFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrNotchCenterFreq"));
  function_pointers_.ResetAIDigFltrNotchWidth = reinterpret_cast<ResetAIDigFltrNotchWidthPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrNotchWidth"));
  function_pointers_.ResetAIDigFltrOrder = reinterpret_cast<ResetAIDigFltrOrderPtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrOrder"));
  function_pointers_.ResetAIDigFltrResponse = reinterpret_cast<ResetAIDigFltrResponsePtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrResponse"));
  function_pointers_.ResetAIDigFltrType = reinterpret_cast<ResetAIDigFltrTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIDigFltrType"));
  function_pointers_.ResetAIDitherEnable = reinterpret_cast<ResetAIDitherEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIDitherEnable"));
  function_pointers_.ResetAIEddyCurrentProxProbeSensitivity = reinterpret_cast<ResetAIEddyCurrentProxProbeSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIEddyCurrentProxProbeSensitivity"));
  function_pointers_.ResetAIEddyCurrentProxProbeSensitivityUnits = reinterpret_cast<ResetAIEddyCurrentProxProbeSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIEddyCurrentProxProbeSensitivityUnits"));
  function_pointers_.ResetAIEddyCurrentProxProbeUnits = reinterpret_cast<ResetAIEddyCurrentProxProbeUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIEddyCurrentProxProbeUnits"));
  function_pointers_.ResetAIEnhancedAliasRejectionEnable = reinterpret_cast<ResetAIEnhancedAliasRejectionEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIEnhancedAliasRejectionEnable"));
  function_pointers_.ResetAIExcitActualVal = reinterpret_cast<ResetAIExcitActualValPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitActualVal"));
  function_pointers_.ResetAIExcitDCorAC = reinterpret_cast<ResetAIExcitDCorACPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitDCorAC"));
  function_pointers_.ResetAIExcitIdleOutputBehavior = reinterpret_cast<ResetAIExcitIdleOutputBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitIdleOutputBehavior"));
  function_pointers_.ResetAIExcitSense = reinterpret_cast<ResetAIExcitSensePtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitSense"));
  function_pointers_.ResetAIExcitSrc = reinterpret_cast<ResetAIExcitSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitSrc"));
  function_pointers_.ResetAIExcitUseForScaling = reinterpret_cast<ResetAIExcitUseForScalingPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitUseForScaling"));
  function_pointers_.ResetAIExcitUseMultiplexed = reinterpret_cast<ResetAIExcitUseMultiplexedPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitUseMultiplexed"));
  function_pointers_.ResetAIExcitVal = reinterpret_cast<ResetAIExcitValPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitVal"));
  function_pointers_.ResetAIExcitVoltageOrCurrent = reinterpret_cast<ResetAIExcitVoltageOrCurrentPtr>(shared_library_.get_function_pointer("DAQmxResetAIExcitVoltageOrCurrent"));
  function_pointers_.ResetAIFilterDelayAdjustment = reinterpret_cast<ResetAIFilterDelayAdjustmentPtr>(shared_library_.get_function_pointer("DAQmxResetAIFilterDelayAdjustment"));
  function_pointers_.ResetAIFilterDelayUnits = reinterpret_cast<ResetAIFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIFilterDelayUnits"));
  function_pointers_.ResetAIFilterEnable = reinterpret_cast<ResetAIFilterEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIFilterEnable"));
  function_pointers_.ResetAIFilterFreq = reinterpret_cast<ResetAIFilterFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAIFilterFreq"));
  function_pointers_.ResetAIFilterOrder = reinterpret_cast<ResetAIFilterOrderPtr>(shared_library_.get_function_pointer("DAQmxResetAIFilterOrder"));
  function_pointers_.ResetAIFilterResponse = reinterpret_cast<ResetAIFilterResponsePtr>(shared_library_.get_function_pointer("DAQmxResetAIFilterResponse"));
  function_pointers_.ResetAIForceIEPESensorSensitivity = reinterpret_cast<ResetAIForceIEPESensorSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIForceIEPESensorSensitivity"));
  function_pointers_.ResetAIForceIEPESensorSensitivityUnits = reinterpret_cast<ResetAIForceIEPESensorSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIForceIEPESensorSensitivityUnits"));
  function_pointers_.ResetAIForceReadFromChan = reinterpret_cast<ResetAIForceReadFromChanPtr>(shared_library_.get_function_pointer("DAQmxResetAIForceReadFromChan"));
  function_pointers_.ResetAIForceUnits = reinterpret_cast<ResetAIForceUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIForceUnits"));
  function_pointers_.ResetAIFreqHyst = reinterpret_cast<ResetAIFreqHystPtr>(shared_library_.get_function_pointer("DAQmxResetAIFreqHyst"));
  function_pointers_.ResetAIFreqThreshVoltage = reinterpret_cast<ResetAIFreqThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetAIFreqThreshVoltage"));
  function_pointers_.ResetAIFreqUnits = reinterpret_cast<ResetAIFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIFreqUnits"));
  function_pointers_.ResetAIGain = reinterpret_cast<ResetAIGainPtr>(shared_library_.get_function_pointer("DAQmxResetAIGain"));
  function_pointers_.ResetAIImpedance = reinterpret_cast<ResetAIImpedancePtr>(shared_library_.get_function_pointer("DAQmxResetAIImpedance"));
  function_pointers_.ResetAIInputLimitsFaultDetectEnable = reinterpret_cast<ResetAIInputLimitsFaultDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIInputLimitsFaultDetectEnable"));
  function_pointers_.ResetAIInputLimitsFaultDetectLowerLimit = reinterpret_cast<ResetAIInputLimitsFaultDetectLowerLimitPtr>(shared_library_.get_function_pointer("DAQmxResetAIInputLimitsFaultDetectLowerLimit"));
  function_pointers_.ResetAIInputLimitsFaultDetectUpperLimit = reinterpret_cast<ResetAIInputLimitsFaultDetectUpperLimitPtr>(shared_library_.get_function_pointer("DAQmxResetAIInputLimitsFaultDetectUpperLimit"));
  function_pointers_.ResetAIInputSrc = reinterpret_cast<ResetAIInputSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAIInputSrc"));
  function_pointers_.ResetAILVDTSensitivity = reinterpret_cast<ResetAILVDTSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAILVDTSensitivity"));
  function_pointers_.ResetAILVDTSensitivityUnits = reinterpret_cast<ResetAILVDTSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAILVDTSensitivityUnits"));
  function_pointers_.ResetAILVDTUnits = reinterpret_cast<ResetAILVDTUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAILVDTUnits"));
  function_pointers_.ResetAILeadWireResistance = reinterpret_cast<ResetAILeadWireResistancePtr>(shared_library_.get_function_pointer("DAQmxResetAILeadWireResistance"));
  function_pointers_.ResetAILossyLSBRemovalCompressedSampSize = reinterpret_cast<ResetAILossyLSBRemovalCompressedSampSizePtr>(shared_library_.get_function_pointer("DAQmxResetAILossyLSBRemovalCompressedSampSize"));
  function_pointers_.ResetAILowpassCutoffFreq = reinterpret_cast<ResetAILowpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAILowpassCutoffFreq"));
  function_pointers_.ResetAILowpassEnable = reinterpret_cast<ResetAILowpassEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAILowpassEnable"));
  function_pointers_.ResetAILowpassSwitchCapClkSrc = reinterpret_cast<ResetAILowpassSwitchCapClkSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAILowpassSwitchCapClkSrc"));
  function_pointers_.ResetAILowpassSwitchCapExtClkDiv = reinterpret_cast<ResetAILowpassSwitchCapExtClkDivPtr>(shared_library_.get_function_pointer("DAQmxResetAILowpassSwitchCapExtClkDiv"));
  function_pointers_.ResetAILowpassSwitchCapExtClkFreq = reinterpret_cast<ResetAILowpassSwitchCapExtClkFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAILowpassSwitchCapExtClkFreq"));
  function_pointers_.ResetAILowpassSwitchCapOutClkDiv = reinterpret_cast<ResetAILowpassSwitchCapOutClkDivPtr>(shared_library_.get_function_pointer("DAQmxResetAILowpassSwitchCapOutClkDiv"));
  function_pointers_.ResetAIMax = reinterpret_cast<ResetAIMaxPtr>(shared_library_.get_function_pointer("DAQmxResetAIMax"));
  function_pointers_.ResetAIMemMapEnable = reinterpret_cast<ResetAIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIMemMapEnable"));
  function_pointers_.ResetAIMicrophoneSensitivity = reinterpret_cast<ResetAIMicrophoneSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIMicrophoneSensitivity"));
  function_pointers_.ResetAIMin = reinterpret_cast<ResetAIMinPtr>(shared_library_.get_function_pointer("DAQmxResetAIMin"));
  function_pointers_.ResetAIOpenChanDetectEnable = reinterpret_cast<ResetAIOpenChanDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIOpenChanDetectEnable"));
  function_pointers_.ResetAIOpenThrmcplDetectEnable = reinterpret_cast<ResetAIOpenThrmcplDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIOpenThrmcplDetectEnable"));
  function_pointers_.ResetAIOvercurrentDetectEnable = reinterpret_cast<ResetAIOvercurrentDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIOvercurrentDetectEnable"));
  function_pointers_.ResetAIPowerSupplyFaultDetectEnable = reinterpret_cast<ResetAIPowerSupplyFaultDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAIPowerSupplyFaultDetectEnable"));
  function_pointers_.ResetAIPressureUnits = reinterpret_cast<ResetAIPressureUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIPressureUnits"));
  function_pointers_.ResetAIProbeAtten = reinterpret_cast<ResetAIProbeAttenPtr>(shared_library_.get_function_pointer("DAQmxResetAIProbeAtten"));
  function_pointers_.ResetAIRTDA = reinterpret_cast<ResetAIRTDAPtr>(shared_library_.get_function_pointer("DAQmxResetAIRTDA"));
  function_pointers_.ResetAIRTDB = reinterpret_cast<ResetAIRTDBPtr>(shared_library_.get_function_pointer("DAQmxResetAIRTDB"));
  function_pointers_.ResetAIRTDC = reinterpret_cast<ResetAIRTDCPtr>(shared_library_.get_function_pointer("DAQmxResetAIRTDC"));
  function_pointers_.ResetAIRTDR0 = reinterpret_cast<ResetAIRTDR0Ptr>(shared_library_.get_function_pointer("DAQmxResetAIRTDR0"));
  function_pointers_.ResetAIRTDType = reinterpret_cast<ResetAIRTDTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIRTDType"));
  function_pointers_.ResetAIRVDTSensitivity = reinterpret_cast<ResetAIRVDTSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIRVDTSensitivity"));
  function_pointers_.ResetAIRVDTSensitivityUnits = reinterpret_cast<ResetAIRVDTSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIRVDTSensitivityUnits"));
  function_pointers_.ResetAIRVDTUnits = reinterpret_cast<ResetAIRVDTUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIRVDTUnits"));
  function_pointers_.ResetAIRawDataCompressionType = reinterpret_cast<ResetAIRawDataCompressionTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIRawDataCompressionType"));
  function_pointers_.ResetAIRemoveFilterDelay = reinterpret_cast<ResetAIRemoveFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxResetAIRemoveFilterDelay"));
  function_pointers_.ResetAIResistanceCfg = reinterpret_cast<ResetAIResistanceCfgPtr>(shared_library_.get_function_pointer("DAQmxResetAIResistanceCfg"));
  function_pointers_.ResetAIResistanceUnits = reinterpret_cast<ResetAIResistanceUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIResistanceUnits"));
  function_pointers_.ResetAIRngHigh = reinterpret_cast<ResetAIRngHighPtr>(shared_library_.get_function_pointer("DAQmxResetAIRngHigh"));
  function_pointers_.ResetAIRngLow = reinterpret_cast<ResetAIRngLowPtr>(shared_library_.get_function_pointer("DAQmxResetAIRngLow"));
  function_pointers_.ResetAIRosetteStrainGageOrientation = reinterpret_cast<ResetAIRosetteStrainGageOrientationPtr>(shared_library_.get_function_pointer("DAQmxResetAIRosetteStrainGageOrientation"));
  function_pointers_.ResetAIRosetteStrainGageRosetteMeasType = reinterpret_cast<ResetAIRosetteStrainGageRosetteMeasTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIRosetteStrainGageRosetteMeasType"));
  function_pointers_.ResetAISampAndHoldEnable = reinterpret_cast<ResetAISampAndHoldEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAISampAndHoldEnable"));
  function_pointers_.ResetAISensorPowerCfg = reinterpret_cast<ResetAISensorPowerCfgPtr>(shared_library_.get_function_pointer("DAQmxResetAISensorPowerCfg"));
  function_pointers_.ResetAISensorPowerType = reinterpret_cast<ResetAISensorPowerTypePtr>(shared_library_.get_function_pointer("DAQmxResetAISensorPowerType"));
  function_pointers_.ResetAISensorPowerVoltage = reinterpret_cast<ResetAISensorPowerVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetAISensorPowerVoltage"));
  function_pointers_.ResetAISoundPressureMaxSoundPressureLvl = reinterpret_cast<ResetAISoundPressureMaxSoundPressureLvlPtr>(shared_library_.get_function_pointer("DAQmxResetAISoundPressureMaxSoundPressureLvl"));
  function_pointers_.ResetAISoundPressureUnits = reinterpret_cast<ResetAISoundPressureUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAISoundPressureUnits"));
  function_pointers_.ResetAISoundPressuredBRef = reinterpret_cast<ResetAISoundPressuredBRefPtr>(shared_library_.get_function_pointer("DAQmxResetAISoundPressuredBRef"));
  function_pointers_.ResetAIStrainGageCfg = reinterpret_cast<ResetAIStrainGageCfgPtr>(shared_library_.get_function_pointer("DAQmxResetAIStrainGageCfg"));
  function_pointers_.ResetAIStrainGageForceReadFromChan = reinterpret_cast<ResetAIStrainGageForceReadFromChanPtr>(shared_library_.get_function_pointer("DAQmxResetAIStrainGageForceReadFromChan"));
  function_pointers_.ResetAIStrainGageGageFactor = reinterpret_cast<ResetAIStrainGageGageFactorPtr>(shared_library_.get_function_pointer("DAQmxResetAIStrainGageGageFactor"));
  function_pointers_.ResetAIStrainGagePoissonRatio = reinterpret_cast<ResetAIStrainGagePoissonRatioPtr>(shared_library_.get_function_pointer("DAQmxResetAIStrainGagePoissonRatio"));
  function_pointers_.ResetAIStrainUnits = reinterpret_cast<ResetAIStrainUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIStrainUnits"));
  function_pointers_.ResetAITempUnits = reinterpret_cast<ResetAITempUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAITempUnits"));
  function_pointers_.ResetAITermCfg = reinterpret_cast<ResetAITermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetAITermCfg"));
  function_pointers_.ResetAIThrmcplCJCVal = reinterpret_cast<ResetAIThrmcplCJCValPtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmcplCJCVal"));
  function_pointers_.ResetAIThrmcplLeadOffsetVoltage = reinterpret_cast<ResetAIThrmcplLeadOffsetVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmcplLeadOffsetVoltage"));
  function_pointers_.ResetAIThrmcplScaleType = reinterpret_cast<ResetAIThrmcplScaleTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmcplScaleType"));
  function_pointers_.ResetAIThrmcplType = reinterpret_cast<ResetAIThrmcplTypePtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmcplType"));
  function_pointers_.ResetAIThrmstrA = reinterpret_cast<ResetAIThrmstrAPtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmstrA"));
  function_pointers_.ResetAIThrmstrB = reinterpret_cast<ResetAIThrmstrBPtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmstrB"));
  function_pointers_.ResetAIThrmstrC = reinterpret_cast<ResetAIThrmstrCPtr>(shared_library_.get_function_pointer("DAQmxResetAIThrmstrC"));
  function_pointers_.ResetAIThrmstrR1 = reinterpret_cast<ResetAIThrmstrR1Ptr>(shared_library_.get_function_pointer("DAQmxResetAIThrmstrR1"));
  function_pointers_.ResetAITorqueUnits = reinterpret_cast<ResetAITorqueUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAITorqueUnits"));
  function_pointers_.ResetAIUsbXferReqCount = reinterpret_cast<ResetAIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxResetAIUsbXferReqCount"));
  function_pointers_.ResetAIUsbXferReqSize = reinterpret_cast<ResetAIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxResetAIUsbXferReqSize"));
  function_pointers_.ResetAIVelocityIEPESensorSensitivity = reinterpret_cast<ResetAIVelocityIEPESensorSensitivityPtr>(shared_library_.get_function_pointer("DAQmxResetAIVelocityIEPESensorSensitivity"));
  function_pointers_.ResetAIVelocityIEPESensorSensitivityUnits = reinterpret_cast<ResetAIVelocityIEPESensorSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIVelocityIEPESensorSensitivityUnits"));
  function_pointers_.ResetAIVelocityIEPESensordBRef = reinterpret_cast<ResetAIVelocityIEPESensordBRefPtr>(shared_library_.get_function_pointer("DAQmxResetAIVelocityIEPESensordBRef"));
  function_pointers_.ResetAIVelocityUnits = reinterpret_cast<ResetAIVelocityUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIVelocityUnits"));
  function_pointers_.ResetAIVoltageACRMSUnits = reinterpret_cast<ResetAIVoltageACRMSUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIVoltageACRMSUnits"));
  function_pointers_.ResetAIVoltageUnits = reinterpret_cast<ResetAIVoltageUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAIVoltageUnits"));
  function_pointers_.ResetAIVoltagedBRef = reinterpret_cast<ResetAIVoltagedBRefPtr>(shared_library_.get_function_pointer("DAQmxResetAIVoltagedBRef"));
  function_pointers_.ResetAOCurrentUnits = reinterpret_cast<ResetAOCurrentUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAOCurrentUnits"));
  function_pointers_.ResetAOCustomScaleName = reinterpret_cast<ResetAOCustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxResetAOCustomScaleName"));
  function_pointers_.ResetAODACOffsetExtSrc = reinterpret_cast<ResetAODACOffsetExtSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAODACOffsetExtSrc"));
  function_pointers_.ResetAODACOffsetSrc = reinterpret_cast<ResetAODACOffsetSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAODACOffsetSrc"));
  function_pointers_.ResetAODACOffsetVal = reinterpret_cast<ResetAODACOffsetValPtr>(shared_library_.get_function_pointer("DAQmxResetAODACOffsetVal"));
  function_pointers_.ResetAODACRefAllowConnToGnd = reinterpret_cast<ResetAODACRefAllowConnToGndPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRefAllowConnToGnd"));
  function_pointers_.ResetAODACRefConnToGnd = reinterpret_cast<ResetAODACRefConnToGndPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRefConnToGnd"));
  function_pointers_.ResetAODACRefExtSrc = reinterpret_cast<ResetAODACRefExtSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRefExtSrc"));
  function_pointers_.ResetAODACRefSrc = reinterpret_cast<ResetAODACRefSrcPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRefSrc"));
  function_pointers_.ResetAODACRefVal = reinterpret_cast<ResetAODACRefValPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRefVal"));
  function_pointers_.ResetAODACRngHigh = reinterpret_cast<ResetAODACRngHighPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRngHigh"));
  function_pointers_.ResetAODACRngLow = reinterpret_cast<ResetAODACRngLowPtr>(shared_library_.get_function_pointer("DAQmxResetAODACRngLow"));
  function_pointers_.ResetAODataXferMech = reinterpret_cast<ResetAODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxResetAODataXferMech"));
  function_pointers_.ResetAODataXferReqCond = reinterpret_cast<ResetAODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxResetAODataXferReqCond"));
  function_pointers_.ResetAOEnhancedImageRejectionEnable = reinterpret_cast<ResetAOEnhancedImageRejectionEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAOEnhancedImageRejectionEnable"));
  function_pointers_.ResetAOFilterDelay = reinterpret_cast<ResetAOFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxResetAOFilterDelay"));
  function_pointers_.ResetAOFilterDelayAdjustment = reinterpret_cast<ResetAOFilterDelayAdjustmentPtr>(shared_library_.get_function_pointer("DAQmxResetAOFilterDelayAdjustment"));
  function_pointers_.ResetAOFilterDelayUnits = reinterpret_cast<ResetAOFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAOFilterDelayUnits"));
  function_pointers_.ResetAOFuncGenAmplitude = reinterpret_cast<ResetAOFuncGenAmplitudePtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenAmplitude"));
  function_pointers_.ResetAOFuncGenFMDeviation = reinterpret_cast<ResetAOFuncGenFMDeviationPtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenFMDeviation"));
  function_pointers_.ResetAOFuncGenFreq = reinterpret_cast<ResetAOFuncGenFreqPtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenFreq"));
  function_pointers_.ResetAOFuncGenModulationType = reinterpret_cast<ResetAOFuncGenModulationTypePtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenModulationType"));
  function_pointers_.ResetAOFuncGenOffset = reinterpret_cast<ResetAOFuncGenOffsetPtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenOffset"));
  function_pointers_.ResetAOFuncGenSquareDutyCycle = reinterpret_cast<ResetAOFuncGenSquareDutyCyclePtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenSquareDutyCycle"));
  function_pointers_.ResetAOFuncGenType = reinterpret_cast<ResetAOFuncGenTypePtr>(shared_library_.get_function_pointer("DAQmxResetAOFuncGenType"));
  function_pointers_.ResetAOGain = reinterpret_cast<ResetAOGainPtr>(shared_library_.get_function_pointer("DAQmxResetAOGain"));
  function_pointers_.ResetAOIdleOutputBehavior = reinterpret_cast<ResetAOIdleOutputBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetAOIdleOutputBehavior"));
  function_pointers_.ResetAOLoadImpedance = reinterpret_cast<ResetAOLoadImpedancePtr>(shared_library_.get_function_pointer("DAQmxResetAOLoadImpedance"));
  function_pointers_.ResetAOMax = reinterpret_cast<ResetAOMaxPtr>(shared_library_.get_function_pointer("DAQmxResetAOMax"));
  function_pointers_.ResetAOMemMapEnable = reinterpret_cast<ResetAOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAOMemMapEnable"));
  function_pointers_.ResetAOMin = reinterpret_cast<ResetAOMinPtr>(shared_library_.get_function_pointer("DAQmxResetAOMin"));
  function_pointers_.ResetAOOutputImpedance = reinterpret_cast<ResetAOOutputImpedancePtr>(shared_library_.get_function_pointer("DAQmxResetAOOutputImpedance"));
  function_pointers_.ResetAOReglitchEnable = reinterpret_cast<ResetAOReglitchEnablePtr>(shared_library_.get_function_pointer("DAQmxResetAOReglitchEnable"));
  function_pointers_.ResetAOResolutionUnits = reinterpret_cast<ResetAOResolutionUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAOResolutionUnits"));
  function_pointers_.ResetAOTermCfg = reinterpret_cast<ResetAOTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetAOTermCfg"));
  function_pointers_.ResetAOUsbXferReqCount = reinterpret_cast<ResetAOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxResetAOUsbXferReqCount"));
  function_pointers_.ResetAOUsbXferReqSize = reinterpret_cast<ResetAOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxResetAOUsbXferReqSize"));
  function_pointers_.ResetAOUseOnlyOnBrdMem = reinterpret_cast<ResetAOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxResetAOUseOnlyOnBrdMem"));
  function_pointers_.ResetAOVoltageCurrentLimit = reinterpret_cast<ResetAOVoltageCurrentLimitPtr>(shared_library_.get_function_pointer("DAQmxResetAOVoltageCurrentLimit"));
  function_pointers_.ResetAOVoltageUnits = reinterpret_cast<ResetAOVoltageUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetAOVoltageUnits"));
  function_pointers_.ResetBufInputBufSize = reinterpret_cast<ResetBufInputBufSizePtr>(shared_library_.get_function_pointer("DAQmxResetBufInputBufSize"));
  function_pointers_.ResetBufOutputBufSize = reinterpret_cast<ResetBufOutputBufSizePtr>(shared_library_.get_function_pointer("DAQmxResetBufOutputBufSize"));
  function_pointers_.ResetBufOutputOnbrdBufSize = reinterpret_cast<ResetBufOutputOnbrdBufSizePtr>(shared_library_.get_function_pointer("DAQmxResetBufOutputOnbrdBufSize"));
  function_pointers_.ResetCIAngEncoderInitialAngle = reinterpret_cast<ResetCIAngEncoderInitialAnglePtr>(shared_library_.get_function_pointer("DAQmxResetCIAngEncoderInitialAngle"));
  function_pointers_.ResetCIAngEncoderPulsesPerRev = reinterpret_cast<ResetCIAngEncoderPulsesPerRevPtr>(shared_library_.get_function_pointer("DAQmxResetCIAngEncoderPulsesPerRev"));
  function_pointers_.ResetCIAngEncoderUnits = reinterpret_cast<ResetCIAngEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIAngEncoderUnits"));
  function_pointers_.ResetCICountEdgesActiveEdge = reinterpret_cast<ResetCICountEdgesActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesActiveEdge"));
  function_pointers_.ResetCICountEdgesCountDirDigFltrEnable = reinterpret_cast<ResetCICountEdgesCountDirDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirDigFltrEnable"));
  function_pointers_.ResetCICountEdgesCountDirDigFltrMinPulseWidth = reinterpret_cast<ResetCICountEdgesCountDirDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth"));
  function_pointers_.ResetCICountEdgesCountDirDigFltrTimebaseRate = reinterpret_cast<ResetCICountEdgesCountDirDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate"));
  function_pointers_.ResetCICountEdgesCountDirDigFltrTimebaseSrc = reinterpret_cast<ResetCICountEdgesCountDirDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc"));
  function_pointers_.ResetCICountEdgesCountDirDigSyncEnable = reinterpret_cast<ResetCICountEdgesCountDirDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirDigSyncEnable"));
  function_pointers_.ResetCICountEdgesCountDirHyst = reinterpret_cast<ResetCICountEdgesCountDirHystPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirHyst"));
  function_pointers_.ResetCICountEdgesCountDirLogicLvlBehavior = reinterpret_cast<ResetCICountEdgesCountDirLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirLogicLvlBehavior"));
  function_pointers_.ResetCICountEdgesCountDirTermCfg = reinterpret_cast<ResetCICountEdgesCountDirTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirTermCfg"));
  function_pointers_.ResetCICountEdgesCountDirThreshVoltage = reinterpret_cast<ResetCICountEdgesCountDirThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountDirThreshVoltage"));
  function_pointers_.ResetCICountEdgesCountResetActiveEdge = reinterpret_cast<ResetCICountEdgesCountResetActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetActiveEdge"));
  function_pointers_.ResetCICountEdgesCountResetDigFltrEnable = reinterpret_cast<ResetCICountEdgesCountResetDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetDigFltrEnable"));
  function_pointers_.ResetCICountEdgesCountResetDigFltrMinPulseWidth = reinterpret_cast<ResetCICountEdgesCountResetDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth"));
  function_pointers_.ResetCICountEdgesCountResetDigFltrTimebaseRate = reinterpret_cast<ResetCICountEdgesCountResetDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate"));
  function_pointers_.ResetCICountEdgesCountResetDigFltrTimebaseSrc = reinterpret_cast<ResetCICountEdgesCountResetDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc"));
  function_pointers_.ResetCICountEdgesCountResetDigSyncEnable = reinterpret_cast<ResetCICountEdgesCountResetDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetDigSyncEnable"));
  function_pointers_.ResetCICountEdgesCountResetEnable = reinterpret_cast<ResetCICountEdgesCountResetEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetEnable"));
  function_pointers_.ResetCICountEdgesCountResetHyst = reinterpret_cast<ResetCICountEdgesCountResetHystPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetHyst"));
  function_pointers_.ResetCICountEdgesCountResetLogicLvlBehavior = reinterpret_cast<ResetCICountEdgesCountResetLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetLogicLvlBehavior"));
  function_pointers_.ResetCICountEdgesCountResetResetCount = reinterpret_cast<ResetCICountEdgesCountResetResetCountPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetResetCount"));
  function_pointers_.ResetCICountEdgesCountResetTerm = reinterpret_cast<ResetCICountEdgesCountResetTermPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetTerm"));
  function_pointers_.ResetCICountEdgesCountResetTermCfg = reinterpret_cast<ResetCICountEdgesCountResetTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetTermCfg"));
  function_pointers_.ResetCICountEdgesCountResetThreshVoltage = reinterpret_cast<ResetCICountEdgesCountResetThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesCountResetThreshVoltage"));
  function_pointers_.ResetCICountEdgesDigFltrEnable = reinterpret_cast<ResetCICountEdgesDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDigFltrEnable"));
  function_pointers_.ResetCICountEdgesDigFltrMinPulseWidth = reinterpret_cast<ResetCICountEdgesDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDigFltrMinPulseWidth"));
  function_pointers_.ResetCICountEdgesDigFltrTimebaseRate = reinterpret_cast<ResetCICountEdgesDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDigFltrTimebaseRate"));
  function_pointers_.ResetCICountEdgesDigFltrTimebaseSrc = reinterpret_cast<ResetCICountEdgesDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDigFltrTimebaseSrc"));
  function_pointers_.ResetCICountEdgesDigSyncEnable = reinterpret_cast<ResetCICountEdgesDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDigSyncEnable"));
  function_pointers_.ResetCICountEdgesDir = reinterpret_cast<ResetCICountEdgesDirPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDir"));
  function_pointers_.ResetCICountEdgesDirTerm = reinterpret_cast<ResetCICountEdgesDirTermPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesDirTerm"));
  function_pointers_.ResetCICountEdgesGateDigFltrEnable = reinterpret_cast<ResetCICountEdgesGateDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateDigFltrEnable"));
  function_pointers_.ResetCICountEdgesGateDigFltrMinPulseWidth = reinterpret_cast<ResetCICountEdgesGateDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateDigFltrMinPulseWidth"));
  function_pointers_.ResetCICountEdgesGateDigFltrTimebaseRate = reinterpret_cast<ResetCICountEdgesGateDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateDigFltrTimebaseRate"));
  function_pointers_.ResetCICountEdgesGateDigFltrTimebaseSrc = reinterpret_cast<ResetCICountEdgesGateDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateDigFltrTimebaseSrc"));
  function_pointers_.ResetCICountEdgesGateEnable = reinterpret_cast<ResetCICountEdgesGateEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateEnable"));
  function_pointers_.ResetCICountEdgesGateHyst = reinterpret_cast<ResetCICountEdgesGateHystPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateHyst"));
  function_pointers_.ResetCICountEdgesGateLogicLvlBehavior = reinterpret_cast<ResetCICountEdgesGateLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateLogicLvlBehavior"));
  function_pointers_.ResetCICountEdgesGateTerm = reinterpret_cast<ResetCICountEdgesGateTermPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateTerm"));
  function_pointers_.ResetCICountEdgesGateTermCfg = reinterpret_cast<ResetCICountEdgesGateTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateTermCfg"));
  function_pointers_.ResetCICountEdgesGateThreshVoltage = reinterpret_cast<ResetCICountEdgesGateThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateThreshVoltage"));
  function_pointers_.ResetCICountEdgesGateWhen = reinterpret_cast<ResetCICountEdgesGateWhenPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesGateWhen"));
  function_pointers_.ResetCICountEdgesHyst = reinterpret_cast<ResetCICountEdgesHystPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesHyst"));
  function_pointers_.ResetCICountEdgesInitialCnt = reinterpret_cast<ResetCICountEdgesInitialCntPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesInitialCnt"));
  function_pointers_.ResetCICountEdgesLogicLvlBehavior = reinterpret_cast<ResetCICountEdgesLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesLogicLvlBehavior"));
  function_pointers_.ResetCICountEdgesTerm = reinterpret_cast<ResetCICountEdgesTermPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesTerm"));
  function_pointers_.ResetCICountEdgesTermCfg = reinterpret_cast<ResetCICountEdgesTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesTermCfg"));
  function_pointers_.ResetCICountEdgesThreshVoltage = reinterpret_cast<ResetCICountEdgesThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCICountEdgesThreshVoltage"));
  function_pointers_.ResetCICtrTimebaseActiveEdge = reinterpret_cast<ResetCICtrTimebaseActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseActiveEdge"));
  function_pointers_.ResetCICtrTimebaseDigFltrEnable = reinterpret_cast<ResetCICtrTimebaseDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseDigFltrEnable"));
  function_pointers_.ResetCICtrTimebaseDigFltrMinPulseWidth = reinterpret_cast<ResetCICtrTimebaseDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseDigFltrMinPulseWidth"));
  function_pointers_.ResetCICtrTimebaseDigFltrTimebaseRate = reinterpret_cast<ResetCICtrTimebaseDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseDigFltrTimebaseRate"));
  function_pointers_.ResetCICtrTimebaseDigFltrTimebaseSrc = reinterpret_cast<ResetCICtrTimebaseDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseDigFltrTimebaseSrc"));
  function_pointers_.ResetCICtrTimebaseDigSyncEnable = reinterpret_cast<ResetCICtrTimebaseDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseDigSyncEnable"));
  function_pointers_.ResetCICtrTimebaseMasterTimebaseDiv = reinterpret_cast<ResetCICtrTimebaseMasterTimebaseDivPtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseMasterTimebaseDiv"));
  function_pointers_.ResetCICtrTimebaseRate = reinterpret_cast<ResetCICtrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseRate"));
  function_pointers_.ResetCICtrTimebaseSrc = reinterpret_cast<ResetCICtrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCICtrTimebaseSrc"));
  function_pointers_.ResetCICustomScaleName = reinterpret_cast<ResetCICustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxResetCICustomScaleName"));
  function_pointers_.ResetCIDataXferMech = reinterpret_cast<ResetCIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxResetCIDataXferMech"));
  function_pointers_.ResetCIDataXferReqCond = reinterpret_cast<ResetCIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxResetCIDataXferReqCond"));
  function_pointers_.ResetCIDupCountPrevent = reinterpret_cast<ResetCIDupCountPreventPtr>(shared_library_.get_function_pointer("DAQmxResetCIDupCountPrevent"));
  function_pointers_.ResetCIDutyCycleDigFltrEnable = reinterpret_cast<ResetCIDutyCycleDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleDigFltrEnable"));
  function_pointers_.ResetCIDutyCycleDigFltrMinPulseWidth = reinterpret_cast<ResetCIDutyCycleDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleDigFltrMinPulseWidth"));
  function_pointers_.ResetCIDutyCycleDigFltrTimebaseRate = reinterpret_cast<ResetCIDutyCycleDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleDigFltrTimebaseRate"));
  function_pointers_.ResetCIDutyCycleDigFltrTimebaseSrc = reinterpret_cast<ResetCIDutyCycleDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleDigFltrTimebaseSrc"));
  function_pointers_.ResetCIDutyCycleLogicLvlBehavior = reinterpret_cast<ResetCIDutyCycleLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleLogicLvlBehavior"));
  function_pointers_.ResetCIDutyCycleStartingEdge = reinterpret_cast<ResetCIDutyCycleStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleStartingEdge"));
  function_pointers_.ResetCIDutyCycleTerm = reinterpret_cast<ResetCIDutyCycleTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleTerm"));
  function_pointers_.ResetCIDutyCycleTermCfg = reinterpret_cast<ResetCIDutyCycleTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIDutyCycleTermCfg"));
  function_pointers_.ResetCIEncoderAInputDigFltrEnable = reinterpret_cast<ResetCIEncoderAInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputDigFltrEnable"));
  function_pointers_.ResetCIEncoderAInputDigFltrMinPulseWidth = reinterpret_cast<ResetCIEncoderAInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputDigFltrMinPulseWidth"));
  function_pointers_.ResetCIEncoderAInputDigFltrTimebaseRate = reinterpret_cast<ResetCIEncoderAInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputDigFltrTimebaseRate"));
  function_pointers_.ResetCIEncoderAInputDigFltrTimebaseSrc = reinterpret_cast<ResetCIEncoderAInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputDigFltrTimebaseSrc"));
  function_pointers_.ResetCIEncoderAInputDigSyncEnable = reinterpret_cast<ResetCIEncoderAInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputDigSyncEnable"));
  function_pointers_.ResetCIEncoderAInputLogicLvlBehavior = reinterpret_cast<ResetCIEncoderAInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputLogicLvlBehavior"));
  function_pointers_.ResetCIEncoderAInputTerm = reinterpret_cast<ResetCIEncoderAInputTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputTerm"));
  function_pointers_.ResetCIEncoderAInputTermCfg = reinterpret_cast<ResetCIEncoderAInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderAInputTermCfg"));
  function_pointers_.ResetCIEncoderBInputDigFltrEnable = reinterpret_cast<ResetCIEncoderBInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputDigFltrEnable"));
  function_pointers_.ResetCIEncoderBInputDigFltrMinPulseWidth = reinterpret_cast<ResetCIEncoderBInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputDigFltrMinPulseWidth"));
  function_pointers_.ResetCIEncoderBInputDigFltrTimebaseRate = reinterpret_cast<ResetCIEncoderBInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputDigFltrTimebaseRate"));
  function_pointers_.ResetCIEncoderBInputDigFltrTimebaseSrc = reinterpret_cast<ResetCIEncoderBInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputDigFltrTimebaseSrc"));
  function_pointers_.ResetCIEncoderBInputDigSyncEnable = reinterpret_cast<ResetCIEncoderBInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputDigSyncEnable"));
  function_pointers_.ResetCIEncoderBInputLogicLvlBehavior = reinterpret_cast<ResetCIEncoderBInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputLogicLvlBehavior"));
  function_pointers_.ResetCIEncoderBInputTerm = reinterpret_cast<ResetCIEncoderBInputTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputTerm"));
  function_pointers_.ResetCIEncoderBInputTermCfg = reinterpret_cast<ResetCIEncoderBInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderBInputTermCfg"));
  function_pointers_.ResetCIEncoderDecodingType = reinterpret_cast<ResetCIEncoderDecodingTypePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderDecodingType"));
  function_pointers_.ResetCIEncoderZIndexEnable = reinterpret_cast<ResetCIEncoderZIndexEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZIndexEnable"));
  function_pointers_.ResetCIEncoderZIndexPhase = reinterpret_cast<ResetCIEncoderZIndexPhasePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZIndexPhase"));
  function_pointers_.ResetCIEncoderZIndexVal = reinterpret_cast<ResetCIEncoderZIndexValPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZIndexVal"));
  function_pointers_.ResetCIEncoderZInputDigFltrEnable = reinterpret_cast<ResetCIEncoderZInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputDigFltrEnable"));
  function_pointers_.ResetCIEncoderZInputDigFltrMinPulseWidth = reinterpret_cast<ResetCIEncoderZInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputDigFltrMinPulseWidth"));
  function_pointers_.ResetCIEncoderZInputDigFltrTimebaseRate = reinterpret_cast<ResetCIEncoderZInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputDigFltrTimebaseRate"));
  function_pointers_.ResetCIEncoderZInputDigFltrTimebaseSrc = reinterpret_cast<ResetCIEncoderZInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputDigFltrTimebaseSrc"));
  function_pointers_.ResetCIEncoderZInputDigSyncEnable = reinterpret_cast<ResetCIEncoderZInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputDigSyncEnable"));
  function_pointers_.ResetCIEncoderZInputLogicLvlBehavior = reinterpret_cast<ResetCIEncoderZInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputLogicLvlBehavior"));
  function_pointers_.ResetCIEncoderZInputTerm = reinterpret_cast<ResetCIEncoderZInputTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputTerm"));
  function_pointers_.ResetCIEncoderZInputTermCfg = reinterpret_cast<ResetCIEncoderZInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIEncoderZInputTermCfg"));
  function_pointers_.ResetCIFilterDelayUnits = reinterpret_cast<ResetCIFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIFilterDelayUnits"));
  function_pointers_.ResetCIFilterEnable = reinterpret_cast<ResetCIFilterEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIFilterEnable"));
  function_pointers_.ResetCIFilterFreq = reinterpret_cast<ResetCIFilterFreqPtr>(shared_library_.get_function_pointer("DAQmxResetCIFilterFreq"));
  function_pointers_.ResetCIFilterOrder = reinterpret_cast<ResetCIFilterOrderPtr>(shared_library_.get_function_pointer("DAQmxResetCIFilterOrder"));
  function_pointers_.ResetCIFilterResponse = reinterpret_cast<ResetCIFilterResponsePtr>(shared_library_.get_function_pointer("DAQmxResetCIFilterResponse"));
  function_pointers_.ResetCIFreqDigFltrEnable = reinterpret_cast<ResetCIFreqDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqDigFltrEnable"));
  function_pointers_.ResetCIFreqDigFltrMinPulseWidth = reinterpret_cast<ResetCIFreqDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqDigFltrMinPulseWidth"));
  function_pointers_.ResetCIFreqDigFltrTimebaseRate = reinterpret_cast<ResetCIFreqDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqDigFltrTimebaseRate"));
  function_pointers_.ResetCIFreqDigFltrTimebaseSrc = reinterpret_cast<ResetCIFreqDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqDigFltrTimebaseSrc"));
  function_pointers_.ResetCIFreqDigSyncEnable = reinterpret_cast<ResetCIFreqDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqDigSyncEnable"));
  function_pointers_.ResetCIFreqDiv = reinterpret_cast<ResetCIFreqDivPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqDiv"));
  function_pointers_.ResetCIFreqEnableAveraging = reinterpret_cast<ResetCIFreqEnableAveragingPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqEnableAveraging"));
  function_pointers_.ResetCIFreqHyst = reinterpret_cast<ResetCIFreqHystPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqHyst"));
  function_pointers_.ResetCIFreqLogicLvlBehavior = reinterpret_cast<ResetCIFreqLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqLogicLvlBehavior"));
  function_pointers_.ResetCIFreqMeasMeth = reinterpret_cast<ResetCIFreqMeasMethPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqMeasMeth"));
  function_pointers_.ResetCIFreqMeasTime = reinterpret_cast<ResetCIFreqMeasTimePtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqMeasTime"));
  function_pointers_.ResetCIFreqStartingEdge = reinterpret_cast<ResetCIFreqStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqStartingEdge"));
  function_pointers_.ResetCIFreqTerm = reinterpret_cast<ResetCIFreqTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqTerm"));
  function_pointers_.ResetCIFreqTermCfg = reinterpret_cast<ResetCIFreqTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqTermCfg"));
  function_pointers_.ResetCIFreqThreshVoltage = reinterpret_cast<ResetCIFreqThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqThreshVoltage"));
  function_pointers_.ResetCIFreqUnits = reinterpret_cast<ResetCIFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIFreqUnits"));
  function_pointers_.ResetCIGPSSyncMethod = reinterpret_cast<ResetCIGPSSyncMethodPtr>(shared_library_.get_function_pointer("DAQmxResetCIGPSSyncMethod"));
  function_pointers_.ResetCIGPSSyncSrc = reinterpret_cast<ResetCIGPSSyncSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIGPSSyncSrc"));
  function_pointers_.ResetCILinEncoderDistPerPulse = reinterpret_cast<ResetCILinEncoderDistPerPulsePtr>(shared_library_.get_function_pointer("DAQmxResetCILinEncoderDistPerPulse"));
  function_pointers_.ResetCILinEncoderInitialPos = reinterpret_cast<ResetCILinEncoderInitialPosPtr>(shared_library_.get_function_pointer("DAQmxResetCILinEncoderInitialPos"));
  function_pointers_.ResetCILinEncoderUnits = reinterpret_cast<ResetCILinEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCILinEncoderUnits"));
  function_pointers_.ResetCIMax = reinterpret_cast<ResetCIMaxPtr>(shared_library_.get_function_pointer("DAQmxResetCIMax"));
  function_pointers_.ResetCIMaxMeasPeriod = reinterpret_cast<ResetCIMaxMeasPeriodPtr>(shared_library_.get_function_pointer("DAQmxResetCIMaxMeasPeriod"));
  function_pointers_.ResetCIMemMapEnable = reinterpret_cast<ResetCIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIMemMapEnable"));
  function_pointers_.ResetCIMin = reinterpret_cast<ResetCIMinPtr>(shared_library_.get_function_pointer("DAQmxResetCIMin"));
  function_pointers_.ResetCIPeriodDigFltrEnable = reinterpret_cast<ResetCIPeriodDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodDigFltrEnable"));
  function_pointers_.ResetCIPeriodDigFltrMinPulseWidth = reinterpret_cast<ResetCIPeriodDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodDigFltrMinPulseWidth"));
  function_pointers_.ResetCIPeriodDigFltrTimebaseRate = reinterpret_cast<ResetCIPeriodDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodDigFltrTimebaseRate"));
  function_pointers_.ResetCIPeriodDigFltrTimebaseSrc = reinterpret_cast<ResetCIPeriodDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodDigFltrTimebaseSrc"));
  function_pointers_.ResetCIPeriodDigSyncEnable = reinterpret_cast<ResetCIPeriodDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodDigSyncEnable"));
  function_pointers_.ResetCIPeriodDiv = reinterpret_cast<ResetCIPeriodDivPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodDiv"));
  function_pointers_.ResetCIPeriodEnableAveraging = reinterpret_cast<ResetCIPeriodEnableAveragingPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodEnableAveraging"));
  function_pointers_.ResetCIPeriodHyst = reinterpret_cast<ResetCIPeriodHystPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodHyst"));
  function_pointers_.ResetCIPeriodLogicLvlBehavior = reinterpret_cast<ResetCIPeriodLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodLogicLvlBehavior"));
  function_pointers_.ResetCIPeriodMeasMeth = reinterpret_cast<ResetCIPeriodMeasMethPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodMeasMeth"));
  function_pointers_.ResetCIPeriodMeasTime = reinterpret_cast<ResetCIPeriodMeasTimePtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodMeasTime"));
  function_pointers_.ResetCIPeriodStartingEdge = reinterpret_cast<ResetCIPeriodStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodStartingEdge"));
  function_pointers_.ResetCIPeriodTerm = reinterpret_cast<ResetCIPeriodTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodTerm"));
  function_pointers_.ResetCIPeriodTermCfg = reinterpret_cast<ResetCIPeriodTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodTermCfg"));
  function_pointers_.ResetCIPeriodThreshVoltage = reinterpret_cast<ResetCIPeriodThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodThreshVoltage"));
  function_pointers_.ResetCIPeriodUnits = reinterpret_cast<ResetCIPeriodUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIPeriodUnits"));
  function_pointers_.ResetCIPrescaler = reinterpret_cast<ResetCIPrescalerPtr>(shared_library_.get_function_pointer("DAQmxResetCIPrescaler"));
  function_pointers_.ResetCIPulseFreqDigFltrEnable = reinterpret_cast<ResetCIPulseFreqDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqDigFltrEnable"));
  function_pointers_.ResetCIPulseFreqDigFltrMinPulseWidth = reinterpret_cast<ResetCIPulseFreqDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqDigFltrMinPulseWidth"));
  function_pointers_.ResetCIPulseFreqDigFltrTimebaseRate = reinterpret_cast<ResetCIPulseFreqDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqDigFltrTimebaseRate"));
  function_pointers_.ResetCIPulseFreqDigFltrTimebaseSrc = reinterpret_cast<ResetCIPulseFreqDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqDigFltrTimebaseSrc"));
  function_pointers_.ResetCIPulseFreqDigSyncEnable = reinterpret_cast<ResetCIPulseFreqDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqDigSyncEnable"));
  function_pointers_.ResetCIPulseFreqLogicLvlBehavior = reinterpret_cast<ResetCIPulseFreqLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqLogicLvlBehavior"));
  function_pointers_.ResetCIPulseFreqStartEdge = reinterpret_cast<ResetCIPulseFreqStartEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqStartEdge"));
  function_pointers_.ResetCIPulseFreqTerm = reinterpret_cast<ResetCIPulseFreqTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqTerm"));
  function_pointers_.ResetCIPulseFreqTermCfg = reinterpret_cast<ResetCIPulseFreqTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqTermCfg"));
  function_pointers_.ResetCIPulseFreqUnits = reinterpret_cast<ResetCIPulseFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseFreqUnits"));
  function_pointers_.ResetCIPulseTicksDigFltrEnable = reinterpret_cast<ResetCIPulseTicksDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksDigFltrEnable"));
  function_pointers_.ResetCIPulseTicksDigFltrMinPulseWidth = reinterpret_cast<ResetCIPulseTicksDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksDigFltrMinPulseWidth"));
  function_pointers_.ResetCIPulseTicksDigFltrTimebaseRate = reinterpret_cast<ResetCIPulseTicksDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksDigFltrTimebaseRate"));
  function_pointers_.ResetCIPulseTicksDigFltrTimebaseSrc = reinterpret_cast<ResetCIPulseTicksDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksDigFltrTimebaseSrc"));
  function_pointers_.ResetCIPulseTicksDigSyncEnable = reinterpret_cast<ResetCIPulseTicksDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksDigSyncEnable"));
  function_pointers_.ResetCIPulseTicksLogicLvlBehavior = reinterpret_cast<ResetCIPulseTicksLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksLogicLvlBehavior"));
  function_pointers_.ResetCIPulseTicksStartEdge = reinterpret_cast<ResetCIPulseTicksStartEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksStartEdge"));
  function_pointers_.ResetCIPulseTicksTerm = reinterpret_cast<ResetCIPulseTicksTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksTerm"));
  function_pointers_.ResetCIPulseTicksTermCfg = reinterpret_cast<ResetCIPulseTicksTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTicksTermCfg"));
  function_pointers_.ResetCIPulseTimeDigFltrEnable = reinterpret_cast<ResetCIPulseTimeDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeDigFltrEnable"));
  function_pointers_.ResetCIPulseTimeDigFltrMinPulseWidth = reinterpret_cast<ResetCIPulseTimeDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeDigFltrMinPulseWidth"));
  function_pointers_.ResetCIPulseTimeDigFltrTimebaseRate = reinterpret_cast<ResetCIPulseTimeDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeDigFltrTimebaseRate"));
  function_pointers_.ResetCIPulseTimeDigFltrTimebaseSrc = reinterpret_cast<ResetCIPulseTimeDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeDigFltrTimebaseSrc"));
  function_pointers_.ResetCIPulseTimeDigSyncEnable = reinterpret_cast<ResetCIPulseTimeDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeDigSyncEnable"));
  function_pointers_.ResetCIPulseTimeLogicLvlBehavior = reinterpret_cast<ResetCIPulseTimeLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeLogicLvlBehavior"));
  function_pointers_.ResetCIPulseTimeStartEdge = reinterpret_cast<ResetCIPulseTimeStartEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeStartEdge"));
  function_pointers_.ResetCIPulseTimeTerm = reinterpret_cast<ResetCIPulseTimeTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeTerm"));
  function_pointers_.ResetCIPulseTimeTermCfg = reinterpret_cast<ResetCIPulseTimeTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeTermCfg"));
  function_pointers_.ResetCIPulseTimeUnits = reinterpret_cast<ResetCIPulseTimeUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseTimeUnits"));
  function_pointers_.ResetCIPulseWidthDigFltrEnable = reinterpret_cast<ResetCIPulseWidthDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthDigFltrEnable"));
  function_pointers_.ResetCIPulseWidthDigFltrMinPulseWidth = reinterpret_cast<ResetCIPulseWidthDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthDigFltrMinPulseWidth"));
  function_pointers_.ResetCIPulseWidthDigFltrTimebaseRate = reinterpret_cast<ResetCIPulseWidthDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthDigFltrTimebaseRate"));
  function_pointers_.ResetCIPulseWidthDigFltrTimebaseSrc = reinterpret_cast<ResetCIPulseWidthDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthDigFltrTimebaseSrc"));
  function_pointers_.ResetCIPulseWidthDigSyncEnable = reinterpret_cast<ResetCIPulseWidthDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthDigSyncEnable"));
  function_pointers_.ResetCIPulseWidthLogicLvlBehavior = reinterpret_cast<ResetCIPulseWidthLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthLogicLvlBehavior"));
  function_pointers_.ResetCIPulseWidthStartingEdge = reinterpret_cast<ResetCIPulseWidthStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthStartingEdge"));
  function_pointers_.ResetCIPulseWidthTerm = reinterpret_cast<ResetCIPulseWidthTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthTerm"));
  function_pointers_.ResetCIPulseWidthTermCfg = reinterpret_cast<ResetCIPulseWidthTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthTermCfg"));
  function_pointers_.ResetCIPulseWidthUnits = reinterpret_cast<ResetCIPulseWidthUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIPulseWidthUnits"));
  function_pointers_.ResetCISampClkOverrunBehavior = reinterpret_cast<ResetCISampClkOverrunBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCISampClkOverrunBehavior"));
  function_pointers_.ResetCISampClkOverrunSentinelVal = reinterpret_cast<ResetCISampClkOverrunSentinelValPtr>(shared_library_.get_function_pointer("DAQmxResetCISampClkOverrunSentinelVal"));
  function_pointers_.ResetCISemiPeriodDigFltrEnable = reinterpret_cast<ResetCISemiPeriodDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodDigFltrEnable"));
  function_pointers_.ResetCISemiPeriodDigFltrMinPulseWidth = reinterpret_cast<ResetCISemiPeriodDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodDigFltrMinPulseWidth"));
  function_pointers_.ResetCISemiPeriodDigFltrTimebaseRate = reinterpret_cast<ResetCISemiPeriodDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodDigFltrTimebaseRate"));
  function_pointers_.ResetCISemiPeriodDigFltrTimebaseSrc = reinterpret_cast<ResetCISemiPeriodDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodDigFltrTimebaseSrc"));
  function_pointers_.ResetCISemiPeriodDigSyncEnable = reinterpret_cast<ResetCISemiPeriodDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodDigSyncEnable"));
  function_pointers_.ResetCISemiPeriodLogicLvlBehavior = reinterpret_cast<ResetCISemiPeriodLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodLogicLvlBehavior"));
  function_pointers_.ResetCISemiPeriodStartingEdge = reinterpret_cast<ResetCISemiPeriodStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodStartingEdge"));
  function_pointers_.ResetCISemiPeriodTerm = reinterpret_cast<ResetCISemiPeriodTermPtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodTerm"));
  function_pointers_.ResetCISemiPeriodTermCfg = reinterpret_cast<ResetCISemiPeriodTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodTermCfg"));
  function_pointers_.ResetCISemiPeriodUnits = reinterpret_cast<ResetCISemiPeriodUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCISemiPeriodUnits"));
  function_pointers_.ResetCIThreshVoltage = reinterpret_cast<ResetCIThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxResetCIThreshVoltage"));
  function_pointers_.ResetCITimestampInitialSeconds = reinterpret_cast<ResetCITimestampInitialSecondsPtr>(shared_library_.get_function_pointer("DAQmxResetCITimestampInitialSeconds"));
  function_pointers_.ResetCITimestampUnits = reinterpret_cast<ResetCITimestampUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCITimestampUnits"));
  function_pointers_.ResetCITwoEdgeSepFirstDigFltrEnable = reinterpret_cast<ResetCITwoEdgeSepFirstDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstDigFltrEnable"));
  function_pointers_.ResetCITwoEdgeSepFirstDigFltrMinPulseWidth = reinterpret_cast<ResetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth"));
  function_pointers_.ResetCITwoEdgeSepFirstDigFltrTimebaseRate = reinterpret_cast<ResetCITwoEdgeSepFirstDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate"));
  function_pointers_.ResetCITwoEdgeSepFirstDigFltrTimebaseSrc = reinterpret_cast<ResetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc"));
  function_pointers_.ResetCITwoEdgeSepFirstDigSyncEnable = reinterpret_cast<ResetCITwoEdgeSepFirstDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstDigSyncEnable"));
  function_pointers_.ResetCITwoEdgeSepFirstEdge = reinterpret_cast<ResetCITwoEdgeSepFirstEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstEdge"));
  function_pointers_.ResetCITwoEdgeSepFirstLogicLvlBehavior = reinterpret_cast<ResetCITwoEdgeSepFirstLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior"));
  function_pointers_.ResetCITwoEdgeSepFirstTerm = reinterpret_cast<ResetCITwoEdgeSepFirstTermPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstTerm"));
  function_pointers_.ResetCITwoEdgeSepFirstTermCfg = reinterpret_cast<ResetCITwoEdgeSepFirstTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepFirstTermCfg"));
  function_pointers_.ResetCITwoEdgeSepSecondDigFltrEnable = reinterpret_cast<ResetCITwoEdgeSepSecondDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondDigFltrEnable"));
  function_pointers_.ResetCITwoEdgeSepSecondDigFltrMinPulseWidth = reinterpret_cast<ResetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth"));
  function_pointers_.ResetCITwoEdgeSepSecondDigFltrTimebaseRate = reinterpret_cast<ResetCITwoEdgeSepSecondDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate"));
  function_pointers_.ResetCITwoEdgeSepSecondDigFltrTimebaseSrc = reinterpret_cast<ResetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc"));
  function_pointers_.ResetCITwoEdgeSepSecondDigSyncEnable = reinterpret_cast<ResetCITwoEdgeSepSecondDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondDigSyncEnable"));
  function_pointers_.ResetCITwoEdgeSepSecondEdge = reinterpret_cast<ResetCITwoEdgeSepSecondEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondEdge"));
  function_pointers_.ResetCITwoEdgeSepSecondLogicLvlBehavior = reinterpret_cast<ResetCITwoEdgeSepSecondLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior"));
  function_pointers_.ResetCITwoEdgeSepSecondTerm = reinterpret_cast<ResetCITwoEdgeSepSecondTermPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondTerm"));
  function_pointers_.ResetCITwoEdgeSepSecondTermCfg = reinterpret_cast<ResetCITwoEdgeSepSecondTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepSecondTermCfg"));
  function_pointers_.ResetCITwoEdgeSepUnits = reinterpret_cast<ResetCITwoEdgeSepUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCITwoEdgeSepUnits"));
  function_pointers_.ResetCIUsbXferReqCount = reinterpret_cast<ResetCIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxResetCIUsbXferReqCount"));
  function_pointers_.ResetCIUsbXferReqSize = reinterpret_cast<ResetCIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxResetCIUsbXferReqSize"));
  function_pointers_.ResetCIVelocityAngEncoderPulsesPerRev = reinterpret_cast<ResetCIVelocityAngEncoderPulsesPerRevPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityAngEncoderPulsesPerRev"));
  function_pointers_.ResetCIVelocityAngEncoderUnits = reinterpret_cast<ResetCIVelocityAngEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityAngEncoderUnits"));
  function_pointers_.ResetCIVelocityDiv = reinterpret_cast<ResetCIVelocityDivPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityDiv"));
  function_pointers_.ResetCIVelocityEncoderAInputDigFltrEnable = reinterpret_cast<ResetCIVelocityEncoderAInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputDigFltrEnable"));
  function_pointers_.ResetCIVelocityEncoderAInputDigFltrMinPulseWidth = reinterpret_cast<ResetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth"));
  function_pointers_.ResetCIVelocityEncoderAInputDigFltrTimebaseRate = reinterpret_cast<ResetCIVelocityEncoderAInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate"));
  function_pointers_.ResetCIVelocityEncoderAInputDigFltrTimebaseSrc = reinterpret_cast<ResetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc"));
  function_pointers_.ResetCIVelocityEncoderAInputLogicLvlBehavior = reinterpret_cast<ResetCIVelocityEncoderAInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior"));
  function_pointers_.ResetCIVelocityEncoderAInputTerm = reinterpret_cast<ResetCIVelocityEncoderAInputTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputTerm"));
  function_pointers_.ResetCIVelocityEncoderAInputTermCfg = reinterpret_cast<ResetCIVelocityEncoderAInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderAInputTermCfg"));
  function_pointers_.ResetCIVelocityEncoderBInputDigFltrEnable = reinterpret_cast<ResetCIVelocityEncoderBInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputDigFltrEnable"));
  function_pointers_.ResetCIVelocityEncoderBInputDigFltrMinPulseWidth = reinterpret_cast<ResetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth"));
  function_pointers_.ResetCIVelocityEncoderBInputDigFltrTimebaseRate = reinterpret_cast<ResetCIVelocityEncoderBInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate"));
  function_pointers_.ResetCIVelocityEncoderBInputDigFltrTimebaseSrc = reinterpret_cast<ResetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc"));
  function_pointers_.ResetCIVelocityEncoderBInputLogicLvlBehavior = reinterpret_cast<ResetCIVelocityEncoderBInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior"));
  function_pointers_.ResetCIVelocityEncoderBInputTerm = reinterpret_cast<ResetCIVelocityEncoderBInputTermPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputTerm"));
  function_pointers_.ResetCIVelocityEncoderBInputTermCfg = reinterpret_cast<ResetCIVelocityEncoderBInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderBInputTermCfg"));
  function_pointers_.ResetCIVelocityEncoderDecodingType = reinterpret_cast<ResetCIVelocityEncoderDecodingTypePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityEncoderDecodingType"));
  function_pointers_.ResetCIVelocityLinEncoderDistPerPulse = reinterpret_cast<ResetCIVelocityLinEncoderDistPerPulsePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityLinEncoderDistPerPulse"));
  function_pointers_.ResetCIVelocityLinEncoderUnits = reinterpret_cast<ResetCIVelocityLinEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityLinEncoderUnits"));
  function_pointers_.ResetCIVelocityMeasTime = reinterpret_cast<ResetCIVelocityMeasTimePtr>(shared_library_.get_function_pointer("DAQmxResetCIVelocityMeasTime"));
  function_pointers_.ResetCOAutoIncrCnt = reinterpret_cast<ResetCOAutoIncrCntPtr>(shared_library_.get_function_pointer("DAQmxResetCOAutoIncrCnt"));
  function_pointers_.ResetCOConstrainedGenMode = reinterpret_cast<ResetCOConstrainedGenModePtr>(shared_library_.get_function_pointer("DAQmxResetCOConstrainedGenMode"));
  function_pointers_.ResetCOCtrTimebaseActiveEdge = reinterpret_cast<ResetCOCtrTimebaseActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseActiveEdge"));
  function_pointers_.ResetCOCtrTimebaseDigFltrEnable = reinterpret_cast<ResetCOCtrTimebaseDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseDigFltrEnable"));
  function_pointers_.ResetCOCtrTimebaseDigFltrMinPulseWidth = reinterpret_cast<ResetCOCtrTimebaseDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth"));
  function_pointers_.ResetCOCtrTimebaseDigFltrTimebaseRate = reinterpret_cast<ResetCOCtrTimebaseDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseDigFltrTimebaseRate"));
  function_pointers_.ResetCOCtrTimebaseDigFltrTimebaseSrc = reinterpret_cast<ResetCOCtrTimebaseDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc"));
  function_pointers_.ResetCOCtrTimebaseDigSyncEnable = reinterpret_cast<ResetCOCtrTimebaseDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseDigSyncEnable"));
  function_pointers_.ResetCOCtrTimebaseMasterTimebaseDiv = reinterpret_cast<ResetCOCtrTimebaseMasterTimebaseDivPtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseMasterTimebaseDiv"));
  function_pointers_.ResetCOCtrTimebaseRate = reinterpret_cast<ResetCOCtrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseRate"));
  function_pointers_.ResetCOCtrTimebaseSrc = reinterpret_cast<ResetCOCtrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetCOCtrTimebaseSrc"));
  function_pointers_.ResetCODataXferMech = reinterpret_cast<ResetCODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxResetCODataXferMech"));
  function_pointers_.ResetCODataXferReqCond = reinterpret_cast<ResetCODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxResetCODataXferReqCond"));
  function_pointers_.ResetCOEnableInitialDelayOnRetrigger = reinterpret_cast<ResetCOEnableInitialDelayOnRetriggerPtr>(shared_library_.get_function_pointer("DAQmxResetCOEnableInitialDelayOnRetrigger"));
  function_pointers_.ResetCOMemMapEnable = reinterpret_cast<ResetCOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxResetCOMemMapEnable"));
  function_pointers_.ResetCOPrescaler = reinterpret_cast<ResetCOPrescalerPtr>(shared_library_.get_function_pointer("DAQmxResetCOPrescaler"));
  function_pointers_.ResetCOPulseDutyCyc = reinterpret_cast<ResetCOPulseDutyCycPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseDutyCyc"));
  function_pointers_.ResetCOPulseFreq = reinterpret_cast<ResetCOPulseFreqPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseFreq"));
  function_pointers_.ResetCOPulseFreqInitialDelay = reinterpret_cast<ResetCOPulseFreqInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseFreqInitialDelay"));
  function_pointers_.ResetCOPulseFreqUnits = reinterpret_cast<ResetCOPulseFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseFreqUnits"));
  function_pointers_.ResetCOPulseHighTicks = reinterpret_cast<ResetCOPulseHighTicksPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseHighTicks"));
  function_pointers_.ResetCOPulseHighTime = reinterpret_cast<ResetCOPulseHighTimePtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseHighTime"));
  function_pointers_.ResetCOPulseIdleState = reinterpret_cast<ResetCOPulseIdleStatePtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseIdleState"));
  function_pointers_.ResetCOPulseLowTicks = reinterpret_cast<ResetCOPulseLowTicksPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseLowTicks"));
  function_pointers_.ResetCOPulseLowTime = reinterpret_cast<ResetCOPulseLowTimePtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseLowTime"));
  function_pointers_.ResetCOPulseTerm = reinterpret_cast<ResetCOPulseTermPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseTerm"));
  function_pointers_.ResetCOPulseTicksInitialDelay = reinterpret_cast<ResetCOPulseTicksInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseTicksInitialDelay"));
  function_pointers_.ResetCOPulseTimeInitialDelay = reinterpret_cast<ResetCOPulseTimeInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseTimeInitialDelay"));
  function_pointers_.ResetCOPulseTimeUnits = reinterpret_cast<ResetCOPulseTimeUnitsPtr>(shared_library_.get_function_pointer("DAQmxResetCOPulseTimeUnits"));
  function_pointers_.ResetCOUsbXferReqCount = reinterpret_cast<ResetCOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxResetCOUsbXferReqCount"));
  function_pointers_.ResetCOUsbXferReqSize = reinterpret_cast<ResetCOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxResetCOUsbXferReqSize"));
  function_pointers_.ResetCOUseOnlyOnBrdMem = reinterpret_cast<ResetCOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxResetCOUseOnlyOnBrdMem"));
  function_pointers_.ResetChanDescr = reinterpret_cast<ResetChanDescrPtr>(shared_library_.get_function_pointer("DAQmxResetChanDescr"));
  function_pointers_.ResetChanSyncUnlockBehavior = reinterpret_cast<ResetChanSyncUnlockBehaviorPtr>(shared_library_.get_function_pointer("DAQmxResetChanSyncUnlockBehavior"));
  function_pointers_.ResetDIAcquireOn = reinterpret_cast<ResetDIAcquireOnPtr>(shared_library_.get_function_pointer("DAQmxResetDIAcquireOn"));
  function_pointers_.ResetDIDataXferMech = reinterpret_cast<ResetDIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxResetDIDataXferMech"));
  function_pointers_.ResetDIDataXferReqCond = reinterpret_cast<ResetDIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxResetDIDataXferReqCond"));
  function_pointers_.ResetDIDigFltrEnable = reinterpret_cast<ResetDIDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxResetDIDigFltrEnable"));
  function_pointers_.ResetDIDigFltrEnableBusMode = reinterpret_cast<ResetDIDigFltrEnableBusModePtr>(shared_library_.get_function_pointer("DAQmxResetDIDigFltrEnableBusMode"));
  function_pointers_.ResetDIDigFltrMinPulseWidth = reinterpret_cast<ResetDIDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxResetDIDigFltrMinPulseWidth"));
  function_pointers_.ResetDIDigFltrTimebaseRate = reinterpret_cast<ResetDIDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxResetDIDigFltrTimebaseRate"));
  function_pointers_.ResetDIDigFltrTimebaseSrc = reinterpret_cast<ResetDIDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxResetDIDigFltrTimebaseSrc"));
  function_pointers_.ResetDIDigSyncEnable = reinterpret_cast<ResetDIDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxResetDIDigSyncEnable"));
  function_pointers_.ResetDIInvertLines = reinterpret_cast<ResetDIInvertLinesPtr>(shared_library_.get_function_pointer("DAQmxResetDIInvertLines"));
  function_pointers_.ResetDILogicFamily = reinterpret_cast<ResetDILogicFamilyPtr>(shared_library_.get_function_pointer("DAQmxResetDILogicFamily"));
  function_pointers_.ResetDIMemMapEnable = reinterpret_cast<ResetDIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxResetDIMemMapEnable"));
  function_pointers_.ResetDITristate = reinterpret_cast<ResetDITristatePtr>(shared_library_.get_function_pointer("DAQmxResetDITristate"));
  function_pointers_.ResetDIUsbXferReqCount = reinterpret_cast<ResetDIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxResetDIUsbXferReqCount"));
  function_pointers_.ResetDIUsbXferReqSize = reinterpret_cast<ResetDIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxResetDIUsbXferReqSize"));
  function_pointers_.ResetDODataXferMech = reinterpret_cast<ResetDODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxResetDODataXferMech"));
  function_pointers_.ResetDODataXferReqCond = reinterpret_cast<ResetDODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxResetDODataXferReqCond"));
  function_pointers_.ResetDOGenerateOn = reinterpret_cast<ResetDOGenerateOnPtr>(shared_library_.get_function_pointer("DAQmxResetDOGenerateOn"));
  function_pointers_.ResetDOInvertLines = reinterpret_cast<ResetDOInvertLinesPtr>(shared_library_.get_function_pointer("DAQmxResetDOInvertLines"));
  function_pointers_.ResetDOLineStatesDoneState = reinterpret_cast<ResetDOLineStatesDoneStatePtr>(shared_library_.get_function_pointer("DAQmxResetDOLineStatesDoneState"));
  function_pointers_.ResetDOLineStatesPausedState = reinterpret_cast<ResetDOLineStatesPausedStatePtr>(shared_library_.get_function_pointer("DAQmxResetDOLineStatesPausedState"));
  function_pointers_.ResetDOLineStatesStartState = reinterpret_cast<ResetDOLineStatesStartStatePtr>(shared_library_.get_function_pointer("DAQmxResetDOLineStatesStartState"));
  function_pointers_.ResetDOLogicFamily = reinterpret_cast<ResetDOLogicFamilyPtr>(shared_library_.get_function_pointer("DAQmxResetDOLogicFamily"));
  function_pointers_.ResetDOMemMapEnable = reinterpret_cast<ResetDOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxResetDOMemMapEnable"));
  function_pointers_.ResetDOOutputDriveType = reinterpret_cast<ResetDOOutputDriveTypePtr>(shared_library_.get_function_pointer("DAQmxResetDOOutputDriveType"));
  function_pointers_.ResetDOOvercurrentAutoReenable = reinterpret_cast<ResetDOOvercurrentAutoReenablePtr>(shared_library_.get_function_pointer("DAQmxResetDOOvercurrentAutoReenable"));
  function_pointers_.ResetDOOvercurrentLimit = reinterpret_cast<ResetDOOvercurrentLimitPtr>(shared_library_.get_function_pointer("DAQmxResetDOOvercurrentLimit"));
  function_pointers_.ResetDOOvercurrentReenablePeriod = reinterpret_cast<ResetDOOvercurrentReenablePeriodPtr>(shared_library_.get_function_pointer("DAQmxResetDOOvercurrentReenablePeriod"));
  function_pointers_.ResetDOTristate = reinterpret_cast<ResetDOTristatePtr>(shared_library_.get_function_pointer("DAQmxResetDOTristate"));
  function_pointers_.ResetDOUsbXferReqCount = reinterpret_cast<ResetDOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxResetDOUsbXferReqCount"));
  function_pointers_.ResetDOUsbXferReqSize = reinterpret_cast<ResetDOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxResetDOUsbXferReqSize"));
  function_pointers_.ResetDOUseOnlyOnBrdMem = reinterpret_cast<ResetDOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxResetDOUseOnlyOnBrdMem"));
  function_pointers_.ResetDevice = reinterpret_cast<ResetDevicePtr>(shared_library_.get_function_pointer("DAQmxResetDevice"));
  function_pointers_.SaveGlobalChan = reinterpret_cast<SaveGlobalChanPtr>(shared_library_.get_function_pointer("DAQmxSaveGlobalChan"));
  function_pointers_.SaveScale = reinterpret_cast<SaveScalePtr>(shared_library_.get_function_pointer("DAQmxSaveScale"));
  function_pointers_.SaveTask = reinterpret_cast<SaveTaskPtr>(shared_library_.get_function_pointer("DAQmxSaveTask"));
  function_pointers_.SelfCal = reinterpret_cast<SelfCalPtr>(shared_library_.get_function_pointer("DAQmxSelfCal"));
  function_pointers_.SelfTestDevice = reinterpret_cast<SelfTestDevicePtr>(shared_library_.get_function_pointer("DAQmxSelfTestDevice"));
  function_pointers_.SetAIACExcitFreq = reinterpret_cast<SetAIACExcitFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAIACExcitFreq"));
  function_pointers_.SetAIACExcitSyncEnable = reinterpret_cast<SetAIACExcitSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIACExcitSyncEnable"));
  function_pointers_.SetAIACExcitWireMode = reinterpret_cast<SetAIACExcitWireModePtr>(shared_library_.get_function_pointer("DAQmxSetAIACExcitWireMode"));
  function_pointers_.SetAIADCCustomTimingMode = reinterpret_cast<SetAIADCCustomTimingModePtr>(shared_library_.get_function_pointer("DAQmxSetAIADCCustomTimingMode"));
  function_pointers_.SetAIADCTimingMode = reinterpret_cast<SetAIADCTimingModePtr>(shared_library_.get_function_pointer("DAQmxSetAIADCTimingMode"));
  function_pointers_.SetAIAccel4WireDCVoltageSensitivity = reinterpret_cast<SetAIAccel4WireDCVoltageSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccel4WireDCVoltageSensitivity"));
  function_pointers_.SetAIAccel4WireDCVoltageSensitivityUnits = reinterpret_cast<SetAIAccel4WireDCVoltageSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccel4WireDCVoltageSensitivityUnits"));
  function_pointers_.SetAIAccelChargeSensitivity = reinterpret_cast<SetAIAccelChargeSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccelChargeSensitivity"));
  function_pointers_.SetAIAccelChargeSensitivityUnits = reinterpret_cast<SetAIAccelChargeSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccelChargeSensitivityUnits"));
  function_pointers_.SetAIAccelSensitivity = reinterpret_cast<SetAIAccelSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccelSensitivity"));
  function_pointers_.SetAIAccelSensitivityUnits = reinterpret_cast<SetAIAccelSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccelSensitivityUnits"));
  function_pointers_.SetAIAccelUnits = reinterpret_cast<SetAIAccelUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIAccelUnits"));
  function_pointers_.SetAIAcceldBRef = reinterpret_cast<SetAIAcceldBRefPtr>(shared_library_.get_function_pointer("DAQmxSetAIAcceldBRef"));
  function_pointers_.SetAIAtten = reinterpret_cast<SetAIAttenPtr>(shared_library_.get_function_pointer("DAQmxSetAIAtten"));
  function_pointers_.SetAIAutoZeroMode = reinterpret_cast<SetAIAutoZeroModePtr>(shared_library_.get_function_pointer("DAQmxSetAIAutoZeroMode"));
  function_pointers_.SetAIAveragingWinSize = reinterpret_cast<SetAIAveragingWinSizePtr>(shared_library_.get_function_pointer("DAQmxSetAIAveragingWinSize"));
  function_pointers_.SetAIBridgeBalanceCoarsePot = reinterpret_cast<SetAIBridgeBalanceCoarsePotPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeBalanceCoarsePot"));
  function_pointers_.SetAIBridgeBalanceFinePot = reinterpret_cast<SetAIBridgeBalanceFinePotPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeBalanceFinePot"));
  function_pointers_.SetAIBridgeCfg = reinterpret_cast<SetAIBridgeCfgPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeCfg"));
  function_pointers_.SetAIBridgeElectricalUnits = reinterpret_cast<SetAIBridgeElectricalUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeElectricalUnits"));
  function_pointers_.SetAIBridgeInitialRatio = reinterpret_cast<SetAIBridgeInitialRatioPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeInitialRatio"));
  function_pointers_.SetAIBridgeInitialVoltage = reinterpret_cast<SetAIBridgeInitialVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeInitialVoltage"));
  function_pointers_.SetAIBridgeNomResistance = reinterpret_cast<SetAIBridgeNomResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeNomResistance"));
  function_pointers_.SetAIBridgePhysicalUnits = reinterpret_cast<SetAIBridgePhysicalUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgePhysicalUnits"));
  function_pointers_.SetAIBridgePolyForwardCoeff = reinterpret_cast<SetAIBridgePolyForwardCoeffPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgePolyForwardCoeff"));
  function_pointers_.SetAIBridgePolyReverseCoeff = reinterpret_cast<SetAIBridgePolyReverseCoeffPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgePolyReverseCoeff"));
  function_pointers_.SetAIBridgeScaleType = reinterpret_cast<SetAIBridgeScaleTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeScaleType"));
  function_pointers_.SetAIBridgeShuntCalEnable = reinterpret_cast<SetAIBridgeShuntCalEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalEnable"));
  function_pointers_.SetAIBridgeShuntCalGainAdjust = reinterpret_cast<SetAIBridgeShuntCalGainAdjustPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalGainAdjust"));
  function_pointers_.SetAIBridgeShuntCalSelect = reinterpret_cast<SetAIBridgeShuntCalSelectPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalSelect"));
  function_pointers_.SetAIBridgeShuntCalShuntCalAActualResistance = reinterpret_cast<SetAIBridgeShuntCalShuntCalAActualResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalShuntCalAActualResistance"));
  function_pointers_.SetAIBridgeShuntCalShuntCalAResistance = reinterpret_cast<SetAIBridgeShuntCalShuntCalAResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalShuntCalAResistance"));
  function_pointers_.SetAIBridgeShuntCalShuntCalASrc = reinterpret_cast<SetAIBridgeShuntCalShuntCalASrcPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalShuntCalASrc"));
  function_pointers_.SetAIBridgeShuntCalShuntCalBActualResistance = reinterpret_cast<SetAIBridgeShuntCalShuntCalBActualResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalShuntCalBActualResistance"));
  function_pointers_.SetAIBridgeShuntCalShuntCalBResistance = reinterpret_cast<SetAIBridgeShuntCalShuntCalBResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeShuntCalShuntCalBResistance"));
  function_pointers_.SetAIBridgeTableElectricalVals = reinterpret_cast<SetAIBridgeTableElectricalValsPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeTableElectricalVals"));
  function_pointers_.SetAIBridgeTablePhysicalVals = reinterpret_cast<SetAIBridgeTablePhysicalValsPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeTablePhysicalVals"));
  function_pointers_.SetAIBridgeTwoPointLinFirstElectricalVal = reinterpret_cast<SetAIBridgeTwoPointLinFirstElectricalValPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeTwoPointLinFirstElectricalVal"));
  function_pointers_.SetAIBridgeTwoPointLinFirstPhysicalVal = reinterpret_cast<SetAIBridgeTwoPointLinFirstPhysicalValPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal"));
  function_pointers_.SetAIBridgeTwoPointLinSecondElectricalVal = reinterpret_cast<SetAIBridgeTwoPointLinSecondElectricalValPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeTwoPointLinSecondElectricalVal"));
  function_pointers_.SetAIBridgeTwoPointLinSecondPhysicalVal = reinterpret_cast<SetAIBridgeTwoPointLinSecondPhysicalValPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal"));
  function_pointers_.SetAIBridgeUnits = reinterpret_cast<SetAIBridgeUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIBridgeUnits"));
  function_pointers_.SetAIChanCalApplyCalIfExp = reinterpret_cast<SetAIChanCalApplyCalIfExpPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalApplyCalIfExp"));
  function_pointers_.SetAIChanCalCalDate = reinterpret_cast<SetAIChanCalCalDatePtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalCalDate"));
  function_pointers_.SetAIChanCalDesc = reinterpret_cast<SetAIChanCalDescPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalDesc"));
  function_pointers_.SetAIChanCalEnableCal = reinterpret_cast<SetAIChanCalEnableCalPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalEnableCal"));
  function_pointers_.SetAIChanCalExpDate = reinterpret_cast<SetAIChanCalExpDatePtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalExpDate"));
  function_pointers_.SetAIChanCalOperatorName = reinterpret_cast<SetAIChanCalOperatorNamePtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalOperatorName"));
  function_pointers_.SetAIChanCalPolyForwardCoeff = reinterpret_cast<SetAIChanCalPolyForwardCoeffPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalPolyForwardCoeff"));
  function_pointers_.SetAIChanCalPolyReverseCoeff = reinterpret_cast<SetAIChanCalPolyReverseCoeffPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalPolyReverseCoeff"));
  function_pointers_.SetAIChanCalScaleType = reinterpret_cast<SetAIChanCalScaleTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalScaleType"));
  function_pointers_.SetAIChanCalTablePreScaledVals = reinterpret_cast<SetAIChanCalTablePreScaledValsPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalTablePreScaledVals"));
  function_pointers_.SetAIChanCalTableScaledVals = reinterpret_cast<SetAIChanCalTableScaledValsPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalTableScaledVals"));
  function_pointers_.SetAIChanCalVerifAcqVals = reinterpret_cast<SetAIChanCalVerifAcqValsPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalVerifAcqVals"));
  function_pointers_.SetAIChanCalVerifRefVals = reinterpret_cast<SetAIChanCalVerifRefValsPtr>(shared_library_.get_function_pointer("DAQmxSetAIChanCalVerifRefVals"));
  function_pointers_.SetAIChargeUnits = reinterpret_cast<SetAIChargeUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIChargeUnits"));
  function_pointers_.SetAIChopEnable = reinterpret_cast<SetAIChopEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIChopEnable"));
  function_pointers_.SetAICoupling = reinterpret_cast<SetAICouplingPtr>(shared_library_.get_function_pointer("DAQmxSetAICoupling"));
  function_pointers_.SetAICurrentACRMSUnits = reinterpret_cast<SetAICurrentACRMSUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAICurrentACRMSUnits"));
  function_pointers_.SetAICurrentShuntLoc = reinterpret_cast<SetAICurrentShuntLocPtr>(shared_library_.get_function_pointer("DAQmxSetAICurrentShuntLoc"));
  function_pointers_.SetAICurrentShuntResistance = reinterpret_cast<SetAICurrentShuntResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAICurrentShuntResistance"));
  function_pointers_.SetAICurrentUnits = reinterpret_cast<SetAICurrentUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAICurrentUnits"));
  function_pointers_.SetAICustomScaleName = reinterpret_cast<SetAICustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxSetAICustomScaleName"));
  function_pointers_.SetAIDCOffset = reinterpret_cast<SetAIDCOffsetPtr>(shared_library_.get_function_pointer("DAQmxSetAIDCOffset"));
  function_pointers_.SetAIDataXferCustomThreshold = reinterpret_cast<SetAIDataXferCustomThresholdPtr>(shared_library_.get_function_pointer("DAQmxSetAIDataXferCustomThreshold"));
  function_pointers_.SetAIDataXferMaxRate = reinterpret_cast<SetAIDataXferMaxRatePtr>(shared_library_.get_function_pointer("DAQmxSetAIDataXferMaxRate"));
  function_pointers_.SetAIDataXferMech = reinterpret_cast<SetAIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxSetAIDataXferMech"));
  function_pointers_.SetAIDataXferReqCond = reinterpret_cast<SetAIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxSetAIDataXferReqCond"));
  function_pointers_.SetAIDigFltrBandpassCenterFreq = reinterpret_cast<SetAIDigFltrBandpassCenterFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrBandpassCenterFreq"));
  function_pointers_.SetAIDigFltrBandpassWidth = reinterpret_cast<SetAIDigFltrBandpassWidthPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrBandpassWidth"));
  function_pointers_.SetAIDigFltrCoeff = reinterpret_cast<SetAIDigFltrCoeffPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrCoeff"));
  function_pointers_.SetAIDigFltrEnable = reinterpret_cast<SetAIDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrEnable"));
  function_pointers_.SetAIDigFltrHighpassCutoffFreq = reinterpret_cast<SetAIDigFltrHighpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrHighpassCutoffFreq"));
  function_pointers_.SetAIDigFltrLowpassCutoffFreq = reinterpret_cast<SetAIDigFltrLowpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrLowpassCutoffFreq"));
  function_pointers_.SetAIDigFltrNotchCenterFreq = reinterpret_cast<SetAIDigFltrNotchCenterFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrNotchCenterFreq"));
  function_pointers_.SetAIDigFltrNotchWidth = reinterpret_cast<SetAIDigFltrNotchWidthPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrNotchWidth"));
  function_pointers_.SetAIDigFltrOrder = reinterpret_cast<SetAIDigFltrOrderPtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrOrder"));
  function_pointers_.SetAIDigFltrResponse = reinterpret_cast<SetAIDigFltrResponsePtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrResponse"));
  function_pointers_.SetAIDigFltrType = reinterpret_cast<SetAIDigFltrTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIDigFltrType"));
  function_pointers_.SetAIDitherEnable = reinterpret_cast<SetAIDitherEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIDitherEnable"));
  function_pointers_.SetAIEddyCurrentProxProbeSensitivity = reinterpret_cast<SetAIEddyCurrentProxProbeSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIEddyCurrentProxProbeSensitivity"));
  function_pointers_.SetAIEddyCurrentProxProbeSensitivityUnits = reinterpret_cast<SetAIEddyCurrentProxProbeSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIEddyCurrentProxProbeSensitivityUnits"));
  function_pointers_.SetAIEddyCurrentProxProbeUnits = reinterpret_cast<SetAIEddyCurrentProxProbeUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIEddyCurrentProxProbeUnits"));
  function_pointers_.SetAIEnhancedAliasRejectionEnable = reinterpret_cast<SetAIEnhancedAliasRejectionEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIEnhancedAliasRejectionEnable"));
  function_pointers_.SetAIExcitActualVal = reinterpret_cast<SetAIExcitActualValPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitActualVal"));
  function_pointers_.SetAIExcitDCorAC = reinterpret_cast<SetAIExcitDCorACPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitDCorAC"));
  function_pointers_.SetAIExcitIdleOutputBehavior = reinterpret_cast<SetAIExcitIdleOutputBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitIdleOutputBehavior"));
  function_pointers_.SetAIExcitSense = reinterpret_cast<SetAIExcitSensePtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitSense"));
  function_pointers_.SetAIExcitSrc = reinterpret_cast<SetAIExcitSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitSrc"));
  function_pointers_.SetAIExcitUseForScaling = reinterpret_cast<SetAIExcitUseForScalingPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitUseForScaling"));
  function_pointers_.SetAIExcitUseMultiplexed = reinterpret_cast<SetAIExcitUseMultiplexedPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitUseMultiplexed"));
  function_pointers_.SetAIExcitVal = reinterpret_cast<SetAIExcitValPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitVal"));
  function_pointers_.SetAIExcitVoltageOrCurrent = reinterpret_cast<SetAIExcitVoltageOrCurrentPtr>(shared_library_.get_function_pointer("DAQmxSetAIExcitVoltageOrCurrent"));
  function_pointers_.SetAIFilterDelayAdjustment = reinterpret_cast<SetAIFilterDelayAdjustmentPtr>(shared_library_.get_function_pointer("DAQmxSetAIFilterDelayAdjustment"));
  function_pointers_.SetAIFilterDelayUnits = reinterpret_cast<SetAIFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIFilterDelayUnits"));
  function_pointers_.SetAIFilterEnable = reinterpret_cast<SetAIFilterEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIFilterEnable"));
  function_pointers_.SetAIFilterFreq = reinterpret_cast<SetAIFilterFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAIFilterFreq"));
  function_pointers_.SetAIFilterOrder = reinterpret_cast<SetAIFilterOrderPtr>(shared_library_.get_function_pointer("DAQmxSetAIFilterOrder"));
  function_pointers_.SetAIFilterResponse = reinterpret_cast<SetAIFilterResponsePtr>(shared_library_.get_function_pointer("DAQmxSetAIFilterResponse"));
  function_pointers_.SetAIForceIEPESensorSensitivity = reinterpret_cast<SetAIForceIEPESensorSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIForceIEPESensorSensitivity"));
  function_pointers_.SetAIForceIEPESensorSensitivityUnits = reinterpret_cast<SetAIForceIEPESensorSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIForceIEPESensorSensitivityUnits"));
  function_pointers_.SetAIForceReadFromChan = reinterpret_cast<SetAIForceReadFromChanPtr>(shared_library_.get_function_pointer("DAQmxSetAIForceReadFromChan"));
  function_pointers_.SetAIForceUnits = reinterpret_cast<SetAIForceUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIForceUnits"));
  function_pointers_.SetAIFreqHyst = reinterpret_cast<SetAIFreqHystPtr>(shared_library_.get_function_pointer("DAQmxSetAIFreqHyst"));
  function_pointers_.SetAIFreqThreshVoltage = reinterpret_cast<SetAIFreqThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetAIFreqThreshVoltage"));
  function_pointers_.SetAIFreqUnits = reinterpret_cast<SetAIFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIFreqUnits"));
  function_pointers_.SetAIGain = reinterpret_cast<SetAIGainPtr>(shared_library_.get_function_pointer("DAQmxSetAIGain"));
  function_pointers_.SetAIInputLimitsFaultDetectEnable = reinterpret_cast<SetAIInputLimitsFaultDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIInputLimitsFaultDetectEnable"));
  function_pointers_.SetAIInputLimitsFaultDetectLowerLimit = reinterpret_cast<SetAIInputLimitsFaultDetectLowerLimitPtr>(shared_library_.get_function_pointer("DAQmxSetAIInputLimitsFaultDetectLowerLimit"));
  function_pointers_.SetAIInputLimitsFaultDetectUpperLimit = reinterpret_cast<SetAIInputLimitsFaultDetectUpperLimitPtr>(shared_library_.get_function_pointer("DAQmxSetAIInputLimitsFaultDetectUpperLimit"));
  function_pointers_.SetAIInputSrc = reinterpret_cast<SetAIInputSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAIInputSrc"));
  function_pointers_.SetAILVDTSensitivity = reinterpret_cast<SetAILVDTSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAILVDTSensitivity"));
  function_pointers_.SetAILVDTSensitivityUnits = reinterpret_cast<SetAILVDTSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAILVDTSensitivityUnits"));
  function_pointers_.SetAILVDTUnits = reinterpret_cast<SetAILVDTUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAILVDTUnits"));
  function_pointers_.SetAILeadWireResistance = reinterpret_cast<SetAILeadWireResistancePtr>(shared_library_.get_function_pointer("DAQmxSetAILeadWireResistance"));
  function_pointers_.SetAILossyLSBRemovalCompressedSampSize = reinterpret_cast<SetAILossyLSBRemovalCompressedSampSizePtr>(shared_library_.get_function_pointer("DAQmxSetAILossyLSBRemovalCompressedSampSize"));
  function_pointers_.SetAILowpassCutoffFreq = reinterpret_cast<SetAILowpassCutoffFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAILowpassCutoffFreq"));
  function_pointers_.SetAILowpassEnable = reinterpret_cast<SetAILowpassEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAILowpassEnable"));
  function_pointers_.SetAILowpassSwitchCapClkSrc = reinterpret_cast<SetAILowpassSwitchCapClkSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAILowpassSwitchCapClkSrc"));
  function_pointers_.SetAILowpassSwitchCapExtClkDiv = reinterpret_cast<SetAILowpassSwitchCapExtClkDivPtr>(shared_library_.get_function_pointer("DAQmxSetAILowpassSwitchCapExtClkDiv"));
  function_pointers_.SetAILowpassSwitchCapExtClkFreq = reinterpret_cast<SetAILowpassSwitchCapExtClkFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAILowpassSwitchCapExtClkFreq"));
  function_pointers_.SetAILowpassSwitchCapOutClkDiv = reinterpret_cast<SetAILowpassSwitchCapOutClkDivPtr>(shared_library_.get_function_pointer("DAQmxSetAILowpassSwitchCapOutClkDiv"));
  function_pointers_.SetAIMax = reinterpret_cast<SetAIMaxPtr>(shared_library_.get_function_pointer("DAQmxSetAIMax"));
  function_pointers_.SetAIMemMapEnable = reinterpret_cast<SetAIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIMemMapEnable"));
  function_pointers_.SetAIMicrophoneSensitivity = reinterpret_cast<SetAIMicrophoneSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIMicrophoneSensitivity"));
  function_pointers_.SetAIMin = reinterpret_cast<SetAIMinPtr>(shared_library_.get_function_pointer("DAQmxSetAIMin"));
  function_pointers_.SetAIOpenChanDetectEnable = reinterpret_cast<SetAIOpenChanDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIOpenChanDetectEnable"));
  function_pointers_.SetAIOpenThrmcplDetectEnable = reinterpret_cast<SetAIOpenThrmcplDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIOpenThrmcplDetectEnable"));
  function_pointers_.SetAIOvercurrentDetectEnable = reinterpret_cast<SetAIOvercurrentDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIOvercurrentDetectEnable"));
  function_pointers_.SetAIPowerSupplyFaultDetectEnable = reinterpret_cast<SetAIPowerSupplyFaultDetectEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAIPowerSupplyFaultDetectEnable"));
  function_pointers_.SetAIPressureUnits = reinterpret_cast<SetAIPressureUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIPressureUnits"));
  function_pointers_.SetAIProbeAtten = reinterpret_cast<SetAIProbeAttenPtr>(shared_library_.get_function_pointer("DAQmxSetAIProbeAtten"));
  function_pointers_.SetAIRTDA = reinterpret_cast<SetAIRTDAPtr>(shared_library_.get_function_pointer("DAQmxSetAIRTDA"));
  function_pointers_.SetAIRTDB = reinterpret_cast<SetAIRTDBPtr>(shared_library_.get_function_pointer("DAQmxSetAIRTDB"));
  function_pointers_.SetAIRTDC = reinterpret_cast<SetAIRTDCPtr>(shared_library_.get_function_pointer("DAQmxSetAIRTDC"));
  function_pointers_.SetAIRTDR0 = reinterpret_cast<SetAIRTDR0Ptr>(shared_library_.get_function_pointer("DAQmxSetAIRTDR0"));
  function_pointers_.SetAIRTDType = reinterpret_cast<SetAIRTDTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIRTDType"));
  function_pointers_.SetAIRVDTSensitivity = reinterpret_cast<SetAIRVDTSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIRVDTSensitivity"));
  function_pointers_.SetAIRVDTSensitivityUnits = reinterpret_cast<SetAIRVDTSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIRVDTSensitivityUnits"));
  function_pointers_.SetAIRVDTUnits = reinterpret_cast<SetAIRVDTUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIRVDTUnits"));
  function_pointers_.SetAIRawDataCompressionType = reinterpret_cast<SetAIRawDataCompressionTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIRawDataCompressionType"));
  function_pointers_.SetAIRemoveFilterDelay = reinterpret_cast<SetAIRemoveFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxSetAIRemoveFilterDelay"));
  function_pointers_.SetAIResistanceCfg = reinterpret_cast<SetAIResistanceCfgPtr>(shared_library_.get_function_pointer("DAQmxSetAIResistanceCfg"));
  function_pointers_.SetAIResistanceUnits = reinterpret_cast<SetAIResistanceUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIResistanceUnits"));
  function_pointers_.SetAIRngHigh = reinterpret_cast<SetAIRngHighPtr>(shared_library_.get_function_pointer("DAQmxSetAIRngHigh"));
  function_pointers_.SetAIRngLow = reinterpret_cast<SetAIRngLowPtr>(shared_library_.get_function_pointer("DAQmxSetAIRngLow"));
  function_pointers_.SetAIRosetteStrainGageOrientation = reinterpret_cast<SetAIRosetteStrainGageOrientationPtr>(shared_library_.get_function_pointer("DAQmxSetAIRosetteStrainGageOrientation"));
  function_pointers_.SetAIRosetteStrainGageRosetteMeasType = reinterpret_cast<SetAIRosetteStrainGageRosetteMeasTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIRosetteStrainGageRosetteMeasType"));
  function_pointers_.SetAISampAndHoldEnable = reinterpret_cast<SetAISampAndHoldEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAISampAndHoldEnable"));
  function_pointers_.SetAISensorPowerCfg = reinterpret_cast<SetAISensorPowerCfgPtr>(shared_library_.get_function_pointer("DAQmxSetAISensorPowerCfg"));
  function_pointers_.SetAISensorPowerType = reinterpret_cast<SetAISensorPowerTypePtr>(shared_library_.get_function_pointer("DAQmxSetAISensorPowerType"));
  function_pointers_.SetAISensorPowerVoltage = reinterpret_cast<SetAISensorPowerVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetAISensorPowerVoltage"));
  function_pointers_.SetAISoundPressureMaxSoundPressureLvl = reinterpret_cast<SetAISoundPressureMaxSoundPressureLvlPtr>(shared_library_.get_function_pointer("DAQmxSetAISoundPressureMaxSoundPressureLvl"));
  function_pointers_.SetAISoundPressureUnits = reinterpret_cast<SetAISoundPressureUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAISoundPressureUnits"));
  function_pointers_.SetAISoundPressuredBRef = reinterpret_cast<SetAISoundPressuredBRefPtr>(shared_library_.get_function_pointer("DAQmxSetAISoundPressuredBRef"));
  function_pointers_.SetAIStrainGageCfg = reinterpret_cast<SetAIStrainGageCfgPtr>(shared_library_.get_function_pointer("DAQmxSetAIStrainGageCfg"));
  function_pointers_.SetAIStrainGageForceReadFromChan = reinterpret_cast<SetAIStrainGageForceReadFromChanPtr>(shared_library_.get_function_pointer("DAQmxSetAIStrainGageForceReadFromChan"));
  function_pointers_.SetAIStrainGageGageFactor = reinterpret_cast<SetAIStrainGageGageFactorPtr>(shared_library_.get_function_pointer("DAQmxSetAIStrainGageGageFactor"));
  function_pointers_.SetAIStrainGagePoissonRatio = reinterpret_cast<SetAIStrainGagePoissonRatioPtr>(shared_library_.get_function_pointer("DAQmxSetAIStrainGagePoissonRatio"));
  function_pointers_.SetAIStrainUnits = reinterpret_cast<SetAIStrainUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIStrainUnits"));
  function_pointers_.SetAITempUnits = reinterpret_cast<SetAITempUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAITempUnits"));
  function_pointers_.SetAITermCfg = reinterpret_cast<SetAITermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetAITermCfg"));
  function_pointers_.SetAIThrmcplCJCVal = reinterpret_cast<SetAIThrmcplCJCValPtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmcplCJCVal"));
  function_pointers_.SetAIThrmcplLeadOffsetVoltage = reinterpret_cast<SetAIThrmcplLeadOffsetVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmcplLeadOffsetVoltage"));
  function_pointers_.SetAIThrmcplScaleType = reinterpret_cast<SetAIThrmcplScaleTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmcplScaleType"));
  function_pointers_.SetAIThrmcplType = reinterpret_cast<SetAIThrmcplTypePtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmcplType"));
  function_pointers_.SetAIThrmstrA = reinterpret_cast<SetAIThrmstrAPtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmstrA"));
  function_pointers_.SetAIThrmstrB = reinterpret_cast<SetAIThrmstrBPtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmstrB"));
  function_pointers_.SetAIThrmstrC = reinterpret_cast<SetAIThrmstrCPtr>(shared_library_.get_function_pointer("DAQmxSetAIThrmstrC"));
  function_pointers_.SetAIThrmstrR1 = reinterpret_cast<SetAIThrmstrR1Ptr>(shared_library_.get_function_pointer("DAQmxSetAIThrmstrR1"));
  function_pointers_.SetAITorqueUnits = reinterpret_cast<SetAITorqueUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAITorqueUnits"));
  function_pointers_.SetAIUsbXferReqCount = reinterpret_cast<SetAIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxSetAIUsbXferReqCount"));
  function_pointers_.SetAIUsbXferReqSize = reinterpret_cast<SetAIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxSetAIUsbXferReqSize"));
  function_pointers_.SetAIVelocityIEPESensorSensitivity = reinterpret_cast<SetAIVelocityIEPESensorSensitivityPtr>(shared_library_.get_function_pointer("DAQmxSetAIVelocityIEPESensorSensitivity"));
  function_pointers_.SetAIVelocityIEPESensorSensitivityUnits = reinterpret_cast<SetAIVelocityIEPESensorSensitivityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIVelocityIEPESensorSensitivityUnits"));
  function_pointers_.SetAIVelocityIEPESensordBRef = reinterpret_cast<SetAIVelocityIEPESensordBRefPtr>(shared_library_.get_function_pointer("DAQmxSetAIVelocityIEPESensordBRef"));
  function_pointers_.SetAIVelocityUnits = reinterpret_cast<SetAIVelocityUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIVelocityUnits"));
  function_pointers_.SetAIVoltageACRMSUnits = reinterpret_cast<SetAIVoltageACRMSUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIVoltageACRMSUnits"));
  function_pointers_.SetAIVoltageUnits = reinterpret_cast<SetAIVoltageUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAIVoltageUnits"));
  function_pointers_.SetAIVoltagedBRef = reinterpret_cast<SetAIVoltagedBRefPtr>(shared_library_.get_function_pointer("DAQmxSetAIVoltagedBRef"));
  function_pointers_.SetAOCurrentUnits = reinterpret_cast<SetAOCurrentUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAOCurrentUnits"));
  function_pointers_.SetAOCustomScaleName = reinterpret_cast<SetAOCustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxSetAOCustomScaleName"));
  function_pointers_.SetAODACOffsetExtSrc = reinterpret_cast<SetAODACOffsetExtSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAODACOffsetExtSrc"));
  function_pointers_.SetAODACOffsetSrc = reinterpret_cast<SetAODACOffsetSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAODACOffsetSrc"));
  function_pointers_.SetAODACOffsetVal = reinterpret_cast<SetAODACOffsetValPtr>(shared_library_.get_function_pointer("DAQmxSetAODACOffsetVal"));
  function_pointers_.SetAODACRefAllowConnToGnd = reinterpret_cast<SetAODACRefAllowConnToGndPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRefAllowConnToGnd"));
  function_pointers_.SetAODACRefConnToGnd = reinterpret_cast<SetAODACRefConnToGndPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRefConnToGnd"));
  function_pointers_.SetAODACRefExtSrc = reinterpret_cast<SetAODACRefExtSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRefExtSrc"));
  function_pointers_.SetAODACRefSrc = reinterpret_cast<SetAODACRefSrcPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRefSrc"));
  function_pointers_.SetAODACRefVal = reinterpret_cast<SetAODACRefValPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRefVal"));
  function_pointers_.SetAODACRngHigh = reinterpret_cast<SetAODACRngHighPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRngHigh"));
  function_pointers_.SetAODACRngLow = reinterpret_cast<SetAODACRngLowPtr>(shared_library_.get_function_pointer("DAQmxSetAODACRngLow"));
  function_pointers_.SetAODataXferMech = reinterpret_cast<SetAODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxSetAODataXferMech"));
  function_pointers_.SetAODataXferReqCond = reinterpret_cast<SetAODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxSetAODataXferReqCond"));
  function_pointers_.SetAOEnhancedImageRejectionEnable = reinterpret_cast<SetAOEnhancedImageRejectionEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAOEnhancedImageRejectionEnable"));
  function_pointers_.SetAOFilterDelay = reinterpret_cast<SetAOFilterDelayPtr>(shared_library_.get_function_pointer("DAQmxSetAOFilterDelay"));
  function_pointers_.SetAOFilterDelayAdjustment = reinterpret_cast<SetAOFilterDelayAdjustmentPtr>(shared_library_.get_function_pointer("DAQmxSetAOFilterDelayAdjustment"));
  function_pointers_.SetAOFilterDelayUnits = reinterpret_cast<SetAOFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAOFilterDelayUnits"));
  function_pointers_.SetAOFuncGenAmplitude = reinterpret_cast<SetAOFuncGenAmplitudePtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenAmplitude"));
  function_pointers_.SetAOFuncGenFMDeviation = reinterpret_cast<SetAOFuncGenFMDeviationPtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenFMDeviation"));
  function_pointers_.SetAOFuncGenFreq = reinterpret_cast<SetAOFuncGenFreqPtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenFreq"));
  function_pointers_.SetAOFuncGenModulationType = reinterpret_cast<SetAOFuncGenModulationTypePtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenModulationType"));
  function_pointers_.SetAOFuncGenOffset = reinterpret_cast<SetAOFuncGenOffsetPtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenOffset"));
  function_pointers_.SetAOFuncGenSquareDutyCycle = reinterpret_cast<SetAOFuncGenSquareDutyCyclePtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenSquareDutyCycle"));
  function_pointers_.SetAOFuncGenType = reinterpret_cast<SetAOFuncGenTypePtr>(shared_library_.get_function_pointer("DAQmxSetAOFuncGenType"));
  function_pointers_.SetAOGain = reinterpret_cast<SetAOGainPtr>(shared_library_.get_function_pointer("DAQmxSetAOGain"));
  function_pointers_.SetAOIdleOutputBehavior = reinterpret_cast<SetAOIdleOutputBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetAOIdleOutputBehavior"));
  function_pointers_.SetAOLoadImpedance = reinterpret_cast<SetAOLoadImpedancePtr>(shared_library_.get_function_pointer("DAQmxSetAOLoadImpedance"));
  function_pointers_.SetAOMax = reinterpret_cast<SetAOMaxPtr>(shared_library_.get_function_pointer("DAQmxSetAOMax"));
  function_pointers_.SetAOMemMapEnable = reinterpret_cast<SetAOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAOMemMapEnable"));
  function_pointers_.SetAOMin = reinterpret_cast<SetAOMinPtr>(shared_library_.get_function_pointer("DAQmxSetAOMin"));
  function_pointers_.SetAOOutputImpedance = reinterpret_cast<SetAOOutputImpedancePtr>(shared_library_.get_function_pointer("DAQmxSetAOOutputImpedance"));
  function_pointers_.SetAOReglitchEnable = reinterpret_cast<SetAOReglitchEnablePtr>(shared_library_.get_function_pointer("DAQmxSetAOReglitchEnable"));
  function_pointers_.SetAOResolutionUnits = reinterpret_cast<SetAOResolutionUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAOResolutionUnits"));
  function_pointers_.SetAOTermCfg = reinterpret_cast<SetAOTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetAOTermCfg"));
  function_pointers_.SetAOUsbXferReqCount = reinterpret_cast<SetAOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxSetAOUsbXferReqCount"));
  function_pointers_.SetAOUsbXferReqSize = reinterpret_cast<SetAOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxSetAOUsbXferReqSize"));
  function_pointers_.SetAOUseOnlyOnBrdMem = reinterpret_cast<SetAOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxSetAOUseOnlyOnBrdMem"));
  function_pointers_.SetAOVoltageCurrentLimit = reinterpret_cast<SetAOVoltageCurrentLimitPtr>(shared_library_.get_function_pointer("DAQmxSetAOVoltageCurrentLimit"));
  function_pointers_.SetAOVoltageUnits = reinterpret_cast<SetAOVoltageUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetAOVoltageUnits"));
  function_pointers_.SetArmStartTrigTrigWhen = reinterpret_cast<SetArmStartTrigTrigWhenPtr>(shared_library_.get_function_pointer("DAQmxSetArmStartTrigTrigWhen"));
  function_pointers_.SetBufInputBufSize = reinterpret_cast<SetBufInputBufSizePtr>(shared_library_.get_function_pointer("DAQmxSetBufInputBufSize"));
  function_pointers_.SetBufOutputBufSize = reinterpret_cast<SetBufOutputBufSizePtr>(shared_library_.get_function_pointer("DAQmxSetBufOutputBufSize"));
  function_pointers_.SetBufOutputOnbrdBufSize = reinterpret_cast<SetBufOutputOnbrdBufSizePtr>(shared_library_.get_function_pointer("DAQmxSetBufOutputOnbrdBufSize"));
  function_pointers_.SetCIAngEncoderInitialAngle = reinterpret_cast<SetCIAngEncoderInitialAnglePtr>(shared_library_.get_function_pointer("DAQmxSetCIAngEncoderInitialAngle"));
  function_pointers_.SetCIAngEncoderPulsesPerRev = reinterpret_cast<SetCIAngEncoderPulsesPerRevPtr>(shared_library_.get_function_pointer("DAQmxSetCIAngEncoderPulsesPerRev"));
  function_pointers_.SetCIAngEncoderUnits = reinterpret_cast<SetCIAngEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIAngEncoderUnits"));
  function_pointers_.SetCICountEdgesActiveEdge = reinterpret_cast<SetCICountEdgesActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesActiveEdge"));
  function_pointers_.SetCICountEdgesCountDirDigFltrEnable = reinterpret_cast<SetCICountEdgesCountDirDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirDigFltrEnable"));
  function_pointers_.SetCICountEdgesCountDirDigFltrMinPulseWidth = reinterpret_cast<SetCICountEdgesCountDirDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth"));
  function_pointers_.SetCICountEdgesCountDirDigFltrTimebaseRate = reinterpret_cast<SetCICountEdgesCountDirDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate"));
  function_pointers_.SetCICountEdgesCountDirDigFltrTimebaseSrc = reinterpret_cast<SetCICountEdgesCountDirDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc"));
  function_pointers_.SetCICountEdgesCountDirDigSyncEnable = reinterpret_cast<SetCICountEdgesCountDirDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirDigSyncEnable"));
  function_pointers_.SetCICountEdgesCountDirHyst = reinterpret_cast<SetCICountEdgesCountDirHystPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirHyst"));
  function_pointers_.SetCICountEdgesCountDirLogicLvlBehavior = reinterpret_cast<SetCICountEdgesCountDirLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirLogicLvlBehavior"));
  function_pointers_.SetCICountEdgesCountDirTermCfg = reinterpret_cast<SetCICountEdgesCountDirTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirTermCfg"));
  function_pointers_.SetCICountEdgesCountDirThreshVoltage = reinterpret_cast<SetCICountEdgesCountDirThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountDirThreshVoltage"));
  function_pointers_.SetCICountEdgesCountResetActiveEdge = reinterpret_cast<SetCICountEdgesCountResetActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetActiveEdge"));
  function_pointers_.SetCICountEdgesCountResetDigFltrEnable = reinterpret_cast<SetCICountEdgesCountResetDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetDigFltrEnable"));
  function_pointers_.SetCICountEdgesCountResetDigFltrMinPulseWidth = reinterpret_cast<SetCICountEdgesCountResetDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth"));
  function_pointers_.SetCICountEdgesCountResetDigFltrTimebaseRate = reinterpret_cast<SetCICountEdgesCountResetDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate"));
  function_pointers_.SetCICountEdgesCountResetDigFltrTimebaseSrc = reinterpret_cast<SetCICountEdgesCountResetDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc"));
  function_pointers_.SetCICountEdgesCountResetDigSyncEnable = reinterpret_cast<SetCICountEdgesCountResetDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetDigSyncEnable"));
  function_pointers_.SetCICountEdgesCountResetEnable = reinterpret_cast<SetCICountEdgesCountResetEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetEnable"));
  function_pointers_.SetCICountEdgesCountResetHyst = reinterpret_cast<SetCICountEdgesCountResetHystPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetHyst"));
  function_pointers_.SetCICountEdgesCountResetLogicLvlBehavior = reinterpret_cast<SetCICountEdgesCountResetLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetLogicLvlBehavior"));
  function_pointers_.SetCICountEdgesCountResetResetCount = reinterpret_cast<SetCICountEdgesCountResetResetCountPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetResetCount"));
  function_pointers_.SetCICountEdgesCountResetTerm = reinterpret_cast<SetCICountEdgesCountResetTermPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetTerm"));
  function_pointers_.SetCICountEdgesCountResetTermCfg = reinterpret_cast<SetCICountEdgesCountResetTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetTermCfg"));
  function_pointers_.SetCICountEdgesCountResetThreshVoltage = reinterpret_cast<SetCICountEdgesCountResetThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesCountResetThreshVoltage"));
  function_pointers_.SetCICountEdgesDigFltrEnable = reinterpret_cast<SetCICountEdgesDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDigFltrEnable"));
  function_pointers_.SetCICountEdgesDigFltrMinPulseWidth = reinterpret_cast<SetCICountEdgesDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDigFltrMinPulseWidth"));
  function_pointers_.SetCICountEdgesDigFltrTimebaseRate = reinterpret_cast<SetCICountEdgesDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDigFltrTimebaseRate"));
  function_pointers_.SetCICountEdgesDigFltrTimebaseSrc = reinterpret_cast<SetCICountEdgesDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDigFltrTimebaseSrc"));
  function_pointers_.SetCICountEdgesDigSyncEnable = reinterpret_cast<SetCICountEdgesDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDigSyncEnable"));
  function_pointers_.SetCICountEdgesDir = reinterpret_cast<SetCICountEdgesDirPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDir"));
  function_pointers_.SetCICountEdgesDirTerm = reinterpret_cast<SetCICountEdgesDirTermPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesDirTerm"));
  function_pointers_.SetCICountEdgesGateDigFltrEnable = reinterpret_cast<SetCICountEdgesGateDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateDigFltrEnable"));
  function_pointers_.SetCICountEdgesGateDigFltrMinPulseWidth = reinterpret_cast<SetCICountEdgesGateDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateDigFltrMinPulseWidth"));
  function_pointers_.SetCICountEdgesGateDigFltrTimebaseRate = reinterpret_cast<SetCICountEdgesGateDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateDigFltrTimebaseRate"));
  function_pointers_.SetCICountEdgesGateDigFltrTimebaseSrc = reinterpret_cast<SetCICountEdgesGateDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateDigFltrTimebaseSrc"));
  function_pointers_.SetCICountEdgesGateEnable = reinterpret_cast<SetCICountEdgesGateEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateEnable"));
  function_pointers_.SetCICountEdgesGateHyst = reinterpret_cast<SetCICountEdgesGateHystPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateHyst"));
  function_pointers_.SetCICountEdgesGateLogicLvlBehavior = reinterpret_cast<SetCICountEdgesGateLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateLogicLvlBehavior"));
  function_pointers_.SetCICountEdgesGateTerm = reinterpret_cast<SetCICountEdgesGateTermPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateTerm"));
  function_pointers_.SetCICountEdgesGateTermCfg = reinterpret_cast<SetCICountEdgesGateTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateTermCfg"));
  function_pointers_.SetCICountEdgesGateThreshVoltage = reinterpret_cast<SetCICountEdgesGateThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateThreshVoltage"));
  function_pointers_.SetCICountEdgesGateWhen = reinterpret_cast<SetCICountEdgesGateWhenPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesGateWhen"));
  function_pointers_.SetCICountEdgesHyst = reinterpret_cast<SetCICountEdgesHystPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesHyst"));
  function_pointers_.SetCICountEdgesInitialCnt = reinterpret_cast<SetCICountEdgesInitialCntPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesInitialCnt"));
  function_pointers_.SetCICountEdgesLogicLvlBehavior = reinterpret_cast<SetCICountEdgesLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesLogicLvlBehavior"));
  function_pointers_.SetCICountEdgesTerm = reinterpret_cast<SetCICountEdgesTermPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesTerm"));
  function_pointers_.SetCICountEdgesTermCfg = reinterpret_cast<SetCICountEdgesTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesTermCfg"));
  function_pointers_.SetCICountEdgesThreshVoltage = reinterpret_cast<SetCICountEdgesThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCICountEdgesThreshVoltage"));
  function_pointers_.SetCICtrTimebaseActiveEdge = reinterpret_cast<SetCICtrTimebaseActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseActiveEdge"));
  function_pointers_.SetCICtrTimebaseDigFltrEnable = reinterpret_cast<SetCICtrTimebaseDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseDigFltrEnable"));
  function_pointers_.SetCICtrTimebaseDigFltrMinPulseWidth = reinterpret_cast<SetCICtrTimebaseDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseDigFltrMinPulseWidth"));
  function_pointers_.SetCICtrTimebaseDigFltrTimebaseRate = reinterpret_cast<SetCICtrTimebaseDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseDigFltrTimebaseRate"));
  function_pointers_.SetCICtrTimebaseDigFltrTimebaseSrc = reinterpret_cast<SetCICtrTimebaseDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseDigFltrTimebaseSrc"));
  function_pointers_.SetCICtrTimebaseDigSyncEnable = reinterpret_cast<SetCICtrTimebaseDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseDigSyncEnable"));
  function_pointers_.SetCICtrTimebaseMasterTimebaseDiv = reinterpret_cast<SetCICtrTimebaseMasterTimebaseDivPtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseMasterTimebaseDiv"));
  function_pointers_.SetCICtrTimebaseRate = reinterpret_cast<SetCICtrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseRate"));
  function_pointers_.SetCICtrTimebaseSrc = reinterpret_cast<SetCICtrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCICtrTimebaseSrc"));
  function_pointers_.SetCICustomScaleName = reinterpret_cast<SetCICustomScaleNamePtr>(shared_library_.get_function_pointer("DAQmxSetCICustomScaleName"));
  function_pointers_.SetCIDataXferMech = reinterpret_cast<SetCIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxSetCIDataXferMech"));
  function_pointers_.SetCIDataXferReqCond = reinterpret_cast<SetCIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxSetCIDataXferReqCond"));
  function_pointers_.SetCIDupCountPrevent = reinterpret_cast<SetCIDupCountPreventPtr>(shared_library_.get_function_pointer("DAQmxSetCIDupCountPrevent"));
  function_pointers_.SetCIDutyCycleDigFltrEnable = reinterpret_cast<SetCIDutyCycleDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleDigFltrEnable"));
  function_pointers_.SetCIDutyCycleDigFltrMinPulseWidth = reinterpret_cast<SetCIDutyCycleDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleDigFltrMinPulseWidth"));
  function_pointers_.SetCIDutyCycleDigFltrTimebaseRate = reinterpret_cast<SetCIDutyCycleDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleDigFltrTimebaseRate"));
  function_pointers_.SetCIDutyCycleDigFltrTimebaseSrc = reinterpret_cast<SetCIDutyCycleDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleDigFltrTimebaseSrc"));
  function_pointers_.SetCIDutyCycleLogicLvlBehavior = reinterpret_cast<SetCIDutyCycleLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleLogicLvlBehavior"));
  function_pointers_.SetCIDutyCycleStartingEdge = reinterpret_cast<SetCIDutyCycleStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleStartingEdge"));
  function_pointers_.SetCIDutyCycleTerm = reinterpret_cast<SetCIDutyCycleTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleTerm"));
  function_pointers_.SetCIDutyCycleTermCfg = reinterpret_cast<SetCIDutyCycleTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIDutyCycleTermCfg"));
  function_pointers_.SetCIEncoderAInputDigFltrEnable = reinterpret_cast<SetCIEncoderAInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputDigFltrEnable"));
  function_pointers_.SetCIEncoderAInputDigFltrMinPulseWidth = reinterpret_cast<SetCIEncoderAInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputDigFltrMinPulseWidth"));
  function_pointers_.SetCIEncoderAInputDigFltrTimebaseRate = reinterpret_cast<SetCIEncoderAInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputDigFltrTimebaseRate"));
  function_pointers_.SetCIEncoderAInputDigFltrTimebaseSrc = reinterpret_cast<SetCIEncoderAInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputDigFltrTimebaseSrc"));
  function_pointers_.SetCIEncoderAInputDigSyncEnable = reinterpret_cast<SetCIEncoderAInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputDigSyncEnable"));
  function_pointers_.SetCIEncoderAInputLogicLvlBehavior = reinterpret_cast<SetCIEncoderAInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputLogicLvlBehavior"));
  function_pointers_.SetCIEncoderAInputTerm = reinterpret_cast<SetCIEncoderAInputTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputTerm"));
  function_pointers_.SetCIEncoderAInputTermCfg = reinterpret_cast<SetCIEncoderAInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderAInputTermCfg"));
  function_pointers_.SetCIEncoderBInputDigFltrEnable = reinterpret_cast<SetCIEncoderBInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputDigFltrEnable"));
  function_pointers_.SetCIEncoderBInputDigFltrMinPulseWidth = reinterpret_cast<SetCIEncoderBInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputDigFltrMinPulseWidth"));
  function_pointers_.SetCIEncoderBInputDigFltrTimebaseRate = reinterpret_cast<SetCIEncoderBInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputDigFltrTimebaseRate"));
  function_pointers_.SetCIEncoderBInputDigFltrTimebaseSrc = reinterpret_cast<SetCIEncoderBInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputDigFltrTimebaseSrc"));
  function_pointers_.SetCIEncoderBInputDigSyncEnable = reinterpret_cast<SetCIEncoderBInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputDigSyncEnable"));
  function_pointers_.SetCIEncoderBInputLogicLvlBehavior = reinterpret_cast<SetCIEncoderBInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputLogicLvlBehavior"));
  function_pointers_.SetCIEncoderBInputTerm = reinterpret_cast<SetCIEncoderBInputTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputTerm"));
  function_pointers_.SetCIEncoderBInputTermCfg = reinterpret_cast<SetCIEncoderBInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderBInputTermCfg"));
  function_pointers_.SetCIEncoderDecodingType = reinterpret_cast<SetCIEncoderDecodingTypePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderDecodingType"));
  function_pointers_.SetCIEncoderZIndexEnable = reinterpret_cast<SetCIEncoderZIndexEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZIndexEnable"));
  function_pointers_.SetCIEncoderZIndexPhase = reinterpret_cast<SetCIEncoderZIndexPhasePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZIndexPhase"));
  function_pointers_.SetCIEncoderZIndexVal = reinterpret_cast<SetCIEncoderZIndexValPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZIndexVal"));
  function_pointers_.SetCIEncoderZInputDigFltrEnable = reinterpret_cast<SetCIEncoderZInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputDigFltrEnable"));
  function_pointers_.SetCIEncoderZInputDigFltrMinPulseWidth = reinterpret_cast<SetCIEncoderZInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputDigFltrMinPulseWidth"));
  function_pointers_.SetCIEncoderZInputDigFltrTimebaseRate = reinterpret_cast<SetCIEncoderZInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputDigFltrTimebaseRate"));
  function_pointers_.SetCIEncoderZInputDigFltrTimebaseSrc = reinterpret_cast<SetCIEncoderZInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputDigFltrTimebaseSrc"));
  function_pointers_.SetCIEncoderZInputDigSyncEnable = reinterpret_cast<SetCIEncoderZInputDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputDigSyncEnable"));
  function_pointers_.SetCIEncoderZInputLogicLvlBehavior = reinterpret_cast<SetCIEncoderZInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputLogicLvlBehavior"));
  function_pointers_.SetCIEncoderZInputTerm = reinterpret_cast<SetCIEncoderZInputTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputTerm"));
  function_pointers_.SetCIEncoderZInputTermCfg = reinterpret_cast<SetCIEncoderZInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIEncoderZInputTermCfg"));
  function_pointers_.SetCIFilterDelayUnits = reinterpret_cast<SetCIFilterDelayUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIFilterDelayUnits"));
  function_pointers_.SetCIFilterEnable = reinterpret_cast<SetCIFilterEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIFilterEnable"));
  function_pointers_.SetCIFilterFreq = reinterpret_cast<SetCIFilterFreqPtr>(shared_library_.get_function_pointer("DAQmxSetCIFilterFreq"));
  function_pointers_.SetCIFilterOrder = reinterpret_cast<SetCIFilterOrderPtr>(shared_library_.get_function_pointer("DAQmxSetCIFilterOrder"));
  function_pointers_.SetCIFilterResponse = reinterpret_cast<SetCIFilterResponsePtr>(shared_library_.get_function_pointer("DAQmxSetCIFilterResponse"));
  function_pointers_.SetCIFreqDigFltrEnable = reinterpret_cast<SetCIFreqDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqDigFltrEnable"));
  function_pointers_.SetCIFreqDigFltrMinPulseWidth = reinterpret_cast<SetCIFreqDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqDigFltrMinPulseWidth"));
  function_pointers_.SetCIFreqDigFltrTimebaseRate = reinterpret_cast<SetCIFreqDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqDigFltrTimebaseRate"));
  function_pointers_.SetCIFreqDigFltrTimebaseSrc = reinterpret_cast<SetCIFreqDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqDigFltrTimebaseSrc"));
  function_pointers_.SetCIFreqDigSyncEnable = reinterpret_cast<SetCIFreqDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqDigSyncEnable"));
  function_pointers_.SetCIFreqDiv = reinterpret_cast<SetCIFreqDivPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqDiv"));
  function_pointers_.SetCIFreqEnableAveraging = reinterpret_cast<SetCIFreqEnableAveragingPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqEnableAveraging"));
  function_pointers_.SetCIFreqHyst = reinterpret_cast<SetCIFreqHystPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqHyst"));
  function_pointers_.SetCIFreqLogicLvlBehavior = reinterpret_cast<SetCIFreqLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqLogicLvlBehavior"));
  function_pointers_.SetCIFreqMeasMeth = reinterpret_cast<SetCIFreqMeasMethPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqMeasMeth"));
  function_pointers_.SetCIFreqMeasTime = reinterpret_cast<SetCIFreqMeasTimePtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqMeasTime"));
  function_pointers_.SetCIFreqStartingEdge = reinterpret_cast<SetCIFreqStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqStartingEdge"));
  function_pointers_.SetCIFreqTerm = reinterpret_cast<SetCIFreqTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqTerm"));
  function_pointers_.SetCIFreqTermCfg = reinterpret_cast<SetCIFreqTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqTermCfg"));
  function_pointers_.SetCIFreqThreshVoltage = reinterpret_cast<SetCIFreqThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqThreshVoltage"));
  function_pointers_.SetCIFreqUnits = reinterpret_cast<SetCIFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIFreqUnits"));
  function_pointers_.SetCIGPSSyncMethod = reinterpret_cast<SetCIGPSSyncMethodPtr>(shared_library_.get_function_pointer("DAQmxSetCIGPSSyncMethod"));
  function_pointers_.SetCIGPSSyncSrc = reinterpret_cast<SetCIGPSSyncSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIGPSSyncSrc"));
  function_pointers_.SetCILinEncoderDistPerPulse = reinterpret_cast<SetCILinEncoderDistPerPulsePtr>(shared_library_.get_function_pointer("DAQmxSetCILinEncoderDistPerPulse"));
  function_pointers_.SetCILinEncoderInitialPos = reinterpret_cast<SetCILinEncoderInitialPosPtr>(shared_library_.get_function_pointer("DAQmxSetCILinEncoderInitialPos"));
  function_pointers_.SetCILinEncoderUnits = reinterpret_cast<SetCILinEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCILinEncoderUnits"));
  function_pointers_.SetCIMax = reinterpret_cast<SetCIMaxPtr>(shared_library_.get_function_pointer("DAQmxSetCIMax"));
  function_pointers_.SetCIMaxMeasPeriod = reinterpret_cast<SetCIMaxMeasPeriodPtr>(shared_library_.get_function_pointer("DAQmxSetCIMaxMeasPeriod"));
  function_pointers_.SetCIMemMapEnable = reinterpret_cast<SetCIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIMemMapEnable"));
  function_pointers_.SetCIMin = reinterpret_cast<SetCIMinPtr>(shared_library_.get_function_pointer("DAQmxSetCIMin"));
  function_pointers_.SetCIPeriodDigFltrEnable = reinterpret_cast<SetCIPeriodDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodDigFltrEnable"));
  function_pointers_.SetCIPeriodDigFltrMinPulseWidth = reinterpret_cast<SetCIPeriodDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodDigFltrMinPulseWidth"));
  function_pointers_.SetCIPeriodDigFltrTimebaseRate = reinterpret_cast<SetCIPeriodDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodDigFltrTimebaseRate"));
  function_pointers_.SetCIPeriodDigFltrTimebaseSrc = reinterpret_cast<SetCIPeriodDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodDigFltrTimebaseSrc"));
  function_pointers_.SetCIPeriodDigSyncEnable = reinterpret_cast<SetCIPeriodDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodDigSyncEnable"));
  function_pointers_.SetCIPeriodDiv = reinterpret_cast<SetCIPeriodDivPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodDiv"));
  function_pointers_.SetCIPeriodEnableAveraging = reinterpret_cast<SetCIPeriodEnableAveragingPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodEnableAveraging"));
  function_pointers_.SetCIPeriodHyst = reinterpret_cast<SetCIPeriodHystPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodHyst"));
  function_pointers_.SetCIPeriodLogicLvlBehavior = reinterpret_cast<SetCIPeriodLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodLogicLvlBehavior"));
  function_pointers_.SetCIPeriodMeasMeth = reinterpret_cast<SetCIPeriodMeasMethPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodMeasMeth"));
  function_pointers_.SetCIPeriodMeasTime = reinterpret_cast<SetCIPeriodMeasTimePtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodMeasTime"));
  function_pointers_.SetCIPeriodStartingEdge = reinterpret_cast<SetCIPeriodStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodStartingEdge"));
  function_pointers_.SetCIPeriodTerm = reinterpret_cast<SetCIPeriodTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodTerm"));
  function_pointers_.SetCIPeriodTermCfg = reinterpret_cast<SetCIPeriodTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodTermCfg"));
  function_pointers_.SetCIPeriodThreshVoltage = reinterpret_cast<SetCIPeriodThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodThreshVoltage"));
  function_pointers_.SetCIPeriodUnits = reinterpret_cast<SetCIPeriodUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIPeriodUnits"));
  function_pointers_.SetCIPrescaler = reinterpret_cast<SetCIPrescalerPtr>(shared_library_.get_function_pointer("DAQmxSetCIPrescaler"));
  function_pointers_.SetCIPulseFreqDigFltrEnable = reinterpret_cast<SetCIPulseFreqDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqDigFltrEnable"));
  function_pointers_.SetCIPulseFreqDigFltrMinPulseWidth = reinterpret_cast<SetCIPulseFreqDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqDigFltrMinPulseWidth"));
  function_pointers_.SetCIPulseFreqDigFltrTimebaseRate = reinterpret_cast<SetCIPulseFreqDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqDigFltrTimebaseRate"));
  function_pointers_.SetCIPulseFreqDigFltrTimebaseSrc = reinterpret_cast<SetCIPulseFreqDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqDigFltrTimebaseSrc"));
  function_pointers_.SetCIPulseFreqDigSyncEnable = reinterpret_cast<SetCIPulseFreqDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqDigSyncEnable"));
  function_pointers_.SetCIPulseFreqLogicLvlBehavior = reinterpret_cast<SetCIPulseFreqLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqLogicLvlBehavior"));
  function_pointers_.SetCIPulseFreqStartEdge = reinterpret_cast<SetCIPulseFreqStartEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqStartEdge"));
  function_pointers_.SetCIPulseFreqTerm = reinterpret_cast<SetCIPulseFreqTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqTerm"));
  function_pointers_.SetCIPulseFreqTermCfg = reinterpret_cast<SetCIPulseFreqTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqTermCfg"));
  function_pointers_.SetCIPulseFreqUnits = reinterpret_cast<SetCIPulseFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseFreqUnits"));
  function_pointers_.SetCIPulseTicksDigFltrEnable = reinterpret_cast<SetCIPulseTicksDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksDigFltrEnable"));
  function_pointers_.SetCIPulseTicksDigFltrMinPulseWidth = reinterpret_cast<SetCIPulseTicksDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksDigFltrMinPulseWidth"));
  function_pointers_.SetCIPulseTicksDigFltrTimebaseRate = reinterpret_cast<SetCIPulseTicksDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksDigFltrTimebaseRate"));
  function_pointers_.SetCIPulseTicksDigFltrTimebaseSrc = reinterpret_cast<SetCIPulseTicksDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksDigFltrTimebaseSrc"));
  function_pointers_.SetCIPulseTicksDigSyncEnable = reinterpret_cast<SetCIPulseTicksDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksDigSyncEnable"));
  function_pointers_.SetCIPulseTicksLogicLvlBehavior = reinterpret_cast<SetCIPulseTicksLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksLogicLvlBehavior"));
  function_pointers_.SetCIPulseTicksStartEdge = reinterpret_cast<SetCIPulseTicksStartEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksStartEdge"));
  function_pointers_.SetCIPulseTicksTerm = reinterpret_cast<SetCIPulseTicksTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksTerm"));
  function_pointers_.SetCIPulseTicksTermCfg = reinterpret_cast<SetCIPulseTicksTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTicksTermCfg"));
  function_pointers_.SetCIPulseTimeDigFltrEnable = reinterpret_cast<SetCIPulseTimeDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeDigFltrEnable"));
  function_pointers_.SetCIPulseTimeDigFltrMinPulseWidth = reinterpret_cast<SetCIPulseTimeDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeDigFltrMinPulseWidth"));
  function_pointers_.SetCIPulseTimeDigFltrTimebaseRate = reinterpret_cast<SetCIPulseTimeDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeDigFltrTimebaseRate"));
  function_pointers_.SetCIPulseTimeDigFltrTimebaseSrc = reinterpret_cast<SetCIPulseTimeDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeDigFltrTimebaseSrc"));
  function_pointers_.SetCIPulseTimeDigSyncEnable = reinterpret_cast<SetCIPulseTimeDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeDigSyncEnable"));
  function_pointers_.SetCIPulseTimeLogicLvlBehavior = reinterpret_cast<SetCIPulseTimeLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeLogicLvlBehavior"));
  function_pointers_.SetCIPulseTimeStartEdge = reinterpret_cast<SetCIPulseTimeStartEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeStartEdge"));
  function_pointers_.SetCIPulseTimeTerm = reinterpret_cast<SetCIPulseTimeTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeTerm"));
  function_pointers_.SetCIPulseTimeTermCfg = reinterpret_cast<SetCIPulseTimeTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeTermCfg"));
  function_pointers_.SetCIPulseTimeUnits = reinterpret_cast<SetCIPulseTimeUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseTimeUnits"));
  function_pointers_.SetCIPulseWidthDigFltrEnable = reinterpret_cast<SetCIPulseWidthDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthDigFltrEnable"));
  function_pointers_.SetCIPulseWidthDigFltrMinPulseWidth = reinterpret_cast<SetCIPulseWidthDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthDigFltrMinPulseWidth"));
  function_pointers_.SetCIPulseWidthDigFltrTimebaseRate = reinterpret_cast<SetCIPulseWidthDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthDigFltrTimebaseRate"));
  function_pointers_.SetCIPulseWidthDigFltrTimebaseSrc = reinterpret_cast<SetCIPulseWidthDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthDigFltrTimebaseSrc"));
  function_pointers_.SetCIPulseWidthDigSyncEnable = reinterpret_cast<SetCIPulseWidthDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthDigSyncEnable"));
  function_pointers_.SetCIPulseWidthLogicLvlBehavior = reinterpret_cast<SetCIPulseWidthLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthLogicLvlBehavior"));
  function_pointers_.SetCIPulseWidthStartingEdge = reinterpret_cast<SetCIPulseWidthStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthStartingEdge"));
  function_pointers_.SetCIPulseWidthTerm = reinterpret_cast<SetCIPulseWidthTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthTerm"));
  function_pointers_.SetCIPulseWidthTermCfg = reinterpret_cast<SetCIPulseWidthTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthTermCfg"));
  function_pointers_.SetCIPulseWidthUnits = reinterpret_cast<SetCIPulseWidthUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIPulseWidthUnits"));
  function_pointers_.SetCISampClkOverrunBehavior = reinterpret_cast<SetCISampClkOverrunBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCISampClkOverrunBehavior"));
  function_pointers_.SetCISampClkOverrunSentinelVal = reinterpret_cast<SetCISampClkOverrunSentinelValPtr>(shared_library_.get_function_pointer("DAQmxSetCISampClkOverrunSentinelVal"));
  function_pointers_.SetCISemiPeriodDigFltrEnable = reinterpret_cast<SetCISemiPeriodDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodDigFltrEnable"));
  function_pointers_.SetCISemiPeriodDigFltrMinPulseWidth = reinterpret_cast<SetCISemiPeriodDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodDigFltrMinPulseWidth"));
  function_pointers_.SetCISemiPeriodDigFltrTimebaseRate = reinterpret_cast<SetCISemiPeriodDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodDigFltrTimebaseRate"));
  function_pointers_.SetCISemiPeriodDigFltrTimebaseSrc = reinterpret_cast<SetCISemiPeriodDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodDigFltrTimebaseSrc"));
  function_pointers_.SetCISemiPeriodDigSyncEnable = reinterpret_cast<SetCISemiPeriodDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodDigSyncEnable"));
  function_pointers_.SetCISemiPeriodLogicLvlBehavior = reinterpret_cast<SetCISemiPeriodLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodLogicLvlBehavior"));
  function_pointers_.SetCISemiPeriodStartingEdge = reinterpret_cast<SetCISemiPeriodStartingEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodStartingEdge"));
  function_pointers_.SetCISemiPeriodTerm = reinterpret_cast<SetCISemiPeriodTermPtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodTerm"));
  function_pointers_.SetCISemiPeriodTermCfg = reinterpret_cast<SetCISemiPeriodTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodTermCfg"));
  function_pointers_.SetCISemiPeriodUnits = reinterpret_cast<SetCISemiPeriodUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCISemiPeriodUnits"));
  function_pointers_.SetCIThreshVoltage = reinterpret_cast<SetCIThreshVoltagePtr>(shared_library_.get_function_pointer("DAQmxSetCIThreshVoltage"));
  function_pointers_.SetCITimestampInitialSeconds = reinterpret_cast<SetCITimestampInitialSecondsPtr>(shared_library_.get_function_pointer("DAQmxSetCITimestampInitialSeconds"));
  function_pointers_.SetCITimestampUnits = reinterpret_cast<SetCITimestampUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCITimestampUnits"));
  function_pointers_.SetCITwoEdgeSepFirstDigFltrEnable = reinterpret_cast<SetCITwoEdgeSepFirstDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstDigFltrEnable"));
  function_pointers_.SetCITwoEdgeSepFirstDigFltrMinPulseWidth = reinterpret_cast<SetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth"));
  function_pointers_.SetCITwoEdgeSepFirstDigFltrTimebaseRate = reinterpret_cast<SetCITwoEdgeSepFirstDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate"));
  function_pointers_.SetCITwoEdgeSepFirstDigFltrTimebaseSrc = reinterpret_cast<SetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc"));
  function_pointers_.SetCITwoEdgeSepFirstDigSyncEnable = reinterpret_cast<SetCITwoEdgeSepFirstDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstDigSyncEnable"));
  function_pointers_.SetCITwoEdgeSepFirstEdge = reinterpret_cast<SetCITwoEdgeSepFirstEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstEdge"));
  function_pointers_.SetCITwoEdgeSepFirstLogicLvlBehavior = reinterpret_cast<SetCITwoEdgeSepFirstLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior"));
  function_pointers_.SetCITwoEdgeSepFirstTerm = reinterpret_cast<SetCITwoEdgeSepFirstTermPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstTerm"));
  function_pointers_.SetCITwoEdgeSepFirstTermCfg = reinterpret_cast<SetCITwoEdgeSepFirstTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepFirstTermCfg"));
  function_pointers_.SetCITwoEdgeSepSecondDigFltrEnable = reinterpret_cast<SetCITwoEdgeSepSecondDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondDigFltrEnable"));
  function_pointers_.SetCITwoEdgeSepSecondDigFltrMinPulseWidth = reinterpret_cast<SetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth"));
  function_pointers_.SetCITwoEdgeSepSecondDigFltrTimebaseRate = reinterpret_cast<SetCITwoEdgeSepSecondDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate"));
  function_pointers_.SetCITwoEdgeSepSecondDigFltrTimebaseSrc = reinterpret_cast<SetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc"));
  function_pointers_.SetCITwoEdgeSepSecondDigSyncEnable = reinterpret_cast<SetCITwoEdgeSepSecondDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondDigSyncEnable"));
  function_pointers_.SetCITwoEdgeSepSecondEdge = reinterpret_cast<SetCITwoEdgeSepSecondEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondEdge"));
  function_pointers_.SetCITwoEdgeSepSecondLogicLvlBehavior = reinterpret_cast<SetCITwoEdgeSepSecondLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior"));
  function_pointers_.SetCITwoEdgeSepSecondTerm = reinterpret_cast<SetCITwoEdgeSepSecondTermPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondTerm"));
  function_pointers_.SetCITwoEdgeSepSecondTermCfg = reinterpret_cast<SetCITwoEdgeSepSecondTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepSecondTermCfg"));
  function_pointers_.SetCITwoEdgeSepUnits = reinterpret_cast<SetCITwoEdgeSepUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCITwoEdgeSepUnits"));
  function_pointers_.SetCIUsbXferReqCount = reinterpret_cast<SetCIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxSetCIUsbXferReqCount"));
  function_pointers_.SetCIUsbXferReqSize = reinterpret_cast<SetCIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxSetCIUsbXferReqSize"));
  function_pointers_.SetCIVelocityAngEncoderPulsesPerRev = reinterpret_cast<SetCIVelocityAngEncoderPulsesPerRevPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityAngEncoderPulsesPerRev"));
  function_pointers_.SetCIVelocityAngEncoderUnits = reinterpret_cast<SetCIVelocityAngEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityAngEncoderUnits"));
  function_pointers_.SetCIVelocityDiv = reinterpret_cast<SetCIVelocityDivPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityDiv"));
  function_pointers_.SetCIVelocityEncoderAInputDigFltrEnable = reinterpret_cast<SetCIVelocityEncoderAInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputDigFltrEnable"));
  function_pointers_.SetCIVelocityEncoderAInputDigFltrMinPulseWidth = reinterpret_cast<SetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth"));
  function_pointers_.SetCIVelocityEncoderAInputDigFltrTimebaseRate = reinterpret_cast<SetCIVelocityEncoderAInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate"));
  function_pointers_.SetCIVelocityEncoderAInputDigFltrTimebaseSrc = reinterpret_cast<SetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc"));
  function_pointers_.SetCIVelocityEncoderAInputLogicLvlBehavior = reinterpret_cast<SetCIVelocityEncoderAInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior"));
  function_pointers_.SetCIVelocityEncoderAInputTerm = reinterpret_cast<SetCIVelocityEncoderAInputTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputTerm"));
  function_pointers_.SetCIVelocityEncoderAInputTermCfg = reinterpret_cast<SetCIVelocityEncoderAInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderAInputTermCfg"));
  function_pointers_.SetCIVelocityEncoderBInputDigFltrEnable = reinterpret_cast<SetCIVelocityEncoderBInputDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputDigFltrEnable"));
  function_pointers_.SetCIVelocityEncoderBInputDigFltrMinPulseWidth = reinterpret_cast<SetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth"));
  function_pointers_.SetCIVelocityEncoderBInputDigFltrTimebaseRate = reinterpret_cast<SetCIVelocityEncoderBInputDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate"));
  function_pointers_.SetCIVelocityEncoderBInputDigFltrTimebaseSrc = reinterpret_cast<SetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc"));
  function_pointers_.SetCIVelocityEncoderBInputLogicLvlBehavior = reinterpret_cast<SetCIVelocityEncoderBInputLogicLvlBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior"));
  function_pointers_.SetCIVelocityEncoderBInputTerm = reinterpret_cast<SetCIVelocityEncoderBInputTermPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputTerm"));
  function_pointers_.SetCIVelocityEncoderBInputTermCfg = reinterpret_cast<SetCIVelocityEncoderBInputTermCfgPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderBInputTermCfg"));
  function_pointers_.SetCIVelocityEncoderDecodingType = reinterpret_cast<SetCIVelocityEncoderDecodingTypePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityEncoderDecodingType"));
  function_pointers_.SetCIVelocityLinEncoderDistPerPulse = reinterpret_cast<SetCIVelocityLinEncoderDistPerPulsePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityLinEncoderDistPerPulse"));
  function_pointers_.SetCIVelocityLinEncoderUnits = reinterpret_cast<SetCIVelocityLinEncoderUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityLinEncoderUnits"));
  function_pointers_.SetCIVelocityMeasTime = reinterpret_cast<SetCIVelocityMeasTimePtr>(shared_library_.get_function_pointer("DAQmxSetCIVelocityMeasTime"));
  function_pointers_.SetCOAutoIncrCnt = reinterpret_cast<SetCOAutoIncrCntPtr>(shared_library_.get_function_pointer("DAQmxSetCOAutoIncrCnt"));
  function_pointers_.SetCOConstrainedGenMode = reinterpret_cast<SetCOConstrainedGenModePtr>(shared_library_.get_function_pointer("DAQmxSetCOConstrainedGenMode"));
  function_pointers_.SetCOCtrTimebaseActiveEdge = reinterpret_cast<SetCOCtrTimebaseActiveEdgePtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseActiveEdge"));
  function_pointers_.SetCOCtrTimebaseDigFltrEnable = reinterpret_cast<SetCOCtrTimebaseDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseDigFltrEnable"));
  function_pointers_.SetCOCtrTimebaseDigFltrMinPulseWidth = reinterpret_cast<SetCOCtrTimebaseDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth"));
  function_pointers_.SetCOCtrTimebaseDigFltrTimebaseRate = reinterpret_cast<SetCOCtrTimebaseDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseDigFltrTimebaseRate"));
  function_pointers_.SetCOCtrTimebaseDigFltrTimebaseSrc = reinterpret_cast<SetCOCtrTimebaseDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc"));
  function_pointers_.SetCOCtrTimebaseDigSyncEnable = reinterpret_cast<SetCOCtrTimebaseDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseDigSyncEnable"));
  function_pointers_.SetCOCtrTimebaseMasterTimebaseDiv = reinterpret_cast<SetCOCtrTimebaseMasterTimebaseDivPtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseMasterTimebaseDiv"));
  function_pointers_.SetCOCtrTimebaseRate = reinterpret_cast<SetCOCtrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseRate"));
  function_pointers_.SetCOCtrTimebaseSrc = reinterpret_cast<SetCOCtrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetCOCtrTimebaseSrc"));
  function_pointers_.SetCODataXferMech = reinterpret_cast<SetCODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxSetCODataXferMech"));
  function_pointers_.SetCODataXferReqCond = reinterpret_cast<SetCODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxSetCODataXferReqCond"));
  function_pointers_.SetCOEnableInitialDelayOnRetrigger = reinterpret_cast<SetCOEnableInitialDelayOnRetriggerPtr>(shared_library_.get_function_pointer("DAQmxSetCOEnableInitialDelayOnRetrigger"));
  function_pointers_.SetCOMemMapEnable = reinterpret_cast<SetCOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxSetCOMemMapEnable"));
  function_pointers_.SetCOPrescaler = reinterpret_cast<SetCOPrescalerPtr>(shared_library_.get_function_pointer("DAQmxSetCOPrescaler"));
  function_pointers_.SetCOPulseDutyCyc = reinterpret_cast<SetCOPulseDutyCycPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseDutyCyc"));
  function_pointers_.SetCOPulseFreq = reinterpret_cast<SetCOPulseFreqPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseFreq"));
  function_pointers_.SetCOPulseFreqInitialDelay = reinterpret_cast<SetCOPulseFreqInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseFreqInitialDelay"));
  function_pointers_.SetCOPulseFreqUnits = reinterpret_cast<SetCOPulseFreqUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseFreqUnits"));
  function_pointers_.SetCOPulseHighTicks = reinterpret_cast<SetCOPulseHighTicksPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseHighTicks"));
  function_pointers_.SetCOPulseHighTime = reinterpret_cast<SetCOPulseHighTimePtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseHighTime"));
  function_pointers_.SetCOPulseIdleState = reinterpret_cast<SetCOPulseIdleStatePtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseIdleState"));
  function_pointers_.SetCOPulseLowTicks = reinterpret_cast<SetCOPulseLowTicksPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseLowTicks"));
  function_pointers_.SetCOPulseLowTime = reinterpret_cast<SetCOPulseLowTimePtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseLowTime"));
  function_pointers_.SetCOPulseTerm = reinterpret_cast<SetCOPulseTermPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseTerm"));
  function_pointers_.SetCOPulseTicksInitialDelay = reinterpret_cast<SetCOPulseTicksInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseTicksInitialDelay"));
  function_pointers_.SetCOPulseTimeInitialDelay = reinterpret_cast<SetCOPulseTimeInitialDelayPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseTimeInitialDelay"));
  function_pointers_.SetCOPulseTimeUnits = reinterpret_cast<SetCOPulseTimeUnitsPtr>(shared_library_.get_function_pointer("DAQmxSetCOPulseTimeUnits"));
  function_pointers_.SetCOUsbXferReqCount = reinterpret_cast<SetCOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxSetCOUsbXferReqCount"));
  function_pointers_.SetCOUsbXferReqSize = reinterpret_cast<SetCOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxSetCOUsbXferReqSize"));
  function_pointers_.SetCOUseOnlyOnBrdMem = reinterpret_cast<SetCOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxSetCOUseOnlyOnBrdMem"));
  function_pointers_.SetCalAccConnectionCount = reinterpret_cast<SetCalAccConnectionCountPtr>(shared_library_.get_function_pointer("DAQmxSetCalAccConnectionCount"));
  function_pointers_.SetCalUserDefinedInfo = reinterpret_cast<SetCalUserDefinedInfoPtr>(shared_library_.get_function_pointer("DAQmxSetCalUserDefinedInfo"));
  function_pointers_.SetChanDescr = reinterpret_cast<SetChanDescrPtr>(shared_library_.get_function_pointer("DAQmxSetChanDescr"));
  function_pointers_.SetChanSyncUnlockBehavior = reinterpret_cast<SetChanSyncUnlockBehaviorPtr>(shared_library_.get_function_pointer("DAQmxSetChanSyncUnlockBehavior"));
  function_pointers_.SetDIAcquireOn = reinterpret_cast<SetDIAcquireOnPtr>(shared_library_.get_function_pointer("DAQmxSetDIAcquireOn"));
  function_pointers_.SetDIDataXferMech = reinterpret_cast<SetDIDataXferMechPtr>(shared_library_.get_function_pointer("DAQmxSetDIDataXferMech"));
  function_pointers_.SetDIDataXferReqCond = reinterpret_cast<SetDIDataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxSetDIDataXferReqCond"));
  function_pointers_.SetDIDigFltrEnable = reinterpret_cast<SetDIDigFltrEnablePtr>(shared_library_.get_function_pointer("DAQmxSetDIDigFltrEnable"));
  function_pointers_.SetDIDigFltrEnableBusMode = reinterpret_cast<SetDIDigFltrEnableBusModePtr>(shared_library_.get_function_pointer("DAQmxSetDIDigFltrEnableBusMode"));
  function_pointers_.SetDIDigFltrMinPulseWidth = reinterpret_cast<SetDIDigFltrMinPulseWidthPtr>(shared_library_.get_function_pointer("DAQmxSetDIDigFltrMinPulseWidth"));
  function_pointers_.SetDIDigFltrTimebaseRate = reinterpret_cast<SetDIDigFltrTimebaseRatePtr>(shared_library_.get_function_pointer("DAQmxSetDIDigFltrTimebaseRate"));
  function_pointers_.SetDIDigFltrTimebaseSrc = reinterpret_cast<SetDIDigFltrTimebaseSrcPtr>(shared_library_.get_function_pointer("DAQmxSetDIDigFltrTimebaseSrc"));
  function_pointers_.SetDIDigSyncEnable = reinterpret_cast<SetDIDigSyncEnablePtr>(shared_library_.get_function_pointer("DAQmxSetDIDigSyncEnable"));
  function_pointers_.SetDIInvertLines = reinterpret_cast<SetDIInvertLinesPtr>(shared_library_.get_function_pointer("DAQmxSetDIInvertLines"));
  function_pointers_.SetDILogicFamily = reinterpret_cast<SetDILogicFamilyPtr>(shared_library_.get_function_pointer("DAQmxSetDILogicFamily"));
  function_pointers_.SetDIMemMapEnable = reinterpret_cast<SetDIMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxSetDIMemMapEnable"));
  function_pointers_.SetDITristate = reinterpret_cast<SetDITristatePtr>(shared_library_.get_function_pointer("DAQmxSetDITristate"));
  function_pointers_.SetDIUsbXferReqCount = reinterpret_cast<SetDIUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxSetDIUsbXferReqCount"));
  function_pointers_.SetDIUsbXferReqSize = reinterpret_cast<SetDIUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxSetDIUsbXferReqSize"));
  function_pointers_.SetDODataXferMech = reinterpret_cast<SetDODataXferMechPtr>(shared_library_.get_function_pointer("DAQmxSetDODataXferMech"));
  function_pointers_.SetDODataXferReqCond = reinterpret_cast<SetDODataXferReqCondPtr>(shared_library_.get_function_pointer("DAQmxSetDODataXferReqCond"));
  function_pointers_.SetDOGenerateOn = reinterpret_cast<SetDOGenerateOnPtr>(shared_library_.get_function_pointer("DAQmxSetDOGenerateOn"));
  function_pointers_.SetDOInvertLines = reinterpret_cast<SetDOInvertLinesPtr>(shared_library_.get_function_pointer("DAQmxSetDOInvertLines"));
  function_pointers_.SetDOLineStatesDoneState = reinterpret_cast<SetDOLineStatesDoneStatePtr>(shared_library_.get_function_pointer("DAQmxSetDOLineStatesDoneState"));
  function_pointers_.SetDOLineStatesPausedState = reinterpret_cast<SetDOLineStatesPausedStatePtr>(shared_library_.get_function_pointer("DAQmxSetDOLineStatesPausedState"));
  function_pointers_.SetDOLineStatesStartState = reinterpret_cast<SetDOLineStatesStartStatePtr>(shared_library_.get_function_pointer("DAQmxSetDOLineStatesStartState"));
  function_pointers_.SetDOLogicFamily = reinterpret_cast<SetDOLogicFamilyPtr>(shared_library_.get_function_pointer("DAQmxSetDOLogicFamily"));
  function_pointers_.SetDOMemMapEnable = reinterpret_cast<SetDOMemMapEnablePtr>(shared_library_.get_function_pointer("DAQmxSetDOMemMapEnable"));
  function_pointers_.SetDOOutputDriveType = reinterpret_cast<SetDOOutputDriveTypePtr>(shared_library_.get_function_pointer("DAQmxSetDOOutputDriveType"));
  function_pointers_.SetDOOvercurrentAutoReenable = reinterpret_cast<SetDOOvercurrentAutoReenablePtr>(shared_library_.get_function_pointer("DAQmxSetDOOvercurrentAutoReenable"));
  function_pointers_.SetDOOvercurrentLimit = reinterpret_cast<SetDOOvercurrentLimitPtr>(shared_library_.get_function_pointer("DAQmxSetDOOvercurrentLimit"));
  function_pointers_.SetDOOvercurrentReenablePeriod = reinterpret_cast<SetDOOvercurrentReenablePeriodPtr>(shared_library_.get_function_pointer("DAQmxSetDOOvercurrentReenablePeriod"));
  function_pointers_.SetDOTristate = reinterpret_cast<SetDOTristatePtr>(shared_library_.get_function_pointer("DAQmxSetDOTristate"));
  function_pointers_.SetDOUsbXferReqCount = reinterpret_cast<SetDOUsbXferReqCountPtr>(shared_library_.get_function_pointer("DAQmxSetDOUsbXferReqCount"));
  function_pointers_.SetDOUsbXferReqSize = reinterpret_cast<SetDOUsbXferReqSizePtr>(shared_library_.get_function_pointer("DAQmxSetDOUsbXferReqSize"));
  function_pointers_.SetDOUseOnlyOnBrdMem = reinterpret_cast<SetDOUseOnlyOnBrdMemPtr>(shared_library_.get_function_pointer("DAQmxSetDOUseOnlyOnBrdMem"));
  function_pointers_.SetDigitalLogicFamilyPowerUpState = reinterpret_cast<SetDigitalLogicFamilyPowerUpStatePtr>(shared_library_.get_function_pointer("DAQmxSetDigitalLogicFamilyPowerUpState"));
  function_pointers_.SetFirstSampClkWhen = reinterpret_cast<SetFirstSampClkWhenPtr>(shared_library_.get_function_pointer("DAQmxSetFirstSampClkWhen"));
  function_pointers_.SetPhysicalChanName = reinterpret_cast<SetPhysicalChanNamePtr>(shared_library_.get_function_pointer("DAQmxSetPhysicalChanName"));
  function_pointers_.SetStartTrigTrigWhen = reinterpret_cast<SetStartTrigTrigWhenPtr>(shared_library_.get_function_pointer("DAQmxSetStartTrigTrigWhen"));
  function_pointers_.SetSyncPulseTimeWhen = reinterpret_cast<SetSyncPulseTimeWhenPtr>(shared_library_.get_function_pointer("DAQmxSetSyncPulseTimeWhen"));
  function_pointers_.StartNewFile = reinterpret_cast<StartNewFilePtr>(shared_library_.get_function_pointer("DAQmxStartNewFile"));
  function_pointers_.StartTask = reinterpret_cast<StartTaskPtr>(shared_library_.get_function_pointer("DAQmxStartTask"));
  function_pointers_.StopTask = reinterpret_cast<StopTaskPtr>(shared_library_.get_function_pointer("DAQmxStopTask"));
  function_pointers_.TaskControl = reinterpret_cast<TaskControlPtr>(shared_library_.get_function_pointer("DAQmxTaskControl"));
  function_pointers_.TristateOutputTerm = reinterpret_cast<TristateOutputTermPtr>(shared_library_.get_function_pointer("DAQmxTristateOutputTerm"));
  function_pointers_.UnreserveNetworkDevice = reinterpret_cast<UnreserveNetworkDevicePtr>(shared_library_.get_function_pointer("DAQmxUnreserveNetworkDevice"));
  function_pointers_.WaitForNextSampleClock = reinterpret_cast<WaitForNextSampleClockPtr>(shared_library_.get_function_pointer("DAQmxWaitForNextSampleClock"));
  function_pointers_.WaitForValidTimestamp = reinterpret_cast<WaitForValidTimestampPtr>(shared_library_.get_function_pointer("DAQmxWaitForValidTimestamp"));
  function_pointers_.WaitUntilTaskDone = reinterpret_cast<WaitUntilTaskDonePtr>(shared_library_.get_function_pointer("DAQmxWaitUntilTaskDone"));
  function_pointers_.WriteAnalogF64 = reinterpret_cast<WriteAnalogF64Ptr>(shared_library_.get_function_pointer("DAQmxWriteAnalogF64"));
  function_pointers_.WriteAnalogScalarF64 = reinterpret_cast<WriteAnalogScalarF64Ptr>(shared_library_.get_function_pointer("DAQmxWriteAnalogScalarF64"));
  function_pointers_.WriteBinaryI16 = reinterpret_cast<WriteBinaryI16Ptr>(shared_library_.get_function_pointer("DAQmxWriteBinaryI16"));
  function_pointers_.WriteBinaryI32 = reinterpret_cast<WriteBinaryI32Ptr>(shared_library_.get_function_pointer("DAQmxWriteBinaryI32"));
  function_pointers_.WriteBinaryU16 = reinterpret_cast<WriteBinaryU16Ptr>(shared_library_.get_function_pointer("DAQmxWriteBinaryU16"));
  function_pointers_.WriteBinaryU32 = reinterpret_cast<WriteBinaryU32Ptr>(shared_library_.get_function_pointer("DAQmxWriteBinaryU32"));
  function_pointers_.WriteCtrFreq = reinterpret_cast<WriteCtrFreqPtr>(shared_library_.get_function_pointer("DAQmxWriteCtrFreq"));
  function_pointers_.WriteCtrFreqScalar = reinterpret_cast<WriteCtrFreqScalarPtr>(shared_library_.get_function_pointer("DAQmxWriteCtrFreqScalar"));
  function_pointers_.WriteCtrTicks = reinterpret_cast<WriteCtrTicksPtr>(shared_library_.get_function_pointer("DAQmxWriteCtrTicks"));
  function_pointers_.WriteCtrTicksScalar = reinterpret_cast<WriteCtrTicksScalarPtr>(shared_library_.get_function_pointer("DAQmxWriteCtrTicksScalar"));
  function_pointers_.WriteCtrTime = reinterpret_cast<WriteCtrTimePtr>(shared_library_.get_function_pointer("DAQmxWriteCtrTime"));
  function_pointers_.WriteCtrTimeScalar = reinterpret_cast<WriteCtrTimeScalarPtr>(shared_library_.get_function_pointer("DAQmxWriteCtrTimeScalar"));
  function_pointers_.WriteDigitalLines = reinterpret_cast<WriteDigitalLinesPtr>(shared_library_.get_function_pointer("DAQmxWriteDigitalLines"));
  function_pointers_.WriteDigitalScalarU32 = reinterpret_cast<WriteDigitalScalarU32Ptr>(shared_library_.get_function_pointer("DAQmxWriteDigitalScalarU32"));
  function_pointers_.WriteDigitalU16 = reinterpret_cast<WriteDigitalU16Ptr>(shared_library_.get_function_pointer("DAQmxWriteDigitalU16"));
  function_pointers_.WriteDigitalU32 = reinterpret_cast<WriteDigitalU32Ptr>(shared_library_.get_function_pointer("DAQmxWriteDigitalU32"));
  function_pointers_.WriteDigitalU8 = reinterpret_cast<WriteDigitalU8Ptr>(shared_library_.get_function_pointer("DAQmxWriteDigitalU8"));
  function_pointers_.WriteRaw = reinterpret_cast<WriteRawPtr>(shared_library_.get_function_pointer("DAQmxWriteRaw"));
  function_pointers_.WriteToTEDSFromArray = reinterpret_cast<WriteToTEDSFromArrayPtr>(shared_library_.get_function_pointer("DAQmxWriteToTEDSFromArray"));
  function_pointers_.WriteToTEDSFromFile = reinterpret_cast<WriteToTEDSFromFilePtr>(shared_library_.get_function_pointer("DAQmxWriteToTEDSFromFile"));
}

NiDAQmxLibrary::~NiDAQmxLibrary()
{
}

::grpc::Status NiDAQmxLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiDAQmxLibrary::AddCDAQSyncConnection(const char portList[])
{
  if (!function_pointers_.AddCDAQSyncConnection) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxAddCDAQSyncConnection.");
  }
#if defined(_MSC_VER)
  return DAQmxAddCDAQSyncConnection(portList);
#else
  return function_pointers_.AddCDAQSyncConnection(portList);
#endif
}

int32 NiDAQmxLibrary::AddGlobalChansToTask(TaskHandle task, const char channelNames[])
{
  if (!function_pointers_.AddGlobalChansToTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxAddGlobalChansToTask.");
  }
#if defined(_MSC_VER)
  return DAQmxAddGlobalChansToTask(task, channelNames);
#else
  return function_pointers_.AddGlobalChansToTask(task, channelNames);
#endif
}

int32 NiDAQmxLibrary::AddNetworkDevice(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize)
{
  if (!function_pointers_.AddNetworkDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxAddNetworkDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxAddNetworkDevice(ipAddress, deviceName, attemptReservation, timeout, deviceNameOut, deviceNameOutBufferSize);
#else
  return function_pointers_.AddNetworkDevice(ipAddress, deviceName, attemptReservation, timeout, deviceNameOut, deviceNameOutBufferSize);
#endif
}

int32 NiDAQmxLibrary::AreConfiguredCDAQSyncPortsDisconnected(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist)
{
  if (!function_pointers_.AreConfiguredCDAQSyncPortsDisconnected) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxAreConfiguredCDAQSyncPortsDisconnected.");
  }
#if defined(_MSC_VER)
  return DAQmxAreConfiguredCDAQSyncPortsDisconnected(chassisDevicesPorts, timeout, disconnectedPortsExist);
#else
  return function_pointers_.AreConfiguredCDAQSyncPortsDisconnected(chassisDevicesPorts, timeout, disconnectedPortsExist);
#endif
}

int32 NiDAQmxLibrary::AutoConfigureCDAQSyncConnections(const char chassisDevicesPorts[], float64 timeout)
{
  if (!function_pointers_.AutoConfigureCDAQSyncConnections) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxAutoConfigureCDAQSyncConnections.");
  }
#if defined(_MSC_VER)
  return DAQmxAutoConfigureCDAQSyncConnections(chassisDevicesPorts, timeout);
#else
  return function_pointers_.AutoConfigureCDAQSyncConnections(chassisDevicesPorts, timeout);
#endif
}

int32 NiDAQmxLibrary::CalculateReversePolyCoeff(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[])
{
  if (!function_pointers_.CalculateReversePolyCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCalculateReversePolyCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxCalculateReversePolyCoeff(forwardCoeffs, numForwardCoeffsIn, minValX, maxValX, numPointsToCompute, reversePolyOrder, reverseCoeffs);
#else
  return function_pointers_.CalculateReversePolyCoeff(forwardCoeffs, numForwardCoeffsIn, minValX, maxValX, numPointsToCompute, reversePolyOrder, reverseCoeffs);
#endif
}

int32 NiDAQmxLibrary::CfgAnlgEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples)
{
  if (!function_pointers_.CfgAnlgEdgeRefTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgAnlgEdgeRefTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgAnlgEdgeRefTrig(task, triggerSource, triggerSlope, triggerLevel, pretriggerSamples);
#else
  return function_pointers_.CfgAnlgEdgeRefTrig(task, triggerSource, triggerSlope, triggerLevel, pretriggerSamples);
#endif
}

int32 NiDAQmxLibrary::CfgAnlgEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel)
{
  if (!function_pointers_.CfgAnlgEdgeStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgAnlgEdgeStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgAnlgEdgeStartTrig(task, triggerSource, triggerSlope, triggerLevel);
#else
  return function_pointers_.CfgAnlgEdgeStartTrig(task, triggerSource, triggerSlope, triggerLevel);
#endif
}

int32 NiDAQmxLibrary::CfgAnlgMultiEdgeRefTrig(TaskHandle task, const char triggerSources[], int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize)
{
  if (!function_pointers_.CfgAnlgMultiEdgeRefTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgAnlgMultiEdgeRefTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgAnlgMultiEdgeRefTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, pretriggerSamples, arraySize);
#else
  return function_pointers_.CfgAnlgMultiEdgeRefTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, pretriggerSamples, arraySize);
#endif
}

int32 NiDAQmxLibrary::CfgAnlgMultiEdgeStartTrig(TaskHandle task, const char triggerSources[], int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize)
{
  if (!function_pointers_.CfgAnlgMultiEdgeStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgAnlgMultiEdgeStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgAnlgMultiEdgeStartTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, arraySize);
#else
  return function_pointers_.CfgAnlgMultiEdgeStartTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, arraySize);
#endif
}

int32 NiDAQmxLibrary::CfgAnlgWindowRefTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples)
{
  if (!function_pointers_.CfgAnlgWindowRefTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgAnlgWindowRefTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgAnlgWindowRefTrig(task, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples);
#else
  return function_pointers_.CfgAnlgWindowRefTrig(task, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples);
#endif
}

int32 NiDAQmxLibrary::CfgAnlgWindowStartTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom)
{
  if (!function_pointers_.CfgAnlgWindowStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgAnlgWindowStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgAnlgWindowStartTrig(task, triggerSource, triggerWhen, windowTop, windowBottom);
#else
  return function_pointers_.CfgAnlgWindowStartTrig(task, triggerSource, triggerWhen, windowTop, windowBottom);
#endif
}

int32 NiDAQmxLibrary::CfgBurstHandshakingTimingExportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel)
{
  if (!function_pointers_.CfgBurstHandshakingTimingExportClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgBurstHandshakingTimingExportClock.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgBurstHandshakingTimingExportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel);
#else
  return function_pointers_.CfgBurstHandshakingTimingExportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel);
#endif
}

int32 NiDAQmxLibrary::CfgBurstHandshakingTimingImportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel)
{
  if (!function_pointers_.CfgBurstHandshakingTimingImportClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgBurstHandshakingTimingImportClock.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgBurstHandshakingTimingImportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel);
#else
  return function_pointers_.CfgBurstHandshakingTimingImportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel);
#endif
}

int32 NiDAQmxLibrary::CfgChangeDetectionTiming(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan)
{
  if (!function_pointers_.CfgChangeDetectionTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgChangeDetectionTiming.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgChangeDetectionTiming(task, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan);
#else
  return function_pointers_.CfgChangeDetectionTiming(task, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgDigEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples)
{
  if (!function_pointers_.CfgDigEdgeRefTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgDigEdgeRefTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgDigEdgeRefTrig(task, triggerSource, triggerEdge, pretriggerSamples);
#else
  return function_pointers_.CfgDigEdgeRefTrig(task, triggerSource, triggerEdge, pretriggerSamples);
#endif
}

int32 NiDAQmxLibrary::CfgDigEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge)
{
  if (!function_pointers_.CfgDigEdgeStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgDigEdgeStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgDigEdgeStartTrig(task, triggerSource, triggerEdge);
#else
  return function_pointers_.CfgDigEdgeStartTrig(task, triggerSource, triggerEdge);
#endif
}

int32 NiDAQmxLibrary::CfgDigPatternRefTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples)
{
  if (!function_pointers_.CfgDigPatternRefTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgDigPatternRefTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgDigPatternRefTrig(task, triggerSource, triggerPattern, triggerWhen, pretriggerSamples);
#else
  return function_pointers_.CfgDigPatternRefTrig(task, triggerSource, triggerPattern, triggerWhen, pretriggerSamples);
#endif
}

int32 NiDAQmxLibrary::CfgDigPatternStartTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen)
{
  if (!function_pointers_.CfgDigPatternStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgDigPatternStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgDigPatternStartTrig(task, triggerSource, triggerPattern, triggerWhen);
#else
  return function_pointers_.CfgDigPatternStartTrig(task, triggerSource, triggerPattern, triggerWhen);
#endif
}

int32 NiDAQmxLibrary::CfgHandshakingTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan)
{
  if (!function_pointers_.CfgHandshakingTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgHandshakingTiming.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgHandshakingTiming(task, sampleMode, sampsPerChan);
#else
  return function_pointers_.CfgHandshakingTiming(task, sampleMode, sampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgImplicitTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan)
{
  if (!function_pointers_.CfgImplicitTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgImplicitTiming.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgImplicitTiming(task, sampleMode, sampsPerChan);
#else
  return function_pointers_.CfgImplicitTiming(task, sampleMode, sampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgInputBuffer(TaskHandle task, uInt32 numSampsPerChan)
{
  if (!function_pointers_.CfgInputBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgInputBuffer.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgInputBuffer(task, numSampsPerChan);
#else
  return function_pointers_.CfgInputBuffer(task, numSampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgOutputBuffer(TaskHandle task, uInt32 numSampsPerChan)
{
  if (!function_pointers_.CfgOutputBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgOutputBuffer.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgOutputBuffer(task, numSampsPerChan);
#else
  return function_pointers_.CfgOutputBuffer(task, numSampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgPipelinedSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan)
{
  if (!function_pointers_.CfgPipelinedSampClkTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgPipelinedSampClkTiming.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgPipelinedSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
#else
  return function_pointers_.CfgPipelinedSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan)
{
  if (!function_pointers_.CfgSampClkTiming) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgSampClkTiming.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
#else
  return function_pointers_.CfgSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
#endif
}

int32 NiDAQmxLibrary::CfgTimeStartTrig(TaskHandle task, CVIAbsoluteTime when, int32 timescale)
{
  if (!function_pointers_.CfgTimeStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgTimeStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgTimeStartTrig(task, when, timescale);
#else
  return function_pointers_.CfgTimeStartTrig(task, when, timescale);
#endif
}

int32 NiDAQmxLibrary::CfgWatchdogAOExpirStates(TaskHandle task, const char channelNames[], const float64 expirStateArray[], int32 outputTypeArray[], uInt32 arraySize)
{
  if (!function_pointers_.CfgWatchdogAOExpirStates) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgWatchdogAOExpirStates.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgWatchdogAOExpirStates(task, channelNames, expirStateArray, outputTypeArray, arraySize);
#else
  return function_pointers_.CfgWatchdogAOExpirStates(task, channelNames, expirStateArray, outputTypeArray, arraySize);
#endif
}

int32 NiDAQmxLibrary::CfgWatchdogCOExpirStates(TaskHandle task, const char channelNames[], int32 expirStateArray[], uInt32 arraySize)
{
  if (!function_pointers_.CfgWatchdogCOExpirStates) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgWatchdogCOExpirStates.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgWatchdogCOExpirStates(task, channelNames, expirStateArray, arraySize);
#else
  return function_pointers_.CfgWatchdogCOExpirStates(task, channelNames, expirStateArray, arraySize);
#endif
}

int32 NiDAQmxLibrary::CfgWatchdogDOExpirStates(TaskHandle task, const char channelNames[], int32 expirStateArray[], uInt32 arraySize)
{
  if (!function_pointers_.CfgWatchdogDOExpirStates) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCfgWatchdogDOExpirStates.");
  }
#if defined(_MSC_VER)
  return DAQmxCfgWatchdogDOExpirStates(task, channelNames, expirStateArray, arraySize);
#else
  return function_pointers_.CfgWatchdogDOExpirStates(task, channelNames, expirStateArray, arraySize);
#endif
}

int32 NiDAQmxLibrary::ClearTEDS(const char physicalChannel[])
{
  if (!function_pointers_.ClearTEDS) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxClearTEDS.");
  }
#if defined(_MSC_VER)
  return DAQmxClearTEDS(physicalChannel);
#else
  return function_pointers_.ClearTEDS(physicalChannel);
#endif
}

int32 NiDAQmxLibrary::ClearTask(TaskHandle task)
{
  if (!function_pointers_.ClearTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxClearTask.");
  }
#if defined(_MSC_VER)
  return DAQmxClearTask(task);
#else
  return function_pointers_.ClearTask(task);
#endif
}

int32 NiDAQmxLibrary::ConfigureLogging(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation)
{
  if (!function_pointers_.ConfigureLogging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxConfigureLogging.");
  }
#if defined(_MSC_VER)
  return DAQmxConfigureLogging(task, filePath, loggingMode, groupName, operation);
#else
  return function_pointers_.ConfigureLogging(task, filePath, loggingMode, groupName, operation);
#endif
}

int32 NiDAQmxLibrary::ConfigureTEDS(const char physicalChannel[], const char filePath[])
{
  if (!function_pointers_.ConfigureTEDS) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxConfigureTEDS.");
  }
#if defined(_MSC_VER)
  return DAQmxConfigureTEDS(physicalChannel, filePath);
#else
  return function_pointers_.ConfigureTEDS(physicalChannel, filePath);
#endif
}

int32 NiDAQmxLibrary::ConnectTerms(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers)
{
  if (!function_pointers_.ConnectTerms) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxConnectTerms.");
  }
#if defined(_MSC_VER)
  return DAQmxConnectTerms(sourceTerminal, destinationTerminal, signalModifiers);
#else
  return function_pointers_.ConnectTerms(sourceTerminal, destinationTerminal, signalModifiers);
#endif
}

int32 NiDAQmxLibrary::ControlWatchdogTask(TaskHandle task, int32 action)
{
  if (!function_pointers_.ControlWatchdogTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxControlWatchdogTask.");
  }
#if defined(_MSC_VER)
  return DAQmxControlWatchdogTask(task, action);
#else
  return function_pointers_.ControlWatchdogTask(task, action);
#endif
}

int32 NiDAQmxLibrary::CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  if (!function_pointers_.CreateAIAccel4WireDCVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIAccel4WireDCVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#else
  return function_pointers_.CreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIAccelChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIAccelChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIAccelChargeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIAccelChargeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#else
  return function_pointers_.CreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[])
{
  if (!function_pointers_.CreateAIBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
#else
  return function_pointers_.CreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAIChargeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIChargeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAICurrentChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAICurrentChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#else
  return function_pointers_.CreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAICurrentRMSChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAICurrentRMSChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#else
  return function_pointers_.CreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceBridgePolynomialChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceBridgePolynomialChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceBridgeTableChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceBridgeTableChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceBridgeTwoPointLinChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceBridgeTwoPointLinChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIForceIEPEChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIForceIEPEChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[])
{
  if (!function_pointers_.CreateAIFreqVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIFreqVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
#else
  return function_pointers_.CreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIMicrophoneChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIMicrophoneChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPosEddyCurrProxProbeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPosEddyCurrProxProbeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#else
  return function_pointers_.CreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPosLVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPosLVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPosRVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPosRVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPressureBridgePolynomialChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPressureBridgePolynomialChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPressureBridgeTableChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPressureBridgeTableChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAIPressureBridgeTwoPointLinChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIPressureBridgeTwoPointLinChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0)
{
  if (!function_pointers_.CreateAIRTDChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIRTDChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0);
#else
  return function_pointers_.CreateAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0);
#endif
}

int32 NiDAQmxLibrary::CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIResistanceChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIResistanceChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIRosetteStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance)
{
  if (!function_pointers_.CreateAIRosetteStrainGageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIRosetteStrainGageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIRosetteStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, rosetteType, gageOrientation, rosetteMeasTypes, numRosetteMeasTypes, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, nominalGageResistance, poissonRatio, leadWireResistance);
#else
  return function_pointers_.CreateAIRosetteStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, rosetteType, gageOrientation, rosetteMeasTypes, numRosetteMeasTypes, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, nominalGageResistance, poissonRatio, leadWireResistance);
#endif
}

int32 NiDAQmxLibrary::CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[])
{
  if (!function_pointers_.CreateAIStrainGageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIStrainGageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
#else
  return function_pointers_.CreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAITempBuiltInSensorChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units)
{
  if (!function_pointers_.CreateAITempBuiltInSensorChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITempBuiltInSensorChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITempBuiltInSensorChan(task, physicalChannel, nameToAssignToChannel, units);
#else
  return function_pointers_.CreateAITempBuiltInSensorChan(task, physicalChannel, nameToAssignToChannel, units);
#endif
}

int32 NiDAQmxLibrary::CreateAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[])
{
  if (!function_pointers_.CreateAIThrmcplChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIThrmcplChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel);
#else
  return function_pointers_.CreateAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel);
#endif
}

int32 NiDAQmxLibrary::CreateAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c)
{
  if (!function_pointers_.CreateAIThrmstrChanIex) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIThrmstrChanIex.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c);
#else
  return function_pointers_.CreateAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c);
#endif
}

int32 NiDAQmxLibrary::CreateAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1)
{
  if (!function_pointers_.CreateAIThrmstrChanVex) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIThrmstrChanVex.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1);
#else
  return function_pointers_.CreateAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1);
#endif
}

int32 NiDAQmxLibrary::CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAITorqueBridgePolynomialChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITorqueBridgePolynomialChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAITorqueBridgeTableChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITorqueBridgeTableChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  if (!function_pointers_.CreateAITorqueBridgeTwoPointLinChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAITorqueBridgeTwoPointLinChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#else
  return function_pointers_.CreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVelocityIEPEChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVelocityIEPEChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVoltageChanWithExcit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVoltageChanWithExcit.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#else
  return function_pointers_.CreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAIVoltageRMSChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAIVoltageRMSChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAOCurrentChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAOCurrentChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset)
{
  if (!function_pointers_.CreateAOFuncGenChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAOFuncGenChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
#else
  return function_pointers_.CreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
#endif
}

int32 NiDAQmxLibrary::CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateAOVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateAOVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[])
{
  if (!function_pointers_.CreateCIAngEncoderChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIAngEncoderChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
#else
  return function_pointers_.CreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[])
{
  if (!function_pointers_.CreateCIAngVelocityChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIAngVelocityChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName);
#else
  return function_pointers_.CreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection)
{
  if (!function_pointers_.CreateCICountEdgesChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCICountEdgesChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection);
#else
  return function_pointers_.CreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection);
#endif
}

int32 NiDAQmxLibrary::CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[])
{
  if (!function_pointers_.CreateCIDutyCycleChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIDutyCycleChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName);
#else
  return function_pointers_.CreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  if (!function_pointers_.CreateCIFreqChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIFreqChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#else
  return function_pointers_.CreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[])
{
  if (!function_pointers_.CreateCIGPSTimestampChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIGPSTimestampChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
#else
  return function_pointers_.CreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[])
{
  if (!function_pointers_.CreateCILinEncoderChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCILinEncoderChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, distPerPulse, initialPos, customScaleName);
#else
  return function_pointers_.CreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, distPerPulse, initialPos, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[])
{
  if (!function_pointers_.CreateCILinVelocityChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCILinVelocityChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName);
#else
  return function_pointers_.CreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  if (!function_pointers_.CreateCIPeriodChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPeriodChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#else
  return function_pointers_.CreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  if (!function_pointers_.CreateCIPulseChanFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseChanFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#else
  return function_pointers_.CreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal)
{
  if (!function_pointers_.CreateCIPulseChanTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseChanTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
#else
  return function_pointers_.CreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  if (!function_pointers_.CreateCIPulseChanTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseChanTime.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#else
  return function_pointers_.CreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units);
#endif
}

int32 NiDAQmxLibrary::CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[])
{
  if (!function_pointers_.CreateCIPulseWidthChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCIPulseWidthChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
#else
  return function_pointers_.CreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateCISemiPeriodChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCISemiPeriodChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[])
{
  if (!function_pointers_.CreateCITwoEdgeSepChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCITwoEdgeSepChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
#else
  return function_pointers_.CreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle)
{
  if (!function_pointers_.CreateCOPulseChanFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCOPulseChanFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
#else
  return function_pointers_.CreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
#endif
}

int32 NiDAQmxLibrary::CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks)
{
  if (!function_pointers_.CreateCOPulseChanTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCOPulseChanTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
#else
  return function_pointers_.CreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
#endif
}

int32 NiDAQmxLibrary::CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime)
{
  if (!function_pointers_.CreateCOPulseChanTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateCOPulseChanTime.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
#else
  return function_pointers_.CreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
#endif
}

int32 NiDAQmxLibrary::CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  if (!function_pointers_.CreateDIChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateDIChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateDIChan(task, lines, nameToAssignToLines, lineGrouping);
#else
  return function_pointers_.CreateDIChan(task, lines, nameToAssignToLines, lineGrouping);
#endif
}

int32 NiDAQmxLibrary::CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  if (!function_pointers_.CreateDOChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateDOChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateDOChan(task, lines, nameToAssignToLines, lineGrouping);
#else
  return function_pointers_.CreateDOChan(task, lines, nameToAssignToLines, lineGrouping);
#endif
}

int32 NiDAQmxLibrary::CreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[])
{
  if (!function_pointers_.CreateLinScale) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateLinScale.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateLinScale(name, slope, yIntercept, preScaledUnits, scaledUnits);
#else
  return function_pointers_.CreateLinScale(name, slope, yIntercept, preScaledUnits, scaledUnits);
#endif
}

int32 NiDAQmxLibrary::CreateMapScale(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[])
{
  if (!function_pointers_.CreateMapScale) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateMapScale.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateMapScale(name, prescaledMin, prescaledMax, scaledMin, scaledMax, preScaledUnits, scaledUnits);
#else
  return function_pointers_.CreateMapScale(name, prescaledMin, prescaledMax, scaledMin, scaledMax, preScaledUnits, scaledUnits);
#endif
}

int32 NiDAQmxLibrary::CreatePolynomialScale(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[])
{
  if (!function_pointers_.CreatePolynomialScale) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreatePolynomialScale.");
  }
#if defined(_MSC_VER)
  return DAQmxCreatePolynomialScale(name, forwardCoeffs, numForwardCoeffsIn, reverseCoeffs, numReverseCoeffsIn, preScaledUnits, scaledUnits);
#else
  return function_pointers_.CreatePolynomialScale(name, forwardCoeffs, numForwardCoeffsIn, reverseCoeffs, numReverseCoeffsIn, preScaledUnits, scaledUnits);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIAccelChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIAccelChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAICurrentChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAICurrentChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIForceBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIForceBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIForceIEPEChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIForceIEPEChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIMicrophoneChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIMicrophoneChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIPosLVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIPosLVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIPosRVDTChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIPosRVDTChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#else
  return function_pointers_.CreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIPressureBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIPressureBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal)
{
  if (!function_pointers_.CreateTEDSAIRTDChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIRTDChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
#else
  return function_pointers_.CreateTEDSAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIResistanceChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIResistanceChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIStrainGageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIStrainGageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
#else
  return function_pointers_.CreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[])
{
  if (!function_pointers_.CreateTEDSAIThrmcplChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIThrmcplChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel);
#else
  return function_pointers_.CreateTEDSAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal)
{
  if (!function_pointers_.CreateTEDSAIThrmstrChanIex) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIThrmstrChanIex.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
#else
  return function_pointers_.CreateTEDSAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1)
{
  if (!function_pointers_.CreateTEDSAIThrmstrChanVex) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIThrmstrChanVex.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1);
#else
  return function_pointers_.CreateTEDSAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAITorqueBridgeChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAITorqueBridgeChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIVoltageChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIVoltageChan.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#else
  return function_pointers_.CreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  if (!function_pointers_.CreateTEDSAIVoltageChanWithExcit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTEDSAIVoltageChanWithExcit.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#else
  return function_pointers_.CreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
#endif
}

int32 NiDAQmxLibrary::CreateTableScale(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[])
{
  if (!function_pointers_.CreateTableScale) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTableScale.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTableScale(name, prescaledVals, numPrescaledValsIn, scaledVals, numScaledValsIn, preScaledUnits, scaledUnits);
#else
  return function_pointers_.CreateTableScale(name, prescaledVals, numPrescaledValsIn, scaledVals, numScaledValsIn, preScaledUnits, scaledUnits);
#endif
}

int32 NiDAQmxLibrary::CreateTask(const char sessionName[], TaskHandle* task)
{
  if (!function_pointers_.CreateTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateTask.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateTask(sessionName, task);
#else
  return function_pointers_.CreateTask(sessionName, task);
#endif
}

int32 NiDAQmxLibrary::CreateWatchdogTimerTask(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState)
{
  if (!function_pointers_.CreateWatchdogTimerTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateWatchdogTimerTask.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateWatchdogTimerTask(deviceName, sessionName, task, timeout, lines, expState);
#else
  return function_pointers_.CreateWatchdogTimerTask(deviceName, sessionName, task, timeout, lines, expState);
#endif
}

int32 NiDAQmxLibrary::CreateWatchdogTimerTaskEx(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout)
{
  if (!function_pointers_.CreateWatchdogTimerTaskEx) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxCreateWatchdogTimerTaskEx.");
  }
#if defined(_MSC_VER)
  return DAQmxCreateWatchdogTimerTaskEx(deviceName, sessionName, task, timeout);
#else
  return function_pointers_.CreateWatchdogTimerTaskEx(deviceName, sessionName, task, timeout);
#endif
}

int32 NiDAQmxLibrary::DeleteNetworkDevice(const char deviceName[])
{
  if (!function_pointers_.DeleteNetworkDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDeleteNetworkDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxDeleteNetworkDevice(deviceName);
#else
  return function_pointers_.DeleteNetworkDevice(deviceName);
#endif
}

int32 NiDAQmxLibrary::DeleteSavedGlobalChan(const char channelName[])
{
  if (!function_pointers_.DeleteSavedGlobalChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDeleteSavedGlobalChan.");
  }
#if defined(_MSC_VER)
  return DAQmxDeleteSavedGlobalChan(channelName);
#else
  return function_pointers_.DeleteSavedGlobalChan(channelName);
#endif
}

int32 NiDAQmxLibrary::DeleteSavedScale(const char scaleName[])
{
  if (!function_pointers_.DeleteSavedScale) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDeleteSavedScale.");
  }
#if defined(_MSC_VER)
  return DAQmxDeleteSavedScale(scaleName);
#else
  return function_pointers_.DeleteSavedScale(scaleName);
#endif
}

int32 NiDAQmxLibrary::DeleteSavedTask(const char taskName[])
{
  if (!function_pointers_.DeleteSavedTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDeleteSavedTask.");
  }
#if defined(_MSC_VER)
  return DAQmxDeleteSavedTask(taskName);
#else
  return function_pointers_.DeleteSavedTask(taskName);
#endif
}

int32 NiDAQmxLibrary::DeviceSupportsCal(const char deviceName[], bool32* calSupported)
{
  if (!function_pointers_.DeviceSupportsCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDeviceSupportsCal.");
  }
#if defined(_MSC_VER)
  return DAQmxDeviceSupportsCal(deviceName, calSupported);
#else
  return function_pointers_.DeviceSupportsCal(deviceName, calSupported);
#endif
}

int32 NiDAQmxLibrary::DisableRefTrig(TaskHandle task)
{
  if (!function_pointers_.DisableRefTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDisableRefTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxDisableRefTrig(task);
#else
  return function_pointers_.DisableRefTrig(task);
#endif
}

int32 NiDAQmxLibrary::DisableStartTrig(TaskHandle task)
{
  if (!function_pointers_.DisableStartTrig) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDisableStartTrig.");
  }
#if defined(_MSC_VER)
  return DAQmxDisableStartTrig(task);
#else
  return function_pointers_.DisableStartTrig(task);
#endif
}

int32 NiDAQmxLibrary::DisconnectTerms(const char sourceTerminal[], const char destinationTerminal[])
{
  if (!function_pointers_.DisconnectTerms) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxDisconnectTerms.");
  }
#if defined(_MSC_VER)
  return DAQmxDisconnectTerms(sourceTerminal, destinationTerminal);
#else
  return function_pointers_.DisconnectTerms(sourceTerminal, destinationTerminal);
#endif
}

int32 NiDAQmxLibrary::ExportSignal(TaskHandle task, int32 signalID, const char outputTerminal[])
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxExportSignal.");
  }
#if defined(_MSC_VER)
  return DAQmxExportSignal(task, signalID, outputTerminal);
#else
  return function_pointers_.ExportSignal(task, signalID, outputTerminal);
#endif
}

int32 NiDAQmxLibrary::GetAIACExcitFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIACExcitFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIACExcitFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIACExcitFreq(task, channel, data);
#else
  return function_pointers_.GetAIACExcitFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIACExcitSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIACExcitSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIACExcitSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIACExcitSyncEnable(task, channel, data);
#else
  return function_pointers_.GetAIACExcitSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIACExcitWireMode(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIACExcitWireMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIACExcitWireMode.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIACExcitWireMode(task, channel, data);
#else
  return function_pointers_.GetAIACExcitWireMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIADCCustomTimingMode(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIADCCustomTimingMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIADCCustomTimingMode.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIADCCustomTimingMode(task, channel, data);
#else
  return function_pointers_.GetAIADCCustomTimingMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIADCTimingMode(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIADCTimingMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIADCTimingMode.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIADCTimingMode(task, channel, data);
#else
  return function_pointers_.GetAIADCTimingMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccel4WireDCVoltageSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIAccel4WireDCVoltageSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccel4WireDCVoltageSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccel4WireDCVoltageSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIAccel4WireDCVoltageSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccel4WireDCVoltageSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIAccel4WireDCVoltageSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccel4WireDCVoltageSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccel4WireDCVoltageSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIAccel4WireDCVoltageSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccelChargeSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIAccelChargeSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccelChargeSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccelChargeSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIAccelChargeSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccelChargeSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIAccelChargeSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccelChargeSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccelChargeSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIAccelChargeSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccelSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIAccelSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccelSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccelSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIAccelSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccelSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIAccelSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccelSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccelSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIAccelSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAccelUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIAccelUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAccelUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAccelUnits(task, channel, data);
#else
  return function_pointers_.GetAIAccelUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAcceldBRef(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIAcceldBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAcceldBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAcceldBRef(task, channel, data);
#else
  return function_pointers_.GetAIAcceldBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAtten(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIAtten) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAtten.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAtten(task, channel, data);
#else
  return function_pointers_.GetAIAtten(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAutoZeroMode(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIAutoZeroMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAutoZeroMode.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAutoZeroMode(task, channel, data);
#else
  return function_pointers_.GetAIAutoZeroMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIAveragingWinSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIAveragingWinSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIAveragingWinSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIAveragingWinSize(task, channel, data);
#else
  return function_pointers_.GetAIAveragingWinSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeBalanceCoarsePot(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeBalanceCoarsePot) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeBalanceCoarsePot.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeBalanceCoarsePot(task, channel, data);
#else
  return function_pointers_.GetAIBridgeBalanceCoarsePot(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeBalanceFinePot(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeBalanceFinePot) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeBalanceFinePot.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeBalanceFinePot(task, channel, data);
#else
  return function_pointers_.GetAIBridgeBalanceFinePot(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeCfg(task, channel, data);
#else
  return function_pointers_.GetAIBridgeCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeElectricalUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeElectricalUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeElectricalUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeElectricalUnits(task, channel, data);
#else
  return function_pointers_.GetAIBridgeElectricalUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeInitialRatio(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeInitialRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeInitialRatio.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeInitialRatio(task, channel, data);
#else
  return function_pointers_.GetAIBridgeInitialRatio(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeInitialVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeInitialVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeInitialVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeInitialVoltage(task, channel, data);
#else
  return function_pointers_.GetAIBridgeInitialVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeNomResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeNomResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeNomResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeNomResistance(task, channel, data);
#else
  return function_pointers_.GetAIBridgeNomResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgePhysicalUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgePhysicalUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgePhysicalUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgePhysicalUnits(task, channel, data);
#else
  return function_pointers_.GetAIBridgePhysicalUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgePolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIBridgePolyForwardCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgePolyForwardCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgePolyForwardCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIBridgePolyForwardCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgePolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIBridgePolyReverseCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgePolyReverseCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgePolyReverseCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIBridgePolyReverseCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeScaleType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeScaleType(task, channel, data);
#else
  return function_pointers_.GetAIBridgeScaleType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalEnable(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalGainAdjust(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalGainAdjust) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalGainAdjust.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalGainAdjust(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalGainAdjust(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalSelect(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalSelect) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalSelect.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalSelect(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalSelect(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalShuntCalAActualResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalShuntCalAActualResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalShuntCalAActualResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalShuntCalAActualResistance(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalShuntCalAActualResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalShuntCalAResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalShuntCalAResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalShuntCalAResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalShuntCalAResistance(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalShuntCalAResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalShuntCalASrc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalShuntCalASrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalShuntCalASrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalShuntCalASrc(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalShuntCalASrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalShuntCalBActualResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalShuntCalBActualResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalShuntCalBActualResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalShuntCalBActualResistance(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalShuntCalBActualResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeShuntCalShuntCalBResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeShuntCalShuntCalBResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeShuntCalShuntCalBResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeShuntCalShuntCalBResistance(task, channel, data);
#else
  return function_pointers_.GetAIBridgeShuntCalShuntCalBResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeTableElectricalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIBridgeTableElectricalVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeTableElectricalVals.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeTableElectricalVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIBridgeTableElectricalVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeTablePhysicalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIBridgeTablePhysicalVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeTablePhysicalVals.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeTablePhysicalVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIBridgeTablePhysicalVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeTwoPointLinFirstElectricalVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeTwoPointLinFirstElectricalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeTwoPointLinFirstElectricalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeTwoPointLinFirstElectricalVal(task, channel, data);
#else
  return function_pointers_.GetAIBridgeTwoPointLinFirstElectricalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeTwoPointLinFirstPhysicalVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeTwoPointLinFirstPhysicalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal(task, channel, data);
#else
  return function_pointers_.GetAIBridgeTwoPointLinFirstPhysicalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeTwoPointLinSecondElectricalVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeTwoPointLinSecondElectricalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeTwoPointLinSecondElectricalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeTwoPointLinSecondElectricalVal(task, channel, data);
#else
  return function_pointers_.GetAIBridgeTwoPointLinSecondElectricalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeTwoPointLinSecondPhysicalVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIBridgeTwoPointLinSecondPhysicalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal(task, channel, data);
#else
  return function_pointers_.GetAIBridgeTwoPointLinSecondPhysicalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIBridgeUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIBridgeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIBridgeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIBridgeUnits(task, channel, data);
#else
  return function_pointers_.GetAIBridgeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalApplyCalIfExp(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIChanCalApplyCalIfExp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalApplyCalIfExp.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalApplyCalIfExp(task, channel, data);
#else
  return function_pointers_.GetAIChanCalApplyCalIfExp(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  if (!function_pointers_.GetAIChanCalCalDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalCalDate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.GetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalDesc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAIChanCalDesc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalDesc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalDesc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAIChanCalDesc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalEnableCal(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIChanCalEnableCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalEnableCal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalEnableCal(task, channel, data);
#else
  return function_pointers_.GetAIChanCalEnableCal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  if (!function_pointers_.GetAIChanCalExpDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalExpDate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.GetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalHasValidCalInfo(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIChanCalHasValidCalInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalHasValidCalInfo.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalHasValidCalInfo(task, channel, data);
#else
  return function_pointers_.GetAIChanCalHasValidCalInfo(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalOperatorName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAIChanCalOperatorName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalOperatorName.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalOperatorName(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAIChanCalOperatorName(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalPolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIChanCalPolyForwardCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalPolyForwardCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalPolyForwardCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIChanCalPolyForwardCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalPolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIChanCalPolyReverseCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalPolyReverseCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalPolyReverseCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIChanCalPolyReverseCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalScaleType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIChanCalScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalScaleType(task, channel, data);
#else
  return function_pointers_.GetAIChanCalScaleType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalTablePreScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIChanCalTablePreScaledVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalTablePreScaledVals.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalTablePreScaledVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIChanCalTablePreScaledVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalTableScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIChanCalTableScaledVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalTableScaledVals.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalTableScaledVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIChanCalTableScaledVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalVerifAcqVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIChanCalVerifAcqVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalVerifAcqVals.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalVerifAcqVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIChanCalVerifAcqVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIChanCalVerifRefVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIChanCalVerifRefVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChanCalVerifRefVals.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChanCalVerifRefVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIChanCalVerifRefVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIChargeUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIChargeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChargeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChargeUnits(task, channel, data);
#else
  return function_pointers_.GetAIChargeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIChopEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIChopEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIChopEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIChopEnable(task, channel, data);
#else
  return function_pointers_.GetAIChopEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAICoupling(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAICoupling) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAICoupling.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAICoupling(task, channel, data);
#else
  return function_pointers_.GetAICoupling(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAICurrentACRMSUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAICurrentACRMSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAICurrentACRMSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAICurrentACRMSUnits(task, channel, data);
#else
  return function_pointers_.GetAICurrentACRMSUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAICurrentShuntLoc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAICurrentShuntLoc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAICurrentShuntLoc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAICurrentShuntLoc(task, channel, data);
#else
  return function_pointers_.GetAICurrentShuntLoc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAICurrentShuntResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAICurrentShuntResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAICurrentShuntResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAICurrentShuntResistance(task, channel, data);
#else
  return function_pointers_.GetAICurrentShuntResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAICurrentUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAICurrentUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAICurrentUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAICurrentUnits(task, channel, data);
#else
  return function_pointers_.GetAICurrentUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAICustomScaleName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAICustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAICustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAICustomScaleName(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAICustomScaleName(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAIDCOffset(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDCOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDCOffset.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDCOffset(task, channel, data);
#else
  return function_pointers_.GetAIDCOffset(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDataXferCustomThreshold(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIDataXferCustomThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDataXferCustomThreshold.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDataXferCustomThreshold(task, channel, data);
#else
  return function_pointers_.GetAIDataXferCustomThreshold(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDataXferMaxRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDataXferMaxRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDataXferMaxRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDataXferMaxRate(task, channel, data);
#else
  return function_pointers_.GetAIDataXferMaxRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDataXferMech(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDataXferMech(task, channel, data);
#else
  return function_pointers_.GetAIDataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDataXferReqCond(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDataXferReqCond(task, channel, data);
#else
  return function_pointers_.GetAIDataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDevScalingCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIDevScalingCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDevScalingCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDevScalingCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIDevScalingCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrBandpassCenterFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDigFltrBandpassCenterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrBandpassCenterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrBandpassCenterFreq(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrBandpassCenterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrBandpassWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDigFltrBandpassWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrBandpassWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrBandpassWidth(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrBandpassWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAIDigFltrCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAIDigFltrCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrHighpassCutoffFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDigFltrHighpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrHighpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrHighpassCutoffFreq(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrHighpassCutoffFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrLowpassCutoffFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDigFltrLowpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrLowpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrLowpassCutoffFreq(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrLowpassCutoffFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrNotchCenterFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDigFltrNotchCenterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrNotchCenterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrNotchCenterFreq(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrNotchCenterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrNotchWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIDigFltrNotchWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrNotchWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrNotchWidth(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrNotchWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrOrder(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIDigFltrOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrOrder(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrOrder(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrResponse(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIDigFltrResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrResponse(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrResponse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDigFltrType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIDigFltrType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDigFltrType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDigFltrType(task, channel, data);
#else
  return function_pointers_.GetAIDigFltrType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIDitherEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIDitherEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIDitherEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIDitherEnable(task, channel, data);
#else
  return function_pointers_.GetAIDitherEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIEddyCurrentProxProbeSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIEddyCurrentProxProbeSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIEddyCurrentProxProbeSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIEddyCurrentProxProbeSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIEddyCurrentProxProbeSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIEddyCurrentProxProbeSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIEddyCurrentProxProbeSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIEddyCurrentProxProbeSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIEddyCurrentProxProbeSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIEddyCurrentProxProbeSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIEddyCurrentProxProbeUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIEddyCurrentProxProbeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIEddyCurrentProxProbeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIEddyCurrentProxProbeUnits(task, channel, data);
#else
  return function_pointers_.GetAIEddyCurrentProxProbeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIEnhancedAliasRejectionEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIEnhancedAliasRejectionEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIEnhancedAliasRejectionEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIEnhancedAliasRejectionEnable(task, channel, data);
#else
  return function_pointers_.GetAIEnhancedAliasRejectionEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitActualVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIExcitActualVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitActualVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitActualVal(task, channel, data);
#else
  return function_pointers_.GetAIExcitActualVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitDCorAC(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIExcitDCorAC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitDCorAC.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitDCorAC(task, channel, data);
#else
  return function_pointers_.GetAIExcitDCorAC(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitIdleOutputBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIExcitIdleOutputBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitIdleOutputBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitIdleOutputBehavior(task, channel, data);
#else
  return function_pointers_.GetAIExcitIdleOutputBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitSense(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIExcitSense) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitSense.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitSense(task, channel, data);
#else
  return function_pointers_.GetAIExcitSense(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitSrc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIExcitSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitSrc(task, channel, data);
#else
  return function_pointers_.GetAIExcitSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitUseForScaling(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIExcitUseForScaling) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitUseForScaling.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitUseForScaling(task, channel, data);
#else
  return function_pointers_.GetAIExcitUseForScaling(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitUseMultiplexed(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIExcitUseMultiplexed) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitUseMultiplexed.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitUseMultiplexed(task, channel, data);
#else
  return function_pointers_.GetAIExcitUseMultiplexed(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIExcitVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitVal(task, channel, data);
#else
  return function_pointers_.GetAIExcitVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIExcitVoltageOrCurrent(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIExcitVoltageOrCurrent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIExcitVoltageOrCurrent.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIExcitVoltageOrCurrent(task, channel, data);
#else
  return function_pointers_.GetAIExcitVoltageOrCurrent(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterDelay(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterDelay(task, channel, data);
#else
  return function_pointers_.GetAIFilterDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterDelayAdjustment(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIFilterDelayAdjustment) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterDelayAdjustment.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterDelayAdjustment(task, channel, data);
#else
  return function_pointers_.GetAIFilterDelayAdjustment(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterDelayUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterDelayUnits(task, channel, data);
#else
  return function_pointers_.GetAIFilterDelayUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIFilterEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterEnable(task, channel, data);
#else
  return function_pointers_.GetAIFilterEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIFilterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterFreq(task, channel, data);
#else
  return function_pointers_.GetAIFilterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterOrder(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIFilterOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterOrder(task, channel, data);
#else
  return function_pointers_.GetAIFilterOrder(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFilterResponse(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIFilterResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFilterResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFilterResponse(task, channel, data);
#else
  return function_pointers_.GetAIFilterResponse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIForceIEPESensorSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIForceIEPESensorSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIForceIEPESensorSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIForceIEPESensorSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIForceIEPESensorSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIForceIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIForceIEPESensorSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIForceIEPESensorSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIForceIEPESensorSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIForceIEPESensorSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIForceReadFromChan(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIForceReadFromChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIForceReadFromChan.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIForceReadFromChan(task, channel, data);
#else
  return function_pointers_.GetAIForceReadFromChan(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIForceUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIForceUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIForceUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIForceUnits(task, channel, data);
#else
  return function_pointers_.GetAIForceUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFreqHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIFreqHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFreqHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFreqHyst(task, channel, data);
#else
  return function_pointers_.GetAIFreqHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFreqThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIFreqThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFreqThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFreqThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetAIFreqThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIFreqUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIFreqUnits(task, channel, data);
#else
  return function_pointers_.GetAIFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIGain(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIGain.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIGain(task, channel, data);
#else
  return function_pointers_.GetAIGain(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIInputLimitsFaultDetectEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIInputLimitsFaultDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIInputLimitsFaultDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIInputLimitsFaultDetectEnable(task, channel, data);
#else
  return function_pointers_.GetAIInputLimitsFaultDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIInputLimitsFaultDetectLowerLimit(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIInputLimitsFaultDetectLowerLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIInputLimitsFaultDetectLowerLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIInputLimitsFaultDetectLowerLimit(task, channel, data);
#else
  return function_pointers_.GetAIInputLimitsFaultDetectLowerLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIInputLimitsFaultDetectUpperLimit(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIInputLimitsFaultDetectUpperLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIInputLimitsFaultDetectUpperLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIInputLimitsFaultDetectUpperLimit(task, channel, data);
#else
  return function_pointers_.GetAIInputLimitsFaultDetectUpperLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIInputSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAIInputSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIInputSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIInputSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAIInputSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAIIsTEDS(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIIsTEDS) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIIsTEDS.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIIsTEDS(task, channel, data);
#else
  return function_pointers_.GetAIIsTEDS(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILVDTSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAILVDTSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILVDTSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILVDTSensitivity(task, channel, data);
#else
  return function_pointers_.GetAILVDTSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILVDTSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAILVDTSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILVDTSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILVDTSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAILVDTSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILVDTUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAILVDTUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILVDTUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILVDTUnits(task, channel, data);
#else
  return function_pointers_.GetAILVDTUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILeadWireResistance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAILeadWireResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILeadWireResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILeadWireResistance(task, channel, data);
#else
  return function_pointers_.GetAILeadWireResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILossyLSBRemovalCompressedSampSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAILossyLSBRemovalCompressedSampSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILossyLSBRemovalCompressedSampSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILossyLSBRemovalCompressedSampSize(task, channel, data);
#else
  return function_pointers_.GetAILossyLSBRemovalCompressedSampSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILowpassCutoffFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAILowpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILowpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILowpassCutoffFreq(task, channel, data);
#else
  return function_pointers_.GetAILowpassCutoffFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILowpassEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAILowpassEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILowpassEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILowpassEnable(task, channel, data);
#else
  return function_pointers_.GetAILowpassEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILowpassSwitchCapClkSrc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAILowpassSwitchCapClkSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILowpassSwitchCapClkSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILowpassSwitchCapClkSrc(task, channel, data);
#else
  return function_pointers_.GetAILowpassSwitchCapClkSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILowpassSwitchCapExtClkDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAILowpassSwitchCapExtClkDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILowpassSwitchCapExtClkDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILowpassSwitchCapExtClkDiv(task, channel, data);
#else
  return function_pointers_.GetAILowpassSwitchCapExtClkDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILowpassSwitchCapExtClkFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAILowpassSwitchCapExtClkFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILowpassSwitchCapExtClkFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILowpassSwitchCapExtClkFreq(task, channel, data);
#else
  return function_pointers_.GetAILowpassSwitchCapExtClkFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAILowpassSwitchCapOutClkDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAILowpassSwitchCapOutClkDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAILowpassSwitchCapOutClkDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAILowpassSwitchCapOutClkDiv(task, channel, data);
#else
  return function_pointers_.GetAILowpassSwitchCapOutClkDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIMax(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIMax.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIMax(task, channel, data);
#else
  return function_pointers_.GetAIMax(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIMeasType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIMeasType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIMeasType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIMeasType(task, channel, data);
#else
  return function_pointers_.GetAIMeasType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIMemMapEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIMemMapEnable(task, channel, data);
#else
  return function_pointers_.GetAIMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIMicrophoneSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIMicrophoneSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIMicrophoneSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIMicrophoneSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIMicrophoneSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIMin(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIMin.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIMin(task, channel, data);
#else
  return function_pointers_.GetAIMin(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIOpenChanDetectEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIOpenChanDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIOpenChanDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIOpenChanDetectEnable(task, channel, data);
#else
  return function_pointers_.GetAIOpenChanDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIOpenThrmcplDetectEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIOpenThrmcplDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIOpenThrmcplDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIOpenThrmcplDetectEnable(task, channel, data);
#else
  return function_pointers_.GetAIOpenThrmcplDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIOvercurrentDetectEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIOvercurrentDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIOvercurrentDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIOvercurrentDetectEnable(task, channel, data);
#else
  return function_pointers_.GetAIOvercurrentDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIPowerSupplyFaultDetectEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIPowerSupplyFaultDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIPowerSupplyFaultDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIPowerSupplyFaultDetectEnable(task, channel, data);
#else
  return function_pointers_.GetAIPowerSupplyFaultDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIPressureUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIPressureUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIPressureUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIPressureUnits(task, channel, data);
#else
  return function_pointers_.GetAIPressureUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIProbeAtten(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIProbeAtten) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIProbeAtten.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIProbeAtten(task, channel, data);
#else
  return function_pointers_.GetAIProbeAtten(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRTDA(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRTDA) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRTDA.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRTDA(task, channel, data);
#else
  return function_pointers_.GetAIRTDA(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRTDB(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRTDB) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRTDB.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRTDB(task, channel, data);
#else
  return function_pointers_.GetAIRTDB(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRTDC(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRTDC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRTDC.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRTDC(task, channel, data);
#else
  return function_pointers_.GetAIRTDC(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRTDR0(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRTDR0) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRTDR0.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRTDR0(task, channel, data);
#else
  return function_pointers_.GetAIRTDR0(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRTDType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRTDType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRTDType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRTDType(task, channel, data);
#else
  return function_pointers_.GetAIRTDType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRVDTSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRVDTSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRVDTSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRVDTSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIRVDTSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRVDTSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRVDTSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRVDTSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRVDTSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIRVDTSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRVDTUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRVDTUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRVDTUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRVDTUnits(task, channel, data);
#else
  return function_pointers_.GetAIRVDTUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRawDataCompressionType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRawDataCompressionType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRawDataCompressionType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRawDataCompressionType(task, channel, data);
#else
  return function_pointers_.GetAIRawDataCompressionType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRawSampJustification(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRawSampJustification) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRawSampJustification.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRawSampJustification(task, channel, data);
#else
  return function_pointers_.GetAIRawSampJustification(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRawSampSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIRawSampSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRawSampSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRawSampSize(task, channel, data);
#else
  return function_pointers_.GetAIRawSampSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRemoveFilterDelay(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIRemoveFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRemoveFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRemoveFilterDelay(task, channel, data);
#else
  return function_pointers_.GetAIRemoveFilterDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIResistanceCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIResistanceCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIResistanceCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIResistanceCfg(task, channel, data);
#else
  return function_pointers_.GetAIResistanceCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIResistanceUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIResistanceUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIResistanceUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIResistanceUnits(task, channel, data);
#else
  return function_pointers_.GetAIResistanceUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIResolution(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIResolution) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIResolution.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIResolution(task, channel, data);
#else
  return function_pointers_.GetAIResolution(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIResolutionUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIResolutionUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIResolutionUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIResolutionUnits(task, channel, data);
#else
  return function_pointers_.GetAIResolutionUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRngHigh(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRngHigh) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRngHigh.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRngHigh(task, channel, data);
#else
  return function_pointers_.GetAIRngHigh(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRngLow(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRngLow) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRngLow.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRngLow(task, channel, data);
#else
  return function_pointers_.GetAIRngLow(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRosetteStrainGageOrientation(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIRosetteStrainGageOrientation) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRosetteStrainGageOrientation.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRosetteStrainGageOrientation(task, channel, data);
#else
  return function_pointers_.GetAIRosetteStrainGageOrientation(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRosetteStrainGageRosetteMeasType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRosetteStrainGageRosetteMeasType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRosetteStrainGageRosetteMeasType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRosetteStrainGageRosetteMeasType(task, channel, data);
#else
  return function_pointers_.GetAIRosetteStrainGageRosetteMeasType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRosetteStrainGageRosetteType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIRosetteStrainGageRosetteType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRosetteStrainGageRosetteType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRosetteStrainGageRosetteType(task, channel, data);
#else
  return function_pointers_.GetAIRosetteStrainGageRosetteType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIRosetteStrainGageStrainChans(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAIRosetteStrainGageStrainChans) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIRosetteStrainGageStrainChans.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIRosetteStrainGageStrainChans(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAIRosetteStrainGageStrainChans(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAISampAndHoldEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAISampAndHoldEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISampAndHoldEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISampAndHoldEnable(task, channel, data);
#else
  return function_pointers_.GetAISampAndHoldEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAISensorPowerCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAISensorPowerCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISensorPowerCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISensorPowerCfg(task, channel, data);
#else
  return function_pointers_.GetAISensorPowerCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAISensorPowerType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAISensorPowerType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISensorPowerType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISensorPowerType(task, channel, data);
#else
  return function_pointers_.GetAISensorPowerType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAISensorPowerVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAISensorPowerVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISensorPowerVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISensorPowerVoltage(task, channel, data);
#else
  return function_pointers_.GetAISensorPowerVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAISoundPressureMaxSoundPressureLvl(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAISoundPressureMaxSoundPressureLvl) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISoundPressureMaxSoundPressureLvl.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISoundPressureMaxSoundPressureLvl(task, channel, data);
#else
  return function_pointers_.GetAISoundPressureMaxSoundPressureLvl(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAISoundPressureUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAISoundPressureUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISoundPressureUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISoundPressureUnits(task, channel, data);
#else
  return function_pointers_.GetAISoundPressureUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAISoundPressuredBRef(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAISoundPressuredBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAISoundPressuredBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAISoundPressuredBRef(task, channel, data);
#else
  return function_pointers_.GetAISoundPressuredBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIStrainGageCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIStrainGageCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIStrainGageCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIStrainGageCfg(task, channel, data);
#else
  return function_pointers_.GetAIStrainGageCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIStrainGageForceReadFromChan(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAIStrainGageForceReadFromChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIStrainGageForceReadFromChan.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIStrainGageForceReadFromChan(task, channel, data);
#else
  return function_pointers_.GetAIStrainGageForceReadFromChan(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIStrainGageGageFactor(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIStrainGageGageFactor) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIStrainGageGageFactor.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIStrainGageGageFactor(task, channel, data);
#else
  return function_pointers_.GetAIStrainGageGageFactor(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIStrainGagePoissonRatio(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIStrainGagePoissonRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIStrainGagePoissonRatio.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIStrainGagePoissonRatio(task, channel, data);
#else
  return function_pointers_.GetAIStrainGagePoissonRatio(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIStrainUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIStrainUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIStrainUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIStrainUnits(task, channel, data);
#else
  return function_pointers_.GetAIStrainUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAITEDSUnits(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAITEDSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAITEDSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAITEDSUnits(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAITEDSUnits(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAITempUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAITempUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAITempUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAITempUnits(task, channel, data);
#else
  return function_pointers_.GetAITempUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAITermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAITermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAITermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAITermCfg(task, channel, data);
#else
  return function_pointers_.GetAITermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmcplCJCChan(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAIThrmcplCJCChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmcplCJCChan.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmcplCJCChan(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAIThrmcplCJCChan(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmcplCJCSrc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIThrmcplCJCSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmcplCJCSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmcplCJCSrc(task, channel, data);
#else
  return function_pointers_.GetAIThrmcplCJCSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmcplCJCVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIThrmcplCJCVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmcplCJCVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmcplCJCVal(task, channel, data);
#else
  return function_pointers_.GetAIThrmcplCJCVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmcplLeadOffsetVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIThrmcplLeadOffsetVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmcplLeadOffsetVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmcplLeadOffsetVoltage(task, channel, data);
#else
  return function_pointers_.GetAIThrmcplLeadOffsetVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmcplScaleType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIThrmcplScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmcplScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmcplScaleType(task, channel, data);
#else
  return function_pointers_.GetAIThrmcplScaleType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmcplType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIThrmcplType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmcplType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmcplType(task, channel, data);
#else
  return function_pointers_.GetAIThrmcplType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmstrA(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIThrmstrA) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmstrA.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmstrA(task, channel, data);
#else
  return function_pointers_.GetAIThrmstrA(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmstrB(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIThrmstrB) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmstrB.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmstrB(task, channel, data);
#else
  return function_pointers_.GetAIThrmstrB(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmstrC(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIThrmstrC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmstrC.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmstrC(task, channel, data);
#else
  return function_pointers_.GetAIThrmstrC(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIThrmstrR1(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIThrmstrR1) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIThrmstrR1.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIThrmstrR1(task, channel, data);
#else
  return function_pointers_.GetAIThrmstrR1(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAITorqueUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAITorqueUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAITorqueUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAITorqueUnits(task, channel, data);
#else
  return function_pointers_.GetAITorqueUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.GetAIUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.GetAIUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVelocityIEPESensorSensitivity(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIVelocityIEPESensorSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVelocityIEPESensorSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVelocityIEPESensorSensitivity(task, channel, data);
#else
  return function_pointers_.GetAIVelocityIEPESensorSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVelocityIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIVelocityIEPESensorSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVelocityIEPESensorSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVelocityIEPESensorSensitivityUnits(task, channel, data);
#else
  return function_pointers_.GetAIVelocityIEPESensorSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVelocityIEPESensordBRef(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIVelocityIEPESensordBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVelocityIEPESensordBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVelocityIEPESensordBRef(task, channel, data);
#else
  return function_pointers_.GetAIVelocityIEPESensordBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVelocityUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIVelocityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVelocityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVelocityUnits(task, channel, data);
#else
  return function_pointers_.GetAIVelocityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVoltageACRMSUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIVoltageACRMSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVoltageACRMSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVoltageACRMSUnits(task, channel, data);
#else
  return function_pointers_.GetAIVoltageACRMSUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVoltageUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAIVoltageUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVoltageUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVoltageUnits(task, channel, data);
#else
  return function_pointers_.GetAIVoltageUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAIVoltagedBRef(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAIVoltagedBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAIVoltagedBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAIVoltagedBRef(task, channel, data);
#else
  return function_pointers_.GetAIVoltagedBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOCurrentUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOCurrentUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOCurrentUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOCurrentUnits(task, channel, data);
#else
  return function_pointers_.GetAOCurrentUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOCustomScaleName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAOCustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOCustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOCustomScaleName(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAOCustomScaleName(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAODACOffsetExtSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAODACOffsetExtSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACOffsetExtSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACOffsetExtSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAODACOffsetExtSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAODACOffsetSrc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAODACOffsetSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACOffsetSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACOffsetSrc(task, channel, data);
#else
  return function_pointers_.GetAODACOffsetSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACOffsetVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAODACOffsetVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACOffsetVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACOffsetVal(task, channel, data);
#else
  return function_pointers_.GetAODACOffsetVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACRefAllowConnToGnd(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAODACRefAllowConnToGnd) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRefAllowConnToGnd.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRefAllowConnToGnd(task, channel, data);
#else
  return function_pointers_.GetAODACRefAllowConnToGnd(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACRefConnToGnd(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAODACRefConnToGnd) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRefConnToGnd.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRefConnToGnd(task, channel, data);
#else
  return function_pointers_.GetAODACRefConnToGnd(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACRefExtSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetAODACRefExtSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRefExtSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRefExtSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetAODACRefExtSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetAODACRefSrc(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAODACRefSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRefSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRefSrc(task, channel, data);
#else
  return function_pointers_.GetAODACRefSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACRefVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAODACRefVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRefVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRefVal(task, channel, data);
#else
  return function_pointers_.GetAODACRefVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACRngHigh(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAODACRngHigh) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRngHigh.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRngHigh(task, channel, data);
#else
  return function_pointers_.GetAODACRngHigh(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODACRngLow(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAODACRngLow) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODACRngLow.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODACRngLow(task, channel, data);
#else
  return function_pointers_.GetAODACRngLow(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODataXferMech(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODataXferMech(task, channel, data);
#else
  return function_pointers_.GetAODataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODataXferReqCond(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODataXferReqCond(task, channel, data);
#else
  return function_pointers_.GetAODataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAODevScalingCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.GetAODevScalingCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAODevScalingCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAODevScalingCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.GetAODevScalingCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::GetAOEnhancedImageRejectionEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAOEnhancedImageRejectionEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOEnhancedImageRejectionEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOEnhancedImageRejectionEnable(task, channel, data);
#else
  return function_pointers_.GetAOEnhancedImageRejectionEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFilterDelay(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFilterDelay(task, channel, data);
#else
  return function_pointers_.GetAOFilterDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFilterDelayAdjustment(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFilterDelayAdjustment) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFilterDelayAdjustment.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFilterDelayAdjustment(task, channel, data);
#else
  return function_pointers_.GetAOFilterDelayAdjustment(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFilterDelayUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFilterDelayUnits(task, channel, data);
#else
  return function_pointers_.GetAOFilterDelayUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenAmplitude(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFuncGenAmplitude) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenAmplitude.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenAmplitude(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenAmplitude(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenFMDeviation(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFuncGenFMDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenFMDeviation.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenFMDeviation(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenFMDeviation(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFuncGenFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenFreq(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenModulationType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOFuncGenModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenModulationType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenModulationType(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenModulationType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenOffset(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFuncGenOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenOffset.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenOffset(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenOffset(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenSquareDutyCycle(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOFuncGenSquareDutyCycle) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenSquareDutyCycle.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenSquareDutyCycle(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenSquareDutyCycle(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOFuncGenType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOFuncGenType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOFuncGenType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOFuncGenType(task, channel, data);
#else
  return function_pointers_.GetAOFuncGenType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOGain(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOGain.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOGain(task, channel, data);
#else
  return function_pointers_.GetAOGain(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOIdleOutputBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOIdleOutputBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOIdleOutputBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOIdleOutputBehavior(task, channel, data);
#else
  return function_pointers_.GetAOIdleOutputBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOLoadImpedance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOLoadImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOLoadImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOLoadImpedance(task, channel, data);
#else
  return function_pointers_.GetAOLoadImpedance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOMax(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOMax.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOMax(task, channel, data);
#else
  return function_pointers_.GetAOMax(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOMemMapEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOMemMapEnable(task, channel, data);
#else
  return function_pointers_.GetAOMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOMin(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOMin.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOMin(task, channel, data);
#else
  return function_pointers_.GetAOMin(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOOutputImpedance(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOOutputImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOOutputImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOOutputImpedance(task, channel, data);
#else
  return function_pointers_.GetAOOutputImpedance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOOutputType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOOutputType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOOutputType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOOutputType(task, channel, data);
#else
  return function_pointers_.GetAOOutputType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOReglitchEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAOReglitchEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOReglitchEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOReglitchEnable(task, channel, data);
#else
  return function_pointers_.GetAOReglitchEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOResolution(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOResolution) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOResolution.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOResolution(task, channel, data);
#else
  return function_pointers_.GetAOResolution(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOResolutionUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOResolutionUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOResolutionUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOResolutionUnits(task, channel, data);
#else
  return function_pointers_.GetAOResolutionUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOTermCfg(task, channel, data);
#else
  return function_pointers_.GetAOTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.GetAOUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetAOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.GetAOUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetAOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOUseOnlyOnBrdMem(task, channel, data);
#else
  return function_pointers_.GetAOUseOnlyOnBrdMem(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOVoltageCurrentLimit(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetAOVoltageCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOVoltageCurrentLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOVoltageCurrentLimit(task, channel, data);
#else
  return function_pointers_.GetAOVoltageCurrentLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetAOVoltageUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetAOVoltageUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAOVoltageUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAOVoltageUnits(task, channel, data);
#else
  return function_pointers_.GetAOVoltageUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetArmStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetArmStartTrigTimestampVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetArmStartTrigTimestampVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetArmStartTrigTimestampVal(task, data);
#else
  return function_pointers_.GetArmStartTrigTimestampVal(task, data);
#endif
}

int32 NiDAQmxLibrary::GetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetArmStartTrigTrigWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetArmStartTrigTrigWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxGetArmStartTrigTrigWhen(task, data);
#else
  return function_pointers_.GetArmStartTrigTrigWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::GetAutoConfiguredCDAQSyncConnections(char portList[], uInt32 portListSize)
{
  if (!function_pointers_.GetAutoConfiguredCDAQSyncConnections) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetAutoConfiguredCDAQSyncConnections.");
  }
#if defined(_MSC_VER)
  return DAQmxGetAutoConfiguredCDAQSyncConnections(portList, portListSize);
#else
  return function_pointers_.GetAutoConfiguredCDAQSyncConnections(portList, portListSize);
#endif
}

int32 NiDAQmxLibrary::GetBufInputBufSize(TaskHandle task, uInt32* data)
{
  if (!function_pointers_.GetBufInputBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetBufInputBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetBufInputBufSize(task, data);
#else
  return function_pointers_.GetBufInputBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::GetBufInputOnbrdBufSize(TaskHandle task, uInt32* data)
{
  if (!function_pointers_.GetBufInputOnbrdBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetBufInputOnbrdBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetBufInputOnbrdBufSize(task, data);
#else
  return function_pointers_.GetBufInputOnbrdBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::GetBufOutputBufSize(TaskHandle task, uInt32* data)
{
  if (!function_pointers_.GetBufOutputBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetBufOutputBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetBufOutputBufSize(task, data);
#else
  return function_pointers_.GetBufOutputBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::GetBufOutputOnbrdBufSize(TaskHandle task, uInt32* data)
{
  if (!function_pointers_.GetBufOutputOnbrdBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetBufOutputOnbrdBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetBufOutputOnbrdBufSize(task, data);
#else
  return function_pointers_.GetBufOutputOnbrdBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::GetCIAngEncoderInitialAngle(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIAngEncoderInitialAngle) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIAngEncoderInitialAngle.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIAngEncoderInitialAngle(task, channel, data);
#else
  return function_pointers_.GetCIAngEncoderInitialAngle(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIAngEncoderPulsesPerRev) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIAngEncoderPulsesPerRev.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIAngEncoderPulsesPerRev(task, channel, data);
#else
  return function_pointers_.GetCIAngEncoderPulsesPerRev(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIAngEncoderUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIAngEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIAngEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIAngEncoderUnits(task, channel, data);
#else
  return function_pointers_.GetCIAngEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCICount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICount(task, channel, data);
#else
  return function_pointers_.GetCICount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesActiveEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesActiveEdge(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesCountDirDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirHyst(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirTermCfg(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountDirThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountDirThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountDirThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountDirThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountDirThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetActiveEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetActiveEdge(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesCountResetDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetHyst(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetResetCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetResetCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetResetCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetResetCount(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetResetCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesCountResetTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesCountResetTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetTermCfg(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesCountResetThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesCountResetThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesCountResetThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesCountResetThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesCountResetThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDir(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesDir) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDir.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDir(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesDir(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesDirTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesDirTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesDirTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesDirTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesDirTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesGateDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesGateDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesGateDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesGateDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesGateDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICountEdgesGateEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateEnable(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesGateHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateHyst(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesGateLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesGateTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesGateTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesGateTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateTermCfg(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesGateThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesGateWhen(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesGateWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesGateWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesGateWhen(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesGateWhen(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesHyst(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesInitialCnt(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCICountEdgesInitialCnt) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesInitialCnt.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesInitialCnt(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesInitialCnt(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICountEdgesTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICountEdgesTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICountEdgesTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesTermCfg(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICountEdgesThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICountEdgesThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICountEdgesThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICountEdgesThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCICountEdgesThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCICtrTimebaseActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseActiveEdge(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICtrTimebaseDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICtrTimebaseDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICtrTimebaseDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICtrTimebaseDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICtrTimebaseDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCICtrTimebaseDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCICtrTimebaseMasterTimebaseDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseMasterTimebaseDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseMasterTimebaseDiv(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseMasterTimebaseDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCICtrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCICtrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCICtrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICtrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICtrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICtrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICtrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCICustomScaleName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCICustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCICustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCICustomScaleName(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCICustomScaleName(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIDataXferMech(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDataXferMech(task, channel, data);
#else
  return function_pointers_.GetCIDataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDataXferReqCond(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDataXferReqCond(task, channel, data);
#else
  return function_pointers_.GetCIDataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDupCountPrevent(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIDupCountPrevent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDupCountPrevent.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDupCountPrevent(task, channel, data);
#else
  return function_pointers_.GetCIDupCountPrevent(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIDutyCycleDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIDutyCycleDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIDutyCycleDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIDutyCycleDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIDutyCycleDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIDutyCycleDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIDutyCycleDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIDutyCycleDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIDutyCycleLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIDutyCycleLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleStartingEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIDutyCycleStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleStartingEdge(task, channel, data);
#else
  return function_pointers_.GetCIDutyCycleStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIDutyCycleTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIDutyCycleTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIDutyCycleTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIDutyCycleTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIDutyCycleTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIDutyCycleTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIDutyCycleTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderAInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderAInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderAInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderAInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIEncoderAInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIEncoderAInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIEncoderAInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderAInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderAInputDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderAInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIEncoderAInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIEncoderAInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIEncoderAInputTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderAInputTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderAInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderAInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderAInputTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIEncoderAInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderBInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderBInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderBInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderBInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIEncoderBInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIEncoderBInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIEncoderBInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderBInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderBInputDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderBInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIEncoderBInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIEncoderBInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIEncoderBInputTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderBInputTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderBInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderBInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderBInputTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIEncoderBInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderDecodingType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderDecodingType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderDecodingType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderDecodingType(task, channel, data);
#else
  return function_pointers_.GetCIEncoderDecodingType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZIndexEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderZIndexEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZIndexEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZIndexEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZIndexEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZIndexPhase(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderZIndexPhase) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZIndexPhase.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZIndexPhase(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZIndexPhase(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZIndexVal(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderZIndexVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZIndexVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZIndexVal(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZIndexVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderZInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderZInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIEncoderZInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIEncoderZInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIEncoderZInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIEncoderZInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZInputDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderZInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIEncoderZInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIEncoderZInputTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIEncoderZInputTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIEncoderZInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIEncoderZInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIEncoderZInputTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIEncoderZInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFilterDelay(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFilterDelay(task, channel, data);
#else
  return function_pointers_.GetCIFilterDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFilterDelayUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFilterDelayUnits(task, channel, data);
#else
  return function_pointers_.GetCIFilterDelayUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFilterEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIFilterEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFilterEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFilterEnable(task, channel, data);
#else
  return function_pointers_.GetCIFilterEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFilterFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFilterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFilterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFilterFreq(task, channel, data);
#else
  return function_pointers_.GetCIFilterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFilterOrder(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIFilterOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFilterOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFilterOrder(task, channel, data);
#else
  return function_pointers_.GetCIFilterOrder(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFilterResponse(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFilterResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFilterResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFilterResponse(task, channel, data);
#else
  return function_pointers_.GetCIFilterResponse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIFreqDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIFreqDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFreqDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIFreqDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFreqDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIFreqDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIFreqDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIFreqDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIFreqDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIFreqDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIFreqDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqDiv(task, channel, data);
#else
  return function_pointers_.GetCIFreqDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqEnableAveraging(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIFreqEnableAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqEnableAveraging.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqEnableAveraging(task, channel, data);
#else
  return function_pointers_.GetCIFreqEnableAveraging(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFreqHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqHyst(task, channel, data);
#else
  return function_pointers_.GetCIFreqHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFreqLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIFreqLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqMeasMeth(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFreqMeasMeth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqMeasMeth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqMeasMeth(task, channel, data);
#else
  return function_pointers_.GetCIFreqMeasMeth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqMeasTime(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFreqMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqMeasTime(task, channel, data);
#else
  return function_pointers_.GetCIFreqMeasTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqStartingEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFreqStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqStartingEdge(task, channel, data);
#else
  return function_pointers_.GetCIFreqStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIFreqTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIFreqTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFreqTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIFreqTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIFreqThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCIFreqThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIFreqUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIFreqUnits(task, channel, data);
#else
  return function_pointers_.GetCIFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIGPSSyncMethod(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIGPSSyncMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIGPSSyncMethod.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIGPSSyncMethod(task, channel, data);
#else
  return function_pointers_.GetCIGPSSyncMethod(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIGPSSyncSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIGPSSyncSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIGPSSyncSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIGPSSyncSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIGPSSyncSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCILinEncoderDistPerPulse(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCILinEncoderDistPerPulse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCILinEncoderDistPerPulse.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCILinEncoderDistPerPulse(task, channel, data);
#else
  return function_pointers_.GetCILinEncoderDistPerPulse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCILinEncoderInitialPos(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCILinEncoderInitialPos) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCILinEncoderInitialPos.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCILinEncoderInitialPos(task, channel, data);
#else
  return function_pointers_.GetCILinEncoderInitialPos(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCILinEncoderUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCILinEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCILinEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCILinEncoderUnits(task, channel, data);
#else
  return function_pointers_.GetCILinEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIMax(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIMax.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIMax(task, channel, data);
#else
  return function_pointers_.GetCIMax(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIMaxMeasPeriod(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIMaxMeasPeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIMaxMeasPeriod.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIMaxMeasPeriod(task, channel, data);
#else
  return function_pointers_.GetCIMaxMeasPeriod(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIMeasType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIMeasType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIMeasType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIMeasType(task, channel, data);
#else
  return function_pointers_.GetCIMeasType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIMemMapEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIMemMapEnable(task, channel, data);
#else
  return function_pointers_.GetCIMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIMin(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIMin.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIMin(task, channel, data);
#else
  return function_pointers_.GetCIMin(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCINumPossiblyInvalidSamps(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCINumPossiblyInvalidSamps) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCINumPossiblyInvalidSamps.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCINumPossiblyInvalidSamps(task, channel, data);
#else
  return function_pointers_.GetCINumPossiblyInvalidSamps(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIOutputState(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIOutputState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIOutputState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIOutputState(task, channel, data);
#else
  return function_pointers_.GetCIOutputState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPeriodDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIPeriodDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPeriodDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIPeriodDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPeriodDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIPeriodDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPeriodDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPeriodDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPeriodDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIPeriodDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIPeriodDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodDiv(task, channel, data);
#else
  return function_pointers_.GetCIPeriodDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodEnableAveraging(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPeriodEnableAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodEnableAveraging.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodEnableAveraging(task, channel, data);
#else
  return function_pointers_.GetCIPeriodEnableAveraging(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodHyst(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPeriodHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodHyst(task, channel, data);
#else
  return function_pointers_.GetCIPeriodHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPeriodLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIPeriodLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodMeasMeth(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPeriodMeasMeth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodMeasMeth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodMeasMeth(task, channel, data);
#else
  return function_pointers_.GetCIPeriodMeasMeth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodMeasTime(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPeriodMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodMeasTime(task, channel, data);
#else
  return function_pointers_.GetCIPeriodMeasTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodStartingEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPeriodStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodStartingEdge(task, channel, data);
#else
  return function_pointers_.GetCIPeriodStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPeriodTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPeriodTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPeriodTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIPeriodTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPeriodThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCIPeriodThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPeriodUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPeriodUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPeriodUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPeriodUnits(task, channel, data);
#else
  return function_pointers_.GetCIPeriodUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPrescaler(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIPrescaler) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPrescaler.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPrescaler(task, channel, data);
#else
  return function_pointers_.GetCIPrescaler(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseFreqDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseFreqDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseFreqDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseFreqDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseFreqDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseFreqDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseFreqLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqStartEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseFreqStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqStartEdge(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqStartEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseFreqTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseFreqTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseFreqTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseFreqUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseFreqUnits(task, channel, data);
#else
  return function_pointers_.GetCIPulseFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseTicksDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseTicksDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseTicksDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseTicksDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseTicksDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseTicksDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTicksLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksStartEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTicksStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksStartEdge(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksStartEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseTicksTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseTicksTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTicksTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTicksTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTicksTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTicksTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIPulseTicksTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseTimeDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseTimeDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseTimeDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseTimeDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseTimeDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseTimeDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTimeLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeStartEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTimeStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeStartEdge(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeStartEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseTimeTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseTimeTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTimeTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseTimeUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseTimeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseTimeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseTimeUnits(task, channel, data);
#else
  return function_pointers_.GetCIPulseTimeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseWidthDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseWidthDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIPulseWidthDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseWidthDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseWidthDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIPulseWidthDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseWidthLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthStartingEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseWidthStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthStartingEdge(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIPulseWidthTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIPulseWidthTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseWidthTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIPulseWidthUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIPulseWidthUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIPulseWidthUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIPulseWidthUnits(task, channel, data);
#else
  return function_pointers_.GetCIPulseWidthUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISampClkOverrunBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCISampClkOverrunBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISampClkOverrunBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISampClkOverrunBehavior(task, channel, data);
#else
  return function_pointers_.GetCISampClkOverrunBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISampClkOverrunSentinelVal(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCISampClkOverrunSentinelVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISampClkOverrunSentinelVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISampClkOverrunSentinelVal(task, channel, data);
#else
  return function_pointers_.GetCISampClkOverrunSentinelVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCISemiPeriodDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCISemiPeriodDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCISemiPeriodDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCISemiPeriodDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCISemiPeriodDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCISemiPeriodDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCISemiPeriodLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodStartingEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCISemiPeriodStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodStartingEdge(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCISemiPeriodTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCISemiPeriodTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCISemiPeriodTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodTermCfg(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCISemiPeriodUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCISemiPeriodUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCISemiPeriodUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCISemiPeriodUnits(task, channel, data);
#else
  return function_pointers_.GetCISemiPeriodUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITCReached(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCITCReached) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITCReached.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITCReached(task, channel, data);
#else
  return function_pointers_.GetCITCReached(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIThreshVoltage(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIThreshVoltage(task, channel, data);
#else
  return function_pointers_.GetCIThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITimestampInitialSeconds(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCITimestampInitialSeconds) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITimestampInitialSeconds.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITimestampInitialSeconds(task, channel, data);
#else
  return function_pointers_.GetCITimestampInitialSeconds(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITimestampUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITimestampUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITimestampUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITimestampUnits(task, channel, data);
#else
  return function_pointers_.GetCITimestampUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstEdge(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCITwoEdgeSepFirstTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepFirstTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepFirstTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepFirstTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepFirstTermCfg(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepFirstTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondEdge(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCITwoEdgeSepSecondTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepSecondTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepSecondTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepSecondTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepSecondTermCfg(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepSecondTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCITwoEdgeSepUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCITwoEdgeSepUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCITwoEdgeSepUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCITwoEdgeSepUnits(task, channel, data);
#else
  return function_pointers_.GetCITwoEdgeSepUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.GetCIUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.GetCIUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIVelocityAngEncoderPulsesPerRev) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityAngEncoderPulsesPerRev.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityAngEncoderPulsesPerRev(task, channel, data);
#else
  return function_pointers_.GetCIVelocityAngEncoderPulsesPerRev(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityAngEncoderUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityAngEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityAngEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityAngEncoderUnits(task, channel, data);
#else
  return function_pointers_.GetCIVelocityAngEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCIVelocityDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityDiv(task, channel, data);
#else
  return function_pointers_.GetCIVelocityDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderAInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderAInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIVelocityEncoderAInputTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderAInputTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderAInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderAInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderAInputTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderAInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderBInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderBInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCIVelocityEncoderBInputTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderBInputTermCfg(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderBInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderBInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderBInputTermCfg(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderBInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityEncoderDecodingType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityEncoderDecodingType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityEncoderDecodingType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityEncoderDecodingType(task, channel, data);
#else
  return function_pointers_.GetCIVelocityEncoderDecodingType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityLinEncoderDistPerPulse(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIVelocityLinEncoderDistPerPulse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityLinEncoderDistPerPulse.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityLinEncoderDistPerPulse(task, channel, data);
#else
  return function_pointers_.GetCIVelocityLinEncoderDistPerPulse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityLinEncoderUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCIVelocityLinEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityLinEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityLinEncoderUnits(task, channel, data);
#else
  return function_pointers_.GetCIVelocityLinEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCIVelocityMeasTime(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCIVelocityMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCIVelocityMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCIVelocityMeasTime(task, channel, data);
#else
  return function_pointers_.GetCIVelocityMeasTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOAutoIncrCnt(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOAutoIncrCnt) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOAutoIncrCnt.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOAutoIncrCnt(task, channel, data);
#else
  return function_pointers_.GetCOAutoIncrCnt(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOConstrainedGenMode(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOConstrainedGenMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOConstrainedGenMode.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOConstrainedGenMode(task, channel, data);
#else
  return function_pointers_.GetCOConstrainedGenMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCount(task, channel, data);
#else
  return function_pointers_.GetCOCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOCtrTimebaseActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseActiveEdge(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCOCtrTimebaseDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOCtrTimebaseDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOCtrTimebaseDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCOCtrTimebaseDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCOCtrTimebaseDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCOCtrTimebaseDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOCtrTimebaseMasterTimebaseDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseMasterTimebaseDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseMasterTimebaseDiv(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseMasterTimebaseDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOCtrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetCOCtrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOCtrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCOCtrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOCtrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOCtrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCOCtrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCODataXferMech(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCODataXferMech(task, channel, data);
#else
  return function_pointers_.GetCODataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCODataXferReqCond(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCODataXferReqCond(task, channel, data);
#else
  return function_pointers_.GetCODataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOEnableInitialDelayOnRetrigger(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCOEnableInitialDelayOnRetrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOEnableInitialDelayOnRetrigger.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOEnableInitialDelayOnRetrigger(task, channel, data);
#else
  return function_pointers_.GetCOEnableInitialDelayOnRetrigger(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOMemMapEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOMemMapEnable(task, channel, data);
#else
  return function_pointers_.GetCOMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOOutputState(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOOutputState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOOutputState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOOutputState(task, channel, data);
#else
  return function_pointers_.GetCOOutputState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOOutputType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOOutputType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOOutputType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOOutputType(task, channel, data);
#else
  return function_pointers_.GetCOOutputType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPrescaler(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOPrescaler) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPrescaler.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPrescaler(task, channel, data);
#else
  return function_pointers_.GetCOPrescaler(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseDone(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCOPulseDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseDone.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseDone(task, channel, data);
#else
  return function_pointers_.GetCOPulseDone(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseDutyCyc(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOPulseDutyCyc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseDutyCyc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseDutyCyc(task, channel, data);
#else
  return function_pointers_.GetCOPulseDutyCyc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseFreq(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOPulseFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseFreq(task, channel, data);
#else
  return function_pointers_.GetCOPulseFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseFreqInitialDelay(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOPulseFreqInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseFreqInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseFreqInitialDelay(task, channel, data);
#else
  return function_pointers_.GetCOPulseFreqInitialDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseFreqUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOPulseFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseFreqUnits(task, channel, data);
#else
  return function_pointers_.GetCOPulseFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseHighTicks(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOPulseHighTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseHighTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseHighTicks(task, channel, data);
#else
  return function_pointers_.GetCOPulseHighTicks(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseHighTime(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOPulseHighTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseHighTime.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseHighTime(task, channel, data);
#else
  return function_pointers_.GetCOPulseHighTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseIdleState(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOPulseIdleState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseIdleState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseIdleState(task, channel, data);
#else
  return function_pointers_.GetCOPulseIdleState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseLowTicks(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOPulseLowTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseLowTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseLowTicks(task, channel, data);
#else
  return function_pointers_.GetCOPulseLowTicks(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseLowTime(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOPulseLowTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseLowTime.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseLowTime(task, channel, data);
#else
  return function_pointers_.GetCOPulseLowTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCOPulseTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseTerm(task, channel, data, bufferSize);
#else
  return function_pointers_.GetCOPulseTerm(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseTicksInitialDelay(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOPulseTicksInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseTicksInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseTicksInitialDelay(task, channel, data);
#else
  return function_pointers_.GetCOPulseTicksInitialDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseTimeInitialDelay(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetCOPulseTimeInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseTimeInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseTimeInitialDelay(task, channel, data);
#else
  return function_pointers_.GetCOPulseTimeInitialDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOPulseTimeUnits(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetCOPulseTimeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOPulseTimeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOPulseTimeUnits(task, channel, data);
#else
  return function_pointers_.GetCOPulseTimeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCORdyForNewVal(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCORdyForNewVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCORdyForNewVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCORdyForNewVal(task, channel, data);
#else
  return function_pointers_.GetCORdyForNewVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.GetCOUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetCOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.GetCOUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetCOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCOUseOnlyOnBrdMem(task, channel, data);
#else
  return function_pointers_.GetCOUseOnlyOnBrdMem(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetCalAccConnectionCount(const char deviceName[], uInt32* data)
{
  if (!function_pointers_.GetCalAccConnectionCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCalAccConnectionCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCalAccConnectionCount(deviceName, data);
#else
  return function_pointers_.GetCalAccConnectionCount(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetCalDevTemp(const char deviceName[], float64* data)
{
  if (!function_pointers_.GetCalDevTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCalDevTemp.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCalDevTemp(deviceName, data);
#else
  return function_pointers_.GetCalDevTemp(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetCalRecommendedAccConnectionCountLimit(const char deviceName[], uInt32* data)
{
  if (!function_pointers_.GetCalRecommendedAccConnectionCountLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCalRecommendedAccConnectionCountLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCalRecommendedAccConnectionCountLimit(deviceName, data);
#else
  return function_pointers_.GetCalRecommendedAccConnectionCountLimit(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetCalUserDefinedInfo(const char deviceName[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetCalUserDefinedInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCalUserDefinedInfo.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCalUserDefinedInfo(deviceName, data, bufferSize);
#else
  return function_pointers_.GetCalUserDefinedInfo(deviceName, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetCalUserDefinedInfoMaxSize(const char deviceName[], uInt32* data)
{
  if (!function_pointers_.GetCalUserDefinedInfoMaxSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetCalUserDefinedInfoMaxSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetCalUserDefinedInfoMaxSize(deviceName, data);
#else
  return function_pointers_.GetCalUserDefinedInfoMaxSize(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetChanDescr(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetChanDescr) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetChanDescr.");
  }
#if defined(_MSC_VER)
  return DAQmxGetChanDescr(task, channel, data, bufferSize);
#else
  return function_pointers_.GetChanDescr(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetChanIsGlobal(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetChanIsGlobal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetChanIsGlobal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetChanIsGlobal(task, channel, data);
#else
  return function_pointers_.GetChanIsGlobal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetChanSyncUnlockBehavior(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetChanSyncUnlockBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetChanSyncUnlockBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxGetChanSyncUnlockBehavior(task, channel, data);
#else
  return function_pointers_.GetChanSyncUnlockBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetChanType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetChanType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetChanType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetChanType(task, channel, data);
#else
  return function_pointers_.GetChanType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIAcquireOn(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDIAcquireOn) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIAcquireOn.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIAcquireOn(task, channel, data);
#else
  return function_pointers_.GetDIAcquireOn(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDataXferMech(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDataXferMech(task, channel, data);
#else
  return function_pointers_.GetDIDataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDataXferReqCond(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDataXferReqCond(task, channel, data);
#else
  return function_pointers_.GetDIDataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDigFltrEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDIDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDigFltrEnable(task, channel, data);
#else
  return function_pointers_.GetDIDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDigFltrEnableBusMode(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDIDigFltrEnableBusMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDigFltrEnableBusMode.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDigFltrEnableBusMode(task, channel, data);
#else
  return function_pointers_.GetDIDigFltrEnableBusMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetDIDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.GetDIDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetDIDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.GetDIDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetDIDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDigFltrTimebaseSrc(task, channel, data, bufferSize);
#else
  return function_pointers_.GetDIDigFltrTimebaseSrc(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetDIDigSyncEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDIDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIDigSyncEnable(task, channel, data);
#else
  return function_pointers_.GetDIDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIInvertLines(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDIInvertLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIInvertLines.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIInvertLines(task, channel, data);
#else
  return function_pointers_.GetDIInvertLines(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDILogicFamily(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDILogicFamily) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDILogicFamily.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDILogicFamily(task, channel, data);
#else
  return function_pointers_.GetDILogicFamily(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIMemMapEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIMemMapEnable(task, channel, data);
#else
  return function_pointers_.GetDIMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDINumLines(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetDINumLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDINumLines.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDINumLines(task, channel, data);
#else
  return function_pointers_.GetDINumLines(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDITristate(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDITristate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDITristate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDITristate(task, channel, data);
#else
  return function_pointers_.GetDITristate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetDIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.GetDIUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDIUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetDIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDIUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.GetDIUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDODataXferMech(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDODataXferMech(task, channel, data);
#else
  return function_pointers_.GetDODataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDODataXferReqCond(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDODataXferReqCond(task, channel, data);
#else
  return function_pointers_.GetDODataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOGenerateOn(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDOGenerateOn) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOGenerateOn.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOGenerateOn(task, channel, data);
#else
  return function_pointers_.GetDOGenerateOn(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOInvertLines(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDOInvertLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOInvertLines.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOInvertLines(task, channel, data);
#else
  return function_pointers_.GetDOInvertLines(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOLineStatesDoneState(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDOLineStatesDoneState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOLineStatesDoneState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOLineStatesDoneState(task, channel, data);
#else
  return function_pointers_.GetDOLineStatesDoneState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOLineStatesPausedState(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDOLineStatesPausedState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOLineStatesPausedState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOLineStatesPausedState(task, channel, data);
#else
  return function_pointers_.GetDOLineStatesPausedState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOLineStatesStartState(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDOLineStatesStartState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOLineStatesStartState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOLineStatesStartState(task, channel, data);
#else
  return function_pointers_.GetDOLineStatesStartState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOLogicFamily(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDOLogicFamily) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOLogicFamily.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOLogicFamily(task, channel, data);
#else
  return function_pointers_.GetDOLogicFamily(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOMemMapEnable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOMemMapEnable(task, channel, data);
#else
  return function_pointers_.GetDOMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDONumLines(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetDONumLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDONumLines.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDONumLines(task, channel, data);
#else
  return function_pointers_.GetDONumLines(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOOutputDriveType(TaskHandle task, const char channel[], int32* data)
{
  if (!function_pointers_.GetDOOutputDriveType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOOutputDriveType.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOOutputDriveType(task, channel, data);
#else
  return function_pointers_.GetDOOutputDriveType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOOvercurrentAutoReenable(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDOOvercurrentAutoReenable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOOvercurrentAutoReenable.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOOvercurrentAutoReenable(task, channel, data);
#else
  return function_pointers_.GetDOOvercurrentAutoReenable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOOvercurrentLimit(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetDOOvercurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOOvercurrentLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOOvercurrentLimit(task, channel, data);
#else
  return function_pointers_.GetDOOvercurrentLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOOvercurrentReenablePeriod(TaskHandle task, const char channel[], float64* data)
{
  if (!function_pointers_.GetDOOvercurrentReenablePeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOOvercurrentReenablePeriod.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOOvercurrentReenablePeriod(task, channel, data);
#else
  return function_pointers_.GetDOOvercurrentReenablePeriod(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOTristate(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDOTristate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOTristate.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOTristate(task, channel, data);
#else
  return function_pointers_.GetDOTristate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetDOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.GetDOUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data)
{
  if (!function_pointers_.GetDOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.GetDOUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32* data)
{
  if (!function_pointers_.GetDOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDOUseOnlyOnBrdMem(task, channel, data);
#else
  return function_pointers_.GetDOUseOnlyOnBrdMem(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::GetDigitalLogicFamilyPowerUpState(const char deviceName[], int32* logicFamily)
{
  if (!function_pointers_.GetDigitalLogicFamilyPowerUpState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDigitalLogicFamilyPowerUpState.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
#else
  return function_pointers_.GetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
#endif
}

int32 NiDAQmxLibrary::GetDisconnectedCDAQSyncPorts(char portList[], uInt32 portListSize)
{
  if (!function_pointers_.GetDisconnectedCDAQSyncPorts) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetDisconnectedCDAQSyncPorts.");
  }
#if defined(_MSC_VER)
  return DAQmxGetDisconnectedCDAQSyncPorts(portList, portListSize);
#else
  return function_pointers_.GetDisconnectedCDAQSyncPorts(portList, portListSize);
#endif
}

int32 NiDAQmxLibrary::GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize)
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetErrorString.");
  }
#if defined(_MSC_VER)
  return DAQmxGetErrorString(errorCode, errorString, bufferSize);
#else
  return function_pointers_.GetErrorString(errorCode, errorString, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetExtCalLastTemp(const char deviceName[], float64* data)
{
  if (!function_pointers_.GetExtCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetExtCalLastTemp.");
  }
#if defined(_MSC_VER)
  return DAQmxGetExtCalLastTemp(deviceName, data);
#else
  return function_pointers_.GetExtCalLastTemp(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetExtCalRecommendedInterval(const char deviceName[], uInt32* data)
{
  if (!function_pointers_.GetExtCalRecommendedInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetExtCalRecommendedInterval.");
  }
#if defined(_MSC_VER)
  return DAQmxGetExtCalRecommendedInterval(deviceName, data);
#else
  return function_pointers_.GetExtCalRecommendedInterval(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetExtendedErrorInfo(char errorString[], uInt32 bufferSize)
{
  if (!function_pointers_.GetExtendedErrorInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetExtendedErrorInfo.");
  }
#if defined(_MSC_VER)
  return DAQmxGetExtendedErrorInfo(errorString, bufferSize);
#else
  return function_pointers_.GetExtendedErrorInfo(errorString, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetFirstSampClkWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetFirstSampClkWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxGetFirstSampClkWhen(task, data);
#else
  return function_pointers_.GetFirstSampClkWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::GetFirstSampTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetFirstSampTimestampVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetFirstSampTimestampVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetFirstSampTimestampVal(task, data);
#else
  return function_pointers_.GetFirstSampTimestampVal(task, data);
#endif
}

int32 NiDAQmxLibrary::GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  if (!function_pointers_.GetNthTaskChannel) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetNthTaskChannel.");
  }
#if defined(_MSC_VER)
  return DAQmxGetNthTaskChannel(task, index, buffer, bufferSize);
#else
  return function_pointers_.GetNthTaskChannel(task, index, buffer, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  if (!function_pointers_.GetNthTaskDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetNthTaskDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxGetNthTaskDevice(task, index, buffer, bufferSize);
#else
  return function_pointers_.GetNthTaskDevice(task, index, buffer, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetNthTaskReadChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  if (!function_pointers_.GetNthTaskReadChannel) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetNthTaskReadChannel.");
  }
#if defined(_MSC_VER)
  return DAQmxGetNthTaskReadChannel(task, index, buffer, bufferSize);
#else
  return function_pointers_.GetNthTaskReadChannel(task, index, buffer, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetPhysicalChanName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize)
{
  if (!function_pointers_.GetPhysicalChanName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetPhysicalChanName.");
  }
#if defined(_MSC_VER)
  return DAQmxGetPhysicalChanName(task, channel, data, bufferSize);
#else
  return function_pointers_.GetPhysicalChanName(task, channel, data, bufferSize);
#endif
}

int32 NiDAQmxLibrary::GetRefTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetRefTrigTimestampVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetRefTrigTimestampVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetRefTrigTimestampVal(task, data);
#else
  return function_pointers_.GetRefTrigTimestampVal(task, data);
#endif
}

int32 NiDAQmxLibrary::GetSelfCalLastDateAndTime(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  if (!function_pointers_.GetSelfCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetSelfCalLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return DAQmxGetSelfCalLastDateAndTime(deviceName, year, month, day, hour, minute);
#else
  return function_pointers_.GetSelfCalLastDateAndTime(deviceName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::GetSelfCalLastTemp(const char deviceName[], float64* data)
{
  if (!function_pointers_.GetSelfCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetSelfCalLastTemp.");
  }
#if defined(_MSC_VER)
  return DAQmxGetSelfCalLastTemp(deviceName, data);
#else
  return function_pointers_.GetSelfCalLastTemp(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetSelfCalSupported(const char deviceName[], bool32* data)
{
  if (!function_pointers_.GetSelfCalSupported) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetSelfCalSupported.");
  }
#if defined(_MSC_VER)
  return DAQmxGetSelfCalSupported(deviceName, data);
#else
  return function_pointers_.GetSelfCalSupported(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::GetStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetStartTrigTimestampVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetStartTrigTimestampVal.");
  }
#if defined(_MSC_VER)
  return DAQmxGetStartTrigTimestampVal(task, data);
#else
  return function_pointers_.GetStartTrigTimestampVal(task, data);
#endif
}

int32 NiDAQmxLibrary::GetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetStartTrigTrigWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetStartTrigTrigWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxGetStartTrigTrigWhen(task, data);
#else
  return function_pointers_.GetStartTrigTrigWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::GetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  if (!function_pointers_.GetSyncPulseTimeWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxGetSyncPulseTimeWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxGetSyncPulseTimeWhen(task, data);
#else
  return function_pointers_.GetSyncPulseTimeWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::IsTaskDone(TaskHandle task, bool32* isTaskDone)
{
  if (!function_pointers_.IsTaskDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxIsTaskDone.");
  }
#if defined(_MSC_VER)
  return DAQmxIsTaskDone(task, isTaskDone);
#else
  return function_pointers_.IsTaskDone(task, isTaskDone);
#endif
}

int32 NiDAQmxLibrary::LoadTask(const char sessionName[], TaskHandle* task)
{
  if (!function_pointers_.LoadTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxLoadTask.");
  }
#if defined(_MSC_VER)
  return DAQmxLoadTask(sessionName, task);
#else
  return function_pointers_.LoadTask(sessionName, task);
#endif
}

int32 NiDAQmxLibrary::ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadAnalogF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadAnalogF64.");
  }
#if defined(_MSC_VER)
  return DAQmxReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadAnalogScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved)
{
  if (!function_pointers_.ReadAnalogScalarF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadAnalogScalarF64.");
  }
#if defined(_MSC_VER)
  return DAQmxReadAnalogScalarF64(task, timeout, value, reserved);
#else
  return function_pointers_.ReadAnalogScalarF64(task, timeout, value, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadBinaryI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadBinaryI16.");
  }
#if defined(_MSC_VER)
  return DAQmxReadBinaryI16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadBinaryI16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadBinaryI32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadBinaryI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadBinaryI32.");
  }
#if defined(_MSC_VER)
  return DAQmxReadBinaryI32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadBinaryI32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadBinaryU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadBinaryU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadBinaryU16.");
  }
#if defined(_MSC_VER)
  return DAQmxReadBinaryU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadBinaryU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadBinaryU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadBinaryU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadBinaryU32.");
  }
#if defined(_MSC_VER)
  return DAQmxReadBinaryU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadBinaryU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCounterF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCounterF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCounterF64.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCounterF64(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCounterF64(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCounterF64Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCounterF64Ex) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCounterF64Ex.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCounterF64Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCounterF64Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCounterScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved)
{
  if (!function_pointers_.ReadCounterScalarF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCounterScalarF64.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCounterScalarF64(task, timeout, value, reserved);
#else
  return function_pointers_.ReadCounterScalarF64(task, timeout, value, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCounterScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved)
{
  if (!function_pointers_.ReadCounterScalarU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCounterScalarU32.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCounterScalarU32(task, timeout, value, reserved);
#else
  return function_pointers_.ReadCounterScalarU32(task, timeout, value, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCounterU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCounterU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCounterU32.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCounterU32(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCounterU32(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCounterU32Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCounterU32Ex) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCounterU32Ex.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCounterU32Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCounterU32Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCtrFreq(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCtrFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCtrFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCtrFreq(task, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCtrFreq(task, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCtrFreqScalar(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved)
{
  if (!function_pointers_.ReadCtrFreqScalar) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCtrFreqScalar.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCtrFreqScalar(task, timeout, frequency, dutyCycle, reserved);
#else
  return function_pointers_.ReadCtrFreqScalar(task, timeout, frequency, dutyCycle, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCtrTicks(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCtrTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCtrTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCtrTicks(task, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCtrTicks(task, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCtrTicksScalar(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved)
{
  if (!function_pointers_.ReadCtrTicksScalar) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCtrTicksScalar.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCtrTicksScalar(task, timeout, highTicks, lowTicks, reserved);
#else
  return function_pointers_.ReadCtrTicksScalar(task, timeout, highTicks, lowTicks, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCtrTime(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadCtrTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCtrTime.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCtrTime(task, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadCtrTime(task, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadCtrTimeScalar(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved)
{
  if (!function_pointers_.ReadCtrTimeScalar) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadCtrTimeScalar.");
  }
#if defined(_MSC_VER)
  return DAQmxReadCtrTimeScalar(task, timeout, highTime, lowTime, reserved);
#else
  return function_pointers_.ReadCtrTimeScalar(task, timeout, highTime, lowTime, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalLines(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalLines.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalLines(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, reserved);
#else
  return function_pointers_.ReadDigitalLines(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalScalarU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalScalarU32.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalScalarU32(task, timeout, value, reserved);
#else
  return function_pointers_.ReadDigitalScalarU32(task, timeout, value, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalU16.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalU32.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadDigitalU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  if (!function_pointers_.ReadDigitalU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadDigitalU8.");
  }
#if defined(_MSC_VER)
  return DAQmxReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#else
  return function_pointers_.ReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
#endif
}

int32 NiDAQmxLibrary::ReadRaw(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved)
{
  if (!function_pointers_.ReadRaw) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReadRaw.");
  }
#if defined(_MSC_VER)
  return DAQmxReadRaw(task, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, reserved);
#else
  return function_pointers_.ReadRaw(task, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, reserved);
#endif
}

int32 NiDAQmxLibrary::RegisterDoneEvent(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData)
{
  if (!function_pointers_.RegisterDoneEvent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxRegisterDoneEvent.");
  }
#if defined(_MSC_VER)
  return DAQmxRegisterDoneEvent(task, options, callbackFunction, callbackData);
#else
  return function_pointers_.RegisterDoneEvent(task, options, callbackFunction, callbackData);
#endif
}

int32 NiDAQmxLibrary::RegisterEveryNSamplesEvent(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData)
{
  if (!function_pointers_.RegisterEveryNSamplesEvent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxRegisterEveryNSamplesEvent.");
  }
#if defined(_MSC_VER)
  return DAQmxRegisterEveryNSamplesEvent(task, everyNSamplesEventType, nSamples, options, callbackFunction, callbackData);
#else
  return function_pointers_.RegisterEveryNSamplesEvent(task, everyNSamplesEventType, nSamples, options, callbackFunction, callbackData);
#endif
}

int32 NiDAQmxLibrary::RegisterSignalEvent(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData)
{
  if (!function_pointers_.RegisterSignalEvent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxRegisterSignalEvent.");
  }
#if defined(_MSC_VER)
  return DAQmxRegisterSignalEvent(task, signalID, options, callbackFunction, callbackData);
#else
  return function_pointers_.RegisterSignalEvent(task, signalID, options, callbackFunction, callbackData);
#endif
}

int32 NiDAQmxLibrary::RemoveCDAQSyncConnection(const char portList[])
{
  if (!function_pointers_.RemoveCDAQSyncConnection) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxRemoveCDAQSyncConnection.");
  }
#if defined(_MSC_VER)
  return DAQmxRemoveCDAQSyncConnection(portList);
#else
  return function_pointers_.RemoveCDAQSyncConnection(portList);
#endif
}

int32 NiDAQmxLibrary::ReserveNetworkDevice(const char deviceName[], bool32 overrideReservation)
{
  if (!function_pointers_.ReserveNetworkDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxReserveNetworkDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxReserveNetworkDevice(deviceName, overrideReservation);
#else
  return function_pointers_.ReserveNetworkDevice(deviceName, overrideReservation);
#endif
}

int32 NiDAQmxLibrary::ResetAIACExcitFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIACExcitFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIACExcitFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIACExcitFreq(task, channel);
#else
  return function_pointers_.ResetAIACExcitFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIACExcitSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIACExcitSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIACExcitSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIACExcitSyncEnable(task, channel);
#else
  return function_pointers_.ResetAIACExcitSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIACExcitWireMode(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIACExcitWireMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIACExcitWireMode.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIACExcitWireMode(task, channel);
#else
  return function_pointers_.ResetAIACExcitWireMode(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIADCCustomTimingMode(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIADCCustomTimingMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIADCCustomTimingMode.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIADCCustomTimingMode(task, channel);
#else
  return function_pointers_.ResetAIADCCustomTimingMode(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIADCTimingMode(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIADCTimingMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIADCTimingMode.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIADCTimingMode(task, channel);
#else
  return function_pointers_.ResetAIADCTimingMode(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccel4WireDCVoltageSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccel4WireDCVoltageSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccel4WireDCVoltageSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccel4WireDCVoltageSensitivity(task, channel);
#else
  return function_pointers_.ResetAIAccel4WireDCVoltageSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccel4WireDCVoltageSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccel4WireDCVoltageSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccel4WireDCVoltageSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccel4WireDCVoltageSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIAccel4WireDCVoltageSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccelChargeSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccelChargeSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccelChargeSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccelChargeSensitivity(task, channel);
#else
  return function_pointers_.ResetAIAccelChargeSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccelChargeSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccelChargeSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccelChargeSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccelChargeSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIAccelChargeSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccelSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccelSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccelSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccelSensitivity(task, channel);
#else
  return function_pointers_.ResetAIAccelSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccelSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccelSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccelSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccelSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIAccelSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAccelUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAccelUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAccelUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAccelUnits(task, channel);
#else
  return function_pointers_.ResetAIAccelUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAcceldBRef(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAcceldBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAcceldBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAcceldBRef(task, channel);
#else
  return function_pointers_.ResetAIAcceldBRef(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAtten(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAtten) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAtten.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAtten(task, channel);
#else
  return function_pointers_.ResetAIAtten(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAutoZeroMode(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAutoZeroMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAutoZeroMode.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAutoZeroMode(task, channel);
#else
  return function_pointers_.ResetAIAutoZeroMode(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIAveragingWinSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIAveragingWinSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIAveragingWinSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIAveragingWinSize(task, channel);
#else
  return function_pointers_.ResetAIAveragingWinSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeBalanceCoarsePot(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeBalanceCoarsePot) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeBalanceCoarsePot.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeBalanceCoarsePot(task, channel);
#else
  return function_pointers_.ResetAIBridgeBalanceCoarsePot(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeBalanceFinePot(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeBalanceFinePot) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeBalanceFinePot.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeBalanceFinePot(task, channel);
#else
  return function_pointers_.ResetAIBridgeBalanceFinePot(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeCfg(task, channel);
#else
  return function_pointers_.ResetAIBridgeCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeElectricalUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeElectricalUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeElectricalUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeElectricalUnits(task, channel);
#else
  return function_pointers_.ResetAIBridgeElectricalUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeInitialRatio(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeInitialRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeInitialRatio.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeInitialRatio(task, channel);
#else
  return function_pointers_.ResetAIBridgeInitialRatio(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeInitialVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeInitialVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeInitialVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeInitialVoltage(task, channel);
#else
  return function_pointers_.ResetAIBridgeInitialVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeNomResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeNomResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeNomResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeNomResistance(task, channel);
#else
  return function_pointers_.ResetAIBridgeNomResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgePhysicalUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgePhysicalUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgePhysicalUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgePhysicalUnits(task, channel);
#else
  return function_pointers_.ResetAIBridgePhysicalUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgePolyForwardCoeff(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgePolyForwardCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgePolyForwardCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgePolyForwardCoeff(task, channel);
#else
  return function_pointers_.ResetAIBridgePolyForwardCoeff(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgePolyReverseCoeff(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgePolyReverseCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgePolyReverseCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgePolyReverseCoeff(task, channel);
#else
  return function_pointers_.ResetAIBridgePolyReverseCoeff(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeScaleType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeScaleType(task, channel);
#else
  return function_pointers_.ResetAIBridgeScaleType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalEnable(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalGainAdjust(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalGainAdjust) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalGainAdjust.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalGainAdjust(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalGainAdjust(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalSelect(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalSelect) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalSelect.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalSelect(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalSelect(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalShuntCalAActualResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalShuntCalAActualResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalShuntCalAActualResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalShuntCalAActualResistance(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalShuntCalAActualResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalShuntCalAResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalShuntCalAResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalShuntCalAResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalShuntCalAResistance(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalShuntCalAResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalShuntCalASrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalShuntCalASrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalShuntCalASrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalShuntCalASrc(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalShuntCalASrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalShuntCalBActualResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalShuntCalBActualResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalShuntCalBActualResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalShuntCalBActualResistance(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalShuntCalBActualResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeShuntCalShuntCalBResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeShuntCalShuntCalBResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeShuntCalShuntCalBResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeShuntCalShuntCalBResistance(task, channel);
#else
  return function_pointers_.ResetAIBridgeShuntCalShuntCalBResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeTableElectricalVals(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeTableElectricalVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeTableElectricalVals.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeTableElectricalVals(task, channel);
#else
  return function_pointers_.ResetAIBridgeTableElectricalVals(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeTablePhysicalVals(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeTablePhysicalVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeTablePhysicalVals.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeTablePhysicalVals(task, channel);
#else
  return function_pointers_.ResetAIBridgeTablePhysicalVals(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeTwoPointLinFirstElectricalVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeTwoPointLinFirstElectricalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeTwoPointLinFirstElectricalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeTwoPointLinFirstElectricalVal(task, channel);
#else
  return function_pointers_.ResetAIBridgeTwoPointLinFirstElectricalVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeTwoPointLinFirstPhysicalVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeTwoPointLinFirstPhysicalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal(task, channel);
#else
  return function_pointers_.ResetAIBridgeTwoPointLinFirstPhysicalVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeTwoPointLinSecondElectricalVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeTwoPointLinSecondElectricalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeTwoPointLinSecondElectricalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeTwoPointLinSecondElectricalVal(task, channel);
#else
  return function_pointers_.ResetAIBridgeTwoPointLinSecondElectricalVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeTwoPointLinSecondPhysicalVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeTwoPointLinSecondPhysicalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal(task, channel);
#else
  return function_pointers_.ResetAIBridgeTwoPointLinSecondPhysicalVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIBridgeUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIBridgeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIBridgeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIBridgeUnits(task, channel);
#else
  return function_pointers_.ResetAIBridgeUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalApplyCalIfExp(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalApplyCalIfExp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalApplyCalIfExp.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalApplyCalIfExp(task, channel);
#else
  return function_pointers_.ResetAIChanCalApplyCalIfExp(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalDesc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalDesc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalDesc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalDesc(task, channel);
#else
  return function_pointers_.ResetAIChanCalDesc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalEnableCal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalEnableCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalEnableCal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalEnableCal(task, channel);
#else
  return function_pointers_.ResetAIChanCalEnableCal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalOperatorName(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalOperatorName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalOperatorName.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalOperatorName(task, channel);
#else
  return function_pointers_.ResetAIChanCalOperatorName(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalPolyForwardCoeff(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalPolyForwardCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalPolyForwardCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalPolyForwardCoeff(task, channel);
#else
  return function_pointers_.ResetAIChanCalPolyForwardCoeff(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalPolyReverseCoeff(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalPolyReverseCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalPolyReverseCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalPolyReverseCoeff(task, channel);
#else
  return function_pointers_.ResetAIChanCalPolyReverseCoeff(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalScaleType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalScaleType(task, channel);
#else
  return function_pointers_.ResetAIChanCalScaleType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalTablePreScaledVals(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalTablePreScaledVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalTablePreScaledVals.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalTablePreScaledVals(task, channel);
#else
  return function_pointers_.ResetAIChanCalTablePreScaledVals(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalTableScaledVals(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalTableScaledVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalTableScaledVals.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalTableScaledVals(task, channel);
#else
  return function_pointers_.ResetAIChanCalTableScaledVals(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalVerifAcqVals(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalVerifAcqVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalVerifAcqVals.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalVerifAcqVals(task, channel);
#else
  return function_pointers_.ResetAIChanCalVerifAcqVals(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChanCalVerifRefVals(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChanCalVerifRefVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChanCalVerifRefVals.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChanCalVerifRefVals(task, channel);
#else
  return function_pointers_.ResetAIChanCalVerifRefVals(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChargeUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChargeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChargeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChargeUnits(task, channel);
#else
  return function_pointers_.ResetAIChargeUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIChopEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIChopEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIChopEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIChopEnable(task, channel);
#else
  return function_pointers_.ResetAIChopEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAICoupling(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAICoupling) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAICoupling.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAICoupling(task, channel);
#else
  return function_pointers_.ResetAICoupling(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAICurrentACRMSUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAICurrentACRMSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAICurrentACRMSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAICurrentACRMSUnits(task, channel);
#else
  return function_pointers_.ResetAICurrentACRMSUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAICurrentShuntLoc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAICurrentShuntLoc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAICurrentShuntLoc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAICurrentShuntLoc(task, channel);
#else
  return function_pointers_.ResetAICurrentShuntLoc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAICurrentShuntResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAICurrentShuntResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAICurrentShuntResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAICurrentShuntResistance(task, channel);
#else
  return function_pointers_.ResetAICurrentShuntResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAICurrentUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAICurrentUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAICurrentUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAICurrentUnits(task, channel);
#else
  return function_pointers_.ResetAICurrentUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAICustomScaleName(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAICustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAICustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAICustomScaleName(task, channel);
#else
  return function_pointers_.ResetAICustomScaleName(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDCOffset(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDCOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDCOffset.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDCOffset(task, channel);
#else
  return function_pointers_.ResetAIDCOffset(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDataXferCustomThreshold(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDataXferCustomThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDataXferCustomThreshold.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDataXferCustomThreshold(task, channel);
#else
  return function_pointers_.ResetAIDataXferCustomThreshold(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDataXferMaxRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDataXferMaxRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDataXferMaxRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDataXferMaxRate(task, channel);
#else
  return function_pointers_.ResetAIDataXferMaxRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDataXferMech(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDataXferMech(task, channel);
#else
  return function_pointers_.ResetAIDataXferMech(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDataXferReqCond(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDataXferReqCond(task, channel);
#else
  return function_pointers_.ResetAIDataXferReqCond(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrBandpassCenterFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrBandpassCenterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrBandpassCenterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrBandpassCenterFreq(task, channel);
#else
  return function_pointers_.ResetAIDigFltrBandpassCenterFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrBandpassWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrBandpassWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrBandpassWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrBandpassWidth(task, channel);
#else
  return function_pointers_.ResetAIDigFltrBandpassWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrCoeff(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrCoeff(task, channel);
#else
  return function_pointers_.ResetAIDigFltrCoeff(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetAIDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrHighpassCutoffFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrHighpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrHighpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrHighpassCutoffFreq(task, channel);
#else
  return function_pointers_.ResetAIDigFltrHighpassCutoffFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrLowpassCutoffFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrLowpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrLowpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrLowpassCutoffFreq(task, channel);
#else
  return function_pointers_.ResetAIDigFltrLowpassCutoffFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrNotchCenterFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrNotchCenterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrNotchCenterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrNotchCenterFreq(task, channel);
#else
  return function_pointers_.ResetAIDigFltrNotchCenterFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrNotchWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrNotchWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrNotchWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrNotchWidth(task, channel);
#else
  return function_pointers_.ResetAIDigFltrNotchWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrOrder(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrOrder(task, channel);
#else
  return function_pointers_.ResetAIDigFltrOrder(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrResponse(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrResponse(task, channel);
#else
  return function_pointers_.ResetAIDigFltrResponse(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDigFltrType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDigFltrType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDigFltrType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDigFltrType(task, channel);
#else
  return function_pointers_.ResetAIDigFltrType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIDitherEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIDitherEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIDitherEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIDitherEnable(task, channel);
#else
  return function_pointers_.ResetAIDitherEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIEddyCurrentProxProbeSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIEddyCurrentProxProbeSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIEddyCurrentProxProbeSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIEddyCurrentProxProbeSensitivity(task, channel);
#else
  return function_pointers_.ResetAIEddyCurrentProxProbeSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIEddyCurrentProxProbeSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIEddyCurrentProxProbeSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIEddyCurrentProxProbeSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIEddyCurrentProxProbeSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIEddyCurrentProxProbeSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIEddyCurrentProxProbeUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIEddyCurrentProxProbeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIEddyCurrentProxProbeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIEddyCurrentProxProbeUnits(task, channel);
#else
  return function_pointers_.ResetAIEddyCurrentProxProbeUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIEnhancedAliasRejectionEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIEnhancedAliasRejectionEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIEnhancedAliasRejectionEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIEnhancedAliasRejectionEnable(task, channel);
#else
  return function_pointers_.ResetAIEnhancedAliasRejectionEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitActualVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitActualVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitActualVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitActualVal(task, channel);
#else
  return function_pointers_.ResetAIExcitActualVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitDCorAC(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitDCorAC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitDCorAC.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitDCorAC(task, channel);
#else
  return function_pointers_.ResetAIExcitDCorAC(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitIdleOutputBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitIdleOutputBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitIdleOutputBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitIdleOutputBehavior(task, channel);
#else
  return function_pointers_.ResetAIExcitIdleOutputBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitSense(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitSense) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitSense.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitSense(task, channel);
#else
  return function_pointers_.ResetAIExcitSense(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitSrc(task, channel);
#else
  return function_pointers_.ResetAIExcitSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitUseForScaling(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitUseForScaling) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitUseForScaling.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitUseForScaling(task, channel);
#else
  return function_pointers_.ResetAIExcitUseForScaling(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitUseMultiplexed(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitUseMultiplexed) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitUseMultiplexed.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitUseMultiplexed(task, channel);
#else
  return function_pointers_.ResetAIExcitUseMultiplexed(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitVal(task, channel);
#else
  return function_pointers_.ResetAIExcitVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIExcitVoltageOrCurrent(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIExcitVoltageOrCurrent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIExcitVoltageOrCurrent.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIExcitVoltageOrCurrent(task, channel);
#else
  return function_pointers_.ResetAIExcitVoltageOrCurrent(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFilterDelayAdjustment(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFilterDelayAdjustment) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFilterDelayAdjustment.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFilterDelayAdjustment(task, channel);
#else
  return function_pointers_.ResetAIFilterDelayAdjustment(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFilterDelayUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFilterDelayUnits(task, channel);
#else
  return function_pointers_.ResetAIFilterDelayUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFilterEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFilterEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFilterEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFilterEnable(task, channel);
#else
  return function_pointers_.ResetAIFilterEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFilterFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFilterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFilterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFilterFreq(task, channel);
#else
  return function_pointers_.ResetAIFilterFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFilterOrder(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFilterOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFilterOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFilterOrder(task, channel);
#else
  return function_pointers_.ResetAIFilterOrder(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFilterResponse(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFilterResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFilterResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFilterResponse(task, channel);
#else
  return function_pointers_.ResetAIFilterResponse(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIForceIEPESensorSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIForceIEPESensorSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIForceIEPESensorSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIForceIEPESensorSensitivity(task, channel);
#else
  return function_pointers_.ResetAIForceIEPESensorSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIForceIEPESensorSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIForceIEPESensorSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIForceIEPESensorSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIForceIEPESensorSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIForceIEPESensorSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIForceReadFromChan(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIForceReadFromChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIForceReadFromChan.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIForceReadFromChan(task, channel);
#else
  return function_pointers_.ResetAIForceReadFromChan(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIForceUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIForceUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIForceUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIForceUnits(task, channel);
#else
  return function_pointers_.ResetAIForceUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFreqHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFreqHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFreqHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFreqHyst(task, channel);
#else
  return function_pointers_.ResetAIFreqHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFreqThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFreqThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFreqThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFreqThreshVoltage(task, channel);
#else
  return function_pointers_.ResetAIFreqThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIFreqUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIFreqUnits(task, channel);
#else
  return function_pointers_.ResetAIFreqUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIGain(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIGain.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIGain(task, channel);
#else
  return function_pointers_.ResetAIGain(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIImpedance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIImpedance(task, channel);
#else
  return function_pointers_.ResetAIImpedance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIInputLimitsFaultDetectEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIInputLimitsFaultDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIInputLimitsFaultDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIInputLimitsFaultDetectEnable(task, channel);
#else
  return function_pointers_.ResetAIInputLimitsFaultDetectEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIInputLimitsFaultDetectLowerLimit(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIInputLimitsFaultDetectLowerLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIInputLimitsFaultDetectLowerLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIInputLimitsFaultDetectLowerLimit(task, channel);
#else
  return function_pointers_.ResetAIInputLimitsFaultDetectLowerLimit(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIInputLimitsFaultDetectUpperLimit(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIInputLimitsFaultDetectUpperLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIInputLimitsFaultDetectUpperLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIInputLimitsFaultDetectUpperLimit(task, channel);
#else
  return function_pointers_.ResetAIInputLimitsFaultDetectUpperLimit(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIInputSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIInputSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIInputSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIInputSrc(task, channel);
#else
  return function_pointers_.ResetAIInputSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILVDTSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILVDTSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILVDTSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILVDTSensitivity(task, channel);
#else
  return function_pointers_.ResetAILVDTSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILVDTSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILVDTSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILVDTSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILVDTSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAILVDTSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILVDTUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILVDTUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILVDTUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILVDTUnits(task, channel);
#else
  return function_pointers_.ResetAILVDTUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILeadWireResistance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILeadWireResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILeadWireResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILeadWireResistance(task, channel);
#else
  return function_pointers_.ResetAILeadWireResistance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILossyLSBRemovalCompressedSampSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILossyLSBRemovalCompressedSampSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILossyLSBRemovalCompressedSampSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILossyLSBRemovalCompressedSampSize(task, channel);
#else
  return function_pointers_.ResetAILossyLSBRemovalCompressedSampSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILowpassCutoffFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILowpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILowpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILowpassCutoffFreq(task, channel);
#else
  return function_pointers_.ResetAILowpassCutoffFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILowpassEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILowpassEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILowpassEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILowpassEnable(task, channel);
#else
  return function_pointers_.ResetAILowpassEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILowpassSwitchCapClkSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILowpassSwitchCapClkSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILowpassSwitchCapClkSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILowpassSwitchCapClkSrc(task, channel);
#else
  return function_pointers_.ResetAILowpassSwitchCapClkSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILowpassSwitchCapExtClkDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILowpassSwitchCapExtClkDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILowpassSwitchCapExtClkDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILowpassSwitchCapExtClkDiv(task, channel);
#else
  return function_pointers_.ResetAILowpassSwitchCapExtClkDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILowpassSwitchCapExtClkFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILowpassSwitchCapExtClkFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILowpassSwitchCapExtClkFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILowpassSwitchCapExtClkFreq(task, channel);
#else
  return function_pointers_.ResetAILowpassSwitchCapExtClkFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAILowpassSwitchCapOutClkDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAILowpassSwitchCapOutClkDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAILowpassSwitchCapOutClkDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAILowpassSwitchCapOutClkDiv(task, channel);
#else
  return function_pointers_.ResetAILowpassSwitchCapOutClkDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIMax(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIMax.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIMax(task, channel);
#else
  return function_pointers_.ResetAIMax(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIMemMapEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIMemMapEnable(task, channel);
#else
  return function_pointers_.ResetAIMemMapEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIMicrophoneSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIMicrophoneSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIMicrophoneSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIMicrophoneSensitivity(task, channel);
#else
  return function_pointers_.ResetAIMicrophoneSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIMin(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIMin.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIMin(task, channel);
#else
  return function_pointers_.ResetAIMin(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIOpenChanDetectEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIOpenChanDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIOpenChanDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIOpenChanDetectEnable(task, channel);
#else
  return function_pointers_.ResetAIOpenChanDetectEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIOpenThrmcplDetectEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIOpenThrmcplDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIOpenThrmcplDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIOpenThrmcplDetectEnable(task, channel);
#else
  return function_pointers_.ResetAIOpenThrmcplDetectEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIOvercurrentDetectEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIOvercurrentDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIOvercurrentDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIOvercurrentDetectEnable(task, channel);
#else
  return function_pointers_.ResetAIOvercurrentDetectEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIPowerSupplyFaultDetectEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIPowerSupplyFaultDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIPowerSupplyFaultDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIPowerSupplyFaultDetectEnable(task, channel);
#else
  return function_pointers_.ResetAIPowerSupplyFaultDetectEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIPressureUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIPressureUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIPressureUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIPressureUnits(task, channel);
#else
  return function_pointers_.ResetAIPressureUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIProbeAtten(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIProbeAtten) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIProbeAtten.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIProbeAtten(task, channel);
#else
  return function_pointers_.ResetAIProbeAtten(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRTDA(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRTDA) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRTDA.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRTDA(task, channel);
#else
  return function_pointers_.ResetAIRTDA(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRTDB(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRTDB) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRTDB.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRTDB(task, channel);
#else
  return function_pointers_.ResetAIRTDB(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRTDC(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRTDC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRTDC.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRTDC(task, channel);
#else
  return function_pointers_.ResetAIRTDC(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRTDR0(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRTDR0) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRTDR0.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRTDR0(task, channel);
#else
  return function_pointers_.ResetAIRTDR0(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRTDType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRTDType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRTDType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRTDType(task, channel);
#else
  return function_pointers_.ResetAIRTDType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRVDTSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRVDTSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRVDTSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRVDTSensitivity(task, channel);
#else
  return function_pointers_.ResetAIRVDTSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRVDTSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRVDTSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRVDTSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRVDTSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIRVDTSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRVDTUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRVDTUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRVDTUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRVDTUnits(task, channel);
#else
  return function_pointers_.ResetAIRVDTUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRawDataCompressionType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRawDataCompressionType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRawDataCompressionType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRawDataCompressionType(task, channel);
#else
  return function_pointers_.ResetAIRawDataCompressionType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRemoveFilterDelay(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRemoveFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRemoveFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRemoveFilterDelay(task, channel);
#else
  return function_pointers_.ResetAIRemoveFilterDelay(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIResistanceCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIResistanceCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIResistanceCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIResistanceCfg(task, channel);
#else
  return function_pointers_.ResetAIResistanceCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIResistanceUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIResistanceUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIResistanceUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIResistanceUnits(task, channel);
#else
  return function_pointers_.ResetAIResistanceUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRngHigh(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRngHigh) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRngHigh.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRngHigh(task, channel);
#else
  return function_pointers_.ResetAIRngHigh(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRngLow(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRngLow) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRngLow.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRngLow(task, channel);
#else
  return function_pointers_.ResetAIRngLow(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRosetteStrainGageOrientation(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRosetteStrainGageOrientation) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRosetteStrainGageOrientation.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRosetteStrainGageOrientation(task, channel);
#else
  return function_pointers_.ResetAIRosetteStrainGageOrientation(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIRosetteStrainGageRosetteMeasType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIRosetteStrainGageRosetteMeasType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIRosetteStrainGageRosetteMeasType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIRosetteStrainGageRosetteMeasType(task, channel);
#else
  return function_pointers_.ResetAIRosetteStrainGageRosetteMeasType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISampAndHoldEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISampAndHoldEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISampAndHoldEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISampAndHoldEnable(task, channel);
#else
  return function_pointers_.ResetAISampAndHoldEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISensorPowerCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISensorPowerCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISensorPowerCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISensorPowerCfg(task, channel);
#else
  return function_pointers_.ResetAISensorPowerCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISensorPowerType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISensorPowerType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISensorPowerType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISensorPowerType(task, channel);
#else
  return function_pointers_.ResetAISensorPowerType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISensorPowerVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISensorPowerVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISensorPowerVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISensorPowerVoltage(task, channel);
#else
  return function_pointers_.ResetAISensorPowerVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISoundPressureMaxSoundPressureLvl(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISoundPressureMaxSoundPressureLvl) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISoundPressureMaxSoundPressureLvl.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISoundPressureMaxSoundPressureLvl(task, channel);
#else
  return function_pointers_.ResetAISoundPressureMaxSoundPressureLvl(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISoundPressureUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISoundPressureUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISoundPressureUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISoundPressureUnits(task, channel);
#else
  return function_pointers_.ResetAISoundPressureUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAISoundPressuredBRef(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAISoundPressuredBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAISoundPressuredBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAISoundPressuredBRef(task, channel);
#else
  return function_pointers_.ResetAISoundPressuredBRef(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIStrainGageCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIStrainGageCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIStrainGageCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIStrainGageCfg(task, channel);
#else
  return function_pointers_.ResetAIStrainGageCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIStrainGageForceReadFromChan(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIStrainGageForceReadFromChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIStrainGageForceReadFromChan.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIStrainGageForceReadFromChan(task, channel);
#else
  return function_pointers_.ResetAIStrainGageForceReadFromChan(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIStrainGageGageFactor(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIStrainGageGageFactor) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIStrainGageGageFactor.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIStrainGageGageFactor(task, channel);
#else
  return function_pointers_.ResetAIStrainGageGageFactor(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIStrainGagePoissonRatio(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIStrainGagePoissonRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIStrainGagePoissonRatio.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIStrainGagePoissonRatio(task, channel);
#else
  return function_pointers_.ResetAIStrainGagePoissonRatio(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIStrainUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIStrainUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIStrainUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIStrainUnits(task, channel);
#else
  return function_pointers_.ResetAIStrainUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAITempUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAITempUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAITempUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAITempUnits(task, channel);
#else
  return function_pointers_.ResetAITempUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAITermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAITermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAITermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAITermCfg(task, channel);
#else
  return function_pointers_.ResetAITermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmcplCJCVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmcplCJCVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmcplCJCVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmcplCJCVal(task, channel);
#else
  return function_pointers_.ResetAIThrmcplCJCVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmcplLeadOffsetVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmcplLeadOffsetVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmcplLeadOffsetVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmcplLeadOffsetVoltage(task, channel);
#else
  return function_pointers_.ResetAIThrmcplLeadOffsetVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmcplScaleType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmcplScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmcplScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmcplScaleType(task, channel);
#else
  return function_pointers_.ResetAIThrmcplScaleType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmcplType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmcplType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmcplType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmcplType(task, channel);
#else
  return function_pointers_.ResetAIThrmcplType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmstrA(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmstrA) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmstrA.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmstrA(task, channel);
#else
  return function_pointers_.ResetAIThrmstrA(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmstrB(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmstrB) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmstrB.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmstrB(task, channel);
#else
  return function_pointers_.ResetAIThrmstrB(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmstrC(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmstrC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmstrC.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmstrC(task, channel);
#else
  return function_pointers_.ResetAIThrmstrC(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIThrmstrR1(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIThrmstrR1) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIThrmstrR1.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIThrmstrR1(task, channel);
#else
  return function_pointers_.ResetAIThrmstrR1(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAITorqueUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAITorqueUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAITorqueUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAITorqueUnits(task, channel);
#else
  return function_pointers_.ResetAITorqueUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIUsbXferReqCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIUsbXferReqCount(task, channel);
#else
  return function_pointers_.ResetAIUsbXferReqCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIUsbXferReqSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIUsbXferReqSize(task, channel);
#else
  return function_pointers_.ResetAIUsbXferReqSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVelocityIEPESensorSensitivity(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVelocityIEPESensorSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVelocityIEPESensorSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVelocityIEPESensorSensitivity(task, channel);
#else
  return function_pointers_.ResetAIVelocityIEPESensorSensitivity(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVelocityIEPESensorSensitivityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVelocityIEPESensorSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVelocityIEPESensorSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVelocityIEPESensorSensitivityUnits(task, channel);
#else
  return function_pointers_.ResetAIVelocityIEPESensorSensitivityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVelocityIEPESensordBRef(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVelocityIEPESensordBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVelocityIEPESensordBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVelocityIEPESensordBRef(task, channel);
#else
  return function_pointers_.ResetAIVelocityIEPESensordBRef(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVelocityUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVelocityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVelocityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVelocityUnits(task, channel);
#else
  return function_pointers_.ResetAIVelocityUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVoltageACRMSUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVoltageACRMSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVoltageACRMSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVoltageACRMSUnits(task, channel);
#else
  return function_pointers_.ResetAIVoltageACRMSUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVoltageUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVoltageUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVoltageUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVoltageUnits(task, channel);
#else
  return function_pointers_.ResetAIVoltageUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAIVoltagedBRef(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAIVoltagedBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAIVoltagedBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAIVoltagedBRef(task, channel);
#else
  return function_pointers_.ResetAIVoltagedBRef(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOCurrentUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOCurrentUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOCurrentUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOCurrentUnits(task, channel);
#else
  return function_pointers_.ResetAOCurrentUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOCustomScaleName(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOCustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOCustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOCustomScaleName(task, channel);
#else
  return function_pointers_.ResetAOCustomScaleName(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACOffsetExtSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACOffsetExtSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACOffsetExtSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACOffsetExtSrc(task, channel);
#else
  return function_pointers_.ResetAODACOffsetExtSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACOffsetSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACOffsetSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACOffsetSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACOffsetSrc(task, channel);
#else
  return function_pointers_.ResetAODACOffsetSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACOffsetVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACOffsetVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACOffsetVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACOffsetVal(task, channel);
#else
  return function_pointers_.ResetAODACOffsetVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRefAllowConnToGnd(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRefAllowConnToGnd) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRefAllowConnToGnd.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRefAllowConnToGnd(task, channel);
#else
  return function_pointers_.ResetAODACRefAllowConnToGnd(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRefConnToGnd(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRefConnToGnd) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRefConnToGnd.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRefConnToGnd(task, channel);
#else
  return function_pointers_.ResetAODACRefConnToGnd(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRefExtSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRefExtSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRefExtSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRefExtSrc(task, channel);
#else
  return function_pointers_.ResetAODACRefExtSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRefSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRefSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRefSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRefSrc(task, channel);
#else
  return function_pointers_.ResetAODACRefSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRefVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRefVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRefVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRefVal(task, channel);
#else
  return function_pointers_.ResetAODACRefVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRngHigh(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRngHigh) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRngHigh.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRngHigh(task, channel);
#else
  return function_pointers_.ResetAODACRngHigh(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODACRngLow(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODACRngLow) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODACRngLow.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODACRngLow(task, channel);
#else
  return function_pointers_.ResetAODACRngLow(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODataXferMech(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODataXferMech(task, channel);
#else
  return function_pointers_.ResetAODataXferMech(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAODataXferReqCond(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAODataXferReqCond(task, channel);
#else
  return function_pointers_.ResetAODataXferReqCond(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOEnhancedImageRejectionEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOEnhancedImageRejectionEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOEnhancedImageRejectionEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOEnhancedImageRejectionEnable(task, channel);
#else
  return function_pointers_.ResetAOEnhancedImageRejectionEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFilterDelay(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFilterDelay(task, channel);
#else
  return function_pointers_.ResetAOFilterDelay(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFilterDelayAdjustment(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFilterDelayAdjustment) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFilterDelayAdjustment.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFilterDelayAdjustment(task, channel);
#else
  return function_pointers_.ResetAOFilterDelayAdjustment(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFilterDelayUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFilterDelayUnits(task, channel);
#else
  return function_pointers_.ResetAOFilterDelayUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenAmplitude(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenAmplitude) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenAmplitude.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenAmplitude(task, channel);
#else
  return function_pointers_.ResetAOFuncGenAmplitude(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenFMDeviation(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenFMDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenFMDeviation.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenFMDeviation(task, channel);
#else
  return function_pointers_.ResetAOFuncGenFMDeviation(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenFreq(task, channel);
#else
  return function_pointers_.ResetAOFuncGenFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenModulationType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenModulationType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenModulationType(task, channel);
#else
  return function_pointers_.ResetAOFuncGenModulationType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenOffset(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenOffset.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenOffset(task, channel);
#else
  return function_pointers_.ResetAOFuncGenOffset(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenSquareDutyCycle(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenSquareDutyCycle) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenSquareDutyCycle.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenSquareDutyCycle(task, channel);
#else
  return function_pointers_.ResetAOFuncGenSquareDutyCycle(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOFuncGenType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOFuncGenType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOFuncGenType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOFuncGenType(task, channel);
#else
  return function_pointers_.ResetAOFuncGenType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOGain(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOGain.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOGain(task, channel);
#else
  return function_pointers_.ResetAOGain(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOIdleOutputBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOIdleOutputBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOIdleOutputBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOIdleOutputBehavior(task, channel);
#else
  return function_pointers_.ResetAOIdleOutputBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOLoadImpedance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOLoadImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOLoadImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOLoadImpedance(task, channel);
#else
  return function_pointers_.ResetAOLoadImpedance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOMax(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOMax.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOMax(task, channel);
#else
  return function_pointers_.ResetAOMax(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOMemMapEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOMemMapEnable(task, channel);
#else
  return function_pointers_.ResetAOMemMapEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOMin(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOMin.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOMin(task, channel);
#else
  return function_pointers_.ResetAOMin(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOOutputImpedance(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOOutputImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOOutputImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOOutputImpedance(task, channel);
#else
  return function_pointers_.ResetAOOutputImpedance(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOReglitchEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOReglitchEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOReglitchEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOReglitchEnable(task, channel);
#else
  return function_pointers_.ResetAOReglitchEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOResolutionUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOResolutionUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOResolutionUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOResolutionUnits(task, channel);
#else
  return function_pointers_.ResetAOResolutionUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOTermCfg(task, channel);
#else
  return function_pointers_.ResetAOTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOUsbXferReqCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOUsbXferReqCount(task, channel);
#else
  return function_pointers_.ResetAOUsbXferReqCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOUsbXferReqSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOUsbXferReqSize(task, channel);
#else
  return function_pointers_.ResetAOUsbXferReqSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOUseOnlyOnBrdMem(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOUseOnlyOnBrdMem(task, channel);
#else
  return function_pointers_.ResetAOUseOnlyOnBrdMem(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOVoltageCurrentLimit(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOVoltageCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOVoltageCurrentLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOVoltageCurrentLimit(task, channel);
#else
  return function_pointers_.ResetAOVoltageCurrentLimit(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetAOVoltageUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetAOVoltageUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetAOVoltageUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetAOVoltageUnits(task, channel);
#else
  return function_pointers_.ResetAOVoltageUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetBufInputBufSize(TaskHandle task)
{
  if (!function_pointers_.ResetBufInputBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetBufInputBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetBufInputBufSize(task);
#else
  return function_pointers_.ResetBufInputBufSize(task);
#endif
}

int32 NiDAQmxLibrary::ResetBufOutputBufSize(TaskHandle task)
{
  if (!function_pointers_.ResetBufOutputBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetBufOutputBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetBufOutputBufSize(task);
#else
  return function_pointers_.ResetBufOutputBufSize(task);
#endif
}

int32 NiDAQmxLibrary::ResetBufOutputOnbrdBufSize(TaskHandle task)
{
  if (!function_pointers_.ResetBufOutputOnbrdBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetBufOutputOnbrdBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetBufOutputOnbrdBufSize(task);
#else
  return function_pointers_.ResetBufOutputOnbrdBufSize(task);
#endif
}

int32 NiDAQmxLibrary::ResetCIAngEncoderInitialAngle(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIAngEncoderInitialAngle) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIAngEncoderInitialAngle.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIAngEncoderInitialAngle(task, channel);
#else
  return function_pointers_.ResetCIAngEncoderInitialAngle(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIAngEncoderPulsesPerRev(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIAngEncoderPulsesPerRev) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIAngEncoderPulsesPerRev.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIAngEncoderPulsesPerRev(task, channel);
#else
  return function_pointers_.ResetCIAngEncoderPulsesPerRev(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIAngEncoderUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIAngEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIAngEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIAngEncoderUnits(task, channel);
#else
  return function_pointers_.ResetCIAngEncoderUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesActiveEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesActiveEdge(task, channel);
#else
  return function_pointers_.ResetCICountEdgesActiveEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirHyst(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirTermCfg(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountDirThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountDirThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountDirThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountDirThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountDirThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetActiveEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetActiveEdge(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetActiveEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetHyst(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetResetCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetResetCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetResetCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetResetCount(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetResetCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetTerm(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetTermCfg(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesCountResetThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesCountResetThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesCountResetThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesCountResetThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCICountEdgesCountResetThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDir(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDir) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDir.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDir(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDir(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesDirTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesDirTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesDirTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesDirTerm(task, channel);
#else
  return function_pointers_.ResetCICountEdgesDirTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateEnable(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateHyst(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateTerm(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateTermCfg(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesGateWhen(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesGateWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesGateWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesGateWhen(task, channel);
#else
  return function_pointers_.ResetCICountEdgesGateWhen(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesHyst(task, channel);
#else
  return function_pointers_.ResetCICountEdgesHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesInitialCnt(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesInitialCnt) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesInitialCnt.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesInitialCnt(task, channel);
#else
  return function_pointers_.ResetCICountEdgesInitialCnt(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCICountEdgesLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesTerm(task, channel);
#else
  return function_pointers_.ResetCICountEdgesTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesTermCfg(task, channel);
#else
  return function_pointers_.ResetCICountEdgesTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICountEdgesThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICountEdgesThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICountEdgesThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICountEdgesThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCICountEdgesThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseActiveEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseActiveEdge(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseActiveEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseMasterTimebaseDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseMasterTimebaseDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseMasterTimebaseDiv(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseMasterTimebaseDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICtrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICtrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICtrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICtrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCICtrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCICustomScaleName(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCICustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCICustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCICustomScaleName(task, channel);
#else
  return function_pointers_.ResetCICustomScaleName(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDataXferMech(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDataXferMech(task, channel);
#else
  return function_pointers_.ResetCIDataXferMech(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDataXferReqCond(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDataXferReqCond(task, channel);
#else
  return function_pointers_.ResetCIDataXferReqCond(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDupCountPrevent(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDupCountPrevent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDupCountPrevent.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDupCountPrevent(task, channel);
#else
  return function_pointers_.ResetCIDupCountPrevent(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleStartingEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleStartingEdge(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleStartingEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleTerm(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIDutyCycleTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIDutyCycleTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIDutyCycleTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIDutyCycleTermCfg(task, channel);
#else
  return function_pointers_.ResetCIDutyCycleTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputTerm(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderAInputTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderAInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderAInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderAInputTermCfg(task, channel);
#else
  return function_pointers_.ResetCIEncoderAInputTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputTerm(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderBInputTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderBInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderBInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderBInputTermCfg(task, channel);
#else
  return function_pointers_.ResetCIEncoderBInputTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderDecodingType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderDecodingType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderDecodingType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderDecodingType(task, channel);
#else
  return function_pointers_.ResetCIEncoderDecodingType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZIndexEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZIndexEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZIndexEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZIndexEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderZIndexEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZIndexPhase(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZIndexPhase) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZIndexPhase.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZIndexPhase(task, channel);
#else
  return function_pointers_.ResetCIEncoderZIndexPhase(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZIndexVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZIndexVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZIndexVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZIndexVal(task, channel);
#else
  return function_pointers_.ResetCIEncoderZIndexVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputTerm(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIEncoderZInputTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIEncoderZInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIEncoderZInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIEncoderZInputTermCfg(task, channel);
#else
  return function_pointers_.ResetCIEncoderZInputTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFilterDelayUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFilterDelayUnits(task, channel);
#else
  return function_pointers_.ResetCIFilterDelayUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFilterEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFilterEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFilterEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFilterEnable(task, channel);
#else
  return function_pointers_.ResetCIFilterEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFilterFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFilterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFilterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFilterFreq(task, channel);
#else
  return function_pointers_.ResetCIFilterFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFilterOrder(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFilterOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFilterOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFilterOrder(task, channel);
#else
  return function_pointers_.ResetCIFilterOrder(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFilterResponse(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFilterResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFilterResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFilterResponse(task, channel);
#else
  return function_pointers_.ResetCIFilterResponse(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIFreqDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIFreqDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIFreqDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIFreqDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIFreqDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqDiv(task, channel);
#else
  return function_pointers_.ResetCIFreqDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqEnableAveraging(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqEnableAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqEnableAveraging.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqEnableAveraging(task, channel);
#else
  return function_pointers_.ResetCIFreqEnableAveraging(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqHyst(task, channel);
#else
  return function_pointers_.ResetCIFreqHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIFreqLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqMeasMeth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqMeasMeth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqMeasMeth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqMeasMeth(task, channel);
#else
  return function_pointers_.ResetCIFreqMeasMeth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqMeasTime(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqMeasTime(task, channel);
#else
  return function_pointers_.ResetCIFreqMeasTime(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqStartingEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqStartingEdge(task, channel);
#else
  return function_pointers_.ResetCIFreqStartingEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqTerm(task, channel);
#else
  return function_pointers_.ResetCIFreqTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqTermCfg(task, channel);
#else
  return function_pointers_.ResetCIFreqTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCIFreqThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIFreqUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIFreqUnits(task, channel);
#else
  return function_pointers_.ResetCIFreqUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIGPSSyncMethod(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIGPSSyncMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIGPSSyncMethod.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIGPSSyncMethod(task, channel);
#else
  return function_pointers_.ResetCIGPSSyncMethod(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIGPSSyncSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIGPSSyncSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIGPSSyncSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIGPSSyncSrc(task, channel);
#else
  return function_pointers_.ResetCIGPSSyncSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCILinEncoderDistPerPulse(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCILinEncoderDistPerPulse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCILinEncoderDistPerPulse.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCILinEncoderDistPerPulse(task, channel);
#else
  return function_pointers_.ResetCILinEncoderDistPerPulse(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCILinEncoderInitialPos(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCILinEncoderInitialPos) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCILinEncoderInitialPos.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCILinEncoderInitialPos(task, channel);
#else
  return function_pointers_.ResetCILinEncoderInitialPos(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCILinEncoderUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCILinEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCILinEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCILinEncoderUnits(task, channel);
#else
  return function_pointers_.ResetCILinEncoderUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIMax(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIMax.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIMax(task, channel);
#else
  return function_pointers_.ResetCIMax(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIMaxMeasPeriod(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIMaxMeasPeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIMaxMeasPeriod.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIMaxMeasPeriod(task, channel);
#else
  return function_pointers_.ResetCIMaxMeasPeriod(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIMemMapEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIMemMapEnable(task, channel);
#else
  return function_pointers_.ResetCIMemMapEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIMin(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIMin.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIMin(task, channel);
#else
  return function_pointers_.ResetCIMin(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIPeriodDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIPeriodDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIPeriodDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIPeriodDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIPeriodDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodDiv(task, channel);
#else
  return function_pointers_.ResetCIPeriodDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodEnableAveraging(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodEnableAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodEnableAveraging.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodEnableAveraging(task, channel);
#else
  return function_pointers_.ResetCIPeriodEnableAveraging(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodHyst(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodHyst(task, channel);
#else
  return function_pointers_.ResetCIPeriodHyst(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIPeriodLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodMeasMeth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodMeasMeth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodMeasMeth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodMeasMeth(task, channel);
#else
  return function_pointers_.ResetCIPeriodMeasMeth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodMeasTime(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodMeasTime(task, channel);
#else
  return function_pointers_.ResetCIPeriodMeasTime(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodStartingEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodStartingEdge(task, channel);
#else
  return function_pointers_.ResetCIPeriodStartingEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodTerm(task, channel);
#else
  return function_pointers_.ResetCIPeriodTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodTermCfg(task, channel);
#else
  return function_pointers_.ResetCIPeriodTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCIPeriodThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPeriodUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPeriodUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPeriodUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPeriodUnits(task, channel);
#else
  return function_pointers_.ResetCIPeriodUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPrescaler(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPrescaler) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPrescaler.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPrescaler(task, channel);
#else
  return function_pointers_.ResetCIPrescaler(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqStartEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqStartEdge(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqStartEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqTerm(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqTermCfg(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseFreqUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseFreqUnits(task, channel);
#else
  return function_pointers_.ResetCIPulseFreqUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksStartEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksStartEdge(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksStartEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksTerm(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTicksTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTicksTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTicksTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTicksTermCfg(task, channel);
#else
  return function_pointers_.ResetCIPulseTicksTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeStartEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeStartEdge(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeStartEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeTerm(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeTermCfg(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseTimeUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseTimeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseTimeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseTimeUnits(task, channel);
#else
  return function_pointers_.ResetCIPulseTimeUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthStartingEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthStartingEdge(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthStartingEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthTerm(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthTermCfg(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIPulseWidthUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIPulseWidthUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIPulseWidthUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIPulseWidthUnits(task, channel);
#else
  return function_pointers_.ResetCIPulseWidthUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISampClkOverrunBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISampClkOverrunBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISampClkOverrunBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISampClkOverrunBehavior(task, channel);
#else
  return function_pointers_.ResetCISampClkOverrunBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISampClkOverrunSentinelVal(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISampClkOverrunSentinelVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISampClkOverrunSentinelVal.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISampClkOverrunSentinelVal(task, channel);
#else
  return function_pointers_.ResetCISampClkOverrunSentinelVal(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodStartingEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodStartingEdge(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodStartingEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodTerm(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodTermCfg(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCISemiPeriodUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCISemiPeriodUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCISemiPeriodUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCISemiPeriodUnits(task, channel);
#else
  return function_pointers_.ResetCISemiPeriodUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIThreshVoltage(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIThreshVoltage(task, channel);
#else
  return function_pointers_.ResetCIThreshVoltage(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITimestampInitialSeconds(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITimestampInitialSeconds) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITimestampInitialSeconds.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITimestampInitialSeconds(task, channel);
#else
  return function_pointers_.ResetCITimestampInitialSeconds(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITimestampUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITimestampUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITimestampUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITimestampUnits(task, channel);
#else
  return function_pointers_.ResetCITimestampUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstEdge(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstTerm(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepFirstTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepFirstTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepFirstTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepFirstTermCfg(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepFirstTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondEdge(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondTerm(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepSecondTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepSecondTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepSecondTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepSecondTermCfg(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepSecondTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCITwoEdgeSepUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCITwoEdgeSepUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCITwoEdgeSepUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCITwoEdgeSepUnits(task, channel);
#else
  return function_pointers_.ResetCITwoEdgeSepUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIUsbXferReqCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIUsbXferReqCount(task, channel);
#else
  return function_pointers_.ResetCIUsbXferReqCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIUsbXferReqSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIUsbXferReqSize(task, channel);
#else
  return function_pointers_.ResetCIUsbXferReqSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityAngEncoderPulsesPerRev(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityAngEncoderPulsesPerRev) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityAngEncoderPulsesPerRev.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityAngEncoderPulsesPerRev(task, channel);
#else
  return function_pointers_.ResetCIVelocityAngEncoderPulsesPerRev(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityAngEncoderUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityAngEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityAngEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityAngEncoderUnits(task, channel);
#else
  return function_pointers_.ResetCIVelocityAngEncoderUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityDiv(task, channel);
#else
  return function_pointers_.ResetCIVelocityDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputTerm(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderAInputTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderAInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderAInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderAInputTermCfg(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderAInputTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputLogicLvlBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputTerm(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderBInputTermCfg(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderBInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderBInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderBInputTermCfg(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderBInputTermCfg(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityEncoderDecodingType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityEncoderDecodingType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityEncoderDecodingType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityEncoderDecodingType(task, channel);
#else
  return function_pointers_.ResetCIVelocityEncoderDecodingType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityLinEncoderDistPerPulse(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityLinEncoderDistPerPulse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityLinEncoderDistPerPulse.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityLinEncoderDistPerPulse(task, channel);
#else
  return function_pointers_.ResetCIVelocityLinEncoderDistPerPulse(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityLinEncoderUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityLinEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityLinEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityLinEncoderUnits(task, channel);
#else
  return function_pointers_.ResetCIVelocityLinEncoderUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCIVelocityMeasTime(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCIVelocityMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCIVelocityMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCIVelocityMeasTime(task, channel);
#else
  return function_pointers_.ResetCIVelocityMeasTime(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOAutoIncrCnt(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOAutoIncrCnt) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOAutoIncrCnt.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOAutoIncrCnt(task, channel);
#else
  return function_pointers_.ResetCOAutoIncrCnt(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOConstrainedGenMode(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOConstrainedGenMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOConstrainedGenMode.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOConstrainedGenMode(task, channel);
#else
  return function_pointers_.ResetCOConstrainedGenMode(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseActiveEdge(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseActiveEdge(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseActiveEdge(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseMasterTimebaseDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseMasterTimebaseDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseMasterTimebaseDiv(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseMasterTimebaseDiv(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOCtrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOCtrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOCtrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOCtrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetCOCtrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCODataXferMech(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCODataXferMech(task, channel);
#else
  return function_pointers_.ResetCODataXferMech(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCODataXferReqCond(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCODataXferReqCond(task, channel);
#else
  return function_pointers_.ResetCODataXferReqCond(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOEnableInitialDelayOnRetrigger(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOEnableInitialDelayOnRetrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOEnableInitialDelayOnRetrigger.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOEnableInitialDelayOnRetrigger(task, channel);
#else
  return function_pointers_.ResetCOEnableInitialDelayOnRetrigger(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOMemMapEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOMemMapEnable(task, channel);
#else
  return function_pointers_.ResetCOMemMapEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPrescaler(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPrescaler) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPrescaler.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPrescaler(task, channel);
#else
  return function_pointers_.ResetCOPrescaler(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseDutyCyc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseDutyCyc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseDutyCyc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseDutyCyc(task, channel);
#else
  return function_pointers_.ResetCOPulseDutyCyc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseFreq(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseFreq(task, channel);
#else
  return function_pointers_.ResetCOPulseFreq(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseFreqInitialDelay(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseFreqInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseFreqInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseFreqInitialDelay(task, channel);
#else
  return function_pointers_.ResetCOPulseFreqInitialDelay(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseFreqUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseFreqUnits(task, channel);
#else
  return function_pointers_.ResetCOPulseFreqUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseHighTicks(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseHighTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseHighTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseHighTicks(task, channel);
#else
  return function_pointers_.ResetCOPulseHighTicks(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseHighTime(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseHighTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseHighTime.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseHighTime(task, channel);
#else
  return function_pointers_.ResetCOPulseHighTime(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseIdleState(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseIdleState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseIdleState.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseIdleState(task, channel);
#else
  return function_pointers_.ResetCOPulseIdleState(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseLowTicks(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseLowTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseLowTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseLowTicks(task, channel);
#else
  return function_pointers_.ResetCOPulseLowTicks(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseLowTime(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseLowTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseLowTime.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseLowTime(task, channel);
#else
  return function_pointers_.ResetCOPulseLowTime(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseTerm(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseTerm(task, channel);
#else
  return function_pointers_.ResetCOPulseTerm(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseTicksInitialDelay(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseTicksInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseTicksInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseTicksInitialDelay(task, channel);
#else
  return function_pointers_.ResetCOPulseTicksInitialDelay(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseTimeInitialDelay(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseTimeInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseTimeInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseTimeInitialDelay(task, channel);
#else
  return function_pointers_.ResetCOPulseTimeInitialDelay(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOPulseTimeUnits(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOPulseTimeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOPulseTimeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOPulseTimeUnits(task, channel);
#else
  return function_pointers_.ResetCOPulseTimeUnits(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOUsbXferReqCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOUsbXferReqCount(task, channel);
#else
  return function_pointers_.ResetCOUsbXferReqCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOUsbXferReqSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOUsbXferReqSize(task, channel);
#else
  return function_pointers_.ResetCOUsbXferReqSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetCOUseOnlyOnBrdMem(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetCOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetCOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxResetCOUseOnlyOnBrdMem(task, channel);
#else
  return function_pointers_.ResetCOUseOnlyOnBrdMem(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetChanDescr(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetChanDescr) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetChanDescr.");
  }
#if defined(_MSC_VER)
  return DAQmxResetChanDescr(task, channel);
#else
  return function_pointers_.ResetChanDescr(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetChanSyncUnlockBehavior(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetChanSyncUnlockBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetChanSyncUnlockBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxResetChanSyncUnlockBehavior(task, channel);
#else
  return function_pointers_.ResetChanSyncUnlockBehavior(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIAcquireOn(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIAcquireOn) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIAcquireOn.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIAcquireOn(task, channel);
#else
  return function_pointers_.ResetDIAcquireOn(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDataXferMech(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDataXferMech(task, channel);
#else
  return function_pointers_.ResetDIDataXferMech(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDataXferReqCond(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDataXferReqCond(task, channel);
#else
  return function_pointers_.ResetDIDataXferReqCond(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDigFltrEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDigFltrEnable(task, channel);
#else
  return function_pointers_.ResetDIDigFltrEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDigFltrEnableBusMode(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDigFltrEnableBusMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDigFltrEnableBusMode.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDigFltrEnableBusMode(task, channel);
#else
  return function_pointers_.ResetDIDigFltrEnableBusMode(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDigFltrMinPulseWidth(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDigFltrMinPulseWidth(task, channel);
#else
  return function_pointers_.ResetDIDigFltrMinPulseWidth(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDigFltrTimebaseRate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDigFltrTimebaseRate(task, channel);
#else
  return function_pointers_.ResetDIDigFltrTimebaseRate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDigFltrTimebaseSrc(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDigFltrTimebaseSrc(task, channel);
#else
  return function_pointers_.ResetDIDigFltrTimebaseSrc(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIDigSyncEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIDigSyncEnable(task, channel);
#else
  return function_pointers_.ResetDIDigSyncEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIInvertLines(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIInvertLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIInvertLines.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIInvertLines(task, channel);
#else
  return function_pointers_.ResetDIInvertLines(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDILogicFamily(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDILogicFamily) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDILogicFamily.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDILogicFamily(task, channel);
#else
  return function_pointers_.ResetDILogicFamily(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIMemMapEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIMemMapEnable(task, channel);
#else
  return function_pointers_.ResetDIMemMapEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDITristate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDITristate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDITristate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDITristate(task, channel);
#else
  return function_pointers_.ResetDITristate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIUsbXferReqCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIUsbXferReqCount(task, channel);
#else
  return function_pointers_.ResetDIUsbXferReqCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDIUsbXferReqSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDIUsbXferReqSize(task, channel);
#else
  return function_pointers_.ResetDIUsbXferReqSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDODataXferMech(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDODataXferMech(task, channel);
#else
  return function_pointers_.ResetDODataXferMech(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDODataXferReqCond(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDODataXferReqCond(task, channel);
#else
  return function_pointers_.ResetDODataXferReqCond(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOGenerateOn(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOGenerateOn) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOGenerateOn.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOGenerateOn(task, channel);
#else
  return function_pointers_.ResetDOGenerateOn(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOInvertLines(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOInvertLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOInvertLines.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOInvertLines(task, channel);
#else
  return function_pointers_.ResetDOInvertLines(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOLineStatesDoneState(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOLineStatesDoneState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOLineStatesDoneState.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOLineStatesDoneState(task, channel);
#else
  return function_pointers_.ResetDOLineStatesDoneState(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOLineStatesPausedState(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOLineStatesPausedState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOLineStatesPausedState.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOLineStatesPausedState(task, channel);
#else
  return function_pointers_.ResetDOLineStatesPausedState(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOLineStatesStartState(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOLineStatesStartState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOLineStatesStartState.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOLineStatesStartState(task, channel);
#else
  return function_pointers_.ResetDOLineStatesStartState(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOLogicFamily(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOLogicFamily) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOLogicFamily.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOLogicFamily(task, channel);
#else
  return function_pointers_.ResetDOLogicFamily(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOMemMapEnable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOMemMapEnable(task, channel);
#else
  return function_pointers_.ResetDOMemMapEnable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOOutputDriveType(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOOutputDriveType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOOutputDriveType.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOOutputDriveType(task, channel);
#else
  return function_pointers_.ResetDOOutputDriveType(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOOvercurrentAutoReenable(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOOvercurrentAutoReenable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOOvercurrentAutoReenable.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOOvercurrentAutoReenable(task, channel);
#else
  return function_pointers_.ResetDOOvercurrentAutoReenable(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOOvercurrentLimit(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOOvercurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOOvercurrentLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOOvercurrentLimit(task, channel);
#else
  return function_pointers_.ResetDOOvercurrentLimit(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOOvercurrentReenablePeriod(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOOvercurrentReenablePeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOOvercurrentReenablePeriod.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOOvercurrentReenablePeriod(task, channel);
#else
  return function_pointers_.ResetDOOvercurrentReenablePeriod(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOTristate(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOTristate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOTristate.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOTristate(task, channel);
#else
  return function_pointers_.ResetDOTristate(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOUsbXferReqCount(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOUsbXferReqCount(task, channel);
#else
  return function_pointers_.ResetDOUsbXferReqCount(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOUsbXferReqSize(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOUsbXferReqSize(task, channel);
#else
  return function_pointers_.ResetDOUsbXferReqSize(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDOUseOnlyOnBrdMem(TaskHandle task, const char channel[])
{
  if (!function_pointers_.ResetDOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDOUseOnlyOnBrdMem(task, channel);
#else
  return function_pointers_.ResetDOUseOnlyOnBrdMem(task, channel);
#endif
}

int32 NiDAQmxLibrary::ResetDevice(const char deviceName[])
{
  if (!function_pointers_.ResetDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxResetDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxResetDevice(deviceName);
#else
  return function_pointers_.ResetDevice(deviceName);
#endif
}

int32 NiDAQmxLibrary::SaveGlobalChan(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options)
{
  if (!function_pointers_.SaveGlobalChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSaveGlobalChan.");
  }
#if defined(_MSC_VER)
  return DAQmxSaveGlobalChan(task, channelName, saveAs, author, options);
#else
  return function_pointers_.SaveGlobalChan(task, channelName, saveAs, author, options);
#endif
}

int32 NiDAQmxLibrary::SaveScale(const char scaleName[], const char saveAs[], const char author[], uInt32 options)
{
  if (!function_pointers_.SaveScale) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSaveScale.");
  }
#if defined(_MSC_VER)
  return DAQmxSaveScale(scaleName, saveAs, author, options);
#else
  return function_pointers_.SaveScale(scaleName, saveAs, author, options);
#endif
}

int32 NiDAQmxLibrary::SaveTask(TaskHandle task, const char saveAs[], const char author[], uInt32 options)
{
  if (!function_pointers_.SaveTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSaveTask.");
  }
#if defined(_MSC_VER)
  return DAQmxSaveTask(task, saveAs, author, options);
#else
  return function_pointers_.SaveTask(task, saveAs, author, options);
#endif
}

int32 NiDAQmxLibrary::SelfCal(const char deviceName[])
{
  if (!function_pointers_.SelfCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSelfCal.");
  }
#if defined(_MSC_VER)
  return DAQmxSelfCal(deviceName);
#else
  return function_pointers_.SelfCal(deviceName);
#endif
}

int32 NiDAQmxLibrary::SelfTestDevice(const char deviceName[])
{
  if (!function_pointers_.SelfTestDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSelfTestDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxSelfTestDevice(deviceName);
#else
  return function_pointers_.SelfTestDevice(deviceName);
#endif
}

int32 NiDAQmxLibrary::SetAIACExcitFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIACExcitFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIACExcitFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIACExcitFreq(task, channel, data);
#else
  return function_pointers_.SetAIACExcitFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIACExcitSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIACExcitSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIACExcitSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIACExcitSyncEnable(task, channel, data);
#else
  return function_pointers_.SetAIACExcitSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIACExcitWireMode(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIACExcitWireMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIACExcitWireMode.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIACExcitWireMode(task, channel, data);
#else
  return function_pointers_.SetAIACExcitWireMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIADCCustomTimingMode(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIADCCustomTimingMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIADCCustomTimingMode.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIADCCustomTimingMode(task, channel, data);
#else
  return function_pointers_.SetAIADCCustomTimingMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIADCTimingMode(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIADCTimingMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIADCTimingMode.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIADCTimingMode(task, channel, data);
#else
  return function_pointers_.SetAIADCTimingMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccel4WireDCVoltageSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIAccel4WireDCVoltageSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccel4WireDCVoltageSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccel4WireDCVoltageSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIAccel4WireDCVoltageSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccel4WireDCVoltageSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIAccel4WireDCVoltageSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccel4WireDCVoltageSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccel4WireDCVoltageSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIAccel4WireDCVoltageSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccelChargeSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIAccelChargeSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccelChargeSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccelChargeSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIAccelChargeSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccelChargeSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIAccelChargeSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccelChargeSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccelChargeSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIAccelChargeSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccelSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIAccelSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccelSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccelSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIAccelSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccelSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIAccelSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccelSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccelSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIAccelSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAccelUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIAccelUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAccelUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAccelUnits(task, channel, data);
#else
  return function_pointers_.SetAIAccelUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAcceldBRef(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIAcceldBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAcceldBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAcceldBRef(task, channel, data);
#else
  return function_pointers_.SetAIAcceldBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAtten(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIAtten) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAtten.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAtten(task, channel, data);
#else
  return function_pointers_.SetAIAtten(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAutoZeroMode(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIAutoZeroMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAutoZeroMode.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAutoZeroMode(task, channel, data);
#else
  return function_pointers_.SetAIAutoZeroMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIAveragingWinSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIAveragingWinSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIAveragingWinSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIAveragingWinSize(task, channel, data);
#else
  return function_pointers_.SetAIAveragingWinSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeBalanceCoarsePot(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeBalanceCoarsePot) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeBalanceCoarsePot.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeBalanceCoarsePot(task, channel, data);
#else
  return function_pointers_.SetAIBridgeBalanceCoarsePot(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeBalanceFinePot(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeBalanceFinePot) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeBalanceFinePot.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeBalanceFinePot(task, channel, data);
#else
  return function_pointers_.SetAIBridgeBalanceFinePot(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeCfg(task, channel, data);
#else
  return function_pointers_.SetAIBridgeCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeElectricalUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeElectricalUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeElectricalUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeElectricalUnits(task, channel, data);
#else
  return function_pointers_.SetAIBridgeElectricalUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeInitialRatio(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeInitialRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeInitialRatio.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeInitialRatio(task, channel, data);
#else
  return function_pointers_.SetAIBridgeInitialRatio(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeInitialVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeInitialVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeInitialVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeInitialVoltage(task, channel, data);
#else
  return function_pointers_.SetAIBridgeInitialVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeNomResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeNomResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeNomResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeNomResistance(task, channel, data);
#else
  return function_pointers_.SetAIBridgeNomResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgePhysicalUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgePhysicalUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgePhysicalUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgePhysicalUnits(task, channel, data);
#else
  return function_pointers_.SetAIBridgePhysicalUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgePolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIBridgePolyForwardCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgePolyForwardCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgePolyForwardCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIBridgePolyForwardCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgePolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIBridgePolyReverseCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgePolyReverseCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgePolyReverseCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIBridgePolyReverseCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeScaleType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeScaleType(task, channel, data);
#else
  return function_pointers_.SetAIBridgeScaleType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalEnable(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalGainAdjust(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalGainAdjust) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalGainAdjust.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalGainAdjust(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalGainAdjust(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalSelect(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalSelect) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalSelect.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalSelect(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalSelect(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalShuntCalAActualResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalShuntCalAActualResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalShuntCalAActualResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalShuntCalAActualResistance(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalShuntCalAActualResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalShuntCalAResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalShuntCalAResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalShuntCalAResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalShuntCalAResistance(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalShuntCalAResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalShuntCalASrc(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalShuntCalASrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalShuntCalASrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalShuntCalASrc(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalShuntCalASrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalShuntCalBActualResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalShuntCalBActualResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalShuntCalBActualResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalShuntCalBActualResistance(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalShuntCalBActualResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeShuntCalShuntCalBResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeShuntCalShuntCalBResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeShuntCalShuntCalBResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeShuntCalShuntCalBResistance(task, channel, data);
#else
  return function_pointers_.SetAIBridgeShuntCalShuntCalBResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeTableElectricalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIBridgeTableElectricalVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeTableElectricalVals.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeTableElectricalVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIBridgeTableElectricalVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeTablePhysicalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIBridgeTablePhysicalVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeTablePhysicalVals.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeTablePhysicalVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIBridgeTablePhysicalVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeTwoPointLinFirstElectricalVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeTwoPointLinFirstElectricalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeTwoPointLinFirstElectricalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeTwoPointLinFirstElectricalVal(task, channel, data);
#else
  return function_pointers_.SetAIBridgeTwoPointLinFirstElectricalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeTwoPointLinFirstPhysicalVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeTwoPointLinFirstPhysicalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal(task, channel, data);
#else
  return function_pointers_.SetAIBridgeTwoPointLinFirstPhysicalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeTwoPointLinSecondElectricalVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeTwoPointLinSecondElectricalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeTwoPointLinSecondElectricalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeTwoPointLinSecondElectricalVal(task, channel, data);
#else
  return function_pointers_.SetAIBridgeTwoPointLinSecondElectricalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeTwoPointLinSecondPhysicalVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIBridgeTwoPointLinSecondPhysicalVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal(task, channel, data);
#else
  return function_pointers_.SetAIBridgeTwoPointLinSecondPhysicalVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIBridgeUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIBridgeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIBridgeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIBridgeUnits(task, channel, data);
#else
  return function_pointers_.SetAIBridgeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalApplyCalIfExp(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIChanCalApplyCalIfExp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalApplyCalIfExp.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalApplyCalIfExp(task, channel, data);
#else
  return function_pointers_.SetAIChanCalApplyCalIfExp(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  if (!function_pointers_.SetAIChanCalCalDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalCalDate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.SetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalDesc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAIChanCalDesc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalDesc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalDesc(task, channel, data);
#else
  return function_pointers_.SetAIChanCalDesc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalEnableCal(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIChanCalEnableCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalEnableCal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalEnableCal(task, channel, data);
#else
  return function_pointers_.SetAIChanCalEnableCal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  if (!function_pointers_.SetAIChanCalExpDate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalExpDate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#else
  return function_pointers_.SetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalOperatorName(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAIChanCalOperatorName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalOperatorName.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalOperatorName(task, channel, data);
#else
  return function_pointers_.SetAIChanCalOperatorName(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalPolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIChanCalPolyForwardCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalPolyForwardCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalPolyForwardCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIChanCalPolyForwardCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalPolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIChanCalPolyReverseCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalPolyReverseCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalPolyReverseCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIChanCalPolyReverseCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalScaleType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIChanCalScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalScaleType(task, channel, data);
#else
  return function_pointers_.SetAIChanCalScaleType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalTablePreScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIChanCalTablePreScaledVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalTablePreScaledVals.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalTablePreScaledVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIChanCalTablePreScaledVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalTableScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIChanCalTableScaledVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalTableScaledVals.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalTableScaledVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIChanCalTableScaledVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalVerifAcqVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIChanCalVerifAcqVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalVerifAcqVals.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalVerifAcqVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIChanCalVerifAcqVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIChanCalVerifRefVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIChanCalVerifRefVals) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChanCalVerifRefVals.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChanCalVerifRefVals(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIChanCalVerifRefVals(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIChargeUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIChargeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChargeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChargeUnits(task, channel, data);
#else
  return function_pointers_.SetAIChargeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIChopEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIChopEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIChopEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIChopEnable(task, channel, data);
#else
  return function_pointers_.SetAIChopEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAICoupling(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAICoupling) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAICoupling.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAICoupling(task, channel, data);
#else
  return function_pointers_.SetAICoupling(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAICurrentACRMSUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAICurrentACRMSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAICurrentACRMSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAICurrentACRMSUnits(task, channel, data);
#else
  return function_pointers_.SetAICurrentACRMSUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAICurrentShuntLoc(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAICurrentShuntLoc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAICurrentShuntLoc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAICurrentShuntLoc(task, channel, data);
#else
  return function_pointers_.SetAICurrentShuntLoc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAICurrentShuntResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAICurrentShuntResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAICurrentShuntResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAICurrentShuntResistance(task, channel, data);
#else
  return function_pointers_.SetAICurrentShuntResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAICurrentUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAICurrentUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAICurrentUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAICurrentUnits(task, channel, data);
#else
  return function_pointers_.SetAICurrentUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAICustomScaleName(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAICustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAICustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAICustomScaleName(task, channel, data);
#else
  return function_pointers_.SetAICustomScaleName(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDCOffset(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDCOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDCOffset.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDCOffset(task, channel, data);
#else
  return function_pointers_.SetAIDCOffset(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDataXferCustomThreshold(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIDataXferCustomThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDataXferCustomThreshold.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDataXferCustomThreshold(task, channel, data);
#else
  return function_pointers_.SetAIDataXferCustomThreshold(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDataXferMaxRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDataXferMaxRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDataXferMaxRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDataXferMaxRate(task, channel, data);
#else
  return function_pointers_.SetAIDataXferMaxRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDataXferMech(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDataXferMech(task, channel, data);
#else
  return function_pointers_.SetAIDataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDataXferReqCond(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDataXferReqCond(task, channel, data);
#else
  return function_pointers_.SetAIDataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrBandpassCenterFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDigFltrBandpassCenterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrBandpassCenterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrBandpassCenterFreq(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrBandpassCenterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrBandpassWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDigFltrBandpassWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrBandpassWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrBandpassWidth(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrBandpassWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements)
{
  if (!function_pointers_.SetAIDigFltrCoeff) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrCoeff.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrCoeff(task, channel, data, arraySizeInElements);
#else
  return function_pointers_.SetAIDigFltrCoeff(task, channel, data, arraySizeInElements);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrHighpassCutoffFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDigFltrHighpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrHighpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrHighpassCutoffFreq(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrHighpassCutoffFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrLowpassCutoffFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDigFltrLowpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrLowpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrLowpassCutoffFreq(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrLowpassCutoffFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrNotchCenterFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDigFltrNotchCenterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrNotchCenterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrNotchCenterFreq(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrNotchCenterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrNotchWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIDigFltrNotchWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrNotchWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrNotchWidth(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrNotchWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrOrder(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIDigFltrOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrOrder(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrOrder(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrResponse(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIDigFltrResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrResponse(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrResponse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDigFltrType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIDigFltrType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDigFltrType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDigFltrType(task, channel, data);
#else
  return function_pointers_.SetAIDigFltrType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIDitherEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIDitherEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIDitherEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIDitherEnable(task, channel, data);
#else
  return function_pointers_.SetAIDitherEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIEddyCurrentProxProbeSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIEddyCurrentProxProbeSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIEddyCurrentProxProbeSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIEddyCurrentProxProbeSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIEddyCurrentProxProbeSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIEddyCurrentProxProbeSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIEddyCurrentProxProbeSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIEddyCurrentProxProbeSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIEddyCurrentProxProbeSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIEddyCurrentProxProbeSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIEddyCurrentProxProbeUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIEddyCurrentProxProbeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIEddyCurrentProxProbeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIEddyCurrentProxProbeUnits(task, channel, data);
#else
  return function_pointers_.SetAIEddyCurrentProxProbeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIEnhancedAliasRejectionEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIEnhancedAliasRejectionEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIEnhancedAliasRejectionEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIEnhancedAliasRejectionEnable(task, channel, data);
#else
  return function_pointers_.SetAIEnhancedAliasRejectionEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitActualVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIExcitActualVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitActualVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitActualVal(task, channel, data);
#else
  return function_pointers_.SetAIExcitActualVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitDCorAC(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIExcitDCorAC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitDCorAC.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitDCorAC(task, channel, data);
#else
  return function_pointers_.SetAIExcitDCorAC(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitIdleOutputBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIExcitIdleOutputBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitIdleOutputBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitIdleOutputBehavior(task, channel, data);
#else
  return function_pointers_.SetAIExcitIdleOutputBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitSense(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIExcitSense) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitSense.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitSense(task, channel, data);
#else
  return function_pointers_.SetAIExcitSense(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitSrc(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIExcitSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitSrc(task, channel, data);
#else
  return function_pointers_.SetAIExcitSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitUseForScaling(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIExcitUseForScaling) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitUseForScaling.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitUseForScaling(task, channel, data);
#else
  return function_pointers_.SetAIExcitUseForScaling(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitUseMultiplexed(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIExcitUseMultiplexed) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitUseMultiplexed.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitUseMultiplexed(task, channel, data);
#else
  return function_pointers_.SetAIExcitUseMultiplexed(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIExcitVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitVal(task, channel, data);
#else
  return function_pointers_.SetAIExcitVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIExcitVoltageOrCurrent(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIExcitVoltageOrCurrent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIExcitVoltageOrCurrent.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIExcitVoltageOrCurrent(task, channel, data);
#else
  return function_pointers_.SetAIExcitVoltageOrCurrent(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFilterDelayAdjustment(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIFilterDelayAdjustment) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFilterDelayAdjustment.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFilterDelayAdjustment(task, channel, data);
#else
  return function_pointers_.SetAIFilterDelayAdjustment(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFilterDelayUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFilterDelayUnits(task, channel, data);
#else
  return function_pointers_.SetAIFilterDelayUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFilterEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIFilterEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFilterEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFilterEnable(task, channel, data);
#else
  return function_pointers_.SetAIFilterEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFilterFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIFilterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFilterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFilterFreq(task, channel, data);
#else
  return function_pointers_.SetAIFilterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFilterOrder(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIFilterOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFilterOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFilterOrder(task, channel, data);
#else
  return function_pointers_.SetAIFilterOrder(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFilterResponse(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIFilterResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFilterResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFilterResponse(task, channel, data);
#else
  return function_pointers_.SetAIFilterResponse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIForceIEPESensorSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIForceIEPESensorSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIForceIEPESensorSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIForceIEPESensorSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIForceIEPESensorSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIForceIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIForceIEPESensorSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIForceIEPESensorSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIForceIEPESensorSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIForceIEPESensorSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIForceReadFromChan(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIForceReadFromChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIForceReadFromChan.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIForceReadFromChan(task, channel, data);
#else
  return function_pointers_.SetAIForceReadFromChan(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIForceUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIForceUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIForceUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIForceUnits(task, channel, data);
#else
  return function_pointers_.SetAIForceUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFreqHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIFreqHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFreqHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFreqHyst(task, channel, data);
#else
  return function_pointers_.SetAIFreqHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFreqThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIFreqThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFreqThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFreqThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetAIFreqThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIFreqUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIFreqUnits(task, channel, data);
#else
  return function_pointers_.SetAIFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIGain(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIGain.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIGain(task, channel, data);
#else
  return function_pointers_.SetAIGain(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIInputLimitsFaultDetectEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIInputLimitsFaultDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIInputLimitsFaultDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIInputLimitsFaultDetectEnable(task, channel, data);
#else
  return function_pointers_.SetAIInputLimitsFaultDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIInputLimitsFaultDetectLowerLimit(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIInputLimitsFaultDetectLowerLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIInputLimitsFaultDetectLowerLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIInputLimitsFaultDetectLowerLimit(task, channel, data);
#else
  return function_pointers_.SetAIInputLimitsFaultDetectLowerLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIInputLimitsFaultDetectUpperLimit(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIInputLimitsFaultDetectUpperLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIInputLimitsFaultDetectUpperLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIInputLimitsFaultDetectUpperLimit(task, channel, data);
#else
  return function_pointers_.SetAIInputLimitsFaultDetectUpperLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIInputSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAIInputSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIInputSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIInputSrc(task, channel, data);
#else
  return function_pointers_.SetAIInputSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILVDTSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAILVDTSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILVDTSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILVDTSensitivity(task, channel, data);
#else
  return function_pointers_.SetAILVDTSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILVDTSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAILVDTSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILVDTSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILVDTSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAILVDTSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILVDTUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAILVDTUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILVDTUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILVDTUnits(task, channel, data);
#else
  return function_pointers_.SetAILVDTUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILeadWireResistance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAILeadWireResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILeadWireResistance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILeadWireResistance(task, channel, data);
#else
  return function_pointers_.SetAILeadWireResistance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILossyLSBRemovalCompressedSampSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAILossyLSBRemovalCompressedSampSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILossyLSBRemovalCompressedSampSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILossyLSBRemovalCompressedSampSize(task, channel, data);
#else
  return function_pointers_.SetAILossyLSBRemovalCompressedSampSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILowpassCutoffFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAILowpassCutoffFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILowpassCutoffFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILowpassCutoffFreq(task, channel, data);
#else
  return function_pointers_.SetAILowpassCutoffFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILowpassEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAILowpassEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILowpassEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILowpassEnable(task, channel, data);
#else
  return function_pointers_.SetAILowpassEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILowpassSwitchCapClkSrc(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAILowpassSwitchCapClkSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILowpassSwitchCapClkSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILowpassSwitchCapClkSrc(task, channel, data);
#else
  return function_pointers_.SetAILowpassSwitchCapClkSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILowpassSwitchCapExtClkDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAILowpassSwitchCapExtClkDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILowpassSwitchCapExtClkDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILowpassSwitchCapExtClkDiv(task, channel, data);
#else
  return function_pointers_.SetAILowpassSwitchCapExtClkDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILowpassSwitchCapExtClkFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAILowpassSwitchCapExtClkFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILowpassSwitchCapExtClkFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILowpassSwitchCapExtClkFreq(task, channel, data);
#else
  return function_pointers_.SetAILowpassSwitchCapExtClkFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAILowpassSwitchCapOutClkDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAILowpassSwitchCapOutClkDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAILowpassSwitchCapOutClkDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAILowpassSwitchCapOutClkDiv(task, channel, data);
#else
  return function_pointers_.SetAILowpassSwitchCapOutClkDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIMax(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIMax.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIMax(task, channel, data);
#else
  return function_pointers_.SetAIMax(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIMemMapEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIMemMapEnable(task, channel, data);
#else
  return function_pointers_.SetAIMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIMicrophoneSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIMicrophoneSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIMicrophoneSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIMicrophoneSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIMicrophoneSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIMin(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIMin.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIMin(task, channel, data);
#else
  return function_pointers_.SetAIMin(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIOpenChanDetectEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIOpenChanDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIOpenChanDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIOpenChanDetectEnable(task, channel, data);
#else
  return function_pointers_.SetAIOpenChanDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIOpenThrmcplDetectEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIOpenThrmcplDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIOpenThrmcplDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIOpenThrmcplDetectEnable(task, channel, data);
#else
  return function_pointers_.SetAIOpenThrmcplDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIOvercurrentDetectEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIOvercurrentDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIOvercurrentDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIOvercurrentDetectEnable(task, channel, data);
#else
  return function_pointers_.SetAIOvercurrentDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIPowerSupplyFaultDetectEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIPowerSupplyFaultDetectEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIPowerSupplyFaultDetectEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIPowerSupplyFaultDetectEnable(task, channel, data);
#else
  return function_pointers_.SetAIPowerSupplyFaultDetectEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIPressureUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIPressureUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIPressureUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIPressureUnits(task, channel, data);
#else
  return function_pointers_.SetAIPressureUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIProbeAtten(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIProbeAtten) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIProbeAtten.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIProbeAtten(task, channel, data);
#else
  return function_pointers_.SetAIProbeAtten(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRTDA(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRTDA) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRTDA.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRTDA(task, channel, data);
#else
  return function_pointers_.SetAIRTDA(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRTDB(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRTDB) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRTDB.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRTDB(task, channel, data);
#else
  return function_pointers_.SetAIRTDB(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRTDC(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRTDC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRTDC.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRTDC(task, channel, data);
#else
  return function_pointers_.SetAIRTDC(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRTDR0(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRTDR0) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRTDR0.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRTDR0(task, channel, data);
#else
  return function_pointers_.SetAIRTDR0(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRTDType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIRTDType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRTDType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRTDType(task, channel, data);
#else
  return function_pointers_.SetAIRTDType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRVDTSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRVDTSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRVDTSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRVDTSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIRVDTSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRVDTSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIRVDTSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRVDTSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRVDTSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIRVDTSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRVDTUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIRVDTUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRVDTUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRVDTUnits(task, channel, data);
#else
  return function_pointers_.SetAIRVDTUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRawDataCompressionType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIRawDataCompressionType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRawDataCompressionType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRawDataCompressionType(task, channel, data);
#else
  return function_pointers_.SetAIRawDataCompressionType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRemoveFilterDelay(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIRemoveFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRemoveFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRemoveFilterDelay(task, channel, data);
#else
  return function_pointers_.SetAIRemoveFilterDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIResistanceCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIResistanceCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIResistanceCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIResistanceCfg(task, channel, data);
#else
  return function_pointers_.SetAIResistanceCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIResistanceUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIResistanceUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIResistanceUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIResistanceUnits(task, channel, data);
#else
  return function_pointers_.SetAIResistanceUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRngHigh(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRngHigh) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRngHigh.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRngHigh(task, channel, data);
#else
  return function_pointers_.SetAIRngHigh(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRngLow(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRngLow) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRngLow.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRngLow(task, channel, data);
#else
  return function_pointers_.SetAIRngLow(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRosetteStrainGageOrientation(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIRosetteStrainGageOrientation) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRosetteStrainGageOrientation.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRosetteStrainGageOrientation(task, channel, data);
#else
  return function_pointers_.SetAIRosetteStrainGageOrientation(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIRosetteStrainGageRosetteMeasType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIRosetteStrainGageRosetteMeasType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIRosetteStrainGageRosetteMeasType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIRosetteStrainGageRosetteMeasType(task, channel, data);
#else
  return function_pointers_.SetAIRosetteStrainGageRosetteMeasType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISampAndHoldEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAISampAndHoldEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISampAndHoldEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISampAndHoldEnable(task, channel, data);
#else
  return function_pointers_.SetAISampAndHoldEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISensorPowerCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAISensorPowerCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISensorPowerCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISensorPowerCfg(task, channel, data);
#else
  return function_pointers_.SetAISensorPowerCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISensorPowerType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAISensorPowerType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISensorPowerType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISensorPowerType(task, channel, data);
#else
  return function_pointers_.SetAISensorPowerType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISensorPowerVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAISensorPowerVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISensorPowerVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISensorPowerVoltage(task, channel, data);
#else
  return function_pointers_.SetAISensorPowerVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISoundPressureMaxSoundPressureLvl(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAISoundPressureMaxSoundPressureLvl) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISoundPressureMaxSoundPressureLvl.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISoundPressureMaxSoundPressureLvl(task, channel, data);
#else
  return function_pointers_.SetAISoundPressureMaxSoundPressureLvl(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISoundPressureUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAISoundPressureUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISoundPressureUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISoundPressureUnits(task, channel, data);
#else
  return function_pointers_.SetAISoundPressureUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAISoundPressuredBRef(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAISoundPressuredBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAISoundPressuredBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAISoundPressuredBRef(task, channel, data);
#else
  return function_pointers_.SetAISoundPressuredBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIStrainGageCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIStrainGageCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIStrainGageCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIStrainGageCfg(task, channel, data);
#else
  return function_pointers_.SetAIStrainGageCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIStrainGageForceReadFromChan(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAIStrainGageForceReadFromChan) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIStrainGageForceReadFromChan.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIStrainGageForceReadFromChan(task, channel, data);
#else
  return function_pointers_.SetAIStrainGageForceReadFromChan(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIStrainGageGageFactor(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIStrainGageGageFactor) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIStrainGageGageFactor.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIStrainGageGageFactor(task, channel, data);
#else
  return function_pointers_.SetAIStrainGageGageFactor(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIStrainGagePoissonRatio(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIStrainGagePoissonRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIStrainGagePoissonRatio.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIStrainGagePoissonRatio(task, channel, data);
#else
  return function_pointers_.SetAIStrainGagePoissonRatio(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIStrainUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIStrainUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIStrainUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIStrainUnits(task, channel, data);
#else
  return function_pointers_.SetAIStrainUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAITempUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAITempUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAITempUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAITempUnits(task, channel, data);
#else
  return function_pointers_.SetAITempUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAITermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAITermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAITermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAITermCfg(task, channel, data);
#else
  return function_pointers_.SetAITermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmcplCJCVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIThrmcplCJCVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmcplCJCVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmcplCJCVal(task, channel, data);
#else
  return function_pointers_.SetAIThrmcplCJCVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmcplLeadOffsetVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIThrmcplLeadOffsetVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmcplLeadOffsetVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmcplLeadOffsetVoltage(task, channel, data);
#else
  return function_pointers_.SetAIThrmcplLeadOffsetVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmcplScaleType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIThrmcplScaleType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmcplScaleType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmcplScaleType(task, channel, data);
#else
  return function_pointers_.SetAIThrmcplScaleType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmcplType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIThrmcplType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmcplType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmcplType(task, channel, data);
#else
  return function_pointers_.SetAIThrmcplType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmstrA(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIThrmstrA) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmstrA.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmstrA(task, channel, data);
#else
  return function_pointers_.SetAIThrmstrA(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmstrB(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIThrmstrB) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmstrB.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmstrB(task, channel, data);
#else
  return function_pointers_.SetAIThrmstrB(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmstrC(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIThrmstrC) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmstrC.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmstrC(task, channel, data);
#else
  return function_pointers_.SetAIThrmstrC(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIThrmstrR1(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIThrmstrR1) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIThrmstrR1.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIThrmstrR1(task, channel, data);
#else
  return function_pointers_.SetAIThrmstrR1(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAITorqueUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAITorqueUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAITorqueUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAITorqueUnits(task, channel, data);
#else
  return function_pointers_.SetAITorqueUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.SetAIUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.SetAIUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVelocityIEPESensorSensitivity(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIVelocityIEPESensorSensitivity) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVelocityIEPESensorSensitivity.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVelocityIEPESensorSensitivity(task, channel, data);
#else
  return function_pointers_.SetAIVelocityIEPESensorSensitivity(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVelocityIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIVelocityIEPESensorSensitivityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVelocityIEPESensorSensitivityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVelocityIEPESensorSensitivityUnits(task, channel, data);
#else
  return function_pointers_.SetAIVelocityIEPESensorSensitivityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVelocityIEPESensordBRef(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIVelocityIEPESensordBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVelocityIEPESensordBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVelocityIEPESensordBRef(task, channel, data);
#else
  return function_pointers_.SetAIVelocityIEPESensordBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVelocityUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIVelocityUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVelocityUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVelocityUnits(task, channel, data);
#else
  return function_pointers_.SetAIVelocityUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVoltageACRMSUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIVoltageACRMSUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVoltageACRMSUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVoltageACRMSUnits(task, channel, data);
#else
  return function_pointers_.SetAIVoltageACRMSUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVoltageUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAIVoltageUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVoltageUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVoltageUnits(task, channel, data);
#else
  return function_pointers_.SetAIVoltageUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAIVoltagedBRef(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAIVoltagedBRef) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAIVoltagedBRef.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAIVoltagedBRef(task, channel, data);
#else
  return function_pointers_.SetAIVoltagedBRef(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOCurrentUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOCurrentUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOCurrentUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOCurrentUnits(task, channel, data);
#else
  return function_pointers_.SetAOCurrentUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOCustomScaleName(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAOCustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOCustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOCustomScaleName(task, channel, data);
#else
  return function_pointers_.SetAOCustomScaleName(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACOffsetExtSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAODACOffsetExtSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACOffsetExtSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACOffsetExtSrc(task, channel, data);
#else
  return function_pointers_.SetAODACOffsetExtSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACOffsetSrc(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAODACOffsetSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACOffsetSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACOffsetSrc(task, channel, data);
#else
  return function_pointers_.SetAODACOffsetSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACOffsetVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAODACOffsetVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACOffsetVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACOffsetVal(task, channel, data);
#else
  return function_pointers_.SetAODACOffsetVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRefAllowConnToGnd(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAODACRefAllowConnToGnd) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRefAllowConnToGnd.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRefAllowConnToGnd(task, channel, data);
#else
  return function_pointers_.SetAODACRefAllowConnToGnd(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRefConnToGnd(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAODACRefConnToGnd) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRefConnToGnd.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRefConnToGnd(task, channel, data);
#else
  return function_pointers_.SetAODACRefConnToGnd(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRefExtSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetAODACRefExtSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRefExtSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRefExtSrc(task, channel, data);
#else
  return function_pointers_.SetAODACRefExtSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRefSrc(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAODACRefSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRefSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRefSrc(task, channel, data);
#else
  return function_pointers_.SetAODACRefSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRefVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAODACRefVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRefVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRefVal(task, channel, data);
#else
  return function_pointers_.SetAODACRefVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRngHigh(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAODACRngHigh) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRngHigh.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRngHigh(task, channel, data);
#else
  return function_pointers_.SetAODACRngHigh(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODACRngLow(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAODACRngLow) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODACRngLow.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODACRngLow(task, channel, data);
#else
  return function_pointers_.SetAODACRngLow(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODataXferMech(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODataXferMech(task, channel, data);
#else
  return function_pointers_.SetAODataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAODataXferReqCond(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAODataXferReqCond(task, channel, data);
#else
  return function_pointers_.SetAODataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOEnhancedImageRejectionEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAOEnhancedImageRejectionEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOEnhancedImageRejectionEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOEnhancedImageRejectionEnable(task, channel, data);
#else
  return function_pointers_.SetAOEnhancedImageRejectionEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFilterDelay(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFilterDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFilterDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFilterDelay(task, channel, data);
#else
  return function_pointers_.SetAOFilterDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFilterDelayAdjustment(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFilterDelayAdjustment) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFilterDelayAdjustment.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFilterDelayAdjustment(task, channel, data);
#else
  return function_pointers_.SetAOFilterDelayAdjustment(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFilterDelayUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFilterDelayUnits(task, channel, data);
#else
  return function_pointers_.SetAOFilterDelayUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenAmplitude(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFuncGenAmplitude) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenAmplitude.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenAmplitude(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenAmplitude(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenFMDeviation(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFuncGenFMDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenFMDeviation.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenFMDeviation(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenFMDeviation(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFuncGenFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenFreq(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenModulationType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOFuncGenModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenModulationType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenModulationType(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenModulationType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenOffset(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFuncGenOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenOffset.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenOffset(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenOffset(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenSquareDutyCycle(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOFuncGenSquareDutyCycle) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenSquareDutyCycle.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenSquareDutyCycle(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenSquareDutyCycle(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOFuncGenType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOFuncGenType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOFuncGenType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOFuncGenType(task, channel, data);
#else
  return function_pointers_.SetAOFuncGenType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOGain(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOGain.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOGain(task, channel, data);
#else
  return function_pointers_.SetAOGain(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOIdleOutputBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOIdleOutputBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOIdleOutputBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOIdleOutputBehavior(task, channel, data);
#else
  return function_pointers_.SetAOIdleOutputBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOLoadImpedance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOLoadImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOLoadImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOLoadImpedance(task, channel, data);
#else
  return function_pointers_.SetAOLoadImpedance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOMax(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOMax.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOMax(task, channel, data);
#else
  return function_pointers_.SetAOMax(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOMemMapEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOMemMapEnable(task, channel, data);
#else
  return function_pointers_.SetAOMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOMin(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOMin.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOMin(task, channel, data);
#else
  return function_pointers_.SetAOMin(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOOutputImpedance(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOOutputImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOOutputImpedance.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOOutputImpedance(task, channel, data);
#else
  return function_pointers_.SetAOOutputImpedance(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOReglitchEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAOReglitchEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOReglitchEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOReglitchEnable(task, channel, data);
#else
  return function_pointers_.SetAOReglitchEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOResolutionUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOResolutionUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOResolutionUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOResolutionUnits(task, channel, data);
#else
  return function_pointers_.SetAOResolutionUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOTermCfg(task, channel, data);
#else
  return function_pointers_.SetAOTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.SetAOUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetAOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.SetAOUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetAOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOUseOnlyOnBrdMem(task, channel, data);
#else
  return function_pointers_.SetAOUseOnlyOnBrdMem(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOVoltageCurrentLimit(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetAOVoltageCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOVoltageCurrentLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOVoltageCurrentLimit(task, channel, data);
#else
  return function_pointers_.SetAOVoltageCurrentLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetAOVoltageUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetAOVoltageUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetAOVoltageUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetAOVoltageUnits(task, channel, data);
#else
  return function_pointers_.SetAOVoltageUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data)
{
  if (!function_pointers_.SetArmStartTrigTrigWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetArmStartTrigTrigWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxSetArmStartTrigTrigWhen(task, data);
#else
  return function_pointers_.SetArmStartTrigTrigWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::SetBufInputBufSize(TaskHandle task, uInt32 data)
{
  if (!function_pointers_.SetBufInputBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetBufInputBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetBufInputBufSize(task, data);
#else
  return function_pointers_.SetBufInputBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::SetBufOutputBufSize(TaskHandle task, uInt32 data)
{
  if (!function_pointers_.SetBufOutputBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetBufOutputBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetBufOutputBufSize(task, data);
#else
  return function_pointers_.SetBufOutputBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::SetBufOutputOnbrdBufSize(TaskHandle task, uInt32 data)
{
  if (!function_pointers_.SetBufOutputOnbrdBufSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetBufOutputOnbrdBufSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetBufOutputOnbrdBufSize(task, data);
#else
  return function_pointers_.SetBufOutputOnbrdBufSize(task, data);
#endif
}

int32 NiDAQmxLibrary::SetCIAngEncoderInitialAngle(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIAngEncoderInitialAngle) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIAngEncoderInitialAngle.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIAngEncoderInitialAngle(task, channel, data);
#else
  return function_pointers_.SetCIAngEncoderInitialAngle(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIAngEncoderPulsesPerRev) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIAngEncoderPulsesPerRev.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIAngEncoderPulsesPerRev(task, channel, data);
#else
  return function_pointers_.SetCIAngEncoderPulsesPerRev(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIAngEncoderUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIAngEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIAngEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIAngEncoderUnits(task, channel, data);
#else
  return function_pointers_.SetCIAngEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesActiveEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesActiveEdge(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesCountDirDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirHyst(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirTermCfg(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountDirThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountDirThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountDirThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountDirThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountDirThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetActiveEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetActiveEdge(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesCountResetDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetHyst(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetResetCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetResetCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetResetCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetResetCount(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetResetCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesCountResetTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetTerm(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetTermCfg(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesCountResetThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesCountResetThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesCountResetThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesCountResetThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesCountResetThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDir(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesDir) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDir.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDir(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDir(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesDirTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesDirTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesDirTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesDirTerm(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesDirTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesGateDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesGateDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesGateDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesGateDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICountEdgesGateEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateEnable(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesGateHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateHyst(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesGateLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesGateTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateTerm(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesGateTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateTermCfg(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesGateThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesGateWhen(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesGateWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesGateWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesGateWhen(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesGateWhen(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesHyst(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesInitialCnt(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCICountEdgesInitialCnt) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesInitialCnt.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesInitialCnt(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesInitialCnt(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICountEdgesTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesTerm(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICountEdgesTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesTermCfg(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICountEdgesThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICountEdgesThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICountEdgesThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICountEdgesThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCICountEdgesThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCICtrTimebaseActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseActiveEdge(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICtrTimebaseDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICtrTimebaseDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICtrTimebaseDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICtrTimebaseDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCICtrTimebaseDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCICtrTimebaseMasterTimebaseDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseMasterTimebaseDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseMasterTimebaseDiv(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseMasterTimebaseDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCICtrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICtrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICtrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICtrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICtrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCICtrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCICustomScaleName(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCICustomScaleName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCICustomScaleName.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCICustomScaleName(task, channel, data);
#else
  return function_pointers_.SetCICustomScaleName(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDataXferMech(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDataXferMech(task, channel, data);
#else
  return function_pointers_.SetCIDataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDataXferReqCond(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDataXferReqCond(task, channel, data);
#else
  return function_pointers_.SetCIDataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDupCountPrevent(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIDupCountPrevent) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDupCountPrevent.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDupCountPrevent(task, channel, data);
#else
  return function_pointers_.SetCIDupCountPrevent(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIDutyCycleDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIDutyCycleDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIDutyCycleDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIDutyCycleDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIDutyCycleLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleStartingEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIDutyCycleStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleStartingEdge(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIDutyCycleTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleTerm(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIDutyCycleTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIDutyCycleTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIDutyCycleTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIDutyCycleTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIDutyCycleTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderAInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderAInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderAInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIEncoderAInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderAInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderAInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIEncoderAInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputTerm(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderAInputTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderAInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderAInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderAInputTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIEncoderAInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderBInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderBInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderBInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIEncoderBInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderBInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderBInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIEncoderBInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputTerm(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderBInputTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderBInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderBInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderBInputTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIEncoderBInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderDecodingType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderDecodingType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderDecodingType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderDecodingType(task, channel, data);
#else
  return function_pointers_.SetCIEncoderDecodingType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZIndexEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderZIndexEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZIndexEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZIndexEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZIndexEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZIndexPhase(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderZIndexPhase) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZIndexPhase.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZIndexPhase(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZIndexPhase(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZIndexVal(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderZIndexVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZIndexVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZIndexVal(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZIndexVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderZInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderZInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIEncoderZInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIEncoderZInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIEncoderZInputDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderZInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIEncoderZInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputTerm(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIEncoderZInputTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIEncoderZInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIEncoderZInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIEncoderZInputTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIEncoderZInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFilterDelayUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFilterDelayUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFilterDelayUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFilterDelayUnits(task, channel, data);
#else
  return function_pointers_.SetCIFilterDelayUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFilterEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIFilterEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFilterEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFilterEnable(task, channel, data);
#else
  return function_pointers_.SetCIFilterEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFilterFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIFilterFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFilterFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFilterFreq(task, channel, data);
#else
  return function_pointers_.SetCIFilterFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFilterOrder(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIFilterOrder) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFilterOrder.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFilterOrder(task, channel, data);
#else
  return function_pointers_.SetCIFilterOrder(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFilterResponse(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFilterResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFilterResponse.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFilterResponse(task, channel, data);
#else
  return function_pointers_.SetCIFilterResponse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIFreqDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIFreqDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIFreqDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIFreqDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIFreqDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIFreqDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIFreqDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIFreqDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIFreqDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIFreqDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIFreqDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqDiv(task, channel, data);
#else
  return function_pointers_.SetCIFreqDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqEnableAveraging(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIFreqEnableAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqEnableAveraging.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqEnableAveraging(task, channel, data);
#else
  return function_pointers_.SetCIFreqEnableAveraging(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIFreqHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqHyst(task, channel, data);
#else
  return function_pointers_.SetCIFreqHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFreqLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIFreqLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqMeasMeth(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFreqMeasMeth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqMeasMeth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqMeasMeth(task, channel, data);
#else
  return function_pointers_.SetCIFreqMeasMeth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqMeasTime(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIFreqMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqMeasTime(task, channel, data);
#else
  return function_pointers_.SetCIFreqMeasTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqStartingEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFreqStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqStartingEdge(task, channel, data);
#else
  return function_pointers_.SetCIFreqStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIFreqTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqTerm(task, channel, data);
#else
  return function_pointers_.SetCIFreqTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFreqTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIFreqTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIFreqThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCIFreqThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIFreqUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIFreqUnits(task, channel, data);
#else
  return function_pointers_.SetCIFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIGPSSyncMethod(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIGPSSyncMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIGPSSyncMethod.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIGPSSyncMethod(task, channel, data);
#else
  return function_pointers_.SetCIGPSSyncMethod(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIGPSSyncSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIGPSSyncSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIGPSSyncSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIGPSSyncSrc(task, channel, data);
#else
  return function_pointers_.SetCIGPSSyncSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCILinEncoderDistPerPulse(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCILinEncoderDistPerPulse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCILinEncoderDistPerPulse.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCILinEncoderDistPerPulse(task, channel, data);
#else
  return function_pointers_.SetCILinEncoderDistPerPulse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCILinEncoderInitialPos(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCILinEncoderInitialPos) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCILinEncoderInitialPos.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCILinEncoderInitialPos(task, channel, data);
#else
  return function_pointers_.SetCILinEncoderInitialPos(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCILinEncoderUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCILinEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCILinEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCILinEncoderUnits(task, channel, data);
#else
  return function_pointers_.SetCILinEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIMax(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIMax) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIMax.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIMax(task, channel, data);
#else
  return function_pointers_.SetCIMax(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIMaxMeasPeriod(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIMaxMeasPeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIMaxMeasPeriod.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIMaxMeasPeriod(task, channel, data);
#else
  return function_pointers_.SetCIMaxMeasPeriod(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIMemMapEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIMemMapEnable(task, channel, data);
#else
  return function_pointers_.SetCIMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIMin(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIMin) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIMin.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIMin(task, channel, data);
#else
  return function_pointers_.SetCIMin(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPeriodDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIPeriodDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPeriodDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIPeriodDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPeriodDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIPeriodDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPeriodDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIPeriodDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPeriodDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIPeriodDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIPeriodDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodDiv(task, channel, data);
#else
  return function_pointers_.SetCIPeriodDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodEnableAveraging(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPeriodEnableAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodEnableAveraging.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodEnableAveraging(task, channel, data);
#else
  return function_pointers_.SetCIPeriodEnableAveraging(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodHyst(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPeriodHyst) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodHyst.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodHyst(task, channel, data);
#else
  return function_pointers_.SetCIPeriodHyst(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPeriodLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIPeriodLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodMeasMeth(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPeriodMeasMeth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodMeasMeth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodMeasMeth(task, channel, data);
#else
  return function_pointers_.SetCIPeriodMeasMeth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodMeasTime(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPeriodMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodMeasTime(task, channel, data);
#else
  return function_pointers_.SetCIPeriodMeasTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodStartingEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPeriodStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodStartingEdge(task, channel, data);
#else
  return function_pointers_.SetCIPeriodStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPeriodTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodTerm(task, channel, data);
#else
  return function_pointers_.SetCIPeriodTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPeriodTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIPeriodTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPeriodThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCIPeriodThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPeriodUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPeriodUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPeriodUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPeriodUnits(task, channel, data);
#else
  return function_pointers_.SetCIPeriodUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPrescaler(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIPrescaler) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPrescaler.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPrescaler(task, channel, data);
#else
  return function_pointers_.SetCIPrescaler(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseFreqDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseFreqDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseFreqDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseFreqDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseFreqDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseFreqLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqStartEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseFreqStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqStartEdge(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqStartEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseFreqTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqTerm(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseFreqTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseFreqUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseFreqUnits(task, channel, data);
#else
  return function_pointers_.SetCIPulseFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseTicksDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseTicksDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseTicksDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseTicksDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseTicksDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTicksLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksStartEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTicksStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksStartEdge(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksStartEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseTicksTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksTerm(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTicksTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTicksTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTicksTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTicksTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIPulseTicksTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseTimeDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseTimeDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseTimeDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseTimeDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseTimeDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTimeLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeStartEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTimeStartEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeStartEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeStartEdge(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeStartEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseTimeTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeTerm(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTimeTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseTimeUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseTimeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseTimeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseTimeUnits(task, channel, data);
#else
  return function_pointers_.SetCIPulseTimeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseWidthDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseWidthDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIPulseWidthDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseWidthDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIPulseWidthDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseWidthLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthStartingEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseWidthStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthStartingEdge(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIPulseWidthTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthTerm(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseWidthTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIPulseWidthUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIPulseWidthUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIPulseWidthUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIPulseWidthUnits(task, channel, data);
#else
  return function_pointers_.SetCIPulseWidthUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISampClkOverrunBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCISampClkOverrunBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISampClkOverrunBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISampClkOverrunBehavior(task, channel, data);
#else
  return function_pointers_.SetCISampClkOverrunBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISampClkOverrunSentinelVal(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCISampClkOverrunSentinelVal) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISampClkOverrunSentinelVal.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISampClkOverrunSentinelVal(task, channel, data);
#else
  return function_pointers_.SetCISampClkOverrunSentinelVal(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCISemiPeriodDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCISemiPeriodDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCISemiPeriodDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCISemiPeriodDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCISemiPeriodDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCISemiPeriodLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodStartingEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCISemiPeriodStartingEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodStartingEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodStartingEdge(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodStartingEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCISemiPeriodTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodTerm(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCISemiPeriodTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodTermCfg(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCISemiPeriodUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCISemiPeriodUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCISemiPeriodUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCISemiPeriodUnits(task, channel, data);
#else
  return function_pointers_.SetCISemiPeriodUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIThreshVoltage(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIThreshVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIThreshVoltage.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIThreshVoltage(task, channel, data);
#else
  return function_pointers_.SetCIThreshVoltage(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITimestampInitialSeconds(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCITimestampInitialSeconds) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITimestampInitialSeconds.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITimestampInitialSeconds(task, channel, data);
#else
  return function_pointers_.SetCITimestampInitialSeconds(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITimestampUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITimestampUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITimestampUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITimestampUnits(task, channel, data);
#else
  return function_pointers_.SetCITimestampUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCITwoEdgeSepFirstDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstEdge(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCITwoEdgeSepFirstTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstTerm(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepFirstTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepFirstTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepFirstTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepFirstTermCfg(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepFirstTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCITwoEdgeSepSecondDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondEdge(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCITwoEdgeSepSecondTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondTerm(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepSecondTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepSecondTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepSecondTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepSecondTermCfg(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepSecondTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCITwoEdgeSepUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCITwoEdgeSepUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCITwoEdgeSepUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCITwoEdgeSepUnits(task, channel, data);
#else
  return function_pointers_.SetCITwoEdgeSepUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.SetCIUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.SetCIUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIVelocityAngEncoderPulsesPerRev) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityAngEncoderPulsesPerRev.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityAngEncoderPulsesPerRev(task, channel, data);
#else
  return function_pointers_.SetCIVelocityAngEncoderPulsesPerRev(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityAngEncoderUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityAngEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityAngEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityAngEncoderUnits(task, channel, data);
#else
  return function_pointers_.SetCIVelocityAngEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCIVelocityDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityDiv(task, channel, data);
#else
  return function_pointers_.SetCIVelocityDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderAInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIVelocityEncoderAInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIVelocityEncoderAInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIVelocityEncoderAInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderAInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIVelocityEncoderAInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputTerm(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderAInputTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderAInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderAInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderAInputTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderAInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderBInputDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIVelocityEncoderBInputDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIVelocityEncoderBInputDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIVelocityEncoderBInputDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderBInputLogicLvlBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputLogicLvlBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCIVelocityEncoderBInputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputTerm(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderBInputTermCfg(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderBInputTermCfg) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderBInputTermCfg.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderBInputTermCfg(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderBInputTermCfg(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityEncoderDecodingType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityEncoderDecodingType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityEncoderDecodingType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityEncoderDecodingType(task, channel, data);
#else
  return function_pointers_.SetCIVelocityEncoderDecodingType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityLinEncoderDistPerPulse(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIVelocityLinEncoderDistPerPulse) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityLinEncoderDistPerPulse.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityLinEncoderDistPerPulse(task, channel, data);
#else
  return function_pointers_.SetCIVelocityLinEncoderDistPerPulse(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityLinEncoderUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCIVelocityLinEncoderUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityLinEncoderUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityLinEncoderUnits(task, channel, data);
#else
  return function_pointers_.SetCIVelocityLinEncoderUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCIVelocityMeasTime(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCIVelocityMeasTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCIVelocityMeasTime.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCIVelocityMeasTime(task, channel, data);
#else
  return function_pointers_.SetCIVelocityMeasTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOAutoIncrCnt(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOAutoIncrCnt) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOAutoIncrCnt.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOAutoIncrCnt(task, channel, data);
#else
  return function_pointers_.SetCOAutoIncrCnt(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOConstrainedGenMode(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCOConstrainedGenMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOConstrainedGenMode.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOConstrainedGenMode(task, channel, data);
#else
  return function_pointers_.SetCOConstrainedGenMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCOCtrTimebaseActiveEdge) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseActiveEdge.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseActiveEdge(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseActiveEdge(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCOCtrTimebaseDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOCtrTimebaseDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOCtrTimebaseDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCOCtrTimebaseDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCOCtrTimebaseDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOCtrTimebaseMasterTimebaseDiv) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseMasterTimebaseDiv.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseMasterTimebaseDiv(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseMasterTimebaseDiv(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOCtrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOCtrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCOCtrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOCtrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOCtrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetCOCtrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCODataXferMech(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCODataXferMech(task, channel, data);
#else
  return function_pointers_.SetCODataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCODataXferReqCond(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCODataXferReqCond(task, channel, data);
#else
  return function_pointers_.SetCODataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOEnableInitialDelayOnRetrigger(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCOEnableInitialDelayOnRetrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOEnableInitialDelayOnRetrigger.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOEnableInitialDelayOnRetrigger(task, channel, data);
#else
  return function_pointers_.SetCOEnableInitialDelayOnRetrigger(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOMemMapEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOMemMapEnable(task, channel, data);
#else
  return function_pointers_.SetCOMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPrescaler(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOPrescaler) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPrescaler.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPrescaler(task, channel, data);
#else
  return function_pointers_.SetCOPrescaler(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseDutyCyc(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOPulseDutyCyc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseDutyCyc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseDutyCyc(task, channel, data);
#else
  return function_pointers_.SetCOPulseDutyCyc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseFreq(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOPulseFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseFreq(task, channel, data);
#else
  return function_pointers_.SetCOPulseFreq(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseFreqInitialDelay(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOPulseFreqInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseFreqInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseFreqInitialDelay(task, channel, data);
#else
  return function_pointers_.SetCOPulseFreqInitialDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseFreqUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCOPulseFreqUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseFreqUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseFreqUnits(task, channel, data);
#else
  return function_pointers_.SetCOPulseFreqUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseHighTicks(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOPulseHighTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseHighTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseHighTicks(task, channel, data);
#else
  return function_pointers_.SetCOPulseHighTicks(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseHighTime(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOPulseHighTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseHighTime.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseHighTime(task, channel, data);
#else
  return function_pointers_.SetCOPulseHighTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseIdleState(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCOPulseIdleState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseIdleState.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseIdleState(task, channel, data);
#else
  return function_pointers_.SetCOPulseIdleState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseLowTicks(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOPulseLowTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseLowTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseLowTicks(task, channel, data);
#else
  return function_pointers_.SetCOPulseLowTicks(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseLowTime(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOPulseLowTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseLowTime.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseLowTime(task, channel, data);
#else
  return function_pointers_.SetCOPulseLowTime(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseTerm(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetCOPulseTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseTerm(task, channel, data);
#else
  return function_pointers_.SetCOPulseTerm(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseTicksInitialDelay(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOPulseTicksInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseTicksInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseTicksInitialDelay(task, channel, data);
#else
  return function_pointers_.SetCOPulseTicksInitialDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseTimeInitialDelay(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetCOPulseTimeInitialDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseTimeInitialDelay.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseTimeInitialDelay(task, channel, data);
#else
  return function_pointers_.SetCOPulseTimeInitialDelay(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOPulseTimeUnits(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetCOPulseTimeUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOPulseTimeUnits.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOPulseTimeUnits(task, channel, data);
#else
  return function_pointers_.SetCOPulseTimeUnits(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.SetCOUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetCOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.SetCOUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetCOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCOUseOnlyOnBrdMem(task, channel, data);
#else
  return function_pointers_.SetCOUseOnlyOnBrdMem(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetCalAccConnectionCount(const char deviceName[], uInt32 data)
{
  if (!function_pointers_.SetCalAccConnectionCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCalAccConnectionCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCalAccConnectionCount(deviceName, data);
#else
  return function_pointers_.SetCalAccConnectionCount(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::SetCalUserDefinedInfo(const char deviceName[], const char data[])
{
  if (!function_pointers_.SetCalUserDefinedInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetCalUserDefinedInfo.");
  }
#if defined(_MSC_VER)
  return DAQmxSetCalUserDefinedInfo(deviceName, data);
#else
  return function_pointers_.SetCalUserDefinedInfo(deviceName, data);
#endif
}

int32 NiDAQmxLibrary::SetChanDescr(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetChanDescr) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetChanDescr.");
  }
#if defined(_MSC_VER)
  return DAQmxSetChanDescr(task, channel, data);
#else
  return function_pointers_.SetChanDescr(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetChanSyncUnlockBehavior(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetChanSyncUnlockBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetChanSyncUnlockBehavior.");
  }
#if defined(_MSC_VER)
  return DAQmxSetChanSyncUnlockBehavior(task, channel, data);
#else
  return function_pointers_.SetChanSyncUnlockBehavior(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIAcquireOn(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDIAcquireOn) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIAcquireOn.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIAcquireOn(task, channel, data);
#else
  return function_pointers_.SetDIAcquireOn(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDataXferMech(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDIDataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDataXferMech(task, channel, data);
#else
  return function_pointers_.SetDIDataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDataXferReqCond(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDIDataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDataXferReqCond(task, channel, data);
#else
  return function_pointers_.SetDIDataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDigFltrEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDIDigFltrEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDigFltrEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDigFltrEnable(task, channel, data);
#else
  return function_pointers_.SetDIDigFltrEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDigFltrEnableBusMode(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDIDigFltrEnableBusMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDigFltrEnableBusMode.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDigFltrEnableBusMode(task, channel, data);
#else
  return function_pointers_.SetDIDigFltrEnableBusMode(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetDIDigFltrMinPulseWidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDigFltrMinPulseWidth.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDigFltrMinPulseWidth(task, channel, data);
#else
  return function_pointers_.SetDIDigFltrMinPulseWidth(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetDIDigFltrTimebaseRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDigFltrTimebaseRate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDigFltrTimebaseRate(task, channel, data);
#else
  return function_pointers_.SetDIDigFltrTimebaseRate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetDIDigFltrTimebaseSrc) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDigFltrTimebaseSrc.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDigFltrTimebaseSrc(task, channel, data);
#else
  return function_pointers_.SetDIDigFltrTimebaseSrc(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIDigSyncEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDIDigSyncEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIDigSyncEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIDigSyncEnable(task, channel, data);
#else
  return function_pointers_.SetDIDigSyncEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIInvertLines(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDIInvertLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIInvertLines.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIInvertLines(task, channel, data);
#else
  return function_pointers_.SetDIInvertLines(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDILogicFamily(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDILogicFamily) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDILogicFamily.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDILogicFamily(task, channel, data);
#else
  return function_pointers_.SetDILogicFamily(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIMemMapEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDIMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIMemMapEnable(task, channel, data);
#else
  return function_pointers_.SetDIMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDITristate(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDITristate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDITristate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDITristate(task, channel, data);
#else
  return function_pointers_.SetDITristate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetDIUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.SetDIUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDIUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetDIUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDIUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDIUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.SetDIUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDODataXferMech(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDODataXferMech) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDODataXferMech.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDODataXferMech(task, channel, data);
#else
  return function_pointers_.SetDODataXferMech(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDODataXferReqCond(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDODataXferReqCond) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDODataXferReqCond.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDODataXferReqCond(task, channel, data);
#else
  return function_pointers_.SetDODataXferReqCond(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOGenerateOn(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDOGenerateOn) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOGenerateOn.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOGenerateOn(task, channel, data);
#else
  return function_pointers_.SetDOGenerateOn(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOInvertLines(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDOInvertLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOInvertLines.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOInvertLines(task, channel, data);
#else
  return function_pointers_.SetDOInvertLines(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOLineStatesDoneState(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDOLineStatesDoneState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOLineStatesDoneState.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOLineStatesDoneState(task, channel, data);
#else
  return function_pointers_.SetDOLineStatesDoneState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOLineStatesPausedState(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDOLineStatesPausedState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOLineStatesPausedState.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOLineStatesPausedState(task, channel, data);
#else
  return function_pointers_.SetDOLineStatesPausedState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOLineStatesStartState(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDOLineStatesStartState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOLineStatesStartState.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOLineStatesStartState(task, channel, data);
#else
  return function_pointers_.SetDOLineStatesStartState(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOLogicFamily(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDOLogicFamily) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOLogicFamily.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOLogicFamily(task, channel, data);
#else
  return function_pointers_.SetDOLogicFamily(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOMemMapEnable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDOMemMapEnable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOMemMapEnable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOMemMapEnable(task, channel, data);
#else
  return function_pointers_.SetDOMemMapEnable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOOutputDriveType(TaskHandle task, const char channel[], int32 data)
{
  if (!function_pointers_.SetDOOutputDriveType) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOOutputDriveType.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOOutputDriveType(task, channel, data);
#else
  return function_pointers_.SetDOOutputDriveType(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOOvercurrentAutoReenable(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDOOvercurrentAutoReenable) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOOvercurrentAutoReenable.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOOvercurrentAutoReenable(task, channel, data);
#else
  return function_pointers_.SetDOOvercurrentAutoReenable(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOOvercurrentLimit(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetDOOvercurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOOvercurrentLimit.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOOvercurrentLimit(task, channel, data);
#else
  return function_pointers_.SetDOOvercurrentLimit(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOOvercurrentReenablePeriod(TaskHandle task, const char channel[], float64 data)
{
  if (!function_pointers_.SetDOOvercurrentReenablePeriod) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOOvercurrentReenablePeriod.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOOvercurrentReenablePeriod(task, channel, data);
#else
  return function_pointers_.SetDOOvercurrentReenablePeriod(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOTristate(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDOTristate) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOTristate.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOTristate(task, channel, data);
#else
  return function_pointers_.SetDOTristate(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetDOUsbXferReqCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOUsbXferReqCount.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOUsbXferReqCount(task, channel, data);
#else
  return function_pointers_.SetDOUsbXferReqCount(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data)
{
  if (!function_pointers_.SetDOUsbXferReqSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOUsbXferReqSize.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOUsbXferReqSize(task, channel, data);
#else
  return function_pointers_.SetDOUsbXferReqSize(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32 data)
{
  if (!function_pointers_.SetDOUseOnlyOnBrdMem) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDOUseOnlyOnBrdMem.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDOUseOnlyOnBrdMem(task, channel, data);
#else
  return function_pointers_.SetDOUseOnlyOnBrdMem(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetDigitalLogicFamilyPowerUpState(const char deviceName[], int32 logicFamily)
{
  if (!function_pointers_.SetDigitalLogicFamilyPowerUpState) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetDigitalLogicFamilyPowerUpState.");
  }
#if defined(_MSC_VER)
  return DAQmxSetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
#else
  return function_pointers_.SetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
#endif
}

int32 NiDAQmxLibrary::SetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime data)
{
  if (!function_pointers_.SetFirstSampClkWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetFirstSampClkWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxSetFirstSampClkWhen(task, data);
#else
  return function_pointers_.SetFirstSampClkWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::SetPhysicalChanName(TaskHandle task, const char channel[], const char data[])
{
  if (!function_pointers_.SetPhysicalChanName) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetPhysicalChanName.");
  }
#if defined(_MSC_VER)
  return DAQmxSetPhysicalChanName(task, channel, data);
#else
  return function_pointers_.SetPhysicalChanName(task, channel, data);
#endif
}

int32 NiDAQmxLibrary::SetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data)
{
  if (!function_pointers_.SetStartTrigTrigWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetStartTrigTrigWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxSetStartTrigTrigWhen(task, data);
#else
  return function_pointers_.SetStartTrigTrigWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::SetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime data)
{
  if (!function_pointers_.SetSyncPulseTimeWhen) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxSetSyncPulseTimeWhen.");
  }
#if defined(_MSC_VER)
  return DAQmxSetSyncPulseTimeWhen(task, data);
#else
  return function_pointers_.SetSyncPulseTimeWhen(task, data);
#endif
}

int32 NiDAQmxLibrary::StartNewFile(TaskHandle task, const char filePath[])
{
  if (!function_pointers_.StartNewFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxStartNewFile.");
  }
#if defined(_MSC_VER)
  return DAQmxStartNewFile(task, filePath);
#else
  return function_pointers_.StartNewFile(task, filePath);
#endif
}

int32 NiDAQmxLibrary::StartTask(TaskHandle task)
{
  if (!function_pointers_.StartTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxStartTask.");
  }
#if defined(_MSC_VER)
  return DAQmxStartTask(task);
#else
  return function_pointers_.StartTask(task);
#endif
}

int32 NiDAQmxLibrary::StopTask(TaskHandle task)
{
  if (!function_pointers_.StopTask) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxStopTask.");
  }
#if defined(_MSC_VER)
  return DAQmxStopTask(task);
#else
  return function_pointers_.StopTask(task);
#endif
}

int32 NiDAQmxLibrary::TaskControl(TaskHandle task, int32 action)
{
  if (!function_pointers_.TaskControl) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxTaskControl.");
  }
#if defined(_MSC_VER)
  return DAQmxTaskControl(task, action);
#else
  return function_pointers_.TaskControl(task, action);
#endif
}

int32 NiDAQmxLibrary::TristateOutputTerm(const char outputTerminal[])
{
  if (!function_pointers_.TristateOutputTerm) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxTristateOutputTerm.");
  }
#if defined(_MSC_VER)
  return DAQmxTristateOutputTerm(outputTerminal);
#else
  return function_pointers_.TristateOutputTerm(outputTerminal);
#endif
}

int32 NiDAQmxLibrary::UnreserveNetworkDevice(const char deviceName[])
{
  if (!function_pointers_.UnreserveNetworkDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxUnreserveNetworkDevice.");
  }
#if defined(_MSC_VER)
  return DAQmxUnreserveNetworkDevice(deviceName);
#else
  return function_pointers_.UnreserveNetworkDevice(deviceName);
#endif
}

int32 NiDAQmxLibrary::WaitForNextSampleClock(TaskHandle task, float64 timeout, bool32* isLate)
{
  if (!function_pointers_.WaitForNextSampleClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWaitForNextSampleClock.");
  }
#if defined(_MSC_VER)
  return DAQmxWaitForNextSampleClock(task, timeout, isLate);
#else
  return function_pointers_.WaitForNextSampleClock(task, timeout, isLate);
#endif
}

int32 NiDAQmxLibrary::WaitForValidTimestamp(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp)
{
  if (!function_pointers_.WaitForValidTimestamp) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWaitForValidTimestamp.");
  }
#if defined(_MSC_VER)
  return DAQmxWaitForValidTimestamp(task, timestampEvent, timeout, timestamp);
#else
  return function_pointers_.WaitForValidTimestamp(task, timestampEvent, timeout, timestamp);
#endif
}

int32 NiDAQmxLibrary::WaitUntilTaskDone(TaskHandle task, float64 timeToWait)
{
  if (!function_pointers_.WaitUntilTaskDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWaitUntilTaskDone.");
  }
#if defined(_MSC_VER)
  return DAQmxWaitUntilTaskDone(task, timeToWait);
#else
  return function_pointers_.WaitUntilTaskDone(task, timeToWait);
#endif
}

int32 NiDAQmxLibrary::WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteAnalogF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteAnalogF64.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteAnalogScalarF64(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved)
{
  if (!function_pointers_.WriteAnalogScalarF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteAnalogScalarF64.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteAnalogScalarF64(task, autoStart, timeout, value, reserved);
#else
  return function_pointers_.WriteAnalogScalarF64(task, autoStart, timeout, value, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteBinaryI16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteBinaryI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteBinaryI16.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteBinaryI16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteBinaryI16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteBinaryI32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteBinaryI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteBinaryI32.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteBinaryI32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteBinaryI32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteBinaryU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteBinaryU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteBinaryU16.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteBinaryU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteBinaryU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteBinaryU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteBinaryU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteBinaryU32.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteBinaryU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteBinaryU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteCtrFreq(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteCtrFreq) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteCtrFreq.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteCtrFreq(task, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteCtrFreq(task, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteCtrFreqScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved)
{
  if (!function_pointers_.WriteCtrFreqScalar) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteCtrFreqScalar.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteCtrFreqScalar(task, autoStart, timeout, frequency, dutyCycle, reserved);
#else
  return function_pointers_.WriteCtrFreqScalar(task, autoStart, timeout, frequency, dutyCycle, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteCtrTicks(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteCtrTicks) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteCtrTicks.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteCtrTicks(task, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteCtrTicks(task, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteCtrTicksScalar(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved)
{
  if (!function_pointers_.WriteCtrTicksScalar) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteCtrTicksScalar.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteCtrTicksScalar(task, autoStart, timeout, highTicks, lowTicks, reserved);
#else
  return function_pointers_.WriteCtrTicksScalar(task, autoStart, timeout, highTicks, lowTicks, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteCtrTime(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteCtrTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteCtrTime.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteCtrTime(task, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteCtrTime(task, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteCtrTimeScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved)
{
  if (!function_pointers_.WriteCtrTimeScalar) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteCtrTimeScalar.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteCtrTimeScalar(task, autoStart, timeout, highTime, lowTime, reserved);
#else
  return function_pointers_.WriteCtrTimeScalar(task, autoStart, timeout, highTime, lowTime, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalLines(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalLines.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalLines(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteDigitalLines(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalScalarU32(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalScalarU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalScalarU32.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalScalarU32(task, autoStart, timeout, value, reserved);
#else
  return function_pointers_.WriteDigitalScalarU32(task, autoStart, timeout, value, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalU16.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalU32.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteDigitalU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteDigitalU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteDigitalU8.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteRaw(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  if (!function_pointers_.WriteRaw) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteRaw.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteRaw(task, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, reserved);
#else
  return function_pointers_.WriteRaw(task, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, reserved);
#endif
}

int32 NiDAQmxLibrary::WriteToTEDSFromArray(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions)
{
  if (!function_pointers_.WriteToTEDSFromArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteToTEDSFromArray.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteToTEDSFromArray(physicalChannel, bitStream, arraySize, basicTEDSOptions);
#else
  return function_pointers_.WriteToTEDSFromArray(physicalChannel, bitStream, arraySize, basicTEDSOptions);
#endif
}

int32 NiDAQmxLibrary::WriteToTEDSFromFile(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions)
{
  if (!function_pointers_.WriteToTEDSFromFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find DAQmxWriteToTEDSFromFile.");
  }
#if defined(_MSC_VER)
  return DAQmxWriteToTEDSFromFile(physicalChannel, filePath, basicTEDSOptions);
#else
  return function_pointers_.WriteToTEDSFromFile(physicalChannel, filePath, basicTEDSOptions);
#endif
}

}  // namespace nidaqmx_grpc
