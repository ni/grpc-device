//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DAQMX
//---------------------------------------------------------------------
#ifndef NIDAQMX_GRPC_LIBRARY_H
#define NIDAQMX_GRPC_LIBRARY_H

#include "nidaqmx_library_interface.h"

#include <server/shared_library.h>

namespace nidaqmx_grpc {

class NiDAQmxLibrary : public nidaqmx_grpc::NiDAQmxLibraryInterface {
 public:
  NiDAQmxLibrary();
  virtual ~NiDAQmxLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 ClearTask(TaskHandle task);
  int32 CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int terminalConfig, float64 minVal, float64 maxVal, int units, const char customScaleName[]);
  int32 CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int lineGrouping);
  int32 CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int lineGrouping);
  int32 CreateTask(const char sessionName[], TaskHandle* task);
  int32 ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, double timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChan, bool32* reserved);
  int32 WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, int32 autoStart, double timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 StartTask(TaskHandle task);
  int32 StopTask(TaskHandle task);

 private:
  using ClearTaskPtr = int32 (*)(TaskHandle task);
  using CreateAIVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int terminalConfig, float64 minVal, float64 maxVal, int units, const char customScaleName[]);
  using CreateDIChanPtr = int32 (*)(TaskHandle task, const char lines[], const char nameToAssignToLines[], int lineGrouping);
  using CreateDOChanPtr = int32 (*)(TaskHandle task, const char lines[], const char nameToAssignToLines[], int lineGrouping);
  using CreateTaskPtr = int32 (*)(const char sessionName[], TaskHandle* task);
  using ReadDigitalU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, double timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChan, bool32* reserved);
  using WriteDigitalU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, int32 autoStart, double timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using StartTaskPtr = int32 (*)(TaskHandle task);
  using StopTaskPtr = int32 (*)(TaskHandle task);

  typedef struct FunctionPointers {
    ClearTaskPtr ClearTask;
    CreateAIVoltageChanPtr CreateAIVoltageChan;
    CreateDIChanPtr CreateDIChan;
    CreateDOChanPtr CreateDOChan;
    CreateTaskPtr CreateTask;
    ReadDigitalU16Ptr ReadDigitalU16;
    WriteDigitalU16Ptr WriteDigitalU16;
    StartTaskPtr StartTask;
    StopTaskPtr StopTask;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidaqmx_grpc

#endif  // NIDAQMX_GRPC_LIBRARY_H
