//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DAQMX
//---------------------------------------------------------------------
#ifndef NIDAQMX_GRPC_LIBRARY_H
#define NIDAQMX_GRPC_LIBRARY_H

#include "nidaqmx_library_interface.h"

#include <server/shared_library.h>

namespace nidaqmx_grpc {

class NiDAQmxLibrary : public nidaqmx_grpc::NiDAQmxLibraryInterface {
 public:
  NiDAQmxLibrary();
  virtual ~NiDAQmxLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 AddCDAQSyncConnection(const char portList[]);
  int32 AddGlobalChansToTask(TaskHandle task, const char channelNames[]);
  int32 AddNetworkDevice(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize);
  int32 AreConfiguredCDAQSyncPortsDisconnected(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist);
  int32 AutoConfigureCDAQSyncConnections(const char chassisDevicesPorts[], float64 timeout);
  int32 CalculateReversePolyCoeff(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[]);
  int32 CfgAnlgEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples);
  int32 CfgAnlgEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel);
  int32 CfgAnlgMultiEdgeRefTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize);
  int32 CfgAnlgMultiEdgeStartTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize);
  int32 CfgAnlgWindowRefTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples);
  int32 CfgAnlgWindowStartTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom);
  int32 CfgBurstHandshakingTimingExportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel);
  int32 CfgBurstHandshakingTimingImportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel);
  int32 CfgChangeDetectionTiming(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgDigEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples);
  int32 CfgDigEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge);
  int32 CfgDigPatternRefTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples);
  int32 CfgDigPatternStartTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen);
  int32 CfgHandshakingTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgImplicitTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgInputBuffer(TaskHandle task, uInt32 numSampsPerChan);
  int32 CfgOutputBuffer(TaskHandle task, uInt32 numSampsPerChan);
  int32 CfgPipelinedSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgTimeStartTrig(TaskHandle task, CVIAbsoluteTime when, int32 timescale);
  int32 CfgWatchdogAOExpirStates(TaskHandle task, const char channelNames[], const float64 expirStateArray[], const int32 outputTypeArray[], uInt32 arraySize);
  int32 CfgWatchdogCOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize);
  int32 CfgWatchdogDOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize);
  int32 ClearTEDS(const char physicalChannel[]);
  int32 ClearTask(TaskHandle task);
  int32 ConfigureLogging(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation);
  int32 ConfigureTEDS(const char physicalChannel[], const char filePath[]);
  int32 ConnectTerms(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers);
  int32 ControlWatchdogTask(TaskHandle task, int32 action);
  int32 CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  int32 CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  int32 CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[]);
  int32 CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[]);
  int32 CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  int32 CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0);
  int32 CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIRosetteStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, const int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance);
  int32 CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[]);
  int32 CreateAITempBuiltInSensorChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units);
  int32 CreateAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  int32 CreateAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c);
  int32 CreateAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1);
  int32 CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  int32 CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset);
  int32 CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[]);
  int32 CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[]);
  int32 CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection);
  int32 CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[]);
  int32 CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  int32 CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[]);
  int32 CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[]);
  int32 CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[]);
  int32 CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  int32 CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  int32 CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal);
  int32 CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  int32 CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[]);
  int32 CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[]);
  int32 CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle);
  int32 CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks);
  int32 CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime);
  int32 CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  int32 CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  int32 CreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateMapScale(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreatePolynomialScale(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  int32 CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[]);
  int32 CreateTEDSAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  int32 CreateTEDSAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  int32 CreateTEDSAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1);
  int32 CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTableScale(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateTask(const char sessionName[], TaskHandle* task);
  int32 CreateWatchdogTimerTask(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState, const char lines0[], int32 expState0, const char lines1[], int32 expState1, const char lines2[], int32 expState2, const char lines3[], int32 expState3, const char lines4[], int32 expState4, const char lines5[], int32 expState5, const char lines6[], int32 expState6, const char lines7[], int32 expState7, const char lines8[], int32 expState8, const char lines9[], int32 expState9, const char lines10[], int32 expState10, const char lines11[], int32 expState11, const char lines12[], int32 expState12, const char lines13[], int32 expState13, const char lines14[], int32 expState14, const char lines15[], int32 expState15, const char lines16[], int32 expState16, const char lines17[], int32 expState17, const char lines18[], int32 expState18, const char lines19[], int32 expState19, const char lines20[], int32 expState20, const char lines21[], int32 expState21, const char lines22[], int32 expState22, const char lines23[], int32 expState23, const char lines24[], int32 expState24, const char lines25[], int32 expState25, const char lines26[], int32 expState26, const char lines27[], int32 expState27, const char lines28[], int32 expState28, const char lines29[], int32 expState29, const char lines30[], int32 expState30, const char lines31[], int32 expState31, const char lines32[], int32 expState32, const char lines33[], int32 expState33, const char lines34[], int32 expState34, const char lines35[], int32 expState35, const char lines36[], int32 expState36, const char lines37[], int32 expState37, const char lines38[], int32 expState38, const char lines39[], int32 expState39, const char lines40[], int32 expState40, const char lines41[], int32 expState41, const char lines42[], int32 expState42, const char lines43[], int32 expState43, const char lines44[], int32 expState44, const char lines45[], int32 expState45, const char lines46[], int32 expState46, const char lines47[], int32 expState47, const char lines48[], int32 expState48, const char lines49[], int32 expState49, const char lines50[], int32 expState50, const char lines51[], int32 expState51, const char lines52[], int32 expState52, const char lines53[], int32 expState53, const char lines54[], int32 expState54, const char lines55[], int32 expState55, const char lines56[], int32 expState56, const char lines57[], int32 expState57, const char lines58[], int32 expState58, const char lines59[], int32 expState59, const char lines60[], int32 expState60, const char lines61[], int32 expState61, const char lines62[], int32 expState62, const char lines63[], int32 expState63, const char lines64[], int32 expState64, const char lines65[], int32 expState65, const char lines66[], int32 expState66, const char lines67[], int32 expState67, const char lines68[], int32 expState68, const char lines69[], int32 expState69, const char lines70[], int32 expState70, const char lines71[], int32 expState71, const char lines72[], int32 expState72, const char lines73[], int32 expState73, const char lines74[], int32 expState74, const char lines75[], int32 expState75, const char lines76[], int32 expState76, const char lines77[], int32 expState77, const char lines78[], int32 expState78, const char lines79[], int32 expState79, const char lines80[], int32 expState80, const char lines81[], int32 expState81, const char lines82[], int32 expState82, const char lines83[], int32 expState83, const char lines84[], int32 expState84, const char lines85[], int32 expState85, const char lines86[], int32 expState86, const char lines87[], int32 expState87, const char lines88[], int32 expState88, const char lines89[], int32 expState89, const char lines90[], int32 expState90, const char lines91[], int32 expState91, const char lines92[], int32 expState92, const char lines93[], int32 expState93, const char lines94[], int32 expState94, const char lines95[], int32 expState95);
  int32 CreateWatchdogTimerTaskEx(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout);
  int32 DeleteNetworkDevice(const char deviceName[]);
  int32 DeleteSavedGlobalChan(const char channelName[]);
  int32 DeleteSavedScale(const char scaleName[]);
  int32 DeleteSavedTask(const char taskName[]);
  int32 DeviceSupportsCal(const char deviceName[], bool32* calSupported);
  int32 DisableRefTrig(TaskHandle task);
  int32 DisableStartTrig(TaskHandle task);
  int32 DisconnectTerms(const char sourceTerminal[], const char destinationTerminal[]);
  int32 ExportSignal(TaskHandle task, int32 signalID, const char outputTerminal[]);
  int32 GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetAnalogPowerUpStates(const char deviceName[], const char channelName[], float64* state, int32 channelType, const char channelName0[], float64* state0, int32 channelType0, const char channelName1[], float64* state1, int32 channelType1, const char channelName2[], float64* state2, int32 channelType2, const char channelName3[], float64* state3, int32 channelType3, const char channelName4[], float64* state4, int32 channelType4, const char channelName5[], float64* state5, int32 channelType5, const char channelName6[], float64* state6, int32 channelType6, const char channelName7[], float64* state7, int32 channelType7, const char channelName8[], float64* state8, int32 channelType8, const char channelName9[], float64* state9, int32 channelType9, const char channelName10[], float64* state10, int32 channelType10, const char channelName11[], float64* state11, int32 channelType11, const char channelName12[], float64* state12, int32 channelType12, const char channelName13[], float64* state13, int32 channelType13, const char channelName14[], float64* state14, int32 channelType14, const char channelName15[], float64* state15, int32 channelType15, const char channelName16[], float64* state16, int32 channelType16, const char channelName17[], float64* state17, int32 channelType17, const char channelName18[], float64* state18, int32 channelType18, const char channelName19[], float64* state19, int32 channelType19, const char channelName20[], float64* state20, int32 channelType20, const char channelName21[], float64* state21, int32 channelType21, const char channelName22[], float64* state22, int32 channelType22, const char channelName23[], float64* state23, int32 channelType23, const char channelName24[], float64* state24, int32 channelType24, const char channelName25[], float64* state25, int32 channelType25, const char channelName26[], float64* state26, int32 channelType26, const char channelName27[], float64* state27, int32 channelType27, const char channelName28[], float64* state28, int32 channelType28, const char channelName29[], float64* state29, int32 channelType29, const char channelName30[], float64* state30, int32 channelType30, const char channelName31[], float64* state31, int32 channelType31, const char channelName32[], float64* state32, int32 channelType32, const char channelName33[], float64* state33, int32 channelType33, const char channelName34[], float64* state34, int32 channelType34, const char channelName35[], float64* state35, int32 channelType35, const char channelName36[], float64* state36, int32 channelType36, const char channelName37[], float64* state37, int32 channelType37, const char channelName38[], float64* state38, int32 channelType38, const char channelName39[], float64* state39, int32 channelType39, const char channelName40[], float64* state40, int32 channelType40, const char channelName41[], float64* state41, int32 channelType41, const char channelName42[], float64* state42, int32 channelType42, const char channelName43[], float64* state43, int32 channelType43, const char channelName44[], float64* state44, int32 channelType44, const char channelName45[], float64* state45, int32 channelType45, const char channelName46[], float64* state46, int32 channelType46, const char channelName47[], float64* state47, int32 channelType47, const char channelName48[], float64* state48, int32 channelType48, const char channelName49[], float64* state49, int32 channelType49, const char channelName50[], float64* state50, int32 channelType50, const char channelName51[], float64* state51, int32 channelType51, const char channelName52[], float64* state52, int32 channelType52, const char channelName53[], float64* state53, int32 channelType53, const char channelName54[], float64* state54, int32 channelType54, const char channelName55[], float64* state55, int32 channelType55, const char channelName56[], float64* state56, int32 channelType56, const char channelName57[], float64* state57, int32 channelType57, const char channelName58[], float64* state58, int32 channelType58, const char channelName59[], float64* state59, int32 channelType59, const char channelName60[], float64* state60, int32 channelType60, const char channelName61[], float64* state61, int32 channelType61, const char channelName62[], float64* state62, int32 channelType62, const char channelName63[], float64* state63, int32 channelType63, const char channelName64[], float64* state64, int32 channelType64, const char channelName65[], float64* state65, int32 channelType65, const char channelName66[], float64* state66, int32 channelType66, const char channelName67[], float64* state67, int32 channelType67, const char channelName68[], float64* state68, int32 channelType68, const char channelName69[], float64* state69, int32 channelType69, const char channelName70[], float64* state70, int32 channelType70, const char channelName71[], float64* state71, int32 channelType71, const char channelName72[], float64* state72, int32 channelType72, const char channelName73[], float64* state73, int32 channelType73, const char channelName74[], float64* state74, int32 channelType74, const char channelName75[], float64* state75, int32 channelType75, const char channelName76[], float64* state76, int32 channelType76, const char channelName77[], float64* state77, int32 channelType77, const char channelName78[], float64* state78, int32 channelType78, const char channelName79[], float64* state79, int32 channelType79, const char channelName80[], float64* state80, int32 channelType80, const char channelName81[], float64* state81, int32 channelType81, const char channelName82[], float64* state82, int32 channelType82, const char channelName83[], float64* state83, int32 channelType83, const char channelName84[], float64* state84, int32 channelType84, const char channelName85[], float64* state85, int32 channelType85, const char channelName86[], float64* state86, int32 channelType86, const char channelName87[], float64* state87, int32 channelType87, const char channelName88[], float64* state88, int32 channelType88, const char channelName89[], float64* state89, int32 channelType89, const char channelName90[], float64* state90, int32 channelType90, const char channelName91[], float64* state91, int32 channelType91, const char channelName92[], float64* state92, int32 channelType92, const char channelName93[], float64* state93, int32 channelType93, const char channelName94[], float64* state94, int32 channelType94, const char channelName95[], float64* state95, int32 channelType95);
  int32 GetArmStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetAutoConfiguredCDAQSyncConnections(char portList[], uInt32 portListSize);
  int32 GetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetDeviceAttributeBool(const char deviceName[], int32 attribute, bool32* value, uInt32 size);
  int32 GetDeviceAttributeDouble(const char deviceName[], int32 attribute, float64* value, uInt32 size);
  int32 GetDeviceAttributeDoubleArray(const char deviceName[], int32 attribute, float64 value[], uInt32 size);
  int32 GetDeviceAttributeInt32(const char deviceName[], int32 attribute, int32* value, uInt32 size);
  int32 GetDeviceAttributeInt32Array(const char deviceName[], int32 attribute, int32 value[], uInt32 size);
  int32 GetDeviceAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size);
  int32 GetDeviceAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value, uInt32 size);
  int32 GetDeviceAttributeUInt32Array(const char deviceName[], int32 attribute, uInt32 value[], uInt32 size);
  int32 GetDigitalLogicFamilyPowerUpState(const char deviceName[], int32* logicFamily);
  int32 GetDigitalPowerUpStates(const char deviceName[], const char channelName[], int32* state, const char channelName0[], int32* state0, const char channelName1[], int32* state1, const char channelName2[], int32* state2, const char channelName3[], int32* state3, const char channelName4[], int32* state4, const char channelName5[], int32* state5, const char channelName6[], int32* state6, const char channelName7[], int32* state7, const char channelName8[], int32* state8, const char channelName9[], int32* state9, const char channelName10[], int32* state10, const char channelName11[], int32* state11, const char channelName12[], int32* state12, const char channelName13[], int32* state13, const char channelName14[], int32* state14, const char channelName15[], int32* state15, const char channelName16[], int32* state16, const char channelName17[], int32* state17, const char channelName18[], int32* state18, const char channelName19[], int32* state19, const char channelName20[], int32* state20, const char channelName21[], int32* state21, const char channelName22[], int32* state22, const char channelName23[], int32* state23, const char channelName24[], int32* state24, const char channelName25[], int32* state25, const char channelName26[], int32* state26, const char channelName27[], int32* state27, const char channelName28[], int32* state28, const char channelName29[], int32* state29, const char channelName30[], int32* state30, const char channelName31[], int32* state31, const char channelName32[], int32* state32, const char channelName33[], int32* state33, const char channelName34[], int32* state34, const char channelName35[], int32* state35, const char channelName36[], int32* state36, const char channelName37[], int32* state37, const char channelName38[], int32* state38, const char channelName39[], int32* state39, const char channelName40[], int32* state40, const char channelName41[], int32* state41, const char channelName42[], int32* state42, const char channelName43[], int32* state43, const char channelName44[], int32* state44, const char channelName45[], int32* state45, const char channelName46[], int32* state46, const char channelName47[], int32* state47, const char channelName48[], int32* state48, const char channelName49[], int32* state49, const char channelName50[], int32* state50, const char channelName51[], int32* state51, const char channelName52[], int32* state52, const char channelName53[], int32* state53, const char channelName54[], int32* state54, const char channelName55[], int32* state55, const char channelName56[], int32* state56, const char channelName57[], int32* state57, const char channelName58[], int32* state58, const char channelName59[], int32* state59, const char channelName60[], int32* state60, const char channelName61[], int32* state61, const char channelName62[], int32* state62, const char channelName63[], int32* state63, const char channelName64[], int32* state64, const char channelName65[], int32* state65, const char channelName66[], int32* state66, const char channelName67[], int32* state67, const char channelName68[], int32* state68, const char channelName69[], int32* state69, const char channelName70[], int32* state70, const char channelName71[], int32* state71, const char channelName72[], int32* state72, const char channelName73[], int32* state73, const char channelName74[], int32* state74, const char channelName75[], int32* state75, const char channelName76[], int32* state76, const char channelName77[], int32* state77, const char channelName78[], int32* state78, const char channelName79[], int32* state79, const char channelName80[], int32* state80, const char channelName81[], int32* state81, const char channelName82[], int32* state82, const char channelName83[], int32* state83, const char channelName84[], int32* state84, const char channelName85[], int32* state85, const char channelName86[], int32* state86, const char channelName87[], int32* state87, const char channelName88[], int32* state88, const char channelName89[], int32* state89, const char channelName90[], int32* state90, const char channelName91[], int32* state91, const char channelName92[], int32* state92, const char channelName93[], int32* state93, const char channelName94[], int32* state94, const char channelName95[], int32* state95);
  int32 GetDigitalPullUpPullDownStates(const char deviceName[], const char channelName[], int32* state, const char channelName0[], int32* state0, const char channelName1[], int32* state1, const char channelName2[], int32* state2, const char channelName3[], int32* state3, const char channelName4[], int32* state4, const char channelName5[], int32* state5, const char channelName6[], int32* state6, const char channelName7[], int32* state7, const char channelName8[], int32* state8, const char channelName9[], int32* state9, const char channelName10[], int32* state10, const char channelName11[], int32* state11, const char channelName12[], int32* state12, const char channelName13[], int32* state13, const char channelName14[], int32* state14, const char channelName15[], int32* state15, const char channelName16[], int32* state16, const char channelName17[], int32* state17, const char channelName18[], int32* state18, const char channelName19[], int32* state19, const char channelName20[], int32* state20, const char channelName21[], int32* state21, const char channelName22[], int32* state22, const char channelName23[], int32* state23, const char channelName24[], int32* state24, const char channelName25[], int32* state25, const char channelName26[], int32* state26, const char channelName27[], int32* state27, const char channelName28[], int32* state28, const char channelName29[], int32* state29, const char channelName30[], int32* state30, const char channelName31[], int32* state31, const char channelName32[], int32* state32, const char channelName33[], int32* state33, const char channelName34[], int32* state34, const char channelName35[], int32* state35, const char channelName36[], int32* state36, const char channelName37[], int32* state37, const char channelName38[], int32* state38, const char channelName39[], int32* state39, const char channelName40[], int32* state40, const char channelName41[], int32* state41, const char channelName42[], int32* state42, const char channelName43[], int32* state43, const char channelName44[], int32* state44, const char channelName45[], int32* state45, const char channelName46[], int32* state46, const char channelName47[], int32* state47, const char channelName48[], int32* state48, const char channelName49[], int32* state49, const char channelName50[], int32* state50, const char channelName51[], int32* state51, const char channelName52[], int32* state52, const char channelName53[], int32* state53, const char channelName54[], int32* state54, const char channelName55[], int32* state55, const char channelName56[], int32* state56, const char channelName57[], int32* state57, const char channelName58[], int32* state58, const char channelName59[], int32* state59, const char channelName60[], int32* state60, const char channelName61[], int32* state61, const char channelName62[], int32* state62, const char channelName63[], int32* state63, const char channelName64[], int32* state64, const char channelName65[], int32* state65, const char channelName66[], int32* state66, const char channelName67[], int32* state67, const char channelName68[], int32* state68, const char channelName69[], int32* state69, const char channelName70[], int32* state70, const char channelName71[], int32* state71, const char channelName72[], int32* state72, const char channelName73[], int32* state73, const char channelName74[], int32* state74, const char channelName75[], int32* state75, const char channelName76[], int32* state76, const char channelName77[], int32* state77, const char channelName78[], int32* state78, const char channelName79[], int32* state79, const char channelName80[], int32* state80, const char channelName81[], int32* state81, const char channelName82[], int32* state82, const char channelName83[], int32* state83, const char channelName84[], int32* state84, const char channelName85[], int32* state85, const char channelName86[], int32* state86, const char channelName87[], int32* state87, const char channelName88[], int32* state88, const char channelName89[], int32* state89, const char channelName90[], int32* state90, const char channelName91[], int32* state91, const char channelName92[], int32* state92, const char channelName93[], int32* state93, const char channelName94[], int32* state94, const char channelName95[], int32* state95);
  int32 GetDisconnectedCDAQSyncPorts(char portList[], uInt32 portListSize);
  int32 GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize);
  int32 GetExtendedErrorInfo(char errorString[], uInt32 bufferSize);
  int32 GetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetFirstSampTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetNthTaskReadChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetRefTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetScaleAttributeDouble(const char scaleName[], int32 attribute, float64* value, uInt32 size);
  int32 GetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, float64 value[], uInt32 size);
  int32 GetScaleAttributeInt32(const char scaleName[], int32 attribute, int32* value, uInt32 size);
  int32 GetScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size);
  int32 GetSelfCalLastDateAndTime(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 IsTaskDone(TaskHandle task, bool32* isTaskDone);
  int32 LoadTask(const char sessionName[], TaskHandle* task);
  int32 ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadAnalogScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  int32 ReadBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryI32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterF64Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  int32 ReadCounterScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  int32 ReadCounterU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterU32Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrFreq(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrFreqScalar(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved);
  int32 ReadCtrTicks(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrTicksScalar(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved);
  int32 ReadCtrTime(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrTimeScalar(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved);
  int32 ReadDigitalLines(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved);
  int32 ReadDigitalScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  int32 ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadDigitalU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadRaw(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved);
  int32 RegisterDoneEvent(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData);
  int32 RegisterEveryNSamplesEvent(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData);
  int32 RegisterSignalEvent(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData);
  int32 RemoveCDAQSyncConnection(const char portList[]);
  int32 ReserveNetworkDevice(const char deviceName[], bool32 overrideReservation);
  int32 ResetBufferAttribute(TaskHandle task, int32 attribute);
  int32 ResetDevice(const char deviceName[]);
  int32 SaveGlobalChan(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options);
  int32 SaveScale(const char scaleName[], const char saveAs[], const char author[], uInt32 options);
  int32 SaveTask(TaskHandle task, const char saveAs[], const char author[], uInt32 options);
  int32 SelfCal(const char deviceName[]);
  int32 SelfTestDevice(const char deviceName[]);
  int32 SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  int32 SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  int32 SetAnalogPowerUpStates(const char deviceName[], const char channelNames[], float64 state, int32 channelType, const char channelNames0[], float64 state0, int32 channelType0, const char channelNames1[], float64 state1, int32 channelType1, const char channelNames2[], float64 state2, int32 channelType2, const char channelNames3[], float64 state3, int32 channelType3, const char channelNames4[], float64 state4, int32 channelType4, const char channelNames5[], float64 state5, int32 channelType5, const char channelNames6[], float64 state6, int32 channelType6, const char channelNames7[], float64 state7, int32 channelType7, const char channelNames8[], float64 state8, int32 channelType8, const char channelNames9[], float64 state9, int32 channelType9, const char channelNames10[], float64 state10, int32 channelType10, const char channelNames11[], float64 state11, int32 channelType11, const char channelNames12[], float64 state12, int32 channelType12, const char channelNames13[], float64 state13, int32 channelType13, const char channelNames14[], float64 state14, int32 channelType14, const char channelNames15[], float64 state15, int32 channelType15, const char channelNames16[], float64 state16, int32 channelType16, const char channelNames17[], float64 state17, int32 channelType17, const char channelNames18[], float64 state18, int32 channelType18, const char channelNames19[], float64 state19, int32 channelType19, const char channelNames20[], float64 state20, int32 channelType20, const char channelNames21[], float64 state21, int32 channelType21, const char channelNames22[], float64 state22, int32 channelType22, const char channelNames23[], float64 state23, int32 channelType23, const char channelNames24[], float64 state24, int32 channelType24, const char channelNames25[], float64 state25, int32 channelType25, const char channelNames26[], float64 state26, int32 channelType26, const char channelNames27[], float64 state27, int32 channelType27, const char channelNames28[], float64 state28, int32 channelType28, const char channelNames29[], float64 state29, int32 channelType29, const char channelNames30[], float64 state30, int32 channelType30, const char channelNames31[], float64 state31, int32 channelType31, const char channelNames32[], float64 state32, int32 channelType32, const char channelNames33[], float64 state33, int32 channelType33, const char channelNames34[], float64 state34, int32 channelType34, const char channelNames35[], float64 state35, int32 channelType35, const char channelNames36[], float64 state36, int32 channelType36, const char channelNames37[], float64 state37, int32 channelType37, const char channelNames38[], float64 state38, int32 channelType38, const char channelNames39[], float64 state39, int32 channelType39, const char channelNames40[], float64 state40, int32 channelType40, const char channelNames41[], float64 state41, int32 channelType41, const char channelNames42[], float64 state42, int32 channelType42, const char channelNames43[], float64 state43, int32 channelType43, const char channelNames44[], float64 state44, int32 channelType44, const char channelNames45[], float64 state45, int32 channelType45, const char channelNames46[], float64 state46, int32 channelType46, const char channelNames47[], float64 state47, int32 channelType47, const char channelNames48[], float64 state48, int32 channelType48, const char channelNames49[], float64 state49, int32 channelType49, const char channelNames50[], float64 state50, int32 channelType50, const char channelNames51[], float64 state51, int32 channelType51, const char channelNames52[], float64 state52, int32 channelType52, const char channelNames53[], float64 state53, int32 channelType53, const char channelNames54[], float64 state54, int32 channelType54, const char channelNames55[], float64 state55, int32 channelType55, const char channelNames56[], float64 state56, int32 channelType56, const char channelNames57[], float64 state57, int32 channelType57, const char channelNames58[], float64 state58, int32 channelType58, const char channelNames59[], float64 state59, int32 channelType59, const char channelNames60[], float64 state60, int32 channelType60, const char channelNames61[], float64 state61, int32 channelType61, const char channelNames62[], float64 state62, int32 channelType62, const char channelNames63[], float64 state63, int32 channelType63, const char channelNames64[], float64 state64, int32 channelType64, const char channelNames65[], float64 state65, int32 channelType65, const char channelNames66[], float64 state66, int32 channelType66, const char channelNames67[], float64 state67, int32 channelType67, const char channelNames68[], float64 state68, int32 channelType68, const char channelNames69[], float64 state69, int32 channelType69, const char channelNames70[], float64 state70, int32 channelType70, const char channelNames71[], float64 state71, int32 channelType71, const char channelNames72[], float64 state72, int32 channelType72, const char channelNames73[], float64 state73, int32 channelType73, const char channelNames74[], float64 state74, int32 channelType74, const char channelNames75[], float64 state75, int32 channelType75, const char channelNames76[], float64 state76, int32 channelType76, const char channelNames77[], float64 state77, int32 channelType77, const char channelNames78[], float64 state78, int32 channelType78, const char channelNames79[], float64 state79, int32 channelType79, const char channelNames80[], float64 state80, int32 channelType80, const char channelNames81[], float64 state81, int32 channelType81, const char channelNames82[], float64 state82, int32 channelType82, const char channelNames83[], float64 state83, int32 channelType83, const char channelNames84[], float64 state84, int32 channelType84, const char channelNames85[], float64 state85, int32 channelType85, const char channelNames86[], float64 state86, int32 channelType86, const char channelNames87[], float64 state87, int32 channelType87, const char channelNames88[], float64 state88, int32 channelType88, const char channelNames89[], float64 state89, int32 channelType89, const char channelNames90[], float64 state90, int32 channelType90, const char channelNames91[], float64 state91, int32 channelType91, const char channelNames92[], float64 state92, int32 channelType92, const char channelNames93[], float64 state93, int32 channelType93, const char channelNames94[], float64 state94, int32 channelType94, const char channelNames95[], float64 state95, int32 channelType95);
  int32 SetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetDigitalLogicFamilyPowerUpState(const char deviceName[], int32 logicFamily);
  int32 SetDigitalPowerUpStates(const char deviceName[], const char channelNames[], int32 state, const char channelNames0[], int32 state0, const char channelNames1[], int32 state1, const char channelNames2[], int32 state2, const char channelNames3[], int32 state3, const char channelNames4[], int32 state4, const char channelNames5[], int32 state5, const char channelNames6[], int32 state6, const char channelNames7[], int32 state7, const char channelNames8[], int32 state8, const char channelNames9[], int32 state9, const char channelNames10[], int32 state10, const char channelNames11[], int32 state11, const char channelNames12[], int32 state12, const char channelNames13[], int32 state13, const char channelNames14[], int32 state14, const char channelNames15[], int32 state15, const char channelNames16[], int32 state16, const char channelNames17[], int32 state17, const char channelNames18[], int32 state18, const char channelNames19[], int32 state19, const char channelNames20[], int32 state20, const char channelNames21[], int32 state21, const char channelNames22[], int32 state22, const char channelNames23[], int32 state23, const char channelNames24[], int32 state24, const char channelNames25[], int32 state25, const char channelNames26[], int32 state26, const char channelNames27[], int32 state27, const char channelNames28[], int32 state28, const char channelNames29[], int32 state29, const char channelNames30[], int32 state30, const char channelNames31[], int32 state31, const char channelNames32[], int32 state32, const char channelNames33[], int32 state33, const char channelNames34[], int32 state34, const char channelNames35[], int32 state35, const char channelNames36[], int32 state36, const char channelNames37[], int32 state37, const char channelNames38[], int32 state38, const char channelNames39[], int32 state39, const char channelNames40[], int32 state40, const char channelNames41[], int32 state41, const char channelNames42[], int32 state42, const char channelNames43[], int32 state43, const char channelNames44[], int32 state44, const char channelNames45[], int32 state45, const char channelNames46[], int32 state46, const char channelNames47[], int32 state47, const char channelNames48[], int32 state48, const char channelNames49[], int32 state49, const char channelNames50[], int32 state50, const char channelNames51[], int32 state51, const char channelNames52[], int32 state52, const char channelNames53[], int32 state53, const char channelNames54[], int32 state54, const char channelNames55[], int32 state55, const char channelNames56[], int32 state56, const char channelNames57[], int32 state57, const char channelNames58[], int32 state58, const char channelNames59[], int32 state59, const char channelNames60[], int32 state60, const char channelNames61[], int32 state61, const char channelNames62[], int32 state62, const char channelNames63[], int32 state63, const char channelNames64[], int32 state64, const char channelNames65[], int32 state65, const char channelNames66[], int32 state66, const char channelNames67[], int32 state67, const char channelNames68[], int32 state68, const char channelNames69[], int32 state69, const char channelNames70[], int32 state70, const char channelNames71[], int32 state71, const char channelNames72[], int32 state72, const char channelNames73[], int32 state73, const char channelNames74[], int32 state74, const char channelNames75[], int32 state75, const char channelNames76[], int32 state76, const char channelNames77[], int32 state77, const char channelNames78[], int32 state78, const char channelNames79[], int32 state79, const char channelNames80[], int32 state80, const char channelNames81[], int32 state81, const char channelNames82[], int32 state82, const char channelNames83[], int32 state83, const char channelNames84[], int32 state84, const char channelNames85[], int32 state85, const char channelNames86[], int32 state86, const char channelNames87[], int32 state87, const char channelNames88[], int32 state88, const char channelNames89[], int32 state89, const char channelNames90[], int32 state90, const char channelNames91[], int32 state91, const char channelNames92[], int32 state92, const char channelNames93[], int32 state93, const char channelNames94[], int32 state94, const char channelNames95[], int32 state95);
  int32 SetDigitalPullUpPullDownStates(const char deviceName[], const char channelNames[], int32 state, const char channelNames0[], int32 state0, const char channelNames1[], int32 state1, const char channelNames2[], int32 state2, const char channelNames3[], int32 state3, const char channelNames4[], int32 state4, const char channelNames5[], int32 state5, const char channelNames6[], int32 state6, const char channelNames7[], int32 state7, const char channelNames8[], int32 state8, const char channelNames9[], int32 state9, const char channelNames10[], int32 state10, const char channelNames11[], int32 state11, const char channelNames12[], int32 state12, const char channelNames13[], int32 state13, const char channelNames14[], int32 state14, const char channelNames15[], int32 state15, const char channelNames16[], int32 state16, const char channelNames17[], int32 state17, const char channelNames18[], int32 state18, const char channelNames19[], int32 state19, const char channelNames20[], int32 state20, const char channelNames21[], int32 state21, const char channelNames22[], int32 state22, const char channelNames23[], int32 state23, const char channelNames24[], int32 state24, const char channelNames25[], int32 state25, const char channelNames26[], int32 state26, const char channelNames27[], int32 state27, const char channelNames28[], int32 state28, const char channelNames29[], int32 state29, const char channelNames30[], int32 state30, const char channelNames31[], int32 state31, const char channelNames32[], int32 state32, const char channelNames33[], int32 state33, const char channelNames34[], int32 state34, const char channelNames35[], int32 state35, const char channelNames36[], int32 state36, const char channelNames37[], int32 state37, const char channelNames38[], int32 state38, const char channelNames39[], int32 state39, const char channelNames40[], int32 state40, const char channelNames41[], int32 state41, const char channelNames42[], int32 state42, const char channelNames43[], int32 state43, const char channelNames44[], int32 state44, const char channelNames45[], int32 state45, const char channelNames46[], int32 state46, const char channelNames47[], int32 state47, const char channelNames48[], int32 state48, const char channelNames49[], int32 state49, const char channelNames50[], int32 state50, const char channelNames51[], int32 state51, const char channelNames52[], int32 state52, const char channelNames53[], int32 state53, const char channelNames54[], int32 state54, const char channelNames55[], int32 state55, const char channelNames56[], int32 state56, const char channelNames57[], int32 state57, const char channelNames58[], int32 state58, const char channelNames59[], int32 state59, const char channelNames60[], int32 state60, const char channelNames61[], int32 state61, const char channelNames62[], int32 state62, const char channelNames63[], int32 state63, const char channelNames64[], int32 state64, const char channelNames65[], int32 state65, const char channelNames66[], int32 state66, const char channelNames67[], int32 state67, const char channelNames68[], int32 state68, const char channelNames69[], int32 state69, const char channelNames70[], int32 state70, const char channelNames71[], int32 state71, const char channelNames72[], int32 state72, const char channelNames73[], int32 state73, const char channelNames74[], int32 state74, const char channelNames75[], int32 state75, const char channelNames76[], int32 state76, const char channelNames77[], int32 state77, const char channelNames78[], int32 state78, const char channelNames79[], int32 state79, const char channelNames80[], int32 state80, const char channelNames81[], int32 state81, const char channelNames82[], int32 state82, const char channelNames83[], int32 state83, const char channelNames84[], int32 state84, const char channelNames85[], int32 state85, const char channelNames86[], int32 state86, const char channelNames87[], int32 state87, const char channelNames88[], int32 state88, const char channelNames89[], int32 state89, const char channelNames90[], int32 state90, const char channelNames91[], int32 state91, const char channelNames92[], int32 state92, const char channelNames93[], int32 state93, const char channelNames94[], int32 state94, const char channelNames95[], int32 state95);
  int32 SetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetScaleAttributeDouble(const char scaleName[], int32 attribute, float64 value, uInt32 size);
  int32 SetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, const float64 value[], uInt32 size);
  int32 SetScaleAttributeInt32(const char scaleName[], int32 attribute, int32 value, uInt32 size);
  int32 SetScaleAttributeString(const char scaleName[], int32 attribute, const char value[], uInt32 size);
  int32 SetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 StartNewFile(TaskHandle task, const char filePath[]);
  int32 StartTask(TaskHandle task);
  int32 StopTask(TaskHandle task);
  int32 TaskControl(TaskHandle task, int32 action);
  int32 TristateOutputTerm(const char outputTerminal[]);
  int32 UnreserveNetworkDevice(const char deviceName[]);
  int32 WaitForNextSampleClock(TaskHandle task, float64 timeout, bool32* isLate);
  int32 WaitForValidTimestamp(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp);
  int32 WaitUntilTaskDone(TaskHandle task, float64 timeToWait);
  int32 WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteAnalogScalarF64(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved);
  int32 WriteBinaryI16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryI32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteCtrFreq(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrFreqScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved);
  int32 WriteCtrTicks(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrTicksScalar(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved);
  int32 WriteCtrTime(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrTimeScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved);
  int32 WriteDigitalLines(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalScalarU32(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved);
  int32 WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteRaw(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteToTEDSFromArray(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions);
  int32 WriteToTEDSFromFile(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions);

 private:
  using AddCDAQSyncConnectionPtr = int32 (*)(const char portList[]);
  using AddGlobalChansToTaskPtr = int32 (*)(TaskHandle task, const char channelNames[]);
  using AddNetworkDevicePtr = int32 (*)(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize);
  using AreConfiguredCDAQSyncPortsDisconnectedPtr = int32 (*)(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist);
  using AutoConfigureCDAQSyncConnectionsPtr = int32 (*)(const char chassisDevicesPorts[], float64 timeout);
  using CalculateReversePolyCoeffPtr = int32 (*)(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[]);
  using CfgAnlgEdgeRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples);
  using CfgAnlgEdgeStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel);
  using CfgAnlgMultiEdgeRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize);
  using CfgAnlgMultiEdgeStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize);
  using CfgAnlgWindowRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples);
  using CfgAnlgWindowStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom);
  using CfgBurstHandshakingTimingExportClockPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel);
  using CfgBurstHandshakingTimingImportClockPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel);
  using CfgChangeDetectionTimingPtr = int32 (*)(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan);
  using CfgDigEdgeRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples);
  using CfgDigEdgeStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerEdge);
  using CfgDigPatternRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples);
  using CfgDigPatternStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen);
  using CfgHandshakingTimingPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  using CfgImplicitTimingPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  using CfgInputBufferPtr = int32 (*)(TaskHandle task, uInt32 numSampsPerChan);
  using CfgOutputBufferPtr = int32 (*)(TaskHandle task, uInt32 numSampsPerChan);
  using CfgPipelinedSampClkTimingPtr = int32 (*)(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  using CfgSampClkTimingPtr = int32 (*)(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  using CfgTimeStartTrigPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime when, int32 timescale);
  using CfgWatchdogAOExpirStatesPtr = int32 (*)(TaskHandle task, const char channelNames[], const float64 expirStateArray[], const int32 outputTypeArray[], uInt32 arraySize);
  using CfgWatchdogCOExpirStatesPtr = int32 (*)(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize);
  using CfgWatchdogDOExpirStatesPtr = int32 (*)(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize);
  using ClearTEDSPtr = int32 (*)(const char physicalChannel[]);
  using ClearTaskPtr = int32 (*)(TaskHandle task);
  using ConfigureLoggingPtr = int32 (*)(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation);
  using ConfigureTEDSPtr = int32 (*)(const char physicalChannel[], const char filePath[]);
  using ConnectTermsPtr = int32 (*)(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers);
  using ControlWatchdogTaskPtr = int32 (*)(TaskHandle task, int32 action);
  using CreateAIAccel4WireDCVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  using CreateAIAccelChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIAccelChargeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  using CreateAIBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[]);
  using CreateAIChargeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAICurrentChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  using CreateAICurrentRMSChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  using CreateAIForceBridgePolynomialChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  using CreateAIForceBridgeTableChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  using CreateAIForceBridgeTwoPointLinChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  using CreateAIForceIEPEChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIFreqVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[]);
  using CreateAIMicrophoneChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIPosEddyCurrProxProbeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  using CreateAIPosLVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateAIPosRVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateAIPressureBridgePolynomialChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  using CreateAIPressureBridgeTableChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  using CreateAIPressureBridgeTwoPointLinChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  using CreateAIRTDChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0);
  using CreateAIResistanceChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIRosetteStrainGageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, const int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance);
  using CreateAIStrainGageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[]);
  using CreateAITempBuiltInSensorChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units);
  using CreateAIThrmcplChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  using CreateAIThrmstrChanIexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c);
  using CreateAIThrmstrChanVexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1);
  using CreateAITorqueBridgePolynomialChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  using CreateAITorqueBridgeTableChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  using CreateAITorqueBridgeTwoPointLinChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  using CreateAIVelocityIEPEChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAIVoltageChanWithExcitPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  using CreateAIVoltageRMSChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAOCurrentChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAOFuncGenChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset);
  using CreateAOVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateCIAngEncoderChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[]);
  using CreateCIAngVelocityChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[]);
  using CreateCICountEdgesChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection);
  using CreateCIDutyCycleChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[]);
  using CreateCIFreqChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  using CreateCIGPSTimestampChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[]);
  using CreateCILinEncoderChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[]);
  using CreateCILinVelocityChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[]);
  using CreateCIPeriodChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  using CreateCIPulseChanFreqPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  using CreateCIPulseChanTicksPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal);
  using CreateCIPulseChanTimePtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  using CreateCIPulseWidthChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[]);
  using CreateCISemiPeriodChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateCITwoEdgeSepChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[]);
  using CreateCOPulseChanFreqPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle);
  using CreateCOPulseChanTicksPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks);
  using CreateCOPulseChanTimePtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime);
  using CreateDIChanPtr = int32 (*)(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  using CreateDOChanPtr = int32 (*)(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  using CreateLinScalePtr = int32 (*)(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[]);
  using CreateMapScalePtr = int32 (*)(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[]);
  using CreatePolynomialScalePtr = int32 (*)(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[]);
  using CreateTEDSAIAccelChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAICurrentChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  using CreateTEDSAIForceBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAIForceIEPEChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIMicrophoneChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIPosLVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateTEDSAIPosRVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateTEDSAIPressureBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAIRTDChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  using CreateTEDSAIResistanceChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIStrainGageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[]);
  using CreateTEDSAIThrmcplChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  using CreateTEDSAIThrmstrChanIexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  using CreateTEDSAIThrmstrChanVexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1);
  using CreateTEDSAITorqueBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAIVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateTEDSAIVoltageChanWithExcitPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTableScalePtr = int32 (*)(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[]);
  using CreateTaskPtr = int32 (*)(const char sessionName[], TaskHandle* task);
  using CreateWatchdogTimerTaskPtr = int32 (*)(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState, ...);
  using CreateWatchdogTimerTaskExPtr = int32 (*)(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout);
  using DeleteNetworkDevicePtr = int32 (*)(const char deviceName[]);
  using DeleteSavedGlobalChanPtr = int32 (*)(const char channelName[]);
  using DeleteSavedScalePtr = int32 (*)(const char scaleName[]);
  using DeleteSavedTaskPtr = int32 (*)(const char taskName[]);
  using DeviceSupportsCalPtr = int32 (*)(const char deviceName[], bool32* calSupported);
  using DisableRefTrigPtr = int32 (*)(TaskHandle task);
  using DisableStartTrigPtr = int32 (*)(TaskHandle task);
  using DisconnectTermsPtr = int32 (*)(const char sourceTerminal[], const char destinationTerminal[]);
  using ExportSignalPtr = int32 (*)(TaskHandle task, int32 signalID, const char outputTerminal[]);
  using GetAIChanCalCalDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  using GetAIChanCalExpDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  using GetAnalogPowerUpStatesPtr = int32 (*)(const char deviceName[], const char channelName[], float64* state, int32 channelType, ...);
  using GetArmStartTrigTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetArmStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetAutoConfiguredCDAQSyncConnectionsPtr = int32 (*)(char portList[], uInt32 portListSize);
  using GetBufferAttributeUInt32Ptr = int32 (*)(TaskHandle task, int32 attribute, uInt32* value);
  using GetDeviceAttributeBoolPtr = int32 (*)(const char deviceName[], int32 attribute, bool32* value, uInt32 size);
  using GetDeviceAttributeDoublePtr = int32 (*)(const char deviceName[], int32 attribute, float64* value, uInt32 size);
  using GetDeviceAttributeDoubleArrayPtr = int32 (*)(const char deviceName[], int32 attribute, float64 value[], uInt32 size);
  using GetDeviceAttributeInt32Ptr = int32 (*)(const char deviceName[], int32 attribute, int32* value, uInt32 size);
  using GetDeviceAttributeInt32ArrayPtr = int32 (*)(const char deviceName[], int32 attribute, int32 value[], uInt32 size);
  using GetDeviceAttributeStringPtr = int32 (*)(const char deviceName[], int32 attribute, char value[], uInt32 size);
  using GetDeviceAttributeUInt32Ptr = int32 (*)(const char deviceName[], int32 attribute, uInt32* value, uInt32 size);
  using GetDeviceAttributeUInt32ArrayPtr = int32 (*)(const char deviceName[], int32 attribute, uInt32 value[], uInt32 size);
  using GetDigitalLogicFamilyPowerUpStatePtr = int32 (*)(const char deviceName[], int32* logicFamily);
  using GetDigitalPowerUpStatesPtr = int32 (*)(const char deviceName[], const char channelName[], int32* state, ...);
  using GetDigitalPullUpPullDownStatesPtr = int32 (*)(const char deviceName[], const char channelName[], int32* state, ...);
  using GetDisconnectedCDAQSyncPortsPtr = int32 (*)(char portList[], uInt32 portListSize);
  using GetErrorStringPtr = int32 (*)(int32 errorCode, char errorString[], uInt32 bufferSize);
  using GetExtendedErrorInfoPtr = int32 (*)(char errorString[], uInt32 bufferSize);
  using GetFirstSampClkWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetFirstSampTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetNthTaskChannelPtr = int32 (*)(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  using GetNthTaskDevicePtr = int32 (*)(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  using GetNthTaskReadChannelPtr = int32 (*)(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  using GetRefTrigTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetScaleAttributeDoublePtr = int32 (*)(const char scaleName[], int32 attribute, float64* value, uInt32 size);
  using GetScaleAttributeDoubleArrayPtr = int32 (*)(const char scaleName[], int32 attribute, float64 value[], uInt32 size);
  using GetScaleAttributeInt32Ptr = int32 (*)(const char scaleName[], int32 attribute, int32* value, uInt32 size);
  using GetScaleAttributeStringPtr = int32 (*)(const char scaleName[], int32 attribute, char value[], uInt32 size);
  using GetSelfCalLastDateAndTimePtr = int32 (*)(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  using GetStartTrigTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetSyncPulseTimeWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using IsTaskDonePtr = int32 (*)(TaskHandle task, bool32* isTaskDone);
  using LoadTaskPtr = int32 (*)(const char sessionName[], TaskHandle* task);
  using ReadAnalogF64Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadAnalogScalarF64Ptr = int32 (*)(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  using ReadBinaryI16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadBinaryI32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadBinaryU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadBinaryU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterF64Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterF64ExPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterScalarF64Ptr = int32 (*)(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  using ReadCounterScalarU32Ptr = int32 (*)(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  using ReadCounterU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterU32ExPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrFreqPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrFreqScalarPtr = int32 (*)(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved);
  using ReadCtrTicksPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrTicksScalarPtr = int32 (*)(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved);
  using ReadCtrTimePtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrTimeScalarPtr = int32 (*)(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved);
  using ReadDigitalLinesPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved);
  using ReadDigitalScalarU32Ptr = int32 (*)(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  using ReadDigitalU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadDigitalU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadDigitalU8Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadRawPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved);
  using RegisterDoneEventPtr = int32 (*)(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData);
  using RegisterEveryNSamplesEventPtr = int32 (*)(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData);
  using RegisterSignalEventPtr = int32 (*)(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData);
  using RemoveCDAQSyncConnectionPtr = int32 (*)(const char portList[]);
  using ReserveNetworkDevicePtr = int32 (*)(const char deviceName[], bool32 overrideReservation);
  using ResetBufferAttributePtr = int32 (*)(TaskHandle task, int32 attribute);
  using ResetDevicePtr = int32 (*)(const char deviceName[]);
  using SaveGlobalChanPtr = int32 (*)(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options);
  using SaveScalePtr = int32 (*)(const char scaleName[], const char saveAs[], const char author[], uInt32 options);
  using SaveTaskPtr = int32 (*)(TaskHandle task, const char saveAs[], const char author[], uInt32 options);
  using SelfCalPtr = int32 (*)(const char deviceName[]);
  using SelfTestDevicePtr = int32 (*)(const char deviceName[]);
  using SetAIChanCalCalDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  using SetAIChanCalExpDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  using SetAnalogPowerUpStatesPtr = int32 (*)(const char deviceName[], const char channelNames[], float64 state, int32 channelType, ...);
  using SetArmStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using SetBufferAttributeUInt32Ptr = int32 (*)(TaskHandle task, int32 attribute, uInt32 value);
  using SetDigitalLogicFamilyPowerUpStatePtr = int32 (*)(const char deviceName[], int32 logicFamily);
  using SetDigitalPowerUpStatesPtr = int32 (*)(const char deviceName[], const char channelNames[], int32 state, ...);
  using SetDigitalPullUpPullDownStatesPtr = int32 (*)(const char deviceName[], const char channelNames[], int32 state, ...);
  using SetFirstSampClkWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using SetScaleAttributeDoublePtr = int32 (*)(const char scaleName[], int32 attribute, float64 value, uInt32 size);
  using SetScaleAttributeDoubleArrayPtr = int32 (*)(const char scaleName[], int32 attribute, const float64 value[], uInt32 size);
  using SetScaleAttributeInt32Ptr = int32 (*)(const char scaleName[], int32 attribute, int32 value, uInt32 size);
  using SetScaleAttributeStringPtr = int32 (*)(const char scaleName[], int32 attribute, const char value[], uInt32 size);
  using SetStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using SetSyncPulseTimeWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using StartNewFilePtr = int32 (*)(TaskHandle task, const char filePath[]);
  using StartTaskPtr = int32 (*)(TaskHandle task);
  using StopTaskPtr = int32 (*)(TaskHandle task);
  using TaskControlPtr = int32 (*)(TaskHandle task, int32 action);
  using TristateOutputTermPtr = int32 (*)(const char outputTerminal[]);
  using UnreserveNetworkDevicePtr = int32 (*)(const char deviceName[]);
  using WaitForNextSampleClockPtr = int32 (*)(TaskHandle task, float64 timeout, bool32* isLate);
  using WaitForValidTimestampPtr = int32 (*)(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp);
  using WaitUntilTaskDonePtr = int32 (*)(TaskHandle task, float64 timeToWait);
  using WriteAnalogF64Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteAnalogScalarF64Ptr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved);
  using WriteBinaryI16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteBinaryI32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteBinaryU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteBinaryU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteCtrFreqPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved);
  using WriteCtrFreqScalarPtr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved);
  using WriteCtrTicksPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved);
  using WriteCtrTicksScalarPtr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved);
  using WriteCtrTimePtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved);
  using WriteCtrTimeScalarPtr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved);
  using WriteDigitalLinesPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteDigitalScalarU32Ptr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved);
  using WriteDigitalU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteDigitalU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteDigitalU8Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteRawPtr = int32 (*)(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteToTEDSFromArrayPtr = int32 (*)(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions);
  using WriteToTEDSFromFilePtr = int32 (*)(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions);

  typedef struct FunctionPointers {
    AddCDAQSyncConnectionPtr AddCDAQSyncConnection;
    AddGlobalChansToTaskPtr AddGlobalChansToTask;
    AddNetworkDevicePtr AddNetworkDevice;
    AreConfiguredCDAQSyncPortsDisconnectedPtr AreConfiguredCDAQSyncPortsDisconnected;
    AutoConfigureCDAQSyncConnectionsPtr AutoConfigureCDAQSyncConnections;
    CalculateReversePolyCoeffPtr CalculateReversePolyCoeff;
    CfgAnlgEdgeRefTrigPtr CfgAnlgEdgeRefTrig;
    CfgAnlgEdgeStartTrigPtr CfgAnlgEdgeStartTrig;
    CfgAnlgMultiEdgeRefTrigPtr CfgAnlgMultiEdgeRefTrig;
    CfgAnlgMultiEdgeStartTrigPtr CfgAnlgMultiEdgeStartTrig;
    CfgAnlgWindowRefTrigPtr CfgAnlgWindowRefTrig;
    CfgAnlgWindowStartTrigPtr CfgAnlgWindowStartTrig;
    CfgBurstHandshakingTimingExportClockPtr CfgBurstHandshakingTimingExportClock;
    CfgBurstHandshakingTimingImportClockPtr CfgBurstHandshakingTimingImportClock;
    CfgChangeDetectionTimingPtr CfgChangeDetectionTiming;
    CfgDigEdgeRefTrigPtr CfgDigEdgeRefTrig;
    CfgDigEdgeStartTrigPtr CfgDigEdgeStartTrig;
    CfgDigPatternRefTrigPtr CfgDigPatternRefTrig;
    CfgDigPatternStartTrigPtr CfgDigPatternStartTrig;
    CfgHandshakingTimingPtr CfgHandshakingTiming;
    CfgImplicitTimingPtr CfgImplicitTiming;
    CfgInputBufferPtr CfgInputBuffer;
    CfgOutputBufferPtr CfgOutputBuffer;
    CfgPipelinedSampClkTimingPtr CfgPipelinedSampClkTiming;
    CfgSampClkTimingPtr CfgSampClkTiming;
    CfgTimeStartTrigPtr CfgTimeStartTrig;
    CfgWatchdogAOExpirStatesPtr CfgWatchdogAOExpirStates;
    CfgWatchdogCOExpirStatesPtr CfgWatchdogCOExpirStates;
    CfgWatchdogDOExpirStatesPtr CfgWatchdogDOExpirStates;
    ClearTEDSPtr ClearTEDS;
    ClearTaskPtr ClearTask;
    ConfigureLoggingPtr ConfigureLogging;
    ConfigureTEDSPtr ConfigureTEDS;
    ConnectTermsPtr ConnectTerms;
    ControlWatchdogTaskPtr ControlWatchdogTask;
    CreateAIAccel4WireDCVoltageChanPtr CreateAIAccel4WireDCVoltageChan;
    CreateAIAccelChanPtr CreateAIAccelChan;
    CreateAIAccelChargeChanPtr CreateAIAccelChargeChan;
    CreateAIBridgeChanPtr CreateAIBridgeChan;
    CreateAIChargeChanPtr CreateAIChargeChan;
    CreateAICurrentChanPtr CreateAICurrentChan;
    CreateAICurrentRMSChanPtr CreateAICurrentRMSChan;
    CreateAIForceBridgePolynomialChanPtr CreateAIForceBridgePolynomialChan;
    CreateAIForceBridgeTableChanPtr CreateAIForceBridgeTableChan;
    CreateAIForceBridgeTwoPointLinChanPtr CreateAIForceBridgeTwoPointLinChan;
    CreateAIForceIEPEChanPtr CreateAIForceIEPEChan;
    CreateAIFreqVoltageChanPtr CreateAIFreqVoltageChan;
    CreateAIMicrophoneChanPtr CreateAIMicrophoneChan;
    CreateAIPosEddyCurrProxProbeChanPtr CreateAIPosEddyCurrProxProbeChan;
    CreateAIPosLVDTChanPtr CreateAIPosLVDTChan;
    CreateAIPosRVDTChanPtr CreateAIPosRVDTChan;
    CreateAIPressureBridgePolynomialChanPtr CreateAIPressureBridgePolynomialChan;
    CreateAIPressureBridgeTableChanPtr CreateAIPressureBridgeTableChan;
    CreateAIPressureBridgeTwoPointLinChanPtr CreateAIPressureBridgeTwoPointLinChan;
    CreateAIRTDChanPtr CreateAIRTDChan;
    CreateAIResistanceChanPtr CreateAIResistanceChan;
    CreateAIRosetteStrainGageChanPtr CreateAIRosetteStrainGageChan;
    CreateAIStrainGageChanPtr CreateAIStrainGageChan;
    CreateAITempBuiltInSensorChanPtr CreateAITempBuiltInSensorChan;
    CreateAIThrmcplChanPtr CreateAIThrmcplChan;
    CreateAIThrmstrChanIexPtr CreateAIThrmstrChanIex;
    CreateAIThrmstrChanVexPtr CreateAIThrmstrChanVex;
    CreateAITorqueBridgePolynomialChanPtr CreateAITorqueBridgePolynomialChan;
    CreateAITorqueBridgeTableChanPtr CreateAITorqueBridgeTableChan;
    CreateAITorqueBridgeTwoPointLinChanPtr CreateAITorqueBridgeTwoPointLinChan;
    CreateAIVelocityIEPEChanPtr CreateAIVelocityIEPEChan;
    CreateAIVoltageChanPtr CreateAIVoltageChan;
    CreateAIVoltageChanWithExcitPtr CreateAIVoltageChanWithExcit;
    CreateAIVoltageRMSChanPtr CreateAIVoltageRMSChan;
    CreateAOCurrentChanPtr CreateAOCurrentChan;
    CreateAOFuncGenChanPtr CreateAOFuncGenChan;
    CreateAOVoltageChanPtr CreateAOVoltageChan;
    CreateCIAngEncoderChanPtr CreateCIAngEncoderChan;
    CreateCIAngVelocityChanPtr CreateCIAngVelocityChan;
    CreateCICountEdgesChanPtr CreateCICountEdgesChan;
    CreateCIDutyCycleChanPtr CreateCIDutyCycleChan;
    CreateCIFreqChanPtr CreateCIFreqChan;
    CreateCIGPSTimestampChanPtr CreateCIGPSTimestampChan;
    CreateCILinEncoderChanPtr CreateCILinEncoderChan;
    CreateCILinVelocityChanPtr CreateCILinVelocityChan;
    CreateCIPeriodChanPtr CreateCIPeriodChan;
    CreateCIPulseChanFreqPtr CreateCIPulseChanFreq;
    CreateCIPulseChanTicksPtr CreateCIPulseChanTicks;
    CreateCIPulseChanTimePtr CreateCIPulseChanTime;
    CreateCIPulseWidthChanPtr CreateCIPulseWidthChan;
    CreateCISemiPeriodChanPtr CreateCISemiPeriodChan;
    CreateCITwoEdgeSepChanPtr CreateCITwoEdgeSepChan;
    CreateCOPulseChanFreqPtr CreateCOPulseChanFreq;
    CreateCOPulseChanTicksPtr CreateCOPulseChanTicks;
    CreateCOPulseChanTimePtr CreateCOPulseChanTime;
    CreateDIChanPtr CreateDIChan;
    CreateDOChanPtr CreateDOChan;
    CreateLinScalePtr CreateLinScale;
    CreateMapScalePtr CreateMapScale;
    CreatePolynomialScalePtr CreatePolynomialScale;
    CreateTEDSAIAccelChanPtr CreateTEDSAIAccelChan;
    CreateTEDSAIBridgeChanPtr CreateTEDSAIBridgeChan;
    CreateTEDSAICurrentChanPtr CreateTEDSAICurrentChan;
    CreateTEDSAIForceBridgeChanPtr CreateTEDSAIForceBridgeChan;
    CreateTEDSAIForceIEPEChanPtr CreateTEDSAIForceIEPEChan;
    CreateTEDSAIMicrophoneChanPtr CreateTEDSAIMicrophoneChan;
    CreateTEDSAIPosLVDTChanPtr CreateTEDSAIPosLVDTChan;
    CreateTEDSAIPosRVDTChanPtr CreateTEDSAIPosRVDTChan;
    CreateTEDSAIPressureBridgeChanPtr CreateTEDSAIPressureBridgeChan;
    CreateTEDSAIRTDChanPtr CreateTEDSAIRTDChan;
    CreateTEDSAIResistanceChanPtr CreateTEDSAIResistanceChan;
    CreateTEDSAIStrainGageChanPtr CreateTEDSAIStrainGageChan;
    CreateTEDSAIThrmcplChanPtr CreateTEDSAIThrmcplChan;
    CreateTEDSAIThrmstrChanIexPtr CreateTEDSAIThrmstrChanIex;
    CreateTEDSAIThrmstrChanVexPtr CreateTEDSAIThrmstrChanVex;
    CreateTEDSAITorqueBridgeChanPtr CreateTEDSAITorqueBridgeChan;
    CreateTEDSAIVoltageChanPtr CreateTEDSAIVoltageChan;
    CreateTEDSAIVoltageChanWithExcitPtr CreateTEDSAIVoltageChanWithExcit;
    CreateTableScalePtr CreateTableScale;
    CreateTaskPtr CreateTask;
    CreateWatchdogTimerTaskPtr CreateWatchdogTimerTask;
    CreateWatchdogTimerTaskExPtr CreateWatchdogTimerTaskEx;
    DeleteNetworkDevicePtr DeleteNetworkDevice;
    DeleteSavedGlobalChanPtr DeleteSavedGlobalChan;
    DeleteSavedScalePtr DeleteSavedScale;
    DeleteSavedTaskPtr DeleteSavedTask;
    DeviceSupportsCalPtr DeviceSupportsCal;
    DisableRefTrigPtr DisableRefTrig;
    DisableStartTrigPtr DisableStartTrig;
    DisconnectTermsPtr DisconnectTerms;
    ExportSignalPtr ExportSignal;
    GetAIChanCalCalDatePtr GetAIChanCalCalDate;
    GetAIChanCalExpDatePtr GetAIChanCalExpDate;
    GetAnalogPowerUpStatesPtr GetAnalogPowerUpStates;
    GetArmStartTrigTimestampValPtr GetArmStartTrigTimestampVal;
    GetArmStartTrigTrigWhenPtr GetArmStartTrigTrigWhen;
    GetAutoConfiguredCDAQSyncConnectionsPtr GetAutoConfiguredCDAQSyncConnections;
    GetBufferAttributeUInt32Ptr GetBufferAttributeUInt32;
    GetDeviceAttributeBoolPtr GetDeviceAttributeBool;
    GetDeviceAttributeDoublePtr GetDeviceAttributeDouble;
    GetDeviceAttributeDoubleArrayPtr GetDeviceAttributeDoubleArray;
    GetDeviceAttributeInt32Ptr GetDeviceAttributeInt32;
    GetDeviceAttributeInt32ArrayPtr GetDeviceAttributeInt32Array;
    GetDeviceAttributeStringPtr GetDeviceAttributeString;
    GetDeviceAttributeUInt32Ptr GetDeviceAttributeUInt32;
    GetDeviceAttributeUInt32ArrayPtr GetDeviceAttributeUInt32Array;
    GetDigitalLogicFamilyPowerUpStatePtr GetDigitalLogicFamilyPowerUpState;
    GetDigitalPowerUpStatesPtr GetDigitalPowerUpStates;
    GetDigitalPullUpPullDownStatesPtr GetDigitalPullUpPullDownStates;
    GetDisconnectedCDAQSyncPortsPtr GetDisconnectedCDAQSyncPorts;
    GetErrorStringPtr GetErrorString;
    GetExtendedErrorInfoPtr GetExtendedErrorInfo;
    GetFirstSampClkWhenPtr GetFirstSampClkWhen;
    GetFirstSampTimestampValPtr GetFirstSampTimestampVal;
    GetNthTaskChannelPtr GetNthTaskChannel;
    GetNthTaskDevicePtr GetNthTaskDevice;
    GetNthTaskReadChannelPtr GetNthTaskReadChannel;
    GetRefTrigTimestampValPtr GetRefTrigTimestampVal;
    GetScaleAttributeDoublePtr GetScaleAttributeDouble;
    GetScaleAttributeDoubleArrayPtr GetScaleAttributeDoubleArray;
    GetScaleAttributeInt32Ptr GetScaleAttributeInt32;
    GetScaleAttributeStringPtr GetScaleAttributeString;
    GetSelfCalLastDateAndTimePtr GetSelfCalLastDateAndTime;
    GetStartTrigTimestampValPtr GetStartTrigTimestampVal;
    GetStartTrigTrigWhenPtr GetStartTrigTrigWhen;
    GetSyncPulseTimeWhenPtr GetSyncPulseTimeWhen;
    IsTaskDonePtr IsTaskDone;
    LoadTaskPtr LoadTask;
    ReadAnalogF64Ptr ReadAnalogF64;
    ReadAnalogScalarF64Ptr ReadAnalogScalarF64;
    ReadBinaryI16Ptr ReadBinaryI16;
    ReadBinaryI32Ptr ReadBinaryI32;
    ReadBinaryU16Ptr ReadBinaryU16;
    ReadBinaryU32Ptr ReadBinaryU32;
    ReadCounterF64Ptr ReadCounterF64;
    ReadCounterF64ExPtr ReadCounterF64Ex;
    ReadCounterScalarF64Ptr ReadCounterScalarF64;
    ReadCounterScalarU32Ptr ReadCounterScalarU32;
    ReadCounterU32Ptr ReadCounterU32;
    ReadCounterU32ExPtr ReadCounterU32Ex;
    ReadCtrFreqPtr ReadCtrFreq;
    ReadCtrFreqScalarPtr ReadCtrFreqScalar;
    ReadCtrTicksPtr ReadCtrTicks;
    ReadCtrTicksScalarPtr ReadCtrTicksScalar;
    ReadCtrTimePtr ReadCtrTime;
    ReadCtrTimeScalarPtr ReadCtrTimeScalar;
    ReadDigitalLinesPtr ReadDigitalLines;
    ReadDigitalScalarU32Ptr ReadDigitalScalarU32;
    ReadDigitalU16Ptr ReadDigitalU16;
    ReadDigitalU32Ptr ReadDigitalU32;
    ReadDigitalU8Ptr ReadDigitalU8;
    ReadRawPtr ReadRaw;
    RegisterDoneEventPtr RegisterDoneEvent;
    RegisterEveryNSamplesEventPtr RegisterEveryNSamplesEvent;
    RegisterSignalEventPtr RegisterSignalEvent;
    RemoveCDAQSyncConnectionPtr RemoveCDAQSyncConnection;
    ReserveNetworkDevicePtr ReserveNetworkDevice;
    ResetBufferAttributePtr ResetBufferAttribute;
    ResetDevicePtr ResetDevice;
    SaveGlobalChanPtr SaveGlobalChan;
    SaveScalePtr SaveScale;
    SaveTaskPtr SaveTask;
    SelfCalPtr SelfCal;
    SelfTestDevicePtr SelfTestDevice;
    SetAIChanCalCalDatePtr SetAIChanCalCalDate;
    SetAIChanCalExpDatePtr SetAIChanCalExpDate;
    SetAnalogPowerUpStatesPtr SetAnalogPowerUpStates;
    SetArmStartTrigTrigWhenPtr SetArmStartTrigTrigWhen;
    SetBufferAttributeUInt32Ptr SetBufferAttributeUInt32;
    SetDigitalLogicFamilyPowerUpStatePtr SetDigitalLogicFamilyPowerUpState;
    SetDigitalPowerUpStatesPtr SetDigitalPowerUpStates;
    SetDigitalPullUpPullDownStatesPtr SetDigitalPullUpPullDownStates;
    SetFirstSampClkWhenPtr SetFirstSampClkWhen;
    SetScaleAttributeDoublePtr SetScaleAttributeDouble;
    SetScaleAttributeDoubleArrayPtr SetScaleAttributeDoubleArray;
    SetScaleAttributeInt32Ptr SetScaleAttributeInt32;
    SetScaleAttributeStringPtr SetScaleAttributeString;
    SetStartTrigTrigWhenPtr SetStartTrigTrigWhen;
    SetSyncPulseTimeWhenPtr SetSyncPulseTimeWhen;
    StartNewFilePtr StartNewFile;
    StartTaskPtr StartTask;
    StopTaskPtr StopTask;
    TaskControlPtr TaskControl;
    TristateOutputTermPtr TristateOutputTerm;
    UnreserveNetworkDevicePtr UnreserveNetworkDevice;
    WaitForNextSampleClockPtr WaitForNextSampleClock;
    WaitForValidTimestampPtr WaitForValidTimestamp;
    WaitUntilTaskDonePtr WaitUntilTaskDone;
    WriteAnalogF64Ptr WriteAnalogF64;
    WriteAnalogScalarF64Ptr WriteAnalogScalarF64;
    WriteBinaryI16Ptr WriteBinaryI16;
    WriteBinaryI32Ptr WriteBinaryI32;
    WriteBinaryU16Ptr WriteBinaryU16;
    WriteBinaryU32Ptr WriteBinaryU32;
    WriteCtrFreqPtr WriteCtrFreq;
    WriteCtrFreqScalarPtr WriteCtrFreqScalar;
    WriteCtrTicksPtr WriteCtrTicks;
    WriteCtrTicksScalarPtr WriteCtrTicksScalar;
    WriteCtrTimePtr WriteCtrTime;
    WriteCtrTimeScalarPtr WriteCtrTimeScalar;
    WriteDigitalLinesPtr WriteDigitalLines;
    WriteDigitalScalarU32Ptr WriteDigitalScalarU32;
    WriteDigitalU16Ptr WriteDigitalU16;
    WriteDigitalU32Ptr WriteDigitalU32;
    WriteDigitalU8Ptr WriteDigitalU8;
    WriteRawPtr WriteRaw;
    WriteToTEDSFromArrayPtr WriteToTEDSFromArray;
    WriteToTEDSFromFilePtr WriteToTEDSFromFile;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidaqmx_grpc

#endif  // NIDAQMX_GRPC_LIBRARY_H
