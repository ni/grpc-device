//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DAQMX
//---------------------------------------------------------------------
#ifndef NIDAQMX_GRPC_LIBRARY_H
#define NIDAQMX_GRPC_LIBRARY_H

#include "nidaqmx_library_interface.h"

#include <server/shared_library.h>

namespace nidaqmx_grpc {

class NiDAQmxLibrary : public nidaqmx_grpc::NiDAQmxLibraryInterface {
 public:
  NiDAQmxLibrary();
  virtual ~NiDAQmxLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 AddCDAQSyncConnection(const char portList[]);
  int32 AddGlobalChansToTask(TaskHandle task, const char channelNames[]);
  int32 AddNetworkDevice(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize);
  int32 AreConfiguredCDAQSyncPortsDisconnected(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist);
  int32 AutoConfigureCDAQSyncConnections(const char chassisDevicesPorts[], float64 timeout);
  int32 CalculateReversePolyCoeff(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[]);
  int32 CfgAnlgEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples);
  int32 CfgAnlgEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel);
  int32 CfgAnlgMultiEdgeRefTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize);
  int32 CfgAnlgMultiEdgeStartTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize);
  int32 CfgAnlgWindowRefTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples);
  int32 CfgAnlgWindowStartTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom);
  int32 CfgBurstHandshakingTimingExportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel);
  int32 CfgBurstHandshakingTimingImportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel);
  int32 CfgChangeDetectionTiming(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgDigEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples);
  int32 CfgDigEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge);
  int32 CfgDigPatternRefTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples);
  int32 CfgDigPatternStartTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen);
  int32 CfgHandshakingTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgImplicitTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgInputBuffer(TaskHandle task, uInt32 numSampsPerChan);
  int32 CfgOutputBuffer(TaskHandle task, uInt32 numSampsPerChan);
  int32 CfgPipelinedSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgTimeStartTrig(TaskHandle task, CVIAbsoluteTime when, int32 timescale);
  int32 CfgWatchdogAOExpirStates(TaskHandle task, const char channelNames[], const float64 expirStateArray[], const int32 outputTypeArray[], uInt32 arraySize);
  int32 CfgWatchdogCOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize);
  int32 CfgWatchdogDOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize);
  int32 ClearTEDS(const char physicalChannel[]);
  int32 ClearTask(TaskHandle task);
  int32 ConfigureLogging(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation);
  int32 ConfigureTEDS(const char physicalChannel[], const char filePath[]);
  int32 ConnectTerms(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers);
  int32 ControlWatchdogTask(TaskHandle task, int32 action);
  int32 CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  int32 CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  int32 CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[]);
  int32 CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[]);
  int32 CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  int32 CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateAIPowerChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 voltageSetpoint, float64 currentSetpoint, bool32 outputEnable);
  int32 CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0);
  int32 CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIRosetteStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, const int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance);
  int32 CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[]);
  int32 CreateAITempBuiltInSensorChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units);
  int32 CreateAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  int32 CreateAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c);
  int32 CreateAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1);
  int32 CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  int32 CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset);
  int32 CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[]);
  int32 CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[]);
  int32 CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection);
  int32 CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[]);
  int32 CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  int32 CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[]);
  int32 CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[]);
  int32 CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[]);
  int32 CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  int32 CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  int32 CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal);
  int32 CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  int32 CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[]);
  int32 CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[]);
  int32 CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle);
  int32 CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks);
  int32 CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime);
  int32 CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  int32 CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  int32 CreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateMapScale(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreatePolynomialScale(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  int32 CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[]);
  int32 CreateTEDSAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  int32 CreateTEDSAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  int32 CreateTEDSAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1);
  int32 CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTableScale(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateTask(const char sessionName[], TaskHandle* task);
  int32 CreateWatchdogTimerTask(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState);
  int32 CreateWatchdogTimerTaskEx(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout);
  int32 DeleteNetworkDevice(const char deviceName[]);
  int32 DeleteSavedGlobalChan(const char channelName[]);
  int32 DeleteSavedScale(const char scaleName[]);
  int32 DeleteSavedTask(const char taskName[]);
  int32 DeviceSupportsCal(const char deviceName[], bool32* calSupported);
  int32 DisableRefTrig(TaskHandle task);
  int32 DisableStartTrig(TaskHandle task);
  int32 DisconnectTerms(const char sourceTerminal[], const char destinationTerminal[]);
  int32 ExportSignal(TaskHandle task, int32 signalID, const char outputTerminal[]);
  int32 GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetAnalogPowerUpStates(const char deviceName[], const char channelName[], float64* state, int32 channelType);
  int32 GetAnalogPowerUpStatesWithOutputType(const char channelNames[], float64 stateArray[], int32 channelTypeArray[], uInt32* arraySize);
  int32 GetArmStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetAutoConfiguredCDAQSyncConnections(char portList[], uInt32 portListSize);
  int32 GetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetCalInfoAttributeBool(const char deviceName[], int32 attribute, bool32* value);
  int32 GetCalInfoAttributeDouble(const char deviceName[], int32 attribute, float64* value);
  int32 GetCalInfoAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size);
  int32 GetCalInfoAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value);
  int32 GetChanAttributeBool(TaskHandle task, const char channel[], int32 attribute, bool32* value);
  int32 GetChanAttributeDouble(TaskHandle task, const char channel[], int32 attribute, float64* value);
  int32 GetChanAttributeDoubleArray(TaskHandle task, const char channel[], int32 attribute, float64 value[], uInt32 size);
  int32 GetChanAttributeInt32(TaskHandle task, const char channel[], int32 attribute, int32* value);
  int32 GetChanAttributeString(TaskHandle task, const char channel[], int32 attribute, char value[], uInt32 size);
  int32 GetChanAttributeUInt32(TaskHandle task, const char channel[], int32 attribute, uInt32* value);
  int32 GetDeviceAttributeBool(const char deviceName[], int32 attribute, bool32* value);
  int32 GetDeviceAttributeDouble(const char deviceName[], int32 attribute, float64* value);
  int32 GetDeviceAttributeDoubleArray(const char deviceName[], int32 attribute, float64 value[], uInt32 size);
  int32 GetDeviceAttributeInt32(const char deviceName[], int32 attribute, int32* value);
  int32 GetDeviceAttributeInt32Array(const char deviceName[], int32 attribute, int32 value[], uInt32 size);
  int32 GetDeviceAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size);
  int32 GetDeviceAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value);
  int32 GetDeviceAttributeUInt32Array(const char deviceName[], int32 attribute, uInt32 value[], uInt32 size);
  int32 GetDigitalLogicFamilyPowerUpState(const char deviceName[], int32* logicFamily);
  int32 GetDigitalPowerUpStates(const char deviceName[], const char channelName[], int32* state);
  int32 GetDigitalPullUpPullDownStates(const char deviceName[], const char channelName[], int32* state);
  int32 GetDisconnectedCDAQSyncPorts(char portList[], uInt32 portListSize);
  int32 GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize);
  int32 GetExportedSignalAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetExportedSignalAttributeDouble(TaskHandle task, int32 attribute, float64* value);
  int32 GetExportedSignalAttributeInt32(TaskHandle task, int32 attribute, int32* value);
  int32 GetExportedSignalAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size);
  int32 GetExportedSignalAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetExtendedErrorInfo(char errorString[], uInt32 bufferSize);
  int32 GetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetFirstSampTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetNthTaskReadChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetPersistedChanAttributeBool(const char channel[], int32 attribute, bool32* value);
  int32 GetPersistedChanAttributeString(const char channel[], int32 attribute, char value[], uInt32 size);
  int32 GetPersistedScaleAttributeBool(const char scaleName[], int32 attribute, bool32* value);
  int32 GetPersistedScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size);
  int32 GetPersistedTaskAttributeBool(const char taskName[], int32 attribute, bool32* value);
  int32 GetPersistedTaskAttributeString(const char taskName[], int32 attribute, char value[], uInt32 size);
  int32 GetPhysicalChanAttributeBool(const char physicalChannel[], int32 attribute, bool32* value);
  int32 GetPhysicalChanAttributeBytes(const char physicalChannel[], int32 attribute, uInt8 value[], uInt32 size);
  int32 GetPhysicalChanAttributeDouble(const char physicalChannel[], int32 attribute, float64* value);
  int32 GetPhysicalChanAttributeDoubleArray(const char physicalChannel[], int32 attribute, float64 value[], uInt32 size);
  int32 GetPhysicalChanAttributeInt32(const char physicalChannel[], int32 attribute, int32* value);
  int32 GetPhysicalChanAttributeInt32Array(const char physicalChannel[], int32 attribute, int32 value[], uInt32 size);
  int32 GetPhysicalChanAttributeString(const char physicalChannel[], int32 attribute, char value[], uInt32 size);
  int32 GetPhysicalChanAttributeUInt32(const char physicalChannel[], int32 attribute, uInt32* value);
  int32 GetPhysicalChanAttributeUInt32Array(const char physicalChannel[], int32 attribute, uInt32 value[], uInt32 size);
  int32 GetReadAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetReadAttributeDouble(TaskHandle task, int32 attribute, float64* value);
  int32 GetReadAttributeInt32(TaskHandle task, int32 attribute, int32* value);
  int32 GetReadAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size);
  int32 GetReadAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetReadAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value);
  int32 GetRealTimeAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetRealTimeAttributeInt32(TaskHandle task, int32 attribute, int32* value);
  int32 GetRealTimeAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetRefTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetScaleAttributeDouble(const char scaleName[], int32 attribute, float64* value);
  int32 GetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, float64 value[], uInt32 size);
  int32 GetScaleAttributeInt32(const char scaleName[], int32 attribute, int32* value);
  int32 GetScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size);
  int32 GetSelfCalLastDateAndTime(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetSystemInfoAttributeString(int32 attribute, char value[], uInt32 size);
  int32 GetSystemInfoAttributeUInt32(int32 attribute, uInt32* value);
  int32 GetTaskAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetTaskAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size);
  int32 GetTaskAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetTimingAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetTimingAttributeDouble(TaskHandle task, int32 attribute, float64* value);
  int32 GetTimingAttributeExBool(TaskHandle task, const char deviceNames[], int32 attribute, bool32* value);
  int32 GetTimingAttributeExDouble(TaskHandle task, const char deviceNames[], int32 attribute, float64* value);
  int32 GetTimingAttributeExInt32(TaskHandle task, const char deviceNames[], int32 attribute, int32* value);
  int32 GetTimingAttributeExString(TaskHandle task, const char deviceNames[], int32 attribute, char value[], uInt32 size);
  int32 GetTimingAttributeExTimestamp(TaskHandle task, const char deviceNames[], int32 attribute, CVIAbsoluteTime* value);
  int32 GetTimingAttributeExUInt32(TaskHandle task, const char deviceNames[], int32 attribute, uInt32* value);
  int32 GetTimingAttributeExUInt64(TaskHandle task, const char deviceNames[], int32 attribute, uInt64* value);
  int32 GetTimingAttributeInt32(TaskHandle task, int32 attribute, int32* value);
  int32 GetTimingAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size);
  int32 GetTimingAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime* value);
  int32 GetTimingAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetTimingAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value);
  int32 GetTrigAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetTrigAttributeDouble(TaskHandle task, int32 attribute, float64* value);
  int32 GetTrigAttributeDoubleArray(TaskHandle task, int32 attribute, float64 value[], uInt32 size);
  int32 GetTrigAttributeInt32(TaskHandle task, int32 attribute, int32* value);
  int32 GetTrigAttributeInt32Array(TaskHandle task, int32 attribute, int32 value[], uInt32 size);
  int32 GetTrigAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size);
  int32 GetTrigAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime* value);
  int32 GetTrigAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetWatchdogAttributeBool(TaskHandle task, const char lines[], int32 attribute, bool32* value);
  int32 GetWatchdogAttributeDouble(TaskHandle task, const char lines[], int32 attribute, float64* value);
  int32 GetWatchdogAttributeInt32(TaskHandle task, const char lines[], int32 attribute, int32* value);
  int32 GetWatchdogAttributeString(TaskHandle task, const char lines[], int32 attribute, char value[], uInt32 size);
  int32 GetWriteAttributeBool(TaskHandle task, int32 attribute, bool32* value);
  int32 GetWriteAttributeDouble(TaskHandle task, int32 attribute, float64* value);
  int32 GetWriteAttributeInt32(TaskHandle task, int32 attribute, int32* value);
  int32 GetWriteAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size);
  int32 GetWriteAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value);
  int32 GetWriteAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value);
  int32 IsTaskDone(TaskHandle task, bool32* isTaskDone);
  int32 LoadTask(const char sessionName[], TaskHandle* task);
  int32 ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadAnalogScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  int32 ReadBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryI32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterF64Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  int32 ReadCounterScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  int32 ReadCounterU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterU32Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrFreq(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrFreqScalar(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved);
  int32 ReadCtrTicks(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrTicksScalar(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved);
  int32 ReadCtrTime(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrTimeScalar(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved);
  int32 ReadDigitalLines(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved);
  int32 ReadDigitalScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  int32 ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadDigitalU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadPowerBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArrayVoltage[], int16 readArrayCurrent[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadPowerF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArrayVoltage[], float64 readArrayCurrent[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadPowerScalarF64(TaskHandle task, float64 timeout, float64* voltage, float64* current, bool32* reserved);
  int32 ReadRaw(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved);
  int32 RegisterDoneEvent(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData);
  int32 RegisterEveryNSamplesEvent(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData);
  int32 RegisterSignalEvent(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData);
  int32 RemoveCDAQSyncConnection(const char portList[]);
  int32 ReserveNetworkDevice(const char deviceName[], bool32 overrideReservation);
  int32 ResetBufferAttribute(TaskHandle task, int32 attribute);
  int32 ResetChanAttribute(TaskHandle task, const char channel[], int32 attribute);
  int32 ResetDevice(const char deviceName[]);
  int32 ResetExportedSignalAttribute(TaskHandle task, int32 attribute);
  int32 ResetReadAttribute(TaskHandle task, int32 attribute);
  int32 ResetRealTimeAttribute(TaskHandle task, int32 attribute);
  int32 ResetTimingAttribute(TaskHandle task, int32 attribute);
  int32 ResetTimingAttributeEx(TaskHandle task, const char deviceNames[], int32 attribute);
  int32 ResetTrigAttribute(TaskHandle task, int32 attribute);
  int32 ResetWatchdogAttribute(TaskHandle task, const char lines[], int32 attribute);
  int32 ResetWriteAttribute(TaskHandle task, int32 attribute);
  int32 SaveGlobalChan(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options);
  int32 SaveScale(const char scaleName[], const char saveAs[], const char author[], uInt32 options);
  int32 SaveTask(TaskHandle task, const char saveAs[], const char author[], uInt32 options);
  int32 SelfCal(const char deviceName[]);
  int32 SelfTestDevice(const char deviceName[]);
  int32 SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  int32 SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  int32 SetAnalogPowerUpStates(const char deviceName[], const char channelNames[], float64 state, int32 channelType);
  int32 SetAnalogPowerUpStatesWithOutputType(const char channelNames[], const float64 stateArray[], const int32 channelTypeArray[], uInt32 arraySize);
  int32 SetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetCalInfoAttributeBool(const char deviceName[], int32 attribute, bool32 value);
  int32 SetCalInfoAttributeDouble(const char deviceName[], int32 attribute, float64 value);
  int32 SetCalInfoAttributeString(const char deviceName[], int32 attribute, const char value[]);
  int32 SetCalInfoAttributeUInt32(const char deviceName[], int32 attribute, uInt32 value);
  int32 SetChanAttributeBool(TaskHandle task, const char channel[], int32 attribute, bool32 value);
  int32 SetChanAttributeDouble(TaskHandle task, const char channel[], int32 attribute, float64 value);
  int32 SetChanAttributeDoubleArray(TaskHandle task, const char channel[], int32 attribute, const float64 value[], uInt32 size);
  int32 SetChanAttributeInt32(TaskHandle task, const char channel[], int32 attribute, int32 value);
  int32 SetChanAttributeString(TaskHandle task, const char channel[], int32 attribute, const char value[]);
  int32 SetChanAttributeUInt32(TaskHandle task, const char channel[], int32 attribute, uInt32 value);
  int32 SetDigitalLogicFamilyPowerUpState(const char deviceName[], int32 logicFamily);
  int32 SetDigitalPowerUpStates(const char deviceName[], const char channelNames[], int32 state);
  int32 SetDigitalPullUpPullDownStates(const char deviceName[], const char channelNames[], int32 state);
  int32 SetExportedSignalAttributeBool(TaskHandle task, int32 attribute, bool32 value);
  int32 SetExportedSignalAttributeDouble(TaskHandle task, int32 attribute, float64 value);
  int32 SetExportedSignalAttributeInt32(TaskHandle task, int32 attribute, int32 value);
  int32 SetExportedSignalAttributeString(TaskHandle task, int32 attribute, const char value[]);
  int32 SetExportedSignalAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetReadAttributeBool(TaskHandle task, int32 attribute, bool32 value);
  int32 SetReadAttributeDouble(TaskHandle task, int32 attribute, float64 value);
  int32 SetReadAttributeInt32(TaskHandle task, int32 attribute, int32 value);
  int32 SetReadAttributeString(TaskHandle task, int32 attribute, const char value[]);
  int32 SetReadAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetReadAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value);
  int32 SetRealTimeAttributeBool(TaskHandle task, int32 attribute, bool32 value);
  int32 SetRealTimeAttributeInt32(TaskHandle task, int32 attribute, int32 value);
  int32 SetRealTimeAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetScaleAttributeDouble(const char scaleName[], int32 attribute, float64 value);
  int32 SetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, const float64 value[], uInt32 size);
  int32 SetScaleAttributeInt32(const char scaleName[], int32 attribute, int32 value);
  int32 SetScaleAttributeString(const char scaleName[], int32 attribute, const char value[]);
  int32 SetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetTimingAttributeBool(TaskHandle task, int32 attribute, bool32 value);
  int32 SetTimingAttributeDouble(TaskHandle task, int32 attribute, float64 value);
  int32 SetTimingAttributeExBool(TaskHandle task, const char deviceNames[], int32 attribute, bool32 value);
  int32 SetTimingAttributeExDouble(TaskHandle task, const char deviceNames[], int32 attribute, float64 value);
  int32 SetTimingAttributeExInt32(TaskHandle task, const char deviceNames[], int32 attribute, int32 value);
  int32 SetTimingAttributeExString(TaskHandle task, const char deviceNames[], int32 attribute, const char value[]);
  int32 SetTimingAttributeExTimestamp(TaskHandle task, const char deviceNames[], int32 attribute, CVIAbsoluteTime value);
  int32 SetTimingAttributeExUInt32(TaskHandle task, const char deviceNames[], int32 attribute, uInt32 value);
  int32 SetTimingAttributeExUInt64(TaskHandle task, const char deviceNames[], int32 attribute, uInt64 value);
  int32 SetTimingAttributeInt32(TaskHandle task, int32 attribute, int32 value);
  int32 SetTimingAttributeString(TaskHandle task, int32 attribute, const char value[]);
  int32 SetTimingAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime value);
  int32 SetTimingAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetTimingAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value);
  int32 SetTrigAttributeBool(TaskHandle task, int32 attribute, bool32 value);
  int32 SetTrigAttributeDouble(TaskHandle task, int32 attribute, float64 value);
  int32 SetTrigAttributeDoubleArray(TaskHandle task, int32 attribute, const float64 value[], uInt32 size);
  int32 SetTrigAttributeInt32(TaskHandle task, int32 attribute, int32 value);
  int32 SetTrigAttributeInt32Array(TaskHandle task, int32 attribute, const int32 value[], uInt32 size);
  int32 SetTrigAttributeString(TaskHandle task, int32 attribute, const char value[]);
  int32 SetTrigAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime value);
  int32 SetTrigAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetWatchdogAttributeBool(TaskHandle task, const char lines[], int32 attribute, bool32 value);
  int32 SetWatchdogAttributeDouble(TaskHandle task, const char lines[], int32 attribute, float64 value);
  int32 SetWatchdogAttributeInt32(TaskHandle task, const char lines[], int32 attribute, int32 value);
  int32 SetWatchdogAttributeString(TaskHandle task, const char lines[], int32 attribute, const char value[]);
  int32 SetWriteAttributeBool(TaskHandle task, int32 attribute, bool32 value);
  int32 SetWriteAttributeDouble(TaskHandle task, int32 attribute, float64 value);
  int32 SetWriteAttributeInt32(TaskHandle task, int32 attribute, int32 value);
  int32 SetWriteAttributeString(TaskHandle task, int32 attribute, const char value[]);
  int32 SetWriteAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value);
  int32 SetWriteAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value);
  int32 StartNewFile(TaskHandle task, const char filePath[]);
  int32 StartTask(TaskHandle task);
  int32 StopTask(TaskHandle task);
  int32 TaskControl(TaskHandle task, int32 action);
  int32 TristateOutputTerm(const char outputTerminal[]);
  int32 UnreserveNetworkDevice(const char deviceName[]);
  int32 WaitForNextSampleClock(TaskHandle task, float64 timeout, bool32* isLate);
  int32 WaitForValidTimestamp(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp);
  int32 WaitUntilTaskDone(TaskHandle task, float64 timeToWait);
  int32 WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteAnalogScalarF64(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved);
  int32 WriteBinaryI16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryI32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteCtrFreq(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrFreqScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved);
  int32 WriteCtrTicks(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrTicksScalar(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved);
  int32 WriteCtrTime(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrTimeScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved);
  int32 WriteDigitalLines(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalScalarU32(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved);
  int32 WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteRaw(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteToTEDSFromArray(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions);
  int32 WriteToTEDSFromFile(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions);

 private:
  using AddCDAQSyncConnectionPtr = decltype(&DAQmxAddCDAQSyncConnection);
  using AddGlobalChansToTaskPtr = decltype(&DAQmxAddGlobalChansToTask);
  using AddNetworkDevicePtr = decltype(&DAQmxAddNetworkDevice);
  using AreConfiguredCDAQSyncPortsDisconnectedPtr = decltype(&DAQmxAreConfiguredCDAQSyncPortsDisconnected);
  using AutoConfigureCDAQSyncConnectionsPtr = decltype(&DAQmxAutoConfigureCDAQSyncConnections);
  using CalculateReversePolyCoeffPtr = decltype(&DAQmxCalculateReversePolyCoeff);
  using CfgAnlgEdgeRefTrigPtr = decltype(&DAQmxCfgAnlgEdgeRefTrig);
  using CfgAnlgEdgeStartTrigPtr = decltype(&DAQmxCfgAnlgEdgeStartTrig);
  using CfgAnlgMultiEdgeRefTrigPtr = decltype(&DAQmxCfgAnlgMultiEdgeRefTrig);
  using CfgAnlgMultiEdgeStartTrigPtr = decltype(&DAQmxCfgAnlgMultiEdgeStartTrig);
  using CfgAnlgWindowRefTrigPtr = decltype(&DAQmxCfgAnlgWindowRefTrig);
  using CfgAnlgWindowStartTrigPtr = decltype(&DAQmxCfgAnlgWindowStartTrig);
  using CfgBurstHandshakingTimingExportClockPtr = decltype(&DAQmxCfgBurstHandshakingTimingExportClock);
  using CfgBurstHandshakingTimingImportClockPtr = decltype(&DAQmxCfgBurstHandshakingTimingImportClock);
  using CfgChangeDetectionTimingPtr = decltype(&DAQmxCfgChangeDetectionTiming);
  using CfgDigEdgeRefTrigPtr = decltype(&DAQmxCfgDigEdgeRefTrig);
  using CfgDigEdgeStartTrigPtr = decltype(&DAQmxCfgDigEdgeStartTrig);
  using CfgDigPatternRefTrigPtr = decltype(&DAQmxCfgDigPatternRefTrig);
  using CfgDigPatternStartTrigPtr = decltype(&DAQmxCfgDigPatternStartTrig);
  using CfgHandshakingTimingPtr = decltype(&DAQmxCfgHandshakingTiming);
  using CfgImplicitTimingPtr = decltype(&DAQmxCfgImplicitTiming);
  using CfgInputBufferPtr = decltype(&DAQmxCfgInputBuffer);
  using CfgOutputBufferPtr = decltype(&DAQmxCfgOutputBuffer);
  using CfgPipelinedSampClkTimingPtr = decltype(&DAQmxCfgPipelinedSampClkTiming);
  using CfgSampClkTimingPtr = decltype(&DAQmxCfgSampClkTiming);
  using CfgTimeStartTrigPtr = decltype(&DAQmxCfgTimeStartTrig);
  using CfgWatchdogAOExpirStatesPtr = decltype(&DAQmxCfgWatchdogAOExpirStates);
  using CfgWatchdogCOExpirStatesPtr = decltype(&DAQmxCfgWatchdogCOExpirStates);
  using CfgWatchdogDOExpirStatesPtr = decltype(&DAQmxCfgWatchdogDOExpirStates);
  using ClearTEDSPtr = decltype(&DAQmxClearTEDS);
  using ClearTaskPtr = decltype(&DAQmxClearTask);
  using ConfigureLoggingPtr = decltype(&DAQmxConfigureLogging);
  using ConfigureTEDSPtr = decltype(&DAQmxConfigureTEDS);
  using ConnectTermsPtr = decltype(&DAQmxConnectTerms);
  using ControlWatchdogTaskPtr = decltype(&DAQmxControlWatchdogTask);
  using CreateAIAccel4WireDCVoltageChanPtr = decltype(&DAQmxCreateAIAccel4WireDCVoltageChan);
  using CreateAIAccelChanPtr = decltype(&DAQmxCreateAIAccelChan);
  using CreateAIAccelChargeChanPtr = decltype(&DAQmxCreateAIAccelChargeChan);
  using CreateAIBridgeChanPtr = decltype(&DAQmxCreateAIBridgeChan);
  using CreateAIChargeChanPtr = decltype(&DAQmxCreateAIChargeChan);
  using CreateAICurrentChanPtr = decltype(&DAQmxCreateAICurrentChan);
  using CreateAICurrentRMSChanPtr = decltype(&DAQmxCreateAICurrentRMSChan);
  using CreateAIForceBridgePolynomialChanPtr = decltype(&DAQmxCreateAIForceBridgePolynomialChan);
  using CreateAIForceBridgeTableChanPtr = decltype(&DAQmxCreateAIForceBridgeTableChan);
  using CreateAIForceBridgeTwoPointLinChanPtr = decltype(&DAQmxCreateAIForceBridgeTwoPointLinChan);
  using CreateAIForceIEPEChanPtr = decltype(&DAQmxCreateAIForceIEPEChan);
  using CreateAIFreqVoltageChanPtr = decltype(&DAQmxCreateAIFreqVoltageChan);
  using CreateAIMicrophoneChanPtr = decltype(&DAQmxCreateAIMicrophoneChan);
  using CreateAIPosEddyCurrProxProbeChanPtr = decltype(&DAQmxCreateAIPosEddyCurrProxProbeChan);
  using CreateAIPosLVDTChanPtr = decltype(&DAQmxCreateAIPosLVDTChan);
  using CreateAIPosRVDTChanPtr = decltype(&DAQmxCreateAIPosRVDTChan);
  using CreateAIPowerChanPtr = decltype(&DAQmxCreateAIPowerChan);
  using CreateAIPressureBridgePolynomialChanPtr = decltype(&DAQmxCreateAIPressureBridgePolynomialChan);
  using CreateAIPressureBridgeTableChanPtr = decltype(&DAQmxCreateAIPressureBridgeTableChan);
  using CreateAIPressureBridgeTwoPointLinChanPtr = decltype(&DAQmxCreateAIPressureBridgeTwoPointLinChan);
  using CreateAIRTDChanPtr = decltype(&DAQmxCreateAIRTDChan);
  using CreateAIResistanceChanPtr = decltype(&DAQmxCreateAIResistanceChan);
  using CreateAIRosetteStrainGageChanPtr = decltype(&DAQmxCreateAIRosetteStrainGageChan);
  using CreateAIStrainGageChanPtr = decltype(&DAQmxCreateAIStrainGageChan);
  using CreateAITempBuiltInSensorChanPtr = decltype(&DAQmxCreateAITempBuiltInSensorChan);
  using CreateAIThrmcplChanPtr = decltype(&DAQmxCreateAIThrmcplChan);
  using CreateAIThrmstrChanIexPtr = decltype(&DAQmxCreateAIThrmstrChanIex);
  using CreateAIThrmstrChanVexPtr = decltype(&DAQmxCreateAIThrmstrChanVex);
  using CreateAITorqueBridgePolynomialChanPtr = decltype(&DAQmxCreateAITorqueBridgePolynomialChan);
  using CreateAITorqueBridgeTableChanPtr = decltype(&DAQmxCreateAITorqueBridgeTableChan);
  using CreateAITorqueBridgeTwoPointLinChanPtr = decltype(&DAQmxCreateAITorqueBridgeTwoPointLinChan);
  using CreateAIVelocityIEPEChanPtr = decltype(&DAQmxCreateAIVelocityIEPEChan);
  using CreateAIVoltageChanPtr = decltype(&DAQmxCreateAIVoltageChan);
  using CreateAIVoltageChanWithExcitPtr = decltype(&DAQmxCreateAIVoltageChanWithExcit);
  using CreateAIVoltageRMSChanPtr = decltype(&DAQmxCreateAIVoltageRMSChan);
  using CreateAOCurrentChanPtr = decltype(&DAQmxCreateAOCurrentChan);
  using CreateAOFuncGenChanPtr = decltype(&DAQmxCreateAOFuncGenChan);
  using CreateAOVoltageChanPtr = decltype(&DAQmxCreateAOVoltageChan);
  using CreateCIAngEncoderChanPtr = decltype(&DAQmxCreateCIAngEncoderChan);
  using CreateCIAngVelocityChanPtr = decltype(&DAQmxCreateCIAngVelocityChan);
  using CreateCICountEdgesChanPtr = decltype(&DAQmxCreateCICountEdgesChan);
  using CreateCIDutyCycleChanPtr = decltype(&DAQmxCreateCIDutyCycleChan);
  using CreateCIFreqChanPtr = decltype(&DAQmxCreateCIFreqChan);
  using CreateCIGPSTimestampChanPtr = decltype(&DAQmxCreateCIGPSTimestampChan);
  using CreateCILinEncoderChanPtr = decltype(&DAQmxCreateCILinEncoderChan);
  using CreateCILinVelocityChanPtr = decltype(&DAQmxCreateCILinVelocityChan);
  using CreateCIPeriodChanPtr = decltype(&DAQmxCreateCIPeriodChan);
  using CreateCIPulseChanFreqPtr = decltype(&DAQmxCreateCIPulseChanFreq);
  using CreateCIPulseChanTicksPtr = decltype(&DAQmxCreateCIPulseChanTicks);
  using CreateCIPulseChanTimePtr = decltype(&DAQmxCreateCIPulseChanTime);
  using CreateCIPulseWidthChanPtr = decltype(&DAQmxCreateCIPulseWidthChan);
  using CreateCISemiPeriodChanPtr = decltype(&DAQmxCreateCISemiPeriodChan);
  using CreateCITwoEdgeSepChanPtr = decltype(&DAQmxCreateCITwoEdgeSepChan);
  using CreateCOPulseChanFreqPtr = decltype(&DAQmxCreateCOPulseChanFreq);
  using CreateCOPulseChanTicksPtr = decltype(&DAQmxCreateCOPulseChanTicks);
  using CreateCOPulseChanTimePtr = decltype(&DAQmxCreateCOPulseChanTime);
  using CreateDIChanPtr = decltype(&DAQmxCreateDIChan);
  using CreateDOChanPtr = decltype(&DAQmxCreateDOChan);
  using CreateLinScalePtr = decltype(&DAQmxCreateLinScale);
  using CreateMapScalePtr = decltype(&DAQmxCreateMapScale);
  using CreatePolynomialScalePtr = decltype(&DAQmxCreatePolynomialScale);
  using CreateTEDSAIAccelChanPtr = decltype(&DAQmxCreateTEDSAIAccelChan);
  using CreateTEDSAIBridgeChanPtr = decltype(&DAQmxCreateTEDSAIBridgeChan);
  using CreateTEDSAICurrentChanPtr = decltype(&DAQmxCreateTEDSAICurrentChan);
  using CreateTEDSAIForceBridgeChanPtr = decltype(&DAQmxCreateTEDSAIForceBridgeChan);
  using CreateTEDSAIForceIEPEChanPtr = decltype(&DAQmxCreateTEDSAIForceIEPEChan);
  using CreateTEDSAIMicrophoneChanPtr = decltype(&DAQmxCreateTEDSAIMicrophoneChan);
  using CreateTEDSAIPosLVDTChanPtr = decltype(&DAQmxCreateTEDSAIPosLVDTChan);
  using CreateTEDSAIPosRVDTChanPtr = decltype(&DAQmxCreateTEDSAIPosRVDTChan);
  using CreateTEDSAIPressureBridgeChanPtr = decltype(&DAQmxCreateTEDSAIPressureBridgeChan);
  using CreateTEDSAIRTDChanPtr = decltype(&DAQmxCreateTEDSAIRTDChan);
  using CreateTEDSAIResistanceChanPtr = decltype(&DAQmxCreateTEDSAIResistanceChan);
  using CreateTEDSAIStrainGageChanPtr = decltype(&DAQmxCreateTEDSAIStrainGageChan);
  using CreateTEDSAIThrmcplChanPtr = decltype(&DAQmxCreateTEDSAIThrmcplChan);
  using CreateTEDSAIThrmstrChanIexPtr = decltype(&DAQmxCreateTEDSAIThrmstrChanIex);
  using CreateTEDSAIThrmstrChanVexPtr = decltype(&DAQmxCreateTEDSAIThrmstrChanVex);
  using CreateTEDSAITorqueBridgeChanPtr = decltype(&DAQmxCreateTEDSAITorqueBridgeChan);
  using CreateTEDSAIVoltageChanPtr = decltype(&DAQmxCreateTEDSAIVoltageChan);
  using CreateTEDSAIVoltageChanWithExcitPtr = decltype(&DAQmxCreateTEDSAIVoltageChanWithExcit);
  using CreateTableScalePtr = decltype(&DAQmxCreateTableScale);
  using CreateTaskPtr = decltype(&DAQmxCreateTask);
  using CreateWatchdogTimerTaskPtr = decltype(&DAQmxCreateWatchdogTimerTask);
  using CreateWatchdogTimerTaskExPtr = decltype(&DAQmxCreateWatchdogTimerTaskEx);
  using DeleteNetworkDevicePtr = decltype(&DAQmxDeleteNetworkDevice);
  using DeleteSavedGlobalChanPtr = decltype(&DAQmxDeleteSavedGlobalChan);
  using DeleteSavedScalePtr = decltype(&DAQmxDeleteSavedScale);
  using DeleteSavedTaskPtr = decltype(&DAQmxDeleteSavedTask);
  using DeviceSupportsCalPtr = decltype(&DAQmxDeviceSupportsCal);
  using DisableRefTrigPtr = decltype(&DAQmxDisableRefTrig);
  using DisableStartTrigPtr = decltype(&DAQmxDisableStartTrig);
  using DisconnectTermsPtr = decltype(&DAQmxDisconnectTerms);
  using ExportSignalPtr = decltype(&DAQmxExportSignal);
  using GetAIChanCalCalDatePtr = decltype(&DAQmxGetAIChanCalCalDate);
  using GetAIChanCalExpDatePtr = decltype(&DAQmxGetAIChanCalExpDate);
  using GetAnalogPowerUpStatesPtr = decltype(&DAQmxGetAnalogPowerUpStates);
  using GetAnalogPowerUpStatesWithOutputTypePtr = decltype(&DAQmxGetAnalogPowerUpStatesWithOutputType);
  using GetArmStartTrigTimestampValPtr = decltype(&DAQmxGetArmStartTrigTimestampVal);
  using GetArmStartTrigTrigWhenPtr = decltype(&DAQmxGetArmStartTrigTrigWhen);
  using GetAutoConfiguredCDAQSyncConnectionsPtr = decltype(&DAQmxGetAutoConfiguredCDAQSyncConnections);
  using GetBufferAttributeUInt32Ptr = decltype(&DAQmxGetBufferAttribute);
  using GetCalInfoAttributeBoolPtr = decltype(&DAQmxGetCalInfoAttribute);
  using GetCalInfoAttributeDoublePtr = decltype(&DAQmxGetCalInfoAttribute);
  using GetCalInfoAttributeStringPtr = decltype(&DAQmxGetCalInfoAttribute);
  using GetCalInfoAttributeUInt32Ptr = decltype(&DAQmxGetCalInfoAttribute);
  using GetChanAttributeBoolPtr = decltype(&DAQmxGetChanAttribute);
  using GetChanAttributeDoublePtr = decltype(&DAQmxGetChanAttribute);
  using GetChanAttributeDoubleArrayPtr = decltype(&DAQmxGetChanAttribute);
  using GetChanAttributeInt32Ptr = decltype(&DAQmxGetChanAttribute);
  using GetChanAttributeStringPtr = decltype(&DAQmxGetChanAttribute);
  using GetChanAttributeUInt32Ptr = decltype(&DAQmxGetChanAttribute);
  using GetDeviceAttributeBoolPtr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeDoublePtr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeDoubleArrayPtr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeInt32Ptr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeInt32ArrayPtr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeStringPtr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeUInt32Ptr = decltype(&DAQmxGetDeviceAttribute);
  using GetDeviceAttributeUInt32ArrayPtr = decltype(&DAQmxGetDeviceAttribute);
  using GetDigitalLogicFamilyPowerUpStatePtr = decltype(&DAQmxGetDigitalLogicFamilyPowerUpState);
  using GetDigitalPowerUpStatesPtr = decltype(&DAQmxGetDigitalPowerUpStates);
  using GetDigitalPullUpPullDownStatesPtr = decltype(&DAQmxGetDigitalPullUpPullDownStates);
  using GetDisconnectedCDAQSyncPortsPtr = decltype(&DAQmxGetDisconnectedCDAQSyncPorts);
  using GetErrorStringPtr = decltype(&DAQmxGetErrorString);
  using GetExportedSignalAttributeBoolPtr = decltype(&DAQmxGetExportedSignalAttribute);
  using GetExportedSignalAttributeDoublePtr = decltype(&DAQmxGetExportedSignalAttribute);
  using GetExportedSignalAttributeInt32Ptr = decltype(&DAQmxGetExportedSignalAttribute);
  using GetExportedSignalAttributeStringPtr = decltype(&DAQmxGetExportedSignalAttribute);
  using GetExportedSignalAttributeUInt32Ptr = decltype(&DAQmxGetExportedSignalAttribute);
  using GetExtendedErrorInfoPtr = int32 (*)(char errorString[], uInt32 bufferSize);
  using GetFirstSampClkWhenPtr = decltype(&DAQmxGetFirstSampClkWhen);
  using GetFirstSampTimestampValPtr = decltype(&DAQmxGetFirstSampTimestampVal);
  using GetNthTaskChannelPtr = decltype(&DAQmxGetNthTaskChannel);
  using GetNthTaskDevicePtr = decltype(&DAQmxGetNthTaskDevice);
  using GetNthTaskReadChannelPtr = decltype(&DAQmxGetNthTaskReadChannel);
  using GetPersistedChanAttributeBoolPtr = decltype(&DAQmxGetPersistedChanAttribute);
  using GetPersistedChanAttributeStringPtr = decltype(&DAQmxGetPersistedChanAttribute);
  using GetPersistedScaleAttributeBoolPtr = decltype(&DAQmxGetPersistedScaleAttribute);
  using GetPersistedScaleAttributeStringPtr = decltype(&DAQmxGetPersistedScaleAttribute);
  using GetPersistedTaskAttributeBoolPtr = decltype(&DAQmxGetPersistedTaskAttribute);
  using GetPersistedTaskAttributeStringPtr = decltype(&DAQmxGetPersistedTaskAttribute);
  using GetPhysicalChanAttributeBoolPtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeBytesPtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeDoublePtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeDoubleArrayPtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeInt32Ptr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeInt32ArrayPtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeStringPtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeUInt32Ptr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetPhysicalChanAttributeUInt32ArrayPtr = decltype(&DAQmxGetPhysicalChanAttribute);
  using GetReadAttributeBoolPtr = decltype(&DAQmxGetReadAttribute);
  using GetReadAttributeDoublePtr = decltype(&DAQmxGetReadAttribute);
  using GetReadAttributeInt32Ptr = decltype(&DAQmxGetReadAttribute);
  using GetReadAttributeStringPtr = decltype(&DAQmxGetReadAttribute);
  using GetReadAttributeUInt32Ptr = decltype(&DAQmxGetReadAttribute);
  using GetReadAttributeUInt64Ptr = decltype(&DAQmxGetReadAttribute);
  using GetRealTimeAttributeBoolPtr = decltype(&DAQmxGetRealTimeAttribute);
  using GetRealTimeAttributeInt32Ptr = decltype(&DAQmxGetRealTimeAttribute);
  using GetRealTimeAttributeUInt32Ptr = decltype(&DAQmxGetRealTimeAttribute);
  using GetRefTrigTimestampValPtr = decltype(&DAQmxGetRefTrigTimestampVal);
  using GetScaleAttributeDoublePtr = decltype(&DAQmxGetScaleAttribute);
  using GetScaleAttributeDoubleArrayPtr = decltype(&DAQmxGetScaleAttribute);
  using GetScaleAttributeInt32Ptr = decltype(&DAQmxGetScaleAttribute);
  using GetScaleAttributeStringPtr = decltype(&DAQmxGetScaleAttribute);
  using GetSelfCalLastDateAndTimePtr = decltype(&DAQmxGetSelfCalLastDateAndTime);
  using GetStartTrigTimestampValPtr = decltype(&DAQmxGetStartTrigTimestampVal);
  using GetStartTrigTrigWhenPtr = decltype(&DAQmxGetStartTrigTrigWhen);
  using GetSyncPulseTimeWhenPtr = decltype(&DAQmxGetSyncPulseTimeWhen);
  using GetSystemInfoAttributeStringPtr = decltype(&DAQmxGetSystemInfoAttribute);
  using GetSystemInfoAttributeUInt32Ptr = decltype(&DAQmxGetSystemInfoAttribute);
  using GetTaskAttributeBoolPtr = decltype(&DAQmxGetTaskAttribute);
  using GetTaskAttributeStringPtr = decltype(&DAQmxGetTaskAttribute);
  using GetTaskAttributeUInt32Ptr = decltype(&DAQmxGetTaskAttribute);
  using GetTimingAttributeBoolPtr = decltype(&DAQmxGetTimingAttribute);
  using GetTimingAttributeDoublePtr = decltype(&DAQmxGetTimingAttribute);
  using GetTimingAttributeExBoolPtr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeExDoublePtr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeExInt32Ptr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeExStringPtr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeExTimestampPtr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeExUInt32Ptr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeExUInt64Ptr = decltype(&DAQmxGetTimingAttributeEx);
  using GetTimingAttributeInt32Ptr = decltype(&DAQmxGetTimingAttribute);
  using GetTimingAttributeStringPtr = decltype(&DAQmxGetTimingAttribute);
  using GetTimingAttributeTimestampPtr = decltype(&DAQmxGetTimingAttribute);
  using GetTimingAttributeUInt32Ptr = decltype(&DAQmxGetTimingAttribute);
  using GetTimingAttributeUInt64Ptr = decltype(&DAQmxGetTimingAttribute);
  using GetTrigAttributeBoolPtr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeDoublePtr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeDoubleArrayPtr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeInt32Ptr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeInt32ArrayPtr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeStringPtr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeTimestampPtr = decltype(&DAQmxGetTrigAttribute);
  using GetTrigAttributeUInt32Ptr = decltype(&DAQmxGetTrigAttribute);
  using GetWatchdogAttributeBoolPtr = decltype(&DAQmxGetWatchdogAttribute);
  using GetWatchdogAttributeDoublePtr = decltype(&DAQmxGetWatchdogAttribute);
  using GetWatchdogAttributeInt32Ptr = decltype(&DAQmxGetWatchdogAttribute);
  using GetWatchdogAttributeStringPtr = decltype(&DAQmxGetWatchdogAttribute);
  using GetWriteAttributeBoolPtr = decltype(&DAQmxGetWriteAttribute);
  using GetWriteAttributeDoublePtr = decltype(&DAQmxGetWriteAttribute);
  using GetWriteAttributeInt32Ptr = decltype(&DAQmxGetWriteAttribute);
  using GetWriteAttributeStringPtr = decltype(&DAQmxGetWriteAttribute);
  using GetWriteAttributeUInt32Ptr = decltype(&DAQmxGetWriteAttribute);
  using GetWriteAttributeUInt64Ptr = decltype(&DAQmxGetWriteAttribute);
  using IsTaskDonePtr = decltype(&DAQmxIsTaskDone);
  using LoadTaskPtr = decltype(&DAQmxLoadTask);
  using ReadAnalogF64Ptr = decltype(&DAQmxReadAnalogF64);
  using ReadAnalogScalarF64Ptr = decltype(&DAQmxReadAnalogScalarF64);
  using ReadBinaryI16Ptr = decltype(&DAQmxReadBinaryI16);
  using ReadBinaryI32Ptr = decltype(&DAQmxReadBinaryI32);
  using ReadBinaryU16Ptr = decltype(&DAQmxReadBinaryU16);
  using ReadBinaryU32Ptr = decltype(&DAQmxReadBinaryU32);
  using ReadCounterF64Ptr = decltype(&DAQmxReadCounterF64);
  using ReadCounterF64ExPtr = decltype(&DAQmxReadCounterF64Ex);
  using ReadCounterScalarF64Ptr = decltype(&DAQmxReadCounterScalarF64);
  using ReadCounterScalarU32Ptr = decltype(&DAQmxReadCounterScalarU32);
  using ReadCounterU32Ptr = decltype(&DAQmxReadCounterU32);
  using ReadCounterU32ExPtr = decltype(&DAQmxReadCounterU32Ex);
  using ReadCtrFreqPtr = decltype(&DAQmxReadCtrFreq);
  using ReadCtrFreqScalarPtr = decltype(&DAQmxReadCtrFreqScalar);
  using ReadCtrTicksPtr = decltype(&DAQmxReadCtrTicks);
  using ReadCtrTicksScalarPtr = decltype(&DAQmxReadCtrTicksScalar);
  using ReadCtrTimePtr = decltype(&DAQmxReadCtrTime);
  using ReadCtrTimeScalarPtr = decltype(&DAQmxReadCtrTimeScalar);
  using ReadDigitalLinesPtr = decltype(&DAQmxReadDigitalLines);
  using ReadDigitalScalarU32Ptr = decltype(&DAQmxReadDigitalScalarU32);
  using ReadDigitalU16Ptr = decltype(&DAQmxReadDigitalU16);
  using ReadDigitalU32Ptr = decltype(&DAQmxReadDigitalU32);
  using ReadDigitalU8Ptr = decltype(&DAQmxReadDigitalU8);
  using ReadPowerBinaryI16Ptr = decltype(&DAQmxReadPowerBinaryI16);
  using ReadPowerF64Ptr = decltype(&DAQmxReadPowerF64);
  using ReadPowerScalarF64Ptr = decltype(&DAQmxReadPowerScalarF64);
  using ReadRawPtr = decltype(&DAQmxReadRaw);
  using RegisterDoneEventPtr = decltype(&DAQmxRegisterDoneEvent);
  using RegisterEveryNSamplesEventPtr = decltype(&DAQmxRegisterEveryNSamplesEvent);
  using RegisterSignalEventPtr = decltype(&DAQmxRegisterSignalEvent);
  using RemoveCDAQSyncConnectionPtr = decltype(&DAQmxRemoveCDAQSyncConnection);
  using ReserveNetworkDevicePtr = decltype(&DAQmxReserveNetworkDevice);
  using ResetBufferAttributePtr = decltype(&DAQmxResetBufferAttribute);
  using ResetChanAttributePtr = decltype(&DAQmxResetChanAttribute);
  using ResetDevicePtr = decltype(&DAQmxResetDevice);
  using ResetExportedSignalAttributePtr = decltype(&DAQmxResetExportedSignalAttribute);
  using ResetReadAttributePtr = decltype(&DAQmxResetReadAttribute);
  using ResetRealTimeAttributePtr = decltype(&DAQmxResetRealTimeAttribute);
  using ResetTimingAttributePtr = decltype(&DAQmxResetTimingAttribute);
  using ResetTimingAttributeExPtr = decltype(&DAQmxResetTimingAttributeEx);
  using ResetTrigAttributePtr = decltype(&DAQmxResetTrigAttribute);
  using ResetWatchdogAttributePtr = decltype(&DAQmxResetWatchdogAttribute);
  using ResetWriteAttributePtr = decltype(&DAQmxResetWriteAttribute);
  using SaveGlobalChanPtr = decltype(&DAQmxSaveGlobalChan);
  using SaveScalePtr = decltype(&DAQmxSaveScale);
  using SaveTaskPtr = decltype(&DAQmxSaveTask);
  using SelfCalPtr = decltype(&DAQmxSelfCal);
  using SelfTestDevicePtr = decltype(&DAQmxSelfTestDevice);
  using SetAIChanCalCalDatePtr = decltype(&DAQmxSetAIChanCalCalDate);
  using SetAIChanCalExpDatePtr = decltype(&DAQmxSetAIChanCalExpDate);
  using SetAnalogPowerUpStatesPtr = decltype(&DAQmxSetAnalogPowerUpStates);
  using SetAnalogPowerUpStatesWithOutputTypePtr = decltype(&DAQmxSetAnalogPowerUpStatesWithOutputType);
  using SetArmStartTrigTrigWhenPtr = decltype(&DAQmxSetArmStartTrigTrigWhen);
  using SetBufferAttributeUInt32Ptr = decltype(&DAQmxSetBufferAttribute);
  using SetCalInfoAttributeBoolPtr = decltype(&DAQmxSetCalInfoAttribute);
  using SetCalInfoAttributeDoublePtr = decltype(&DAQmxSetCalInfoAttribute);
  using SetCalInfoAttributeStringPtr = decltype(&DAQmxSetCalInfoAttribute);
  using SetCalInfoAttributeUInt32Ptr = decltype(&DAQmxSetCalInfoAttribute);
  using SetChanAttributeBoolPtr = decltype(&DAQmxSetChanAttribute);
  using SetChanAttributeDoublePtr = decltype(&DAQmxSetChanAttribute);
  using SetChanAttributeDoubleArrayPtr = decltype(&DAQmxSetChanAttribute);
  using SetChanAttributeInt32Ptr = decltype(&DAQmxSetChanAttribute);
  using SetChanAttributeStringPtr = decltype(&DAQmxSetChanAttribute);
  using SetChanAttributeUInt32Ptr = decltype(&DAQmxSetChanAttribute);
  using SetDigitalLogicFamilyPowerUpStatePtr = decltype(&DAQmxSetDigitalLogicFamilyPowerUpState);
  using SetDigitalPowerUpStatesPtr = decltype(&DAQmxSetDigitalPowerUpStates);
  using SetDigitalPullUpPullDownStatesPtr = decltype(&DAQmxSetDigitalPullUpPullDownStates);
  using SetExportedSignalAttributeBoolPtr = decltype(&DAQmxSetExportedSignalAttribute);
  using SetExportedSignalAttributeDoublePtr = decltype(&DAQmxSetExportedSignalAttribute);
  using SetExportedSignalAttributeInt32Ptr = decltype(&DAQmxSetExportedSignalAttribute);
  using SetExportedSignalAttributeStringPtr = decltype(&DAQmxSetExportedSignalAttribute);
  using SetExportedSignalAttributeUInt32Ptr = decltype(&DAQmxSetExportedSignalAttribute);
  using SetFirstSampClkWhenPtr = decltype(&DAQmxSetFirstSampClkWhen);
  using SetReadAttributeBoolPtr = decltype(&DAQmxSetReadAttribute);
  using SetReadAttributeDoublePtr = decltype(&DAQmxSetReadAttribute);
  using SetReadAttributeInt32Ptr = decltype(&DAQmxSetReadAttribute);
  using SetReadAttributeStringPtr = decltype(&DAQmxSetReadAttribute);
  using SetReadAttributeUInt32Ptr = decltype(&DAQmxSetReadAttribute);
  using SetReadAttributeUInt64Ptr = decltype(&DAQmxSetReadAttribute);
  using SetRealTimeAttributeBoolPtr = decltype(&DAQmxSetRealTimeAttribute);
  using SetRealTimeAttributeInt32Ptr = decltype(&DAQmxSetRealTimeAttribute);
  using SetRealTimeAttributeUInt32Ptr = decltype(&DAQmxSetRealTimeAttribute);
  using SetScaleAttributeDoublePtr = decltype(&DAQmxSetScaleAttribute);
  using SetScaleAttributeDoubleArrayPtr = decltype(&DAQmxSetScaleAttribute);
  using SetScaleAttributeInt32Ptr = decltype(&DAQmxSetScaleAttribute);
  using SetScaleAttributeStringPtr = decltype(&DAQmxSetScaleAttribute);
  using SetStartTrigTrigWhenPtr = decltype(&DAQmxSetStartTrigTrigWhen);
  using SetSyncPulseTimeWhenPtr = decltype(&DAQmxSetSyncPulseTimeWhen);
  using SetTimingAttributeBoolPtr = decltype(&DAQmxSetTimingAttribute);
  using SetTimingAttributeDoublePtr = decltype(&DAQmxSetTimingAttribute);
  using SetTimingAttributeExBoolPtr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeExDoublePtr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeExInt32Ptr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeExStringPtr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeExTimestampPtr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeExUInt32Ptr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeExUInt64Ptr = decltype(&DAQmxSetTimingAttributeEx);
  using SetTimingAttributeInt32Ptr = decltype(&DAQmxSetTimingAttribute);
  using SetTimingAttributeStringPtr = decltype(&DAQmxSetTimingAttribute);
  using SetTimingAttributeTimestampPtr = decltype(&DAQmxSetTimingAttribute);
  using SetTimingAttributeUInt32Ptr = decltype(&DAQmxSetTimingAttribute);
  using SetTimingAttributeUInt64Ptr = decltype(&DAQmxSetTimingAttribute);
  using SetTrigAttributeBoolPtr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeDoublePtr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeDoubleArrayPtr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeInt32Ptr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeInt32ArrayPtr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeStringPtr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeTimestampPtr = decltype(&DAQmxSetTrigAttribute);
  using SetTrigAttributeUInt32Ptr = decltype(&DAQmxSetTrigAttribute);
  using SetWatchdogAttributeBoolPtr = decltype(&DAQmxSetWatchdogAttribute);
  using SetWatchdogAttributeDoublePtr = decltype(&DAQmxSetWatchdogAttribute);
  using SetWatchdogAttributeInt32Ptr = decltype(&DAQmxSetWatchdogAttribute);
  using SetWatchdogAttributeStringPtr = decltype(&DAQmxSetWatchdogAttribute);
  using SetWriteAttributeBoolPtr = decltype(&DAQmxSetWriteAttribute);
  using SetWriteAttributeDoublePtr = decltype(&DAQmxSetWriteAttribute);
  using SetWriteAttributeInt32Ptr = decltype(&DAQmxSetWriteAttribute);
  using SetWriteAttributeStringPtr = decltype(&DAQmxSetWriteAttribute);
  using SetWriteAttributeUInt32Ptr = decltype(&DAQmxSetWriteAttribute);
  using SetWriteAttributeUInt64Ptr = decltype(&DAQmxSetWriteAttribute);
  using StartNewFilePtr = decltype(&DAQmxStartNewFile);
  using StartTaskPtr = decltype(&DAQmxStartTask);
  using StopTaskPtr = decltype(&DAQmxStopTask);
  using TaskControlPtr = decltype(&DAQmxTaskControl);
  using TristateOutputTermPtr = decltype(&DAQmxTristateOutputTerm);
  using UnreserveNetworkDevicePtr = decltype(&DAQmxUnreserveNetworkDevice);
  using WaitForNextSampleClockPtr = decltype(&DAQmxWaitForNextSampleClock);
  using WaitForValidTimestampPtr = decltype(&DAQmxWaitForValidTimestamp);
  using WaitUntilTaskDonePtr = decltype(&DAQmxWaitUntilTaskDone);
  using WriteAnalogF64Ptr = decltype(&DAQmxWriteAnalogF64);
  using WriteAnalogScalarF64Ptr = decltype(&DAQmxWriteAnalogScalarF64);
  using WriteBinaryI16Ptr = decltype(&DAQmxWriteBinaryI16);
  using WriteBinaryI32Ptr = decltype(&DAQmxWriteBinaryI32);
  using WriteBinaryU16Ptr = decltype(&DAQmxWriteBinaryU16);
  using WriteBinaryU32Ptr = decltype(&DAQmxWriteBinaryU32);
  using WriteCtrFreqPtr = decltype(&DAQmxWriteCtrFreq);
  using WriteCtrFreqScalarPtr = decltype(&DAQmxWriteCtrFreqScalar);
  using WriteCtrTicksPtr = decltype(&DAQmxWriteCtrTicks);
  using WriteCtrTicksScalarPtr = decltype(&DAQmxWriteCtrTicksScalar);
  using WriteCtrTimePtr = decltype(&DAQmxWriteCtrTime);
  using WriteCtrTimeScalarPtr = decltype(&DAQmxWriteCtrTimeScalar);
  using WriteDigitalLinesPtr = decltype(&DAQmxWriteDigitalLines);
  using WriteDigitalScalarU32Ptr = decltype(&DAQmxWriteDigitalScalarU32);
  using WriteDigitalU16Ptr = decltype(&DAQmxWriteDigitalU16);
  using WriteDigitalU32Ptr = decltype(&DAQmxWriteDigitalU32);
  using WriteDigitalU8Ptr = decltype(&DAQmxWriteDigitalU8);
  using WriteRawPtr = decltype(&DAQmxWriteRaw);
  using WriteToTEDSFromArrayPtr = decltype(&DAQmxWriteToTEDSFromArray);
  using WriteToTEDSFromFilePtr = decltype(&DAQmxWriteToTEDSFromFile);

  typedef struct FunctionPointers {
    AddCDAQSyncConnectionPtr AddCDAQSyncConnection;
    AddGlobalChansToTaskPtr AddGlobalChansToTask;
    AddNetworkDevicePtr AddNetworkDevice;
    AreConfiguredCDAQSyncPortsDisconnectedPtr AreConfiguredCDAQSyncPortsDisconnected;
    AutoConfigureCDAQSyncConnectionsPtr AutoConfigureCDAQSyncConnections;
    CalculateReversePolyCoeffPtr CalculateReversePolyCoeff;
    CfgAnlgEdgeRefTrigPtr CfgAnlgEdgeRefTrig;
    CfgAnlgEdgeStartTrigPtr CfgAnlgEdgeStartTrig;
    CfgAnlgMultiEdgeRefTrigPtr CfgAnlgMultiEdgeRefTrig;
    CfgAnlgMultiEdgeStartTrigPtr CfgAnlgMultiEdgeStartTrig;
    CfgAnlgWindowRefTrigPtr CfgAnlgWindowRefTrig;
    CfgAnlgWindowStartTrigPtr CfgAnlgWindowStartTrig;
    CfgBurstHandshakingTimingExportClockPtr CfgBurstHandshakingTimingExportClock;
    CfgBurstHandshakingTimingImportClockPtr CfgBurstHandshakingTimingImportClock;
    CfgChangeDetectionTimingPtr CfgChangeDetectionTiming;
    CfgDigEdgeRefTrigPtr CfgDigEdgeRefTrig;
    CfgDigEdgeStartTrigPtr CfgDigEdgeStartTrig;
    CfgDigPatternRefTrigPtr CfgDigPatternRefTrig;
    CfgDigPatternStartTrigPtr CfgDigPatternStartTrig;
    CfgHandshakingTimingPtr CfgHandshakingTiming;
    CfgImplicitTimingPtr CfgImplicitTiming;
    CfgInputBufferPtr CfgInputBuffer;
    CfgOutputBufferPtr CfgOutputBuffer;
    CfgPipelinedSampClkTimingPtr CfgPipelinedSampClkTiming;
    CfgSampClkTimingPtr CfgSampClkTiming;
    CfgTimeStartTrigPtr CfgTimeStartTrig;
    CfgWatchdogAOExpirStatesPtr CfgWatchdogAOExpirStates;
    CfgWatchdogCOExpirStatesPtr CfgWatchdogCOExpirStates;
    CfgWatchdogDOExpirStatesPtr CfgWatchdogDOExpirStates;
    ClearTEDSPtr ClearTEDS;
    ClearTaskPtr ClearTask;
    ConfigureLoggingPtr ConfigureLogging;
    ConfigureTEDSPtr ConfigureTEDS;
    ConnectTermsPtr ConnectTerms;
    ControlWatchdogTaskPtr ControlWatchdogTask;
    CreateAIAccel4WireDCVoltageChanPtr CreateAIAccel4WireDCVoltageChan;
    CreateAIAccelChanPtr CreateAIAccelChan;
    CreateAIAccelChargeChanPtr CreateAIAccelChargeChan;
    CreateAIBridgeChanPtr CreateAIBridgeChan;
    CreateAIChargeChanPtr CreateAIChargeChan;
    CreateAICurrentChanPtr CreateAICurrentChan;
    CreateAICurrentRMSChanPtr CreateAICurrentRMSChan;
    CreateAIForceBridgePolynomialChanPtr CreateAIForceBridgePolynomialChan;
    CreateAIForceBridgeTableChanPtr CreateAIForceBridgeTableChan;
    CreateAIForceBridgeTwoPointLinChanPtr CreateAIForceBridgeTwoPointLinChan;
    CreateAIForceIEPEChanPtr CreateAIForceIEPEChan;
    CreateAIFreqVoltageChanPtr CreateAIFreqVoltageChan;
    CreateAIMicrophoneChanPtr CreateAIMicrophoneChan;
    CreateAIPosEddyCurrProxProbeChanPtr CreateAIPosEddyCurrProxProbeChan;
    CreateAIPosLVDTChanPtr CreateAIPosLVDTChan;
    CreateAIPosRVDTChanPtr CreateAIPosRVDTChan;
    CreateAIPowerChanPtr CreateAIPowerChan;
    CreateAIPressureBridgePolynomialChanPtr CreateAIPressureBridgePolynomialChan;
    CreateAIPressureBridgeTableChanPtr CreateAIPressureBridgeTableChan;
    CreateAIPressureBridgeTwoPointLinChanPtr CreateAIPressureBridgeTwoPointLinChan;
    CreateAIRTDChanPtr CreateAIRTDChan;
    CreateAIResistanceChanPtr CreateAIResistanceChan;
    CreateAIRosetteStrainGageChanPtr CreateAIRosetteStrainGageChan;
    CreateAIStrainGageChanPtr CreateAIStrainGageChan;
    CreateAITempBuiltInSensorChanPtr CreateAITempBuiltInSensorChan;
    CreateAIThrmcplChanPtr CreateAIThrmcplChan;
    CreateAIThrmstrChanIexPtr CreateAIThrmstrChanIex;
    CreateAIThrmstrChanVexPtr CreateAIThrmstrChanVex;
    CreateAITorqueBridgePolynomialChanPtr CreateAITorqueBridgePolynomialChan;
    CreateAITorqueBridgeTableChanPtr CreateAITorqueBridgeTableChan;
    CreateAITorqueBridgeTwoPointLinChanPtr CreateAITorqueBridgeTwoPointLinChan;
    CreateAIVelocityIEPEChanPtr CreateAIVelocityIEPEChan;
    CreateAIVoltageChanPtr CreateAIVoltageChan;
    CreateAIVoltageChanWithExcitPtr CreateAIVoltageChanWithExcit;
    CreateAIVoltageRMSChanPtr CreateAIVoltageRMSChan;
    CreateAOCurrentChanPtr CreateAOCurrentChan;
    CreateAOFuncGenChanPtr CreateAOFuncGenChan;
    CreateAOVoltageChanPtr CreateAOVoltageChan;
    CreateCIAngEncoderChanPtr CreateCIAngEncoderChan;
    CreateCIAngVelocityChanPtr CreateCIAngVelocityChan;
    CreateCICountEdgesChanPtr CreateCICountEdgesChan;
    CreateCIDutyCycleChanPtr CreateCIDutyCycleChan;
    CreateCIFreqChanPtr CreateCIFreqChan;
    CreateCIGPSTimestampChanPtr CreateCIGPSTimestampChan;
    CreateCILinEncoderChanPtr CreateCILinEncoderChan;
    CreateCILinVelocityChanPtr CreateCILinVelocityChan;
    CreateCIPeriodChanPtr CreateCIPeriodChan;
    CreateCIPulseChanFreqPtr CreateCIPulseChanFreq;
    CreateCIPulseChanTicksPtr CreateCIPulseChanTicks;
    CreateCIPulseChanTimePtr CreateCIPulseChanTime;
    CreateCIPulseWidthChanPtr CreateCIPulseWidthChan;
    CreateCISemiPeriodChanPtr CreateCISemiPeriodChan;
    CreateCITwoEdgeSepChanPtr CreateCITwoEdgeSepChan;
    CreateCOPulseChanFreqPtr CreateCOPulseChanFreq;
    CreateCOPulseChanTicksPtr CreateCOPulseChanTicks;
    CreateCOPulseChanTimePtr CreateCOPulseChanTime;
    CreateDIChanPtr CreateDIChan;
    CreateDOChanPtr CreateDOChan;
    CreateLinScalePtr CreateLinScale;
    CreateMapScalePtr CreateMapScale;
    CreatePolynomialScalePtr CreatePolynomialScale;
    CreateTEDSAIAccelChanPtr CreateTEDSAIAccelChan;
    CreateTEDSAIBridgeChanPtr CreateTEDSAIBridgeChan;
    CreateTEDSAICurrentChanPtr CreateTEDSAICurrentChan;
    CreateTEDSAIForceBridgeChanPtr CreateTEDSAIForceBridgeChan;
    CreateTEDSAIForceIEPEChanPtr CreateTEDSAIForceIEPEChan;
    CreateTEDSAIMicrophoneChanPtr CreateTEDSAIMicrophoneChan;
    CreateTEDSAIPosLVDTChanPtr CreateTEDSAIPosLVDTChan;
    CreateTEDSAIPosRVDTChanPtr CreateTEDSAIPosRVDTChan;
    CreateTEDSAIPressureBridgeChanPtr CreateTEDSAIPressureBridgeChan;
    CreateTEDSAIRTDChanPtr CreateTEDSAIRTDChan;
    CreateTEDSAIResistanceChanPtr CreateTEDSAIResistanceChan;
    CreateTEDSAIStrainGageChanPtr CreateTEDSAIStrainGageChan;
    CreateTEDSAIThrmcplChanPtr CreateTEDSAIThrmcplChan;
    CreateTEDSAIThrmstrChanIexPtr CreateTEDSAIThrmstrChanIex;
    CreateTEDSAIThrmstrChanVexPtr CreateTEDSAIThrmstrChanVex;
    CreateTEDSAITorqueBridgeChanPtr CreateTEDSAITorqueBridgeChan;
    CreateTEDSAIVoltageChanPtr CreateTEDSAIVoltageChan;
    CreateTEDSAIVoltageChanWithExcitPtr CreateTEDSAIVoltageChanWithExcit;
    CreateTableScalePtr CreateTableScale;
    CreateTaskPtr CreateTask;
    CreateWatchdogTimerTaskPtr CreateWatchdogTimerTask;
    CreateWatchdogTimerTaskExPtr CreateWatchdogTimerTaskEx;
    DeleteNetworkDevicePtr DeleteNetworkDevice;
    DeleteSavedGlobalChanPtr DeleteSavedGlobalChan;
    DeleteSavedScalePtr DeleteSavedScale;
    DeleteSavedTaskPtr DeleteSavedTask;
    DeviceSupportsCalPtr DeviceSupportsCal;
    DisableRefTrigPtr DisableRefTrig;
    DisableStartTrigPtr DisableStartTrig;
    DisconnectTermsPtr DisconnectTerms;
    ExportSignalPtr ExportSignal;
    GetAIChanCalCalDatePtr GetAIChanCalCalDate;
    GetAIChanCalExpDatePtr GetAIChanCalExpDate;
    GetAnalogPowerUpStatesPtr GetAnalogPowerUpStates;
    GetAnalogPowerUpStatesWithOutputTypePtr GetAnalogPowerUpStatesWithOutputType;
    GetArmStartTrigTimestampValPtr GetArmStartTrigTimestampVal;
    GetArmStartTrigTrigWhenPtr GetArmStartTrigTrigWhen;
    GetAutoConfiguredCDAQSyncConnectionsPtr GetAutoConfiguredCDAQSyncConnections;
    GetBufferAttributeUInt32Ptr GetBufferAttributeUInt32;
    GetCalInfoAttributeBoolPtr GetCalInfoAttributeBool;
    GetCalInfoAttributeDoublePtr GetCalInfoAttributeDouble;
    GetCalInfoAttributeStringPtr GetCalInfoAttributeString;
    GetCalInfoAttributeUInt32Ptr GetCalInfoAttributeUInt32;
    GetChanAttributeBoolPtr GetChanAttributeBool;
    GetChanAttributeDoublePtr GetChanAttributeDouble;
    GetChanAttributeDoubleArrayPtr GetChanAttributeDoubleArray;
    GetChanAttributeInt32Ptr GetChanAttributeInt32;
    GetChanAttributeStringPtr GetChanAttributeString;
    GetChanAttributeUInt32Ptr GetChanAttributeUInt32;
    GetDeviceAttributeBoolPtr GetDeviceAttributeBool;
    GetDeviceAttributeDoublePtr GetDeviceAttributeDouble;
    GetDeviceAttributeDoubleArrayPtr GetDeviceAttributeDoubleArray;
    GetDeviceAttributeInt32Ptr GetDeviceAttributeInt32;
    GetDeviceAttributeInt32ArrayPtr GetDeviceAttributeInt32Array;
    GetDeviceAttributeStringPtr GetDeviceAttributeString;
    GetDeviceAttributeUInt32Ptr GetDeviceAttributeUInt32;
    GetDeviceAttributeUInt32ArrayPtr GetDeviceAttributeUInt32Array;
    GetDigitalLogicFamilyPowerUpStatePtr GetDigitalLogicFamilyPowerUpState;
    GetDigitalPowerUpStatesPtr GetDigitalPowerUpStates;
    GetDigitalPullUpPullDownStatesPtr GetDigitalPullUpPullDownStates;
    GetDisconnectedCDAQSyncPortsPtr GetDisconnectedCDAQSyncPorts;
    GetErrorStringPtr GetErrorString;
    GetExportedSignalAttributeBoolPtr GetExportedSignalAttributeBool;
    GetExportedSignalAttributeDoublePtr GetExportedSignalAttributeDouble;
    GetExportedSignalAttributeInt32Ptr GetExportedSignalAttributeInt32;
    GetExportedSignalAttributeStringPtr GetExportedSignalAttributeString;
    GetExportedSignalAttributeUInt32Ptr GetExportedSignalAttributeUInt32;
    GetExtendedErrorInfoPtr GetExtendedErrorInfo;
    GetFirstSampClkWhenPtr GetFirstSampClkWhen;
    GetFirstSampTimestampValPtr GetFirstSampTimestampVal;
    GetNthTaskChannelPtr GetNthTaskChannel;
    GetNthTaskDevicePtr GetNthTaskDevice;
    GetNthTaskReadChannelPtr GetNthTaskReadChannel;
    GetPersistedChanAttributeBoolPtr GetPersistedChanAttributeBool;
    GetPersistedChanAttributeStringPtr GetPersistedChanAttributeString;
    GetPersistedScaleAttributeBoolPtr GetPersistedScaleAttributeBool;
    GetPersistedScaleAttributeStringPtr GetPersistedScaleAttributeString;
    GetPersistedTaskAttributeBoolPtr GetPersistedTaskAttributeBool;
    GetPersistedTaskAttributeStringPtr GetPersistedTaskAttributeString;
    GetPhysicalChanAttributeBoolPtr GetPhysicalChanAttributeBool;
    GetPhysicalChanAttributeBytesPtr GetPhysicalChanAttributeBytes;
    GetPhysicalChanAttributeDoublePtr GetPhysicalChanAttributeDouble;
    GetPhysicalChanAttributeDoubleArrayPtr GetPhysicalChanAttributeDoubleArray;
    GetPhysicalChanAttributeInt32Ptr GetPhysicalChanAttributeInt32;
    GetPhysicalChanAttributeInt32ArrayPtr GetPhysicalChanAttributeInt32Array;
    GetPhysicalChanAttributeStringPtr GetPhysicalChanAttributeString;
    GetPhysicalChanAttributeUInt32Ptr GetPhysicalChanAttributeUInt32;
    GetPhysicalChanAttributeUInt32ArrayPtr GetPhysicalChanAttributeUInt32Array;
    GetReadAttributeBoolPtr GetReadAttributeBool;
    GetReadAttributeDoublePtr GetReadAttributeDouble;
    GetReadAttributeInt32Ptr GetReadAttributeInt32;
    GetReadAttributeStringPtr GetReadAttributeString;
    GetReadAttributeUInt32Ptr GetReadAttributeUInt32;
    GetReadAttributeUInt64Ptr GetReadAttributeUInt64;
    GetRealTimeAttributeBoolPtr GetRealTimeAttributeBool;
    GetRealTimeAttributeInt32Ptr GetRealTimeAttributeInt32;
    GetRealTimeAttributeUInt32Ptr GetRealTimeAttributeUInt32;
    GetRefTrigTimestampValPtr GetRefTrigTimestampVal;
    GetScaleAttributeDoublePtr GetScaleAttributeDouble;
    GetScaleAttributeDoubleArrayPtr GetScaleAttributeDoubleArray;
    GetScaleAttributeInt32Ptr GetScaleAttributeInt32;
    GetScaleAttributeStringPtr GetScaleAttributeString;
    GetSelfCalLastDateAndTimePtr GetSelfCalLastDateAndTime;
    GetStartTrigTimestampValPtr GetStartTrigTimestampVal;
    GetStartTrigTrigWhenPtr GetStartTrigTrigWhen;
    GetSyncPulseTimeWhenPtr GetSyncPulseTimeWhen;
    GetSystemInfoAttributeStringPtr GetSystemInfoAttributeString;
    GetSystemInfoAttributeUInt32Ptr GetSystemInfoAttributeUInt32;
    GetTaskAttributeBoolPtr GetTaskAttributeBool;
    GetTaskAttributeStringPtr GetTaskAttributeString;
    GetTaskAttributeUInt32Ptr GetTaskAttributeUInt32;
    GetTimingAttributeBoolPtr GetTimingAttributeBool;
    GetTimingAttributeDoublePtr GetTimingAttributeDouble;
    GetTimingAttributeExBoolPtr GetTimingAttributeExBool;
    GetTimingAttributeExDoublePtr GetTimingAttributeExDouble;
    GetTimingAttributeExInt32Ptr GetTimingAttributeExInt32;
    GetTimingAttributeExStringPtr GetTimingAttributeExString;
    GetTimingAttributeExTimestampPtr GetTimingAttributeExTimestamp;
    GetTimingAttributeExUInt32Ptr GetTimingAttributeExUInt32;
    GetTimingAttributeExUInt64Ptr GetTimingAttributeExUInt64;
    GetTimingAttributeInt32Ptr GetTimingAttributeInt32;
    GetTimingAttributeStringPtr GetTimingAttributeString;
    GetTimingAttributeTimestampPtr GetTimingAttributeTimestamp;
    GetTimingAttributeUInt32Ptr GetTimingAttributeUInt32;
    GetTimingAttributeUInt64Ptr GetTimingAttributeUInt64;
    GetTrigAttributeBoolPtr GetTrigAttributeBool;
    GetTrigAttributeDoublePtr GetTrigAttributeDouble;
    GetTrigAttributeDoubleArrayPtr GetTrigAttributeDoubleArray;
    GetTrigAttributeInt32Ptr GetTrigAttributeInt32;
    GetTrigAttributeInt32ArrayPtr GetTrigAttributeInt32Array;
    GetTrigAttributeStringPtr GetTrigAttributeString;
    GetTrigAttributeTimestampPtr GetTrigAttributeTimestamp;
    GetTrigAttributeUInt32Ptr GetTrigAttributeUInt32;
    GetWatchdogAttributeBoolPtr GetWatchdogAttributeBool;
    GetWatchdogAttributeDoublePtr GetWatchdogAttributeDouble;
    GetWatchdogAttributeInt32Ptr GetWatchdogAttributeInt32;
    GetWatchdogAttributeStringPtr GetWatchdogAttributeString;
    GetWriteAttributeBoolPtr GetWriteAttributeBool;
    GetWriteAttributeDoublePtr GetWriteAttributeDouble;
    GetWriteAttributeInt32Ptr GetWriteAttributeInt32;
    GetWriteAttributeStringPtr GetWriteAttributeString;
    GetWriteAttributeUInt32Ptr GetWriteAttributeUInt32;
    GetWriteAttributeUInt64Ptr GetWriteAttributeUInt64;
    IsTaskDonePtr IsTaskDone;
    LoadTaskPtr LoadTask;
    ReadAnalogF64Ptr ReadAnalogF64;
    ReadAnalogScalarF64Ptr ReadAnalogScalarF64;
    ReadBinaryI16Ptr ReadBinaryI16;
    ReadBinaryI32Ptr ReadBinaryI32;
    ReadBinaryU16Ptr ReadBinaryU16;
    ReadBinaryU32Ptr ReadBinaryU32;
    ReadCounterF64Ptr ReadCounterF64;
    ReadCounterF64ExPtr ReadCounterF64Ex;
    ReadCounterScalarF64Ptr ReadCounterScalarF64;
    ReadCounterScalarU32Ptr ReadCounterScalarU32;
    ReadCounterU32Ptr ReadCounterU32;
    ReadCounterU32ExPtr ReadCounterU32Ex;
    ReadCtrFreqPtr ReadCtrFreq;
    ReadCtrFreqScalarPtr ReadCtrFreqScalar;
    ReadCtrTicksPtr ReadCtrTicks;
    ReadCtrTicksScalarPtr ReadCtrTicksScalar;
    ReadCtrTimePtr ReadCtrTime;
    ReadCtrTimeScalarPtr ReadCtrTimeScalar;
    ReadDigitalLinesPtr ReadDigitalLines;
    ReadDigitalScalarU32Ptr ReadDigitalScalarU32;
    ReadDigitalU16Ptr ReadDigitalU16;
    ReadDigitalU32Ptr ReadDigitalU32;
    ReadDigitalU8Ptr ReadDigitalU8;
    ReadPowerBinaryI16Ptr ReadPowerBinaryI16;
    ReadPowerF64Ptr ReadPowerF64;
    ReadPowerScalarF64Ptr ReadPowerScalarF64;
    ReadRawPtr ReadRaw;
    RegisterDoneEventPtr RegisterDoneEvent;
    RegisterEveryNSamplesEventPtr RegisterEveryNSamplesEvent;
    RegisterSignalEventPtr RegisterSignalEvent;
    RemoveCDAQSyncConnectionPtr RemoveCDAQSyncConnection;
    ReserveNetworkDevicePtr ReserveNetworkDevice;
    ResetBufferAttributePtr ResetBufferAttribute;
    ResetChanAttributePtr ResetChanAttribute;
    ResetDevicePtr ResetDevice;
    ResetExportedSignalAttributePtr ResetExportedSignalAttribute;
    ResetReadAttributePtr ResetReadAttribute;
    ResetRealTimeAttributePtr ResetRealTimeAttribute;
    ResetTimingAttributePtr ResetTimingAttribute;
    ResetTimingAttributeExPtr ResetTimingAttributeEx;
    ResetTrigAttributePtr ResetTrigAttribute;
    ResetWatchdogAttributePtr ResetWatchdogAttribute;
    ResetWriteAttributePtr ResetWriteAttribute;
    SaveGlobalChanPtr SaveGlobalChan;
    SaveScalePtr SaveScale;
    SaveTaskPtr SaveTask;
    SelfCalPtr SelfCal;
    SelfTestDevicePtr SelfTestDevice;
    SetAIChanCalCalDatePtr SetAIChanCalCalDate;
    SetAIChanCalExpDatePtr SetAIChanCalExpDate;
    SetAnalogPowerUpStatesPtr SetAnalogPowerUpStates;
    SetAnalogPowerUpStatesWithOutputTypePtr SetAnalogPowerUpStatesWithOutputType;
    SetArmStartTrigTrigWhenPtr SetArmStartTrigTrigWhen;
    SetBufferAttributeUInt32Ptr SetBufferAttributeUInt32;
    SetCalInfoAttributeBoolPtr SetCalInfoAttributeBool;
    SetCalInfoAttributeDoublePtr SetCalInfoAttributeDouble;
    SetCalInfoAttributeStringPtr SetCalInfoAttributeString;
    SetCalInfoAttributeUInt32Ptr SetCalInfoAttributeUInt32;
    SetChanAttributeBoolPtr SetChanAttributeBool;
    SetChanAttributeDoublePtr SetChanAttributeDouble;
    SetChanAttributeDoubleArrayPtr SetChanAttributeDoubleArray;
    SetChanAttributeInt32Ptr SetChanAttributeInt32;
    SetChanAttributeStringPtr SetChanAttributeString;
    SetChanAttributeUInt32Ptr SetChanAttributeUInt32;
    SetDigitalLogicFamilyPowerUpStatePtr SetDigitalLogicFamilyPowerUpState;
    SetDigitalPowerUpStatesPtr SetDigitalPowerUpStates;
    SetDigitalPullUpPullDownStatesPtr SetDigitalPullUpPullDownStates;
    SetExportedSignalAttributeBoolPtr SetExportedSignalAttributeBool;
    SetExportedSignalAttributeDoublePtr SetExportedSignalAttributeDouble;
    SetExportedSignalAttributeInt32Ptr SetExportedSignalAttributeInt32;
    SetExportedSignalAttributeStringPtr SetExportedSignalAttributeString;
    SetExportedSignalAttributeUInt32Ptr SetExportedSignalAttributeUInt32;
    SetFirstSampClkWhenPtr SetFirstSampClkWhen;
    SetReadAttributeBoolPtr SetReadAttributeBool;
    SetReadAttributeDoublePtr SetReadAttributeDouble;
    SetReadAttributeInt32Ptr SetReadAttributeInt32;
    SetReadAttributeStringPtr SetReadAttributeString;
    SetReadAttributeUInt32Ptr SetReadAttributeUInt32;
    SetReadAttributeUInt64Ptr SetReadAttributeUInt64;
    SetRealTimeAttributeBoolPtr SetRealTimeAttributeBool;
    SetRealTimeAttributeInt32Ptr SetRealTimeAttributeInt32;
    SetRealTimeAttributeUInt32Ptr SetRealTimeAttributeUInt32;
    SetScaleAttributeDoublePtr SetScaleAttributeDouble;
    SetScaleAttributeDoubleArrayPtr SetScaleAttributeDoubleArray;
    SetScaleAttributeInt32Ptr SetScaleAttributeInt32;
    SetScaleAttributeStringPtr SetScaleAttributeString;
    SetStartTrigTrigWhenPtr SetStartTrigTrigWhen;
    SetSyncPulseTimeWhenPtr SetSyncPulseTimeWhen;
    SetTimingAttributeBoolPtr SetTimingAttributeBool;
    SetTimingAttributeDoublePtr SetTimingAttributeDouble;
    SetTimingAttributeExBoolPtr SetTimingAttributeExBool;
    SetTimingAttributeExDoublePtr SetTimingAttributeExDouble;
    SetTimingAttributeExInt32Ptr SetTimingAttributeExInt32;
    SetTimingAttributeExStringPtr SetTimingAttributeExString;
    SetTimingAttributeExTimestampPtr SetTimingAttributeExTimestamp;
    SetTimingAttributeExUInt32Ptr SetTimingAttributeExUInt32;
    SetTimingAttributeExUInt64Ptr SetTimingAttributeExUInt64;
    SetTimingAttributeInt32Ptr SetTimingAttributeInt32;
    SetTimingAttributeStringPtr SetTimingAttributeString;
    SetTimingAttributeTimestampPtr SetTimingAttributeTimestamp;
    SetTimingAttributeUInt32Ptr SetTimingAttributeUInt32;
    SetTimingAttributeUInt64Ptr SetTimingAttributeUInt64;
    SetTrigAttributeBoolPtr SetTrigAttributeBool;
    SetTrigAttributeDoublePtr SetTrigAttributeDouble;
    SetTrigAttributeDoubleArrayPtr SetTrigAttributeDoubleArray;
    SetTrigAttributeInt32Ptr SetTrigAttributeInt32;
    SetTrigAttributeInt32ArrayPtr SetTrigAttributeInt32Array;
    SetTrigAttributeStringPtr SetTrigAttributeString;
    SetTrigAttributeTimestampPtr SetTrigAttributeTimestamp;
    SetTrigAttributeUInt32Ptr SetTrigAttributeUInt32;
    SetWatchdogAttributeBoolPtr SetWatchdogAttributeBool;
    SetWatchdogAttributeDoublePtr SetWatchdogAttributeDouble;
    SetWatchdogAttributeInt32Ptr SetWatchdogAttributeInt32;
    SetWatchdogAttributeStringPtr SetWatchdogAttributeString;
    SetWriteAttributeBoolPtr SetWriteAttributeBool;
    SetWriteAttributeDoublePtr SetWriteAttributeDouble;
    SetWriteAttributeInt32Ptr SetWriteAttributeInt32;
    SetWriteAttributeStringPtr SetWriteAttributeString;
    SetWriteAttributeUInt32Ptr SetWriteAttributeUInt32;
    SetWriteAttributeUInt64Ptr SetWriteAttributeUInt64;
    StartNewFilePtr StartNewFile;
    StartTaskPtr StartTask;
    StopTaskPtr StopTask;
    TaskControlPtr TaskControl;
    TristateOutputTermPtr TristateOutputTerm;
    UnreserveNetworkDevicePtr UnreserveNetworkDevice;
    WaitForNextSampleClockPtr WaitForNextSampleClock;
    WaitForValidTimestampPtr WaitForValidTimestamp;
    WaitUntilTaskDonePtr WaitUntilTaskDone;
    WriteAnalogF64Ptr WriteAnalogF64;
    WriteAnalogScalarF64Ptr WriteAnalogScalarF64;
    WriteBinaryI16Ptr WriteBinaryI16;
    WriteBinaryI32Ptr WriteBinaryI32;
    WriteBinaryU16Ptr WriteBinaryU16;
    WriteBinaryU32Ptr WriteBinaryU32;
    WriteCtrFreqPtr WriteCtrFreq;
    WriteCtrFreqScalarPtr WriteCtrFreqScalar;
    WriteCtrTicksPtr WriteCtrTicks;
    WriteCtrTicksScalarPtr WriteCtrTicksScalar;
    WriteCtrTimePtr WriteCtrTime;
    WriteCtrTimeScalarPtr WriteCtrTimeScalar;
    WriteDigitalLinesPtr WriteDigitalLines;
    WriteDigitalScalarU32Ptr WriteDigitalScalarU32;
    WriteDigitalU16Ptr WriteDigitalU16;
    WriteDigitalU32Ptr WriteDigitalU32;
    WriteDigitalU8Ptr WriteDigitalU8;
    WriteRawPtr WriteRaw;
    WriteToTEDSFromArrayPtr WriteToTEDSFromArray;
    WriteToTEDSFromFilePtr WriteToTEDSFromFile;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidaqmx_grpc

#endif  // NIDAQMX_GRPC_LIBRARY_H
