//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DAQMX
//---------------------------------------------------------------------
#ifndef NIDAQMX_GRPC_LIBRARY_H
#define NIDAQMX_GRPC_LIBRARY_H

#include "nidaqmx_library_interface.h"

#include <server/shared_library.h>

namespace nidaqmx_grpc {

class NiDAQmxLibrary : public nidaqmx_grpc::NiDAQmxLibraryInterface {
 public:
  NiDAQmxLibrary();
  virtual ~NiDAQmxLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 AddCDAQSyncConnection(const char portList[]);
  int32 AddGlobalChansToTask(TaskHandle task, const char channelNames[]);
  int32 AddNetworkDevice(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize);
  int32 AreConfiguredCDAQSyncPortsDisconnected(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist);
  int32 AutoConfigureCDAQSyncConnections(const char chassisDevicesPorts[], float64 timeout);
  int32 CalculateReversePolyCoeff(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[]);
  int32 CfgAnlgEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples);
  int32 CfgAnlgEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel);
  int32 CfgAnlgMultiEdgeRefTrig(TaskHandle task, const char triggerSources[], int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize);
  int32 CfgAnlgMultiEdgeStartTrig(TaskHandle task, const char triggerSources[], int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize);
  int32 CfgAnlgWindowRefTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples);
  int32 CfgAnlgWindowStartTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom);
  int32 CfgBurstHandshakingTimingExportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel);
  int32 CfgBurstHandshakingTimingImportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel);
  int32 CfgChangeDetectionTiming(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgDigEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples);
  int32 CfgDigEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge);
  int32 CfgDigPatternRefTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples);
  int32 CfgDigPatternStartTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen);
  int32 CfgHandshakingTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgImplicitTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgInputBuffer(TaskHandle task, uInt32 numSampsPerChan);
  int32 CfgOutputBuffer(TaskHandle task, uInt32 numSampsPerChan);
  int32 CfgPipelinedSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  int32 CfgTimeStartTrig(TaskHandle task, CVIAbsoluteTime when, int32 timescale);
  int32 CfgWatchdogAOExpirStates(TaskHandle task, const char channelNames[], const float64 expirStateArray[], int32 outputTypeArray[], uInt32 arraySize);
  int32 CfgWatchdogCOExpirStates(TaskHandle task, const char channelNames[], int32 expirStateArray[], uInt32 arraySize);
  int32 CfgWatchdogDOExpirStates(TaskHandle task, const char channelNames[], int32 expirStateArray[], uInt32 arraySize);
  int32 ClearTEDS(const char physicalChannel[]);
  int32 ClearTask(TaskHandle task);
  int32 ConfigureLogging(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation);
  int32 ConfigureTEDS(const char physicalChannel[], const char filePath[]);
  int32 ConnectTerms(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers);
  int32 ControlWatchdogTask(TaskHandle task, int32 action);
  int32 CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  int32 CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  int32 CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[]);
  int32 CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[]);
  int32 CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  int32 CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0);
  int32 CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIRosetteStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance);
  int32 CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[]);
  int32 CreateAITempBuiltInSensorChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units);
  int32 CreateAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  int32 CreateAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c);
  int32 CreateAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1);
  int32 CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  int32 CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  int32 CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset);
  int32 CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[]);
  int32 CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[]);
  int32 CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection);
  int32 CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[]);
  int32 CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  int32 CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[]);
  int32 CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[]);
  int32 CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[]);
  int32 CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  int32 CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  int32 CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal);
  int32 CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  int32 CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[]);
  int32 CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[]);
  int32 CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle);
  int32 CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks);
  int32 CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime);
  int32 CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  int32 CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  int32 CreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateMapScale(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreatePolynomialScale(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  int32 CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  int32 CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  int32 CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[]);
  int32 CreateTEDSAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  int32 CreateTEDSAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  int32 CreateTEDSAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1);
  int32 CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  int32 CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  int32 CreateTableScale(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[]);
  int32 CreateTask(const char sessionName[], TaskHandle* task);
  int32 CreateWatchdogTimerTask(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState);
  int32 CreateWatchdogTimerTaskEx(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout);
  int32 DeleteNetworkDevice(const char deviceName[]);
  int32 DeleteSavedGlobalChan(const char channelName[]);
  int32 DeleteSavedScale(const char scaleName[]);
  int32 DeleteSavedTask(const char taskName[]);
  int32 DeviceSupportsCal(const char deviceName[], bool32* calSupported);
  int32 DisableRefTrig(TaskHandle task);
  int32 DisableStartTrig(TaskHandle task);
  int32 DisconnectTerms(const char sourceTerminal[], const char destinationTerminal[]);
  int32 ExportSignal(TaskHandle task, int32 signalID, const char outputTerminal[]);
  int32 GetAIACExcitFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAIACExcitSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIACExcitWireMode(TaskHandle task, const char channel[], int32* data);
  int32 GetAIADCCustomTimingMode(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIADCTimingMode(TaskHandle task, const char channel[], int32* data);
  int32 GetAIAccel4WireDCVoltageSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIAccel4WireDCVoltageSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIAccelChargeSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIAccelChargeSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIAccelSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIAccelSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIAccelUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIAcceldBRef(TaskHandle task, const char channel[], float64* data);
  int32 GetAIAtten(TaskHandle task, const char channel[], float64* data);
  int32 GetAIAutoZeroMode(TaskHandle task, const char channel[], int32* data);
  int32 GetAIAveragingWinSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIBridgeBalanceCoarsePot(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeBalanceFinePot(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeElectricalUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeInitialRatio(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeInitialVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeNomResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgePhysicalUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgePolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIBridgePolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIBridgeScaleType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeShuntCalEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIBridgeShuntCalGainAdjust(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeShuntCalSelect(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeShuntCalShuntCalAActualResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeShuntCalShuntCalAResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeShuntCalShuntCalASrc(TaskHandle task, const char channel[], int32* data);
  int32 GetAIBridgeShuntCalShuntCalBActualResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeShuntCalShuntCalBResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeTableElectricalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIBridgeTablePhysicalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIBridgeTwoPointLinFirstElectricalVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeTwoPointLinFirstPhysicalVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeTwoPointLinSecondElectricalVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeTwoPointLinSecondPhysicalVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIBridgeUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIChanCalApplyCalIfExp(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetAIChanCalDesc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAIChanCalEnableCal(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetAIChanCalHasValidCalInfo(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIChanCalOperatorName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAIChanCalPolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIChanCalPolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIChanCalScaleType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIChanCalTablePreScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIChanCalTableScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIChanCalVerifAcqVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIChanCalVerifRefVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIChargeUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIChopEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAICoupling(TaskHandle task, const char channel[], int32* data);
  int32 GetAICurrentACRMSUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAICurrentShuntLoc(TaskHandle task, const char channel[], int32* data);
  int32 GetAICurrentShuntResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAICurrentUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAICustomScaleName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAIDCOffset(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDataXferCustomThreshold(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIDataXferMaxRate(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDataXferMech(TaskHandle task, const char channel[], int32* data);
  int32 GetAIDataXferReqCond(TaskHandle task, const char channel[], int32* data);
  int32 GetAIDevScalingCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIDigFltrBandpassCenterFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDigFltrBandpassWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDigFltrCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAIDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIDigFltrHighpassCutoffFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDigFltrLowpassCutoffFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDigFltrNotchCenterFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDigFltrNotchWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetAIDigFltrOrder(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIDigFltrResponse(TaskHandle task, const char channel[], int32* data);
  int32 GetAIDigFltrType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIDitherEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIEddyCurrentProxProbeSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIEddyCurrentProxProbeSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIEddyCurrentProxProbeUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIEnhancedAliasRejectionEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIExcitActualVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIExcitDCorAC(TaskHandle task, const char channel[], int32* data);
  int32 GetAIExcitIdleOutputBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetAIExcitSense(TaskHandle task, const char channel[], int32* data);
  int32 GetAIExcitSrc(TaskHandle task, const char channel[], int32* data);
  int32 GetAIExcitUseForScaling(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIExcitUseMultiplexed(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIExcitVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIExcitVoltageOrCurrent(TaskHandle task, const char channel[], int32* data);
  int32 GetAIFilterDelay(TaskHandle task, const char channel[], float64* data);
  int32 GetAIFilterDelayAdjustment(TaskHandle task, const char channel[], float64* data);
  int32 GetAIFilterDelayUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIFilterEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIFilterFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAIFilterOrder(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIFilterResponse(TaskHandle task, const char channel[], int32* data);
  int32 GetAIForceIEPESensorSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIForceIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIForceReadFromChan(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIForceUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIFreqHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetAIFreqThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetAIFreqUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIGain(TaskHandle task, const char channel[], float64* data);
  int32 GetAIInputLimitsFaultDetectEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIInputLimitsFaultDetectLowerLimit(TaskHandle task, const char channel[], float64* data);
  int32 GetAIInputLimitsFaultDetectUpperLimit(TaskHandle task, const char channel[], float64* data);
  int32 GetAIInputSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAIIsTEDS(TaskHandle task, const char channel[], bool32* data);
  int32 GetAILVDTSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAILVDTSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAILVDTUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAILeadWireResistance(TaskHandle task, const char channel[], float64* data);
  int32 GetAILossyLSBRemovalCompressedSampSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAILowpassCutoffFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAILowpassEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAILowpassSwitchCapClkSrc(TaskHandle task, const char channel[], int32* data);
  int32 GetAILowpassSwitchCapExtClkDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAILowpassSwitchCapExtClkFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAILowpassSwitchCapOutClkDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIMax(TaskHandle task, const char channel[], float64* data);
  int32 GetAIMeasType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIMemMapEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIMicrophoneSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIMin(TaskHandle task, const char channel[], float64* data);
  int32 GetAIOpenChanDetectEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIOpenThrmcplDetectEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIOvercurrentDetectEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIPowerSupplyFaultDetectEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIPressureUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIProbeAtten(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRTDA(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRTDB(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRTDC(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRTDR0(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRTDType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRVDTSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRVDTSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRVDTUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRawDataCompressionType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRawSampJustification(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRawSampSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIRemoveFilterDelay(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIResistanceCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetAIResistanceUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIResolution(TaskHandle task, const char channel[], float64* data);
  int32 GetAIResolutionUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRngHigh(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRngLow(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRosetteStrainGageOrientation(TaskHandle task, const char channel[], float64* data);
  int32 GetAIRosetteStrainGageRosetteMeasType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRosetteStrainGageRosetteType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIRosetteStrainGageStrainChans(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAISampAndHoldEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAISensorPowerCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetAISensorPowerType(TaskHandle task, const char channel[], int32* data);
  int32 GetAISensorPowerVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetAISoundPressureMaxSoundPressureLvl(TaskHandle task, const char channel[], float64* data);
  int32 GetAISoundPressureUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAISoundPressuredBRef(TaskHandle task, const char channel[], float64* data);
  int32 GetAIStrainGageCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetAIStrainGageForceReadFromChan(TaskHandle task, const char channel[], bool32* data);
  int32 GetAIStrainGageGageFactor(TaskHandle task, const char channel[], float64* data);
  int32 GetAIStrainGagePoissonRatio(TaskHandle task, const char channel[], float64* data);
  int32 GetAIStrainUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAITEDSUnits(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAITempUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAITermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetAIThrmcplCJCChan(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAIThrmcplCJCSrc(TaskHandle task, const char channel[], int32* data);
  int32 GetAIThrmcplCJCVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAIThrmcplLeadOffsetVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetAIThrmcplScaleType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIThrmcplType(TaskHandle task, const char channel[], int32* data);
  int32 GetAIThrmstrA(TaskHandle task, const char channel[], float64* data);
  int32 GetAIThrmstrB(TaskHandle task, const char channel[], float64* data);
  int32 GetAIThrmstrC(TaskHandle task, const char channel[], float64* data);
  int32 GetAIThrmstrR1(TaskHandle task, const char channel[], float64* data);
  int32 GetAITorqueUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAIVelocityIEPESensorSensitivity(TaskHandle task, const char channel[], float64* data);
  int32 GetAIVelocityIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIVelocityIEPESensordBRef(TaskHandle task, const char channel[], float64* data);
  int32 GetAIVelocityUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIVoltageACRMSUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIVoltageUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAIVoltagedBRef(TaskHandle task, const char channel[], float64* data);
  int32 GetAOCurrentUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAOCustomScaleName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAODACOffsetExtSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAODACOffsetSrc(TaskHandle task, const char channel[], int32* data);
  int32 GetAODACOffsetVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAODACRefAllowConnToGnd(TaskHandle task, const char channel[], bool32* data);
  int32 GetAODACRefConnToGnd(TaskHandle task, const char channel[], bool32* data);
  int32 GetAODACRefExtSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetAODACRefSrc(TaskHandle task, const char channel[], int32* data);
  int32 GetAODACRefVal(TaskHandle task, const char channel[], float64* data);
  int32 GetAODACRngHigh(TaskHandle task, const char channel[], float64* data);
  int32 GetAODACRngLow(TaskHandle task, const char channel[], float64* data);
  int32 GetAODataXferMech(TaskHandle task, const char channel[], int32* data);
  int32 GetAODataXferReqCond(TaskHandle task, const char channel[], int32* data);
  int32 GetAODevScalingCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 GetAOEnhancedImageRejectionEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAOFilterDelay(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFilterDelayAdjustment(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFilterDelayUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAOFuncGenAmplitude(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFuncGenFMDeviation(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFuncGenFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFuncGenModulationType(TaskHandle task, const char channel[], int32* data);
  int32 GetAOFuncGenOffset(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFuncGenSquareDutyCycle(TaskHandle task, const char channel[], float64* data);
  int32 GetAOFuncGenType(TaskHandle task, const char channel[], int32* data);
  int32 GetAOGain(TaskHandle task, const char channel[], float64* data);
  int32 GetAOIdleOutputBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetAOLoadImpedance(TaskHandle task, const char channel[], float64* data);
  int32 GetAOMax(TaskHandle task, const char channel[], float64* data);
  int32 GetAOMemMapEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAOMin(TaskHandle task, const char channel[], float64* data);
  int32 GetAOOutputImpedance(TaskHandle task, const char channel[], float64* data);
  int32 GetAOOutputType(TaskHandle task, const char channel[], int32* data);
  int32 GetAOReglitchEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetAOResolution(TaskHandle task, const char channel[], float64* data);
  int32 GetAOResolutionUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetAOTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetAOUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAOUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetAOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32* data);
  int32 GetAOVoltageCurrentLimit(TaskHandle task, const char channel[], float64* data);
  int32 GetAOVoltageUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetArmStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetAutoConfiguredCDAQSyncConnections(char portList[], uInt32 portListSize);
  int32 GetBufInputBufSize(TaskHandle task, uInt32* data);
  int32 GetBufInputOnbrdBufSize(TaskHandle task, uInt32* data);
  int32 GetBufOutputBufSize(TaskHandle task, uInt32* data);
  int32 GetBufOutputOnbrdBufSize(TaskHandle task, uInt32* data);
  int32 GetCIAngEncoderInitialAngle(TaskHandle task, const char channel[], float64* data);
  int32 GetCIAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIAngEncoderUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCICount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCICountEdgesActiveEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesCountDirDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesCountDirDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountDirDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountDirDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesCountDirDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesCountDirHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountDirLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesCountDirTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesCountDirThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountResetActiveEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesCountResetDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesCountResetDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountResetDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountResetDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesCountResetDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesCountResetEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesCountResetHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesCountResetLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesCountResetResetCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCICountEdgesCountResetTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesCountResetTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesCountResetThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesDir(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesDirTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesGateDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesGateDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesGateDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesGateDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesGateEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICountEdgesGateHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesGateLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesGateTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesGateTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesGateThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesGateWhen(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetCICountEdgesInitialCnt(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCICountEdgesLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICountEdgesTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCICountEdgesThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCICtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCICtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCICtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCICtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCICtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCICtrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCICtrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCICustomScaleName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIDataXferMech(TaskHandle task, const char channel[], int32* data);
  int32 GetCIDataXferReqCond(TaskHandle task, const char channel[], int32* data);
  int32 GetCIDupCountPrevent(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIDutyCycleDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIDutyCycleDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIDutyCycleDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIDutyCycleDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIDutyCycleLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIDutyCycleStartingEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIDutyCycleTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIDutyCycleTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIEncoderAInputDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderAInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIEncoderAInputTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIEncoderBInputDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderBInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIEncoderBInputTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderDecodingType(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderZIndexEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderZIndexPhase(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderZIndexVal(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderZInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderZInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderZInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIEncoderZInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIEncoderZInputDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIEncoderZInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIEncoderZInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIEncoderZInputTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFilterDelay(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFilterDelayUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFilterEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIFilterFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFilterOrder(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIFilterResponse(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFreqDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIFreqDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIFreqDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIFreqEnableAveraging(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIFreqHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFreqMeasMeth(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFreqMeasTime(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFreqStartingEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFreqTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIFreqTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIFreqThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCIFreqUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIGPSSyncMethod(TaskHandle task, const char channel[], int32* data);
  int32 GetCIGPSSyncSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCILinEncoderDistPerPulse(TaskHandle task, const char channel[], float64* data);
  int32 GetCILinEncoderInitialPos(TaskHandle task, const char channel[], float64* data);
  int32 GetCILinEncoderUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIMax(TaskHandle task, const char channel[], float64* data);
  int32 GetCIMaxMeasPeriod(TaskHandle task, const char channel[], float64* data);
  int32 GetCIMeasType(TaskHandle task, const char channel[], int32* data);
  int32 GetCIMemMapEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIMin(TaskHandle task, const char channel[], float64* data);
  int32 GetCINumPossiblyInvalidSamps(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIOutputState(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPeriodDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIPeriodEnableAveraging(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPeriodHyst(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPeriodMeasMeth(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPeriodMeasTime(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPeriodStartingEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPeriodTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPeriodTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPeriodThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPeriodUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPrescaler(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIPulseFreqDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseFreqDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseFreqStartEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseFreqTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseFreqTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseFreqUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTicksDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseTicksDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseTicksDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseTicksDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseTicksDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseTicksLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTicksStartEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTicksTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseTicksTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTimeDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseTimeDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseTimeDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseTimeDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseTimeDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseTimeLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTimeStartEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTimeTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseTimeTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseTimeUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseWidthDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseWidthDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseWidthDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIPulseWidthDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseWidthDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIPulseWidthLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseWidthStartingEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseWidthTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIPulseWidthTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIPulseWidthUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCISampClkOverrunBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCISampClkOverrunSentinelVal(TaskHandle task, const char channel[], int32* data);
  int32 GetCISemiPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCISemiPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCISemiPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCISemiPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCISemiPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCISemiPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCISemiPeriodStartingEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCISemiPeriodTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCISemiPeriodTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCISemiPeriodUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCITCReached(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIThreshVoltage(TaskHandle task, const char channel[], float64* data);
  int32 GetCITimestampInitialSeconds(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCITimestampUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepFirstDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCITwoEdgeSepFirstDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCITwoEdgeSepFirstDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCITwoEdgeSepFirstDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCITwoEdgeSepFirstDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCITwoEdgeSepFirstEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepFirstLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepFirstTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCITwoEdgeSepFirstTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepSecondDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCITwoEdgeSepSecondDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCITwoEdgeSepSecondDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCITwoEdgeSepSecondDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCITwoEdgeSepSecondDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCITwoEdgeSepSecondEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepSecondLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepSecondTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCITwoEdgeSepSecondTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCITwoEdgeSepUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIVelocityAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIVelocityAngEncoderUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCIVelocityEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIVelocityEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIVelocityEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIVelocityEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIVelocityEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityEncoderAInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIVelocityEncoderAInputTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCIVelocityEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCIVelocityEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCIVelocityEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIVelocityEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityEncoderBInputTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCIVelocityEncoderBInputTermCfg(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityEncoderDecodingType(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityLinEncoderDistPerPulse(TaskHandle task, const char channel[], float64* data);
  int32 GetCIVelocityLinEncoderUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCIVelocityMeasTime(TaskHandle task, const char channel[], float64* data);
  int32 GetCOAutoIncrCnt(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOConstrainedGenMode(TaskHandle task, const char channel[], int32* data);
  int32 GetCOCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOCtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32* data);
  int32 GetCOCtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCOCtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetCOCtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCOCtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCOCtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCOCtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOCtrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetCOCtrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCODataXferMech(TaskHandle task, const char channel[], int32* data);
  int32 GetCODataXferReqCond(TaskHandle task, const char channel[], int32* data);
  int32 GetCOEnableInitialDelayOnRetrigger(TaskHandle task, const char channel[], bool32* data);
  int32 GetCOMemMapEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetCOOutputState(TaskHandle task, const char channel[], int32* data);
  int32 GetCOOutputType(TaskHandle task, const char channel[], int32* data);
  int32 GetCOPrescaler(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOPulseDone(TaskHandle task, const char channel[], bool32* data);
  int32 GetCOPulseDutyCyc(TaskHandle task, const char channel[], float64* data);
  int32 GetCOPulseFreq(TaskHandle task, const char channel[], float64* data);
  int32 GetCOPulseFreqInitialDelay(TaskHandle task, const char channel[], float64* data);
  int32 GetCOPulseFreqUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCOPulseHighTicks(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOPulseHighTime(TaskHandle task, const char channel[], float64* data);
  int32 GetCOPulseIdleState(TaskHandle task, const char channel[], int32* data);
  int32 GetCOPulseLowTicks(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOPulseLowTime(TaskHandle task, const char channel[], float64* data);
  int32 GetCOPulseTerm(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetCOPulseTicksInitialDelay(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOPulseTimeInitialDelay(TaskHandle task, const char channel[], float64* data);
  int32 GetCOPulseTimeUnits(TaskHandle task, const char channel[], int32* data);
  int32 GetCORdyForNewVal(TaskHandle task, const char channel[], bool32* data);
  int32 GetCOUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetCOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32* data);
  int32 GetCalAccConnectionCount(const char deviceName[], uInt32* data);
  int32 GetCalDevTemp(const char deviceName[], float64* data);
  int32 GetCalRecommendedAccConnectionCountLimit(const char deviceName[], uInt32* data);
  int32 GetCalUserDefinedInfo(const char deviceName[], char data[], uInt32 bufferSize);
  int32 GetCalUserDefinedInfoMaxSize(const char deviceName[], uInt32* data);
  int32 GetChanDescr(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetChanIsGlobal(TaskHandle task, const char channel[], bool32* data);
  int32 GetChanSyncUnlockBehavior(TaskHandle task, const char channel[], int32* data);
  int32 GetChanType(TaskHandle task, const char channel[], int32* data);
  int32 GetDIAcquireOn(TaskHandle task, const char channel[], int32* data);
  int32 GetDIDataXferMech(TaskHandle task, const char channel[], int32* data);
  int32 GetDIDataXferReqCond(TaskHandle task, const char channel[], int32* data);
  int32 GetDIDigFltrEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetDIDigFltrEnableBusMode(TaskHandle task, const char channel[], bool32* data);
  int32 GetDIDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64* data);
  int32 GetDIDigFltrTimebaseRate(TaskHandle task, const char channel[], float64* data);
  int32 GetDIDigFltrTimebaseSrc(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetDIDigSyncEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetDIInvertLines(TaskHandle task, const char channel[], bool32* data);
  int32 GetDILogicFamily(TaskHandle task, const char channel[], int32* data);
  int32 GetDIMemMapEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetDINumLines(TaskHandle task, const char channel[], uInt32* data);
  int32 GetDITristate(TaskHandle task, const char channel[], bool32* data);
  int32 GetDIUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetDIUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetDODataXferMech(TaskHandle task, const char channel[], int32* data);
  int32 GetDODataXferReqCond(TaskHandle task, const char channel[], int32* data);
  int32 GetDOGenerateOn(TaskHandle task, const char channel[], int32* data);
  int32 GetDOInvertLines(TaskHandle task, const char channel[], bool32* data);
  int32 GetDOLineStatesDoneState(TaskHandle task, const char channel[], int32* data);
  int32 GetDOLineStatesPausedState(TaskHandle task, const char channel[], int32* data);
  int32 GetDOLineStatesStartState(TaskHandle task, const char channel[], int32* data);
  int32 GetDOLogicFamily(TaskHandle task, const char channel[], int32* data);
  int32 GetDOMemMapEnable(TaskHandle task, const char channel[], bool32* data);
  int32 GetDONumLines(TaskHandle task, const char channel[], uInt32* data);
  int32 GetDOOutputDriveType(TaskHandle task, const char channel[], int32* data);
  int32 GetDOOvercurrentAutoReenable(TaskHandle task, const char channel[], bool32* data);
  int32 GetDOOvercurrentLimit(TaskHandle task, const char channel[], float64* data);
  int32 GetDOOvercurrentReenablePeriod(TaskHandle task, const char channel[], float64* data);
  int32 GetDOTristate(TaskHandle task, const char channel[], bool32* data);
  int32 GetDOUsbXferReqCount(TaskHandle task, const char channel[], uInt32* data);
  int32 GetDOUsbXferReqSize(TaskHandle task, const char channel[], uInt32* data);
  int32 GetDOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32* data);
  int32 GetDigitalLogicFamilyPowerUpState(const char deviceName[], int32* logicFamily);
  int32 GetDisconnectedCDAQSyncPorts(char portList[], uInt32 portListSize);
  int32 GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize);
  int32 GetExtCalLastTemp(const char deviceName[], float64* data);
  int32 GetExtCalRecommendedInterval(const char deviceName[], uInt32* data);
  int32 GetExtendedErrorInfo(char errorString[], uInt32 bufferSize);
  int32 GetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetFirstSampTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetNthTaskReadChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  int32 GetPhysicalChanName(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  int32 GetRefTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetSelfCalLastDateAndTime(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  int32 GetSelfCalLastTemp(const char deviceName[], float64* data);
  int32 GetSelfCalSupported(const char deviceName[], bool32* data);
  int32 GetStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 GetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime* data);
  int32 IsTaskDone(TaskHandle task, bool32* isTaskDone);
  int32 LoadTask(const char sessionName[], TaskHandle* task);
  int32 ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadAnalogScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  int32 ReadBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryI32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadBinaryU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterF64Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  int32 ReadCounterScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  int32 ReadCounterU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCounterU32Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrFreq(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrFreqScalar(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved);
  int32 ReadCtrTicks(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrTicksScalar(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved);
  int32 ReadCtrTime(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadCtrTimeScalar(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved);
  int32 ReadDigitalLines(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved);
  int32 ReadDigitalScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  int32 ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadDigitalU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  int32 ReadRaw(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved);
  int32 RegisterDoneEvent(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData);
  int32 RegisterEveryNSamplesEvent(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData);
  int32 RegisterSignalEvent(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData);
  int32 RemoveCDAQSyncConnection(const char portList[]);
  int32 ReserveNetworkDevice(const char deviceName[], bool32 overrideReservation);
  int32 ResetAIACExcitFreq(TaskHandle task, const char channel[]);
  int32 ResetAIACExcitSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetAIACExcitWireMode(TaskHandle task, const char channel[]);
  int32 ResetAIADCCustomTimingMode(TaskHandle task, const char channel[]);
  int32 ResetAIADCTimingMode(TaskHandle task, const char channel[]);
  int32 ResetAIAccel4WireDCVoltageSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIAccel4WireDCVoltageSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIAccelChargeSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIAccelChargeSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIAccelSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIAccelSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIAccelUnits(TaskHandle task, const char channel[]);
  int32 ResetAIAcceldBRef(TaskHandle task, const char channel[]);
  int32 ResetAIAtten(TaskHandle task, const char channel[]);
  int32 ResetAIAutoZeroMode(TaskHandle task, const char channel[]);
  int32 ResetAIAveragingWinSize(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeBalanceCoarsePot(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeBalanceFinePot(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeCfg(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeElectricalUnits(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeInitialRatio(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeInitialVoltage(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeNomResistance(TaskHandle task, const char channel[]);
  int32 ResetAIBridgePhysicalUnits(TaskHandle task, const char channel[]);
  int32 ResetAIBridgePolyForwardCoeff(TaskHandle task, const char channel[]);
  int32 ResetAIBridgePolyReverseCoeff(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeScaleType(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalEnable(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalGainAdjust(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalSelect(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalShuntCalAActualResistance(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalShuntCalAResistance(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalShuntCalASrc(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalShuntCalBActualResistance(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeShuntCalShuntCalBResistance(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeTableElectricalVals(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeTablePhysicalVals(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeTwoPointLinFirstElectricalVal(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeTwoPointLinFirstPhysicalVal(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeTwoPointLinSecondElectricalVal(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeTwoPointLinSecondPhysicalVal(TaskHandle task, const char channel[]);
  int32 ResetAIBridgeUnits(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalApplyCalIfExp(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalDesc(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalEnableCal(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalOperatorName(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalPolyForwardCoeff(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalPolyReverseCoeff(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalScaleType(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalTablePreScaledVals(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalTableScaledVals(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalVerifAcqVals(TaskHandle task, const char channel[]);
  int32 ResetAIChanCalVerifRefVals(TaskHandle task, const char channel[]);
  int32 ResetAIChargeUnits(TaskHandle task, const char channel[]);
  int32 ResetAIChopEnable(TaskHandle task, const char channel[]);
  int32 ResetAICoupling(TaskHandle task, const char channel[]);
  int32 ResetAICurrentACRMSUnits(TaskHandle task, const char channel[]);
  int32 ResetAICurrentShuntLoc(TaskHandle task, const char channel[]);
  int32 ResetAICurrentShuntResistance(TaskHandle task, const char channel[]);
  int32 ResetAICurrentUnits(TaskHandle task, const char channel[]);
  int32 ResetAICustomScaleName(TaskHandle task, const char channel[]);
  int32 ResetAIDCOffset(TaskHandle task, const char channel[]);
  int32 ResetAIDataXferCustomThreshold(TaskHandle task, const char channel[]);
  int32 ResetAIDataXferMaxRate(TaskHandle task, const char channel[]);
  int32 ResetAIDataXferMech(TaskHandle task, const char channel[]);
  int32 ResetAIDataXferReqCond(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrBandpassCenterFreq(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrBandpassWidth(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrCoeff(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrHighpassCutoffFreq(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrLowpassCutoffFreq(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrNotchCenterFreq(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrNotchWidth(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrOrder(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrResponse(TaskHandle task, const char channel[]);
  int32 ResetAIDigFltrType(TaskHandle task, const char channel[]);
  int32 ResetAIDitherEnable(TaskHandle task, const char channel[]);
  int32 ResetAIEddyCurrentProxProbeSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIEddyCurrentProxProbeSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIEddyCurrentProxProbeUnits(TaskHandle task, const char channel[]);
  int32 ResetAIEnhancedAliasRejectionEnable(TaskHandle task, const char channel[]);
  int32 ResetAIExcitActualVal(TaskHandle task, const char channel[]);
  int32 ResetAIExcitDCorAC(TaskHandle task, const char channel[]);
  int32 ResetAIExcitIdleOutputBehavior(TaskHandle task, const char channel[]);
  int32 ResetAIExcitSense(TaskHandle task, const char channel[]);
  int32 ResetAIExcitSrc(TaskHandle task, const char channel[]);
  int32 ResetAIExcitUseForScaling(TaskHandle task, const char channel[]);
  int32 ResetAIExcitUseMultiplexed(TaskHandle task, const char channel[]);
  int32 ResetAIExcitVal(TaskHandle task, const char channel[]);
  int32 ResetAIExcitVoltageOrCurrent(TaskHandle task, const char channel[]);
  int32 ResetAIFilterDelayAdjustment(TaskHandle task, const char channel[]);
  int32 ResetAIFilterDelayUnits(TaskHandle task, const char channel[]);
  int32 ResetAIFilterEnable(TaskHandle task, const char channel[]);
  int32 ResetAIFilterFreq(TaskHandle task, const char channel[]);
  int32 ResetAIFilterOrder(TaskHandle task, const char channel[]);
  int32 ResetAIFilterResponse(TaskHandle task, const char channel[]);
  int32 ResetAIForceIEPESensorSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIForceIEPESensorSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIForceReadFromChan(TaskHandle task, const char channel[]);
  int32 ResetAIForceUnits(TaskHandle task, const char channel[]);
  int32 ResetAIFreqHyst(TaskHandle task, const char channel[]);
  int32 ResetAIFreqThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetAIFreqUnits(TaskHandle task, const char channel[]);
  int32 ResetAIGain(TaskHandle task, const char channel[]);
  int32 ResetAIImpedance(TaskHandle task, const char channel[]);
  int32 ResetAIInputLimitsFaultDetectEnable(TaskHandle task, const char channel[]);
  int32 ResetAIInputLimitsFaultDetectLowerLimit(TaskHandle task, const char channel[]);
  int32 ResetAIInputLimitsFaultDetectUpperLimit(TaskHandle task, const char channel[]);
  int32 ResetAIInputSrc(TaskHandle task, const char channel[]);
  int32 ResetAILVDTSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAILVDTSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAILVDTUnits(TaskHandle task, const char channel[]);
  int32 ResetAILeadWireResistance(TaskHandle task, const char channel[]);
  int32 ResetAILossyLSBRemovalCompressedSampSize(TaskHandle task, const char channel[]);
  int32 ResetAILowpassCutoffFreq(TaskHandle task, const char channel[]);
  int32 ResetAILowpassEnable(TaskHandle task, const char channel[]);
  int32 ResetAILowpassSwitchCapClkSrc(TaskHandle task, const char channel[]);
  int32 ResetAILowpassSwitchCapExtClkDiv(TaskHandle task, const char channel[]);
  int32 ResetAILowpassSwitchCapExtClkFreq(TaskHandle task, const char channel[]);
  int32 ResetAILowpassSwitchCapOutClkDiv(TaskHandle task, const char channel[]);
  int32 ResetAIMax(TaskHandle task, const char channel[]);
  int32 ResetAIMemMapEnable(TaskHandle task, const char channel[]);
  int32 ResetAIMicrophoneSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIMin(TaskHandle task, const char channel[]);
  int32 ResetAIOpenChanDetectEnable(TaskHandle task, const char channel[]);
  int32 ResetAIOpenThrmcplDetectEnable(TaskHandle task, const char channel[]);
  int32 ResetAIOvercurrentDetectEnable(TaskHandle task, const char channel[]);
  int32 ResetAIPowerSupplyFaultDetectEnable(TaskHandle task, const char channel[]);
  int32 ResetAIPressureUnits(TaskHandle task, const char channel[]);
  int32 ResetAIProbeAtten(TaskHandle task, const char channel[]);
  int32 ResetAIRTDA(TaskHandle task, const char channel[]);
  int32 ResetAIRTDB(TaskHandle task, const char channel[]);
  int32 ResetAIRTDC(TaskHandle task, const char channel[]);
  int32 ResetAIRTDR0(TaskHandle task, const char channel[]);
  int32 ResetAIRTDType(TaskHandle task, const char channel[]);
  int32 ResetAIRVDTSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIRVDTSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIRVDTUnits(TaskHandle task, const char channel[]);
  int32 ResetAIRawDataCompressionType(TaskHandle task, const char channel[]);
  int32 ResetAIRemoveFilterDelay(TaskHandle task, const char channel[]);
  int32 ResetAIResistanceCfg(TaskHandle task, const char channel[]);
  int32 ResetAIResistanceUnits(TaskHandle task, const char channel[]);
  int32 ResetAIRngHigh(TaskHandle task, const char channel[]);
  int32 ResetAIRngLow(TaskHandle task, const char channel[]);
  int32 ResetAIRosetteStrainGageOrientation(TaskHandle task, const char channel[]);
  int32 ResetAIRosetteStrainGageRosetteMeasType(TaskHandle task, const char channel[]);
  int32 ResetAISampAndHoldEnable(TaskHandle task, const char channel[]);
  int32 ResetAISensorPowerCfg(TaskHandle task, const char channel[]);
  int32 ResetAISensorPowerType(TaskHandle task, const char channel[]);
  int32 ResetAISensorPowerVoltage(TaskHandle task, const char channel[]);
  int32 ResetAISoundPressureMaxSoundPressureLvl(TaskHandle task, const char channel[]);
  int32 ResetAISoundPressureUnits(TaskHandle task, const char channel[]);
  int32 ResetAISoundPressuredBRef(TaskHandle task, const char channel[]);
  int32 ResetAIStrainGageCfg(TaskHandle task, const char channel[]);
  int32 ResetAIStrainGageForceReadFromChan(TaskHandle task, const char channel[]);
  int32 ResetAIStrainGageGageFactor(TaskHandle task, const char channel[]);
  int32 ResetAIStrainGagePoissonRatio(TaskHandle task, const char channel[]);
  int32 ResetAIStrainUnits(TaskHandle task, const char channel[]);
  int32 ResetAITempUnits(TaskHandle task, const char channel[]);
  int32 ResetAITermCfg(TaskHandle task, const char channel[]);
  int32 ResetAIThrmcplCJCVal(TaskHandle task, const char channel[]);
  int32 ResetAIThrmcplLeadOffsetVoltage(TaskHandle task, const char channel[]);
  int32 ResetAIThrmcplScaleType(TaskHandle task, const char channel[]);
  int32 ResetAIThrmcplType(TaskHandle task, const char channel[]);
  int32 ResetAIThrmstrA(TaskHandle task, const char channel[]);
  int32 ResetAIThrmstrB(TaskHandle task, const char channel[]);
  int32 ResetAIThrmstrC(TaskHandle task, const char channel[]);
  int32 ResetAIThrmstrR1(TaskHandle task, const char channel[]);
  int32 ResetAITorqueUnits(TaskHandle task, const char channel[]);
  int32 ResetAIUsbXferReqCount(TaskHandle task, const char channel[]);
  int32 ResetAIUsbXferReqSize(TaskHandle task, const char channel[]);
  int32 ResetAIVelocityIEPESensorSensitivity(TaskHandle task, const char channel[]);
  int32 ResetAIVelocityIEPESensorSensitivityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIVelocityIEPESensordBRef(TaskHandle task, const char channel[]);
  int32 ResetAIVelocityUnits(TaskHandle task, const char channel[]);
  int32 ResetAIVoltageACRMSUnits(TaskHandle task, const char channel[]);
  int32 ResetAIVoltageUnits(TaskHandle task, const char channel[]);
  int32 ResetAIVoltagedBRef(TaskHandle task, const char channel[]);
  int32 ResetAOCurrentUnits(TaskHandle task, const char channel[]);
  int32 ResetAOCustomScaleName(TaskHandle task, const char channel[]);
  int32 ResetAODACOffsetExtSrc(TaskHandle task, const char channel[]);
  int32 ResetAODACOffsetSrc(TaskHandle task, const char channel[]);
  int32 ResetAODACOffsetVal(TaskHandle task, const char channel[]);
  int32 ResetAODACRefAllowConnToGnd(TaskHandle task, const char channel[]);
  int32 ResetAODACRefConnToGnd(TaskHandle task, const char channel[]);
  int32 ResetAODACRefExtSrc(TaskHandle task, const char channel[]);
  int32 ResetAODACRefSrc(TaskHandle task, const char channel[]);
  int32 ResetAODACRefVal(TaskHandle task, const char channel[]);
  int32 ResetAODACRngHigh(TaskHandle task, const char channel[]);
  int32 ResetAODACRngLow(TaskHandle task, const char channel[]);
  int32 ResetAODataXferMech(TaskHandle task, const char channel[]);
  int32 ResetAODataXferReqCond(TaskHandle task, const char channel[]);
  int32 ResetAOEnhancedImageRejectionEnable(TaskHandle task, const char channel[]);
  int32 ResetAOFilterDelay(TaskHandle task, const char channel[]);
  int32 ResetAOFilterDelayAdjustment(TaskHandle task, const char channel[]);
  int32 ResetAOFilterDelayUnits(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenAmplitude(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenFMDeviation(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenFreq(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenModulationType(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenOffset(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenSquareDutyCycle(TaskHandle task, const char channel[]);
  int32 ResetAOFuncGenType(TaskHandle task, const char channel[]);
  int32 ResetAOGain(TaskHandle task, const char channel[]);
  int32 ResetAOIdleOutputBehavior(TaskHandle task, const char channel[]);
  int32 ResetAOLoadImpedance(TaskHandle task, const char channel[]);
  int32 ResetAOMax(TaskHandle task, const char channel[]);
  int32 ResetAOMemMapEnable(TaskHandle task, const char channel[]);
  int32 ResetAOMin(TaskHandle task, const char channel[]);
  int32 ResetAOOutputImpedance(TaskHandle task, const char channel[]);
  int32 ResetAOReglitchEnable(TaskHandle task, const char channel[]);
  int32 ResetAOResolutionUnits(TaskHandle task, const char channel[]);
  int32 ResetAOTermCfg(TaskHandle task, const char channel[]);
  int32 ResetAOUsbXferReqCount(TaskHandle task, const char channel[]);
  int32 ResetAOUsbXferReqSize(TaskHandle task, const char channel[]);
  int32 ResetAOUseOnlyOnBrdMem(TaskHandle task, const char channel[]);
  int32 ResetAOVoltageCurrentLimit(TaskHandle task, const char channel[]);
  int32 ResetAOVoltageUnits(TaskHandle task, const char channel[]);
  int32 ResetBufInputBufSize(TaskHandle task);
  int32 ResetBufOutputBufSize(TaskHandle task);
  int32 ResetBufOutputOnbrdBufSize(TaskHandle task);
  int32 ResetCIAngEncoderInitialAngle(TaskHandle task, const char channel[]);
  int32 ResetCIAngEncoderPulsesPerRev(TaskHandle task, const char channel[]);
  int32 ResetCIAngEncoderUnits(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesActiveEdge(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirHyst(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountDirThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetActiveEdge(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetHyst(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetResetCount(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetTerm(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesCountResetThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDir(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesDirTerm(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateEnable(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateHyst(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateTerm(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesGateWhen(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesHyst(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesInitialCnt(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesTerm(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCICountEdgesThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseActiveEdge(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCICtrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCICustomScaleName(TaskHandle task, const char channel[]);
  int32 ResetCIDataXferMech(TaskHandle task, const char channel[]);
  int32 ResetCIDataXferReqCond(TaskHandle task, const char channel[]);
  int32 ResetCIDupCountPrevent(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleStartingEdge(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleTerm(TaskHandle task, const char channel[]);
  int32 ResetCIDutyCycleTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputTerm(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderAInputTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputTerm(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderBInputTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderDecodingType(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZIndexEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZIndexPhase(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZIndexVal(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputTerm(TaskHandle task, const char channel[]);
  int32 ResetCIEncoderZInputTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIFilterDelayUnits(TaskHandle task, const char channel[]);
  int32 ResetCIFilterEnable(TaskHandle task, const char channel[]);
  int32 ResetCIFilterFreq(TaskHandle task, const char channel[]);
  int32 ResetCIFilterOrder(TaskHandle task, const char channel[]);
  int32 ResetCIFilterResponse(TaskHandle task, const char channel[]);
  int32 ResetCIFreqDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIFreqDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIFreqDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIFreqDiv(TaskHandle task, const char channel[]);
  int32 ResetCIFreqEnableAveraging(TaskHandle task, const char channel[]);
  int32 ResetCIFreqHyst(TaskHandle task, const char channel[]);
  int32 ResetCIFreqLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIFreqMeasMeth(TaskHandle task, const char channel[]);
  int32 ResetCIFreqMeasTime(TaskHandle task, const char channel[]);
  int32 ResetCIFreqStartingEdge(TaskHandle task, const char channel[]);
  int32 ResetCIFreqTerm(TaskHandle task, const char channel[]);
  int32 ResetCIFreqTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIFreqThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCIFreqUnits(TaskHandle task, const char channel[]);
  int32 ResetCIGPSSyncMethod(TaskHandle task, const char channel[]);
  int32 ResetCIGPSSyncSrc(TaskHandle task, const char channel[]);
  int32 ResetCILinEncoderDistPerPulse(TaskHandle task, const char channel[]);
  int32 ResetCILinEncoderInitialPos(TaskHandle task, const char channel[]);
  int32 ResetCILinEncoderUnits(TaskHandle task, const char channel[]);
  int32 ResetCIMax(TaskHandle task, const char channel[]);
  int32 ResetCIMaxMeasPeriod(TaskHandle task, const char channel[]);
  int32 ResetCIMemMapEnable(TaskHandle task, const char channel[]);
  int32 ResetCIMin(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodDiv(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodEnableAveraging(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodHyst(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodMeasMeth(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodMeasTime(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodStartingEdge(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodTerm(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCIPeriodUnits(TaskHandle task, const char channel[]);
  int32 ResetCIPrescaler(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqStartEdge(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqTerm(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIPulseFreqUnits(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksStartEdge(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksTerm(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTicksTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeStartEdge(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeTerm(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIPulseTimeUnits(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthStartingEdge(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthTerm(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIPulseWidthUnits(TaskHandle task, const char channel[]);
  int32 ResetCISampClkOverrunBehavior(TaskHandle task, const char channel[]);
  int32 ResetCISampClkOverrunSentinelVal(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodStartingEdge(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodTerm(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCISemiPeriodUnits(TaskHandle task, const char channel[]);
  int32 ResetCIThreshVoltage(TaskHandle task, const char channel[]);
  int32 ResetCITimestampInitialSeconds(TaskHandle task, const char channel[]);
  int32 ResetCITimestampUnits(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstEdge(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstTerm(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepFirstTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondEdge(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondTerm(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepSecondTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCITwoEdgeSepUnits(TaskHandle task, const char channel[]);
  int32 ResetCIUsbXferReqCount(TaskHandle task, const char channel[]);
  int32 ResetCIUsbXferReqSize(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityAngEncoderPulsesPerRev(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityAngEncoderUnits(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityDiv(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputTerm(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderAInputTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputTerm(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderBInputTermCfg(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityEncoderDecodingType(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityLinEncoderDistPerPulse(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityLinEncoderUnits(TaskHandle task, const char channel[]);
  int32 ResetCIVelocityMeasTime(TaskHandle task, const char channel[]);
  int32 ResetCOAutoIncrCnt(TaskHandle task, const char channel[]);
  int32 ResetCOConstrainedGenMode(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseActiveEdge(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetCOCtrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetCODataXferMech(TaskHandle task, const char channel[]);
  int32 ResetCODataXferReqCond(TaskHandle task, const char channel[]);
  int32 ResetCOEnableInitialDelayOnRetrigger(TaskHandle task, const char channel[]);
  int32 ResetCOMemMapEnable(TaskHandle task, const char channel[]);
  int32 ResetCOPrescaler(TaskHandle task, const char channel[]);
  int32 ResetCOPulseDutyCyc(TaskHandle task, const char channel[]);
  int32 ResetCOPulseFreq(TaskHandle task, const char channel[]);
  int32 ResetCOPulseFreqInitialDelay(TaskHandle task, const char channel[]);
  int32 ResetCOPulseFreqUnits(TaskHandle task, const char channel[]);
  int32 ResetCOPulseHighTicks(TaskHandle task, const char channel[]);
  int32 ResetCOPulseHighTime(TaskHandle task, const char channel[]);
  int32 ResetCOPulseIdleState(TaskHandle task, const char channel[]);
  int32 ResetCOPulseLowTicks(TaskHandle task, const char channel[]);
  int32 ResetCOPulseLowTime(TaskHandle task, const char channel[]);
  int32 ResetCOPulseTerm(TaskHandle task, const char channel[]);
  int32 ResetCOPulseTicksInitialDelay(TaskHandle task, const char channel[]);
  int32 ResetCOPulseTimeInitialDelay(TaskHandle task, const char channel[]);
  int32 ResetCOPulseTimeUnits(TaskHandle task, const char channel[]);
  int32 ResetCOUsbXferReqCount(TaskHandle task, const char channel[]);
  int32 ResetCOUsbXferReqSize(TaskHandle task, const char channel[]);
  int32 ResetCOUseOnlyOnBrdMem(TaskHandle task, const char channel[]);
  int32 ResetChanDescr(TaskHandle task, const char channel[]);
  int32 ResetChanSyncUnlockBehavior(TaskHandle task, const char channel[]);
  int32 ResetDIAcquireOn(TaskHandle task, const char channel[]);
  int32 ResetDIDataXferMech(TaskHandle task, const char channel[]);
  int32 ResetDIDataXferReqCond(TaskHandle task, const char channel[]);
  int32 ResetDIDigFltrEnable(TaskHandle task, const char channel[]);
  int32 ResetDIDigFltrEnableBusMode(TaskHandle task, const char channel[]);
  int32 ResetDIDigFltrMinPulseWidth(TaskHandle task, const char channel[]);
  int32 ResetDIDigFltrTimebaseRate(TaskHandle task, const char channel[]);
  int32 ResetDIDigFltrTimebaseSrc(TaskHandle task, const char channel[]);
  int32 ResetDIDigSyncEnable(TaskHandle task, const char channel[]);
  int32 ResetDIInvertLines(TaskHandle task, const char channel[]);
  int32 ResetDILogicFamily(TaskHandle task, const char channel[]);
  int32 ResetDIMemMapEnable(TaskHandle task, const char channel[]);
  int32 ResetDITristate(TaskHandle task, const char channel[]);
  int32 ResetDIUsbXferReqCount(TaskHandle task, const char channel[]);
  int32 ResetDIUsbXferReqSize(TaskHandle task, const char channel[]);
  int32 ResetDODataXferMech(TaskHandle task, const char channel[]);
  int32 ResetDODataXferReqCond(TaskHandle task, const char channel[]);
  int32 ResetDOGenerateOn(TaskHandle task, const char channel[]);
  int32 ResetDOInvertLines(TaskHandle task, const char channel[]);
  int32 ResetDOLineStatesDoneState(TaskHandle task, const char channel[]);
  int32 ResetDOLineStatesPausedState(TaskHandle task, const char channel[]);
  int32 ResetDOLineStatesStartState(TaskHandle task, const char channel[]);
  int32 ResetDOLogicFamily(TaskHandle task, const char channel[]);
  int32 ResetDOMemMapEnable(TaskHandle task, const char channel[]);
  int32 ResetDOOutputDriveType(TaskHandle task, const char channel[]);
  int32 ResetDOOvercurrentAutoReenable(TaskHandle task, const char channel[]);
  int32 ResetDOOvercurrentLimit(TaskHandle task, const char channel[]);
  int32 ResetDOOvercurrentReenablePeriod(TaskHandle task, const char channel[]);
  int32 ResetDOTristate(TaskHandle task, const char channel[]);
  int32 ResetDOUsbXferReqCount(TaskHandle task, const char channel[]);
  int32 ResetDOUsbXferReqSize(TaskHandle task, const char channel[]);
  int32 ResetDOUseOnlyOnBrdMem(TaskHandle task, const char channel[]);
  int32 ResetDevice(const char deviceName[]);
  int32 SaveGlobalChan(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options);
  int32 SaveScale(const char scaleName[], const char saveAs[], const char author[], uInt32 options);
  int32 SaveTask(TaskHandle task, const char saveAs[], const char author[], uInt32 options);
  int32 SelfCal(const char deviceName[]);
  int32 SelfTestDevice(const char deviceName[]);
  int32 SetAIACExcitFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAIACExcitSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIACExcitWireMode(TaskHandle task, const char channel[], int32 data);
  int32 SetAIADCCustomTimingMode(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIADCTimingMode(TaskHandle task, const char channel[], int32 data);
  int32 SetAIAccel4WireDCVoltageSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIAccel4WireDCVoltageSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIAccelChargeSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIAccelChargeSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIAccelSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIAccelSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIAccelUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIAcceldBRef(TaskHandle task, const char channel[], float64 data);
  int32 SetAIAtten(TaskHandle task, const char channel[], float64 data);
  int32 SetAIAutoZeroMode(TaskHandle task, const char channel[], int32 data);
  int32 SetAIAveragingWinSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIBridgeBalanceCoarsePot(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeBalanceFinePot(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeElectricalUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeInitialRatio(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeInitialVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeNomResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgePhysicalUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgePolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIBridgePolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIBridgeScaleType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeShuntCalEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIBridgeShuntCalGainAdjust(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeShuntCalSelect(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeShuntCalShuntCalAActualResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeShuntCalShuntCalAResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeShuntCalShuntCalASrc(TaskHandle task, const char channel[], int32 data);
  int32 SetAIBridgeShuntCalShuntCalBActualResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeShuntCalShuntCalBResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeTableElectricalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIBridgeTablePhysicalVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIBridgeTwoPointLinFirstElectricalVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeTwoPointLinFirstPhysicalVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeTwoPointLinSecondElectricalVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeTwoPointLinSecondPhysicalVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIBridgeUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIChanCalApplyCalIfExp(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  int32 SetAIChanCalDesc(TaskHandle task, const char channel[], const char data[]);
  int32 SetAIChanCalEnableCal(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  int32 SetAIChanCalOperatorName(TaskHandle task, const char channel[], const char data[]);
  int32 SetAIChanCalPolyForwardCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIChanCalPolyReverseCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIChanCalScaleType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIChanCalTablePreScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIChanCalTableScaledVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIChanCalVerifAcqVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIChanCalVerifRefVals(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIChargeUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIChopEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAICoupling(TaskHandle task, const char channel[], int32 data);
  int32 SetAICurrentACRMSUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAICurrentShuntLoc(TaskHandle task, const char channel[], int32 data);
  int32 SetAICurrentShuntResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAICurrentUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAICustomScaleName(TaskHandle task, const char channel[], const char data[]);
  int32 SetAIDCOffset(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDataXferCustomThreshold(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIDataXferMaxRate(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDataXferMech(TaskHandle task, const char channel[], int32 data);
  int32 SetAIDataXferReqCond(TaskHandle task, const char channel[], int32 data);
  int32 SetAIDigFltrBandpassCenterFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDigFltrBandpassWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDigFltrCoeff(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  int32 SetAIDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIDigFltrHighpassCutoffFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDigFltrLowpassCutoffFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDigFltrNotchCenterFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDigFltrNotchWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetAIDigFltrOrder(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIDigFltrResponse(TaskHandle task, const char channel[], int32 data);
  int32 SetAIDigFltrType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIDitherEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIEddyCurrentProxProbeSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIEddyCurrentProxProbeSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIEddyCurrentProxProbeUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIEnhancedAliasRejectionEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIExcitActualVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIExcitDCorAC(TaskHandle task, const char channel[], int32 data);
  int32 SetAIExcitIdleOutputBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetAIExcitSense(TaskHandle task, const char channel[], int32 data);
  int32 SetAIExcitSrc(TaskHandle task, const char channel[], int32 data);
  int32 SetAIExcitUseForScaling(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIExcitUseMultiplexed(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIExcitVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIExcitVoltageOrCurrent(TaskHandle task, const char channel[], int32 data);
  int32 SetAIFilterDelayAdjustment(TaskHandle task, const char channel[], float64 data);
  int32 SetAIFilterDelayUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIFilterEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIFilterFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAIFilterOrder(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIFilterResponse(TaskHandle task, const char channel[], int32 data);
  int32 SetAIForceIEPESensorSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIForceIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIForceReadFromChan(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIForceUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIFreqHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetAIFreqThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetAIFreqUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIGain(TaskHandle task, const char channel[], float64 data);
  int32 SetAIInputLimitsFaultDetectEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIInputLimitsFaultDetectLowerLimit(TaskHandle task, const char channel[], float64 data);
  int32 SetAIInputLimitsFaultDetectUpperLimit(TaskHandle task, const char channel[], float64 data);
  int32 SetAIInputSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetAILVDTSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAILVDTSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAILVDTUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAILeadWireResistance(TaskHandle task, const char channel[], float64 data);
  int32 SetAILossyLSBRemovalCompressedSampSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAILowpassCutoffFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAILowpassEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAILowpassSwitchCapClkSrc(TaskHandle task, const char channel[], int32 data);
  int32 SetAILowpassSwitchCapExtClkDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAILowpassSwitchCapExtClkFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAILowpassSwitchCapOutClkDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIMax(TaskHandle task, const char channel[], float64 data);
  int32 SetAIMemMapEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIMicrophoneSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIMin(TaskHandle task, const char channel[], float64 data);
  int32 SetAIOpenChanDetectEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIOpenThrmcplDetectEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIOvercurrentDetectEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIPowerSupplyFaultDetectEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIPressureUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIProbeAtten(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRTDA(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRTDB(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRTDC(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRTDR0(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRTDType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIRVDTSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRVDTSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIRVDTUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIRawDataCompressionType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIRemoveFilterDelay(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIResistanceCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetAIResistanceUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIRngHigh(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRngLow(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRosetteStrainGageOrientation(TaskHandle task, const char channel[], float64 data);
  int32 SetAIRosetteStrainGageRosetteMeasType(TaskHandle task, const char channel[], int32 data);
  int32 SetAISampAndHoldEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAISensorPowerCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetAISensorPowerType(TaskHandle task, const char channel[], int32 data);
  int32 SetAISensorPowerVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetAISoundPressureMaxSoundPressureLvl(TaskHandle task, const char channel[], float64 data);
  int32 SetAISoundPressureUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAISoundPressuredBRef(TaskHandle task, const char channel[], float64 data);
  int32 SetAIStrainGageCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetAIStrainGageForceReadFromChan(TaskHandle task, const char channel[], bool32 data);
  int32 SetAIStrainGageGageFactor(TaskHandle task, const char channel[], float64 data);
  int32 SetAIStrainGagePoissonRatio(TaskHandle task, const char channel[], float64 data);
  int32 SetAIStrainUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAITempUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAITermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetAIThrmcplCJCVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAIThrmcplLeadOffsetVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetAIThrmcplScaleType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIThrmcplType(TaskHandle task, const char channel[], int32 data);
  int32 SetAIThrmstrA(TaskHandle task, const char channel[], float64 data);
  int32 SetAIThrmstrB(TaskHandle task, const char channel[], float64 data);
  int32 SetAIThrmstrC(TaskHandle task, const char channel[], float64 data);
  int32 SetAIThrmstrR1(TaskHandle task, const char channel[], float64 data);
  int32 SetAITorqueUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAIVelocityIEPESensorSensitivity(TaskHandle task, const char channel[], float64 data);
  int32 SetAIVelocityIEPESensorSensitivityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIVelocityIEPESensordBRef(TaskHandle task, const char channel[], float64 data);
  int32 SetAIVelocityUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIVoltageACRMSUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIVoltageUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAIVoltagedBRef(TaskHandle task, const char channel[], float64 data);
  int32 SetAOCurrentUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAOCustomScaleName(TaskHandle task, const char channel[], const char data[]);
  int32 SetAODACOffsetExtSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetAODACOffsetSrc(TaskHandle task, const char channel[], int32 data);
  int32 SetAODACOffsetVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAODACRefAllowConnToGnd(TaskHandle task, const char channel[], bool32 data);
  int32 SetAODACRefConnToGnd(TaskHandle task, const char channel[], bool32 data);
  int32 SetAODACRefExtSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetAODACRefSrc(TaskHandle task, const char channel[], int32 data);
  int32 SetAODACRefVal(TaskHandle task, const char channel[], float64 data);
  int32 SetAODACRngHigh(TaskHandle task, const char channel[], float64 data);
  int32 SetAODACRngLow(TaskHandle task, const char channel[], float64 data);
  int32 SetAODataXferMech(TaskHandle task, const char channel[], int32 data);
  int32 SetAODataXferReqCond(TaskHandle task, const char channel[], int32 data);
  int32 SetAOEnhancedImageRejectionEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAOFilterDelay(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFilterDelayAdjustment(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFilterDelayUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAOFuncGenAmplitude(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFuncGenFMDeviation(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFuncGenFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFuncGenModulationType(TaskHandle task, const char channel[], int32 data);
  int32 SetAOFuncGenOffset(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFuncGenSquareDutyCycle(TaskHandle task, const char channel[], float64 data);
  int32 SetAOFuncGenType(TaskHandle task, const char channel[], int32 data);
  int32 SetAOGain(TaskHandle task, const char channel[], float64 data);
  int32 SetAOIdleOutputBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetAOLoadImpedance(TaskHandle task, const char channel[], float64 data);
  int32 SetAOMax(TaskHandle task, const char channel[], float64 data);
  int32 SetAOMemMapEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAOMin(TaskHandle task, const char channel[], float64 data);
  int32 SetAOOutputImpedance(TaskHandle task, const char channel[], float64 data);
  int32 SetAOReglitchEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetAOResolutionUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetAOTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetAOUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAOUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetAOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32 data);
  int32 SetAOVoltageCurrentLimit(TaskHandle task, const char channel[], float64 data);
  int32 SetAOVoltageUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetBufInputBufSize(TaskHandle task, uInt32 data);
  int32 SetBufOutputBufSize(TaskHandle task, uInt32 data);
  int32 SetBufOutputOnbrdBufSize(TaskHandle task, uInt32 data);
  int32 SetCIAngEncoderInitialAngle(TaskHandle task, const char channel[], float64 data);
  int32 SetCIAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIAngEncoderUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesActiveEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesCountDirDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesCountDirDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountDirDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountDirDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesCountDirDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesCountDirHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountDirLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesCountDirTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesCountDirThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountResetActiveEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesCountResetDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesCountResetDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountResetDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountResetDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesCountResetDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesCountResetEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesCountResetHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesCountResetLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesCountResetResetCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCICountEdgesCountResetTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesCountResetTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesCountResetThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesDir(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesDirTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesGateDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesGateDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesGateDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesGateDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesGateEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICountEdgesGateHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesGateLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesGateTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesGateTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesGateThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesGateWhen(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetCICountEdgesInitialCnt(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCICountEdgesLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICountEdgesTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCICountEdgesThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCICtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCICtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCICtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCICtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCICtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCICtrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCICtrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCICustomScaleName(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIDataXferMech(TaskHandle task, const char channel[], int32 data);
  int32 SetCIDataXferReqCond(TaskHandle task, const char channel[], int32 data);
  int32 SetCIDupCountPrevent(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIDutyCycleDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIDutyCycleDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIDutyCycleDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIDutyCycleDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIDutyCycleLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIDutyCycleStartingEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIDutyCycleTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIDutyCycleTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIEncoderAInputDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderAInputTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIEncoderAInputTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIEncoderBInputDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderBInputTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIEncoderBInputTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderDecodingType(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderZIndexEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderZIndexPhase(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderZIndexVal(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderZInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderZInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderZInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIEncoderZInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIEncoderZInputDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIEncoderZInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIEncoderZInputTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIEncoderZInputTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFilterDelayUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFilterEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIFilterFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetCIFilterOrder(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIFilterResponse(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFreqDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIFreqDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIFreqDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIFreqEnableAveraging(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIFreqHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetCIFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFreqMeasMeth(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFreqMeasTime(TaskHandle task, const char channel[], float64 data);
  int32 SetCIFreqStartingEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFreqTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIFreqTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIFreqThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCIFreqUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIGPSSyncMethod(TaskHandle task, const char channel[], int32 data);
  int32 SetCIGPSSyncSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCILinEncoderDistPerPulse(TaskHandle task, const char channel[], float64 data);
  int32 SetCILinEncoderInitialPos(TaskHandle task, const char channel[], float64 data);
  int32 SetCILinEncoderUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIMax(TaskHandle task, const char channel[], float64 data);
  int32 SetCIMaxMeasPeriod(TaskHandle task, const char channel[], float64 data);
  int32 SetCIMemMapEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIMin(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPeriodDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIPeriodEnableAveraging(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPeriodHyst(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPeriodMeasMeth(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPeriodMeasTime(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPeriodStartingEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPeriodTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPeriodTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPeriodThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPeriodUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPrescaler(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIPulseFreqDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseFreqDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseFreqDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseFreqDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseFreqDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseFreqLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseFreqStartEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseFreqTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseFreqTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseFreqUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTicksDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseTicksDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseTicksDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseTicksDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseTicksDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseTicksLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTicksStartEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTicksTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseTicksTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTimeDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseTimeDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseTimeDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseTimeDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseTimeDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseTimeLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTimeStartEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTimeTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseTimeTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseTimeUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseWidthDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseWidthDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseWidthDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIPulseWidthDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseWidthDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIPulseWidthLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseWidthStartingEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseWidthTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIPulseWidthTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIPulseWidthUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCISampClkOverrunBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCISampClkOverrunSentinelVal(TaskHandle task, const char channel[], int32 data);
  int32 SetCISemiPeriodDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCISemiPeriodDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCISemiPeriodDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCISemiPeriodDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCISemiPeriodDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCISemiPeriodLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCISemiPeriodStartingEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCISemiPeriodTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCISemiPeriodTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCISemiPeriodUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIThreshVoltage(TaskHandle task, const char channel[], float64 data);
  int32 SetCITimestampInitialSeconds(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCITimestampUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepFirstDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCITwoEdgeSepFirstDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCITwoEdgeSepFirstDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCITwoEdgeSepFirstDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCITwoEdgeSepFirstDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCITwoEdgeSepFirstEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepFirstLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepFirstTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCITwoEdgeSepFirstTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepSecondDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCITwoEdgeSepSecondDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCITwoEdgeSepSecondDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCITwoEdgeSepSecondDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCITwoEdgeSepSecondDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCITwoEdgeSepSecondEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepSecondLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepSecondTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCITwoEdgeSepSecondTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCITwoEdgeSepUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIVelocityAngEncoderPulsesPerRev(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIVelocityAngEncoderUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCIVelocityEncoderAInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIVelocityEncoderAInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIVelocityEncoderAInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIVelocityEncoderAInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIVelocityEncoderAInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityEncoderAInputTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIVelocityEncoderAInputTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityEncoderBInputDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCIVelocityEncoderBInputDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCIVelocityEncoderBInputDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCIVelocityEncoderBInputDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIVelocityEncoderBInputLogicLvlBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityEncoderBInputTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCIVelocityEncoderBInputTermCfg(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityEncoderDecodingType(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityLinEncoderDistPerPulse(TaskHandle task, const char channel[], float64 data);
  int32 SetCIVelocityLinEncoderUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCIVelocityMeasTime(TaskHandle task, const char channel[], float64 data);
  int32 SetCOAutoIncrCnt(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOConstrainedGenMode(TaskHandle task, const char channel[], int32 data);
  int32 SetCOCtrTimebaseActiveEdge(TaskHandle task, const char channel[], int32 data);
  int32 SetCOCtrTimebaseDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCOCtrTimebaseDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetCOCtrTimebaseDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCOCtrTimebaseDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCOCtrTimebaseDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCOCtrTimebaseMasterTimebaseDiv(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOCtrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetCOCtrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetCODataXferMech(TaskHandle task, const char channel[], int32 data);
  int32 SetCODataXferReqCond(TaskHandle task, const char channel[], int32 data);
  int32 SetCOEnableInitialDelayOnRetrigger(TaskHandle task, const char channel[], bool32 data);
  int32 SetCOMemMapEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetCOPrescaler(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOPulseDutyCyc(TaskHandle task, const char channel[], float64 data);
  int32 SetCOPulseFreq(TaskHandle task, const char channel[], float64 data);
  int32 SetCOPulseFreqInitialDelay(TaskHandle task, const char channel[], float64 data);
  int32 SetCOPulseFreqUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCOPulseHighTicks(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOPulseHighTime(TaskHandle task, const char channel[], float64 data);
  int32 SetCOPulseIdleState(TaskHandle task, const char channel[], int32 data);
  int32 SetCOPulseLowTicks(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOPulseLowTime(TaskHandle task, const char channel[], float64 data);
  int32 SetCOPulseTerm(TaskHandle task, const char channel[], const char data[]);
  int32 SetCOPulseTicksInitialDelay(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOPulseTimeInitialDelay(TaskHandle task, const char channel[], float64 data);
  int32 SetCOPulseTimeUnits(TaskHandle task, const char channel[], int32 data);
  int32 SetCOUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetCOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32 data);
  int32 SetCalAccConnectionCount(const char deviceName[], uInt32 data);
  int32 SetCalUserDefinedInfo(const char deviceName[], const char data[]);
  int32 SetChanDescr(TaskHandle task, const char channel[], const char data[]);
  int32 SetChanSyncUnlockBehavior(TaskHandle task, const char channel[], int32 data);
  int32 SetDIAcquireOn(TaskHandle task, const char channel[], int32 data);
  int32 SetDIDataXferMech(TaskHandle task, const char channel[], int32 data);
  int32 SetDIDataXferReqCond(TaskHandle task, const char channel[], int32 data);
  int32 SetDIDigFltrEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetDIDigFltrEnableBusMode(TaskHandle task, const char channel[], bool32 data);
  int32 SetDIDigFltrMinPulseWidth(TaskHandle task, const char channel[], float64 data);
  int32 SetDIDigFltrTimebaseRate(TaskHandle task, const char channel[], float64 data);
  int32 SetDIDigFltrTimebaseSrc(TaskHandle task, const char channel[], const char data[]);
  int32 SetDIDigSyncEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetDIInvertLines(TaskHandle task, const char channel[], bool32 data);
  int32 SetDILogicFamily(TaskHandle task, const char channel[], int32 data);
  int32 SetDIMemMapEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetDITristate(TaskHandle task, const char channel[], bool32 data);
  int32 SetDIUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetDIUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetDODataXferMech(TaskHandle task, const char channel[], int32 data);
  int32 SetDODataXferReqCond(TaskHandle task, const char channel[], int32 data);
  int32 SetDOGenerateOn(TaskHandle task, const char channel[], int32 data);
  int32 SetDOInvertLines(TaskHandle task, const char channel[], bool32 data);
  int32 SetDOLineStatesDoneState(TaskHandle task, const char channel[], int32 data);
  int32 SetDOLineStatesPausedState(TaskHandle task, const char channel[], int32 data);
  int32 SetDOLineStatesStartState(TaskHandle task, const char channel[], int32 data);
  int32 SetDOLogicFamily(TaskHandle task, const char channel[], int32 data);
  int32 SetDOMemMapEnable(TaskHandle task, const char channel[], bool32 data);
  int32 SetDOOutputDriveType(TaskHandle task, const char channel[], int32 data);
  int32 SetDOOvercurrentAutoReenable(TaskHandle task, const char channel[], bool32 data);
  int32 SetDOOvercurrentLimit(TaskHandle task, const char channel[], float64 data);
  int32 SetDOOvercurrentReenablePeriod(TaskHandle task, const char channel[], float64 data);
  int32 SetDOTristate(TaskHandle task, const char channel[], bool32 data);
  int32 SetDOUsbXferReqCount(TaskHandle task, const char channel[], uInt32 data);
  int32 SetDOUsbXferReqSize(TaskHandle task, const char channel[], uInt32 data);
  int32 SetDOUseOnlyOnBrdMem(TaskHandle task, const char channel[], bool32 data);
  int32 SetDigitalLogicFamilyPowerUpState(const char deviceName[], int32 logicFamily);
  int32 SetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetPhysicalChanName(TaskHandle task, const char channel[], const char data[]);
  int32 SetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 SetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime data);
  int32 StartNewFile(TaskHandle task, const char filePath[]);
  int32 StartTask(TaskHandle task);
  int32 StopTask(TaskHandle task);
  int32 TaskControl(TaskHandle task, int32 action);
  int32 TristateOutputTerm(const char outputTerminal[]);
  int32 UnreserveNetworkDevice(const char deviceName[]);
  int32 WaitForNextSampleClock(TaskHandle task, float64 timeout, bool32* isLate);
  int32 WaitForValidTimestamp(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp);
  int32 WaitUntilTaskDone(TaskHandle task, float64 timeToWait);
  int32 WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteAnalogScalarF64(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved);
  int32 WriteBinaryI16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryI32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteBinaryU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteCtrFreq(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrFreqScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved);
  int32 WriteCtrTicks(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrTicksScalar(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved);
  int32 WriteCtrTime(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved);
  int32 WriteCtrTimeScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved);
  int32 WriteDigitalLines(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalScalarU32(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved);
  int32 WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteRaw(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  int32 WriteToTEDSFromArray(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions);
  int32 WriteToTEDSFromFile(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions);

 private:
  using AddCDAQSyncConnectionPtr = int32 (*)(const char portList[]);
  using AddGlobalChansToTaskPtr = int32 (*)(TaskHandle task, const char channelNames[]);
  using AddNetworkDevicePtr = int32 (*)(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize);
  using AreConfiguredCDAQSyncPortsDisconnectedPtr = int32 (*)(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist);
  using AutoConfigureCDAQSyncConnectionsPtr = int32 (*)(const char chassisDevicesPorts[], float64 timeout);
  using CalculateReversePolyCoeffPtr = int32 (*)(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[]);
  using CfgAnlgEdgeRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples);
  using CfgAnlgEdgeStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel);
  using CfgAnlgMultiEdgeRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSources[], int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize);
  using CfgAnlgMultiEdgeStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSources[], int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize);
  using CfgAnlgWindowRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples);
  using CfgAnlgWindowStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom);
  using CfgBurstHandshakingTimingExportClockPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel);
  using CfgBurstHandshakingTimingImportClockPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel);
  using CfgChangeDetectionTimingPtr = int32 (*)(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan);
  using CfgDigEdgeRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples);
  using CfgDigEdgeStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], int32 triggerEdge);
  using CfgDigPatternRefTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples);
  using CfgDigPatternStartTrigPtr = int32 (*)(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen);
  using CfgHandshakingTimingPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  using CfgImplicitTimingPtr = int32 (*)(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan);
  using CfgInputBufferPtr = int32 (*)(TaskHandle task, uInt32 numSampsPerChan);
  using CfgOutputBufferPtr = int32 (*)(TaskHandle task, uInt32 numSampsPerChan);
  using CfgPipelinedSampClkTimingPtr = int32 (*)(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  using CfgSampClkTimingPtr = int32 (*)(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan);
  using CfgTimeStartTrigPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime when, int32 timescale);
  using CfgWatchdogAOExpirStatesPtr = int32 (*)(TaskHandle task, const char channelNames[], const float64 expirStateArray[], int32 outputTypeArray[], uInt32 arraySize);
  using CfgWatchdogCOExpirStatesPtr = int32 (*)(TaskHandle task, const char channelNames[], int32 expirStateArray[], uInt32 arraySize);
  using CfgWatchdogDOExpirStatesPtr = int32 (*)(TaskHandle task, const char channelNames[], int32 expirStateArray[], uInt32 arraySize);
  using ClearTEDSPtr = int32 (*)(const char physicalChannel[]);
  using ClearTaskPtr = int32 (*)(TaskHandle task);
  using ConfigureLoggingPtr = int32 (*)(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation);
  using ConfigureTEDSPtr = int32 (*)(const char physicalChannel[], const char filePath[]);
  using ConnectTermsPtr = int32 (*)(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers);
  using ControlWatchdogTaskPtr = int32 (*)(TaskHandle task, int32 action);
  using CreateAIAccel4WireDCVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  using CreateAIAccelChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIAccelChargeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  using CreateAIBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[]);
  using CreateAIChargeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAICurrentChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  using CreateAICurrentRMSChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  using CreateAIForceBridgePolynomialChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  using CreateAIForceBridgeTableChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  using CreateAIForceBridgeTwoPointLinChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  using CreateAIForceIEPEChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIFreqVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[]);
  using CreateAIMicrophoneChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIPosEddyCurrProxProbeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[]);
  using CreateAIPosLVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateAIPosRVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateAIPressureBridgePolynomialChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  using CreateAIPressureBridgeTableChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  using CreateAIPressureBridgeTwoPointLinChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  using CreateAIRTDChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0);
  using CreateAIResistanceChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIRosetteStrainGageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance);
  using CreateAIStrainGageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[]);
  using CreateAITempBuiltInSensorChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units);
  using CreateAIThrmcplChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  using CreateAIThrmstrChanIexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c);
  using CreateAIThrmstrChanVexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1);
  using CreateAITorqueBridgePolynomialChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[]);
  using CreateAITorqueBridgeTableChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[]);
  using CreateAITorqueBridgeTwoPointLinChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[]);
  using CreateAIVelocityIEPEChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateAIVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAIVoltageChanWithExcitPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[]);
  using CreateAIVoltageRMSChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAOCurrentChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateAOFuncGenChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset);
  using CreateAOVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateCIAngEncoderChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[]);
  using CreateCIAngVelocityChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[]);
  using CreateCICountEdgesChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection);
  using CreateCIDutyCycleChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[]);
  using CreateCIFreqChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  using CreateCIGPSTimestampChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[]);
  using CreateCILinEncoderChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[]);
  using CreateCILinVelocityChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[]);
  using CreateCIPeriodChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[]);
  using CreateCIPulseChanFreqPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  using CreateCIPulseChanTicksPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal);
  using CreateCIPulseChanTimePtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units);
  using CreateCIPulseWidthChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[]);
  using CreateCISemiPeriodChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateCITwoEdgeSepChanPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[]);
  using CreateCOPulseChanFreqPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle);
  using CreateCOPulseChanTicksPtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks);
  using CreateCOPulseChanTimePtr = int32 (*)(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime);
  using CreateDIChanPtr = int32 (*)(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  using CreateDOChanPtr = int32 (*)(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping);
  using CreateLinScalePtr = int32 (*)(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[]);
  using CreateMapScalePtr = int32 (*)(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[]);
  using CreatePolynomialScalePtr = int32 (*)(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[]);
  using CreateTEDSAIAccelChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAICurrentChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[]);
  using CreateTEDSAIForceBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAIForceIEPEChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIMicrophoneChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIPosLVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateTEDSAIPosRVDTChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[]);
  using CreateTEDSAIPressureBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAIRTDChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  using CreateTEDSAIResistanceChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[]);
  using CreateTEDSAIStrainGageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[]);
  using CreateTEDSAIThrmcplChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[]);
  using CreateTEDSAIThrmstrChanIexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal);
  using CreateTEDSAIThrmstrChanVexPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1);
  using CreateTEDSAITorqueBridgeChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTEDSAIVoltageChanPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
  using CreateTEDSAIVoltageChanWithExcitPtr = int32 (*)(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[]);
  using CreateTableScalePtr = int32 (*)(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[]);
  using CreateTaskPtr = int32 (*)(const char sessionName[], TaskHandle* task);
  using CreateWatchdogTimerTaskPtr = int32 (*)(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState);
  using CreateWatchdogTimerTaskExPtr = int32 (*)(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout);
  using DeleteNetworkDevicePtr = int32 (*)(const char deviceName[]);
  using DeleteSavedGlobalChanPtr = int32 (*)(const char channelName[]);
  using DeleteSavedScalePtr = int32 (*)(const char scaleName[]);
  using DeleteSavedTaskPtr = int32 (*)(const char taskName[]);
  using DeviceSupportsCalPtr = int32 (*)(const char deviceName[], bool32* calSupported);
  using DisableRefTrigPtr = int32 (*)(TaskHandle task);
  using DisableStartTrigPtr = int32 (*)(TaskHandle task);
  using DisconnectTermsPtr = int32 (*)(const char sourceTerminal[], const char destinationTerminal[]);
  using ExportSignalPtr = int32 (*)(TaskHandle task, int32 signalID, const char outputTerminal[]);
  using GetAIACExcitFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIACExcitSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIACExcitWireModePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIADCCustomTimingModePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIADCTimingModePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIAccel4WireDCVoltageSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIAccel4WireDCVoltageSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIAccelChargeSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIAccelChargeSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIAccelSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIAccelSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIAccelUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIAcceldBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIAttenPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIAutoZeroModePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIAveragingWinSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIBridgeBalanceCoarsePotPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeBalanceFinePotPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeElectricalUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeInitialRatioPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeInitialVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeNomResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgePhysicalUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgePolyForwardCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIBridgePolyReverseCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIBridgeScaleTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeShuntCalEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIBridgeShuntCalGainAdjustPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeShuntCalSelectPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeShuntCalShuntCalAActualResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeShuntCalShuntCalAResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeShuntCalShuntCalASrcPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIBridgeShuntCalShuntCalBActualResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeShuntCalShuntCalBResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeTableElectricalValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIBridgeTablePhysicalValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIBridgeTwoPointLinFirstElectricalValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeTwoPointLinFirstPhysicalValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeTwoPointLinSecondElectricalValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeTwoPointLinSecondPhysicalValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIBridgeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIChanCalApplyCalIfExpPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIChanCalCalDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  using GetAIChanCalDescPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAIChanCalEnableCalPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIChanCalExpDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  using GetAIChanCalHasValidCalInfoPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIChanCalOperatorNamePtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAIChanCalPolyForwardCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIChanCalPolyReverseCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIChanCalScaleTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIChanCalTablePreScaledValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIChanCalTableScaledValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIChanCalVerifAcqValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIChanCalVerifRefValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIChargeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIChopEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAICouplingPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAICurrentACRMSUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAICurrentShuntLocPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAICurrentShuntResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAICurrentUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAICustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAIDCOffsetPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDataXferCustomThresholdPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIDataXferMaxRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIDevScalingCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIDigFltrBandpassCenterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDigFltrBandpassWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDigFltrCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAIDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIDigFltrHighpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDigFltrLowpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDigFltrNotchCenterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDigFltrNotchWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIDigFltrOrderPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIDigFltrResponsePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIDigFltrTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIDitherEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIEddyCurrentProxProbeSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIEddyCurrentProxProbeSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIEddyCurrentProxProbeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIEnhancedAliasRejectionEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIExcitActualValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIExcitDCorACPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIExcitIdleOutputBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIExcitSensePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIExcitSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIExcitUseForScalingPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIExcitUseMultiplexedPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIExcitValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIExcitVoltageOrCurrentPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIFilterDelayAdjustmentPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIFilterEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIFilterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIFilterOrderPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIFilterResponsePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIForceIEPESensorSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIForceIEPESensorSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIForceReadFromChanPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIForceUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIFreqHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIFreqThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIGainPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIInputLimitsFaultDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIInputLimitsFaultDetectLowerLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIInputLimitsFaultDetectUpperLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIInputSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAIIsTEDSPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAILVDTSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAILVDTSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAILVDTUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAILeadWireResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAILossyLSBRemovalCompressedSampSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAILowpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAILowpassEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAILowpassSwitchCapClkSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAILowpassSwitchCapExtClkDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAILowpassSwitchCapExtClkFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAILowpassSwitchCapOutClkDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIMaxPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIMeasTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIMicrophoneSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIMinPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIOpenChanDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIOpenThrmcplDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIOvercurrentDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIPowerSupplyFaultDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIPressureUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIProbeAttenPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRTDAPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRTDBPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRTDCPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRTDR0Ptr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRTDTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRVDTSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRVDTSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRVDTUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRawDataCompressionTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRawSampJustificationPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRawSampSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIRemoveFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIResistanceCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIResistanceUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIResolutionPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIResolutionUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRngHighPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRngLowPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRosetteStrainGageOrientationPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIRosetteStrainGageRosetteMeasTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRosetteStrainGageRosetteTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIRosetteStrainGageStrainChansPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAISampAndHoldEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAISensorPowerCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAISensorPowerTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAISensorPowerVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAISoundPressureMaxSoundPressureLvlPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAISoundPressureUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAISoundPressuredBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIStrainGageCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIStrainGageForceReadFromChanPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAIStrainGageGageFactorPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIStrainGagePoissonRatioPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIStrainUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAITEDSUnitsPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAITempUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAITermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIThrmcplCJCChanPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAIThrmcplCJCSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIThrmcplCJCValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIThrmcplLeadOffsetVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIThrmcplScaleTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIThrmcplTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIThrmstrAPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIThrmstrBPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIThrmstrCPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIThrmstrR1Ptr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAITorqueUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAIVelocityIEPESensorSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIVelocityIEPESensorSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIVelocityIEPESensordBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAIVelocityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIVoltageACRMSUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIVoltageUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAIVoltagedBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOCurrentUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOCustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAODACOffsetExtSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAODACOffsetSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAODACOffsetValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAODACRefAllowConnToGndPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAODACRefConnToGndPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAODACRefExtSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetAODACRefSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAODACRefValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAODACRngHighPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAODACRngLowPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAODevScalingCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using GetAOEnhancedImageRejectionEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAOFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFilterDelayAdjustmentPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOFuncGenAmplitudePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFuncGenFMDeviationPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFuncGenFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFuncGenModulationTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOFuncGenOffsetPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFuncGenSquareDutyCyclePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOFuncGenTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOGainPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOIdleOutputBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOLoadImpedancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOMaxPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAOMinPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOOutputImpedancePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOOutputTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOReglitchEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAOResolutionPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOResolutionUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetAOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetAOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetAOVoltageCurrentLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetAOVoltageUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetArmStartTrigTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetArmStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetAutoConfiguredCDAQSyncConnectionsPtr = int32 (*)(char portList[], uInt32 portListSize);
  using GetBufInputBufSizePtr = int32 (*)(TaskHandle task, uInt32* data);
  using GetBufInputOnbrdBufSizePtr = int32 (*)(TaskHandle task, uInt32* data);
  using GetBufOutputBufSizePtr = int32 (*)(TaskHandle task, uInt32* data);
  using GetBufOutputOnbrdBufSizePtr = int32 (*)(TaskHandle task, uInt32* data);
  using GetCIAngEncoderInitialAnglePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIAngEncoderPulsesPerRevPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIAngEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCICountEdgesActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesCountDirDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesCountDirDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountDirDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountDirDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesCountDirDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesCountDirHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountDirLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesCountDirTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesCountDirThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountResetActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesCountResetDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesCountResetDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountResetDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountResetDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesCountResetDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesCountResetEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesCountResetHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesCountResetLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesCountResetResetCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCICountEdgesCountResetTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesCountResetTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesCountResetThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesDirPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesDirTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesGateDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesGateDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesGateDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesGateDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesGateEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICountEdgesGateHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesGateLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesGateTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesGateTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesGateThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesGateWhenPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICountEdgesInitialCntPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCICountEdgesLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICountEdgesTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICountEdgesThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICtrTimebaseActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCICtrTimebaseDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICtrTimebaseDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICtrTimebaseDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICtrTimebaseDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICtrTimebaseDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCICtrTimebaseMasterTimebaseDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCICtrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCICtrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCICustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIDupCountPreventPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIDutyCycleDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIDutyCycleDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIDutyCycleDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIDutyCycleDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIDutyCycleLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIDutyCycleStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIDutyCycleTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIDutyCycleTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderAInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderAInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderAInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderAInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIEncoderAInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderAInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderAInputTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIEncoderAInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderBInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderBInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderBInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderBInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIEncoderBInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderBInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderBInputTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIEncoderBInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderDecodingTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderZIndexEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderZIndexPhasePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderZIndexValPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderZInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderZInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderZInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIEncoderZInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIEncoderZInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIEncoderZInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIEncoderZInputTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIEncoderZInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFilterEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIFilterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFilterOrderPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIFilterResponsePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFreqDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIFreqDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFreqDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFreqDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIFreqDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIFreqDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIFreqEnableAveragingPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIFreqHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFreqLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFreqMeasMethPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFreqMeasTimePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFreqStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFreqTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIFreqTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIFreqThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIGPSSyncMethodPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIGPSSyncSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCILinEncoderDistPerPulsePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCILinEncoderInitialPosPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCILinEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIMaxPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIMaxMeasPeriodPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIMeasTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIMinPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCINumPossiblyInvalidSampsPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIOutputStatePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPeriodDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPeriodDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPeriodDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPeriodDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPeriodDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPeriodDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIPeriodEnableAveragingPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPeriodHystPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPeriodLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPeriodMeasMethPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPeriodMeasTimePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPeriodStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPeriodTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPeriodTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPeriodThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPeriodUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPrescalerPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIPulseFreqDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseFreqDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseFreqDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseFreqDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseFreqDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseFreqLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseFreqStartEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseFreqTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseFreqTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTicksDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseTicksDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseTicksDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseTicksDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseTicksDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseTicksLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTicksStartEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTicksTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseTicksTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTimeDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseTimeDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseTimeDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseTimeDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseTimeDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseTimeLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTimeStartEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTimeTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseTimeTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseTimeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseWidthDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseWidthDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseWidthDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIPulseWidthDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseWidthDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIPulseWidthLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseWidthStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseWidthTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIPulseWidthTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIPulseWidthUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCISampClkOverrunBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCISampClkOverrunSentinelValPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCISemiPeriodDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCISemiPeriodDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCISemiPeriodDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCISemiPeriodDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCISemiPeriodDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCISemiPeriodLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCISemiPeriodStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCISemiPeriodTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCISemiPeriodTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCISemiPeriodUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITCReachedPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCITimestampInitialSecondsPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCITimestampUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepFirstDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCITwoEdgeSepFirstDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCITwoEdgeSepFirstDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCITwoEdgeSepFirstEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepFirstLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepFirstTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCITwoEdgeSepFirstTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepSecondDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCITwoEdgeSepSecondDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCITwoEdgeSepSecondDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCITwoEdgeSepSecondEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepSecondLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepSecondTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCITwoEdgeSepSecondTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCITwoEdgeSepUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIVelocityAngEncoderPulsesPerRevPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIVelocityAngEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCIVelocityEncoderAInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIVelocityEncoderAInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIVelocityEncoderAInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityEncoderAInputTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIVelocityEncoderAInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityEncoderBInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIVelocityEncoderBInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIVelocityEncoderBInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityEncoderBInputTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCIVelocityEncoderBInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityEncoderDecodingTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityLinEncoderDistPerPulsePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCIVelocityLinEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCIVelocityMeasTimePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOAutoIncrCntPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOConstrainedGenModePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOCtrTimebaseActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOCtrTimebaseDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCOCtrTimebaseDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOCtrTimebaseDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOCtrTimebaseDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCOCtrTimebaseDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCOCtrTimebaseMasterTimebaseDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOCtrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOCtrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOEnableInitialDelayOnRetriggerPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCOOutputStatePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOOutputTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOPrescalerPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOPulseDonePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCOPulseDutyCycPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOPulseFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOPulseFreqInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOPulseFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOPulseHighTicksPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOPulseHighTimePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOPulseIdleStatePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCOPulseLowTicksPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOPulseLowTimePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOPulseTermPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetCOPulseTicksInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOPulseTimeInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetCOPulseTimeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetCORdyForNewValPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetCOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetCalAccConnectionCountPtr = int32 (*)(const char deviceName[], uInt32* data);
  using GetCalDevTempPtr = int32 (*)(const char deviceName[], float64* data);
  using GetCalRecommendedAccConnectionCountLimitPtr = int32 (*)(const char deviceName[], uInt32* data);
  using GetCalUserDefinedInfoPtr = int32 (*)(const char deviceName[], char data[], uInt32 bufferSize);
  using GetCalUserDefinedInfoMaxSizePtr = int32 (*)(const char deviceName[], uInt32* data);
  using GetChanDescrPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetChanIsGlobalPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetChanSyncUnlockBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetChanTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDIAcquireOnPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDIDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDIDigFltrEnableBusModePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDIDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetDIDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetDIDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetDIDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDIInvertLinesPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDILogicFamilyPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDINumLinesPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetDITristatePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetDIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetDODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOGenerateOnPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOInvertLinesPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDOLineStatesDoneStatePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOLineStatesPausedStatePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOLineStatesStartStatePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOLogicFamilyPtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDONumLinesPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetDOOutputDriveTypePtr = int32 (*)(TaskHandle task, const char channel[], int32* data);
  using GetDOOvercurrentAutoReenablePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDOOvercurrentLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetDOOvercurrentReenablePeriodPtr = int32 (*)(TaskHandle task, const char channel[], float64* data);
  using GetDOTristatePtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetDOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32* data);
  using GetDOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[], bool32* data);
  using GetDigitalLogicFamilyPowerUpStatePtr = int32 (*)(const char deviceName[], int32* logicFamily);
  using GetDisconnectedCDAQSyncPortsPtr = int32 (*)(char portList[], uInt32 portListSize);
  using GetErrorStringPtr = int32 (*)(int32 errorCode, char errorString[], uInt32 bufferSize);
  using GetExtCalLastTempPtr = int32 (*)(const char deviceName[], float64* data);
  using GetExtCalRecommendedIntervalPtr = int32 (*)(const char deviceName[], uInt32* data);
  using GetExtendedErrorInfoPtr = int32 (*)(char errorString[], uInt32 bufferSize);
  using GetFirstSampClkWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetFirstSampTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetNthTaskChannelPtr = int32 (*)(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  using GetNthTaskDevicePtr = int32 (*)(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  using GetNthTaskReadChannelPtr = int32 (*)(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize);
  using GetPhysicalChanNamePtr = int32 (*)(TaskHandle task, const char channel[], char data[], uInt32 bufferSize);
  using GetRefTrigTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetSelfCalLastDateAndTimePtr = int32 (*)(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute);
  using GetSelfCalLastTempPtr = int32 (*)(const char deviceName[], float64* data);
  using GetSelfCalSupportedPtr = int32 (*)(const char deviceName[], bool32* data);
  using GetStartTrigTimestampValPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using GetSyncPulseTimeWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime* data);
  using IsTaskDonePtr = int32 (*)(TaskHandle task, bool32* isTaskDone);
  using LoadTaskPtr = int32 (*)(const char sessionName[], TaskHandle* task);
  using ReadAnalogF64Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadAnalogScalarF64Ptr = int32 (*)(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  using ReadBinaryI16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadBinaryI32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadBinaryU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadBinaryU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterF64Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterF64ExPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterScalarF64Ptr = int32 (*)(TaskHandle task, float64 timeout, float64* value, bool32* reserved);
  using ReadCounterScalarU32Ptr = int32 (*)(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  using ReadCounterU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCounterU32ExPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrFreqPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrFreqScalarPtr = int32 (*)(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved);
  using ReadCtrTicksPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrTicksScalarPtr = int32 (*)(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved);
  using ReadCtrTimePtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadCtrTimeScalarPtr = int32 (*)(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved);
  using ReadDigitalLinesPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved);
  using ReadDigitalScalarU32Ptr = int32 (*)(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved);
  using ReadDigitalU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadDigitalU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadDigitalU8Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved);
  using ReadRawPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved);
  using RegisterDoneEventPtr = int32 (*)(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData);
  using RegisterEveryNSamplesEventPtr = int32 (*)(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData);
  using RegisterSignalEventPtr = int32 (*)(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData);
  using RemoveCDAQSyncConnectionPtr = int32 (*)(const char portList[]);
  using ReserveNetworkDevicePtr = int32 (*)(const char deviceName[], bool32 overrideReservation);
  using ResetAIACExcitFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIACExcitSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIACExcitWireModePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIADCCustomTimingModePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIADCTimingModePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccel4WireDCVoltageSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccel4WireDCVoltageSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccelChargeSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccelChargeSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccelSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccelSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAccelUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAcceldBRefPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAttenPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAutoZeroModePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIAveragingWinSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeBalanceCoarsePotPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeBalanceFinePotPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeElectricalUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeInitialRatioPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeInitialVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeNomResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgePhysicalUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgePolyForwardCoeffPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgePolyReverseCoeffPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeScaleTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalGainAdjustPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalSelectPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalShuntCalAActualResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalShuntCalAResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalShuntCalASrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalShuntCalBActualResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeShuntCalShuntCalBResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeTableElectricalValsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeTablePhysicalValsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeTwoPointLinFirstElectricalValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeTwoPointLinFirstPhysicalValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeTwoPointLinSecondElectricalValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeTwoPointLinSecondPhysicalValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIBridgeUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalApplyCalIfExpPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalDescPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalEnableCalPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalOperatorNamePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalPolyForwardCoeffPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalPolyReverseCoeffPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalScaleTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalTablePreScaledValsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalTableScaledValsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalVerifAcqValsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChanCalVerifRefValsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChargeUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIChopEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAICouplingPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAICurrentACRMSUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAICurrentShuntLocPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAICurrentShuntResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAICurrentUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAICustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDCOffsetPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDataXferCustomThresholdPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDataXferMaxRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrBandpassCenterFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrBandpassWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrCoeffPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrHighpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrLowpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrNotchCenterFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrNotchWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrOrderPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrResponsePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDigFltrTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIDitherEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIEddyCurrentProxProbeSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIEddyCurrentProxProbeSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIEddyCurrentProxProbeUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIEnhancedAliasRejectionEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitActualValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitDCorACPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitIdleOutputBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitSensePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitUseForScalingPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitUseMultiplexedPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIExcitVoltageOrCurrentPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFilterDelayAdjustmentPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFilterEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFilterFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFilterOrderPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFilterResponsePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIForceIEPESensorSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIForceIEPESensorSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIForceReadFromChanPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIForceUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFreqHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFreqThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIGainPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIImpedancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIInputLimitsFaultDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIInputLimitsFaultDetectLowerLimitPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIInputLimitsFaultDetectUpperLimitPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIInputSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILVDTSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILVDTSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILVDTUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILeadWireResistancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILossyLSBRemovalCompressedSampSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILowpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILowpassEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILowpassSwitchCapClkSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILowpassSwitchCapExtClkDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILowpassSwitchCapExtClkFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAILowpassSwitchCapOutClkDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIMaxPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIMicrophoneSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIMinPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIOpenChanDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIOpenThrmcplDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIOvercurrentDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIPowerSupplyFaultDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIPressureUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIProbeAttenPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRTDAPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRTDBPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRTDCPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRTDR0Ptr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRTDTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRVDTSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRVDTSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRVDTUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRawDataCompressionTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRemoveFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIResistanceCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIResistanceUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRngHighPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRngLowPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRosetteStrainGageOrientationPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIRosetteStrainGageRosetteMeasTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISampAndHoldEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISensorPowerCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISensorPowerTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISensorPowerVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISoundPressureMaxSoundPressureLvlPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISoundPressureUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAISoundPressuredBRefPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIStrainGageCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIStrainGageForceReadFromChanPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIStrainGageGageFactorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIStrainGagePoissonRatioPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIStrainUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAITempUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAITermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmcplCJCValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmcplLeadOffsetVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmcplScaleTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmcplTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmstrAPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmstrBPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmstrCPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIThrmstrR1Ptr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAITorqueUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVelocityIEPESensorSensitivityPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVelocityIEPESensorSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVelocityIEPESensordBRefPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVelocityUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVoltageACRMSUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVoltageUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAIVoltagedBRefPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOCurrentUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOCustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACOffsetExtSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACOffsetSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACOffsetValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRefAllowConnToGndPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRefConnToGndPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRefExtSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRefSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRefValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRngHighPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODACRngLowPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOEnhancedImageRejectionEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFilterDelayAdjustmentPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenAmplitudePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenFMDeviationPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenModulationTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenOffsetPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenSquareDutyCyclePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOFuncGenTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOGainPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOIdleOutputBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOLoadImpedancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOMaxPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOMinPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOOutputImpedancePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOReglitchEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOResolutionUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOVoltageCurrentLimitPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetAOVoltageUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetBufInputBufSizePtr = int32 (*)(TaskHandle task);
  using ResetBufOutputBufSizePtr = int32 (*)(TaskHandle task);
  using ResetBufOutputOnbrdBufSizePtr = int32 (*)(TaskHandle task);
  using ResetCIAngEncoderInitialAnglePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIAngEncoderPulsesPerRevPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIAngEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountDirThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetResetCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesCountResetThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDirPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesDirTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesGateWhenPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesInitialCntPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICountEdgesThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseMasterTimebaseDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICtrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCICustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDupCountPreventPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIDutyCycleTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderAInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderBInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderDecodingTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZIndexEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZIndexPhasePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZIndexValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIEncoderZInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFilterEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFilterFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFilterOrderPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFilterResponsePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqEnableAveragingPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqMeasMethPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqMeasTimePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIGPSSyncMethodPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIGPSSyncSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCILinEncoderDistPerPulsePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCILinEncoderInitialPosPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCILinEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIMaxPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIMaxMeasPeriodPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIMinPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodEnableAveragingPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodHystPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodMeasMethPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodMeasTimePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPeriodUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPrescalerPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqStartEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksStartEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTicksTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeStartEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseTimeUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIPulseWidthUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISampClkOverrunBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISampClkOverrunSentinelValPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCISemiPeriodUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITimestampInitialSecondsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITimestampUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepFirstTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepSecondTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCITwoEdgeSepUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityAngEncoderPulsesPerRevPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityAngEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderAInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderBInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityEncoderDecodingTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityLinEncoderDistPerPulsePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityLinEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCIVelocityMeasTimePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOAutoIncrCntPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOConstrainedGenModePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseMasterTimebaseDivPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOCtrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOEnableInitialDelayOnRetriggerPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPrescalerPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseDutyCycPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseFreqPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseFreqInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseHighTicksPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseHighTimePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseIdleStatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseLowTicksPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseLowTimePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseTermPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseTicksInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseTimeInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOPulseTimeUnitsPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetCOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetChanDescrPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetChanSyncUnlockBehaviorPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIAcquireOnPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDigFltrEnableBusModePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIInvertLinesPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDILogicFamilyPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDITristatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOGenerateOnPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOInvertLinesPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOLineStatesDoneStatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOLineStatesPausedStatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOLineStatesStartStatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOLogicFamilyPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOOutputDriveTypePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOOvercurrentAutoReenablePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOOvercurrentLimitPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOOvercurrentReenablePeriodPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOTristatePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[]);
  using ResetDevicePtr = int32 (*)(const char deviceName[]);
  using SaveGlobalChanPtr = int32 (*)(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options);
  using SaveScalePtr = int32 (*)(const char scaleName[], const char saveAs[], const char author[], uInt32 options);
  using SaveTaskPtr = int32 (*)(TaskHandle task, const char saveAs[], const char author[], uInt32 options);
  using SelfCalPtr = int32 (*)(const char deviceName[]);
  using SelfTestDevicePtr = int32 (*)(const char deviceName[]);
  using SetAIACExcitFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIACExcitSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIACExcitWireModePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIADCCustomTimingModePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIADCTimingModePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIAccel4WireDCVoltageSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIAccel4WireDCVoltageSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIAccelChargeSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIAccelChargeSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIAccelSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIAccelSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIAccelUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIAcceldBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIAttenPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIAutoZeroModePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIAveragingWinSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIBridgeBalanceCoarsePotPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeBalanceFinePotPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeElectricalUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeInitialRatioPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeInitialVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeNomResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgePhysicalUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgePolyForwardCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIBridgePolyReverseCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIBridgeScaleTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeShuntCalEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIBridgeShuntCalGainAdjustPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeShuntCalSelectPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeShuntCalShuntCalAActualResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeShuntCalShuntCalAResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeShuntCalShuntCalASrcPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIBridgeShuntCalShuntCalBActualResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeShuntCalShuntCalBResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeTableElectricalValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIBridgeTablePhysicalValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIBridgeTwoPointLinFirstElectricalValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeTwoPointLinFirstPhysicalValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeTwoPointLinSecondElectricalValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeTwoPointLinSecondPhysicalValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIBridgeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIChanCalApplyCalIfExpPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIChanCalCalDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  using SetAIChanCalDescPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAIChanCalEnableCalPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIChanCalExpDatePtr = int32 (*)(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute);
  using SetAIChanCalOperatorNamePtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAIChanCalPolyForwardCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIChanCalPolyReverseCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIChanCalScaleTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIChanCalTablePreScaledValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIChanCalTableScaledValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIChanCalVerifAcqValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIChanCalVerifRefValsPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIChargeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIChopEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAICouplingPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAICurrentACRMSUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAICurrentShuntLocPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAICurrentShuntResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAICurrentUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAICustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAIDCOffsetPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDataXferCustomThresholdPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIDataXferMaxRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIDigFltrBandpassCenterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDigFltrBandpassWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDigFltrCoeffPtr = int32 (*)(TaskHandle task, const char channel[], float64* data, uInt32 arraySizeInElements);
  using SetAIDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIDigFltrHighpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDigFltrLowpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDigFltrNotchCenterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDigFltrNotchWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIDigFltrOrderPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIDigFltrResponsePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIDigFltrTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIDitherEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIEddyCurrentProxProbeSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIEddyCurrentProxProbeSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIEddyCurrentProxProbeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIEnhancedAliasRejectionEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIExcitActualValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIExcitDCorACPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIExcitIdleOutputBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIExcitSensePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIExcitSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIExcitUseForScalingPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIExcitUseMultiplexedPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIExcitValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIExcitVoltageOrCurrentPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIFilterDelayAdjustmentPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIFilterEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIFilterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIFilterOrderPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIFilterResponsePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIForceIEPESensorSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIForceIEPESensorSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIForceReadFromChanPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIForceUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIFreqHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIFreqThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIGainPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIInputLimitsFaultDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIInputLimitsFaultDetectLowerLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIInputLimitsFaultDetectUpperLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIInputSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAILVDTSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAILVDTSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAILVDTUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAILeadWireResistancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAILossyLSBRemovalCompressedSampSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAILowpassCutoffFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAILowpassEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAILowpassSwitchCapClkSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAILowpassSwitchCapExtClkDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAILowpassSwitchCapExtClkFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAILowpassSwitchCapOutClkDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIMaxPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIMicrophoneSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIMinPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIOpenChanDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIOpenThrmcplDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIOvercurrentDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIPowerSupplyFaultDetectEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIPressureUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIProbeAttenPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRTDAPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRTDBPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRTDCPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRTDR0Ptr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRTDTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIRVDTSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRVDTSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIRVDTUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIRawDataCompressionTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIRemoveFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIResistanceCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIResistanceUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIRngHighPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRngLowPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRosetteStrainGageOrientationPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIRosetteStrainGageRosetteMeasTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAISampAndHoldEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAISensorPowerCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAISensorPowerTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAISensorPowerVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAISoundPressureMaxSoundPressureLvlPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAISoundPressureUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAISoundPressuredBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIStrainGageCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIStrainGageForceReadFromChanPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAIStrainGageGageFactorPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIStrainGagePoissonRatioPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIStrainUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAITempUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAITermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIThrmcplCJCValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIThrmcplLeadOffsetVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIThrmcplScaleTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIThrmcplTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIThrmstrAPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIThrmstrBPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIThrmstrCPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIThrmstrR1Ptr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAITorqueUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAIVelocityIEPESensorSensitivityPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIVelocityIEPESensorSensitivityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIVelocityIEPESensordBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAIVelocityUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIVoltageACRMSUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIVoltageUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAIVoltagedBRefPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOCurrentUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOCustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAODACOffsetExtSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAODACOffsetSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAODACOffsetValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAODACRefAllowConnToGndPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAODACRefConnToGndPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAODACRefExtSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetAODACRefSrcPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAODACRefValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAODACRngHighPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAODACRngLowPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOEnhancedImageRejectionEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAOFilterDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFilterDelayAdjustmentPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOFuncGenAmplitudePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFuncGenFMDeviationPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFuncGenFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFuncGenModulationTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOFuncGenOffsetPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFuncGenSquareDutyCyclePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOFuncGenTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOGainPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOIdleOutputBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOLoadImpedancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOMaxPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAOMinPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOOutputImpedancePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOReglitchEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAOResolutionUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetAOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetAOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetAOVoltageCurrentLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetAOVoltageUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetArmStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using SetBufInputBufSizePtr = int32 (*)(TaskHandle task, uInt32 data);
  using SetBufOutputBufSizePtr = int32 (*)(TaskHandle task, uInt32 data);
  using SetBufOutputOnbrdBufSizePtr = int32 (*)(TaskHandle task, uInt32 data);
  using SetCIAngEncoderInitialAnglePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIAngEncoderPulsesPerRevPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIAngEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesCountDirDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesCountDirDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountDirDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountDirDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesCountDirDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesCountDirHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountDirLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesCountDirTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesCountDirThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountResetActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesCountResetDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesCountResetDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountResetDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountResetDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesCountResetDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesCountResetEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesCountResetHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesCountResetLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesCountResetResetCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCICountEdgesCountResetTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesCountResetTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesCountResetThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesDirPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesDirTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesGateDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesGateDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesGateDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesGateDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesGateEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICountEdgesGateHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesGateLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesGateTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesGateTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesGateThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesGateWhenPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICountEdgesInitialCntPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCICountEdgesLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICountEdgesTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICountEdgesThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICtrTimebaseActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCICtrTimebaseDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICtrTimebaseDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICtrTimebaseDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICtrTimebaseDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICtrTimebaseDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCICtrTimebaseMasterTimebaseDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCICtrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCICtrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCICustomScaleNamePtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIDupCountPreventPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIDutyCycleDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIDutyCycleDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIDutyCycleDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIDutyCycleDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIDutyCycleLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIDutyCycleStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIDutyCycleTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIDutyCycleTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderAInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderAInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderAInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderAInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIEncoderAInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderAInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderAInputTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIEncoderAInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderBInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderBInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderBInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderBInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIEncoderBInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderBInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderBInputTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIEncoderBInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderDecodingTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderZIndexEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderZIndexPhasePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderZIndexValPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderZInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderZInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderZInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIEncoderZInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIEncoderZInputDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIEncoderZInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIEncoderZInputTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIEncoderZInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFilterDelayUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFilterEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIFilterFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIFilterOrderPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIFilterResponsePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFreqDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIFreqDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIFreqDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIFreqDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIFreqDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIFreqDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIFreqEnableAveragingPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIFreqHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIFreqLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFreqMeasMethPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFreqMeasTimePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIFreqStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFreqTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIFreqTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIFreqThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIGPSSyncMethodPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIGPSSyncSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCILinEncoderDistPerPulsePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCILinEncoderInitialPosPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCILinEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIMaxPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIMaxMeasPeriodPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIMinPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPeriodDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPeriodDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPeriodDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPeriodDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPeriodDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPeriodDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIPeriodEnableAveragingPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPeriodHystPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPeriodLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPeriodMeasMethPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPeriodMeasTimePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPeriodStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPeriodTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPeriodTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPeriodThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPeriodUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPrescalerPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIPulseFreqDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseFreqDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseFreqDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseFreqDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseFreqDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseFreqLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseFreqStartEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseFreqTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseFreqTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTicksDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseTicksDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseTicksDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseTicksDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseTicksDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseTicksLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTicksStartEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTicksTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseTicksTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTimeDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseTimeDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseTimeDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseTimeDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseTimeDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseTimeLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTimeStartEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTimeTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseTimeTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseTimeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseWidthDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseWidthDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseWidthDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIPulseWidthDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseWidthDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIPulseWidthLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseWidthStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseWidthTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIPulseWidthTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIPulseWidthUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCISampClkOverrunBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCISampClkOverrunSentinelValPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCISemiPeriodDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCISemiPeriodDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCISemiPeriodDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCISemiPeriodDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCISemiPeriodDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCISemiPeriodLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCISemiPeriodStartingEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCISemiPeriodTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCISemiPeriodTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCISemiPeriodUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIThreshVoltagePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCITimestampInitialSecondsPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCITimestampUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepFirstDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCITwoEdgeSepFirstDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCITwoEdgeSepFirstDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCITwoEdgeSepFirstEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepFirstLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepFirstTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCITwoEdgeSepFirstTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepSecondDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCITwoEdgeSepSecondDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCITwoEdgeSepSecondDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCITwoEdgeSepSecondEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepSecondLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepSecondTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCITwoEdgeSepSecondTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCITwoEdgeSepUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIVelocityAngEncoderPulsesPerRevPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIVelocityAngEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCIVelocityEncoderAInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIVelocityEncoderAInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIVelocityEncoderAInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityEncoderAInputTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIVelocityEncoderAInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityEncoderBInputDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIVelocityEncoderBInputDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIVelocityEncoderBInputLogicLvlBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityEncoderBInputTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCIVelocityEncoderBInputTermCfgPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityEncoderDecodingTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityLinEncoderDistPerPulsePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCIVelocityLinEncoderUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCIVelocityMeasTimePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOAutoIncrCntPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOConstrainedGenModePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCOCtrTimebaseActiveEdgePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCOCtrTimebaseDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCOCtrTimebaseDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOCtrTimebaseDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOCtrTimebaseDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCOCtrTimebaseDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCOCtrTimebaseMasterTimebaseDivPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOCtrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOCtrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCOEnableInitialDelayOnRetriggerPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCOPrescalerPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOPulseDutyCycPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOPulseFreqPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOPulseFreqInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOPulseFreqUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCOPulseHighTicksPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOPulseHighTimePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOPulseIdleStatePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCOPulseLowTicksPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOPulseLowTimePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOPulseTermPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetCOPulseTicksInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOPulseTimeInitialDelayPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetCOPulseTimeUnitsPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetCOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetCOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetCalAccConnectionCountPtr = int32 (*)(const char deviceName[], uInt32 data);
  using SetCalUserDefinedInfoPtr = int32 (*)(const char deviceName[], const char data[]);
  using SetChanDescrPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetChanSyncUnlockBehaviorPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDIAcquireOnPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDIDataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDIDataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDIDigFltrEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDIDigFltrEnableBusModePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDIDigFltrMinPulseWidthPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetDIDigFltrTimebaseRatePtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetDIDigFltrTimebaseSrcPtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetDIDigSyncEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDIInvertLinesPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDILogicFamilyPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDIMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDITristatePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDIUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetDIUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetDODataXferMechPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDODataXferReqCondPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOGenerateOnPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOInvertLinesPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDOLineStatesDoneStatePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOLineStatesPausedStatePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOLineStatesStartStatePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOLogicFamilyPtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOMemMapEnablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDOOutputDriveTypePtr = int32 (*)(TaskHandle task, const char channel[], int32 data);
  using SetDOOvercurrentAutoReenablePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDOOvercurrentLimitPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetDOOvercurrentReenablePeriodPtr = int32 (*)(TaskHandle task, const char channel[], float64 data);
  using SetDOTristatePtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDOUsbXferReqCountPtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetDOUsbXferReqSizePtr = int32 (*)(TaskHandle task, const char channel[], uInt32 data);
  using SetDOUseOnlyOnBrdMemPtr = int32 (*)(TaskHandle task, const char channel[], bool32 data);
  using SetDigitalLogicFamilyPowerUpStatePtr = int32 (*)(const char deviceName[], int32 logicFamily);
  using SetFirstSampClkWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using SetPhysicalChanNamePtr = int32 (*)(TaskHandle task, const char channel[], const char data[]);
  using SetStartTrigTrigWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using SetSyncPulseTimeWhenPtr = int32 (*)(TaskHandle task, CVIAbsoluteTime data);
  using StartNewFilePtr = int32 (*)(TaskHandle task, const char filePath[]);
  using StartTaskPtr = int32 (*)(TaskHandle task);
  using StopTaskPtr = int32 (*)(TaskHandle task);
  using TaskControlPtr = int32 (*)(TaskHandle task, int32 action);
  using TristateOutputTermPtr = int32 (*)(const char outputTerminal[]);
  using UnreserveNetworkDevicePtr = int32 (*)(const char deviceName[]);
  using WaitForNextSampleClockPtr = int32 (*)(TaskHandle task, float64 timeout, bool32* isLate);
  using WaitForValidTimestampPtr = int32 (*)(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp);
  using WaitUntilTaskDonePtr = int32 (*)(TaskHandle task, float64 timeToWait);
  using WriteAnalogF64Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteAnalogScalarF64Ptr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved);
  using WriteBinaryI16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteBinaryI32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteBinaryU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteBinaryU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteCtrFreqPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved);
  using WriteCtrFreqScalarPtr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved);
  using WriteCtrTicksPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved);
  using WriteCtrTicksScalarPtr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved);
  using WriteCtrTimePtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved);
  using WriteCtrTimeScalarPtr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved);
  using WriteDigitalLinesPtr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteDigitalScalarU32Ptr = int32 (*)(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved);
  using WriteDigitalU16Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteDigitalU32Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteDigitalU8Ptr = int32 (*)(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteRawPtr = int32 (*)(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved);
  using WriteToTEDSFromArrayPtr = int32 (*)(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions);
  using WriteToTEDSFromFilePtr = int32 (*)(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions);

  typedef struct FunctionPointers {
    AddCDAQSyncConnectionPtr AddCDAQSyncConnection;
    AddGlobalChansToTaskPtr AddGlobalChansToTask;
    AddNetworkDevicePtr AddNetworkDevice;
    AreConfiguredCDAQSyncPortsDisconnectedPtr AreConfiguredCDAQSyncPortsDisconnected;
    AutoConfigureCDAQSyncConnectionsPtr AutoConfigureCDAQSyncConnections;
    CalculateReversePolyCoeffPtr CalculateReversePolyCoeff;
    CfgAnlgEdgeRefTrigPtr CfgAnlgEdgeRefTrig;
    CfgAnlgEdgeStartTrigPtr CfgAnlgEdgeStartTrig;
    CfgAnlgMultiEdgeRefTrigPtr CfgAnlgMultiEdgeRefTrig;
    CfgAnlgMultiEdgeStartTrigPtr CfgAnlgMultiEdgeStartTrig;
    CfgAnlgWindowRefTrigPtr CfgAnlgWindowRefTrig;
    CfgAnlgWindowStartTrigPtr CfgAnlgWindowStartTrig;
    CfgBurstHandshakingTimingExportClockPtr CfgBurstHandshakingTimingExportClock;
    CfgBurstHandshakingTimingImportClockPtr CfgBurstHandshakingTimingImportClock;
    CfgChangeDetectionTimingPtr CfgChangeDetectionTiming;
    CfgDigEdgeRefTrigPtr CfgDigEdgeRefTrig;
    CfgDigEdgeStartTrigPtr CfgDigEdgeStartTrig;
    CfgDigPatternRefTrigPtr CfgDigPatternRefTrig;
    CfgDigPatternStartTrigPtr CfgDigPatternStartTrig;
    CfgHandshakingTimingPtr CfgHandshakingTiming;
    CfgImplicitTimingPtr CfgImplicitTiming;
    CfgInputBufferPtr CfgInputBuffer;
    CfgOutputBufferPtr CfgOutputBuffer;
    CfgPipelinedSampClkTimingPtr CfgPipelinedSampClkTiming;
    CfgSampClkTimingPtr CfgSampClkTiming;
    CfgTimeStartTrigPtr CfgTimeStartTrig;
    CfgWatchdogAOExpirStatesPtr CfgWatchdogAOExpirStates;
    CfgWatchdogCOExpirStatesPtr CfgWatchdogCOExpirStates;
    CfgWatchdogDOExpirStatesPtr CfgWatchdogDOExpirStates;
    ClearTEDSPtr ClearTEDS;
    ClearTaskPtr ClearTask;
    ConfigureLoggingPtr ConfigureLogging;
    ConfigureTEDSPtr ConfigureTEDS;
    ConnectTermsPtr ConnectTerms;
    ControlWatchdogTaskPtr ControlWatchdogTask;
    CreateAIAccel4WireDCVoltageChanPtr CreateAIAccel4WireDCVoltageChan;
    CreateAIAccelChanPtr CreateAIAccelChan;
    CreateAIAccelChargeChanPtr CreateAIAccelChargeChan;
    CreateAIBridgeChanPtr CreateAIBridgeChan;
    CreateAIChargeChanPtr CreateAIChargeChan;
    CreateAICurrentChanPtr CreateAICurrentChan;
    CreateAICurrentRMSChanPtr CreateAICurrentRMSChan;
    CreateAIForceBridgePolynomialChanPtr CreateAIForceBridgePolynomialChan;
    CreateAIForceBridgeTableChanPtr CreateAIForceBridgeTableChan;
    CreateAIForceBridgeTwoPointLinChanPtr CreateAIForceBridgeTwoPointLinChan;
    CreateAIForceIEPEChanPtr CreateAIForceIEPEChan;
    CreateAIFreqVoltageChanPtr CreateAIFreqVoltageChan;
    CreateAIMicrophoneChanPtr CreateAIMicrophoneChan;
    CreateAIPosEddyCurrProxProbeChanPtr CreateAIPosEddyCurrProxProbeChan;
    CreateAIPosLVDTChanPtr CreateAIPosLVDTChan;
    CreateAIPosRVDTChanPtr CreateAIPosRVDTChan;
    CreateAIPressureBridgePolynomialChanPtr CreateAIPressureBridgePolynomialChan;
    CreateAIPressureBridgeTableChanPtr CreateAIPressureBridgeTableChan;
    CreateAIPressureBridgeTwoPointLinChanPtr CreateAIPressureBridgeTwoPointLinChan;
    CreateAIRTDChanPtr CreateAIRTDChan;
    CreateAIResistanceChanPtr CreateAIResistanceChan;
    CreateAIRosetteStrainGageChanPtr CreateAIRosetteStrainGageChan;
    CreateAIStrainGageChanPtr CreateAIStrainGageChan;
    CreateAITempBuiltInSensorChanPtr CreateAITempBuiltInSensorChan;
    CreateAIThrmcplChanPtr CreateAIThrmcplChan;
    CreateAIThrmstrChanIexPtr CreateAIThrmstrChanIex;
    CreateAIThrmstrChanVexPtr CreateAIThrmstrChanVex;
    CreateAITorqueBridgePolynomialChanPtr CreateAITorqueBridgePolynomialChan;
    CreateAITorqueBridgeTableChanPtr CreateAITorqueBridgeTableChan;
    CreateAITorqueBridgeTwoPointLinChanPtr CreateAITorqueBridgeTwoPointLinChan;
    CreateAIVelocityIEPEChanPtr CreateAIVelocityIEPEChan;
    CreateAIVoltageChanPtr CreateAIVoltageChan;
    CreateAIVoltageChanWithExcitPtr CreateAIVoltageChanWithExcit;
    CreateAIVoltageRMSChanPtr CreateAIVoltageRMSChan;
    CreateAOCurrentChanPtr CreateAOCurrentChan;
    CreateAOFuncGenChanPtr CreateAOFuncGenChan;
    CreateAOVoltageChanPtr CreateAOVoltageChan;
    CreateCIAngEncoderChanPtr CreateCIAngEncoderChan;
    CreateCIAngVelocityChanPtr CreateCIAngVelocityChan;
    CreateCICountEdgesChanPtr CreateCICountEdgesChan;
    CreateCIDutyCycleChanPtr CreateCIDutyCycleChan;
    CreateCIFreqChanPtr CreateCIFreqChan;
    CreateCIGPSTimestampChanPtr CreateCIGPSTimestampChan;
    CreateCILinEncoderChanPtr CreateCILinEncoderChan;
    CreateCILinVelocityChanPtr CreateCILinVelocityChan;
    CreateCIPeriodChanPtr CreateCIPeriodChan;
    CreateCIPulseChanFreqPtr CreateCIPulseChanFreq;
    CreateCIPulseChanTicksPtr CreateCIPulseChanTicks;
    CreateCIPulseChanTimePtr CreateCIPulseChanTime;
    CreateCIPulseWidthChanPtr CreateCIPulseWidthChan;
    CreateCISemiPeriodChanPtr CreateCISemiPeriodChan;
    CreateCITwoEdgeSepChanPtr CreateCITwoEdgeSepChan;
    CreateCOPulseChanFreqPtr CreateCOPulseChanFreq;
    CreateCOPulseChanTicksPtr CreateCOPulseChanTicks;
    CreateCOPulseChanTimePtr CreateCOPulseChanTime;
    CreateDIChanPtr CreateDIChan;
    CreateDOChanPtr CreateDOChan;
    CreateLinScalePtr CreateLinScale;
    CreateMapScalePtr CreateMapScale;
    CreatePolynomialScalePtr CreatePolynomialScale;
    CreateTEDSAIAccelChanPtr CreateTEDSAIAccelChan;
    CreateTEDSAIBridgeChanPtr CreateTEDSAIBridgeChan;
    CreateTEDSAICurrentChanPtr CreateTEDSAICurrentChan;
    CreateTEDSAIForceBridgeChanPtr CreateTEDSAIForceBridgeChan;
    CreateTEDSAIForceIEPEChanPtr CreateTEDSAIForceIEPEChan;
    CreateTEDSAIMicrophoneChanPtr CreateTEDSAIMicrophoneChan;
    CreateTEDSAIPosLVDTChanPtr CreateTEDSAIPosLVDTChan;
    CreateTEDSAIPosRVDTChanPtr CreateTEDSAIPosRVDTChan;
    CreateTEDSAIPressureBridgeChanPtr CreateTEDSAIPressureBridgeChan;
    CreateTEDSAIRTDChanPtr CreateTEDSAIRTDChan;
    CreateTEDSAIResistanceChanPtr CreateTEDSAIResistanceChan;
    CreateTEDSAIStrainGageChanPtr CreateTEDSAIStrainGageChan;
    CreateTEDSAIThrmcplChanPtr CreateTEDSAIThrmcplChan;
    CreateTEDSAIThrmstrChanIexPtr CreateTEDSAIThrmstrChanIex;
    CreateTEDSAIThrmstrChanVexPtr CreateTEDSAIThrmstrChanVex;
    CreateTEDSAITorqueBridgeChanPtr CreateTEDSAITorqueBridgeChan;
    CreateTEDSAIVoltageChanPtr CreateTEDSAIVoltageChan;
    CreateTEDSAIVoltageChanWithExcitPtr CreateTEDSAIVoltageChanWithExcit;
    CreateTableScalePtr CreateTableScale;
    CreateTaskPtr CreateTask;
    CreateWatchdogTimerTaskPtr CreateWatchdogTimerTask;
    CreateWatchdogTimerTaskExPtr CreateWatchdogTimerTaskEx;
    DeleteNetworkDevicePtr DeleteNetworkDevice;
    DeleteSavedGlobalChanPtr DeleteSavedGlobalChan;
    DeleteSavedScalePtr DeleteSavedScale;
    DeleteSavedTaskPtr DeleteSavedTask;
    DeviceSupportsCalPtr DeviceSupportsCal;
    DisableRefTrigPtr DisableRefTrig;
    DisableStartTrigPtr DisableStartTrig;
    DisconnectTermsPtr DisconnectTerms;
    ExportSignalPtr ExportSignal;
    GetAIACExcitFreqPtr GetAIACExcitFreq;
    GetAIACExcitSyncEnablePtr GetAIACExcitSyncEnable;
    GetAIACExcitWireModePtr GetAIACExcitWireMode;
    GetAIADCCustomTimingModePtr GetAIADCCustomTimingMode;
    GetAIADCTimingModePtr GetAIADCTimingMode;
    GetAIAccel4WireDCVoltageSensitivityPtr GetAIAccel4WireDCVoltageSensitivity;
    GetAIAccel4WireDCVoltageSensitivityUnitsPtr GetAIAccel4WireDCVoltageSensitivityUnits;
    GetAIAccelChargeSensitivityPtr GetAIAccelChargeSensitivity;
    GetAIAccelChargeSensitivityUnitsPtr GetAIAccelChargeSensitivityUnits;
    GetAIAccelSensitivityPtr GetAIAccelSensitivity;
    GetAIAccelSensitivityUnitsPtr GetAIAccelSensitivityUnits;
    GetAIAccelUnitsPtr GetAIAccelUnits;
    GetAIAcceldBRefPtr GetAIAcceldBRef;
    GetAIAttenPtr GetAIAtten;
    GetAIAutoZeroModePtr GetAIAutoZeroMode;
    GetAIAveragingWinSizePtr GetAIAveragingWinSize;
    GetAIBridgeBalanceCoarsePotPtr GetAIBridgeBalanceCoarsePot;
    GetAIBridgeBalanceFinePotPtr GetAIBridgeBalanceFinePot;
    GetAIBridgeCfgPtr GetAIBridgeCfg;
    GetAIBridgeElectricalUnitsPtr GetAIBridgeElectricalUnits;
    GetAIBridgeInitialRatioPtr GetAIBridgeInitialRatio;
    GetAIBridgeInitialVoltagePtr GetAIBridgeInitialVoltage;
    GetAIBridgeNomResistancePtr GetAIBridgeNomResistance;
    GetAIBridgePhysicalUnitsPtr GetAIBridgePhysicalUnits;
    GetAIBridgePolyForwardCoeffPtr GetAIBridgePolyForwardCoeff;
    GetAIBridgePolyReverseCoeffPtr GetAIBridgePolyReverseCoeff;
    GetAIBridgeScaleTypePtr GetAIBridgeScaleType;
    GetAIBridgeShuntCalEnablePtr GetAIBridgeShuntCalEnable;
    GetAIBridgeShuntCalGainAdjustPtr GetAIBridgeShuntCalGainAdjust;
    GetAIBridgeShuntCalSelectPtr GetAIBridgeShuntCalSelect;
    GetAIBridgeShuntCalShuntCalAActualResistancePtr GetAIBridgeShuntCalShuntCalAActualResistance;
    GetAIBridgeShuntCalShuntCalAResistancePtr GetAIBridgeShuntCalShuntCalAResistance;
    GetAIBridgeShuntCalShuntCalASrcPtr GetAIBridgeShuntCalShuntCalASrc;
    GetAIBridgeShuntCalShuntCalBActualResistancePtr GetAIBridgeShuntCalShuntCalBActualResistance;
    GetAIBridgeShuntCalShuntCalBResistancePtr GetAIBridgeShuntCalShuntCalBResistance;
    GetAIBridgeTableElectricalValsPtr GetAIBridgeTableElectricalVals;
    GetAIBridgeTablePhysicalValsPtr GetAIBridgeTablePhysicalVals;
    GetAIBridgeTwoPointLinFirstElectricalValPtr GetAIBridgeTwoPointLinFirstElectricalVal;
    GetAIBridgeTwoPointLinFirstPhysicalValPtr GetAIBridgeTwoPointLinFirstPhysicalVal;
    GetAIBridgeTwoPointLinSecondElectricalValPtr GetAIBridgeTwoPointLinSecondElectricalVal;
    GetAIBridgeTwoPointLinSecondPhysicalValPtr GetAIBridgeTwoPointLinSecondPhysicalVal;
    GetAIBridgeUnitsPtr GetAIBridgeUnits;
    GetAIChanCalApplyCalIfExpPtr GetAIChanCalApplyCalIfExp;
    GetAIChanCalCalDatePtr GetAIChanCalCalDate;
    GetAIChanCalDescPtr GetAIChanCalDesc;
    GetAIChanCalEnableCalPtr GetAIChanCalEnableCal;
    GetAIChanCalExpDatePtr GetAIChanCalExpDate;
    GetAIChanCalHasValidCalInfoPtr GetAIChanCalHasValidCalInfo;
    GetAIChanCalOperatorNamePtr GetAIChanCalOperatorName;
    GetAIChanCalPolyForwardCoeffPtr GetAIChanCalPolyForwardCoeff;
    GetAIChanCalPolyReverseCoeffPtr GetAIChanCalPolyReverseCoeff;
    GetAIChanCalScaleTypePtr GetAIChanCalScaleType;
    GetAIChanCalTablePreScaledValsPtr GetAIChanCalTablePreScaledVals;
    GetAIChanCalTableScaledValsPtr GetAIChanCalTableScaledVals;
    GetAIChanCalVerifAcqValsPtr GetAIChanCalVerifAcqVals;
    GetAIChanCalVerifRefValsPtr GetAIChanCalVerifRefVals;
    GetAIChargeUnitsPtr GetAIChargeUnits;
    GetAIChopEnablePtr GetAIChopEnable;
    GetAICouplingPtr GetAICoupling;
    GetAICurrentACRMSUnitsPtr GetAICurrentACRMSUnits;
    GetAICurrentShuntLocPtr GetAICurrentShuntLoc;
    GetAICurrentShuntResistancePtr GetAICurrentShuntResistance;
    GetAICurrentUnitsPtr GetAICurrentUnits;
    GetAICustomScaleNamePtr GetAICustomScaleName;
    GetAIDCOffsetPtr GetAIDCOffset;
    GetAIDataXferCustomThresholdPtr GetAIDataXferCustomThreshold;
    GetAIDataXferMaxRatePtr GetAIDataXferMaxRate;
    GetAIDataXferMechPtr GetAIDataXferMech;
    GetAIDataXferReqCondPtr GetAIDataXferReqCond;
    GetAIDevScalingCoeffPtr GetAIDevScalingCoeff;
    GetAIDigFltrBandpassCenterFreqPtr GetAIDigFltrBandpassCenterFreq;
    GetAIDigFltrBandpassWidthPtr GetAIDigFltrBandpassWidth;
    GetAIDigFltrCoeffPtr GetAIDigFltrCoeff;
    GetAIDigFltrEnablePtr GetAIDigFltrEnable;
    GetAIDigFltrHighpassCutoffFreqPtr GetAIDigFltrHighpassCutoffFreq;
    GetAIDigFltrLowpassCutoffFreqPtr GetAIDigFltrLowpassCutoffFreq;
    GetAIDigFltrNotchCenterFreqPtr GetAIDigFltrNotchCenterFreq;
    GetAIDigFltrNotchWidthPtr GetAIDigFltrNotchWidth;
    GetAIDigFltrOrderPtr GetAIDigFltrOrder;
    GetAIDigFltrResponsePtr GetAIDigFltrResponse;
    GetAIDigFltrTypePtr GetAIDigFltrType;
    GetAIDitherEnablePtr GetAIDitherEnable;
    GetAIEddyCurrentProxProbeSensitivityPtr GetAIEddyCurrentProxProbeSensitivity;
    GetAIEddyCurrentProxProbeSensitivityUnitsPtr GetAIEddyCurrentProxProbeSensitivityUnits;
    GetAIEddyCurrentProxProbeUnitsPtr GetAIEddyCurrentProxProbeUnits;
    GetAIEnhancedAliasRejectionEnablePtr GetAIEnhancedAliasRejectionEnable;
    GetAIExcitActualValPtr GetAIExcitActualVal;
    GetAIExcitDCorACPtr GetAIExcitDCorAC;
    GetAIExcitIdleOutputBehaviorPtr GetAIExcitIdleOutputBehavior;
    GetAIExcitSensePtr GetAIExcitSense;
    GetAIExcitSrcPtr GetAIExcitSrc;
    GetAIExcitUseForScalingPtr GetAIExcitUseForScaling;
    GetAIExcitUseMultiplexedPtr GetAIExcitUseMultiplexed;
    GetAIExcitValPtr GetAIExcitVal;
    GetAIExcitVoltageOrCurrentPtr GetAIExcitVoltageOrCurrent;
    GetAIFilterDelayPtr GetAIFilterDelay;
    GetAIFilterDelayAdjustmentPtr GetAIFilterDelayAdjustment;
    GetAIFilterDelayUnitsPtr GetAIFilterDelayUnits;
    GetAIFilterEnablePtr GetAIFilterEnable;
    GetAIFilterFreqPtr GetAIFilterFreq;
    GetAIFilterOrderPtr GetAIFilterOrder;
    GetAIFilterResponsePtr GetAIFilterResponse;
    GetAIForceIEPESensorSensitivityPtr GetAIForceIEPESensorSensitivity;
    GetAIForceIEPESensorSensitivityUnitsPtr GetAIForceIEPESensorSensitivityUnits;
    GetAIForceReadFromChanPtr GetAIForceReadFromChan;
    GetAIForceUnitsPtr GetAIForceUnits;
    GetAIFreqHystPtr GetAIFreqHyst;
    GetAIFreqThreshVoltagePtr GetAIFreqThreshVoltage;
    GetAIFreqUnitsPtr GetAIFreqUnits;
    GetAIGainPtr GetAIGain;
    GetAIInputLimitsFaultDetectEnablePtr GetAIInputLimitsFaultDetectEnable;
    GetAIInputLimitsFaultDetectLowerLimitPtr GetAIInputLimitsFaultDetectLowerLimit;
    GetAIInputLimitsFaultDetectUpperLimitPtr GetAIInputLimitsFaultDetectUpperLimit;
    GetAIInputSrcPtr GetAIInputSrc;
    GetAIIsTEDSPtr GetAIIsTEDS;
    GetAILVDTSensitivityPtr GetAILVDTSensitivity;
    GetAILVDTSensitivityUnitsPtr GetAILVDTSensitivityUnits;
    GetAILVDTUnitsPtr GetAILVDTUnits;
    GetAILeadWireResistancePtr GetAILeadWireResistance;
    GetAILossyLSBRemovalCompressedSampSizePtr GetAILossyLSBRemovalCompressedSampSize;
    GetAILowpassCutoffFreqPtr GetAILowpassCutoffFreq;
    GetAILowpassEnablePtr GetAILowpassEnable;
    GetAILowpassSwitchCapClkSrcPtr GetAILowpassSwitchCapClkSrc;
    GetAILowpassSwitchCapExtClkDivPtr GetAILowpassSwitchCapExtClkDiv;
    GetAILowpassSwitchCapExtClkFreqPtr GetAILowpassSwitchCapExtClkFreq;
    GetAILowpassSwitchCapOutClkDivPtr GetAILowpassSwitchCapOutClkDiv;
    GetAIMaxPtr GetAIMax;
    GetAIMeasTypePtr GetAIMeasType;
    GetAIMemMapEnablePtr GetAIMemMapEnable;
    GetAIMicrophoneSensitivityPtr GetAIMicrophoneSensitivity;
    GetAIMinPtr GetAIMin;
    GetAIOpenChanDetectEnablePtr GetAIOpenChanDetectEnable;
    GetAIOpenThrmcplDetectEnablePtr GetAIOpenThrmcplDetectEnable;
    GetAIOvercurrentDetectEnablePtr GetAIOvercurrentDetectEnable;
    GetAIPowerSupplyFaultDetectEnablePtr GetAIPowerSupplyFaultDetectEnable;
    GetAIPressureUnitsPtr GetAIPressureUnits;
    GetAIProbeAttenPtr GetAIProbeAtten;
    GetAIRTDAPtr GetAIRTDA;
    GetAIRTDBPtr GetAIRTDB;
    GetAIRTDCPtr GetAIRTDC;
    GetAIRTDR0Ptr GetAIRTDR0;
    GetAIRTDTypePtr GetAIRTDType;
    GetAIRVDTSensitivityPtr GetAIRVDTSensitivity;
    GetAIRVDTSensitivityUnitsPtr GetAIRVDTSensitivityUnits;
    GetAIRVDTUnitsPtr GetAIRVDTUnits;
    GetAIRawDataCompressionTypePtr GetAIRawDataCompressionType;
    GetAIRawSampJustificationPtr GetAIRawSampJustification;
    GetAIRawSampSizePtr GetAIRawSampSize;
    GetAIRemoveFilterDelayPtr GetAIRemoveFilterDelay;
    GetAIResistanceCfgPtr GetAIResistanceCfg;
    GetAIResistanceUnitsPtr GetAIResistanceUnits;
    GetAIResolutionPtr GetAIResolution;
    GetAIResolutionUnitsPtr GetAIResolutionUnits;
    GetAIRngHighPtr GetAIRngHigh;
    GetAIRngLowPtr GetAIRngLow;
    GetAIRosetteStrainGageOrientationPtr GetAIRosetteStrainGageOrientation;
    GetAIRosetteStrainGageRosetteMeasTypePtr GetAIRosetteStrainGageRosetteMeasType;
    GetAIRosetteStrainGageRosetteTypePtr GetAIRosetteStrainGageRosetteType;
    GetAIRosetteStrainGageStrainChansPtr GetAIRosetteStrainGageStrainChans;
    GetAISampAndHoldEnablePtr GetAISampAndHoldEnable;
    GetAISensorPowerCfgPtr GetAISensorPowerCfg;
    GetAISensorPowerTypePtr GetAISensorPowerType;
    GetAISensorPowerVoltagePtr GetAISensorPowerVoltage;
    GetAISoundPressureMaxSoundPressureLvlPtr GetAISoundPressureMaxSoundPressureLvl;
    GetAISoundPressureUnitsPtr GetAISoundPressureUnits;
    GetAISoundPressuredBRefPtr GetAISoundPressuredBRef;
    GetAIStrainGageCfgPtr GetAIStrainGageCfg;
    GetAIStrainGageForceReadFromChanPtr GetAIStrainGageForceReadFromChan;
    GetAIStrainGageGageFactorPtr GetAIStrainGageGageFactor;
    GetAIStrainGagePoissonRatioPtr GetAIStrainGagePoissonRatio;
    GetAIStrainUnitsPtr GetAIStrainUnits;
    GetAITEDSUnitsPtr GetAITEDSUnits;
    GetAITempUnitsPtr GetAITempUnits;
    GetAITermCfgPtr GetAITermCfg;
    GetAIThrmcplCJCChanPtr GetAIThrmcplCJCChan;
    GetAIThrmcplCJCSrcPtr GetAIThrmcplCJCSrc;
    GetAIThrmcplCJCValPtr GetAIThrmcplCJCVal;
    GetAIThrmcplLeadOffsetVoltagePtr GetAIThrmcplLeadOffsetVoltage;
    GetAIThrmcplScaleTypePtr GetAIThrmcplScaleType;
    GetAIThrmcplTypePtr GetAIThrmcplType;
    GetAIThrmstrAPtr GetAIThrmstrA;
    GetAIThrmstrBPtr GetAIThrmstrB;
    GetAIThrmstrCPtr GetAIThrmstrC;
    GetAIThrmstrR1Ptr GetAIThrmstrR1;
    GetAITorqueUnitsPtr GetAITorqueUnits;
    GetAIUsbXferReqCountPtr GetAIUsbXferReqCount;
    GetAIUsbXferReqSizePtr GetAIUsbXferReqSize;
    GetAIVelocityIEPESensorSensitivityPtr GetAIVelocityIEPESensorSensitivity;
    GetAIVelocityIEPESensorSensitivityUnitsPtr GetAIVelocityIEPESensorSensitivityUnits;
    GetAIVelocityIEPESensordBRefPtr GetAIVelocityIEPESensordBRef;
    GetAIVelocityUnitsPtr GetAIVelocityUnits;
    GetAIVoltageACRMSUnitsPtr GetAIVoltageACRMSUnits;
    GetAIVoltageUnitsPtr GetAIVoltageUnits;
    GetAIVoltagedBRefPtr GetAIVoltagedBRef;
    GetAOCurrentUnitsPtr GetAOCurrentUnits;
    GetAOCustomScaleNamePtr GetAOCustomScaleName;
    GetAODACOffsetExtSrcPtr GetAODACOffsetExtSrc;
    GetAODACOffsetSrcPtr GetAODACOffsetSrc;
    GetAODACOffsetValPtr GetAODACOffsetVal;
    GetAODACRefAllowConnToGndPtr GetAODACRefAllowConnToGnd;
    GetAODACRefConnToGndPtr GetAODACRefConnToGnd;
    GetAODACRefExtSrcPtr GetAODACRefExtSrc;
    GetAODACRefSrcPtr GetAODACRefSrc;
    GetAODACRefValPtr GetAODACRefVal;
    GetAODACRngHighPtr GetAODACRngHigh;
    GetAODACRngLowPtr GetAODACRngLow;
    GetAODataXferMechPtr GetAODataXferMech;
    GetAODataXferReqCondPtr GetAODataXferReqCond;
    GetAODevScalingCoeffPtr GetAODevScalingCoeff;
    GetAOEnhancedImageRejectionEnablePtr GetAOEnhancedImageRejectionEnable;
    GetAOFilterDelayPtr GetAOFilterDelay;
    GetAOFilterDelayAdjustmentPtr GetAOFilterDelayAdjustment;
    GetAOFilterDelayUnitsPtr GetAOFilterDelayUnits;
    GetAOFuncGenAmplitudePtr GetAOFuncGenAmplitude;
    GetAOFuncGenFMDeviationPtr GetAOFuncGenFMDeviation;
    GetAOFuncGenFreqPtr GetAOFuncGenFreq;
    GetAOFuncGenModulationTypePtr GetAOFuncGenModulationType;
    GetAOFuncGenOffsetPtr GetAOFuncGenOffset;
    GetAOFuncGenSquareDutyCyclePtr GetAOFuncGenSquareDutyCycle;
    GetAOFuncGenTypePtr GetAOFuncGenType;
    GetAOGainPtr GetAOGain;
    GetAOIdleOutputBehaviorPtr GetAOIdleOutputBehavior;
    GetAOLoadImpedancePtr GetAOLoadImpedance;
    GetAOMaxPtr GetAOMax;
    GetAOMemMapEnablePtr GetAOMemMapEnable;
    GetAOMinPtr GetAOMin;
    GetAOOutputImpedancePtr GetAOOutputImpedance;
    GetAOOutputTypePtr GetAOOutputType;
    GetAOReglitchEnablePtr GetAOReglitchEnable;
    GetAOResolutionPtr GetAOResolution;
    GetAOResolutionUnitsPtr GetAOResolutionUnits;
    GetAOTermCfgPtr GetAOTermCfg;
    GetAOUsbXferReqCountPtr GetAOUsbXferReqCount;
    GetAOUsbXferReqSizePtr GetAOUsbXferReqSize;
    GetAOUseOnlyOnBrdMemPtr GetAOUseOnlyOnBrdMem;
    GetAOVoltageCurrentLimitPtr GetAOVoltageCurrentLimit;
    GetAOVoltageUnitsPtr GetAOVoltageUnits;
    GetArmStartTrigTimestampValPtr GetArmStartTrigTimestampVal;
    GetArmStartTrigTrigWhenPtr GetArmStartTrigTrigWhen;
    GetAutoConfiguredCDAQSyncConnectionsPtr GetAutoConfiguredCDAQSyncConnections;
    GetBufInputBufSizePtr GetBufInputBufSize;
    GetBufInputOnbrdBufSizePtr GetBufInputOnbrdBufSize;
    GetBufOutputBufSizePtr GetBufOutputBufSize;
    GetBufOutputOnbrdBufSizePtr GetBufOutputOnbrdBufSize;
    GetCIAngEncoderInitialAnglePtr GetCIAngEncoderInitialAngle;
    GetCIAngEncoderPulsesPerRevPtr GetCIAngEncoderPulsesPerRev;
    GetCIAngEncoderUnitsPtr GetCIAngEncoderUnits;
    GetCICountPtr GetCICount;
    GetCICountEdgesActiveEdgePtr GetCICountEdgesActiveEdge;
    GetCICountEdgesCountDirDigFltrEnablePtr GetCICountEdgesCountDirDigFltrEnable;
    GetCICountEdgesCountDirDigFltrMinPulseWidthPtr GetCICountEdgesCountDirDigFltrMinPulseWidth;
    GetCICountEdgesCountDirDigFltrTimebaseRatePtr GetCICountEdgesCountDirDigFltrTimebaseRate;
    GetCICountEdgesCountDirDigFltrTimebaseSrcPtr GetCICountEdgesCountDirDigFltrTimebaseSrc;
    GetCICountEdgesCountDirDigSyncEnablePtr GetCICountEdgesCountDirDigSyncEnable;
    GetCICountEdgesCountDirHystPtr GetCICountEdgesCountDirHyst;
    GetCICountEdgesCountDirLogicLvlBehaviorPtr GetCICountEdgesCountDirLogicLvlBehavior;
    GetCICountEdgesCountDirTermCfgPtr GetCICountEdgesCountDirTermCfg;
    GetCICountEdgesCountDirThreshVoltagePtr GetCICountEdgesCountDirThreshVoltage;
    GetCICountEdgesCountResetActiveEdgePtr GetCICountEdgesCountResetActiveEdge;
    GetCICountEdgesCountResetDigFltrEnablePtr GetCICountEdgesCountResetDigFltrEnable;
    GetCICountEdgesCountResetDigFltrMinPulseWidthPtr GetCICountEdgesCountResetDigFltrMinPulseWidth;
    GetCICountEdgesCountResetDigFltrTimebaseRatePtr GetCICountEdgesCountResetDigFltrTimebaseRate;
    GetCICountEdgesCountResetDigFltrTimebaseSrcPtr GetCICountEdgesCountResetDigFltrTimebaseSrc;
    GetCICountEdgesCountResetDigSyncEnablePtr GetCICountEdgesCountResetDigSyncEnable;
    GetCICountEdgesCountResetEnablePtr GetCICountEdgesCountResetEnable;
    GetCICountEdgesCountResetHystPtr GetCICountEdgesCountResetHyst;
    GetCICountEdgesCountResetLogicLvlBehaviorPtr GetCICountEdgesCountResetLogicLvlBehavior;
    GetCICountEdgesCountResetResetCountPtr GetCICountEdgesCountResetResetCount;
    GetCICountEdgesCountResetTermPtr GetCICountEdgesCountResetTerm;
    GetCICountEdgesCountResetTermCfgPtr GetCICountEdgesCountResetTermCfg;
    GetCICountEdgesCountResetThreshVoltagePtr GetCICountEdgesCountResetThreshVoltage;
    GetCICountEdgesDigFltrEnablePtr GetCICountEdgesDigFltrEnable;
    GetCICountEdgesDigFltrMinPulseWidthPtr GetCICountEdgesDigFltrMinPulseWidth;
    GetCICountEdgesDigFltrTimebaseRatePtr GetCICountEdgesDigFltrTimebaseRate;
    GetCICountEdgesDigFltrTimebaseSrcPtr GetCICountEdgesDigFltrTimebaseSrc;
    GetCICountEdgesDigSyncEnablePtr GetCICountEdgesDigSyncEnable;
    GetCICountEdgesDirPtr GetCICountEdgesDir;
    GetCICountEdgesDirTermPtr GetCICountEdgesDirTerm;
    GetCICountEdgesGateDigFltrEnablePtr GetCICountEdgesGateDigFltrEnable;
    GetCICountEdgesGateDigFltrMinPulseWidthPtr GetCICountEdgesGateDigFltrMinPulseWidth;
    GetCICountEdgesGateDigFltrTimebaseRatePtr GetCICountEdgesGateDigFltrTimebaseRate;
    GetCICountEdgesGateDigFltrTimebaseSrcPtr GetCICountEdgesGateDigFltrTimebaseSrc;
    GetCICountEdgesGateEnablePtr GetCICountEdgesGateEnable;
    GetCICountEdgesGateHystPtr GetCICountEdgesGateHyst;
    GetCICountEdgesGateLogicLvlBehaviorPtr GetCICountEdgesGateLogicLvlBehavior;
    GetCICountEdgesGateTermPtr GetCICountEdgesGateTerm;
    GetCICountEdgesGateTermCfgPtr GetCICountEdgesGateTermCfg;
    GetCICountEdgesGateThreshVoltagePtr GetCICountEdgesGateThreshVoltage;
    GetCICountEdgesGateWhenPtr GetCICountEdgesGateWhen;
    GetCICountEdgesHystPtr GetCICountEdgesHyst;
    GetCICountEdgesInitialCntPtr GetCICountEdgesInitialCnt;
    GetCICountEdgesLogicLvlBehaviorPtr GetCICountEdgesLogicLvlBehavior;
    GetCICountEdgesTermPtr GetCICountEdgesTerm;
    GetCICountEdgesTermCfgPtr GetCICountEdgesTermCfg;
    GetCICountEdgesThreshVoltagePtr GetCICountEdgesThreshVoltage;
    GetCICtrTimebaseActiveEdgePtr GetCICtrTimebaseActiveEdge;
    GetCICtrTimebaseDigFltrEnablePtr GetCICtrTimebaseDigFltrEnable;
    GetCICtrTimebaseDigFltrMinPulseWidthPtr GetCICtrTimebaseDigFltrMinPulseWidth;
    GetCICtrTimebaseDigFltrTimebaseRatePtr GetCICtrTimebaseDigFltrTimebaseRate;
    GetCICtrTimebaseDigFltrTimebaseSrcPtr GetCICtrTimebaseDigFltrTimebaseSrc;
    GetCICtrTimebaseDigSyncEnablePtr GetCICtrTimebaseDigSyncEnable;
    GetCICtrTimebaseMasterTimebaseDivPtr GetCICtrTimebaseMasterTimebaseDiv;
    GetCICtrTimebaseRatePtr GetCICtrTimebaseRate;
    GetCICtrTimebaseSrcPtr GetCICtrTimebaseSrc;
    GetCICustomScaleNamePtr GetCICustomScaleName;
    GetCIDataXferMechPtr GetCIDataXferMech;
    GetCIDataXferReqCondPtr GetCIDataXferReqCond;
    GetCIDupCountPreventPtr GetCIDupCountPrevent;
    GetCIDutyCycleDigFltrEnablePtr GetCIDutyCycleDigFltrEnable;
    GetCIDutyCycleDigFltrMinPulseWidthPtr GetCIDutyCycleDigFltrMinPulseWidth;
    GetCIDutyCycleDigFltrTimebaseRatePtr GetCIDutyCycleDigFltrTimebaseRate;
    GetCIDutyCycleDigFltrTimebaseSrcPtr GetCIDutyCycleDigFltrTimebaseSrc;
    GetCIDutyCycleLogicLvlBehaviorPtr GetCIDutyCycleLogicLvlBehavior;
    GetCIDutyCycleStartingEdgePtr GetCIDutyCycleStartingEdge;
    GetCIDutyCycleTermPtr GetCIDutyCycleTerm;
    GetCIDutyCycleTermCfgPtr GetCIDutyCycleTermCfg;
    GetCIEncoderAInputDigFltrEnablePtr GetCIEncoderAInputDigFltrEnable;
    GetCIEncoderAInputDigFltrMinPulseWidthPtr GetCIEncoderAInputDigFltrMinPulseWidth;
    GetCIEncoderAInputDigFltrTimebaseRatePtr GetCIEncoderAInputDigFltrTimebaseRate;
    GetCIEncoderAInputDigFltrTimebaseSrcPtr GetCIEncoderAInputDigFltrTimebaseSrc;
    GetCIEncoderAInputDigSyncEnablePtr GetCIEncoderAInputDigSyncEnable;
    GetCIEncoderAInputLogicLvlBehaviorPtr GetCIEncoderAInputLogicLvlBehavior;
    GetCIEncoderAInputTermPtr GetCIEncoderAInputTerm;
    GetCIEncoderAInputTermCfgPtr GetCIEncoderAInputTermCfg;
    GetCIEncoderBInputDigFltrEnablePtr GetCIEncoderBInputDigFltrEnable;
    GetCIEncoderBInputDigFltrMinPulseWidthPtr GetCIEncoderBInputDigFltrMinPulseWidth;
    GetCIEncoderBInputDigFltrTimebaseRatePtr GetCIEncoderBInputDigFltrTimebaseRate;
    GetCIEncoderBInputDigFltrTimebaseSrcPtr GetCIEncoderBInputDigFltrTimebaseSrc;
    GetCIEncoderBInputDigSyncEnablePtr GetCIEncoderBInputDigSyncEnable;
    GetCIEncoderBInputLogicLvlBehaviorPtr GetCIEncoderBInputLogicLvlBehavior;
    GetCIEncoderBInputTermPtr GetCIEncoderBInputTerm;
    GetCIEncoderBInputTermCfgPtr GetCIEncoderBInputTermCfg;
    GetCIEncoderDecodingTypePtr GetCIEncoderDecodingType;
    GetCIEncoderZIndexEnablePtr GetCIEncoderZIndexEnable;
    GetCIEncoderZIndexPhasePtr GetCIEncoderZIndexPhase;
    GetCIEncoderZIndexValPtr GetCIEncoderZIndexVal;
    GetCIEncoderZInputDigFltrEnablePtr GetCIEncoderZInputDigFltrEnable;
    GetCIEncoderZInputDigFltrMinPulseWidthPtr GetCIEncoderZInputDigFltrMinPulseWidth;
    GetCIEncoderZInputDigFltrTimebaseRatePtr GetCIEncoderZInputDigFltrTimebaseRate;
    GetCIEncoderZInputDigFltrTimebaseSrcPtr GetCIEncoderZInputDigFltrTimebaseSrc;
    GetCIEncoderZInputDigSyncEnablePtr GetCIEncoderZInputDigSyncEnable;
    GetCIEncoderZInputLogicLvlBehaviorPtr GetCIEncoderZInputLogicLvlBehavior;
    GetCIEncoderZInputTermPtr GetCIEncoderZInputTerm;
    GetCIEncoderZInputTermCfgPtr GetCIEncoderZInputTermCfg;
    GetCIFilterDelayPtr GetCIFilterDelay;
    GetCIFilterDelayUnitsPtr GetCIFilterDelayUnits;
    GetCIFilterEnablePtr GetCIFilterEnable;
    GetCIFilterFreqPtr GetCIFilterFreq;
    GetCIFilterOrderPtr GetCIFilterOrder;
    GetCIFilterResponsePtr GetCIFilterResponse;
    GetCIFreqDigFltrEnablePtr GetCIFreqDigFltrEnable;
    GetCIFreqDigFltrMinPulseWidthPtr GetCIFreqDigFltrMinPulseWidth;
    GetCIFreqDigFltrTimebaseRatePtr GetCIFreqDigFltrTimebaseRate;
    GetCIFreqDigFltrTimebaseSrcPtr GetCIFreqDigFltrTimebaseSrc;
    GetCIFreqDigSyncEnablePtr GetCIFreqDigSyncEnable;
    GetCIFreqDivPtr GetCIFreqDiv;
    GetCIFreqEnableAveragingPtr GetCIFreqEnableAveraging;
    GetCIFreqHystPtr GetCIFreqHyst;
    GetCIFreqLogicLvlBehaviorPtr GetCIFreqLogicLvlBehavior;
    GetCIFreqMeasMethPtr GetCIFreqMeasMeth;
    GetCIFreqMeasTimePtr GetCIFreqMeasTime;
    GetCIFreqStartingEdgePtr GetCIFreqStartingEdge;
    GetCIFreqTermPtr GetCIFreqTerm;
    GetCIFreqTermCfgPtr GetCIFreqTermCfg;
    GetCIFreqThreshVoltagePtr GetCIFreqThreshVoltage;
    GetCIFreqUnitsPtr GetCIFreqUnits;
    GetCIGPSSyncMethodPtr GetCIGPSSyncMethod;
    GetCIGPSSyncSrcPtr GetCIGPSSyncSrc;
    GetCILinEncoderDistPerPulsePtr GetCILinEncoderDistPerPulse;
    GetCILinEncoderInitialPosPtr GetCILinEncoderInitialPos;
    GetCILinEncoderUnitsPtr GetCILinEncoderUnits;
    GetCIMaxPtr GetCIMax;
    GetCIMaxMeasPeriodPtr GetCIMaxMeasPeriod;
    GetCIMeasTypePtr GetCIMeasType;
    GetCIMemMapEnablePtr GetCIMemMapEnable;
    GetCIMinPtr GetCIMin;
    GetCINumPossiblyInvalidSampsPtr GetCINumPossiblyInvalidSamps;
    GetCIOutputStatePtr GetCIOutputState;
    GetCIPeriodDigFltrEnablePtr GetCIPeriodDigFltrEnable;
    GetCIPeriodDigFltrMinPulseWidthPtr GetCIPeriodDigFltrMinPulseWidth;
    GetCIPeriodDigFltrTimebaseRatePtr GetCIPeriodDigFltrTimebaseRate;
    GetCIPeriodDigFltrTimebaseSrcPtr GetCIPeriodDigFltrTimebaseSrc;
    GetCIPeriodDigSyncEnablePtr GetCIPeriodDigSyncEnable;
    GetCIPeriodDivPtr GetCIPeriodDiv;
    GetCIPeriodEnableAveragingPtr GetCIPeriodEnableAveraging;
    GetCIPeriodHystPtr GetCIPeriodHyst;
    GetCIPeriodLogicLvlBehaviorPtr GetCIPeriodLogicLvlBehavior;
    GetCIPeriodMeasMethPtr GetCIPeriodMeasMeth;
    GetCIPeriodMeasTimePtr GetCIPeriodMeasTime;
    GetCIPeriodStartingEdgePtr GetCIPeriodStartingEdge;
    GetCIPeriodTermPtr GetCIPeriodTerm;
    GetCIPeriodTermCfgPtr GetCIPeriodTermCfg;
    GetCIPeriodThreshVoltagePtr GetCIPeriodThreshVoltage;
    GetCIPeriodUnitsPtr GetCIPeriodUnits;
    GetCIPrescalerPtr GetCIPrescaler;
    GetCIPulseFreqDigFltrEnablePtr GetCIPulseFreqDigFltrEnable;
    GetCIPulseFreqDigFltrMinPulseWidthPtr GetCIPulseFreqDigFltrMinPulseWidth;
    GetCIPulseFreqDigFltrTimebaseRatePtr GetCIPulseFreqDigFltrTimebaseRate;
    GetCIPulseFreqDigFltrTimebaseSrcPtr GetCIPulseFreqDigFltrTimebaseSrc;
    GetCIPulseFreqDigSyncEnablePtr GetCIPulseFreqDigSyncEnable;
    GetCIPulseFreqLogicLvlBehaviorPtr GetCIPulseFreqLogicLvlBehavior;
    GetCIPulseFreqStartEdgePtr GetCIPulseFreqStartEdge;
    GetCIPulseFreqTermPtr GetCIPulseFreqTerm;
    GetCIPulseFreqTermCfgPtr GetCIPulseFreqTermCfg;
    GetCIPulseFreqUnitsPtr GetCIPulseFreqUnits;
    GetCIPulseTicksDigFltrEnablePtr GetCIPulseTicksDigFltrEnable;
    GetCIPulseTicksDigFltrMinPulseWidthPtr GetCIPulseTicksDigFltrMinPulseWidth;
    GetCIPulseTicksDigFltrTimebaseRatePtr GetCIPulseTicksDigFltrTimebaseRate;
    GetCIPulseTicksDigFltrTimebaseSrcPtr GetCIPulseTicksDigFltrTimebaseSrc;
    GetCIPulseTicksDigSyncEnablePtr GetCIPulseTicksDigSyncEnable;
    GetCIPulseTicksLogicLvlBehaviorPtr GetCIPulseTicksLogicLvlBehavior;
    GetCIPulseTicksStartEdgePtr GetCIPulseTicksStartEdge;
    GetCIPulseTicksTermPtr GetCIPulseTicksTerm;
    GetCIPulseTicksTermCfgPtr GetCIPulseTicksTermCfg;
    GetCIPulseTimeDigFltrEnablePtr GetCIPulseTimeDigFltrEnable;
    GetCIPulseTimeDigFltrMinPulseWidthPtr GetCIPulseTimeDigFltrMinPulseWidth;
    GetCIPulseTimeDigFltrTimebaseRatePtr GetCIPulseTimeDigFltrTimebaseRate;
    GetCIPulseTimeDigFltrTimebaseSrcPtr GetCIPulseTimeDigFltrTimebaseSrc;
    GetCIPulseTimeDigSyncEnablePtr GetCIPulseTimeDigSyncEnable;
    GetCIPulseTimeLogicLvlBehaviorPtr GetCIPulseTimeLogicLvlBehavior;
    GetCIPulseTimeStartEdgePtr GetCIPulseTimeStartEdge;
    GetCIPulseTimeTermPtr GetCIPulseTimeTerm;
    GetCIPulseTimeTermCfgPtr GetCIPulseTimeTermCfg;
    GetCIPulseTimeUnitsPtr GetCIPulseTimeUnits;
    GetCIPulseWidthDigFltrEnablePtr GetCIPulseWidthDigFltrEnable;
    GetCIPulseWidthDigFltrMinPulseWidthPtr GetCIPulseWidthDigFltrMinPulseWidth;
    GetCIPulseWidthDigFltrTimebaseRatePtr GetCIPulseWidthDigFltrTimebaseRate;
    GetCIPulseWidthDigFltrTimebaseSrcPtr GetCIPulseWidthDigFltrTimebaseSrc;
    GetCIPulseWidthDigSyncEnablePtr GetCIPulseWidthDigSyncEnable;
    GetCIPulseWidthLogicLvlBehaviorPtr GetCIPulseWidthLogicLvlBehavior;
    GetCIPulseWidthStartingEdgePtr GetCIPulseWidthStartingEdge;
    GetCIPulseWidthTermPtr GetCIPulseWidthTerm;
    GetCIPulseWidthTermCfgPtr GetCIPulseWidthTermCfg;
    GetCIPulseWidthUnitsPtr GetCIPulseWidthUnits;
    GetCISampClkOverrunBehaviorPtr GetCISampClkOverrunBehavior;
    GetCISampClkOverrunSentinelValPtr GetCISampClkOverrunSentinelVal;
    GetCISemiPeriodDigFltrEnablePtr GetCISemiPeriodDigFltrEnable;
    GetCISemiPeriodDigFltrMinPulseWidthPtr GetCISemiPeriodDigFltrMinPulseWidth;
    GetCISemiPeriodDigFltrTimebaseRatePtr GetCISemiPeriodDigFltrTimebaseRate;
    GetCISemiPeriodDigFltrTimebaseSrcPtr GetCISemiPeriodDigFltrTimebaseSrc;
    GetCISemiPeriodDigSyncEnablePtr GetCISemiPeriodDigSyncEnable;
    GetCISemiPeriodLogicLvlBehaviorPtr GetCISemiPeriodLogicLvlBehavior;
    GetCISemiPeriodStartingEdgePtr GetCISemiPeriodStartingEdge;
    GetCISemiPeriodTermPtr GetCISemiPeriodTerm;
    GetCISemiPeriodTermCfgPtr GetCISemiPeriodTermCfg;
    GetCISemiPeriodUnitsPtr GetCISemiPeriodUnits;
    GetCITCReachedPtr GetCITCReached;
    GetCIThreshVoltagePtr GetCIThreshVoltage;
    GetCITimestampInitialSecondsPtr GetCITimestampInitialSeconds;
    GetCITimestampUnitsPtr GetCITimestampUnits;
    GetCITwoEdgeSepFirstDigFltrEnablePtr GetCITwoEdgeSepFirstDigFltrEnable;
    GetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr GetCITwoEdgeSepFirstDigFltrMinPulseWidth;
    GetCITwoEdgeSepFirstDigFltrTimebaseRatePtr GetCITwoEdgeSepFirstDigFltrTimebaseRate;
    GetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr GetCITwoEdgeSepFirstDigFltrTimebaseSrc;
    GetCITwoEdgeSepFirstDigSyncEnablePtr GetCITwoEdgeSepFirstDigSyncEnable;
    GetCITwoEdgeSepFirstEdgePtr GetCITwoEdgeSepFirstEdge;
    GetCITwoEdgeSepFirstLogicLvlBehaviorPtr GetCITwoEdgeSepFirstLogicLvlBehavior;
    GetCITwoEdgeSepFirstTermPtr GetCITwoEdgeSepFirstTerm;
    GetCITwoEdgeSepFirstTermCfgPtr GetCITwoEdgeSepFirstTermCfg;
    GetCITwoEdgeSepSecondDigFltrEnablePtr GetCITwoEdgeSepSecondDigFltrEnable;
    GetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr GetCITwoEdgeSepSecondDigFltrMinPulseWidth;
    GetCITwoEdgeSepSecondDigFltrTimebaseRatePtr GetCITwoEdgeSepSecondDigFltrTimebaseRate;
    GetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr GetCITwoEdgeSepSecondDigFltrTimebaseSrc;
    GetCITwoEdgeSepSecondDigSyncEnablePtr GetCITwoEdgeSepSecondDigSyncEnable;
    GetCITwoEdgeSepSecondEdgePtr GetCITwoEdgeSepSecondEdge;
    GetCITwoEdgeSepSecondLogicLvlBehaviorPtr GetCITwoEdgeSepSecondLogicLvlBehavior;
    GetCITwoEdgeSepSecondTermPtr GetCITwoEdgeSepSecondTerm;
    GetCITwoEdgeSepSecondTermCfgPtr GetCITwoEdgeSepSecondTermCfg;
    GetCITwoEdgeSepUnitsPtr GetCITwoEdgeSepUnits;
    GetCIUsbXferReqCountPtr GetCIUsbXferReqCount;
    GetCIUsbXferReqSizePtr GetCIUsbXferReqSize;
    GetCIVelocityAngEncoderPulsesPerRevPtr GetCIVelocityAngEncoderPulsesPerRev;
    GetCIVelocityAngEncoderUnitsPtr GetCIVelocityAngEncoderUnits;
    GetCIVelocityDivPtr GetCIVelocityDiv;
    GetCIVelocityEncoderAInputDigFltrEnablePtr GetCIVelocityEncoderAInputDigFltrEnable;
    GetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr GetCIVelocityEncoderAInputDigFltrMinPulseWidth;
    GetCIVelocityEncoderAInputDigFltrTimebaseRatePtr GetCIVelocityEncoderAInputDigFltrTimebaseRate;
    GetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr GetCIVelocityEncoderAInputDigFltrTimebaseSrc;
    GetCIVelocityEncoderAInputLogicLvlBehaviorPtr GetCIVelocityEncoderAInputLogicLvlBehavior;
    GetCIVelocityEncoderAInputTermPtr GetCIVelocityEncoderAInputTerm;
    GetCIVelocityEncoderAInputTermCfgPtr GetCIVelocityEncoderAInputTermCfg;
    GetCIVelocityEncoderBInputDigFltrEnablePtr GetCIVelocityEncoderBInputDigFltrEnable;
    GetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr GetCIVelocityEncoderBInputDigFltrMinPulseWidth;
    GetCIVelocityEncoderBInputDigFltrTimebaseRatePtr GetCIVelocityEncoderBInputDigFltrTimebaseRate;
    GetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr GetCIVelocityEncoderBInputDigFltrTimebaseSrc;
    GetCIVelocityEncoderBInputLogicLvlBehaviorPtr GetCIVelocityEncoderBInputLogicLvlBehavior;
    GetCIVelocityEncoderBInputTermPtr GetCIVelocityEncoderBInputTerm;
    GetCIVelocityEncoderBInputTermCfgPtr GetCIVelocityEncoderBInputTermCfg;
    GetCIVelocityEncoderDecodingTypePtr GetCIVelocityEncoderDecodingType;
    GetCIVelocityLinEncoderDistPerPulsePtr GetCIVelocityLinEncoderDistPerPulse;
    GetCIVelocityLinEncoderUnitsPtr GetCIVelocityLinEncoderUnits;
    GetCIVelocityMeasTimePtr GetCIVelocityMeasTime;
    GetCOAutoIncrCntPtr GetCOAutoIncrCnt;
    GetCOConstrainedGenModePtr GetCOConstrainedGenMode;
    GetCOCountPtr GetCOCount;
    GetCOCtrTimebaseActiveEdgePtr GetCOCtrTimebaseActiveEdge;
    GetCOCtrTimebaseDigFltrEnablePtr GetCOCtrTimebaseDigFltrEnable;
    GetCOCtrTimebaseDigFltrMinPulseWidthPtr GetCOCtrTimebaseDigFltrMinPulseWidth;
    GetCOCtrTimebaseDigFltrTimebaseRatePtr GetCOCtrTimebaseDigFltrTimebaseRate;
    GetCOCtrTimebaseDigFltrTimebaseSrcPtr GetCOCtrTimebaseDigFltrTimebaseSrc;
    GetCOCtrTimebaseDigSyncEnablePtr GetCOCtrTimebaseDigSyncEnable;
    GetCOCtrTimebaseMasterTimebaseDivPtr GetCOCtrTimebaseMasterTimebaseDiv;
    GetCOCtrTimebaseRatePtr GetCOCtrTimebaseRate;
    GetCOCtrTimebaseSrcPtr GetCOCtrTimebaseSrc;
    GetCODataXferMechPtr GetCODataXferMech;
    GetCODataXferReqCondPtr GetCODataXferReqCond;
    GetCOEnableInitialDelayOnRetriggerPtr GetCOEnableInitialDelayOnRetrigger;
    GetCOMemMapEnablePtr GetCOMemMapEnable;
    GetCOOutputStatePtr GetCOOutputState;
    GetCOOutputTypePtr GetCOOutputType;
    GetCOPrescalerPtr GetCOPrescaler;
    GetCOPulseDonePtr GetCOPulseDone;
    GetCOPulseDutyCycPtr GetCOPulseDutyCyc;
    GetCOPulseFreqPtr GetCOPulseFreq;
    GetCOPulseFreqInitialDelayPtr GetCOPulseFreqInitialDelay;
    GetCOPulseFreqUnitsPtr GetCOPulseFreqUnits;
    GetCOPulseHighTicksPtr GetCOPulseHighTicks;
    GetCOPulseHighTimePtr GetCOPulseHighTime;
    GetCOPulseIdleStatePtr GetCOPulseIdleState;
    GetCOPulseLowTicksPtr GetCOPulseLowTicks;
    GetCOPulseLowTimePtr GetCOPulseLowTime;
    GetCOPulseTermPtr GetCOPulseTerm;
    GetCOPulseTicksInitialDelayPtr GetCOPulseTicksInitialDelay;
    GetCOPulseTimeInitialDelayPtr GetCOPulseTimeInitialDelay;
    GetCOPulseTimeUnitsPtr GetCOPulseTimeUnits;
    GetCORdyForNewValPtr GetCORdyForNewVal;
    GetCOUsbXferReqCountPtr GetCOUsbXferReqCount;
    GetCOUsbXferReqSizePtr GetCOUsbXferReqSize;
    GetCOUseOnlyOnBrdMemPtr GetCOUseOnlyOnBrdMem;
    GetCalAccConnectionCountPtr GetCalAccConnectionCount;
    GetCalDevTempPtr GetCalDevTemp;
    GetCalRecommendedAccConnectionCountLimitPtr GetCalRecommendedAccConnectionCountLimit;
    GetCalUserDefinedInfoPtr GetCalUserDefinedInfo;
    GetCalUserDefinedInfoMaxSizePtr GetCalUserDefinedInfoMaxSize;
    GetChanDescrPtr GetChanDescr;
    GetChanIsGlobalPtr GetChanIsGlobal;
    GetChanSyncUnlockBehaviorPtr GetChanSyncUnlockBehavior;
    GetChanTypePtr GetChanType;
    GetDIAcquireOnPtr GetDIAcquireOn;
    GetDIDataXferMechPtr GetDIDataXferMech;
    GetDIDataXferReqCondPtr GetDIDataXferReqCond;
    GetDIDigFltrEnablePtr GetDIDigFltrEnable;
    GetDIDigFltrEnableBusModePtr GetDIDigFltrEnableBusMode;
    GetDIDigFltrMinPulseWidthPtr GetDIDigFltrMinPulseWidth;
    GetDIDigFltrTimebaseRatePtr GetDIDigFltrTimebaseRate;
    GetDIDigFltrTimebaseSrcPtr GetDIDigFltrTimebaseSrc;
    GetDIDigSyncEnablePtr GetDIDigSyncEnable;
    GetDIInvertLinesPtr GetDIInvertLines;
    GetDILogicFamilyPtr GetDILogicFamily;
    GetDIMemMapEnablePtr GetDIMemMapEnable;
    GetDINumLinesPtr GetDINumLines;
    GetDITristatePtr GetDITristate;
    GetDIUsbXferReqCountPtr GetDIUsbXferReqCount;
    GetDIUsbXferReqSizePtr GetDIUsbXferReqSize;
    GetDODataXferMechPtr GetDODataXferMech;
    GetDODataXferReqCondPtr GetDODataXferReqCond;
    GetDOGenerateOnPtr GetDOGenerateOn;
    GetDOInvertLinesPtr GetDOInvertLines;
    GetDOLineStatesDoneStatePtr GetDOLineStatesDoneState;
    GetDOLineStatesPausedStatePtr GetDOLineStatesPausedState;
    GetDOLineStatesStartStatePtr GetDOLineStatesStartState;
    GetDOLogicFamilyPtr GetDOLogicFamily;
    GetDOMemMapEnablePtr GetDOMemMapEnable;
    GetDONumLinesPtr GetDONumLines;
    GetDOOutputDriveTypePtr GetDOOutputDriveType;
    GetDOOvercurrentAutoReenablePtr GetDOOvercurrentAutoReenable;
    GetDOOvercurrentLimitPtr GetDOOvercurrentLimit;
    GetDOOvercurrentReenablePeriodPtr GetDOOvercurrentReenablePeriod;
    GetDOTristatePtr GetDOTristate;
    GetDOUsbXferReqCountPtr GetDOUsbXferReqCount;
    GetDOUsbXferReqSizePtr GetDOUsbXferReqSize;
    GetDOUseOnlyOnBrdMemPtr GetDOUseOnlyOnBrdMem;
    GetDigitalLogicFamilyPowerUpStatePtr GetDigitalLogicFamilyPowerUpState;
    GetDisconnectedCDAQSyncPortsPtr GetDisconnectedCDAQSyncPorts;
    GetErrorStringPtr GetErrorString;
    GetExtCalLastTempPtr GetExtCalLastTemp;
    GetExtCalRecommendedIntervalPtr GetExtCalRecommendedInterval;
    GetExtendedErrorInfoPtr GetExtendedErrorInfo;
    GetFirstSampClkWhenPtr GetFirstSampClkWhen;
    GetFirstSampTimestampValPtr GetFirstSampTimestampVal;
    GetNthTaskChannelPtr GetNthTaskChannel;
    GetNthTaskDevicePtr GetNthTaskDevice;
    GetNthTaskReadChannelPtr GetNthTaskReadChannel;
    GetPhysicalChanNamePtr GetPhysicalChanName;
    GetRefTrigTimestampValPtr GetRefTrigTimestampVal;
    GetSelfCalLastDateAndTimePtr GetSelfCalLastDateAndTime;
    GetSelfCalLastTempPtr GetSelfCalLastTemp;
    GetSelfCalSupportedPtr GetSelfCalSupported;
    GetStartTrigTimestampValPtr GetStartTrigTimestampVal;
    GetStartTrigTrigWhenPtr GetStartTrigTrigWhen;
    GetSyncPulseTimeWhenPtr GetSyncPulseTimeWhen;
    IsTaskDonePtr IsTaskDone;
    LoadTaskPtr LoadTask;
    ReadAnalogF64Ptr ReadAnalogF64;
    ReadAnalogScalarF64Ptr ReadAnalogScalarF64;
    ReadBinaryI16Ptr ReadBinaryI16;
    ReadBinaryI32Ptr ReadBinaryI32;
    ReadBinaryU16Ptr ReadBinaryU16;
    ReadBinaryU32Ptr ReadBinaryU32;
    ReadCounterF64Ptr ReadCounterF64;
    ReadCounterF64ExPtr ReadCounterF64Ex;
    ReadCounterScalarF64Ptr ReadCounterScalarF64;
    ReadCounterScalarU32Ptr ReadCounterScalarU32;
    ReadCounterU32Ptr ReadCounterU32;
    ReadCounterU32ExPtr ReadCounterU32Ex;
    ReadCtrFreqPtr ReadCtrFreq;
    ReadCtrFreqScalarPtr ReadCtrFreqScalar;
    ReadCtrTicksPtr ReadCtrTicks;
    ReadCtrTicksScalarPtr ReadCtrTicksScalar;
    ReadCtrTimePtr ReadCtrTime;
    ReadCtrTimeScalarPtr ReadCtrTimeScalar;
    ReadDigitalLinesPtr ReadDigitalLines;
    ReadDigitalScalarU32Ptr ReadDigitalScalarU32;
    ReadDigitalU16Ptr ReadDigitalU16;
    ReadDigitalU32Ptr ReadDigitalU32;
    ReadDigitalU8Ptr ReadDigitalU8;
    ReadRawPtr ReadRaw;
    RegisterDoneEventPtr RegisterDoneEvent;
    RegisterEveryNSamplesEventPtr RegisterEveryNSamplesEvent;
    RegisterSignalEventPtr RegisterSignalEvent;
    RemoveCDAQSyncConnectionPtr RemoveCDAQSyncConnection;
    ReserveNetworkDevicePtr ReserveNetworkDevice;
    ResetAIACExcitFreqPtr ResetAIACExcitFreq;
    ResetAIACExcitSyncEnablePtr ResetAIACExcitSyncEnable;
    ResetAIACExcitWireModePtr ResetAIACExcitWireMode;
    ResetAIADCCustomTimingModePtr ResetAIADCCustomTimingMode;
    ResetAIADCTimingModePtr ResetAIADCTimingMode;
    ResetAIAccel4WireDCVoltageSensitivityPtr ResetAIAccel4WireDCVoltageSensitivity;
    ResetAIAccel4WireDCVoltageSensitivityUnitsPtr ResetAIAccel4WireDCVoltageSensitivityUnits;
    ResetAIAccelChargeSensitivityPtr ResetAIAccelChargeSensitivity;
    ResetAIAccelChargeSensitivityUnitsPtr ResetAIAccelChargeSensitivityUnits;
    ResetAIAccelSensitivityPtr ResetAIAccelSensitivity;
    ResetAIAccelSensitivityUnitsPtr ResetAIAccelSensitivityUnits;
    ResetAIAccelUnitsPtr ResetAIAccelUnits;
    ResetAIAcceldBRefPtr ResetAIAcceldBRef;
    ResetAIAttenPtr ResetAIAtten;
    ResetAIAutoZeroModePtr ResetAIAutoZeroMode;
    ResetAIAveragingWinSizePtr ResetAIAveragingWinSize;
    ResetAIBridgeBalanceCoarsePotPtr ResetAIBridgeBalanceCoarsePot;
    ResetAIBridgeBalanceFinePotPtr ResetAIBridgeBalanceFinePot;
    ResetAIBridgeCfgPtr ResetAIBridgeCfg;
    ResetAIBridgeElectricalUnitsPtr ResetAIBridgeElectricalUnits;
    ResetAIBridgeInitialRatioPtr ResetAIBridgeInitialRatio;
    ResetAIBridgeInitialVoltagePtr ResetAIBridgeInitialVoltage;
    ResetAIBridgeNomResistancePtr ResetAIBridgeNomResistance;
    ResetAIBridgePhysicalUnitsPtr ResetAIBridgePhysicalUnits;
    ResetAIBridgePolyForwardCoeffPtr ResetAIBridgePolyForwardCoeff;
    ResetAIBridgePolyReverseCoeffPtr ResetAIBridgePolyReverseCoeff;
    ResetAIBridgeScaleTypePtr ResetAIBridgeScaleType;
    ResetAIBridgeShuntCalEnablePtr ResetAIBridgeShuntCalEnable;
    ResetAIBridgeShuntCalGainAdjustPtr ResetAIBridgeShuntCalGainAdjust;
    ResetAIBridgeShuntCalSelectPtr ResetAIBridgeShuntCalSelect;
    ResetAIBridgeShuntCalShuntCalAActualResistancePtr ResetAIBridgeShuntCalShuntCalAActualResistance;
    ResetAIBridgeShuntCalShuntCalAResistancePtr ResetAIBridgeShuntCalShuntCalAResistance;
    ResetAIBridgeShuntCalShuntCalASrcPtr ResetAIBridgeShuntCalShuntCalASrc;
    ResetAIBridgeShuntCalShuntCalBActualResistancePtr ResetAIBridgeShuntCalShuntCalBActualResistance;
    ResetAIBridgeShuntCalShuntCalBResistancePtr ResetAIBridgeShuntCalShuntCalBResistance;
    ResetAIBridgeTableElectricalValsPtr ResetAIBridgeTableElectricalVals;
    ResetAIBridgeTablePhysicalValsPtr ResetAIBridgeTablePhysicalVals;
    ResetAIBridgeTwoPointLinFirstElectricalValPtr ResetAIBridgeTwoPointLinFirstElectricalVal;
    ResetAIBridgeTwoPointLinFirstPhysicalValPtr ResetAIBridgeTwoPointLinFirstPhysicalVal;
    ResetAIBridgeTwoPointLinSecondElectricalValPtr ResetAIBridgeTwoPointLinSecondElectricalVal;
    ResetAIBridgeTwoPointLinSecondPhysicalValPtr ResetAIBridgeTwoPointLinSecondPhysicalVal;
    ResetAIBridgeUnitsPtr ResetAIBridgeUnits;
    ResetAIChanCalApplyCalIfExpPtr ResetAIChanCalApplyCalIfExp;
    ResetAIChanCalDescPtr ResetAIChanCalDesc;
    ResetAIChanCalEnableCalPtr ResetAIChanCalEnableCal;
    ResetAIChanCalOperatorNamePtr ResetAIChanCalOperatorName;
    ResetAIChanCalPolyForwardCoeffPtr ResetAIChanCalPolyForwardCoeff;
    ResetAIChanCalPolyReverseCoeffPtr ResetAIChanCalPolyReverseCoeff;
    ResetAIChanCalScaleTypePtr ResetAIChanCalScaleType;
    ResetAIChanCalTablePreScaledValsPtr ResetAIChanCalTablePreScaledVals;
    ResetAIChanCalTableScaledValsPtr ResetAIChanCalTableScaledVals;
    ResetAIChanCalVerifAcqValsPtr ResetAIChanCalVerifAcqVals;
    ResetAIChanCalVerifRefValsPtr ResetAIChanCalVerifRefVals;
    ResetAIChargeUnitsPtr ResetAIChargeUnits;
    ResetAIChopEnablePtr ResetAIChopEnable;
    ResetAICouplingPtr ResetAICoupling;
    ResetAICurrentACRMSUnitsPtr ResetAICurrentACRMSUnits;
    ResetAICurrentShuntLocPtr ResetAICurrentShuntLoc;
    ResetAICurrentShuntResistancePtr ResetAICurrentShuntResistance;
    ResetAICurrentUnitsPtr ResetAICurrentUnits;
    ResetAICustomScaleNamePtr ResetAICustomScaleName;
    ResetAIDCOffsetPtr ResetAIDCOffset;
    ResetAIDataXferCustomThresholdPtr ResetAIDataXferCustomThreshold;
    ResetAIDataXferMaxRatePtr ResetAIDataXferMaxRate;
    ResetAIDataXferMechPtr ResetAIDataXferMech;
    ResetAIDataXferReqCondPtr ResetAIDataXferReqCond;
    ResetAIDigFltrBandpassCenterFreqPtr ResetAIDigFltrBandpassCenterFreq;
    ResetAIDigFltrBandpassWidthPtr ResetAIDigFltrBandpassWidth;
    ResetAIDigFltrCoeffPtr ResetAIDigFltrCoeff;
    ResetAIDigFltrEnablePtr ResetAIDigFltrEnable;
    ResetAIDigFltrHighpassCutoffFreqPtr ResetAIDigFltrHighpassCutoffFreq;
    ResetAIDigFltrLowpassCutoffFreqPtr ResetAIDigFltrLowpassCutoffFreq;
    ResetAIDigFltrNotchCenterFreqPtr ResetAIDigFltrNotchCenterFreq;
    ResetAIDigFltrNotchWidthPtr ResetAIDigFltrNotchWidth;
    ResetAIDigFltrOrderPtr ResetAIDigFltrOrder;
    ResetAIDigFltrResponsePtr ResetAIDigFltrResponse;
    ResetAIDigFltrTypePtr ResetAIDigFltrType;
    ResetAIDitherEnablePtr ResetAIDitherEnable;
    ResetAIEddyCurrentProxProbeSensitivityPtr ResetAIEddyCurrentProxProbeSensitivity;
    ResetAIEddyCurrentProxProbeSensitivityUnitsPtr ResetAIEddyCurrentProxProbeSensitivityUnits;
    ResetAIEddyCurrentProxProbeUnitsPtr ResetAIEddyCurrentProxProbeUnits;
    ResetAIEnhancedAliasRejectionEnablePtr ResetAIEnhancedAliasRejectionEnable;
    ResetAIExcitActualValPtr ResetAIExcitActualVal;
    ResetAIExcitDCorACPtr ResetAIExcitDCorAC;
    ResetAIExcitIdleOutputBehaviorPtr ResetAIExcitIdleOutputBehavior;
    ResetAIExcitSensePtr ResetAIExcitSense;
    ResetAIExcitSrcPtr ResetAIExcitSrc;
    ResetAIExcitUseForScalingPtr ResetAIExcitUseForScaling;
    ResetAIExcitUseMultiplexedPtr ResetAIExcitUseMultiplexed;
    ResetAIExcitValPtr ResetAIExcitVal;
    ResetAIExcitVoltageOrCurrentPtr ResetAIExcitVoltageOrCurrent;
    ResetAIFilterDelayAdjustmentPtr ResetAIFilterDelayAdjustment;
    ResetAIFilterDelayUnitsPtr ResetAIFilterDelayUnits;
    ResetAIFilterEnablePtr ResetAIFilterEnable;
    ResetAIFilterFreqPtr ResetAIFilterFreq;
    ResetAIFilterOrderPtr ResetAIFilterOrder;
    ResetAIFilterResponsePtr ResetAIFilterResponse;
    ResetAIForceIEPESensorSensitivityPtr ResetAIForceIEPESensorSensitivity;
    ResetAIForceIEPESensorSensitivityUnitsPtr ResetAIForceIEPESensorSensitivityUnits;
    ResetAIForceReadFromChanPtr ResetAIForceReadFromChan;
    ResetAIForceUnitsPtr ResetAIForceUnits;
    ResetAIFreqHystPtr ResetAIFreqHyst;
    ResetAIFreqThreshVoltagePtr ResetAIFreqThreshVoltage;
    ResetAIFreqUnitsPtr ResetAIFreqUnits;
    ResetAIGainPtr ResetAIGain;
    ResetAIImpedancePtr ResetAIImpedance;
    ResetAIInputLimitsFaultDetectEnablePtr ResetAIInputLimitsFaultDetectEnable;
    ResetAIInputLimitsFaultDetectLowerLimitPtr ResetAIInputLimitsFaultDetectLowerLimit;
    ResetAIInputLimitsFaultDetectUpperLimitPtr ResetAIInputLimitsFaultDetectUpperLimit;
    ResetAIInputSrcPtr ResetAIInputSrc;
    ResetAILVDTSensitivityPtr ResetAILVDTSensitivity;
    ResetAILVDTSensitivityUnitsPtr ResetAILVDTSensitivityUnits;
    ResetAILVDTUnitsPtr ResetAILVDTUnits;
    ResetAILeadWireResistancePtr ResetAILeadWireResistance;
    ResetAILossyLSBRemovalCompressedSampSizePtr ResetAILossyLSBRemovalCompressedSampSize;
    ResetAILowpassCutoffFreqPtr ResetAILowpassCutoffFreq;
    ResetAILowpassEnablePtr ResetAILowpassEnable;
    ResetAILowpassSwitchCapClkSrcPtr ResetAILowpassSwitchCapClkSrc;
    ResetAILowpassSwitchCapExtClkDivPtr ResetAILowpassSwitchCapExtClkDiv;
    ResetAILowpassSwitchCapExtClkFreqPtr ResetAILowpassSwitchCapExtClkFreq;
    ResetAILowpassSwitchCapOutClkDivPtr ResetAILowpassSwitchCapOutClkDiv;
    ResetAIMaxPtr ResetAIMax;
    ResetAIMemMapEnablePtr ResetAIMemMapEnable;
    ResetAIMicrophoneSensitivityPtr ResetAIMicrophoneSensitivity;
    ResetAIMinPtr ResetAIMin;
    ResetAIOpenChanDetectEnablePtr ResetAIOpenChanDetectEnable;
    ResetAIOpenThrmcplDetectEnablePtr ResetAIOpenThrmcplDetectEnable;
    ResetAIOvercurrentDetectEnablePtr ResetAIOvercurrentDetectEnable;
    ResetAIPowerSupplyFaultDetectEnablePtr ResetAIPowerSupplyFaultDetectEnable;
    ResetAIPressureUnitsPtr ResetAIPressureUnits;
    ResetAIProbeAttenPtr ResetAIProbeAtten;
    ResetAIRTDAPtr ResetAIRTDA;
    ResetAIRTDBPtr ResetAIRTDB;
    ResetAIRTDCPtr ResetAIRTDC;
    ResetAIRTDR0Ptr ResetAIRTDR0;
    ResetAIRTDTypePtr ResetAIRTDType;
    ResetAIRVDTSensitivityPtr ResetAIRVDTSensitivity;
    ResetAIRVDTSensitivityUnitsPtr ResetAIRVDTSensitivityUnits;
    ResetAIRVDTUnitsPtr ResetAIRVDTUnits;
    ResetAIRawDataCompressionTypePtr ResetAIRawDataCompressionType;
    ResetAIRemoveFilterDelayPtr ResetAIRemoveFilterDelay;
    ResetAIResistanceCfgPtr ResetAIResistanceCfg;
    ResetAIResistanceUnitsPtr ResetAIResistanceUnits;
    ResetAIRngHighPtr ResetAIRngHigh;
    ResetAIRngLowPtr ResetAIRngLow;
    ResetAIRosetteStrainGageOrientationPtr ResetAIRosetteStrainGageOrientation;
    ResetAIRosetteStrainGageRosetteMeasTypePtr ResetAIRosetteStrainGageRosetteMeasType;
    ResetAISampAndHoldEnablePtr ResetAISampAndHoldEnable;
    ResetAISensorPowerCfgPtr ResetAISensorPowerCfg;
    ResetAISensorPowerTypePtr ResetAISensorPowerType;
    ResetAISensorPowerVoltagePtr ResetAISensorPowerVoltage;
    ResetAISoundPressureMaxSoundPressureLvlPtr ResetAISoundPressureMaxSoundPressureLvl;
    ResetAISoundPressureUnitsPtr ResetAISoundPressureUnits;
    ResetAISoundPressuredBRefPtr ResetAISoundPressuredBRef;
    ResetAIStrainGageCfgPtr ResetAIStrainGageCfg;
    ResetAIStrainGageForceReadFromChanPtr ResetAIStrainGageForceReadFromChan;
    ResetAIStrainGageGageFactorPtr ResetAIStrainGageGageFactor;
    ResetAIStrainGagePoissonRatioPtr ResetAIStrainGagePoissonRatio;
    ResetAIStrainUnitsPtr ResetAIStrainUnits;
    ResetAITempUnitsPtr ResetAITempUnits;
    ResetAITermCfgPtr ResetAITermCfg;
    ResetAIThrmcplCJCValPtr ResetAIThrmcplCJCVal;
    ResetAIThrmcplLeadOffsetVoltagePtr ResetAIThrmcplLeadOffsetVoltage;
    ResetAIThrmcplScaleTypePtr ResetAIThrmcplScaleType;
    ResetAIThrmcplTypePtr ResetAIThrmcplType;
    ResetAIThrmstrAPtr ResetAIThrmstrA;
    ResetAIThrmstrBPtr ResetAIThrmstrB;
    ResetAIThrmstrCPtr ResetAIThrmstrC;
    ResetAIThrmstrR1Ptr ResetAIThrmstrR1;
    ResetAITorqueUnitsPtr ResetAITorqueUnits;
    ResetAIUsbXferReqCountPtr ResetAIUsbXferReqCount;
    ResetAIUsbXferReqSizePtr ResetAIUsbXferReqSize;
    ResetAIVelocityIEPESensorSensitivityPtr ResetAIVelocityIEPESensorSensitivity;
    ResetAIVelocityIEPESensorSensitivityUnitsPtr ResetAIVelocityIEPESensorSensitivityUnits;
    ResetAIVelocityIEPESensordBRefPtr ResetAIVelocityIEPESensordBRef;
    ResetAIVelocityUnitsPtr ResetAIVelocityUnits;
    ResetAIVoltageACRMSUnitsPtr ResetAIVoltageACRMSUnits;
    ResetAIVoltageUnitsPtr ResetAIVoltageUnits;
    ResetAIVoltagedBRefPtr ResetAIVoltagedBRef;
    ResetAOCurrentUnitsPtr ResetAOCurrentUnits;
    ResetAOCustomScaleNamePtr ResetAOCustomScaleName;
    ResetAODACOffsetExtSrcPtr ResetAODACOffsetExtSrc;
    ResetAODACOffsetSrcPtr ResetAODACOffsetSrc;
    ResetAODACOffsetValPtr ResetAODACOffsetVal;
    ResetAODACRefAllowConnToGndPtr ResetAODACRefAllowConnToGnd;
    ResetAODACRefConnToGndPtr ResetAODACRefConnToGnd;
    ResetAODACRefExtSrcPtr ResetAODACRefExtSrc;
    ResetAODACRefSrcPtr ResetAODACRefSrc;
    ResetAODACRefValPtr ResetAODACRefVal;
    ResetAODACRngHighPtr ResetAODACRngHigh;
    ResetAODACRngLowPtr ResetAODACRngLow;
    ResetAODataXferMechPtr ResetAODataXferMech;
    ResetAODataXferReqCondPtr ResetAODataXferReqCond;
    ResetAOEnhancedImageRejectionEnablePtr ResetAOEnhancedImageRejectionEnable;
    ResetAOFilterDelayPtr ResetAOFilterDelay;
    ResetAOFilterDelayAdjustmentPtr ResetAOFilterDelayAdjustment;
    ResetAOFilterDelayUnitsPtr ResetAOFilterDelayUnits;
    ResetAOFuncGenAmplitudePtr ResetAOFuncGenAmplitude;
    ResetAOFuncGenFMDeviationPtr ResetAOFuncGenFMDeviation;
    ResetAOFuncGenFreqPtr ResetAOFuncGenFreq;
    ResetAOFuncGenModulationTypePtr ResetAOFuncGenModulationType;
    ResetAOFuncGenOffsetPtr ResetAOFuncGenOffset;
    ResetAOFuncGenSquareDutyCyclePtr ResetAOFuncGenSquareDutyCycle;
    ResetAOFuncGenTypePtr ResetAOFuncGenType;
    ResetAOGainPtr ResetAOGain;
    ResetAOIdleOutputBehaviorPtr ResetAOIdleOutputBehavior;
    ResetAOLoadImpedancePtr ResetAOLoadImpedance;
    ResetAOMaxPtr ResetAOMax;
    ResetAOMemMapEnablePtr ResetAOMemMapEnable;
    ResetAOMinPtr ResetAOMin;
    ResetAOOutputImpedancePtr ResetAOOutputImpedance;
    ResetAOReglitchEnablePtr ResetAOReglitchEnable;
    ResetAOResolutionUnitsPtr ResetAOResolutionUnits;
    ResetAOTermCfgPtr ResetAOTermCfg;
    ResetAOUsbXferReqCountPtr ResetAOUsbXferReqCount;
    ResetAOUsbXferReqSizePtr ResetAOUsbXferReqSize;
    ResetAOUseOnlyOnBrdMemPtr ResetAOUseOnlyOnBrdMem;
    ResetAOVoltageCurrentLimitPtr ResetAOVoltageCurrentLimit;
    ResetAOVoltageUnitsPtr ResetAOVoltageUnits;
    ResetBufInputBufSizePtr ResetBufInputBufSize;
    ResetBufOutputBufSizePtr ResetBufOutputBufSize;
    ResetBufOutputOnbrdBufSizePtr ResetBufOutputOnbrdBufSize;
    ResetCIAngEncoderInitialAnglePtr ResetCIAngEncoderInitialAngle;
    ResetCIAngEncoderPulsesPerRevPtr ResetCIAngEncoderPulsesPerRev;
    ResetCIAngEncoderUnitsPtr ResetCIAngEncoderUnits;
    ResetCICountEdgesActiveEdgePtr ResetCICountEdgesActiveEdge;
    ResetCICountEdgesCountDirDigFltrEnablePtr ResetCICountEdgesCountDirDigFltrEnable;
    ResetCICountEdgesCountDirDigFltrMinPulseWidthPtr ResetCICountEdgesCountDirDigFltrMinPulseWidth;
    ResetCICountEdgesCountDirDigFltrTimebaseRatePtr ResetCICountEdgesCountDirDigFltrTimebaseRate;
    ResetCICountEdgesCountDirDigFltrTimebaseSrcPtr ResetCICountEdgesCountDirDigFltrTimebaseSrc;
    ResetCICountEdgesCountDirDigSyncEnablePtr ResetCICountEdgesCountDirDigSyncEnable;
    ResetCICountEdgesCountDirHystPtr ResetCICountEdgesCountDirHyst;
    ResetCICountEdgesCountDirLogicLvlBehaviorPtr ResetCICountEdgesCountDirLogicLvlBehavior;
    ResetCICountEdgesCountDirTermCfgPtr ResetCICountEdgesCountDirTermCfg;
    ResetCICountEdgesCountDirThreshVoltagePtr ResetCICountEdgesCountDirThreshVoltage;
    ResetCICountEdgesCountResetActiveEdgePtr ResetCICountEdgesCountResetActiveEdge;
    ResetCICountEdgesCountResetDigFltrEnablePtr ResetCICountEdgesCountResetDigFltrEnable;
    ResetCICountEdgesCountResetDigFltrMinPulseWidthPtr ResetCICountEdgesCountResetDigFltrMinPulseWidth;
    ResetCICountEdgesCountResetDigFltrTimebaseRatePtr ResetCICountEdgesCountResetDigFltrTimebaseRate;
    ResetCICountEdgesCountResetDigFltrTimebaseSrcPtr ResetCICountEdgesCountResetDigFltrTimebaseSrc;
    ResetCICountEdgesCountResetDigSyncEnablePtr ResetCICountEdgesCountResetDigSyncEnable;
    ResetCICountEdgesCountResetEnablePtr ResetCICountEdgesCountResetEnable;
    ResetCICountEdgesCountResetHystPtr ResetCICountEdgesCountResetHyst;
    ResetCICountEdgesCountResetLogicLvlBehaviorPtr ResetCICountEdgesCountResetLogicLvlBehavior;
    ResetCICountEdgesCountResetResetCountPtr ResetCICountEdgesCountResetResetCount;
    ResetCICountEdgesCountResetTermPtr ResetCICountEdgesCountResetTerm;
    ResetCICountEdgesCountResetTermCfgPtr ResetCICountEdgesCountResetTermCfg;
    ResetCICountEdgesCountResetThreshVoltagePtr ResetCICountEdgesCountResetThreshVoltage;
    ResetCICountEdgesDigFltrEnablePtr ResetCICountEdgesDigFltrEnable;
    ResetCICountEdgesDigFltrMinPulseWidthPtr ResetCICountEdgesDigFltrMinPulseWidth;
    ResetCICountEdgesDigFltrTimebaseRatePtr ResetCICountEdgesDigFltrTimebaseRate;
    ResetCICountEdgesDigFltrTimebaseSrcPtr ResetCICountEdgesDigFltrTimebaseSrc;
    ResetCICountEdgesDigSyncEnablePtr ResetCICountEdgesDigSyncEnable;
    ResetCICountEdgesDirPtr ResetCICountEdgesDir;
    ResetCICountEdgesDirTermPtr ResetCICountEdgesDirTerm;
    ResetCICountEdgesGateDigFltrEnablePtr ResetCICountEdgesGateDigFltrEnable;
    ResetCICountEdgesGateDigFltrMinPulseWidthPtr ResetCICountEdgesGateDigFltrMinPulseWidth;
    ResetCICountEdgesGateDigFltrTimebaseRatePtr ResetCICountEdgesGateDigFltrTimebaseRate;
    ResetCICountEdgesGateDigFltrTimebaseSrcPtr ResetCICountEdgesGateDigFltrTimebaseSrc;
    ResetCICountEdgesGateEnablePtr ResetCICountEdgesGateEnable;
    ResetCICountEdgesGateHystPtr ResetCICountEdgesGateHyst;
    ResetCICountEdgesGateLogicLvlBehaviorPtr ResetCICountEdgesGateLogicLvlBehavior;
    ResetCICountEdgesGateTermPtr ResetCICountEdgesGateTerm;
    ResetCICountEdgesGateTermCfgPtr ResetCICountEdgesGateTermCfg;
    ResetCICountEdgesGateThreshVoltagePtr ResetCICountEdgesGateThreshVoltage;
    ResetCICountEdgesGateWhenPtr ResetCICountEdgesGateWhen;
    ResetCICountEdgesHystPtr ResetCICountEdgesHyst;
    ResetCICountEdgesInitialCntPtr ResetCICountEdgesInitialCnt;
    ResetCICountEdgesLogicLvlBehaviorPtr ResetCICountEdgesLogicLvlBehavior;
    ResetCICountEdgesTermPtr ResetCICountEdgesTerm;
    ResetCICountEdgesTermCfgPtr ResetCICountEdgesTermCfg;
    ResetCICountEdgesThreshVoltagePtr ResetCICountEdgesThreshVoltage;
    ResetCICtrTimebaseActiveEdgePtr ResetCICtrTimebaseActiveEdge;
    ResetCICtrTimebaseDigFltrEnablePtr ResetCICtrTimebaseDigFltrEnable;
    ResetCICtrTimebaseDigFltrMinPulseWidthPtr ResetCICtrTimebaseDigFltrMinPulseWidth;
    ResetCICtrTimebaseDigFltrTimebaseRatePtr ResetCICtrTimebaseDigFltrTimebaseRate;
    ResetCICtrTimebaseDigFltrTimebaseSrcPtr ResetCICtrTimebaseDigFltrTimebaseSrc;
    ResetCICtrTimebaseDigSyncEnablePtr ResetCICtrTimebaseDigSyncEnable;
    ResetCICtrTimebaseMasterTimebaseDivPtr ResetCICtrTimebaseMasterTimebaseDiv;
    ResetCICtrTimebaseRatePtr ResetCICtrTimebaseRate;
    ResetCICtrTimebaseSrcPtr ResetCICtrTimebaseSrc;
    ResetCICustomScaleNamePtr ResetCICustomScaleName;
    ResetCIDataXferMechPtr ResetCIDataXferMech;
    ResetCIDataXferReqCondPtr ResetCIDataXferReqCond;
    ResetCIDupCountPreventPtr ResetCIDupCountPrevent;
    ResetCIDutyCycleDigFltrEnablePtr ResetCIDutyCycleDigFltrEnable;
    ResetCIDutyCycleDigFltrMinPulseWidthPtr ResetCIDutyCycleDigFltrMinPulseWidth;
    ResetCIDutyCycleDigFltrTimebaseRatePtr ResetCIDutyCycleDigFltrTimebaseRate;
    ResetCIDutyCycleDigFltrTimebaseSrcPtr ResetCIDutyCycleDigFltrTimebaseSrc;
    ResetCIDutyCycleLogicLvlBehaviorPtr ResetCIDutyCycleLogicLvlBehavior;
    ResetCIDutyCycleStartingEdgePtr ResetCIDutyCycleStartingEdge;
    ResetCIDutyCycleTermPtr ResetCIDutyCycleTerm;
    ResetCIDutyCycleTermCfgPtr ResetCIDutyCycleTermCfg;
    ResetCIEncoderAInputDigFltrEnablePtr ResetCIEncoderAInputDigFltrEnable;
    ResetCIEncoderAInputDigFltrMinPulseWidthPtr ResetCIEncoderAInputDigFltrMinPulseWidth;
    ResetCIEncoderAInputDigFltrTimebaseRatePtr ResetCIEncoderAInputDigFltrTimebaseRate;
    ResetCIEncoderAInputDigFltrTimebaseSrcPtr ResetCIEncoderAInputDigFltrTimebaseSrc;
    ResetCIEncoderAInputDigSyncEnablePtr ResetCIEncoderAInputDigSyncEnable;
    ResetCIEncoderAInputLogicLvlBehaviorPtr ResetCIEncoderAInputLogicLvlBehavior;
    ResetCIEncoderAInputTermPtr ResetCIEncoderAInputTerm;
    ResetCIEncoderAInputTermCfgPtr ResetCIEncoderAInputTermCfg;
    ResetCIEncoderBInputDigFltrEnablePtr ResetCIEncoderBInputDigFltrEnable;
    ResetCIEncoderBInputDigFltrMinPulseWidthPtr ResetCIEncoderBInputDigFltrMinPulseWidth;
    ResetCIEncoderBInputDigFltrTimebaseRatePtr ResetCIEncoderBInputDigFltrTimebaseRate;
    ResetCIEncoderBInputDigFltrTimebaseSrcPtr ResetCIEncoderBInputDigFltrTimebaseSrc;
    ResetCIEncoderBInputDigSyncEnablePtr ResetCIEncoderBInputDigSyncEnable;
    ResetCIEncoderBInputLogicLvlBehaviorPtr ResetCIEncoderBInputLogicLvlBehavior;
    ResetCIEncoderBInputTermPtr ResetCIEncoderBInputTerm;
    ResetCIEncoderBInputTermCfgPtr ResetCIEncoderBInputTermCfg;
    ResetCIEncoderDecodingTypePtr ResetCIEncoderDecodingType;
    ResetCIEncoderZIndexEnablePtr ResetCIEncoderZIndexEnable;
    ResetCIEncoderZIndexPhasePtr ResetCIEncoderZIndexPhase;
    ResetCIEncoderZIndexValPtr ResetCIEncoderZIndexVal;
    ResetCIEncoderZInputDigFltrEnablePtr ResetCIEncoderZInputDigFltrEnable;
    ResetCIEncoderZInputDigFltrMinPulseWidthPtr ResetCIEncoderZInputDigFltrMinPulseWidth;
    ResetCIEncoderZInputDigFltrTimebaseRatePtr ResetCIEncoderZInputDigFltrTimebaseRate;
    ResetCIEncoderZInputDigFltrTimebaseSrcPtr ResetCIEncoderZInputDigFltrTimebaseSrc;
    ResetCIEncoderZInputDigSyncEnablePtr ResetCIEncoderZInputDigSyncEnable;
    ResetCIEncoderZInputLogicLvlBehaviorPtr ResetCIEncoderZInputLogicLvlBehavior;
    ResetCIEncoderZInputTermPtr ResetCIEncoderZInputTerm;
    ResetCIEncoderZInputTermCfgPtr ResetCIEncoderZInputTermCfg;
    ResetCIFilterDelayUnitsPtr ResetCIFilterDelayUnits;
    ResetCIFilterEnablePtr ResetCIFilterEnable;
    ResetCIFilterFreqPtr ResetCIFilterFreq;
    ResetCIFilterOrderPtr ResetCIFilterOrder;
    ResetCIFilterResponsePtr ResetCIFilterResponse;
    ResetCIFreqDigFltrEnablePtr ResetCIFreqDigFltrEnable;
    ResetCIFreqDigFltrMinPulseWidthPtr ResetCIFreqDigFltrMinPulseWidth;
    ResetCIFreqDigFltrTimebaseRatePtr ResetCIFreqDigFltrTimebaseRate;
    ResetCIFreqDigFltrTimebaseSrcPtr ResetCIFreqDigFltrTimebaseSrc;
    ResetCIFreqDigSyncEnablePtr ResetCIFreqDigSyncEnable;
    ResetCIFreqDivPtr ResetCIFreqDiv;
    ResetCIFreqEnableAveragingPtr ResetCIFreqEnableAveraging;
    ResetCIFreqHystPtr ResetCIFreqHyst;
    ResetCIFreqLogicLvlBehaviorPtr ResetCIFreqLogicLvlBehavior;
    ResetCIFreqMeasMethPtr ResetCIFreqMeasMeth;
    ResetCIFreqMeasTimePtr ResetCIFreqMeasTime;
    ResetCIFreqStartingEdgePtr ResetCIFreqStartingEdge;
    ResetCIFreqTermPtr ResetCIFreqTerm;
    ResetCIFreqTermCfgPtr ResetCIFreqTermCfg;
    ResetCIFreqThreshVoltagePtr ResetCIFreqThreshVoltage;
    ResetCIFreqUnitsPtr ResetCIFreqUnits;
    ResetCIGPSSyncMethodPtr ResetCIGPSSyncMethod;
    ResetCIGPSSyncSrcPtr ResetCIGPSSyncSrc;
    ResetCILinEncoderDistPerPulsePtr ResetCILinEncoderDistPerPulse;
    ResetCILinEncoderInitialPosPtr ResetCILinEncoderInitialPos;
    ResetCILinEncoderUnitsPtr ResetCILinEncoderUnits;
    ResetCIMaxPtr ResetCIMax;
    ResetCIMaxMeasPeriodPtr ResetCIMaxMeasPeriod;
    ResetCIMemMapEnablePtr ResetCIMemMapEnable;
    ResetCIMinPtr ResetCIMin;
    ResetCIPeriodDigFltrEnablePtr ResetCIPeriodDigFltrEnable;
    ResetCIPeriodDigFltrMinPulseWidthPtr ResetCIPeriodDigFltrMinPulseWidth;
    ResetCIPeriodDigFltrTimebaseRatePtr ResetCIPeriodDigFltrTimebaseRate;
    ResetCIPeriodDigFltrTimebaseSrcPtr ResetCIPeriodDigFltrTimebaseSrc;
    ResetCIPeriodDigSyncEnablePtr ResetCIPeriodDigSyncEnable;
    ResetCIPeriodDivPtr ResetCIPeriodDiv;
    ResetCIPeriodEnableAveragingPtr ResetCIPeriodEnableAveraging;
    ResetCIPeriodHystPtr ResetCIPeriodHyst;
    ResetCIPeriodLogicLvlBehaviorPtr ResetCIPeriodLogicLvlBehavior;
    ResetCIPeriodMeasMethPtr ResetCIPeriodMeasMeth;
    ResetCIPeriodMeasTimePtr ResetCIPeriodMeasTime;
    ResetCIPeriodStartingEdgePtr ResetCIPeriodStartingEdge;
    ResetCIPeriodTermPtr ResetCIPeriodTerm;
    ResetCIPeriodTermCfgPtr ResetCIPeriodTermCfg;
    ResetCIPeriodThreshVoltagePtr ResetCIPeriodThreshVoltage;
    ResetCIPeriodUnitsPtr ResetCIPeriodUnits;
    ResetCIPrescalerPtr ResetCIPrescaler;
    ResetCIPulseFreqDigFltrEnablePtr ResetCIPulseFreqDigFltrEnable;
    ResetCIPulseFreqDigFltrMinPulseWidthPtr ResetCIPulseFreqDigFltrMinPulseWidth;
    ResetCIPulseFreqDigFltrTimebaseRatePtr ResetCIPulseFreqDigFltrTimebaseRate;
    ResetCIPulseFreqDigFltrTimebaseSrcPtr ResetCIPulseFreqDigFltrTimebaseSrc;
    ResetCIPulseFreqDigSyncEnablePtr ResetCIPulseFreqDigSyncEnable;
    ResetCIPulseFreqLogicLvlBehaviorPtr ResetCIPulseFreqLogicLvlBehavior;
    ResetCIPulseFreqStartEdgePtr ResetCIPulseFreqStartEdge;
    ResetCIPulseFreqTermPtr ResetCIPulseFreqTerm;
    ResetCIPulseFreqTermCfgPtr ResetCIPulseFreqTermCfg;
    ResetCIPulseFreqUnitsPtr ResetCIPulseFreqUnits;
    ResetCIPulseTicksDigFltrEnablePtr ResetCIPulseTicksDigFltrEnable;
    ResetCIPulseTicksDigFltrMinPulseWidthPtr ResetCIPulseTicksDigFltrMinPulseWidth;
    ResetCIPulseTicksDigFltrTimebaseRatePtr ResetCIPulseTicksDigFltrTimebaseRate;
    ResetCIPulseTicksDigFltrTimebaseSrcPtr ResetCIPulseTicksDigFltrTimebaseSrc;
    ResetCIPulseTicksDigSyncEnablePtr ResetCIPulseTicksDigSyncEnable;
    ResetCIPulseTicksLogicLvlBehaviorPtr ResetCIPulseTicksLogicLvlBehavior;
    ResetCIPulseTicksStartEdgePtr ResetCIPulseTicksStartEdge;
    ResetCIPulseTicksTermPtr ResetCIPulseTicksTerm;
    ResetCIPulseTicksTermCfgPtr ResetCIPulseTicksTermCfg;
    ResetCIPulseTimeDigFltrEnablePtr ResetCIPulseTimeDigFltrEnable;
    ResetCIPulseTimeDigFltrMinPulseWidthPtr ResetCIPulseTimeDigFltrMinPulseWidth;
    ResetCIPulseTimeDigFltrTimebaseRatePtr ResetCIPulseTimeDigFltrTimebaseRate;
    ResetCIPulseTimeDigFltrTimebaseSrcPtr ResetCIPulseTimeDigFltrTimebaseSrc;
    ResetCIPulseTimeDigSyncEnablePtr ResetCIPulseTimeDigSyncEnable;
    ResetCIPulseTimeLogicLvlBehaviorPtr ResetCIPulseTimeLogicLvlBehavior;
    ResetCIPulseTimeStartEdgePtr ResetCIPulseTimeStartEdge;
    ResetCIPulseTimeTermPtr ResetCIPulseTimeTerm;
    ResetCIPulseTimeTermCfgPtr ResetCIPulseTimeTermCfg;
    ResetCIPulseTimeUnitsPtr ResetCIPulseTimeUnits;
    ResetCIPulseWidthDigFltrEnablePtr ResetCIPulseWidthDigFltrEnable;
    ResetCIPulseWidthDigFltrMinPulseWidthPtr ResetCIPulseWidthDigFltrMinPulseWidth;
    ResetCIPulseWidthDigFltrTimebaseRatePtr ResetCIPulseWidthDigFltrTimebaseRate;
    ResetCIPulseWidthDigFltrTimebaseSrcPtr ResetCIPulseWidthDigFltrTimebaseSrc;
    ResetCIPulseWidthDigSyncEnablePtr ResetCIPulseWidthDigSyncEnable;
    ResetCIPulseWidthLogicLvlBehaviorPtr ResetCIPulseWidthLogicLvlBehavior;
    ResetCIPulseWidthStartingEdgePtr ResetCIPulseWidthStartingEdge;
    ResetCIPulseWidthTermPtr ResetCIPulseWidthTerm;
    ResetCIPulseWidthTermCfgPtr ResetCIPulseWidthTermCfg;
    ResetCIPulseWidthUnitsPtr ResetCIPulseWidthUnits;
    ResetCISampClkOverrunBehaviorPtr ResetCISampClkOverrunBehavior;
    ResetCISampClkOverrunSentinelValPtr ResetCISampClkOverrunSentinelVal;
    ResetCISemiPeriodDigFltrEnablePtr ResetCISemiPeriodDigFltrEnable;
    ResetCISemiPeriodDigFltrMinPulseWidthPtr ResetCISemiPeriodDigFltrMinPulseWidth;
    ResetCISemiPeriodDigFltrTimebaseRatePtr ResetCISemiPeriodDigFltrTimebaseRate;
    ResetCISemiPeriodDigFltrTimebaseSrcPtr ResetCISemiPeriodDigFltrTimebaseSrc;
    ResetCISemiPeriodDigSyncEnablePtr ResetCISemiPeriodDigSyncEnable;
    ResetCISemiPeriodLogicLvlBehaviorPtr ResetCISemiPeriodLogicLvlBehavior;
    ResetCISemiPeriodStartingEdgePtr ResetCISemiPeriodStartingEdge;
    ResetCISemiPeriodTermPtr ResetCISemiPeriodTerm;
    ResetCISemiPeriodTermCfgPtr ResetCISemiPeriodTermCfg;
    ResetCISemiPeriodUnitsPtr ResetCISemiPeriodUnits;
    ResetCIThreshVoltagePtr ResetCIThreshVoltage;
    ResetCITimestampInitialSecondsPtr ResetCITimestampInitialSeconds;
    ResetCITimestampUnitsPtr ResetCITimestampUnits;
    ResetCITwoEdgeSepFirstDigFltrEnablePtr ResetCITwoEdgeSepFirstDigFltrEnable;
    ResetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr ResetCITwoEdgeSepFirstDigFltrMinPulseWidth;
    ResetCITwoEdgeSepFirstDigFltrTimebaseRatePtr ResetCITwoEdgeSepFirstDigFltrTimebaseRate;
    ResetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr ResetCITwoEdgeSepFirstDigFltrTimebaseSrc;
    ResetCITwoEdgeSepFirstDigSyncEnablePtr ResetCITwoEdgeSepFirstDigSyncEnable;
    ResetCITwoEdgeSepFirstEdgePtr ResetCITwoEdgeSepFirstEdge;
    ResetCITwoEdgeSepFirstLogicLvlBehaviorPtr ResetCITwoEdgeSepFirstLogicLvlBehavior;
    ResetCITwoEdgeSepFirstTermPtr ResetCITwoEdgeSepFirstTerm;
    ResetCITwoEdgeSepFirstTermCfgPtr ResetCITwoEdgeSepFirstTermCfg;
    ResetCITwoEdgeSepSecondDigFltrEnablePtr ResetCITwoEdgeSepSecondDigFltrEnable;
    ResetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr ResetCITwoEdgeSepSecondDigFltrMinPulseWidth;
    ResetCITwoEdgeSepSecondDigFltrTimebaseRatePtr ResetCITwoEdgeSepSecondDigFltrTimebaseRate;
    ResetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr ResetCITwoEdgeSepSecondDigFltrTimebaseSrc;
    ResetCITwoEdgeSepSecondDigSyncEnablePtr ResetCITwoEdgeSepSecondDigSyncEnable;
    ResetCITwoEdgeSepSecondEdgePtr ResetCITwoEdgeSepSecondEdge;
    ResetCITwoEdgeSepSecondLogicLvlBehaviorPtr ResetCITwoEdgeSepSecondLogicLvlBehavior;
    ResetCITwoEdgeSepSecondTermPtr ResetCITwoEdgeSepSecondTerm;
    ResetCITwoEdgeSepSecondTermCfgPtr ResetCITwoEdgeSepSecondTermCfg;
    ResetCITwoEdgeSepUnitsPtr ResetCITwoEdgeSepUnits;
    ResetCIUsbXferReqCountPtr ResetCIUsbXferReqCount;
    ResetCIUsbXferReqSizePtr ResetCIUsbXferReqSize;
    ResetCIVelocityAngEncoderPulsesPerRevPtr ResetCIVelocityAngEncoderPulsesPerRev;
    ResetCIVelocityAngEncoderUnitsPtr ResetCIVelocityAngEncoderUnits;
    ResetCIVelocityDivPtr ResetCIVelocityDiv;
    ResetCIVelocityEncoderAInputDigFltrEnablePtr ResetCIVelocityEncoderAInputDigFltrEnable;
    ResetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr ResetCIVelocityEncoderAInputDigFltrMinPulseWidth;
    ResetCIVelocityEncoderAInputDigFltrTimebaseRatePtr ResetCIVelocityEncoderAInputDigFltrTimebaseRate;
    ResetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr ResetCIVelocityEncoderAInputDigFltrTimebaseSrc;
    ResetCIVelocityEncoderAInputLogicLvlBehaviorPtr ResetCIVelocityEncoderAInputLogicLvlBehavior;
    ResetCIVelocityEncoderAInputTermPtr ResetCIVelocityEncoderAInputTerm;
    ResetCIVelocityEncoderAInputTermCfgPtr ResetCIVelocityEncoderAInputTermCfg;
    ResetCIVelocityEncoderBInputDigFltrEnablePtr ResetCIVelocityEncoderBInputDigFltrEnable;
    ResetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr ResetCIVelocityEncoderBInputDigFltrMinPulseWidth;
    ResetCIVelocityEncoderBInputDigFltrTimebaseRatePtr ResetCIVelocityEncoderBInputDigFltrTimebaseRate;
    ResetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr ResetCIVelocityEncoderBInputDigFltrTimebaseSrc;
    ResetCIVelocityEncoderBInputLogicLvlBehaviorPtr ResetCIVelocityEncoderBInputLogicLvlBehavior;
    ResetCIVelocityEncoderBInputTermPtr ResetCIVelocityEncoderBInputTerm;
    ResetCIVelocityEncoderBInputTermCfgPtr ResetCIVelocityEncoderBInputTermCfg;
    ResetCIVelocityEncoderDecodingTypePtr ResetCIVelocityEncoderDecodingType;
    ResetCIVelocityLinEncoderDistPerPulsePtr ResetCIVelocityLinEncoderDistPerPulse;
    ResetCIVelocityLinEncoderUnitsPtr ResetCIVelocityLinEncoderUnits;
    ResetCIVelocityMeasTimePtr ResetCIVelocityMeasTime;
    ResetCOAutoIncrCntPtr ResetCOAutoIncrCnt;
    ResetCOConstrainedGenModePtr ResetCOConstrainedGenMode;
    ResetCOCtrTimebaseActiveEdgePtr ResetCOCtrTimebaseActiveEdge;
    ResetCOCtrTimebaseDigFltrEnablePtr ResetCOCtrTimebaseDigFltrEnable;
    ResetCOCtrTimebaseDigFltrMinPulseWidthPtr ResetCOCtrTimebaseDigFltrMinPulseWidth;
    ResetCOCtrTimebaseDigFltrTimebaseRatePtr ResetCOCtrTimebaseDigFltrTimebaseRate;
    ResetCOCtrTimebaseDigFltrTimebaseSrcPtr ResetCOCtrTimebaseDigFltrTimebaseSrc;
    ResetCOCtrTimebaseDigSyncEnablePtr ResetCOCtrTimebaseDigSyncEnable;
    ResetCOCtrTimebaseMasterTimebaseDivPtr ResetCOCtrTimebaseMasterTimebaseDiv;
    ResetCOCtrTimebaseRatePtr ResetCOCtrTimebaseRate;
    ResetCOCtrTimebaseSrcPtr ResetCOCtrTimebaseSrc;
    ResetCODataXferMechPtr ResetCODataXferMech;
    ResetCODataXferReqCondPtr ResetCODataXferReqCond;
    ResetCOEnableInitialDelayOnRetriggerPtr ResetCOEnableInitialDelayOnRetrigger;
    ResetCOMemMapEnablePtr ResetCOMemMapEnable;
    ResetCOPrescalerPtr ResetCOPrescaler;
    ResetCOPulseDutyCycPtr ResetCOPulseDutyCyc;
    ResetCOPulseFreqPtr ResetCOPulseFreq;
    ResetCOPulseFreqInitialDelayPtr ResetCOPulseFreqInitialDelay;
    ResetCOPulseFreqUnitsPtr ResetCOPulseFreqUnits;
    ResetCOPulseHighTicksPtr ResetCOPulseHighTicks;
    ResetCOPulseHighTimePtr ResetCOPulseHighTime;
    ResetCOPulseIdleStatePtr ResetCOPulseIdleState;
    ResetCOPulseLowTicksPtr ResetCOPulseLowTicks;
    ResetCOPulseLowTimePtr ResetCOPulseLowTime;
    ResetCOPulseTermPtr ResetCOPulseTerm;
    ResetCOPulseTicksInitialDelayPtr ResetCOPulseTicksInitialDelay;
    ResetCOPulseTimeInitialDelayPtr ResetCOPulseTimeInitialDelay;
    ResetCOPulseTimeUnitsPtr ResetCOPulseTimeUnits;
    ResetCOUsbXferReqCountPtr ResetCOUsbXferReqCount;
    ResetCOUsbXferReqSizePtr ResetCOUsbXferReqSize;
    ResetCOUseOnlyOnBrdMemPtr ResetCOUseOnlyOnBrdMem;
    ResetChanDescrPtr ResetChanDescr;
    ResetChanSyncUnlockBehaviorPtr ResetChanSyncUnlockBehavior;
    ResetDIAcquireOnPtr ResetDIAcquireOn;
    ResetDIDataXferMechPtr ResetDIDataXferMech;
    ResetDIDataXferReqCondPtr ResetDIDataXferReqCond;
    ResetDIDigFltrEnablePtr ResetDIDigFltrEnable;
    ResetDIDigFltrEnableBusModePtr ResetDIDigFltrEnableBusMode;
    ResetDIDigFltrMinPulseWidthPtr ResetDIDigFltrMinPulseWidth;
    ResetDIDigFltrTimebaseRatePtr ResetDIDigFltrTimebaseRate;
    ResetDIDigFltrTimebaseSrcPtr ResetDIDigFltrTimebaseSrc;
    ResetDIDigSyncEnablePtr ResetDIDigSyncEnable;
    ResetDIInvertLinesPtr ResetDIInvertLines;
    ResetDILogicFamilyPtr ResetDILogicFamily;
    ResetDIMemMapEnablePtr ResetDIMemMapEnable;
    ResetDITristatePtr ResetDITristate;
    ResetDIUsbXferReqCountPtr ResetDIUsbXferReqCount;
    ResetDIUsbXferReqSizePtr ResetDIUsbXferReqSize;
    ResetDODataXferMechPtr ResetDODataXferMech;
    ResetDODataXferReqCondPtr ResetDODataXferReqCond;
    ResetDOGenerateOnPtr ResetDOGenerateOn;
    ResetDOInvertLinesPtr ResetDOInvertLines;
    ResetDOLineStatesDoneStatePtr ResetDOLineStatesDoneState;
    ResetDOLineStatesPausedStatePtr ResetDOLineStatesPausedState;
    ResetDOLineStatesStartStatePtr ResetDOLineStatesStartState;
    ResetDOLogicFamilyPtr ResetDOLogicFamily;
    ResetDOMemMapEnablePtr ResetDOMemMapEnable;
    ResetDOOutputDriveTypePtr ResetDOOutputDriveType;
    ResetDOOvercurrentAutoReenablePtr ResetDOOvercurrentAutoReenable;
    ResetDOOvercurrentLimitPtr ResetDOOvercurrentLimit;
    ResetDOOvercurrentReenablePeriodPtr ResetDOOvercurrentReenablePeriod;
    ResetDOTristatePtr ResetDOTristate;
    ResetDOUsbXferReqCountPtr ResetDOUsbXferReqCount;
    ResetDOUsbXferReqSizePtr ResetDOUsbXferReqSize;
    ResetDOUseOnlyOnBrdMemPtr ResetDOUseOnlyOnBrdMem;
    ResetDevicePtr ResetDevice;
    SaveGlobalChanPtr SaveGlobalChan;
    SaveScalePtr SaveScale;
    SaveTaskPtr SaveTask;
    SelfCalPtr SelfCal;
    SelfTestDevicePtr SelfTestDevice;
    SetAIACExcitFreqPtr SetAIACExcitFreq;
    SetAIACExcitSyncEnablePtr SetAIACExcitSyncEnable;
    SetAIACExcitWireModePtr SetAIACExcitWireMode;
    SetAIADCCustomTimingModePtr SetAIADCCustomTimingMode;
    SetAIADCTimingModePtr SetAIADCTimingMode;
    SetAIAccel4WireDCVoltageSensitivityPtr SetAIAccel4WireDCVoltageSensitivity;
    SetAIAccel4WireDCVoltageSensitivityUnitsPtr SetAIAccel4WireDCVoltageSensitivityUnits;
    SetAIAccelChargeSensitivityPtr SetAIAccelChargeSensitivity;
    SetAIAccelChargeSensitivityUnitsPtr SetAIAccelChargeSensitivityUnits;
    SetAIAccelSensitivityPtr SetAIAccelSensitivity;
    SetAIAccelSensitivityUnitsPtr SetAIAccelSensitivityUnits;
    SetAIAccelUnitsPtr SetAIAccelUnits;
    SetAIAcceldBRefPtr SetAIAcceldBRef;
    SetAIAttenPtr SetAIAtten;
    SetAIAutoZeroModePtr SetAIAutoZeroMode;
    SetAIAveragingWinSizePtr SetAIAveragingWinSize;
    SetAIBridgeBalanceCoarsePotPtr SetAIBridgeBalanceCoarsePot;
    SetAIBridgeBalanceFinePotPtr SetAIBridgeBalanceFinePot;
    SetAIBridgeCfgPtr SetAIBridgeCfg;
    SetAIBridgeElectricalUnitsPtr SetAIBridgeElectricalUnits;
    SetAIBridgeInitialRatioPtr SetAIBridgeInitialRatio;
    SetAIBridgeInitialVoltagePtr SetAIBridgeInitialVoltage;
    SetAIBridgeNomResistancePtr SetAIBridgeNomResistance;
    SetAIBridgePhysicalUnitsPtr SetAIBridgePhysicalUnits;
    SetAIBridgePolyForwardCoeffPtr SetAIBridgePolyForwardCoeff;
    SetAIBridgePolyReverseCoeffPtr SetAIBridgePolyReverseCoeff;
    SetAIBridgeScaleTypePtr SetAIBridgeScaleType;
    SetAIBridgeShuntCalEnablePtr SetAIBridgeShuntCalEnable;
    SetAIBridgeShuntCalGainAdjustPtr SetAIBridgeShuntCalGainAdjust;
    SetAIBridgeShuntCalSelectPtr SetAIBridgeShuntCalSelect;
    SetAIBridgeShuntCalShuntCalAActualResistancePtr SetAIBridgeShuntCalShuntCalAActualResistance;
    SetAIBridgeShuntCalShuntCalAResistancePtr SetAIBridgeShuntCalShuntCalAResistance;
    SetAIBridgeShuntCalShuntCalASrcPtr SetAIBridgeShuntCalShuntCalASrc;
    SetAIBridgeShuntCalShuntCalBActualResistancePtr SetAIBridgeShuntCalShuntCalBActualResistance;
    SetAIBridgeShuntCalShuntCalBResistancePtr SetAIBridgeShuntCalShuntCalBResistance;
    SetAIBridgeTableElectricalValsPtr SetAIBridgeTableElectricalVals;
    SetAIBridgeTablePhysicalValsPtr SetAIBridgeTablePhysicalVals;
    SetAIBridgeTwoPointLinFirstElectricalValPtr SetAIBridgeTwoPointLinFirstElectricalVal;
    SetAIBridgeTwoPointLinFirstPhysicalValPtr SetAIBridgeTwoPointLinFirstPhysicalVal;
    SetAIBridgeTwoPointLinSecondElectricalValPtr SetAIBridgeTwoPointLinSecondElectricalVal;
    SetAIBridgeTwoPointLinSecondPhysicalValPtr SetAIBridgeTwoPointLinSecondPhysicalVal;
    SetAIBridgeUnitsPtr SetAIBridgeUnits;
    SetAIChanCalApplyCalIfExpPtr SetAIChanCalApplyCalIfExp;
    SetAIChanCalCalDatePtr SetAIChanCalCalDate;
    SetAIChanCalDescPtr SetAIChanCalDesc;
    SetAIChanCalEnableCalPtr SetAIChanCalEnableCal;
    SetAIChanCalExpDatePtr SetAIChanCalExpDate;
    SetAIChanCalOperatorNamePtr SetAIChanCalOperatorName;
    SetAIChanCalPolyForwardCoeffPtr SetAIChanCalPolyForwardCoeff;
    SetAIChanCalPolyReverseCoeffPtr SetAIChanCalPolyReverseCoeff;
    SetAIChanCalScaleTypePtr SetAIChanCalScaleType;
    SetAIChanCalTablePreScaledValsPtr SetAIChanCalTablePreScaledVals;
    SetAIChanCalTableScaledValsPtr SetAIChanCalTableScaledVals;
    SetAIChanCalVerifAcqValsPtr SetAIChanCalVerifAcqVals;
    SetAIChanCalVerifRefValsPtr SetAIChanCalVerifRefVals;
    SetAIChargeUnitsPtr SetAIChargeUnits;
    SetAIChopEnablePtr SetAIChopEnable;
    SetAICouplingPtr SetAICoupling;
    SetAICurrentACRMSUnitsPtr SetAICurrentACRMSUnits;
    SetAICurrentShuntLocPtr SetAICurrentShuntLoc;
    SetAICurrentShuntResistancePtr SetAICurrentShuntResistance;
    SetAICurrentUnitsPtr SetAICurrentUnits;
    SetAICustomScaleNamePtr SetAICustomScaleName;
    SetAIDCOffsetPtr SetAIDCOffset;
    SetAIDataXferCustomThresholdPtr SetAIDataXferCustomThreshold;
    SetAIDataXferMaxRatePtr SetAIDataXferMaxRate;
    SetAIDataXferMechPtr SetAIDataXferMech;
    SetAIDataXferReqCondPtr SetAIDataXferReqCond;
    SetAIDigFltrBandpassCenterFreqPtr SetAIDigFltrBandpassCenterFreq;
    SetAIDigFltrBandpassWidthPtr SetAIDigFltrBandpassWidth;
    SetAIDigFltrCoeffPtr SetAIDigFltrCoeff;
    SetAIDigFltrEnablePtr SetAIDigFltrEnable;
    SetAIDigFltrHighpassCutoffFreqPtr SetAIDigFltrHighpassCutoffFreq;
    SetAIDigFltrLowpassCutoffFreqPtr SetAIDigFltrLowpassCutoffFreq;
    SetAIDigFltrNotchCenterFreqPtr SetAIDigFltrNotchCenterFreq;
    SetAIDigFltrNotchWidthPtr SetAIDigFltrNotchWidth;
    SetAIDigFltrOrderPtr SetAIDigFltrOrder;
    SetAIDigFltrResponsePtr SetAIDigFltrResponse;
    SetAIDigFltrTypePtr SetAIDigFltrType;
    SetAIDitherEnablePtr SetAIDitherEnable;
    SetAIEddyCurrentProxProbeSensitivityPtr SetAIEddyCurrentProxProbeSensitivity;
    SetAIEddyCurrentProxProbeSensitivityUnitsPtr SetAIEddyCurrentProxProbeSensitivityUnits;
    SetAIEddyCurrentProxProbeUnitsPtr SetAIEddyCurrentProxProbeUnits;
    SetAIEnhancedAliasRejectionEnablePtr SetAIEnhancedAliasRejectionEnable;
    SetAIExcitActualValPtr SetAIExcitActualVal;
    SetAIExcitDCorACPtr SetAIExcitDCorAC;
    SetAIExcitIdleOutputBehaviorPtr SetAIExcitIdleOutputBehavior;
    SetAIExcitSensePtr SetAIExcitSense;
    SetAIExcitSrcPtr SetAIExcitSrc;
    SetAIExcitUseForScalingPtr SetAIExcitUseForScaling;
    SetAIExcitUseMultiplexedPtr SetAIExcitUseMultiplexed;
    SetAIExcitValPtr SetAIExcitVal;
    SetAIExcitVoltageOrCurrentPtr SetAIExcitVoltageOrCurrent;
    SetAIFilterDelayAdjustmentPtr SetAIFilterDelayAdjustment;
    SetAIFilterDelayUnitsPtr SetAIFilterDelayUnits;
    SetAIFilterEnablePtr SetAIFilterEnable;
    SetAIFilterFreqPtr SetAIFilterFreq;
    SetAIFilterOrderPtr SetAIFilterOrder;
    SetAIFilterResponsePtr SetAIFilterResponse;
    SetAIForceIEPESensorSensitivityPtr SetAIForceIEPESensorSensitivity;
    SetAIForceIEPESensorSensitivityUnitsPtr SetAIForceIEPESensorSensitivityUnits;
    SetAIForceReadFromChanPtr SetAIForceReadFromChan;
    SetAIForceUnitsPtr SetAIForceUnits;
    SetAIFreqHystPtr SetAIFreqHyst;
    SetAIFreqThreshVoltagePtr SetAIFreqThreshVoltage;
    SetAIFreqUnitsPtr SetAIFreqUnits;
    SetAIGainPtr SetAIGain;
    SetAIInputLimitsFaultDetectEnablePtr SetAIInputLimitsFaultDetectEnable;
    SetAIInputLimitsFaultDetectLowerLimitPtr SetAIInputLimitsFaultDetectLowerLimit;
    SetAIInputLimitsFaultDetectUpperLimitPtr SetAIInputLimitsFaultDetectUpperLimit;
    SetAIInputSrcPtr SetAIInputSrc;
    SetAILVDTSensitivityPtr SetAILVDTSensitivity;
    SetAILVDTSensitivityUnitsPtr SetAILVDTSensitivityUnits;
    SetAILVDTUnitsPtr SetAILVDTUnits;
    SetAILeadWireResistancePtr SetAILeadWireResistance;
    SetAILossyLSBRemovalCompressedSampSizePtr SetAILossyLSBRemovalCompressedSampSize;
    SetAILowpassCutoffFreqPtr SetAILowpassCutoffFreq;
    SetAILowpassEnablePtr SetAILowpassEnable;
    SetAILowpassSwitchCapClkSrcPtr SetAILowpassSwitchCapClkSrc;
    SetAILowpassSwitchCapExtClkDivPtr SetAILowpassSwitchCapExtClkDiv;
    SetAILowpassSwitchCapExtClkFreqPtr SetAILowpassSwitchCapExtClkFreq;
    SetAILowpassSwitchCapOutClkDivPtr SetAILowpassSwitchCapOutClkDiv;
    SetAIMaxPtr SetAIMax;
    SetAIMemMapEnablePtr SetAIMemMapEnable;
    SetAIMicrophoneSensitivityPtr SetAIMicrophoneSensitivity;
    SetAIMinPtr SetAIMin;
    SetAIOpenChanDetectEnablePtr SetAIOpenChanDetectEnable;
    SetAIOpenThrmcplDetectEnablePtr SetAIOpenThrmcplDetectEnable;
    SetAIOvercurrentDetectEnablePtr SetAIOvercurrentDetectEnable;
    SetAIPowerSupplyFaultDetectEnablePtr SetAIPowerSupplyFaultDetectEnable;
    SetAIPressureUnitsPtr SetAIPressureUnits;
    SetAIProbeAttenPtr SetAIProbeAtten;
    SetAIRTDAPtr SetAIRTDA;
    SetAIRTDBPtr SetAIRTDB;
    SetAIRTDCPtr SetAIRTDC;
    SetAIRTDR0Ptr SetAIRTDR0;
    SetAIRTDTypePtr SetAIRTDType;
    SetAIRVDTSensitivityPtr SetAIRVDTSensitivity;
    SetAIRVDTSensitivityUnitsPtr SetAIRVDTSensitivityUnits;
    SetAIRVDTUnitsPtr SetAIRVDTUnits;
    SetAIRawDataCompressionTypePtr SetAIRawDataCompressionType;
    SetAIRemoveFilterDelayPtr SetAIRemoveFilterDelay;
    SetAIResistanceCfgPtr SetAIResistanceCfg;
    SetAIResistanceUnitsPtr SetAIResistanceUnits;
    SetAIRngHighPtr SetAIRngHigh;
    SetAIRngLowPtr SetAIRngLow;
    SetAIRosetteStrainGageOrientationPtr SetAIRosetteStrainGageOrientation;
    SetAIRosetteStrainGageRosetteMeasTypePtr SetAIRosetteStrainGageRosetteMeasType;
    SetAISampAndHoldEnablePtr SetAISampAndHoldEnable;
    SetAISensorPowerCfgPtr SetAISensorPowerCfg;
    SetAISensorPowerTypePtr SetAISensorPowerType;
    SetAISensorPowerVoltagePtr SetAISensorPowerVoltage;
    SetAISoundPressureMaxSoundPressureLvlPtr SetAISoundPressureMaxSoundPressureLvl;
    SetAISoundPressureUnitsPtr SetAISoundPressureUnits;
    SetAISoundPressuredBRefPtr SetAISoundPressuredBRef;
    SetAIStrainGageCfgPtr SetAIStrainGageCfg;
    SetAIStrainGageForceReadFromChanPtr SetAIStrainGageForceReadFromChan;
    SetAIStrainGageGageFactorPtr SetAIStrainGageGageFactor;
    SetAIStrainGagePoissonRatioPtr SetAIStrainGagePoissonRatio;
    SetAIStrainUnitsPtr SetAIStrainUnits;
    SetAITempUnitsPtr SetAITempUnits;
    SetAITermCfgPtr SetAITermCfg;
    SetAIThrmcplCJCValPtr SetAIThrmcplCJCVal;
    SetAIThrmcplLeadOffsetVoltagePtr SetAIThrmcplLeadOffsetVoltage;
    SetAIThrmcplScaleTypePtr SetAIThrmcplScaleType;
    SetAIThrmcplTypePtr SetAIThrmcplType;
    SetAIThrmstrAPtr SetAIThrmstrA;
    SetAIThrmstrBPtr SetAIThrmstrB;
    SetAIThrmstrCPtr SetAIThrmstrC;
    SetAIThrmstrR1Ptr SetAIThrmstrR1;
    SetAITorqueUnitsPtr SetAITorqueUnits;
    SetAIUsbXferReqCountPtr SetAIUsbXferReqCount;
    SetAIUsbXferReqSizePtr SetAIUsbXferReqSize;
    SetAIVelocityIEPESensorSensitivityPtr SetAIVelocityIEPESensorSensitivity;
    SetAIVelocityIEPESensorSensitivityUnitsPtr SetAIVelocityIEPESensorSensitivityUnits;
    SetAIVelocityIEPESensordBRefPtr SetAIVelocityIEPESensordBRef;
    SetAIVelocityUnitsPtr SetAIVelocityUnits;
    SetAIVoltageACRMSUnitsPtr SetAIVoltageACRMSUnits;
    SetAIVoltageUnitsPtr SetAIVoltageUnits;
    SetAIVoltagedBRefPtr SetAIVoltagedBRef;
    SetAOCurrentUnitsPtr SetAOCurrentUnits;
    SetAOCustomScaleNamePtr SetAOCustomScaleName;
    SetAODACOffsetExtSrcPtr SetAODACOffsetExtSrc;
    SetAODACOffsetSrcPtr SetAODACOffsetSrc;
    SetAODACOffsetValPtr SetAODACOffsetVal;
    SetAODACRefAllowConnToGndPtr SetAODACRefAllowConnToGnd;
    SetAODACRefConnToGndPtr SetAODACRefConnToGnd;
    SetAODACRefExtSrcPtr SetAODACRefExtSrc;
    SetAODACRefSrcPtr SetAODACRefSrc;
    SetAODACRefValPtr SetAODACRefVal;
    SetAODACRngHighPtr SetAODACRngHigh;
    SetAODACRngLowPtr SetAODACRngLow;
    SetAODataXferMechPtr SetAODataXferMech;
    SetAODataXferReqCondPtr SetAODataXferReqCond;
    SetAOEnhancedImageRejectionEnablePtr SetAOEnhancedImageRejectionEnable;
    SetAOFilterDelayPtr SetAOFilterDelay;
    SetAOFilterDelayAdjustmentPtr SetAOFilterDelayAdjustment;
    SetAOFilterDelayUnitsPtr SetAOFilterDelayUnits;
    SetAOFuncGenAmplitudePtr SetAOFuncGenAmplitude;
    SetAOFuncGenFMDeviationPtr SetAOFuncGenFMDeviation;
    SetAOFuncGenFreqPtr SetAOFuncGenFreq;
    SetAOFuncGenModulationTypePtr SetAOFuncGenModulationType;
    SetAOFuncGenOffsetPtr SetAOFuncGenOffset;
    SetAOFuncGenSquareDutyCyclePtr SetAOFuncGenSquareDutyCycle;
    SetAOFuncGenTypePtr SetAOFuncGenType;
    SetAOGainPtr SetAOGain;
    SetAOIdleOutputBehaviorPtr SetAOIdleOutputBehavior;
    SetAOLoadImpedancePtr SetAOLoadImpedance;
    SetAOMaxPtr SetAOMax;
    SetAOMemMapEnablePtr SetAOMemMapEnable;
    SetAOMinPtr SetAOMin;
    SetAOOutputImpedancePtr SetAOOutputImpedance;
    SetAOReglitchEnablePtr SetAOReglitchEnable;
    SetAOResolutionUnitsPtr SetAOResolutionUnits;
    SetAOTermCfgPtr SetAOTermCfg;
    SetAOUsbXferReqCountPtr SetAOUsbXferReqCount;
    SetAOUsbXferReqSizePtr SetAOUsbXferReqSize;
    SetAOUseOnlyOnBrdMemPtr SetAOUseOnlyOnBrdMem;
    SetAOVoltageCurrentLimitPtr SetAOVoltageCurrentLimit;
    SetAOVoltageUnitsPtr SetAOVoltageUnits;
    SetArmStartTrigTrigWhenPtr SetArmStartTrigTrigWhen;
    SetBufInputBufSizePtr SetBufInputBufSize;
    SetBufOutputBufSizePtr SetBufOutputBufSize;
    SetBufOutputOnbrdBufSizePtr SetBufOutputOnbrdBufSize;
    SetCIAngEncoderInitialAnglePtr SetCIAngEncoderInitialAngle;
    SetCIAngEncoderPulsesPerRevPtr SetCIAngEncoderPulsesPerRev;
    SetCIAngEncoderUnitsPtr SetCIAngEncoderUnits;
    SetCICountEdgesActiveEdgePtr SetCICountEdgesActiveEdge;
    SetCICountEdgesCountDirDigFltrEnablePtr SetCICountEdgesCountDirDigFltrEnable;
    SetCICountEdgesCountDirDigFltrMinPulseWidthPtr SetCICountEdgesCountDirDigFltrMinPulseWidth;
    SetCICountEdgesCountDirDigFltrTimebaseRatePtr SetCICountEdgesCountDirDigFltrTimebaseRate;
    SetCICountEdgesCountDirDigFltrTimebaseSrcPtr SetCICountEdgesCountDirDigFltrTimebaseSrc;
    SetCICountEdgesCountDirDigSyncEnablePtr SetCICountEdgesCountDirDigSyncEnable;
    SetCICountEdgesCountDirHystPtr SetCICountEdgesCountDirHyst;
    SetCICountEdgesCountDirLogicLvlBehaviorPtr SetCICountEdgesCountDirLogicLvlBehavior;
    SetCICountEdgesCountDirTermCfgPtr SetCICountEdgesCountDirTermCfg;
    SetCICountEdgesCountDirThreshVoltagePtr SetCICountEdgesCountDirThreshVoltage;
    SetCICountEdgesCountResetActiveEdgePtr SetCICountEdgesCountResetActiveEdge;
    SetCICountEdgesCountResetDigFltrEnablePtr SetCICountEdgesCountResetDigFltrEnable;
    SetCICountEdgesCountResetDigFltrMinPulseWidthPtr SetCICountEdgesCountResetDigFltrMinPulseWidth;
    SetCICountEdgesCountResetDigFltrTimebaseRatePtr SetCICountEdgesCountResetDigFltrTimebaseRate;
    SetCICountEdgesCountResetDigFltrTimebaseSrcPtr SetCICountEdgesCountResetDigFltrTimebaseSrc;
    SetCICountEdgesCountResetDigSyncEnablePtr SetCICountEdgesCountResetDigSyncEnable;
    SetCICountEdgesCountResetEnablePtr SetCICountEdgesCountResetEnable;
    SetCICountEdgesCountResetHystPtr SetCICountEdgesCountResetHyst;
    SetCICountEdgesCountResetLogicLvlBehaviorPtr SetCICountEdgesCountResetLogicLvlBehavior;
    SetCICountEdgesCountResetResetCountPtr SetCICountEdgesCountResetResetCount;
    SetCICountEdgesCountResetTermPtr SetCICountEdgesCountResetTerm;
    SetCICountEdgesCountResetTermCfgPtr SetCICountEdgesCountResetTermCfg;
    SetCICountEdgesCountResetThreshVoltagePtr SetCICountEdgesCountResetThreshVoltage;
    SetCICountEdgesDigFltrEnablePtr SetCICountEdgesDigFltrEnable;
    SetCICountEdgesDigFltrMinPulseWidthPtr SetCICountEdgesDigFltrMinPulseWidth;
    SetCICountEdgesDigFltrTimebaseRatePtr SetCICountEdgesDigFltrTimebaseRate;
    SetCICountEdgesDigFltrTimebaseSrcPtr SetCICountEdgesDigFltrTimebaseSrc;
    SetCICountEdgesDigSyncEnablePtr SetCICountEdgesDigSyncEnable;
    SetCICountEdgesDirPtr SetCICountEdgesDir;
    SetCICountEdgesDirTermPtr SetCICountEdgesDirTerm;
    SetCICountEdgesGateDigFltrEnablePtr SetCICountEdgesGateDigFltrEnable;
    SetCICountEdgesGateDigFltrMinPulseWidthPtr SetCICountEdgesGateDigFltrMinPulseWidth;
    SetCICountEdgesGateDigFltrTimebaseRatePtr SetCICountEdgesGateDigFltrTimebaseRate;
    SetCICountEdgesGateDigFltrTimebaseSrcPtr SetCICountEdgesGateDigFltrTimebaseSrc;
    SetCICountEdgesGateEnablePtr SetCICountEdgesGateEnable;
    SetCICountEdgesGateHystPtr SetCICountEdgesGateHyst;
    SetCICountEdgesGateLogicLvlBehaviorPtr SetCICountEdgesGateLogicLvlBehavior;
    SetCICountEdgesGateTermPtr SetCICountEdgesGateTerm;
    SetCICountEdgesGateTermCfgPtr SetCICountEdgesGateTermCfg;
    SetCICountEdgesGateThreshVoltagePtr SetCICountEdgesGateThreshVoltage;
    SetCICountEdgesGateWhenPtr SetCICountEdgesGateWhen;
    SetCICountEdgesHystPtr SetCICountEdgesHyst;
    SetCICountEdgesInitialCntPtr SetCICountEdgesInitialCnt;
    SetCICountEdgesLogicLvlBehaviorPtr SetCICountEdgesLogicLvlBehavior;
    SetCICountEdgesTermPtr SetCICountEdgesTerm;
    SetCICountEdgesTermCfgPtr SetCICountEdgesTermCfg;
    SetCICountEdgesThreshVoltagePtr SetCICountEdgesThreshVoltage;
    SetCICtrTimebaseActiveEdgePtr SetCICtrTimebaseActiveEdge;
    SetCICtrTimebaseDigFltrEnablePtr SetCICtrTimebaseDigFltrEnable;
    SetCICtrTimebaseDigFltrMinPulseWidthPtr SetCICtrTimebaseDigFltrMinPulseWidth;
    SetCICtrTimebaseDigFltrTimebaseRatePtr SetCICtrTimebaseDigFltrTimebaseRate;
    SetCICtrTimebaseDigFltrTimebaseSrcPtr SetCICtrTimebaseDigFltrTimebaseSrc;
    SetCICtrTimebaseDigSyncEnablePtr SetCICtrTimebaseDigSyncEnable;
    SetCICtrTimebaseMasterTimebaseDivPtr SetCICtrTimebaseMasterTimebaseDiv;
    SetCICtrTimebaseRatePtr SetCICtrTimebaseRate;
    SetCICtrTimebaseSrcPtr SetCICtrTimebaseSrc;
    SetCICustomScaleNamePtr SetCICustomScaleName;
    SetCIDataXferMechPtr SetCIDataXferMech;
    SetCIDataXferReqCondPtr SetCIDataXferReqCond;
    SetCIDupCountPreventPtr SetCIDupCountPrevent;
    SetCIDutyCycleDigFltrEnablePtr SetCIDutyCycleDigFltrEnable;
    SetCIDutyCycleDigFltrMinPulseWidthPtr SetCIDutyCycleDigFltrMinPulseWidth;
    SetCIDutyCycleDigFltrTimebaseRatePtr SetCIDutyCycleDigFltrTimebaseRate;
    SetCIDutyCycleDigFltrTimebaseSrcPtr SetCIDutyCycleDigFltrTimebaseSrc;
    SetCIDutyCycleLogicLvlBehaviorPtr SetCIDutyCycleLogicLvlBehavior;
    SetCIDutyCycleStartingEdgePtr SetCIDutyCycleStartingEdge;
    SetCIDutyCycleTermPtr SetCIDutyCycleTerm;
    SetCIDutyCycleTermCfgPtr SetCIDutyCycleTermCfg;
    SetCIEncoderAInputDigFltrEnablePtr SetCIEncoderAInputDigFltrEnable;
    SetCIEncoderAInputDigFltrMinPulseWidthPtr SetCIEncoderAInputDigFltrMinPulseWidth;
    SetCIEncoderAInputDigFltrTimebaseRatePtr SetCIEncoderAInputDigFltrTimebaseRate;
    SetCIEncoderAInputDigFltrTimebaseSrcPtr SetCIEncoderAInputDigFltrTimebaseSrc;
    SetCIEncoderAInputDigSyncEnablePtr SetCIEncoderAInputDigSyncEnable;
    SetCIEncoderAInputLogicLvlBehaviorPtr SetCIEncoderAInputLogicLvlBehavior;
    SetCIEncoderAInputTermPtr SetCIEncoderAInputTerm;
    SetCIEncoderAInputTermCfgPtr SetCIEncoderAInputTermCfg;
    SetCIEncoderBInputDigFltrEnablePtr SetCIEncoderBInputDigFltrEnable;
    SetCIEncoderBInputDigFltrMinPulseWidthPtr SetCIEncoderBInputDigFltrMinPulseWidth;
    SetCIEncoderBInputDigFltrTimebaseRatePtr SetCIEncoderBInputDigFltrTimebaseRate;
    SetCIEncoderBInputDigFltrTimebaseSrcPtr SetCIEncoderBInputDigFltrTimebaseSrc;
    SetCIEncoderBInputDigSyncEnablePtr SetCIEncoderBInputDigSyncEnable;
    SetCIEncoderBInputLogicLvlBehaviorPtr SetCIEncoderBInputLogicLvlBehavior;
    SetCIEncoderBInputTermPtr SetCIEncoderBInputTerm;
    SetCIEncoderBInputTermCfgPtr SetCIEncoderBInputTermCfg;
    SetCIEncoderDecodingTypePtr SetCIEncoderDecodingType;
    SetCIEncoderZIndexEnablePtr SetCIEncoderZIndexEnable;
    SetCIEncoderZIndexPhasePtr SetCIEncoderZIndexPhase;
    SetCIEncoderZIndexValPtr SetCIEncoderZIndexVal;
    SetCIEncoderZInputDigFltrEnablePtr SetCIEncoderZInputDigFltrEnable;
    SetCIEncoderZInputDigFltrMinPulseWidthPtr SetCIEncoderZInputDigFltrMinPulseWidth;
    SetCIEncoderZInputDigFltrTimebaseRatePtr SetCIEncoderZInputDigFltrTimebaseRate;
    SetCIEncoderZInputDigFltrTimebaseSrcPtr SetCIEncoderZInputDigFltrTimebaseSrc;
    SetCIEncoderZInputDigSyncEnablePtr SetCIEncoderZInputDigSyncEnable;
    SetCIEncoderZInputLogicLvlBehaviorPtr SetCIEncoderZInputLogicLvlBehavior;
    SetCIEncoderZInputTermPtr SetCIEncoderZInputTerm;
    SetCIEncoderZInputTermCfgPtr SetCIEncoderZInputTermCfg;
    SetCIFilterDelayUnitsPtr SetCIFilterDelayUnits;
    SetCIFilterEnablePtr SetCIFilterEnable;
    SetCIFilterFreqPtr SetCIFilterFreq;
    SetCIFilterOrderPtr SetCIFilterOrder;
    SetCIFilterResponsePtr SetCIFilterResponse;
    SetCIFreqDigFltrEnablePtr SetCIFreqDigFltrEnable;
    SetCIFreqDigFltrMinPulseWidthPtr SetCIFreqDigFltrMinPulseWidth;
    SetCIFreqDigFltrTimebaseRatePtr SetCIFreqDigFltrTimebaseRate;
    SetCIFreqDigFltrTimebaseSrcPtr SetCIFreqDigFltrTimebaseSrc;
    SetCIFreqDigSyncEnablePtr SetCIFreqDigSyncEnable;
    SetCIFreqDivPtr SetCIFreqDiv;
    SetCIFreqEnableAveragingPtr SetCIFreqEnableAveraging;
    SetCIFreqHystPtr SetCIFreqHyst;
    SetCIFreqLogicLvlBehaviorPtr SetCIFreqLogicLvlBehavior;
    SetCIFreqMeasMethPtr SetCIFreqMeasMeth;
    SetCIFreqMeasTimePtr SetCIFreqMeasTime;
    SetCIFreqStartingEdgePtr SetCIFreqStartingEdge;
    SetCIFreqTermPtr SetCIFreqTerm;
    SetCIFreqTermCfgPtr SetCIFreqTermCfg;
    SetCIFreqThreshVoltagePtr SetCIFreqThreshVoltage;
    SetCIFreqUnitsPtr SetCIFreqUnits;
    SetCIGPSSyncMethodPtr SetCIGPSSyncMethod;
    SetCIGPSSyncSrcPtr SetCIGPSSyncSrc;
    SetCILinEncoderDistPerPulsePtr SetCILinEncoderDistPerPulse;
    SetCILinEncoderInitialPosPtr SetCILinEncoderInitialPos;
    SetCILinEncoderUnitsPtr SetCILinEncoderUnits;
    SetCIMaxPtr SetCIMax;
    SetCIMaxMeasPeriodPtr SetCIMaxMeasPeriod;
    SetCIMemMapEnablePtr SetCIMemMapEnable;
    SetCIMinPtr SetCIMin;
    SetCIPeriodDigFltrEnablePtr SetCIPeriodDigFltrEnable;
    SetCIPeriodDigFltrMinPulseWidthPtr SetCIPeriodDigFltrMinPulseWidth;
    SetCIPeriodDigFltrTimebaseRatePtr SetCIPeriodDigFltrTimebaseRate;
    SetCIPeriodDigFltrTimebaseSrcPtr SetCIPeriodDigFltrTimebaseSrc;
    SetCIPeriodDigSyncEnablePtr SetCIPeriodDigSyncEnable;
    SetCIPeriodDivPtr SetCIPeriodDiv;
    SetCIPeriodEnableAveragingPtr SetCIPeriodEnableAveraging;
    SetCIPeriodHystPtr SetCIPeriodHyst;
    SetCIPeriodLogicLvlBehaviorPtr SetCIPeriodLogicLvlBehavior;
    SetCIPeriodMeasMethPtr SetCIPeriodMeasMeth;
    SetCIPeriodMeasTimePtr SetCIPeriodMeasTime;
    SetCIPeriodStartingEdgePtr SetCIPeriodStartingEdge;
    SetCIPeriodTermPtr SetCIPeriodTerm;
    SetCIPeriodTermCfgPtr SetCIPeriodTermCfg;
    SetCIPeriodThreshVoltagePtr SetCIPeriodThreshVoltage;
    SetCIPeriodUnitsPtr SetCIPeriodUnits;
    SetCIPrescalerPtr SetCIPrescaler;
    SetCIPulseFreqDigFltrEnablePtr SetCIPulseFreqDigFltrEnable;
    SetCIPulseFreqDigFltrMinPulseWidthPtr SetCIPulseFreqDigFltrMinPulseWidth;
    SetCIPulseFreqDigFltrTimebaseRatePtr SetCIPulseFreqDigFltrTimebaseRate;
    SetCIPulseFreqDigFltrTimebaseSrcPtr SetCIPulseFreqDigFltrTimebaseSrc;
    SetCIPulseFreqDigSyncEnablePtr SetCIPulseFreqDigSyncEnable;
    SetCIPulseFreqLogicLvlBehaviorPtr SetCIPulseFreqLogicLvlBehavior;
    SetCIPulseFreqStartEdgePtr SetCIPulseFreqStartEdge;
    SetCIPulseFreqTermPtr SetCIPulseFreqTerm;
    SetCIPulseFreqTermCfgPtr SetCIPulseFreqTermCfg;
    SetCIPulseFreqUnitsPtr SetCIPulseFreqUnits;
    SetCIPulseTicksDigFltrEnablePtr SetCIPulseTicksDigFltrEnable;
    SetCIPulseTicksDigFltrMinPulseWidthPtr SetCIPulseTicksDigFltrMinPulseWidth;
    SetCIPulseTicksDigFltrTimebaseRatePtr SetCIPulseTicksDigFltrTimebaseRate;
    SetCIPulseTicksDigFltrTimebaseSrcPtr SetCIPulseTicksDigFltrTimebaseSrc;
    SetCIPulseTicksDigSyncEnablePtr SetCIPulseTicksDigSyncEnable;
    SetCIPulseTicksLogicLvlBehaviorPtr SetCIPulseTicksLogicLvlBehavior;
    SetCIPulseTicksStartEdgePtr SetCIPulseTicksStartEdge;
    SetCIPulseTicksTermPtr SetCIPulseTicksTerm;
    SetCIPulseTicksTermCfgPtr SetCIPulseTicksTermCfg;
    SetCIPulseTimeDigFltrEnablePtr SetCIPulseTimeDigFltrEnable;
    SetCIPulseTimeDigFltrMinPulseWidthPtr SetCIPulseTimeDigFltrMinPulseWidth;
    SetCIPulseTimeDigFltrTimebaseRatePtr SetCIPulseTimeDigFltrTimebaseRate;
    SetCIPulseTimeDigFltrTimebaseSrcPtr SetCIPulseTimeDigFltrTimebaseSrc;
    SetCIPulseTimeDigSyncEnablePtr SetCIPulseTimeDigSyncEnable;
    SetCIPulseTimeLogicLvlBehaviorPtr SetCIPulseTimeLogicLvlBehavior;
    SetCIPulseTimeStartEdgePtr SetCIPulseTimeStartEdge;
    SetCIPulseTimeTermPtr SetCIPulseTimeTerm;
    SetCIPulseTimeTermCfgPtr SetCIPulseTimeTermCfg;
    SetCIPulseTimeUnitsPtr SetCIPulseTimeUnits;
    SetCIPulseWidthDigFltrEnablePtr SetCIPulseWidthDigFltrEnable;
    SetCIPulseWidthDigFltrMinPulseWidthPtr SetCIPulseWidthDigFltrMinPulseWidth;
    SetCIPulseWidthDigFltrTimebaseRatePtr SetCIPulseWidthDigFltrTimebaseRate;
    SetCIPulseWidthDigFltrTimebaseSrcPtr SetCIPulseWidthDigFltrTimebaseSrc;
    SetCIPulseWidthDigSyncEnablePtr SetCIPulseWidthDigSyncEnable;
    SetCIPulseWidthLogicLvlBehaviorPtr SetCIPulseWidthLogicLvlBehavior;
    SetCIPulseWidthStartingEdgePtr SetCIPulseWidthStartingEdge;
    SetCIPulseWidthTermPtr SetCIPulseWidthTerm;
    SetCIPulseWidthTermCfgPtr SetCIPulseWidthTermCfg;
    SetCIPulseWidthUnitsPtr SetCIPulseWidthUnits;
    SetCISampClkOverrunBehaviorPtr SetCISampClkOverrunBehavior;
    SetCISampClkOverrunSentinelValPtr SetCISampClkOverrunSentinelVal;
    SetCISemiPeriodDigFltrEnablePtr SetCISemiPeriodDigFltrEnable;
    SetCISemiPeriodDigFltrMinPulseWidthPtr SetCISemiPeriodDigFltrMinPulseWidth;
    SetCISemiPeriodDigFltrTimebaseRatePtr SetCISemiPeriodDigFltrTimebaseRate;
    SetCISemiPeriodDigFltrTimebaseSrcPtr SetCISemiPeriodDigFltrTimebaseSrc;
    SetCISemiPeriodDigSyncEnablePtr SetCISemiPeriodDigSyncEnable;
    SetCISemiPeriodLogicLvlBehaviorPtr SetCISemiPeriodLogicLvlBehavior;
    SetCISemiPeriodStartingEdgePtr SetCISemiPeriodStartingEdge;
    SetCISemiPeriodTermPtr SetCISemiPeriodTerm;
    SetCISemiPeriodTermCfgPtr SetCISemiPeriodTermCfg;
    SetCISemiPeriodUnitsPtr SetCISemiPeriodUnits;
    SetCIThreshVoltagePtr SetCIThreshVoltage;
    SetCITimestampInitialSecondsPtr SetCITimestampInitialSeconds;
    SetCITimestampUnitsPtr SetCITimestampUnits;
    SetCITwoEdgeSepFirstDigFltrEnablePtr SetCITwoEdgeSepFirstDigFltrEnable;
    SetCITwoEdgeSepFirstDigFltrMinPulseWidthPtr SetCITwoEdgeSepFirstDigFltrMinPulseWidth;
    SetCITwoEdgeSepFirstDigFltrTimebaseRatePtr SetCITwoEdgeSepFirstDigFltrTimebaseRate;
    SetCITwoEdgeSepFirstDigFltrTimebaseSrcPtr SetCITwoEdgeSepFirstDigFltrTimebaseSrc;
    SetCITwoEdgeSepFirstDigSyncEnablePtr SetCITwoEdgeSepFirstDigSyncEnable;
    SetCITwoEdgeSepFirstEdgePtr SetCITwoEdgeSepFirstEdge;
    SetCITwoEdgeSepFirstLogicLvlBehaviorPtr SetCITwoEdgeSepFirstLogicLvlBehavior;
    SetCITwoEdgeSepFirstTermPtr SetCITwoEdgeSepFirstTerm;
    SetCITwoEdgeSepFirstTermCfgPtr SetCITwoEdgeSepFirstTermCfg;
    SetCITwoEdgeSepSecondDigFltrEnablePtr SetCITwoEdgeSepSecondDigFltrEnable;
    SetCITwoEdgeSepSecondDigFltrMinPulseWidthPtr SetCITwoEdgeSepSecondDigFltrMinPulseWidth;
    SetCITwoEdgeSepSecondDigFltrTimebaseRatePtr SetCITwoEdgeSepSecondDigFltrTimebaseRate;
    SetCITwoEdgeSepSecondDigFltrTimebaseSrcPtr SetCITwoEdgeSepSecondDigFltrTimebaseSrc;
    SetCITwoEdgeSepSecondDigSyncEnablePtr SetCITwoEdgeSepSecondDigSyncEnable;
    SetCITwoEdgeSepSecondEdgePtr SetCITwoEdgeSepSecondEdge;
    SetCITwoEdgeSepSecondLogicLvlBehaviorPtr SetCITwoEdgeSepSecondLogicLvlBehavior;
    SetCITwoEdgeSepSecondTermPtr SetCITwoEdgeSepSecondTerm;
    SetCITwoEdgeSepSecondTermCfgPtr SetCITwoEdgeSepSecondTermCfg;
    SetCITwoEdgeSepUnitsPtr SetCITwoEdgeSepUnits;
    SetCIUsbXferReqCountPtr SetCIUsbXferReqCount;
    SetCIUsbXferReqSizePtr SetCIUsbXferReqSize;
    SetCIVelocityAngEncoderPulsesPerRevPtr SetCIVelocityAngEncoderPulsesPerRev;
    SetCIVelocityAngEncoderUnitsPtr SetCIVelocityAngEncoderUnits;
    SetCIVelocityDivPtr SetCIVelocityDiv;
    SetCIVelocityEncoderAInputDigFltrEnablePtr SetCIVelocityEncoderAInputDigFltrEnable;
    SetCIVelocityEncoderAInputDigFltrMinPulseWidthPtr SetCIVelocityEncoderAInputDigFltrMinPulseWidth;
    SetCIVelocityEncoderAInputDigFltrTimebaseRatePtr SetCIVelocityEncoderAInputDigFltrTimebaseRate;
    SetCIVelocityEncoderAInputDigFltrTimebaseSrcPtr SetCIVelocityEncoderAInputDigFltrTimebaseSrc;
    SetCIVelocityEncoderAInputLogicLvlBehaviorPtr SetCIVelocityEncoderAInputLogicLvlBehavior;
    SetCIVelocityEncoderAInputTermPtr SetCIVelocityEncoderAInputTerm;
    SetCIVelocityEncoderAInputTermCfgPtr SetCIVelocityEncoderAInputTermCfg;
    SetCIVelocityEncoderBInputDigFltrEnablePtr SetCIVelocityEncoderBInputDigFltrEnable;
    SetCIVelocityEncoderBInputDigFltrMinPulseWidthPtr SetCIVelocityEncoderBInputDigFltrMinPulseWidth;
    SetCIVelocityEncoderBInputDigFltrTimebaseRatePtr SetCIVelocityEncoderBInputDigFltrTimebaseRate;
    SetCIVelocityEncoderBInputDigFltrTimebaseSrcPtr SetCIVelocityEncoderBInputDigFltrTimebaseSrc;
    SetCIVelocityEncoderBInputLogicLvlBehaviorPtr SetCIVelocityEncoderBInputLogicLvlBehavior;
    SetCIVelocityEncoderBInputTermPtr SetCIVelocityEncoderBInputTerm;
    SetCIVelocityEncoderBInputTermCfgPtr SetCIVelocityEncoderBInputTermCfg;
    SetCIVelocityEncoderDecodingTypePtr SetCIVelocityEncoderDecodingType;
    SetCIVelocityLinEncoderDistPerPulsePtr SetCIVelocityLinEncoderDistPerPulse;
    SetCIVelocityLinEncoderUnitsPtr SetCIVelocityLinEncoderUnits;
    SetCIVelocityMeasTimePtr SetCIVelocityMeasTime;
    SetCOAutoIncrCntPtr SetCOAutoIncrCnt;
    SetCOConstrainedGenModePtr SetCOConstrainedGenMode;
    SetCOCtrTimebaseActiveEdgePtr SetCOCtrTimebaseActiveEdge;
    SetCOCtrTimebaseDigFltrEnablePtr SetCOCtrTimebaseDigFltrEnable;
    SetCOCtrTimebaseDigFltrMinPulseWidthPtr SetCOCtrTimebaseDigFltrMinPulseWidth;
    SetCOCtrTimebaseDigFltrTimebaseRatePtr SetCOCtrTimebaseDigFltrTimebaseRate;
    SetCOCtrTimebaseDigFltrTimebaseSrcPtr SetCOCtrTimebaseDigFltrTimebaseSrc;
    SetCOCtrTimebaseDigSyncEnablePtr SetCOCtrTimebaseDigSyncEnable;
    SetCOCtrTimebaseMasterTimebaseDivPtr SetCOCtrTimebaseMasterTimebaseDiv;
    SetCOCtrTimebaseRatePtr SetCOCtrTimebaseRate;
    SetCOCtrTimebaseSrcPtr SetCOCtrTimebaseSrc;
    SetCODataXferMechPtr SetCODataXferMech;
    SetCODataXferReqCondPtr SetCODataXferReqCond;
    SetCOEnableInitialDelayOnRetriggerPtr SetCOEnableInitialDelayOnRetrigger;
    SetCOMemMapEnablePtr SetCOMemMapEnable;
    SetCOPrescalerPtr SetCOPrescaler;
    SetCOPulseDutyCycPtr SetCOPulseDutyCyc;
    SetCOPulseFreqPtr SetCOPulseFreq;
    SetCOPulseFreqInitialDelayPtr SetCOPulseFreqInitialDelay;
    SetCOPulseFreqUnitsPtr SetCOPulseFreqUnits;
    SetCOPulseHighTicksPtr SetCOPulseHighTicks;
    SetCOPulseHighTimePtr SetCOPulseHighTime;
    SetCOPulseIdleStatePtr SetCOPulseIdleState;
    SetCOPulseLowTicksPtr SetCOPulseLowTicks;
    SetCOPulseLowTimePtr SetCOPulseLowTime;
    SetCOPulseTermPtr SetCOPulseTerm;
    SetCOPulseTicksInitialDelayPtr SetCOPulseTicksInitialDelay;
    SetCOPulseTimeInitialDelayPtr SetCOPulseTimeInitialDelay;
    SetCOPulseTimeUnitsPtr SetCOPulseTimeUnits;
    SetCOUsbXferReqCountPtr SetCOUsbXferReqCount;
    SetCOUsbXferReqSizePtr SetCOUsbXferReqSize;
    SetCOUseOnlyOnBrdMemPtr SetCOUseOnlyOnBrdMem;
    SetCalAccConnectionCountPtr SetCalAccConnectionCount;
    SetCalUserDefinedInfoPtr SetCalUserDefinedInfo;
    SetChanDescrPtr SetChanDescr;
    SetChanSyncUnlockBehaviorPtr SetChanSyncUnlockBehavior;
    SetDIAcquireOnPtr SetDIAcquireOn;
    SetDIDataXferMechPtr SetDIDataXferMech;
    SetDIDataXferReqCondPtr SetDIDataXferReqCond;
    SetDIDigFltrEnablePtr SetDIDigFltrEnable;
    SetDIDigFltrEnableBusModePtr SetDIDigFltrEnableBusMode;
    SetDIDigFltrMinPulseWidthPtr SetDIDigFltrMinPulseWidth;
    SetDIDigFltrTimebaseRatePtr SetDIDigFltrTimebaseRate;
    SetDIDigFltrTimebaseSrcPtr SetDIDigFltrTimebaseSrc;
    SetDIDigSyncEnablePtr SetDIDigSyncEnable;
    SetDIInvertLinesPtr SetDIInvertLines;
    SetDILogicFamilyPtr SetDILogicFamily;
    SetDIMemMapEnablePtr SetDIMemMapEnable;
    SetDITristatePtr SetDITristate;
    SetDIUsbXferReqCountPtr SetDIUsbXferReqCount;
    SetDIUsbXferReqSizePtr SetDIUsbXferReqSize;
    SetDODataXferMechPtr SetDODataXferMech;
    SetDODataXferReqCondPtr SetDODataXferReqCond;
    SetDOGenerateOnPtr SetDOGenerateOn;
    SetDOInvertLinesPtr SetDOInvertLines;
    SetDOLineStatesDoneStatePtr SetDOLineStatesDoneState;
    SetDOLineStatesPausedStatePtr SetDOLineStatesPausedState;
    SetDOLineStatesStartStatePtr SetDOLineStatesStartState;
    SetDOLogicFamilyPtr SetDOLogicFamily;
    SetDOMemMapEnablePtr SetDOMemMapEnable;
    SetDOOutputDriveTypePtr SetDOOutputDriveType;
    SetDOOvercurrentAutoReenablePtr SetDOOvercurrentAutoReenable;
    SetDOOvercurrentLimitPtr SetDOOvercurrentLimit;
    SetDOOvercurrentReenablePeriodPtr SetDOOvercurrentReenablePeriod;
    SetDOTristatePtr SetDOTristate;
    SetDOUsbXferReqCountPtr SetDOUsbXferReqCount;
    SetDOUsbXferReqSizePtr SetDOUsbXferReqSize;
    SetDOUseOnlyOnBrdMemPtr SetDOUseOnlyOnBrdMem;
    SetDigitalLogicFamilyPowerUpStatePtr SetDigitalLogicFamilyPowerUpState;
    SetFirstSampClkWhenPtr SetFirstSampClkWhen;
    SetPhysicalChanNamePtr SetPhysicalChanName;
    SetStartTrigTrigWhenPtr SetStartTrigTrigWhen;
    SetSyncPulseTimeWhenPtr SetSyncPulseTimeWhen;
    StartNewFilePtr StartNewFile;
    StartTaskPtr StartTask;
    StopTaskPtr StopTask;
    TaskControlPtr TaskControl;
    TristateOutputTermPtr TristateOutputTerm;
    UnreserveNetworkDevicePtr UnreserveNetworkDevice;
    WaitForNextSampleClockPtr WaitForNextSampleClock;
    WaitForValidTimestampPtr WaitForValidTimestamp;
    WaitUntilTaskDonePtr WaitUntilTaskDone;
    WriteAnalogF64Ptr WriteAnalogF64;
    WriteAnalogScalarF64Ptr WriteAnalogScalarF64;
    WriteBinaryI16Ptr WriteBinaryI16;
    WriteBinaryI32Ptr WriteBinaryI32;
    WriteBinaryU16Ptr WriteBinaryU16;
    WriteBinaryU32Ptr WriteBinaryU32;
    WriteCtrFreqPtr WriteCtrFreq;
    WriteCtrFreqScalarPtr WriteCtrFreqScalar;
    WriteCtrTicksPtr WriteCtrTicks;
    WriteCtrTicksScalarPtr WriteCtrTicksScalar;
    WriteCtrTimePtr WriteCtrTime;
    WriteCtrTimeScalarPtr WriteCtrTimeScalar;
    WriteDigitalLinesPtr WriteDigitalLines;
    WriteDigitalScalarU32Ptr WriteDigitalScalarU32;
    WriteDigitalU16Ptr WriteDigitalU16;
    WriteDigitalU32Ptr WriteDigitalU32;
    WriteDigitalU8Ptr WriteDigitalU8;
    WriteRawPtr WriteRaw;
    WriteToTEDSFromArrayPtr WriteToTEDSFromArray;
    WriteToTEDSFromFilePtr WriteToTEDSFromFile;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidaqmx_grpc

#endif  // NIDAQMX_GRPC_LIBRARY_H
