//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-DAQMX Metadata
//---------------------------------------------------------------------
#include "nidaqmx_library.h"

namespace nidaqmx_grpc {

int32 AddCDAQSyncConnection(const char portList[])
{
  return DAQmxAddCDAQSyncConnection(portList);
}

int32 AddGlobalChansToTask(TaskHandle task, const char channelNames[])
{
  return DAQmxAddGlobalChansToTask(task, channelNames);
}

int32 AddNetworkDevice(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize)
{
  return DAQmxAddNetworkDevice(ipAddress, deviceName, attemptReservation, timeout, deviceNameOut, deviceNameOutBufferSize);
}

int32 AreConfiguredCDAQSyncPortsDisconnected(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist)
{
  return DAQmxAreConfiguredCDAQSyncPortsDisconnected(chassisDevicesPorts, timeout, disconnectedPortsExist);
}

int32 AutoConfigureCDAQSyncConnections(const char chassisDevicesPorts[], float64 timeout)
{
  return DAQmxAutoConfigureCDAQSyncConnections(chassisDevicesPorts, timeout);
}

int32 CalculateReversePolyCoeff(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[])
{
  return DAQmxCalculateReversePolyCoeff(forwardCoeffs, numForwardCoeffsIn, minValX, maxValX, numPointsToCompute, reversePolyOrder, reverseCoeffs);
}

int32 CfgAnlgEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples)
{
  return DAQmxCfgAnlgEdgeRefTrig(task, triggerSource, triggerSlope, triggerLevel, pretriggerSamples);
}

int32 CfgAnlgEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel)
{
  return DAQmxCfgAnlgEdgeStartTrig(task, triggerSource, triggerSlope, triggerLevel);
}

int32 CfgAnlgMultiEdgeRefTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize)
{
  return DAQmxCfgAnlgMultiEdgeRefTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, pretriggerSamples, arraySize);
}

int32 CfgAnlgMultiEdgeStartTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize)
{
  return DAQmxCfgAnlgMultiEdgeStartTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, arraySize);
}

int32 CfgAnlgWindowRefTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples)
{
  return DAQmxCfgAnlgWindowRefTrig(task, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples);
}

int32 CfgAnlgWindowStartTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom)
{
  return DAQmxCfgAnlgWindowStartTrig(task, triggerSource, triggerWhen, windowTop, windowBottom);
}

int32 CfgBurstHandshakingTimingExportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel)
{
  return DAQmxCfgBurstHandshakingTimingExportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel);
}

int32 CfgBurstHandshakingTimingImportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel)
{
  return DAQmxCfgBurstHandshakingTimingImportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel);
}

int32 CfgChangeDetectionTiming(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgChangeDetectionTiming(task, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan);
}

int32 CfgDigEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples)
{
  return DAQmxCfgDigEdgeRefTrig(task, triggerSource, triggerEdge, pretriggerSamples);
}

int32 CfgDigEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge)
{
  return DAQmxCfgDigEdgeStartTrig(task, triggerSource, triggerEdge);
}

int32 CfgDigPatternRefTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples)
{
  return DAQmxCfgDigPatternRefTrig(task, triggerSource, triggerPattern, triggerWhen, pretriggerSamples);
}

int32 CfgDigPatternStartTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen)
{
  return DAQmxCfgDigPatternStartTrig(task, triggerSource, triggerPattern, triggerWhen);
}

int32 CfgHandshakingTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgHandshakingTiming(task, sampleMode, sampsPerChan);
}

int32 CfgImplicitTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgImplicitTiming(task, sampleMode, sampsPerChan);
}

int32 CfgInputBuffer(TaskHandle task, uInt32 numSampsPerChan)
{
  return DAQmxCfgInputBuffer(task, numSampsPerChan);
}

int32 CfgOutputBuffer(TaskHandle task, uInt32 numSampsPerChan)
{
  return DAQmxCfgOutputBuffer(task, numSampsPerChan);
}

int32 CfgPipelinedSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgPipelinedSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
}

int32 CfgSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
}

int32 CfgTimeStartTrig(TaskHandle task, CVIAbsoluteTime when, int32 timescale)
{
  return DAQmxCfgTimeStartTrig(task, when, timescale);
}

int32 CfgWatchdogAOExpirStates(TaskHandle task, const char channelNames[], const float64 expirStateArray[], const int32 outputTypeArray[], uInt32 arraySize)
{
  return DAQmxCfgWatchdogAOExpirStates(task, channelNames, expirStateArray, outputTypeArray, arraySize);
}

int32 CfgWatchdogCOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize)
{
  return DAQmxCfgWatchdogCOExpirStates(task, channelNames, expirStateArray, arraySize);
}

int32 CfgWatchdogDOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize)
{
  return DAQmxCfgWatchdogDOExpirStates(task, channelNames, expirStateArray, arraySize);
}

int32 ClearTEDS(const char physicalChannel[])
{
  return DAQmxClearTEDS(physicalChannel);
}

int32 ClearTask(TaskHandle task)
{
  return DAQmxClearTask(task);
}

int32 ConfigureLogging(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation)
{
  return DAQmxConfigureLogging(task, filePath, loggingMode, groupName, operation);
}

int32 ConfigureTEDS(const char physicalChannel[], const char filePath[])
{
  return DAQmxConfigureTEDS(physicalChannel, filePath);
}

int32 ConnectTerms(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers)
{
  return DAQmxConnectTerms(sourceTerminal, destinationTerminal, signalModifiers);
}

int32 ControlWatchdogTask(TaskHandle task, int32 action)
{
  return DAQmxControlWatchdogTask(task, action);
}

int32 CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  return DAQmxCreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
}

int32 CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  return DAQmxCreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
}

int32 CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[])
{
  return DAQmxCreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
}

int32 CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  return DAQmxCreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
}

int32 CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  return DAQmxCreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
}

int32 CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
}

int32 CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
}

int32 CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
}

int32 CreateAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[])
{
  return DAQmxCreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
}

int32 CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  return DAQmxCreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
}

int32 CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateAIPowerChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 voltageSetpoint, float64 currentSetpoint, bool32 outputEnable)
{
  return DAQmxCreateAIPowerChan(task, physicalChannel, nameToAssignToChannel, voltageSetpoint, currentSetpoint, outputEnable);
}

int32 CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
}

int32 CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
}

int32 CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
}

int32 CreateAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0)
{
  return DAQmxCreateAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0);
}

int32 CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIRosetteStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, const int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance)
{
  return DAQmxCreateAIRosetteStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, rosetteType, gageOrientation, rosetteMeasTypes, numRosetteMeasTypes, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, nominalGageResistance, poissonRatio, leadWireResistance);
}

int32 CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[])
{
  return DAQmxCreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
}

int32 CreateAITempBuiltInSensorChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units)
{
  return DAQmxCreateAITempBuiltInSensorChan(task, physicalChannel, nameToAssignToChannel, units);
}

int32 CreateAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[])
{
  return DAQmxCreateAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel);
}

int32 CreateAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c)
{
  return DAQmxCreateAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c);
}

int32 CreateAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1)
{
  return DAQmxCreateAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1);
}

int32 CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
}

int32 CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
}

int32 CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
}

int32 CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  return DAQmxCreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
}

int32 CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
}

int32 CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset)
{
  return DAQmxCreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
}

int32 CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
}

int32 CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[])
{
  return DAQmxCreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
}

int32 CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[])
{
  return DAQmxCreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName);
}

int32 CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection)
{
  return DAQmxCreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection);
}

int32 CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[])
{
  return DAQmxCreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName);
}

int32 CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  return DAQmxCreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
}

int32 CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[])
{
  return DAQmxCreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
}

int32 CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[])
{
  return DAQmxCreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, distPerPulse, initialPos, customScaleName);
}

int32 CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[])
{
  return DAQmxCreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName);
}

int32 CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  return DAQmxCreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
}

int32 CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  return DAQmxCreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units);
}

int32 CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal)
{
  return DAQmxCreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
}

int32 CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  return DAQmxCreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units);
}

int32 CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[])
{
  return DAQmxCreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
}

int32 CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
}

int32 CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[])
{
  return DAQmxCreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
}

int32 CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle)
{
  return DAQmxCreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
}

int32 CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks)
{
  return DAQmxCreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
}

int32 CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime)
{
  return DAQmxCreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
}

int32 CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  return DAQmxCreateDIChan(task, lines, nameToAssignToLines, lineGrouping);
}

int32 CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  return DAQmxCreateDOChan(task, lines, nameToAssignToLines, lineGrouping);
}

int32 CreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreateLinScale(name, slope, yIntercept, preScaledUnits, scaledUnits);
}

int32 CreateMapScale(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreateMapScale(name, prescaledMin, prescaledMax, scaledMin, scaledMax, preScaledUnits, scaledUnits);
}

int32 CreatePolynomialScale(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreatePolynomialScale(name, forwardCoeffs, numForwardCoeffsIn, reverseCoeffs, numReverseCoeffsIn, preScaledUnits, scaledUnits);
}

int32 CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
}

int32 CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal)
{
  return DAQmxCreateTEDSAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
}

int32 CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[])
{
  return DAQmxCreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
}

int32 CreateTEDSAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[])
{
  return DAQmxCreateTEDSAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel);
}

int32 CreateTEDSAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal)
{
  return DAQmxCreateTEDSAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
}

int32 CreateTEDSAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1)
{
  return DAQmxCreateTEDSAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1);
}

int32 CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTableScale(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreateTableScale(name, prescaledVals, numPrescaledValsIn, scaledVals, numScaledValsIn, preScaledUnits, scaledUnits);
}

int32 CreateTask(const char sessionName[], TaskHandle* task)
{
  return DAQmxCreateTask(sessionName, task);
}

int32 CreateWatchdogTimerTask(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState)
{
  return DAQmxCreateWatchdogTimerTask(deviceName, sessionName, task, timeout, lines, expState);
}

int32 CreateWatchdogTimerTaskEx(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout)
{
  return DAQmxCreateWatchdogTimerTaskEx(deviceName, sessionName, task, timeout);
}

int32 DeleteNetworkDevice(const char deviceName[])
{
  return DAQmxDeleteNetworkDevice(deviceName);
}

int32 DeleteSavedGlobalChan(const char channelName[])
{
  return DAQmxDeleteSavedGlobalChan(channelName);
}

int32 DeleteSavedScale(const char scaleName[])
{
  return DAQmxDeleteSavedScale(scaleName);
}

int32 DeleteSavedTask(const char taskName[])
{
  return DAQmxDeleteSavedTask(taskName);
}

int32 DeviceSupportsCal(const char deviceName[], bool32* calSupported)
{
  return DAQmxDeviceSupportsCal(deviceName, calSupported);
}

int32 DisableRefTrig(TaskHandle task)
{
  return DAQmxDisableRefTrig(task);
}

int32 DisableStartTrig(TaskHandle task)
{
  return DAQmxDisableStartTrig(task);
}

int32 DisconnectTerms(const char sourceTerminal[], const char destinationTerminal[])
{
  return DAQmxDisconnectTerms(sourceTerminal, destinationTerminal);
}

int32 ExportSignal(TaskHandle task, int32 signalID, const char outputTerminal[])
{
  return DAQmxExportSignal(task, signalID, outputTerminal);
}

int32 GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  return DAQmxGetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
}

int32 GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  return DAQmxGetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
}

int32 GetAnalogPowerUpStates(const char deviceName[], const char channelName[], float64* state, int32 channelType)
{
  return DAQmxGetAnalogPowerUpStates(deviceName, channelName, state, channelType);
}

int32 GetAnalogPowerUpStatesWithOutputType(const char channelNames[], float64 stateArray[], int32 channelTypeArray[], uInt32* arraySize)
{
  return DAQmxGetAnalogPowerUpStatesWithOutputType(channelNames, stateArray, channelTypeArray, arraySize);
}

int32 GetArmStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetArmStartTrigTimestampVal(task, data);
}

int32 GetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetArmStartTrigTrigWhen(task, data);
}

int32 GetAutoConfiguredCDAQSyncConnections(char portList[], uInt32 portListSize)
{
  return DAQmxGetAutoConfiguredCDAQSyncConnections(portList, portListSize);
}

int32 GetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetBufferAttribute(task, attribute, value);
}

int32 GetCalInfoAttributeBool(const char deviceName[], int32 attribute, bool32* value)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value);
}

int32 GetCalInfoAttributeDouble(const char deviceName[], int32 attribute, float64* value)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value);
}

int32 GetCalInfoAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value, size);
}

int32 GetCalInfoAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value);
}

int32 GetChanAttributeBool(TaskHandle task, const char channel[], int32 attribute, bool32* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetChanAttributeDouble(TaskHandle task, const char channel[], int32 attribute, float64* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetChanAttributeDoubleArray(TaskHandle task, const char channel[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value, size);
}

int32 GetChanAttributeInt32(TaskHandle task, const char channel[], int32 attribute, int32* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetChanAttributeString(TaskHandle task, const char channel[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value, size);
}

int32 GetChanAttributeUInt32(TaskHandle task, const char channel[], int32 attribute, uInt32* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetDeviceAttributeBool(const char deviceName[], int32 attribute, bool32* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeDouble(const char deviceName[], int32 attribute, float64* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeDoubleArray(const char deviceName[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDeviceAttributeInt32(const char deviceName[], int32 attribute, int32* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeInt32Array(const char deviceName[], int32 attribute, int32 value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDeviceAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDeviceAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeUInt32Array(const char deviceName[], int32 attribute, uInt32 value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDigitalLogicFamilyPowerUpState(const char deviceName[], int32* logicFamily)
{
  return DAQmxGetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
}

int32 GetDigitalPowerUpStates(const char deviceName[], const char channelName[], int32* state)
{
  return DAQmxGetDigitalPowerUpStates(deviceName, channelName, state);
}

int32 GetDigitalPullUpPullDownStates(const char deviceName[], const char channelName[], int32* state)
{
  return DAQmxGetDigitalPullUpPullDownStates(deviceName, channelName, state);
}

int32 GetDisconnectedCDAQSyncPorts(char portList[], uInt32 portListSize)
{
  return DAQmxGetDisconnectedCDAQSyncPorts(portList, portListSize);
}

int32 GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize)
{
  return DAQmxGetErrorString(errorCode, errorString, bufferSize);
}

int32 GetExportedSignalAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetExportedSignalAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetExportedSignalAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetExportedSignalAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value, size);
}

int32 GetExportedSignalAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetFirstSampClkWhen(task, data);
}

int32 GetFirstSampTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetFirstSampTimestampVal(task, data);
}

int32 GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  return DAQmxGetNthTaskChannel(task, index, buffer, bufferSize);
}

int32 GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  return DAQmxGetNthTaskDevice(task, index, buffer, bufferSize);
}

int32 GetNthTaskReadChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  return DAQmxGetNthTaskReadChannel(task, index, buffer, bufferSize);
}

int32 GetPersistedChanAttributeBool(const char channel[], int32 attribute, bool32* value)
{
  return DAQmxGetPersistedChanAttribute(channel, attribute, value);
}

int32 GetPersistedChanAttributeString(const char channel[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPersistedChanAttribute(channel, attribute, value, size);
}

int32 GetPersistedScaleAttributeBool(const char scaleName[], int32 attribute, bool32* value)
{
  return DAQmxGetPersistedScaleAttribute(scaleName, attribute, value);
}

int32 GetPersistedScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPersistedScaleAttribute(scaleName, attribute, value, size);
}

int32 GetPersistedTaskAttributeBool(const char taskName[], int32 attribute, bool32* value)
{
  return DAQmxGetPersistedTaskAttribute(taskName, attribute, value);
}

int32 GetPersistedTaskAttributeString(const char taskName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPersistedTaskAttribute(taskName, attribute, value, size);
}

int32 GetPhysicalChanAttributeBool(const char physicalChannel[], int32 attribute, bool32* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeBytes(const char physicalChannel[], int32 attribute, uInt8 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeDouble(const char physicalChannel[], int32 attribute, float64* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeDoubleArray(const char physicalChannel[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeInt32(const char physicalChannel[], int32 attribute, int32* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeInt32Array(const char physicalChannel[], int32 attribute, int32 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeString(const char physicalChannel[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeUInt32(const char physicalChannel[], int32 attribute, uInt32* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeUInt32Array(const char physicalChannel[], int32 attribute, uInt32 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetReadAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetReadAttribute(task, attribute, value, size);
}

int32 GetReadAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetRealTimeAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetRealTimeAttribute(task, attribute, value);
}

int32 GetRealTimeAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetRealTimeAttribute(task, attribute, value);
}

int32 GetRealTimeAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetRealTimeAttribute(task, attribute, value);
}

int32 GetRefTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetRefTrigTimestampVal(task, data);
}

int32 GetScaleAttributeDouble(const char scaleName[], int32 attribute, float64* value)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value);
}

int32 GetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value, size);
}

int32 GetScaleAttributeInt32(const char scaleName[], int32 attribute, int32* value)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value);
}

int32 GetScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value, size);
}

int32 GetSelfCalLastDateAndTime(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  return DAQmxGetSelfCalLastDateAndTime(deviceName, year, month, day, hour, minute);
}

int32 GetStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetStartTrigTimestampVal(task, data);
}

int32 GetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetStartTrigTrigWhen(task, data);
}

int32 GetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetSyncPulseTimeWhen(task, data);
}

int32 GetSystemInfoAttributeString(int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetSystemInfoAttribute(attribute, value, size);
}

int32 GetSystemInfoAttributeUInt32(int32 attribute, uInt32* value)
{
  return DAQmxGetSystemInfoAttribute(attribute, value);
}

int32 GetTaskAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetTaskAttribute(task, attribute, value);
}

int32 GetTaskAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTaskAttribute(task, attribute, value, size);
}

int32 GetTaskAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetTaskAttribute(task, attribute, value);
}

int32 GetTimingAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeExBool(TaskHandle task, const char deviceNames[], int32 attribute, bool32* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExDouble(TaskHandle task, const char deviceNames[], int32 attribute, float64* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExInt32(TaskHandle task, const char deviceNames[], int32 attribute, int32* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExString(TaskHandle task, const char deviceNames[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value, size);
}

int32 GetTimingAttributeExTimestamp(TaskHandle task, const char deviceNames[], int32 attribute, CVIAbsoluteTime* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExUInt32(TaskHandle task, const char deviceNames[], int32 attribute, uInt32* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExUInt64(TaskHandle task, const char deviceNames[], int32 attribute, uInt64* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTimingAttribute(task, attribute, value, size);
}

int32 GetTimingAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTrigAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeDoubleArray(TaskHandle task, int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetTrigAttribute(task, attribute, value, size);
}

int32 GetTrigAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeInt32Array(TaskHandle task, int32 attribute, int32 value[], uInt32 size)
{
  return DAQmxGetTrigAttribute(task, attribute, value, size);
}

int32 GetTrigAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTrigAttribute(task, attribute, value, size);
}

int32 GetTrigAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetWatchdogAttributeBool(TaskHandle task, const char lines[], int32 attribute, bool32* value)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value);
}

int32 GetWatchdogAttributeDouble(TaskHandle task, const char lines[], int32 attribute, float64* value)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value);
}

int32 GetWatchdogAttributeInt32(TaskHandle task, const char lines[], int32 attribute, int32* value)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value);
}

int32 GetWatchdogAttributeString(TaskHandle task, const char lines[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value, size);
}

int32 GetWriteAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetWriteAttribute(task, attribute, value, size);
}

int32 GetWriteAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 IsTaskDone(TaskHandle task, bool32* isTaskDone)
{
  return DAQmxIsTaskDone(task, isTaskDone);
}

int32 LoadTask(const char sessionName[], TaskHandle* task)
{
  return DAQmxLoadTask(sessionName, task);
}

int32 ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadAnalogScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved)
{
  return DAQmxReadAnalogScalarF64(task, timeout, value, reserved);
}

int32 ReadBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryI16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadBinaryI32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryI32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadBinaryU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadBinaryU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterF64(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterF64Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterF64Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved)
{
  return DAQmxReadCounterScalarF64(task, timeout, value, reserved);
}

int32 ReadCounterScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved)
{
  return DAQmxReadCounterScalarU32(task, timeout, value, reserved);
}

int32 ReadCounterU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterU32(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterU32Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterU32Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrFreq(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCtrFreq(task, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrFreqScalar(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved)
{
  return DAQmxReadCtrFreqScalar(task, timeout, frequency, dutyCycle, reserved);
}

int32 ReadCtrTicks(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCtrTicks(task, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrTicksScalar(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved)
{
  return DAQmxReadCtrTicksScalar(task, timeout, highTicks, lowTicks, reserved);
}

int32 ReadCtrTime(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCtrTime(task, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrTimeScalar(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved)
{
  return DAQmxReadCtrTimeScalar(task, timeout, highTime, lowTime, reserved);
}

int32 ReadDigitalLines(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved)
{
  return DAQmxReadDigitalLines(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, reserved);
}

int32 ReadDigitalScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved)
{
  return DAQmxReadDigitalScalarU32(task, timeout, value, reserved);
}

int32 ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadDigitalU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadDigitalU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadPowerBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArrayVoltage[], int16 readArrayCurrent[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadPowerBinaryI16(task, numSampsPerChan, timeout, fillMode, readArrayVoltage, readArrayCurrent, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadPowerF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArrayVoltage[], float64 readArrayCurrent[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadPowerF64(task, numSampsPerChan, timeout, fillMode, readArrayVoltage, readArrayCurrent, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadPowerScalarF64(TaskHandle task, float64 timeout, float64* voltage, float64* current, bool32* reserved)
{
  return DAQmxReadPowerScalarF64(task, timeout, voltage, current, reserved);
}

int32 ReadRaw(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved)
{
  return DAQmxReadRaw(task, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, reserved);
}

int32 RegisterDoneEvent(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData)
{
  return DAQmxRegisterDoneEvent(task, options, callbackFunction, callbackData);
}

int32 RegisterEveryNSamplesEvent(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData)
{
  return DAQmxRegisterEveryNSamplesEvent(task, everyNSamplesEventType, nSamples, options, callbackFunction, callbackData);
}

int32 RegisterSignalEvent(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData)
{
  return DAQmxRegisterSignalEvent(task, signalID, options, callbackFunction, callbackData);
}

int32 RemoveCDAQSyncConnection(const char portList[])
{
  return DAQmxRemoveCDAQSyncConnection(portList);
}

int32 ReserveNetworkDevice(const char deviceName[], bool32 overrideReservation)
{
  return DAQmxReserveNetworkDevice(deviceName, overrideReservation);
}

int32 ResetBufferAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetBufferAttribute(task, attribute);
}

int32 ResetChanAttribute(TaskHandle task, const char channel[], int32 attribute)
{
  return DAQmxResetChanAttribute(task, channel, attribute);
}

int32 ResetDevice(const char deviceName[])
{
  return DAQmxResetDevice(deviceName);
}

int32 ResetExportedSignalAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetExportedSignalAttribute(task, attribute);
}

int32 ResetReadAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetReadAttribute(task, attribute);
}

int32 ResetRealTimeAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetRealTimeAttribute(task, attribute);
}

int32 ResetTimingAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetTimingAttribute(task, attribute);
}

int32 ResetTimingAttributeEx(TaskHandle task, const char deviceNames[], int32 attribute)
{
  return DAQmxResetTimingAttributeEx(task, deviceNames, attribute);
}

int32 ResetTrigAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetTrigAttribute(task, attribute);
}

int32 ResetWatchdogAttribute(TaskHandle task, const char lines[], int32 attribute)
{
  return DAQmxResetWatchdogAttribute(task, lines, attribute);
}

int32 ResetWriteAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetWriteAttribute(task, attribute);
}

int32 SaveGlobalChan(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options)
{
  return DAQmxSaveGlobalChan(task, channelName, saveAs, author, options);
}

int32 SaveScale(const char scaleName[], const char saveAs[], const char author[], uInt32 options)
{
  return DAQmxSaveScale(scaleName, saveAs, author, options);
}

int32 SaveTask(TaskHandle task, const char saveAs[], const char author[], uInt32 options)
{
  return DAQmxSaveTask(task, saveAs, author, options);
}

int32 SelfCal(const char deviceName[])
{
  return DAQmxSelfCal(deviceName);
}

int32 SelfTestDevice(const char deviceName[])
{
  return DAQmxSelfTestDevice(deviceName);
}

int32 SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  return DAQmxSetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
}

int32 SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  return DAQmxSetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
}

int32 SetAnalogPowerUpStates(const char deviceName[], const char channelNames[], float64 state, int32 channelType)
{
  return DAQmxSetAnalogPowerUpStates(deviceName, channelNames, state, channelType);
}

int32 SetAnalogPowerUpStatesWithOutputType(const char channelNames[], const float64 stateArray[], const int32 channelTypeArray[], uInt32 arraySize)
{
  return DAQmxSetAnalogPowerUpStatesWithOutputType(channelNames, stateArray, channelTypeArray, arraySize);
}

int32 SetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetArmStartTrigTrigWhen(task, data);
}

int32 SetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetBufferAttribute(task, attribute, value);
}

int32 SetCalInfoAttributeBool(const char deviceName[], int32 attribute, bool32 value)
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetCalInfoAttributeDouble(const char deviceName[], int32 attribute, float64 value)
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetCalInfoAttributeString(const char deviceName[], int32 attribute, const char value[])
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetCalInfoAttributeUInt32(const char deviceName[], int32 attribute, uInt32 value)
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetChanAttributeBool(TaskHandle task, const char channel[], int32 attribute, bool32 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeDouble(TaskHandle task, const char channel[], int32 attribute, float64 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeDoubleArray(TaskHandle task, const char channel[], int32 attribute, const float64 value[], uInt32 size)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value, size);
}

int32 SetChanAttributeInt32(TaskHandle task, const char channel[], int32 attribute, int32 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeString(TaskHandle task, const char channel[], int32 attribute, const char value[])
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeUInt32(TaskHandle task, const char channel[], int32 attribute, uInt32 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetDigitalLogicFamilyPowerUpState(const char deviceName[], int32 logicFamily)
{
  return DAQmxSetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
}

int32 SetDigitalPowerUpStates(const char deviceName[], const char channelNames[], int32 state)
{
  return DAQmxSetDigitalPowerUpStates(deviceName, channelNames, state);
}

int32 SetDigitalPullUpPullDownStates(const char deviceName[], const char channelNames[], int32 state)
{
  return DAQmxSetDigitalPullUpPullDownStates(deviceName, channelNames, state);
}

int32 SetExportedSignalAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetFirstSampClkWhen(task, data);
}

int32 SetReadAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetRealTimeAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetRealTimeAttribute(task, attribute, value);
}

int32 SetRealTimeAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetRealTimeAttribute(task, attribute, value);
}

int32 SetRealTimeAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetRealTimeAttribute(task, attribute, value);
}

int32 SetScaleAttributeDouble(const char scaleName[], int32 attribute, float64 value)
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value);
}

int32 SetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, const float64 value[], uInt32 size)
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value, size);
}

int32 SetScaleAttributeInt32(const char scaleName[], int32 attribute, int32 value)
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value);
}

int32 SetScaleAttributeString(const char scaleName[], int32 attribute, const char value[])
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value);
}

int32 SetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetStartTrigTrigWhen(task, data);
}

int32 SetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetSyncPulseTimeWhen(task, data);
}

int32 SetTimingAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeExBool(TaskHandle task, const char deviceNames[], int32 attribute, bool32 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExDouble(TaskHandle task, const char deviceNames[], int32 attribute, float64 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExInt32(TaskHandle task, const char deviceNames[], int32 attribute, int32 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExString(TaskHandle task, const char deviceNames[], int32 attribute, const char value[])
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExTimestamp(TaskHandle task, const char deviceNames[], int32 attribute, CVIAbsoluteTime value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExUInt32(TaskHandle task, const char deviceNames[], int32 attribute, uInt32 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExUInt64(TaskHandle task, const char deviceNames[], int32 attribute, uInt64 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTrigAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeDoubleArray(TaskHandle task, int32 attribute, const float64 value[], uInt32 size)
{
  return DAQmxSetTrigAttribute(task, attribute, value, size);
}

int32 SetTrigAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeInt32Array(TaskHandle task, int32 attribute, const int32 value[], uInt32 size)
{
  return DAQmxSetTrigAttribute(task, attribute, value, size);
}

int32 SetTrigAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetWatchdogAttributeBool(TaskHandle task, const char lines[], int32 attribute, bool32 value)
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWatchdogAttributeDouble(TaskHandle task, const char lines[], int32 attribute, float64 value)
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWatchdogAttributeInt32(TaskHandle task, const char lines[], int32 attribute, int32 value)
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWatchdogAttributeString(TaskHandle task, const char lines[], int32 attribute, const char value[])
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWriteAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 StartNewFile(TaskHandle task, const char filePath[])
{
  return DAQmxStartNewFile(task, filePath);
}

int32 StartTask(TaskHandle task)
{
  return DAQmxStartTask(task);
}

int32 StopTask(TaskHandle task)
{
  return DAQmxStopTask(task);
}

int32 TaskControl(TaskHandle task, int32 action)
{
  return DAQmxTaskControl(task, action);
}

int32 TristateOutputTerm(const char outputTerminal[])
{
  return DAQmxTristateOutputTerm(outputTerminal);
}

int32 UnreserveNetworkDevice(const char deviceName[])
{
  return DAQmxUnreserveNetworkDevice(deviceName);
}

int32 WaitForNextSampleClock(TaskHandle task, float64 timeout, bool32* isLate)
{
  return DAQmxWaitForNextSampleClock(task, timeout, isLate);
}

int32 WaitForValidTimestamp(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp)
{
  return DAQmxWaitForValidTimestamp(task, timestampEvent, timeout, timestamp);
}

int32 WaitUntilTaskDone(TaskHandle task, float64 timeToWait)
{
  return DAQmxWaitUntilTaskDone(task, timeToWait);
}

int32 WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteAnalogScalarF64(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved)
{
  return DAQmxWriteAnalogScalarF64(task, autoStart, timeout, value, reserved);
}

int32 WriteBinaryI16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryI16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteBinaryI32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryI32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteBinaryU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteBinaryU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteCtrFreq(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteCtrFreq(task, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, reserved);
}

int32 WriteCtrFreqScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved)
{
  return DAQmxWriteCtrFreqScalar(task, autoStart, timeout, frequency, dutyCycle, reserved);
}

int32 WriteCtrTicks(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteCtrTicks(task, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, reserved);
}

int32 WriteCtrTicksScalar(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved)
{
  return DAQmxWriteCtrTicksScalar(task, autoStart, timeout, highTicks, lowTicks, reserved);
}

int32 WriteCtrTime(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteCtrTime(task, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, reserved);
}

int32 WriteCtrTimeScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved)
{
  return DAQmxWriteCtrTimeScalar(task, autoStart, timeout, highTime, lowTime, reserved);
}

int32 WriteDigitalLines(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalLines(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteDigitalScalarU32(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved)
{
  return DAQmxWriteDigitalScalarU32(task, autoStart, timeout, value, reserved);
}

int32 WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteDigitalU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteRaw(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteRaw(task, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteToTEDSFromArray(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions)
{
  return DAQmxWriteToTEDSFromArray(physicalChannel, bitStream, arraySize, basicTEDSOptions);
}

int32 WriteToTEDSFromFile(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions)
{
  return DAQmxWriteToTEDSFromFile(physicalChannel, filePath, basicTEDSOptions);
}

}  // namespace nidaqmx_grpc
