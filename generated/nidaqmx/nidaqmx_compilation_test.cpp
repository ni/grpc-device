//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-DAQMX Metadata
//---------------------------------------------------------------------
#include "nidaqmx_library.h"

namespace nidaqmx_grpc {

int32 AddCDAQSyncConnection(const char portList[])
{
  return DAQmxAddCDAQSyncConnection(portList);
}

int32 AddGlobalChansToTask(TaskHandle task, const char channelNames[])
{
  return DAQmxAddGlobalChansToTask(task, channelNames);
}

int32 AddNetworkDevice(const char ipAddress[], const char deviceName[], bool32 attemptReservation, float64 timeout, char deviceNameOut[], uInt32 deviceNameOutBufferSize)
{
  return DAQmxAddNetworkDevice(ipAddress, deviceName, attemptReservation, timeout, deviceNameOut, deviceNameOutBufferSize);
}

int32 AreConfiguredCDAQSyncPortsDisconnected(const char chassisDevicesPorts[], float64 timeout, bool32* disconnectedPortsExist)
{
  return DAQmxAreConfiguredCDAQSyncPortsDisconnected(chassisDevicesPorts, timeout, disconnectedPortsExist);
}

int32 AutoConfigureCDAQSyncConnections(const char chassisDevicesPorts[], float64 timeout)
{
  return DAQmxAutoConfigureCDAQSyncConnections(chassisDevicesPorts, timeout);
}

int32 CalculateReversePolyCoeff(const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, float64 minValX, float64 maxValX, int32 numPointsToCompute, int32 reversePolyOrder, float64 reverseCoeffs[])
{
  return DAQmxCalculateReversePolyCoeff(forwardCoeffs, numForwardCoeffsIn, minValX, maxValX, numPointsToCompute, reversePolyOrder, reverseCoeffs);
}

int32 CfgAnlgEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel, uInt32 pretriggerSamples)
{
  return DAQmxCfgAnlgEdgeRefTrig(task, triggerSource, triggerSlope, triggerLevel, pretriggerSamples);
}

int32 CfgAnlgEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerSlope, float64 triggerLevel)
{
  return DAQmxCfgAnlgEdgeStartTrig(task, triggerSource, triggerSlope, triggerLevel);
}

int32 CfgAnlgMultiEdgeRefTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 pretriggerSamples, uInt32 arraySize)
{
  return DAQmxCfgAnlgMultiEdgeRefTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, pretriggerSamples, arraySize);
}

int32 CfgAnlgMultiEdgeStartTrig(TaskHandle task, const char triggerSources[], const int32 triggerSlopeArray[], const float64 triggerLevelArray[], uInt32 arraySize)
{
  return DAQmxCfgAnlgMultiEdgeStartTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, arraySize);
}

int32 CfgAnlgWindowRefTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom, uInt32 pretriggerSamples)
{
  return DAQmxCfgAnlgWindowRefTrig(task, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples);
}

int32 CfgAnlgWindowStartTrig(TaskHandle task, const char triggerSource[], int32 triggerWhen, float64 windowTop, float64 windowBottom)
{
  return DAQmxCfgAnlgWindowStartTrig(task, triggerSource, triggerWhen, windowTop, windowBottom);
}

int32 CfgBurstHandshakingTimingExportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkOutpTerm[], int32 sampleClkPulsePolarity, int32 pauseWhen, int32 readyEventActiveLevel)
{
  return DAQmxCfgBurstHandshakingTimingExportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel);
}

int32 CfgBurstHandshakingTimingImportClock(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan, float64 sampleClkRate, const char sampleClkSrc[], int32 sampleClkActiveEdge, int32 pauseWhen, int32 readyEventActiveLevel)
{
  return DAQmxCfgBurstHandshakingTimingImportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel);
}

int32 CfgChangeDetectionTiming(TaskHandle task, const char risingEdgeChan[], const char fallingEdgeChan[], int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgChangeDetectionTiming(task, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan);
}

int32 CfgDigEdgeRefTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge, uInt32 pretriggerSamples)
{
  return DAQmxCfgDigEdgeRefTrig(task, triggerSource, triggerEdge, pretriggerSamples);
}

int32 CfgDigEdgeStartTrig(TaskHandle task, const char triggerSource[], int32 triggerEdge)
{
  return DAQmxCfgDigEdgeStartTrig(task, triggerSource, triggerEdge);
}

int32 CfgDigPatternRefTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen, uInt32 pretriggerSamples)
{
  return DAQmxCfgDigPatternRefTrig(task, triggerSource, triggerPattern, triggerWhen, pretriggerSamples);
}

int32 CfgDigPatternStartTrig(TaskHandle task, const char triggerSource[], const char triggerPattern[], int32 triggerWhen)
{
  return DAQmxCfgDigPatternStartTrig(task, triggerSource, triggerPattern, triggerWhen);
}

int32 CfgHandshakingTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgHandshakingTiming(task, sampleMode, sampsPerChan);
}

int32 CfgImplicitTiming(TaskHandle task, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgImplicitTiming(task, sampleMode, sampsPerChan);
}

int32 CfgInputBuffer(TaskHandle task, uInt32 numSampsPerChan)
{
  return DAQmxCfgInputBuffer(task, numSampsPerChan);
}

int32 CfgOutputBuffer(TaskHandle task, uInt32 numSampsPerChan)
{
  return DAQmxCfgOutputBuffer(task, numSampsPerChan);
}

int32 CfgPipelinedSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgPipelinedSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
}

int32 CfgSampClkTiming(TaskHandle task, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChan)
{
  return DAQmxCfgSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan);
}

int32 CfgTimeStartTrig(TaskHandle task, CVIAbsoluteTime when, int32 timescale)
{
  return DAQmxCfgTimeStartTrig(task, when, timescale);
}

int32 CfgWatchdogAOExpirStates(TaskHandle task, const char channelNames[], const float64 expirStateArray[], const int32 outputTypeArray[], uInt32 arraySize)
{
  return DAQmxCfgWatchdogAOExpirStates(task, channelNames, expirStateArray, outputTypeArray, arraySize);
}

int32 CfgWatchdogCOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize)
{
  return DAQmxCfgWatchdogCOExpirStates(task, channelNames, expirStateArray, arraySize);
}

int32 CfgWatchdogDOExpirStates(TaskHandle task, const char channelNames[], const int32 expirStateArray[], uInt32 arraySize)
{
  return DAQmxCfgWatchdogDOExpirStates(task, channelNames, expirStateArray, arraySize);
}

int32 ClearTEDS(const char physicalChannel[])
{
  return DAQmxClearTEDS(physicalChannel);
}

int32 ClearTask(TaskHandle task)
{
  return DAQmxClearTask(task);
}

int32 ConfigureLogging(TaskHandle task, const char filePath[], int32 loggingMode, const char groupName[], int32 operation)
{
  return DAQmxConfigureLogging(task, filePath, loggingMode, groupName, operation);
}

int32 ConfigureTEDS(const char physicalChannel[], const char filePath[])
{
  return DAQmxConfigureTEDS(physicalChannel, filePath);
}

int32 ConnectTerms(const char sourceTerminal[], const char destinationTerminal[], int32 signalModifiers)
{
  return DAQmxConnectTerms(sourceTerminal, destinationTerminal, signalModifiers);
}

int32 ControlWatchdogTask(TaskHandle task, int32 action)
{
  return DAQmxControlWatchdogTask(task, action);
}

int32 CreateAIAccel4WireDCVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  return DAQmxCreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
}

int32 CreateAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIAccelChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  return DAQmxCreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
}

int32 CreateAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const char customScaleName[])
{
  return DAQmxCreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
}

int32 CreateAIChargeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  return DAQmxCreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
}

int32 CreateAICurrentRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  return DAQmxCreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
}

int32 CreateAIForceBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
}

int32 CreateAIForceBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
}

int32 CreateAIForceBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
}

int32 CreateAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIFreqVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 thresholdLevel, float64 hysteresis, const char customScaleName[])
{
  return DAQmxCreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
}

int32 CreateAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 micSensitivity, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIPosEddyCurrProxProbeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, const char customScaleName[])
{
  return DAQmxCreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
}

int32 CreateAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateAIPowerChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 voltageSetpoint, float64 currentSetpoint, bool32 outputEnable)
{
  return DAQmxCreateAIPowerChan(task, physicalChannel, nameToAssignToChannel, voltageSetpoint, currentSetpoint, outputEnable);
}

int32 CreateAIPressureBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
}

int32 CreateAIPressureBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
}

int32 CreateAIPressureBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
}

int32 CreateAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 rtdType, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 r0)
{
  return DAQmxCreateAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0);
}

int32 CreateAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIRosetteStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 rosetteType, float64 gageOrientation, const int32 rosetteMeasTypes[], uInt32 numRosetteMeasTypes, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance)
{
  return DAQmxCreateAIRosetteStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, rosetteType, gageOrientation, rosetteMeasTypes, numRosetteMeasTypes, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, nominalGageResistance, poissonRatio, leadWireResistance);
}

int32 CreateAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 strainConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 gageFactor, float64 initialBridgeVoltage, float64 nominalGageResistance, float64 poissonRatio, float64 leadWireResistance, const char customScaleName[])
{
  return DAQmxCreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
}

int32 CreateAITempBuiltInSensorChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 units)
{
  return DAQmxCreateAITempBuiltInSensorChan(task, physicalChannel, nameToAssignToChannel, units);
}

int32 CreateAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 thermocoupleType, int32 cjcSource, float64 cjcVal, const char cjcChannel[])
{
  return DAQmxCreateAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel);
}

int32 CreateAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, float64 a, float64 b, float64 c)
{
  return DAQmxCreateAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c);
}

int32 CreateAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 a, float64 b, float64 c, float64 r1)
{
  return DAQmxCreateAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1);
}

int32 CreateAITorqueBridgePolynomialChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 forwardCoeffs[], uInt32 numForwardCoeffs, const float64 reverseCoeffs[], uInt32 numReverseCoeffs, int32 electricalUnits, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
}

int32 CreateAITorqueBridgeTableChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, const float64 electricalVals[], uInt32 numElectricalVals, int32 electricalUnits, const float64 physicalVals[], uInt32 numPhysicalVals, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
}

int32 CreateAITorqueBridgeTwoPointLinChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 nominalBridgeResistance, float64 firstElectricalVal, float64 secondElectricalVal, int32 electricalUnits, float64 firstPhysicalVal, float64 secondPhysicalVal, int32 physicalUnits, const char customScaleName[])
{
  return DAQmxCreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
}

int32 CreateAIVelocityIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, float64 sensitivity, int32 sensitivityUnits, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 bridgeConfig, int32 voltageExcitSource, float64 voltageExcitVal, bool32 useExcitForScaling, const char customScaleName[])
{
  return DAQmxCreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
}

int32 CreateAIVoltageRMSChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateAOCurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
}

int32 CreateAOFuncGenChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 type, float64 freq, float64 amplitude, float64 offset)
{
  return DAQmxCreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
}

int32 CreateAOVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
}

int32 CreateCIAngEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, uInt32 pulsesPerRev, float64 initialAngle, const char customScaleName[])
{
  return DAQmxCreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
}

int32 CreateCIAngVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, uInt32 pulsesPerRev, const char customScaleName[])
{
  return DAQmxCreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName);
}

int32 CreateCICountEdgesChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 edge, uInt32 initialCount, int32 countDirection)
{
  return DAQmxCreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection);
}

int32 CreateCIDutyCycleChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minFreq, float64 maxFreq, int32 edge, const char customScaleName[])
{
  return DAQmxCreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName);
}

int32 CreateCIFreqChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  return DAQmxCreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
}

int32 CreateCIGPSTimestampChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 syncMethod, const char customScaleName[])
{
  return DAQmxCreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
}

int32 CreateCILinEncoderChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 decodingType, bool32 zidxEnable, float64 zidxVal, int32 zidxPhase, int32 units, float64 distPerPulse, float64 initialPos, const char customScaleName[])
{
  return DAQmxCreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, zidxEnable, zidxVal, zidxPhase, units, distPerPulse, initialPos, customScaleName);
}

int32 CreateCILinVelocityChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 decodingType, int32 units, float64 distPerPulse, const char customScaleName[])
{
  return DAQmxCreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName);
}

int32 CreateCIPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 edge, int32 measMethod, float64 measTime, uInt32 divisor, const char customScaleName[])
{
  return DAQmxCreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
}

int32 CreateCIPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  return DAQmxCreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units);
}

int32 CreateCIPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], float64 minVal, float64 maxVal)
{
  return DAQmxCreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
}

int32 CreateCIPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units)
{
  return DAQmxCreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units);
}

int32 CreateCIPulseWidthChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 startingEdge, const char customScaleName[])
{
  return DAQmxCreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
}

int32 CreateCISemiPeriodChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
}

int32 CreateCITwoEdgeSepChan(TaskHandle task, const char counter[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 firstEdge, int32 secondEdge, const char customScaleName[])
{
  return DAQmxCreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
}

int32 CreateCOPulseChanFreq(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 freq, float64 dutyCycle)
{
  return DAQmxCreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
}

int32 CreateCOPulseChanTicks(TaskHandle task, const char counter[], const char nameToAssignToChannel[], const char sourceTerminal[], int32 idleState, int32 initialDelay, int32 lowTicks, int32 highTicks)
{
  return DAQmxCreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
}

int32 CreateCOPulseChanTime(TaskHandle task, const char counter[], const char nameToAssignToChannel[], int32 units, int32 idleState, float64 initialDelay, float64 lowTime, float64 highTime)
{
  return DAQmxCreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
}

int32 CreateDIChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  return DAQmxCreateDIChan(task, lines, nameToAssignToLines, lineGrouping);
}

int32 CreateDOChan(TaskHandle task, const char lines[], const char nameToAssignToLines[], int32 lineGrouping)
{
  return DAQmxCreateDOChan(task, lines, nameToAssignToLines, lineGrouping);
}

int32 CreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreateLinScale(name, slope, yIntercept, preScaledUnits, scaledUnits);
}

int32 CreateMapScale(const char name[], float64 prescaledMin, float64 prescaledMax, float64 scaledMin, float64 scaledMax, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreateMapScale(name, prescaledMin, prescaledMax, scaledMin, scaledMax, preScaledUnits, scaledUnits);
}

int32 CreatePolynomialScale(const char name[], const float64 forwardCoeffs[], uInt32 numForwardCoeffsIn, const float64 reverseCoeffs[], uInt32 numReverseCoeffsIn, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreatePolynomialScale(name, forwardCoeffs, numForwardCoeffsIn, reverseCoeffs, numReverseCoeffsIn, preScaledUnits, scaledUnits);
}

int32 CreateTEDSAIAccelChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAICurrentChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 shuntResistorLoc, float64 extShuntResistorVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
}

int32 CreateTEDSAIForceBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAIForceIEPEChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIMicrophoneChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, int32 units, float64 maxSndPressLevel, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIPosLVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateTEDSAIPosRVDTChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 voltageExcitFreq, int32 acExcitWireMode, const char customScaleName[])
{
  return DAQmxCreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, acExcitWireMode, customScaleName);
}

int32 CreateTEDSAIPressureBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAIRTDChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal)
{
  return DAQmxCreateTEDSAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
}

int32 CreateTEDSAIResistanceChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
}

int32 CreateTEDSAIStrainGageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, float64 initialBridgeVoltage, float64 leadWireResistance, const char customScaleName[])
{
  return DAQmxCreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
}

int32 CreateTEDSAIThrmcplChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 cjcSource, float64 cjcVal, const char cjcChannel[])
{
  return DAQmxCreateTEDSAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel);
}

int32 CreateTEDSAIThrmstrChanIex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 currentExcitSource, float64 currentExcitVal)
{
  return DAQmxCreateTEDSAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
}

int32 CreateTEDSAIThrmstrChanVex(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 resistanceConfig, int32 voltageExcitSource, float64 voltageExcitVal, float64 r1)
{
  return DAQmxCreateTEDSAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1);
}

int32 CreateTEDSAITorqueBridgeChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTEDSAIVoltageChan(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[])
{
  return DAQmxCreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
}

int32 CreateTEDSAIVoltageChanWithExcit(TaskHandle task, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, int32 voltageExcitSource, float64 voltageExcitVal, const char customScaleName[])
{
  return DAQmxCreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
}

int32 CreateTableScale(const char name[], const float64 prescaledVals[], uInt32 numPrescaledValsIn, const float64 scaledVals[], uInt32 numScaledValsIn, int32 preScaledUnits, const char scaledUnits[])
{
  return DAQmxCreateTableScale(name, prescaledVals, numPrescaledValsIn, scaledVals, numScaledValsIn, preScaledUnits, scaledUnits);
}

int32 CreateTask(const char sessionName[], TaskHandle* task)
{
  return DAQmxCreateTask(sessionName, task);
}

int32 CreateWatchdogTimerTask(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout, const char lines[], int32 expState, const char lines0[], int32 expState0, const char lines1[], int32 expState1, const char lines2[], int32 expState2, const char lines3[], int32 expState3, const char lines4[], int32 expState4, const char lines5[], int32 expState5, const char lines6[], int32 expState6, const char lines7[], int32 expState7, const char lines8[], int32 expState8, const char lines9[], int32 expState9, const char lines10[], int32 expState10, const char lines11[], int32 expState11, const char lines12[], int32 expState12, const char lines13[], int32 expState13, const char lines14[], int32 expState14, const char lines15[], int32 expState15, const char lines16[], int32 expState16, const char lines17[], int32 expState17, const char lines18[], int32 expState18, const char lines19[], int32 expState19, const char lines20[], int32 expState20, const char lines21[], int32 expState21, const char lines22[], int32 expState22, const char lines23[], int32 expState23, const char lines24[], int32 expState24, const char lines25[], int32 expState25, const char lines26[], int32 expState26, const char lines27[], int32 expState27, const char lines28[], int32 expState28, const char lines29[], int32 expState29, const char lines30[], int32 expState30, const char lines31[], int32 expState31, const char lines32[], int32 expState32, const char lines33[], int32 expState33, const char lines34[], int32 expState34, const char lines35[], int32 expState35, const char lines36[], int32 expState36, const char lines37[], int32 expState37, const char lines38[], int32 expState38, const char lines39[], int32 expState39, const char lines40[], int32 expState40, const char lines41[], int32 expState41, const char lines42[], int32 expState42, const char lines43[], int32 expState43, const char lines44[], int32 expState44, const char lines45[], int32 expState45, const char lines46[], int32 expState46, const char lines47[], int32 expState47, const char lines48[], int32 expState48, const char lines49[], int32 expState49, const char lines50[], int32 expState50, const char lines51[], int32 expState51, const char lines52[], int32 expState52, const char lines53[], int32 expState53, const char lines54[], int32 expState54, const char lines55[], int32 expState55, const char lines56[], int32 expState56, const char lines57[], int32 expState57, const char lines58[], int32 expState58, const char lines59[], int32 expState59, const char lines60[], int32 expState60, const char lines61[], int32 expState61, const char lines62[], int32 expState62, const char lines63[], int32 expState63, const char lines64[], int32 expState64, const char lines65[], int32 expState65, const char lines66[], int32 expState66, const char lines67[], int32 expState67, const char lines68[], int32 expState68, const char lines69[], int32 expState69, const char lines70[], int32 expState70, const char lines71[], int32 expState71, const char lines72[], int32 expState72, const char lines73[], int32 expState73, const char lines74[], int32 expState74, const char lines75[], int32 expState75, const char lines76[], int32 expState76, const char lines77[], int32 expState77, const char lines78[], int32 expState78, const char lines79[], int32 expState79, const char lines80[], int32 expState80, const char lines81[], int32 expState81, const char lines82[], int32 expState82, const char lines83[], int32 expState83, const char lines84[], int32 expState84, const char lines85[], int32 expState85, const char lines86[], int32 expState86, const char lines87[], int32 expState87, const char lines88[], int32 expState88, const char lines89[], int32 expState89, const char lines90[], int32 expState90, const char lines91[], int32 expState91, const char lines92[], int32 expState92, const char lines93[], int32 expState93, const char lines94[], int32 expState94, const char lines95[], int32 expState95)
{
  return DAQmxCreateWatchdogTimerTask(deviceName, sessionName, task, timeout, lines, expState, lines0, expState0, lines1, expState1, lines2, expState2, lines3, expState3, lines4, expState4, lines5, expState5, lines6, expState6, lines7, expState7, lines8, expState8, lines9, expState9, lines10, expState10, lines11, expState11, lines12, expState12, lines13, expState13, lines14, expState14, lines15, expState15, lines16, expState16, lines17, expState17, lines18, expState18, lines19, expState19, lines20, expState20, lines21, expState21, lines22, expState22, lines23, expState23, lines24, expState24, lines25, expState25, lines26, expState26, lines27, expState27, lines28, expState28, lines29, expState29, lines30, expState30, lines31, expState31, lines32, expState32, lines33, expState33, lines34, expState34, lines35, expState35, lines36, expState36, lines37, expState37, lines38, expState38, lines39, expState39, lines40, expState40, lines41, expState41, lines42, expState42, lines43, expState43, lines44, expState44, lines45, expState45, lines46, expState46, lines47, expState47, lines48, expState48, lines49, expState49, lines50, expState50, lines51, expState51, lines52, expState52, lines53, expState53, lines54, expState54, lines55, expState55, lines56, expState56, lines57, expState57, lines58, expState58, lines59, expState59, lines60, expState60, lines61, expState61, lines62, expState62, lines63, expState63, lines64, expState64, lines65, expState65, lines66, expState66, lines67, expState67, lines68, expState68, lines69, expState69, lines70, expState70, lines71, expState71, lines72, expState72, lines73, expState73, lines74, expState74, lines75, expState75, lines76, expState76, lines77, expState77, lines78, expState78, lines79, expState79, lines80, expState80, lines81, expState81, lines82, expState82, lines83, expState83, lines84, expState84, lines85, expState85, lines86, expState86, lines87, expState87, lines88, expState88, lines89, expState89, lines90, expState90, lines91, expState91, lines92, expState92, lines93, expState93, lines94, expState94, lines95, expState95);
}

int32 CreateWatchdogTimerTaskEx(const char deviceName[], const char sessionName[], TaskHandle* task, float64 timeout)
{
  return DAQmxCreateWatchdogTimerTaskEx(deviceName, sessionName, task, timeout);
}

int32 DeleteNetworkDevice(const char deviceName[])
{
  return DAQmxDeleteNetworkDevice(deviceName);
}

int32 DeleteSavedGlobalChan(const char channelName[])
{
  return DAQmxDeleteSavedGlobalChan(channelName);
}

int32 DeleteSavedScale(const char scaleName[])
{
  return DAQmxDeleteSavedScale(scaleName);
}

int32 DeleteSavedTask(const char taskName[])
{
  return DAQmxDeleteSavedTask(taskName);
}

int32 DeviceSupportsCal(const char deviceName[], bool32* calSupported)
{
  return DAQmxDeviceSupportsCal(deviceName, calSupported);
}

int32 DisableRefTrig(TaskHandle task)
{
  return DAQmxDisableRefTrig(task);
}

int32 DisableStartTrig(TaskHandle task)
{
  return DAQmxDisableStartTrig(task);
}

int32 DisconnectTerms(const char sourceTerminal[], const char destinationTerminal[])
{
  return DAQmxDisconnectTerms(sourceTerminal, destinationTerminal);
}

int32 ExportSignal(TaskHandle task, int32 signalID, const char outputTerminal[])
{
  return DAQmxExportSignal(task, signalID, outputTerminal);
}

int32 GetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  return DAQmxGetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
}

int32 GetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  return DAQmxGetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
}

int32 GetAnalogPowerUpStates(const char deviceName[], const char channelName[], float64* state, int32 channelType, const char channelName0[], float64* state0, int32 channelType0, const char channelName1[], float64* state1, int32 channelType1, const char channelName2[], float64* state2, int32 channelType2, const char channelName3[], float64* state3, int32 channelType3, const char channelName4[], float64* state4, int32 channelType4, const char channelName5[], float64* state5, int32 channelType5, const char channelName6[], float64* state6, int32 channelType6, const char channelName7[], float64* state7, int32 channelType7, const char channelName8[], float64* state8, int32 channelType8, const char channelName9[], float64* state9, int32 channelType9, const char channelName10[], float64* state10, int32 channelType10, const char channelName11[], float64* state11, int32 channelType11, const char channelName12[], float64* state12, int32 channelType12, const char channelName13[], float64* state13, int32 channelType13, const char channelName14[], float64* state14, int32 channelType14, const char channelName15[], float64* state15, int32 channelType15, const char channelName16[], float64* state16, int32 channelType16, const char channelName17[], float64* state17, int32 channelType17, const char channelName18[], float64* state18, int32 channelType18, const char channelName19[], float64* state19, int32 channelType19, const char channelName20[], float64* state20, int32 channelType20, const char channelName21[], float64* state21, int32 channelType21, const char channelName22[], float64* state22, int32 channelType22, const char channelName23[], float64* state23, int32 channelType23, const char channelName24[], float64* state24, int32 channelType24, const char channelName25[], float64* state25, int32 channelType25, const char channelName26[], float64* state26, int32 channelType26, const char channelName27[], float64* state27, int32 channelType27, const char channelName28[], float64* state28, int32 channelType28, const char channelName29[], float64* state29, int32 channelType29, const char channelName30[], float64* state30, int32 channelType30, const char channelName31[], float64* state31, int32 channelType31, const char channelName32[], float64* state32, int32 channelType32, const char channelName33[], float64* state33, int32 channelType33, const char channelName34[], float64* state34, int32 channelType34, const char channelName35[], float64* state35, int32 channelType35, const char channelName36[], float64* state36, int32 channelType36, const char channelName37[], float64* state37, int32 channelType37, const char channelName38[], float64* state38, int32 channelType38, const char channelName39[], float64* state39, int32 channelType39, const char channelName40[], float64* state40, int32 channelType40, const char channelName41[], float64* state41, int32 channelType41, const char channelName42[], float64* state42, int32 channelType42, const char channelName43[], float64* state43, int32 channelType43, const char channelName44[], float64* state44, int32 channelType44, const char channelName45[], float64* state45, int32 channelType45, const char channelName46[], float64* state46, int32 channelType46, const char channelName47[], float64* state47, int32 channelType47, const char channelName48[], float64* state48, int32 channelType48, const char channelName49[], float64* state49, int32 channelType49, const char channelName50[], float64* state50, int32 channelType50, const char channelName51[], float64* state51, int32 channelType51, const char channelName52[], float64* state52, int32 channelType52, const char channelName53[], float64* state53, int32 channelType53, const char channelName54[], float64* state54, int32 channelType54, const char channelName55[], float64* state55, int32 channelType55, const char channelName56[], float64* state56, int32 channelType56, const char channelName57[], float64* state57, int32 channelType57, const char channelName58[], float64* state58, int32 channelType58, const char channelName59[], float64* state59, int32 channelType59, const char channelName60[], float64* state60, int32 channelType60, const char channelName61[], float64* state61, int32 channelType61, const char channelName62[], float64* state62, int32 channelType62, const char channelName63[], float64* state63, int32 channelType63, const char channelName64[], float64* state64, int32 channelType64, const char channelName65[], float64* state65, int32 channelType65, const char channelName66[], float64* state66, int32 channelType66, const char channelName67[], float64* state67, int32 channelType67, const char channelName68[], float64* state68, int32 channelType68, const char channelName69[], float64* state69, int32 channelType69, const char channelName70[], float64* state70, int32 channelType70, const char channelName71[], float64* state71, int32 channelType71, const char channelName72[], float64* state72, int32 channelType72, const char channelName73[], float64* state73, int32 channelType73, const char channelName74[], float64* state74, int32 channelType74, const char channelName75[], float64* state75, int32 channelType75, const char channelName76[], float64* state76, int32 channelType76, const char channelName77[], float64* state77, int32 channelType77, const char channelName78[], float64* state78, int32 channelType78, const char channelName79[], float64* state79, int32 channelType79, const char channelName80[], float64* state80, int32 channelType80, const char channelName81[], float64* state81, int32 channelType81, const char channelName82[], float64* state82, int32 channelType82, const char channelName83[], float64* state83, int32 channelType83, const char channelName84[], float64* state84, int32 channelType84, const char channelName85[], float64* state85, int32 channelType85, const char channelName86[], float64* state86, int32 channelType86, const char channelName87[], float64* state87, int32 channelType87, const char channelName88[], float64* state88, int32 channelType88, const char channelName89[], float64* state89, int32 channelType89, const char channelName90[], float64* state90, int32 channelType90, const char channelName91[], float64* state91, int32 channelType91, const char channelName92[], float64* state92, int32 channelType92, const char channelName93[], float64* state93, int32 channelType93, const char channelName94[], float64* state94, int32 channelType94, const char channelName95[], float64* state95, int32 channelType95)
{
  return DAQmxGetAnalogPowerUpStates(deviceName, channelName, state, channelType, channelName0, state0, channelType0, channelName1, state1, channelType1, channelName2, state2, channelType2, channelName3, state3, channelType3, channelName4, state4, channelType4, channelName5, state5, channelType5, channelName6, state6, channelType6, channelName7, state7, channelType7, channelName8, state8, channelType8, channelName9, state9, channelType9, channelName10, state10, channelType10, channelName11, state11, channelType11, channelName12, state12, channelType12, channelName13, state13, channelType13, channelName14, state14, channelType14, channelName15, state15, channelType15, channelName16, state16, channelType16, channelName17, state17, channelType17, channelName18, state18, channelType18, channelName19, state19, channelType19, channelName20, state20, channelType20, channelName21, state21, channelType21, channelName22, state22, channelType22, channelName23, state23, channelType23, channelName24, state24, channelType24, channelName25, state25, channelType25, channelName26, state26, channelType26, channelName27, state27, channelType27, channelName28, state28, channelType28, channelName29, state29, channelType29, channelName30, state30, channelType30, channelName31, state31, channelType31, channelName32, state32, channelType32, channelName33, state33, channelType33, channelName34, state34, channelType34, channelName35, state35, channelType35, channelName36, state36, channelType36, channelName37, state37, channelType37, channelName38, state38, channelType38, channelName39, state39, channelType39, channelName40, state40, channelType40, channelName41, state41, channelType41, channelName42, state42, channelType42, channelName43, state43, channelType43, channelName44, state44, channelType44, channelName45, state45, channelType45, channelName46, state46, channelType46, channelName47, state47, channelType47, channelName48, state48, channelType48, channelName49, state49, channelType49, channelName50, state50, channelType50, channelName51, state51, channelType51, channelName52, state52, channelType52, channelName53, state53, channelType53, channelName54, state54, channelType54, channelName55, state55, channelType55, channelName56, state56, channelType56, channelName57, state57, channelType57, channelName58, state58, channelType58, channelName59, state59, channelType59, channelName60, state60, channelType60, channelName61, state61, channelType61, channelName62, state62, channelType62, channelName63, state63, channelType63, channelName64, state64, channelType64, channelName65, state65, channelType65, channelName66, state66, channelType66, channelName67, state67, channelType67, channelName68, state68, channelType68, channelName69, state69, channelType69, channelName70, state70, channelType70, channelName71, state71, channelType71, channelName72, state72, channelType72, channelName73, state73, channelType73, channelName74, state74, channelType74, channelName75, state75, channelType75, channelName76, state76, channelType76, channelName77, state77, channelType77, channelName78, state78, channelType78, channelName79, state79, channelType79, channelName80, state80, channelType80, channelName81, state81, channelType81, channelName82, state82, channelType82, channelName83, state83, channelType83, channelName84, state84, channelType84, channelName85, state85, channelType85, channelName86, state86, channelType86, channelName87, state87, channelType87, channelName88, state88, channelType88, channelName89, state89, channelType89, channelName90, state90, channelType90, channelName91, state91, channelType91, channelName92, state92, channelType92, channelName93, state93, channelType93, channelName94, state94, channelType94, channelName95, state95, channelType95);
}

int32 GetAnalogPowerUpStatesWithOutputType(const char channelNames[], float64 stateArray[], int32 channelTypeArray[], uInt32* arraySize)
{
  return DAQmxGetAnalogPowerUpStatesWithOutputType(channelNames, stateArray, channelTypeArray, arraySize);
}

int32 GetArmStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetArmStartTrigTimestampVal(task, data);
}

int32 GetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetArmStartTrigTrigWhen(task, data);
}

int32 GetAutoConfiguredCDAQSyncConnections(char portList[], uInt32 portListSize)
{
  return DAQmxGetAutoConfiguredCDAQSyncConnections(portList, portListSize);
}

int32 GetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetBufferAttribute(task, attribute, value);
}

int32 GetCalInfoAttributeBool(const char deviceName[], int32 attribute, bool32* value)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value);
}

int32 GetCalInfoAttributeDouble(const char deviceName[], int32 attribute, float64* value)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value);
}

int32 GetCalInfoAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value, size);
}

int32 GetCalInfoAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value)
{
  return DAQmxGetCalInfoAttribute(deviceName, attribute, value);
}

int32 GetChanAttributeBool(TaskHandle task, const char channel[], int32 attribute, bool32* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetChanAttributeDouble(TaskHandle task, const char channel[], int32 attribute, float64* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetChanAttributeDoubleArray(TaskHandle task, const char channel[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value, size);
}

int32 GetChanAttributeInt32(TaskHandle task, const char channel[], int32 attribute, int32* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetChanAttributeString(TaskHandle task, const char channel[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value, size);
}

int32 GetChanAttributeUInt32(TaskHandle task, const char channel[], int32 attribute, uInt32* value)
{
  return DAQmxGetChanAttribute(task, channel, attribute, value);
}

int32 GetDeviceAttributeBool(const char deviceName[], int32 attribute, bool32* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeDouble(const char deviceName[], int32 attribute, float64* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeDoubleArray(const char deviceName[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDeviceAttributeInt32(const char deviceName[], int32 attribute, int32* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeInt32Array(const char deviceName[], int32 attribute, int32 value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDeviceAttributeString(const char deviceName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDeviceAttributeUInt32(const char deviceName[], int32 attribute, uInt32* value)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value);
}

int32 GetDeviceAttributeUInt32Array(const char deviceName[], int32 attribute, uInt32 value[], uInt32 size)
{
  return DAQmxGetDeviceAttribute(deviceName, attribute, value, size);
}

int32 GetDigitalLogicFamilyPowerUpState(const char deviceName[], int32* logicFamily)
{
  return DAQmxGetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
}

int32 GetDigitalPowerUpStates(const char deviceName[], const char channelName[], int32* state, const char channelName0[], int32* state0, const char channelName1[], int32* state1, const char channelName2[], int32* state2, const char channelName3[], int32* state3, const char channelName4[], int32* state4, const char channelName5[], int32* state5, const char channelName6[], int32* state6, const char channelName7[], int32* state7, const char channelName8[], int32* state8, const char channelName9[], int32* state9, const char channelName10[], int32* state10, const char channelName11[], int32* state11, const char channelName12[], int32* state12, const char channelName13[], int32* state13, const char channelName14[], int32* state14, const char channelName15[], int32* state15, const char channelName16[], int32* state16, const char channelName17[], int32* state17, const char channelName18[], int32* state18, const char channelName19[], int32* state19, const char channelName20[], int32* state20, const char channelName21[], int32* state21, const char channelName22[], int32* state22, const char channelName23[], int32* state23, const char channelName24[], int32* state24, const char channelName25[], int32* state25, const char channelName26[], int32* state26, const char channelName27[], int32* state27, const char channelName28[], int32* state28, const char channelName29[], int32* state29, const char channelName30[], int32* state30, const char channelName31[], int32* state31, const char channelName32[], int32* state32, const char channelName33[], int32* state33, const char channelName34[], int32* state34, const char channelName35[], int32* state35, const char channelName36[], int32* state36, const char channelName37[], int32* state37, const char channelName38[], int32* state38, const char channelName39[], int32* state39, const char channelName40[], int32* state40, const char channelName41[], int32* state41, const char channelName42[], int32* state42, const char channelName43[], int32* state43, const char channelName44[], int32* state44, const char channelName45[], int32* state45, const char channelName46[], int32* state46, const char channelName47[], int32* state47, const char channelName48[], int32* state48, const char channelName49[], int32* state49, const char channelName50[], int32* state50, const char channelName51[], int32* state51, const char channelName52[], int32* state52, const char channelName53[], int32* state53, const char channelName54[], int32* state54, const char channelName55[], int32* state55, const char channelName56[], int32* state56, const char channelName57[], int32* state57, const char channelName58[], int32* state58, const char channelName59[], int32* state59, const char channelName60[], int32* state60, const char channelName61[], int32* state61, const char channelName62[], int32* state62, const char channelName63[], int32* state63, const char channelName64[], int32* state64, const char channelName65[], int32* state65, const char channelName66[], int32* state66, const char channelName67[], int32* state67, const char channelName68[], int32* state68, const char channelName69[], int32* state69, const char channelName70[], int32* state70, const char channelName71[], int32* state71, const char channelName72[], int32* state72, const char channelName73[], int32* state73, const char channelName74[], int32* state74, const char channelName75[], int32* state75, const char channelName76[], int32* state76, const char channelName77[], int32* state77, const char channelName78[], int32* state78, const char channelName79[], int32* state79, const char channelName80[], int32* state80, const char channelName81[], int32* state81, const char channelName82[], int32* state82, const char channelName83[], int32* state83, const char channelName84[], int32* state84, const char channelName85[], int32* state85, const char channelName86[], int32* state86, const char channelName87[], int32* state87, const char channelName88[], int32* state88, const char channelName89[], int32* state89, const char channelName90[], int32* state90, const char channelName91[], int32* state91, const char channelName92[], int32* state92, const char channelName93[], int32* state93, const char channelName94[], int32* state94, const char channelName95[], int32* state95)
{
  return DAQmxGetDigitalPowerUpStates(deviceName, channelName, state, channelName0, state0, channelName1, state1, channelName2, state2, channelName3, state3, channelName4, state4, channelName5, state5, channelName6, state6, channelName7, state7, channelName8, state8, channelName9, state9, channelName10, state10, channelName11, state11, channelName12, state12, channelName13, state13, channelName14, state14, channelName15, state15, channelName16, state16, channelName17, state17, channelName18, state18, channelName19, state19, channelName20, state20, channelName21, state21, channelName22, state22, channelName23, state23, channelName24, state24, channelName25, state25, channelName26, state26, channelName27, state27, channelName28, state28, channelName29, state29, channelName30, state30, channelName31, state31, channelName32, state32, channelName33, state33, channelName34, state34, channelName35, state35, channelName36, state36, channelName37, state37, channelName38, state38, channelName39, state39, channelName40, state40, channelName41, state41, channelName42, state42, channelName43, state43, channelName44, state44, channelName45, state45, channelName46, state46, channelName47, state47, channelName48, state48, channelName49, state49, channelName50, state50, channelName51, state51, channelName52, state52, channelName53, state53, channelName54, state54, channelName55, state55, channelName56, state56, channelName57, state57, channelName58, state58, channelName59, state59, channelName60, state60, channelName61, state61, channelName62, state62, channelName63, state63, channelName64, state64, channelName65, state65, channelName66, state66, channelName67, state67, channelName68, state68, channelName69, state69, channelName70, state70, channelName71, state71, channelName72, state72, channelName73, state73, channelName74, state74, channelName75, state75, channelName76, state76, channelName77, state77, channelName78, state78, channelName79, state79, channelName80, state80, channelName81, state81, channelName82, state82, channelName83, state83, channelName84, state84, channelName85, state85, channelName86, state86, channelName87, state87, channelName88, state88, channelName89, state89, channelName90, state90, channelName91, state91, channelName92, state92, channelName93, state93, channelName94, state94, channelName95, state95);
}

int32 GetDigitalPullUpPullDownStates(const char deviceName[], const char channelName[], int32* state, const char channelName0[], int32* state0, const char channelName1[], int32* state1, const char channelName2[], int32* state2, const char channelName3[], int32* state3, const char channelName4[], int32* state4, const char channelName5[], int32* state5, const char channelName6[], int32* state6, const char channelName7[], int32* state7, const char channelName8[], int32* state8, const char channelName9[], int32* state9, const char channelName10[], int32* state10, const char channelName11[], int32* state11, const char channelName12[], int32* state12, const char channelName13[], int32* state13, const char channelName14[], int32* state14, const char channelName15[], int32* state15, const char channelName16[], int32* state16, const char channelName17[], int32* state17, const char channelName18[], int32* state18, const char channelName19[], int32* state19, const char channelName20[], int32* state20, const char channelName21[], int32* state21, const char channelName22[], int32* state22, const char channelName23[], int32* state23, const char channelName24[], int32* state24, const char channelName25[], int32* state25, const char channelName26[], int32* state26, const char channelName27[], int32* state27, const char channelName28[], int32* state28, const char channelName29[], int32* state29, const char channelName30[], int32* state30, const char channelName31[], int32* state31, const char channelName32[], int32* state32, const char channelName33[], int32* state33, const char channelName34[], int32* state34, const char channelName35[], int32* state35, const char channelName36[], int32* state36, const char channelName37[], int32* state37, const char channelName38[], int32* state38, const char channelName39[], int32* state39, const char channelName40[], int32* state40, const char channelName41[], int32* state41, const char channelName42[], int32* state42, const char channelName43[], int32* state43, const char channelName44[], int32* state44, const char channelName45[], int32* state45, const char channelName46[], int32* state46, const char channelName47[], int32* state47, const char channelName48[], int32* state48, const char channelName49[], int32* state49, const char channelName50[], int32* state50, const char channelName51[], int32* state51, const char channelName52[], int32* state52, const char channelName53[], int32* state53, const char channelName54[], int32* state54, const char channelName55[], int32* state55, const char channelName56[], int32* state56, const char channelName57[], int32* state57, const char channelName58[], int32* state58, const char channelName59[], int32* state59, const char channelName60[], int32* state60, const char channelName61[], int32* state61, const char channelName62[], int32* state62, const char channelName63[], int32* state63, const char channelName64[], int32* state64, const char channelName65[], int32* state65, const char channelName66[], int32* state66, const char channelName67[], int32* state67, const char channelName68[], int32* state68, const char channelName69[], int32* state69, const char channelName70[], int32* state70, const char channelName71[], int32* state71, const char channelName72[], int32* state72, const char channelName73[], int32* state73, const char channelName74[], int32* state74, const char channelName75[], int32* state75, const char channelName76[], int32* state76, const char channelName77[], int32* state77, const char channelName78[], int32* state78, const char channelName79[], int32* state79, const char channelName80[], int32* state80, const char channelName81[], int32* state81, const char channelName82[], int32* state82, const char channelName83[], int32* state83, const char channelName84[], int32* state84, const char channelName85[], int32* state85, const char channelName86[], int32* state86, const char channelName87[], int32* state87, const char channelName88[], int32* state88, const char channelName89[], int32* state89, const char channelName90[], int32* state90, const char channelName91[], int32* state91, const char channelName92[], int32* state92, const char channelName93[], int32* state93, const char channelName94[], int32* state94, const char channelName95[], int32* state95)
{
  return DAQmxGetDigitalPullUpPullDownStates(deviceName, channelName, state, channelName0, state0, channelName1, state1, channelName2, state2, channelName3, state3, channelName4, state4, channelName5, state5, channelName6, state6, channelName7, state7, channelName8, state8, channelName9, state9, channelName10, state10, channelName11, state11, channelName12, state12, channelName13, state13, channelName14, state14, channelName15, state15, channelName16, state16, channelName17, state17, channelName18, state18, channelName19, state19, channelName20, state20, channelName21, state21, channelName22, state22, channelName23, state23, channelName24, state24, channelName25, state25, channelName26, state26, channelName27, state27, channelName28, state28, channelName29, state29, channelName30, state30, channelName31, state31, channelName32, state32, channelName33, state33, channelName34, state34, channelName35, state35, channelName36, state36, channelName37, state37, channelName38, state38, channelName39, state39, channelName40, state40, channelName41, state41, channelName42, state42, channelName43, state43, channelName44, state44, channelName45, state45, channelName46, state46, channelName47, state47, channelName48, state48, channelName49, state49, channelName50, state50, channelName51, state51, channelName52, state52, channelName53, state53, channelName54, state54, channelName55, state55, channelName56, state56, channelName57, state57, channelName58, state58, channelName59, state59, channelName60, state60, channelName61, state61, channelName62, state62, channelName63, state63, channelName64, state64, channelName65, state65, channelName66, state66, channelName67, state67, channelName68, state68, channelName69, state69, channelName70, state70, channelName71, state71, channelName72, state72, channelName73, state73, channelName74, state74, channelName75, state75, channelName76, state76, channelName77, state77, channelName78, state78, channelName79, state79, channelName80, state80, channelName81, state81, channelName82, state82, channelName83, state83, channelName84, state84, channelName85, state85, channelName86, state86, channelName87, state87, channelName88, state88, channelName89, state89, channelName90, state90, channelName91, state91, channelName92, state92, channelName93, state93, channelName94, state94, channelName95, state95);
}

int32 GetDisconnectedCDAQSyncPorts(char portList[], uInt32 portListSize)
{
  return DAQmxGetDisconnectedCDAQSyncPorts(portList, portListSize);
}

int32 GetErrorString(int32 errorCode, char errorString[], uInt32 bufferSize)
{
  return DAQmxGetErrorString(errorCode, errorString, bufferSize);
}

int32 GetExportedSignalAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetExportedSignalAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetExportedSignalAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetExportedSignalAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value, size);
}

int32 GetExportedSignalAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetExportedSignalAttribute(task, attribute, value);
}

int32 GetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetFirstSampClkWhen(task, data);
}

int32 GetFirstSampTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetFirstSampTimestampVal(task, data);
}

int32 GetNthTaskChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  return DAQmxGetNthTaskChannel(task, index, buffer, bufferSize);
}

int32 GetNthTaskDevice(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  return DAQmxGetNthTaskDevice(task, index, buffer, bufferSize);
}

int32 GetNthTaskReadChannel(TaskHandle task, uInt32 index, char buffer[], int32 bufferSize)
{
  return DAQmxGetNthTaskReadChannel(task, index, buffer, bufferSize);
}

int32 GetPersistedChanAttributeBool(const char channel[], int32 attribute, bool32* value)
{
  return DAQmxGetPersistedChanAttribute(channel, attribute, value);
}

int32 GetPersistedChanAttributeString(const char channel[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPersistedChanAttribute(channel, attribute, value, size);
}

int32 GetPersistedScaleAttributeBool(const char scaleName[], int32 attribute, bool32* value)
{
  return DAQmxGetPersistedScaleAttribute(scaleName, attribute, value);
}

int32 GetPersistedScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPersistedScaleAttribute(scaleName, attribute, value, size);
}

int32 GetPersistedTaskAttributeBool(const char taskName[], int32 attribute, bool32* value)
{
  return DAQmxGetPersistedTaskAttribute(taskName, attribute, value);
}

int32 GetPersistedTaskAttributeString(const char taskName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPersistedTaskAttribute(taskName, attribute, value, size);
}

int32 GetPhysicalChanAttributeBool(const char physicalChannel[], int32 attribute, bool32* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeBytes(const char physicalChannel[], int32 attribute, uInt8 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeDouble(const char physicalChannel[], int32 attribute, float64* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeDoubleArray(const char physicalChannel[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeInt32(const char physicalChannel[], int32 attribute, int32* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeInt32Array(const char physicalChannel[], int32 attribute, int32 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeString(const char physicalChannel[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetPhysicalChanAttributeUInt32(const char physicalChannel[], int32 attribute, uInt32* value)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value);
}

int32 GetPhysicalChanAttributeUInt32Array(const char physicalChannel[], int32 attribute, uInt32 value[], uInt32 size)
{
  return DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, size);
}

int32 GetReadAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetReadAttribute(task, attribute, value, size);
}

int32 GetReadAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetReadAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value)
{
  return DAQmxGetReadAttribute(task, attribute, value);
}

int32 GetRealTimeAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetRealTimeAttribute(task, attribute, value);
}

int32 GetRealTimeAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetRealTimeAttribute(task, attribute, value);
}

int32 GetRealTimeAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetRealTimeAttribute(task, attribute, value);
}

int32 GetRefTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetRefTrigTimestampVal(task, data);
}

int32 GetScaleAttributeDouble(const char scaleName[], int32 attribute, float64* value)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value);
}

int32 GetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value, size);
}

int32 GetScaleAttributeInt32(const char scaleName[], int32 attribute, int32* value)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value);
}

int32 GetScaleAttributeString(const char scaleName[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetScaleAttribute(scaleName, attribute, value, size);
}

int32 GetSelfCalLastDateAndTime(const char deviceName[], uInt32* year, uInt32* month, uInt32* day, uInt32* hour, uInt32* minute)
{
  return DAQmxGetSelfCalLastDateAndTime(deviceName, year, month, day, hour, minute);
}

int32 GetStartTrigTimestampVal(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetStartTrigTimestampVal(task, data);
}

int32 GetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetStartTrigTrigWhen(task, data);
}

int32 GetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime* data)
{
  return DAQmxGetSyncPulseTimeWhen(task, data);
}

int32 GetSystemInfoAttributeString(int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetSystemInfoAttribute(attribute, value, size);
}

int32 GetSystemInfoAttributeUInt32(int32 attribute, uInt32* value)
{
  return DAQmxGetSystemInfoAttribute(attribute, value);
}

int32 GetTaskAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetTaskAttribute(task, attribute, value);
}

int32 GetTaskAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTaskAttribute(task, attribute, value, size);
}

int32 GetTaskAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetTaskAttribute(task, attribute, value);
}

int32 GetTimingAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeExBool(TaskHandle task, const char deviceNames[], int32 attribute, bool32* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExDouble(TaskHandle task, const char deviceNames[], int32 attribute, float64* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExInt32(TaskHandle task, const char deviceNames[], int32 attribute, int32* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExString(TaskHandle task, const char deviceNames[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value, size);
}

int32 GetTimingAttributeExTimestamp(TaskHandle task, const char deviceNames[], int32 attribute, CVIAbsoluteTime* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExUInt32(TaskHandle task, const char deviceNames[], int32 attribute, uInt32* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeExUInt64(TaskHandle task, const char deviceNames[], int32 attribute, uInt64* value)
{
  return DAQmxGetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 GetTimingAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTimingAttribute(task, attribute, value, size);
}

int32 GetTimingAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTimingAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value)
{
  return DAQmxGetTimingAttribute(task, attribute, value);
}

int32 GetTrigAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeDoubleArray(TaskHandle task, int32 attribute, float64 value[], uInt32 size)
{
  return DAQmxGetTrigAttribute(task, attribute, value, size);
}

int32 GetTrigAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeInt32Array(TaskHandle task, int32 attribute, int32 value[], uInt32 size)
{
  return DAQmxGetTrigAttribute(task, attribute, value, size);
}

int32 GetTrigAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetTrigAttribute(task, attribute, value, size);
}

int32 GetTrigAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetTrigAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetTrigAttribute(task, attribute, value);
}

int32 GetWatchdogAttributeBool(TaskHandle task, const char lines[], int32 attribute, bool32* value)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value);
}

int32 GetWatchdogAttributeDouble(TaskHandle task, const char lines[], int32 attribute, float64* value)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value);
}

int32 GetWatchdogAttributeInt32(TaskHandle task, const char lines[], int32 attribute, int32* value)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value);
}

int32 GetWatchdogAttributeString(TaskHandle task, const char lines[], int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetWatchdogAttribute(task, lines, attribute, value, size);
}

int32 GetWriteAttributeBool(TaskHandle task, int32 attribute, bool32* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeDouble(TaskHandle task, int32 attribute, float64* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeInt32(TaskHandle task, int32 attribute, int32* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeString(TaskHandle task, int32 attribute, char value[], uInt32 size)
{
  return DAQmxGetWriteAttribute(task, attribute, value, size);
}

int32 GetWriteAttributeUInt32(TaskHandle task, int32 attribute, uInt32* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 GetWriteAttributeUInt64(TaskHandle task, int32 attribute, uInt64* value)
{
  return DAQmxGetWriteAttribute(task, attribute, value);
}

int32 IsTaskDone(TaskHandle task, bool32* isTaskDone)
{
  return DAQmxIsTaskDone(task, isTaskDone);
}

int32 LoadTask(const char sessionName[], TaskHandle* task)
{
  return DAQmxLoadTask(sessionName, task);
}

int32 ReadAnalogF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadAnalogScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved)
{
  return DAQmxReadAnalogScalarF64(task, timeout, value, reserved);
}

int32 ReadBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryI16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadBinaryI32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryI32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadBinaryU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadBinaryU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadBinaryU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterF64(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterF64Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterF64Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterScalarF64(TaskHandle task, float64 timeout, float64* value, bool32* reserved)
{
  return DAQmxReadCounterScalarF64(task, timeout, value, reserved);
}

int32 ReadCounterScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved)
{
  return DAQmxReadCounterScalarU32(task, timeout, value, reserved);
}

int32 ReadCounterU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterU32(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCounterU32Ex(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCounterU32Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrFreq(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayFrequency[], float64 readArrayDutyCycle[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCtrFreq(task, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrFreqScalar(TaskHandle task, float64 timeout, float64* frequency, float64* dutyCycle, bool32* reserved)
{
  return DAQmxReadCtrFreqScalar(task, timeout, frequency, dutyCycle, reserved);
}

int32 ReadCtrTicks(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, uInt32 readArrayHighTicks[], uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCtrTicks(task, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrTicksScalar(TaskHandle task, float64 timeout, uInt32* highTicks, uInt32* lowTicks, bool32* reserved)
{
  return DAQmxReadCtrTicksScalar(task, timeout, highTicks, lowTicks, reserved);
}

int32 ReadCtrTime(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 interleaved, float64 readArrayHighTime[], float64 readArrayLowTime[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadCtrTime(task, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadCtrTimeScalar(TaskHandle task, float64 timeout, float64* highTime, float64* lowTime, bool32* reserved)
{
  return DAQmxReadCtrTimeScalar(task, timeout, highTime, lowTime, reserved);
}

int32 ReadDigitalLines(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsPerChanRead, int32* numBytesPerSamp, bool32* reserved)
{
  return DAQmxReadDigitalLines(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, reserved);
}

int32 ReadDigitalScalarU32(TaskHandle task, float64 timeout, uInt32* value, bool32* reserved)
{
  return DAQmxReadDigitalScalarU32(task, timeout, value, reserved);
}

int32 ReadDigitalU16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt16 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadDigitalU32(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt32 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadDigitalU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadDigitalU8(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, uInt8 readArray[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadPowerBinaryI16(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, int16 readArrayVoltage[], int16 readArrayCurrent[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadPowerBinaryI16(task, numSampsPerChan, timeout, fillMode, readArrayVoltage, readArrayCurrent, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadPowerF64(TaskHandle task, int32 numSampsPerChan, float64 timeout, int32 fillMode, float64 readArrayVoltage[], float64 readArrayCurrent[], uInt32 arraySizeInSamps, int32* sampsPerChanRead, bool32* reserved)
{
  return DAQmxReadPowerF64(task, numSampsPerChan, timeout, fillMode, readArrayVoltage, readArrayCurrent, arraySizeInSamps, sampsPerChanRead, reserved);
}

int32 ReadPowerScalarF64(TaskHandle task, float64 timeout, float64* voltage, float64* current, bool32* reserved)
{
  return DAQmxReadPowerScalarF64(task, timeout, voltage, current, reserved);
}

int32 ReadRaw(TaskHandle task, int32 numSampsPerChan, float64 timeout, uInt8 readArray[], uInt32 arraySizeInBytes, int32* sampsRead, int32* numBytesPerSamp, bool32* reserved)
{
  return DAQmxReadRaw(task, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, reserved);
}

int32 RegisterDoneEvent(TaskHandle task, uInt32 options, DAQmxDoneEventCallbackPtr callbackFunction, void* callbackData)
{
  return DAQmxRegisterDoneEvent(task, options, callbackFunction, callbackData);
}

int32 RegisterEveryNSamplesEvent(TaskHandle task, int32 everyNSamplesEventType, uInt32 nSamples, uInt32 options, DAQmxEveryNSamplesEventCallbackPtr callbackFunction, void* callbackData)
{
  return DAQmxRegisterEveryNSamplesEvent(task, everyNSamplesEventType, nSamples, options, callbackFunction, callbackData);
}

int32 RegisterSignalEvent(TaskHandle task, int32 signalID, uInt32 options, DAQmxSignalEventCallbackPtr callbackFunction, void* callbackData)
{
  return DAQmxRegisterSignalEvent(task, signalID, options, callbackFunction, callbackData);
}

int32 RemoveCDAQSyncConnection(const char portList[])
{
  return DAQmxRemoveCDAQSyncConnection(portList);
}

int32 ReserveNetworkDevice(const char deviceName[], bool32 overrideReservation)
{
  return DAQmxReserveNetworkDevice(deviceName, overrideReservation);
}

int32 ResetBufferAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetBufferAttribute(task, attribute);
}

int32 ResetChanAttribute(TaskHandle task, const char channel[], int32 attribute)
{
  return DAQmxResetChanAttribute(task, channel, attribute);
}

int32 ResetDevice(const char deviceName[])
{
  return DAQmxResetDevice(deviceName);
}

int32 ResetExportedSignalAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetExportedSignalAttribute(task, attribute);
}

int32 ResetReadAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetReadAttribute(task, attribute);
}

int32 ResetRealTimeAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetRealTimeAttribute(task, attribute);
}

int32 ResetTimingAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetTimingAttribute(task, attribute);
}

int32 ResetTimingAttributeEx(TaskHandle task, const char deviceNames[], int32 attribute)
{
  return DAQmxResetTimingAttributeEx(task, deviceNames, attribute);
}

int32 ResetTrigAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetTrigAttribute(task, attribute);
}

int32 ResetWatchdogAttribute(TaskHandle task, const char lines[], int32 attribute)
{
  return DAQmxResetWatchdogAttribute(task, lines, attribute);
}

int32 ResetWriteAttribute(TaskHandle task, int32 attribute)
{
  return DAQmxResetWriteAttribute(task, attribute);
}

int32 SaveGlobalChan(TaskHandle task, const char channelName[], const char saveAs[], const char author[], uInt32 options)
{
  return DAQmxSaveGlobalChan(task, channelName, saveAs, author, options);
}

int32 SaveScale(const char scaleName[], const char saveAs[], const char author[], uInt32 options)
{
  return DAQmxSaveScale(scaleName, saveAs, author, options);
}

int32 SaveTask(TaskHandle task, const char saveAs[], const char author[], uInt32 options)
{
  return DAQmxSaveTask(task, saveAs, author, options);
}

int32 SelfCal(const char deviceName[])
{
  return DAQmxSelfCal(deviceName);
}

int32 SelfTestDevice(const char deviceName[])
{
  return DAQmxSelfTestDevice(deviceName);
}

int32 SetAIChanCalCalDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  return DAQmxSetAIChanCalCalDate(task, channelName, year, month, day, hour, minute);
}

int32 SetAIChanCalExpDate(TaskHandle task, const char channelName[], uInt32 year, uInt32 month, uInt32 day, uInt32 hour, uInt32 minute)
{
  return DAQmxSetAIChanCalExpDate(task, channelName, year, month, day, hour, minute);
}

int32 SetAnalogPowerUpStates(const char deviceName[], const char channelNames[], float64 state, int32 channelType, const char channelNames0[], float64 state0, int32 channelType0, const char channelNames1[], float64 state1, int32 channelType1, const char channelNames2[], float64 state2, int32 channelType2, const char channelNames3[], float64 state3, int32 channelType3, const char channelNames4[], float64 state4, int32 channelType4, const char channelNames5[], float64 state5, int32 channelType5, const char channelNames6[], float64 state6, int32 channelType6, const char channelNames7[], float64 state7, int32 channelType7, const char channelNames8[], float64 state8, int32 channelType8, const char channelNames9[], float64 state9, int32 channelType9, const char channelNames10[], float64 state10, int32 channelType10, const char channelNames11[], float64 state11, int32 channelType11, const char channelNames12[], float64 state12, int32 channelType12, const char channelNames13[], float64 state13, int32 channelType13, const char channelNames14[], float64 state14, int32 channelType14, const char channelNames15[], float64 state15, int32 channelType15, const char channelNames16[], float64 state16, int32 channelType16, const char channelNames17[], float64 state17, int32 channelType17, const char channelNames18[], float64 state18, int32 channelType18, const char channelNames19[], float64 state19, int32 channelType19, const char channelNames20[], float64 state20, int32 channelType20, const char channelNames21[], float64 state21, int32 channelType21, const char channelNames22[], float64 state22, int32 channelType22, const char channelNames23[], float64 state23, int32 channelType23, const char channelNames24[], float64 state24, int32 channelType24, const char channelNames25[], float64 state25, int32 channelType25, const char channelNames26[], float64 state26, int32 channelType26, const char channelNames27[], float64 state27, int32 channelType27, const char channelNames28[], float64 state28, int32 channelType28, const char channelNames29[], float64 state29, int32 channelType29, const char channelNames30[], float64 state30, int32 channelType30, const char channelNames31[], float64 state31, int32 channelType31, const char channelNames32[], float64 state32, int32 channelType32, const char channelNames33[], float64 state33, int32 channelType33, const char channelNames34[], float64 state34, int32 channelType34, const char channelNames35[], float64 state35, int32 channelType35, const char channelNames36[], float64 state36, int32 channelType36, const char channelNames37[], float64 state37, int32 channelType37, const char channelNames38[], float64 state38, int32 channelType38, const char channelNames39[], float64 state39, int32 channelType39, const char channelNames40[], float64 state40, int32 channelType40, const char channelNames41[], float64 state41, int32 channelType41, const char channelNames42[], float64 state42, int32 channelType42, const char channelNames43[], float64 state43, int32 channelType43, const char channelNames44[], float64 state44, int32 channelType44, const char channelNames45[], float64 state45, int32 channelType45, const char channelNames46[], float64 state46, int32 channelType46, const char channelNames47[], float64 state47, int32 channelType47, const char channelNames48[], float64 state48, int32 channelType48, const char channelNames49[], float64 state49, int32 channelType49, const char channelNames50[], float64 state50, int32 channelType50, const char channelNames51[], float64 state51, int32 channelType51, const char channelNames52[], float64 state52, int32 channelType52, const char channelNames53[], float64 state53, int32 channelType53, const char channelNames54[], float64 state54, int32 channelType54, const char channelNames55[], float64 state55, int32 channelType55, const char channelNames56[], float64 state56, int32 channelType56, const char channelNames57[], float64 state57, int32 channelType57, const char channelNames58[], float64 state58, int32 channelType58, const char channelNames59[], float64 state59, int32 channelType59, const char channelNames60[], float64 state60, int32 channelType60, const char channelNames61[], float64 state61, int32 channelType61, const char channelNames62[], float64 state62, int32 channelType62, const char channelNames63[], float64 state63, int32 channelType63, const char channelNames64[], float64 state64, int32 channelType64, const char channelNames65[], float64 state65, int32 channelType65, const char channelNames66[], float64 state66, int32 channelType66, const char channelNames67[], float64 state67, int32 channelType67, const char channelNames68[], float64 state68, int32 channelType68, const char channelNames69[], float64 state69, int32 channelType69, const char channelNames70[], float64 state70, int32 channelType70, const char channelNames71[], float64 state71, int32 channelType71, const char channelNames72[], float64 state72, int32 channelType72, const char channelNames73[], float64 state73, int32 channelType73, const char channelNames74[], float64 state74, int32 channelType74, const char channelNames75[], float64 state75, int32 channelType75, const char channelNames76[], float64 state76, int32 channelType76, const char channelNames77[], float64 state77, int32 channelType77, const char channelNames78[], float64 state78, int32 channelType78, const char channelNames79[], float64 state79, int32 channelType79, const char channelNames80[], float64 state80, int32 channelType80, const char channelNames81[], float64 state81, int32 channelType81, const char channelNames82[], float64 state82, int32 channelType82, const char channelNames83[], float64 state83, int32 channelType83, const char channelNames84[], float64 state84, int32 channelType84, const char channelNames85[], float64 state85, int32 channelType85, const char channelNames86[], float64 state86, int32 channelType86, const char channelNames87[], float64 state87, int32 channelType87, const char channelNames88[], float64 state88, int32 channelType88, const char channelNames89[], float64 state89, int32 channelType89, const char channelNames90[], float64 state90, int32 channelType90, const char channelNames91[], float64 state91, int32 channelType91, const char channelNames92[], float64 state92, int32 channelType92, const char channelNames93[], float64 state93, int32 channelType93, const char channelNames94[], float64 state94, int32 channelType94, const char channelNames95[], float64 state95, int32 channelType95)
{
  return DAQmxSetAnalogPowerUpStates(deviceName, channelNames, state, channelType, channelNames0, state0, channelType0, channelNames1, state1, channelType1, channelNames2, state2, channelType2, channelNames3, state3, channelType3, channelNames4, state4, channelType4, channelNames5, state5, channelType5, channelNames6, state6, channelType6, channelNames7, state7, channelType7, channelNames8, state8, channelType8, channelNames9, state9, channelType9, channelNames10, state10, channelType10, channelNames11, state11, channelType11, channelNames12, state12, channelType12, channelNames13, state13, channelType13, channelNames14, state14, channelType14, channelNames15, state15, channelType15, channelNames16, state16, channelType16, channelNames17, state17, channelType17, channelNames18, state18, channelType18, channelNames19, state19, channelType19, channelNames20, state20, channelType20, channelNames21, state21, channelType21, channelNames22, state22, channelType22, channelNames23, state23, channelType23, channelNames24, state24, channelType24, channelNames25, state25, channelType25, channelNames26, state26, channelType26, channelNames27, state27, channelType27, channelNames28, state28, channelType28, channelNames29, state29, channelType29, channelNames30, state30, channelType30, channelNames31, state31, channelType31, channelNames32, state32, channelType32, channelNames33, state33, channelType33, channelNames34, state34, channelType34, channelNames35, state35, channelType35, channelNames36, state36, channelType36, channelNames37, state37, channelType37, channelNames38, state38, channelType38, channelNames39, state39, channelType39, channelNames40, state40, channelType40, channelNames41, state41, channelType41, channelNames42, state42, channelType42, channelNames43, state43, channelType43, channelNames44, state44, channelType44, channelNames45, state45, channelType45, channelNames46, state46, channelType46, channelNames47, state47, channelType47, channelNames48, state48, channelType48, channelNames49, state49, channelType49, channelNames50, state50, channelType50, channelNames51, state51, channelType51, channelNames52, state52, channelType52, channelNames53, state53, channelType53, channelNames54, state54, channelType54, channelNames55, state55, channelType55, channelNames56, state56, channelType56, channelNames57, state57, channelType57, channelNames58, state58, channelType58, channelNames59, state59, channelType59, channelNames60, state60, channelType60, channelNames61, state61, channelType61, channelNames62, state62, channelType62, channelNames63, state63, channelType63, channelNames64, state64, channelType64, channelNames65, state65, channelType65, channelNames66, state66, channelType66, channelNames67, state67, channelType67, channelNames68, state68, channelType68, channelNames69, state69, channelType69, channelNames70, state70, channelType70, channelNames71, state71, channelType71, channelNames72, state72, channelType72, channelNames73, state73, channelType73, channelNames74, state74, channelType74, channelNames75, state75, channelType75, channelNames76, state76, channelType76, channelNames77, state77, channelType77, channelNames78, state78, channelType78, channelNames79, state79, channelType79, channelNames80, state80, channelType80, channelNames81, state81, channelType81, channelNames82, state82, channelType82, channelNames83, state83, channelType83, channelNames84, state84, channelType84, channelNames85, state85, channelType85, channelNames86, state86, channelType86, channelNames87, state87, channelType87, channelNames88, state88, channelType88, channelNames89, state89, channelType89, channelNames90, state90, channelType90, channelNames91, state91, channelType91, channelNames92, state92, channelType92, channelNames93, state93, channelType93, channelNames94, state94, channelType94, channelNames95, state95, channelType95);
}

int32 SetAnalogPowerUpStatesWithOutputType(const char channelNames[], const float64 stateArray[], const int32 channelTypeArray[], uInt32 arraySize)
{
  return DAQmxSetAnalogPowerUpStatesWithOutputType(channelNames, stateArray, channelTypeArray, arraySize);
}

int32 SetArmStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetArmStartTrigTrigWhen(task, data);
}

int32 SetBufferAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetBufferAttribute(task, attribute, value);
}

int32 SetCalInfoAttributeBool(const char deviceName[], int32 attribute, bool32 value)
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetCalInfoAttributeDouble(const char deviceName[], int32 attribute, float64 value)
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetCalInfoAttributeString(const char deviceName[], int32 attribute, const char value[])
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetCalInfoAttributeUInt32(const char deviceName[], int32 attribute, uInt32 value)
{
  return DAQmxSetCalInfoAttribute(deviceName, attribute, value);
}

int32 SetChanAttributeBool(TaskHandle task, const char channel[], int32 attribute, bool32 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeDouble(TaskHandle task, const char channel[], int32 attribute, float64 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeDoubleArray(TaskHandle task, const char channel[], int32 attribute, const float64 value[], uInt32 size)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value, size);
}

int32 SetChanAttributeInt32(TaskHandle task, const char channel[], int32 attribute, int32 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeString(TaskHandle task, const char channel[], int32 attribute, const char value[])
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetChanAttributeUInt32(TaskHandle task, const char channel[], int32 attribute, uInt32 value)
{
  return DAQmxSetChanAttribute(task, channel, attribute, value);
}

int32 SetDigitalLogicFamilyPowerUpState(const char deviceName[], int32 logicFamily)
{
  return DAQmxSetDigitalLogicFamilyPowerUpState(deviceName, logicFamily);
}

int32 SetDigitalPowerUpStates(const char deviceName[], const char channelNames[], int32 state, const char channelNames0[], int32 state0, const char channelNames1[], int32 state1, const char channelNames2[], int32 state2, const char channelNames3[], int32 state3, const char channelNames4[], int32 state4, const char channelNames5[], int32 state5, const char channelNames6[], int32 state6, const char channelNames7[], int32 state7, const char channelNames8[], int32 state8, const char channelNames9[], int32 state9, const char channelNames10[], int32 state10, const char channelNames11[], int32 state11, const char channelNames12[], int32 state12, const char channelNames13[], int32 state13, const char channelNames14[], int32 state14, const char channelNames15[], int32 state15, const char channelNames16[], int32 state16, const char channelNames17[], int32 state17, const char channelNames18[], int32 state18, const char channelNames19[], int32 state19, const char channelNames20[], int32 state20, const char channelNames21[], int32 state21, const char channelNames22[], int32 state22, const char channelNames23[], int32 state23, const char channelNames24[], int32 state24, const char channelNames25[], int32 state25, const char channelNames26[], int32 state26, const char channelNames27[], int32 state27, const char channelNames28[], int32 state28, const char channelNames29[], int32 state29, const char channelNames30[], int32 state30, const char channelNames31[], int32 state31, const char channelNames32[], int32 state32, const char channelNames33[], int32 state33, const char channelNames34[], int32 state34, const char channelNames35[], int32 state35, const char channelNames36[], int32 state36, const char channelNames37[], int32 state37, const char channelNames38[], int32 state38, const char channelNames39[], int32 state39, const char channelNames40[], int32 state40, const char channelNames41[], int32 state41, const char channelNames42[], int32 state42, const char channelNames43[], int32 state43, const char channelNames44[], int32 state44, const char channelNames45[], int32 state45, const char channelNames46[], int32 state46, const char channelNames47[], int32 state47, const char channelNames48[], int32 state48, const char channelNames49[], int32 state49, const char channelNames50[], int32 state50, const char channelNames51[], int32 state51, const char channelNames52[], int32 state52, const char channelNames53[], int32 state53, const char channelNames54[], int32 state54, const char channelNames55[], int32 state55, const char channelNames56[], int32 state56, const char channelNames57[], int32 state57, const char channelNames58[], int32 state58, const char channelNames59[], int32 state59, const char channelNames60[], int32 state60, const char channelNames61[], int32 state61, const char channelNames62[], int32 state62, const char channelNames63[], int32 state63, const char channelNames64[], int32 state64, const char channelNames65[], int32 state65, const char channelNames66[], int32 state66, const char channelNames67[], int32 state67, const char channelNames68[], int32 state68, const char channelNames69[], int32 state69, const char channelNames70[], int32 state70, const char channelNames71[], int32 state71, const char channelNames72[], int32 state72, const char channelNames73[], int32 state73, const char channelNames74[], int32 state74, const char channelNames75[], int32 state75, const char channelNames76[], int32 state76, const char channelNames77[], int32 state77, const char channelNames78[], int32 state78, const char channelNames79[], int32 state79, const char channelNames80[], int32 state80, const char channelNames81[], int32 state81, const char channelNames82[], int32 state82, const char channelNames83[], int32 state83, const char channelNames84[], int32 state84, const char channelNames85[], int32 state85, const char channelNames86[], int32 state86, const char channelNames87[], int32 state87, const char channelNames88[], int32 state88, const char channelNames89[], int32 state89, const char channelNames90[], int32 state90, const char channelNames91[], int32 state91, const char channelNames92[], int32 state92, const char channelNames93[], int32 state93, const char channelNames94[], int32 state94, const char channelNames95[], int32 state95)
{
  return DAQmxSetDigitalPowerUpStates(deviceName, channelNames, state, channelNames0, state0, channelNames1, state1, channelNames2, state2, channelNames3, state3, channelNames4, state4, channelNames5, state5, channelNames6, state6, channelNames7, state7, channelNames8, state8, channelNames9, state9, channelNames10, state10, channelNames11, state11, channelNames12, state12, channelNames13, state13, channelNames14, state14, channelNames15, state15, channelNames16, state16, channelNames17, state17, channelNames18, state18, channelNames19, state19, channelNames20, state20, channelNames21, state21, channelNames22, state22, channelNames23, state23, channelNames24, state24, channelNames25, state25, channelNames26, state26, channelNames27, state27, channelNames28, state28, channelNames29, state29, channelNames30, state30, channelNames31, state31, channelNames32, state32, channelNames33, state33, channelNames34, state34, channelNames35, state35, channelNames36, state36, channelNames37, state37, channelNames38, state38, channelNames39, state39, channelNames40, state40, channelNames41, state41, channelNames42, state42, channelNames43, state43, channelNames44, state44, channelNames45, state45, channelNames46, state46, channelNames47, state47, channelNames48, state48, channelNames49, state49, channelNames50, state50, channelNames51, state51, channelNames52, state52, channelNames53, state53, channelNames54, state54, channelNames55, state55, channelNames56, state56, channelNames57, state57, channelNames58, state58, channelNames59, state59, channelNames60, state60, channelNames61, state61, channelNames62, state62, channelNames63, state63, channelNames64, state64, channelNames65, state65, channelNames66, state66, channelNames67, state67, channelNames68, state68, channelNames69, state69, channelNames70, state70, channelNames71, state71, channelNames72, state72, channelNames73, state73, channelNames74, state74, channelNames75, state75, channelNames76, state76, channelNames77, state77, channelNames78, state78, channelNames79, state79, channelNames80, state80, channelNames81, state81, channelNames82, state82, channelNames83, state83, channelNames84, state84, channelNames85, state85, channelNames86, state86, channelNames87, state87, channelNames88, state88, channelNames89, state89, channelNames90, state90, channelNames91, state91, channelNames92, state92, channelNames93, state93, channelNames94, state94, channelNames95, state95);
}

int32 SetDigitalPullUpPullDownStates(const char deviceName[], const char channelNames[], int32 state, const char channelNames0[], int32 state0, const char channelNames1[], int32 state1, const char channelNames2[], int32 state2, const char channelNames3[], int32 state3, const char channelNames4[], int32 state4, const char channelNames5[], int32 state5, const char channelNames6[], int32 state6, const char channelNames7[], int32 state7, const char channelNames8[], int32 state8, const char channelNames9[], int32 state9, const char channelNames10[], int32 state10, const char channelNames11[], int32 state11, const char channelNames12[], int32 state12, const char channelNames13[], int32 state13, const char channelNames14[], int32 state14, const char channelNames15[], int32 state15, const char channelNames16[], int32 state16, const char channelNames17[], int32 state17, const char channelNames18[], int32 state18, const char channelNames19[], int32 state19, const char channelNames20[], int32 state20, const char channelNames21[], int32 state21, const char channelNames22[], int32 state22, const char channelNames23[], int32 state23, const char channelNames24[], int32 state24, const char channelNames25[], int32 state25, const char channelNames26[], int32 state26, const char channelNames27[], int32 state27, const char channelNames28[], int32 state28, const char channelNames29[], int32 state29, const char channelNames30[], int32 state30, const char channelNames31[], int32 state31, const char channelNames32[], int32 state32, const char channelNames33[], int32 state33, const char channelNames34[], int32 state34, const char channelNames35[], int32 state35, const char channelNames36[], int32 state36, const char channelNames37[], int32 state37, const char channelNames38[], int32 state38, const char channelNames39[], int32 state39, const char channelNames40[], int32 state40, const char channelNames41[], int32 state41, const char channelNames42[], int32 state42, const char channelNames43[], int32 state43, const char channelNames44[], int32 state44, const char channelNames45[], int32 state45, const char channelNames46[], int32 state46, const char channelNames47[], int32 state47, const char channelNames48[], int32 state48, const char channelNames49[], int32 state49, const char channelNames50[], int32 state50, const char channelNames51[], int32 state51, const char channelNames52[], int32 state52, const char channelNames53[], int32 state53, const char channelNames54[], int32 state54, const char channelNames55[], int32 state55, const char channelNames56[], int32 state56, const char channelNames57[], int32 state57, const char channelNames58[], int32 state58, const char channelNames59[], int32 state59, const char channelNames60[], int32 state60, const char channelNames61[], int32 state61, const char channelNames62[], int32 state62, const char channelNames63[], int32 state63, const char channelNames64[], int32 state64, const char channelNames65[], int32 state65, const char channelNames66[], int32 state66, const char channelNames67[], int32 state67, const char channelNames68[], int32 state68, const char channelNames69[], int32 state69, const char channelNames70[], int32 state70, const char channelNames71[], int32 state71, const char channelNames72[], int32 state72, const char channelNames73[], int32 state73, const char channelNames74[], int32 state74, const char channelNames75[], int32 state75, const char channelNames76[], int32 state76, const char channelNames77[], int32 state77, const char channelNames78[], int32 state78, const char channelNames79[], int32 state79, const char channelNames80[], int32 state80, const char channelNames81[], int32 state81, const char channelNames82[], int32 state82, const char channelNames83[], int32 state83, const char channelNames84[], int32 state84, const char channelNames85[], int32 state85, const char channelNames86[], int32 state86, const char channelNames87[], int32 state87, const char channelNames88[], int32 state88, const char channelNames89[], int32 state89, const char channelNames90[], int32 state90, const char channelNames91[], int32 state91, const char channelNames92[], int32 state92, const char channelNames93[], int32 state93, const char channelNames94[], int32 state94, const char channelNames95[], int32 state95)
{
  return DAQmxSetDigitalPullUpPullDownStates(deviceName, channelNames, state, channelNames0, state0, channelNames1, state1, channelNames2, state2, channelNames3, state3, channelNames4, state4, channelNames5, state5, channelNames6, state6, channelNames7, state7, channelNames8, state8, channelNames9, state9, channelNames10, state10, channelNames11, state11, channelNames12, state12, channelNames13, state13, channelNames14, state14, channelNames15, state15, channelNames16, state16, channelNames17, state17, channelNames18, state18, channelNames19, state19, channelNames20, state20, channelNames21, state21, channelNames22, state22, channelNames23, state23, channelNames24, state24, channelNames25, state25, channelNames26, state26, channelNames27, state27, channelNames28, state28, channelNames29, state29, channelNames30, state30, channelNames31, state31, channelNames32, state32, channelNames33, state33, channelNames34, state34, channelNames35, state35, channelNames36, state36, channelNames37, state37, channelNames38, state38, channelNames39, state39, channelNames40, state40, channelNames41, state41, channelNames42, state42, channelNames43, state43, channelNames44, state44, channelNames45, state45, channelNames46, state46, channelNames47, state47, channelNames48, state48, channelNames49, state49, channelNames50, state50, channelNames51, state51, channelNames52, state52, channelNames53, state53, channelNames54, state54, channelNames55, state55, channelNames56, state56, channelNames57, state57, channelNames58, state58, channelNames59, state59, channelNames60, state60, channelNames61, state61, channelNames62, state62, channelNames63, state63, channelNames64, state64, channelNames65, state65, channelNames66, state66, channelNames67, state67, channelNames68, state68, channelNames69, state69, channelNames70, state70, channelNames71, state71, channelNames72, state72, channelNames73, state73, channelNames74, state74, channelNames75, state75, channelNames76, state76, channelNames77, state77, channelNames78, state78, channelNames79, state79, channelNames80, state80, channelNames81, state81, channelNames82, state82, channelNames83, state83, channelNames84, state84, channelNames85, state85, channelNames86, state86, channelNames87, state87, channelNames88, state88, channelNames89, state89, channelNames90, state90, channelNames91, state91, channelNames92, state92, channelNames93, state93, channelNames94, state94, channelNames95, state95);
}

int32 SetExportedSignalAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetExportedSignalAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetExportedSignalAttribute(task, attribute, value);
}

int32 SetFirstSampClkWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetFirstSampClkWhen(task, data);
}

int32 SetReadAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetReadAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value)
{
  return DAQmxSetReadAttribute(task, attribute, value);
}

int32 SetRealTimeAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetRealTimeAttribute(task, attribute, value);
}

int32 SetRealTimeAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetRealTimeAttribute(task, attribute, value);
}

int32 SetRealTimeAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetRealTimeAttribute(task, attribute, value);
}

int32 SetScaleAttributeDouble(const char scaleName[], int32 attribute, float64 value)
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value);
}

int32 SetScaleAttributeDoubleArray(const char scaleName[], int32 attribute, const float64 value[], uInt32 size)
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value, size);
}

int32 SetScaleAttributeInt32(const char scaleName[], int32 attribute, int32 value)
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value);
}

int32 SetScaleAttributeString(const char scaleName[], int32 attribute, const char value[])
{
  return DAQmxSetScaleAttribute(scaleName, attribute, value);
}

int32 SetStartTrigTrigWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetStartTrigTrigWhen(task, data);
}

int32 SetSyncPulseTimeWhen(TaskHandle task, CVIAbsoluteTime data)
{
  return DAQmxSetSyncPulseTimeWhen(task, data);
}

int32 SetTimingAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeExBool(TaskHandle task, const char deviceNames[], int32 attribute, bool32 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExDouble(TaskHandle task, const char deviceNames[], int32 attribute, float64 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExInt32(TaskHandle task, const char deviceNames[], int32 attribute, int32 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExString(TaskHandle task, const char deviceNames[], int32 attribute, const char value[])
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExTimestamp(TaskHandle task, const char deviceNames[], int32 attribute, CVIAbsoluteTime value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExUInt32(TaskHandle task, const char deviceNames[], int32 attribute, uInt32 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeExUInt64(TaskHandle task, const char deviceNames[], int32 attribute, uInt64 value)
{
  return DAQmxSetTimingAttributeEx(task, deviceNames, attribute, value);
}

int32 SetTimingAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTimingAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value)
{
  return DAQmxSetTimingAttribute(task, attribute, value);
}

int32 SetTrigAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeDoubleArray(TaskHandle task, int32 attribute, const float64 value[], uInt32 size)
{
  return DAQmxSetTrigAttribute(task, attribute, value, size);
}

int32 SetTrigAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeInt32Array(TaskHandle task, int32 attribute, const int32 value[], uInt32 size)
{
  return DAQmxSetTrigAttribute(task, attribute, value, size);
}

int32 SetTrigAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeTimestamp(TaskHandle task, int32 attribute, CVIAbsoluteTime value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetTrigAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetTrigAttribute(task, attribute, value);
}

int32 SetWatchdogAttributeBool(TaskHandle task, const char lines[], int32 attribute, bool32 value)
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWatchdogAttributeDouble(TaskHandle task, const char lines[], int32 attribute, float64 value)
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWatchdogAttributeInt32(TaskHandle task, const char lines[], int32 attribute, int32 value)
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWatchdogAttributeString(TaskHandle task, const char lines[], int32 attribute, const char value[])
{
  return DAQmxSetWatchdogAttribute(task, lines, attribute, value);
}

int32 SetWriteAttributeBool(TaskHandle task, int32 attribute, bool32 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeDouble(TaskHandle task, int32 attribute, float64 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeInt32(TaskHandle task, int32 attribute, int32 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeString(TaskHandle task, int32 attribute, const char value[])
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeUInt32(TaskHandle task, int32 attribute, uInt32 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 SetWriteAttributeUInt64(TaskHandle task, int32 attribute, uInt64 value)
{
  return DAQmxSetWriteAttribute(task, attribute, value);
}

int32 StartNewFile(TaskHandle task, const char filePath[])
{
  return DAQmxStartNewFile(task, filePath);
}

int32 StartTask(TaskHandle task)
{
  return DAQmxStartTask(task);
}

int32 StopTask(TaskHandle task)
{
  return DAQmxStopTask(task);
}

int32 TaskControl(TaskHandle task, int32 action)
{
  return DAQmxTaskControl(task, action);
}

int32 TristateOutputTerm(const char outputTerminal[])
{
  return DAQmxTristateOutputTerm(outputTerminal);
}

int32 UnreserveNetworkDevice(const char deviceName[])
{
  return DAQmxUnreserveNetworkDevice(deviceName);
}

int32 WaitForNextSampleClock(TaskHandle task, float64 timeout, bool32* isLate)
{
  return DAQmxWaitForNextSampleClock(task, timeout, isLate);
}

int32 WaitForValidTimestamp(TaskHandle task, int32 timestampEvent, float64 timeout, CVIAbsoluteTime* timestamp)
{
  return DAQmxWaitForValidTimestamp(task, timestampEvent, timeout, timestamp);
}

int32 WaitUntilTaskDone(TaskHandle task, float64 timeToWait)
{
  return DAQmxWaitUntilTaskDone(task, timeToWait);
}

int32 WriteAnalogF64(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteAnalogScalarF64(TaskHandle task, bool32 autoStart, float64 timeout, float64 value, bool32* reserved)
{
  return DAQmxWriteAnalogScalarF64(task, autoStart, timeout, value, reserved);
}

int32 WriteBinaryI16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryI16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteBinaryI32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const int32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryI32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteBinaryU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteBinaryU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteBinaryU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteCtrFreq(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 frequency[], const float64 dutyCycle[], int32* numSampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteCtrFreq(task, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, reserved);
}

int32 WriteCtrFreqScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 frequency, float64 dutyCycle, bool32* reserved)
{
  return DAQmxWriteCtrFreqScalar(task, autoStart, timeout, frequency, dutyCycle, reserved);
}

int32 WriteCtrTicks(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 highTicks[], const uInt32 lowTicks[], int32* numSampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteCtrTicks(task, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, reserved);
}

int32 WriteCtrTicksScalar(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 highTicks, uInt32 lowTicks, bool32* reserved)
{
  return DAQmxWriteCtrTicksScalar(task, autoStart, timeout, highTicks, lowTicks, reserved);
}

int32 WriteCtrTime(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const float64 highTime[], const float64 lowTime[], int32* numSampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteCtrTime(task, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, reserved);
}

int32 WriteCtrTimeScalar(TaskHandle task, bool32 autoStart, float64 timeout, float64 highTime, float64 lowTime, bool32* reserved)
{
  return DAQmxWriteCtrTimeScalar(task, autoStart, timeout, highTime, lowTime, reserved);
}

int32 WriteDigitalLines(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalLines(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteDigitalScalarU32(TaskHandle task, bool32 autoStart, float64 timeout, uInt32 value, bool32* reserved)
{
  return DAQmxWriteDigitalScalarU32(task, autoStart, timeout, value, reserved);
}

int32 WriteDigitalU16(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt16 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteDigitalU32(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt32 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteDigitalU8(TaskHandle task, int32 numSampsPerChan, bool32 autoStart, float64 timeout, int32 dataLayout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteRaw(TaskHandle task, int32 numSamps, bool32 autoStart, float64 timeout, const uInt8 writeArray[], int32* sampsPerChanWritten, bool32* reserved)
{
  return DAQmxWriteRaw(task, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, reserved);
}

int32 WriteToTEDSFromArray(const char physicalChannel[], const uInt8 bitStream[], uInt32 arraySize, int32 basicTEDSOptions)
{
  return DAQmxWriteToTEDSFromArray(physicalChannel, bitStream, arraySize, basicTEDSOptions);
}

int32 WriteToTEDSFromFile(const char physicalChannel[], const char filePath[], int32 basicTEDSOptions)
{
  return DAQmxWriteToTEDSFromFile(physicalChannel, filePath, basicTEDSOptions);
}

}  // namespace nidaqmx_grpc
