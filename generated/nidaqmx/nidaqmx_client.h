
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-DAQMX.
//---------------------------------------------------------------------
#ifndef NIDAQMX_GRPC_CLIENT_H
#define NIDAQMX_GRPC_CLIENT_H

#include <grpcpp/grpcpp.h>

#include <nidaqmx.grpc.pb.h>
#include <tests/utilities/client_helpers.h>

#include <memory>
#include <vector>

namespace nidaqmx_grpc::experimental::client {

namespace pb = ::google::protobuf;
using StubPtr = std::unique_ptr<NiDAQmx::Stub>;
using namespace nidevice_grpc::experimental::client;


AddCDAQSyncConnectionResponse add_cdaq_sync_connection(const StubPtr& stub, const pb::string& port_list);
AddGlobalChansToTaskResponse add_global_chans_to_task(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_names);
AddNetworkDeviceResponse add_network_device(const StubPtr& stub, const pb::string& ip_address, const pb::string& device_name, const bool& attempt_reservation, const double& timeout, const pb::uint32& device_name_out_buffer_size);
AreConfiguredCDAQSyncPortsDisconnectedResponse are_configured_cdaq_sync_ports_disconnected(const StubPtr& stub, const pb::string& chassis_devices_ports, const double& timeout);
AutoConfigureCDAQSyncConnectionsResponse auto_configure_cdaq_sync_connections(const StubPtr& stub, const pb::string& chassis_devices_ports, const double& timeout);
CalculateReversePolyCoeffResponse calculate_reverse_poly_coeff(const StubPtr& stub, const std::vector<double>& forward_coeffs, const pb::uint32& num_forward_coeffs_in, const double& min_val_x, const double& max_val_x, const pb::int32& num_points_to_compute, const pb::int32& reverse_poly_order);
CfgAnlgEdgeRefTrigResponse cfg_anlg_edge_ref_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const simple_variant<Slope1, pb::int32>& trigger_slope, const double& trigger_level, const pb::uint32& pretrigger_samples);
CfgAnlgEdgeStartTrigResponse cfg_anlg_edge_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const simple_variant<Slope1, pb::int32>& trigger_slope, const double& trigger_level);
CfgAnlgMultiEdgeRefTrigResponse cfg_anlg_multi_edge_ref_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_sources, const std::vector<pb::int32>& trigger_slope_array, const std::vector<double>& trigger_level_array, const pb::uint32& pretrigger_samples, const pb::uint32& array_size);
CfgAnlgMultiEdgeStartTrigResponse cfg_anlg_multi_edge_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_sources, const std::vector<pb::int32>& trigger_slope_array, const std::vector<double>& trigger_level_array);
CfgAnlgWindowRefTrigResponse cfg_anlg_window_ref_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const simple_variant<WindowTriggerCondition1, pb::int32>& trigger_when, const double& window_top, const double& window_bottom, const pb::uint32& pretrigger_samples);
CfgAnlgWindowStartTrigResponse cfg_anlg_window_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const simple_variant<WindowTriggerCondition1, pb::int32>& trigger_when, const double& window_top, const double& window_bottom);
CfgBurstHandshakingTimingExportClockResponse cfg_burst_handshaking_timing_export_clock(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan, const double& sample_clk_rate, const pb::string& sample_clk_outp_term, const simple_variant<Polarity2, pb::int32>& sample_clk_pulse_polarity, const simple_variant<Level1, pb::int32>& pause_when, const simple_variant<Polarity2, pb::int32>& ready_event_active_level);
CfgBurstHandshakingTimingImportClockResponse cfg_burst_handshaking_timing_import_clock(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan, const double& sample_clk_rate, const pb::string& sample_clk_src, const simple_variant<Edge1, pb::int32>& sample_clk_active_edge, const simple_variant<Level1, pb::int32>& pause_when, const simple_variant<Polarity2, pb::int32>& ready_event_active_level);
CfgChangeDetectionTimingResponse cfg_change_detection_timing(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& rising_edge_chan, const pb::string& falling_edge_chan, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan);
CfgDigEdgeRefTrigResponse cfg_dig_edge_ref_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const simple_variant<Edge1, pb::int32>& trigger_edge, const pb::uint32& pretrigger_samples);
CfgDigEdgeStartTrigResponse cfg_dig_edge_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const simple_variant<Edge1, pb::int32>& trigger_edge);
CfgDigPatternRefTrigResponse cfg_dig_pattern_ref_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const pb::string& trigger_pattern, const simple_variant<DigitalPatternCondition1, pb::int32>& trigger_when, const pb::uint32& pretrigger_samples);
CfgDigPatternStartTrigResponse cfg_dig_pattern_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& trigger_source, const pb::string& trigger_pattern, const simple_variant<DigitalPatternCondition1, pb::int32>& trigger_when);
CfgHandshakingTimingResponse cfg_handshaking_timing(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan);
CfgImplicitTimingResponse cfg_implicit_timing(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan);
CfgInputBufferResponse cfg_input_buffer(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::uint32& num_samps_per_chan);
CfgOutputBufferResponse cfg_output_buffer(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::uint32& num_samps_per_chan);
CfgPipelinedSampClkTimingResponse cfg_pipelined_samp_clk_timing(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& source, const double& rate, const simple_variant<Edge1, pb::int32>& active_edge, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan);
CfgSampClkTimingResponse cfg_samp_clk_timing(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& source, const double& rate, const simple_variant<Edge1, pb::int32>& active_edge, const simple_variant<AcquisitionType, pb::int32>& sample_mode, const pb::uint64& samps_per_chan);
CfgTimeStartTrigResponse cfg_time_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task, const google::protobuf::Timestamp& when, const simple_variant<Timescale2, pb::int32>& timescale);
CfgWatchdogAOExpirStatesResponse cfg_watchdog_ao_expir_states(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_names, const std::vector<double>& expir_state_array, const std::vector<pb::int32>& output_type_array, const pb::uint32& array_size);
CfgWatchdogCOExpirStatesResponse cfg_watchdog_co_expir_states(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_names, const std::vector<pb::int32>& expir_state_array, const pb::uint32& array_size);
CfgWatchdogDOExpirStatesResponse cfg_watchdog_do_expir_states(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_names, const std::vector<pb::int32>& expir_state_array, const pb::uint32& array_size);
ClearTEDSResponse clear_teds(const StubPtr& stub, const pb::string& physical_channel);
ClearTaskResponse clear_task(const StubPtr& stub, const nidevice_grpc::Session& task);
ConfigureLoggingResponse configure_logging(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& file_path, const simple_variant<LoggingMode, pb::int32>& logging_mode, const pb::string& group_name, const simple_variant<LoggingOperation, pb::int32>& operation);
ConfigureTEDSResponse configure_teds(const StubPtr& stub, const pb::string& physical_channel, const pb::string& file_path);
ConnectTermsResponse connect_terms(const StubPtr& stub, const pb::string& source_terminal, const pb::string& destination_terminal, const simple_variant<InvertPolarity, pb::int32>& signal_modifiers);
ControlWatchdogTaskResponse control_watchdog_task(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<WatchdogControlAction, pb::int32>& action);
CreateAIAccel4WireDCVoltageChanResponse create_ai_accel4_wire_dc_voltage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<AccelUnits2, pb::int32>& units, const double& sensitivity, const simple_variant<AccelSensitivityUnits1, pb::int32>& sensitivity_units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const bool& use_excit_for_scaling, const pb::string& custom_scale_name);
CreateAIAccelChanResponse create_ai_accel_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<AccelUnits2, pb::int32>& units, const double& sensitivity, const simple_variant<AccelSensitivityUnits1, pb::int32>& sensitivity_units, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateAIAccelChargeChanResponse create_ai_accel_charge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<AccelUnits2, pb::int32>& units, const double& sensitivity, const simple_variant<AccelChargeSensitivityUnits, pb::int32>& sensitivity_units, const pb::string& custom_scale_name);
CreateAIBridgeChanResponse create_ai_bridge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<BridgeUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const pb::string& custom_scale_name);
CreateAIChargeChanResponse create_ai_charge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<ChargeUnits, pb::int32>& units, const pb::string& custom_scale_name);
CreateAICurrentChanResponse create_ai_current_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<CurrentUnits2, pb::int32>& units, const simple_variant<CurrentShuntResistorLocationWithDefault, pb::int32>& shunt_resistor_loc, const double& ext_shunt_resistor_val, const pb::string& custom_scale_name);
CreateAICurrentRMSChanResponse create_ai_current_rms_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<CurrentUnits2, pb::int32>& units, const simple_variant<CurrentShuntResistorLocationWithDefault, pb::int32>& shunt_resistor_loc, const double& ext_shunt_resistor_val, const pb::string& custom_scale_name);
CreateAIForceBridgePolynomialChanResponse create_ai_force_bridge_polynomial_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<ForceUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const std::vector<double>& forward_coeffs, const pb::uint32& num_forward_coeffs, const std::vector<double>& reverse_coeffs, const pb::uint32& num_reverse_coeffs, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIForceBridgeTableChanResponse create_ai_force_bridge_table_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<ForceUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const std::vector<double>& electrical_vals, const pb::uint32& num_electrical_vals, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const std::vector<double>& physical_vals, const pb::uint32& num_physical_vals, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIForceBridgeTwoPointLinChanResponse create_ai_force_bridge_two_point_lin_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<ForceUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const double& first_electrical_val, const double& second_electrical_val, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const double& first_physical_val, const double& second_physical_val, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIForceIEPEChanResponse create_ai_force_iepe_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<ForceIEPEUnits, pb::int32>& units, const double& sensitivity, const simple_variant<ForceIEPESensorSensitivityUnits, pb::int32>& sensitivity_units, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateAIFreqVoltageChanResponse create_ai_freq_voltage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<FrequencyUnits, pb::int32>& units, const double& threshold_level, const double& hysteresis, const pb::string& custom_scale_name);
CreateAIMicrophoneChanResponse create_ai_microphone_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const simple_variant<SoundPressureUnits1, pb::int32>& units, const double& mic_sensitivity, const double& max_snd_press_level, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateAIPosEddyCurrProxProbeChanResponse create_ai_pos_eddy_curr_prox_probe_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<LengthUnits2, pb::int32>& units, const double& sensitivity, const simple_variant<EddyCurrentProxProbeSensitivityUnits, pb::int32>& sensitivity_units, const pb::string& custom_scale_name);
CreateAIPosLVDTChanResponse create_ai_pos_lvdt_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<LengthUnits2, pb::int32>& units, const double& sensitivity, const simple_variant<LVDTSensitivityUnits1, pb::int32>& sensitivity_units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& voltage_excit_freq, const simple_variant<ACExcitWireMode, pb::int32>& ac_excit_wire_mode, const pb::string& custom_scale_name);
CreateAIPosRVDTChanResponse create_ai_pos_rvdt_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<AngleUnits1, pb::int32>& units, const double& sensitivity, const simple_variant<RVDTSensitivityUnits1, pb::int32>& sensitivity_units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& voltage_excit_freq, const simple_variant<ACExcitWireMode, pb::int32>& ac_excit_wire_mode, const pb::string& custom_scale_name);
CreateAIPressureBridgePolynomialChanResponse create_ai_pressure_bridge_polynomial_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<PressureUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const std::vector<double>& forward_coeffs, const pb::uint32& num_forward_coeffs, const std::vector<double>& reverse_coeffs, const pb::uint32& num_reverse_coeffs, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIPressureBridgeTableChanResponse create_ai_pressure_bridge_table_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<PressureUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const std::vector<double>& electrical_vals, const pb::uint32& num_electrical_vals, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const std::vector<double>& physical_vals, const pb::uint32& num_physical_vals, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIPressureBridgeTwoPointLinChanResponse create_ai_pressure_bridge_two_point_lin_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<PressureUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const double& first_electrical_val, const double& second_electrical_val, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const double& first_physical_val, const double& second_physical_val, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIRTDChanResponse create_airtd_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<RTDType1, pb::int32>& rtd_type, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const double& r0);
CreateAIResistanceChanResponse create_ai_resistance_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<ResistanceUnits2, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateAIRosetteStrainGageChanResponse create_ai_rosette_strain_gage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<StrainGageRosetteType, pb::int32>& rosette_type, const double& gage_orientation, const std::vector<pb::int32>& rosette_meas_types, const pb::uint32& num_rosette_meas_types, const simple_variant<StrainGageBridgeType1, pb::int32>& strain_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& gage_factor, const double& nominal_gage_resistance, const double& poisson_ratio, const double& lead_wire_resistance);
CreateAIStrainGageChanResponse create_ai_strain_gage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<StrainUnits1, pb::int32>& units, const simple_variant<StrainGageBridgeType1, pb::int32>& strain_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& gage_factor, const double& initial_bridge_voltage, const double& nominal_gage_resistance, const double& poisson_ratio, const double& lead_wire_resistance, const pb::string& custom_scale_name);
CreateAITempBuiltInSensorChanResponse create_ai_temp_built_in_sensor_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<TemperatureUnits, pb::int32>& units);
CreateAIThrmcplChanResponse create_ai_thrmcpl_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<ThermocoupleType1, pb::int32>& thermocouple_type, const simple_variant<CJCSource1, pb::int32>& cjc_source, const double& cjc_val, const pb::string& cjc_channel);
CreateAIThrmstrChanIexResponse create_ai_thrmstr_chan_iex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const double& a, const double& b, const double& c);
CreateAIThrmstrChanVexResponse create_ai_thrmstr_chan_vex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& a, const double& b, const double& c, const double& r1);
CreateAITorqueBridgePolynomialChanResponse create_ai_torque_bridge_polynomial_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TorqueUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const std::vector<double>& forward_coeffs, const pb::uint32& num_forward_coeffs, const std::vector<double>& reverse_coeffs, const pb::uint32& num_reverse_coeffs, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAITorqueBridgeTableChanResponse create_ai_torque_bridge_table_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TorqueUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const std::vector<double>& electrical_vals, const pb::uint32& num_electrical_vals, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const std::vector<double>& physical_vals, const pb::uint32& num_physical_vals, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAITorqueBridgeTwoPointLinChanResponse create_ai_torque_bridge_two_point_lin_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TorqueUnits, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& nominal_bridge_resistance, const double& first_electrical_val, const double& second_electrical_val, const simple_variant<BridgeElectricalUnits, pb::int32>& electrical_units, const double& first_physical_val, const double& second_physical_val, const simple_variant<BridgePhysicalUnits, pb::int32>& physical_units, const pb::string& custom_scale_name);
CreateAIVelocityIEPEChanResponse create_ai_velocity_iepe_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<VelocityUnits, pb::int32>& units, const double& sensitivity, const simple_variant<VelocityIEPESensorSensitivityUnits, pb::int32>& sensitivity_units, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateAIVoltageChanResponse create_ai_voltage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<VoltageUnits2, pb::int32>& units, const pb::string& custom_scale_name);
CreateAIVoltageChanWithExcitResponse create_ai_voltage_chan_with_excit(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<VoltageUnits2, pb::int32>& units, const simple_variant<BridgeConfiguration1, pb::int32>& bridge_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const bool& use_excit_for_scaling, const pb::string& custom_scale_name);
CreateAIVoltageRMSChanResponse create_ai_voltage_rms_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<VoltageUnits2, pb::int32>& units, const pb::string& custom_scale_name);
CreateAOCurrentChanResponse create_ao_current_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<CurrentUnits2, pb::int32>& units, const pb::string& custom_scale_name);
CreateAOFuncGenChanResponse create_ao_func_gen_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<FuncGenType, pb::int32>& type, const double& freq, const double& amplitude, const double& offset);
CreateAOVoltageChanResponse create_ao_voltage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<VoltageUnits2, pb::int32>& units, const pb::string& custom_scale_name);
CreateCIAngEncoderChanResponse create_ci_ang_encoder_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const simple_variant<EncoderType2, pb::int32>& decoding_type, const bool& zidx_enable, const double& zidx_val, const simple_variant<EncoderZIndexPhase1, pb::int32>& zidx_phase, const simple_variant<AngleUnits2, pb::int32>& units, const pb::uint32& pulses_per_rev, const double& initial_angle, const pb::string& custom_scale_name);
CreateCIAngVelocityChanResponse create_ci_ang_velocity_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<EncoderType2, pb::int32>& decoding_type, const simple_variant<AngularVelocityUnits, pb::int32>& units, const pb::uint32& pulses_per_rev, const pb::string& custom_scale_name);
CreateCICountEdgesChanResponse create_ci_count_edges_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const simple_variant<Edge1, pb::int32>& edge, const pb::uint32& initial_count, const simple_variant<CountDirection1, pb::int32>& count_direction);
CreateCIDutyCycleChanResponse create_ci_duty_cycle_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_freq, const double& max_freq, const simple_variant<Edge1, pb::int32>& edge, const pb::string& custom_scale_name);
CreateCIFreqChanResponse create_ci_freq_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<FrequencyUnits3, pb::int32>& units, const simple_variant<Edge1, pb::int32>& edge, const simple_variant<CounterFrequencyMethod, pb::int32>& meas_method, const double& meas_time, const pb::uint32& divisor, const pb::string& custom_scale_name);
CreateCIGPSTimestampChanResponse create_cigps_timestamp_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const simple_variant<TimeUnits, pb::int32>& units, const simple_variant<GpsSignalType1, pb::int32>& sync_method, const pb::string& custom_scale_name);
CreateCILinEncoderChanResponse create_ci_lin_encoder_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const simple_variant<EncoderType2, pb::int32>& decoding_type, const bool& zidx_enable, const double& zidx_val, const simple_variant<EncoderZIndexPhase1, pb::int32>& zidx_phase, const simple_variant<LengthUnits3, pb::int32>& units, const double& dist_per_pulse, const double& initial_pos, const pb::string& custom_scale_name);
CreateCILinVelocityChanResponse create_ci_lin_velocity_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<EncoderType2, pb::int32>& decoding_type, const simple_variant<VelocityUnits, pb::int32>& units, const double& dist_per_pulse, const pb::string& custom_scale_name);
CreateCIPeriodChanResponse create_ci_period_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TimeUnits3, pb::int32>& units, const simple_variant<Edge1, pb::int32>& edge, const simple_variant<CounterFrequencyMethod, pb::int32>& meas_method, const double& meas_time, const pb::uint32& divisor, const pb::string& custom_scale_name);
CreateCIPulseChanFreqResponse create_ci_pulse_chan_freq(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<FrequencyUnits2, pb::int32>& units);
CreateCIPulseChanTicksResponse create_ci_pulse_chan_ticks(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const pb::string& source_terminal, const double& min_val, const double& max_val);
CreateCIPulseChanTimeResponse create_ci_pulse_chan_time(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<DigitalWidthUnits3, pb::int32>& units);
CreateCIPulseWidthChanResponse create_ci_pulse_width_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TimeUnits3, pb::int32>& units, const simple_variant<Edge1, pb::int32>& starting_edge, const pb::string& custom_scale_name);
CreateCISemiPeriodChanResponse create_ci_semi_period_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TimeUnits3, pb::int32>& units, const pb::string& custom_scale_name);
CreateCITwoEdgeSepChanResponse create_ci_two_edge_sep_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TimeUnits3, pb::int32>& units, const simple_variant<Edge1, pb::int32>& first_edge, const simple_variant<Edge1, pb::int32>& second_edge, const pb::string& custom_scale_name);
CreateCOPulseChanFreqResponse create_co_pulse_chan_freq(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const simple_variant<FrequencyUnits2, pb::int32>& units, const simple_variant<Level1, pb::int32>& idle_state, const double& initial_delay, const double& freq, const double& duty_cycle);
CreateCOPulseChanTicksResponse create_co_pulse_chan_ticks(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const pb::string& source_terminal, const simple_variant<Level1, pb::int32>& idle_state, const pb::int32& initial_delay, const pb::int32& low_ticks, const pb::int32& high_ticks);
CreateCOPulseChanTimeResponse create_co_pulse_chan_time(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& counter, const pb::string& name_to_assign_to_channel, const simple_variant<DigitalWidthUnits3, pb::int32>& units, const simple_variant<Level1, pb::int32>& idle_state, const double& initial_delay, const double& low_time, const double& high_time);
CreateDIChanResponse create_di_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& lines, const pb::string& name_to_assign_to_lines, const simple_variant<LineGrouping, pb::int32>& line_grouping);
CreateDOChanResponse create_do_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& lines, const pb::string& name_to_assign_to_lines, const simple_variant<LineGrouping, pb::int32>& line_grouping);
CreateLinScaleResponse create_lin_scale(const StubPtr& stub, const pb::string& name, const double& slope, const double& y_intercept, const simple_variant<UnitsPreScaled, pb::int32>& pre_scaled_units, const pb::string& scaled_units);
CreateMapScaleResponse create_map_scale(const StubPtr& stub, const pb::string& name, const double& prescaled_min, const double& prescaled_max, const double& scaled_min, const double& scaled_max, const simple_variant<UnitsPreScaled, pb::int32>& pre_scaled_units, const pb::string& scaled_units);
CreatePolynomialScaleResponse create_polynomial_scale(const StubPtr& stub, const pb::string& name, const std::vector<double>& forward_coeffs, const pb::uint32& num_forward_coeffs_in, const std::vector<double>& reverse_coeffs, const pb::uint32& num_reverse_coeffs_in, const simple_variant<UnitsPreScaled, pb::int32>& pre_scaled_units, const pb::string& scaled_units);
CreateTEDSAIAccelChanResponse create_tedsai_accel_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<AccelUnits2, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIBridgeChanResponse create_tedsai_bridge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TEDSUnits, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const pb::string& custom_scale_name);
CreateTEDSAICurrentChanResponse create_tedsai_current_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<TEDSUnits, pb::int32>& units, const simple_variant<CurrentShuntResistorLocationWithDefault, pb::int32>& shunt_resistor_loc, const double& ext_shunt_resistor_val, const pb::string& custom_scale_name);
CreateTEDSAIForceBridgeChanResponse create_tedsai_force_bridge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<ForceUnits, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIForceIEPEChanResponse create_tedsai_force_iepe_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<ForceIEPEUnits, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIMicrophoneChanResponse create_tedsai_microphone_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const simple_variant<SoundPressureUnits1, pb::int32>& units, const double& max_snd_press_level, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIPosLVDTChanResponse create_tedsai_pos_lvdt_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<LengthUnits2, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& voltage_excit_freq, const simple_variant<ACExcitWireMode, pb::int32>& ac_excit_wire_mode, const pb::string& custom_scale_name);
CreateTEDSAIPosRVDTChanResponse create_tedsai_pos_rvdt_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<AngleUnits1, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& voltage_excit_freq, const simple_variant<ACExcitWireMode, pb::int32>& ac_excit_wire_mode, const pb::string& custom_scale_name);
CreateTEDSAIPressureBridgeChanResponse create_tedsai_pressure_bridge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<PressureUnits, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIRTDChanResponse create_tedsairtd_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val);
CreateTEDSAIResistanceChanResponse create_tedsai_resistance_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TEDSUnits, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIStrainGageChanResponse create_tedsai_strain_gage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<StrainUnits1, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& initial_bridge_voltage, const double& lead_wire_resistance, const pb::string& custom_scale_name);
CreateTEDSAIThrmcplChanResponse create_tedsai_thrmcpl_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<CJCSource1, pb::int32>& cjc_source, const double& cjc_val, const pb::string& cjc_channel);
CreateTEDSAIThrmstrChanIexResponse create_tedsai_thrmstr_chan_iex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& current_excit_source, const double& current_excit_val);
CreateTEDSAIThrmstrChanVexResponse create_tedsai_thrmstr_chan_vex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TemperatureUnits, pb::int32>& units, const simple_variant<ResistanceConfiguration, pb::int32>& resistance_config, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const double& r1);
CreateTEDSAITorqueBridgeChanResponse create_tedsai_torque_bridge_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const double& min_val, const double& max_val, const simple_variant<TorqueUnits, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const pb::string& custom_scale_name);
CreateTEDSAIVoltageChanResponse create_tedsai_voltage_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<TEDSUnits, pb::int32>& units, const pb::string& custom_scale_name);
CreateTEDSAIVoltageChanWithExcitResponse create_tedsai_voltage_chan_with_excit(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& physical_channel, const pb::string& name_to_assign_to_channel, const simple_variant<InputTermCfgWithDefault, pb::int32>& terminal_config, const double& min_val, const double& max_val, const simple_variant<TEDSUnits, pb::int32>& units, const simple_variant<ExcitationSource, pb::int32>& voltage_excit_source, const double& voltage_excit_val, const pb::string& custom_scale_name);
CreateTableScaleResponse create_table_scale(const StubPtr& stub, const pb::string& name, const std::vector<double>& prescaled_vals, const pb::uint32& num_prescaled_vals_in, const std::vector<double>& scaled_vals, const pb::uint32& num_scaled_vals_in, const simple_variant<UnitsPreScaled, pb::int32>& pre_scaled_units, const pb::string& scaled_units);
CreateTaskResponse create_task(const StubPtr& stub, const pb::string& session_name);
CreateWatchdogTimerTaskResponse create_watchdog_timer_task(const StubPtr& stub, const pb::string& device_name, const pb::string& session_name, const double& timeout, const std::vector<WatchdogExpChannelsAndState>& exp_states);
CreateWatchdogTimerTaskExResponse create_watchdog_timer_task_ex(const StubPtr& stub, const pb::string& device_name, const pb::string& session_name, const double& timeout);
DeleteNetworkDeviceResponse delete_network_device(const StubPtr& stub, const pb::string& device_name);
DeleteSavedGlobalChanResponse delete_saved_global_chan(const StubPtr& stub, const pb::string& channel_name);
DeleteSavedScaleResponse delete_saved_scale(const StubPtr& stub, const pb::string& scale_name);
DeleteSavedTaskResponse delete_saved_task(const StubPtr& stub, const pb::string& task_name);
DeviceSupportsCalResponse device_supports_cal(const StubPtr& stub, const pb::string& device_name);
DisableRefTrigResponse disable_ref_trig(const StubPtr& stub, const nidevice_grpc::Session& task);
DisableStartTrigResponse disable_start_trig(const StubPtr& stub, const nidevice_grpc::Session& task);
DisconnectTermsResponse disconnect_terms(const StubPtr& stub, const pb::string& source_terminal, const pb::string& destination_terminal);
ExportSignalResponse export_signal(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<Signal, pb::int32>& signal_id, const pb::string& output_terminal);
GetAIChanCalCalDateResponse get_ai_chan_cal_cal_date(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_name);
GetAIChanCalExpDateResponse get_ai_chan_cal_exp_date(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_name);
GetAnalogPowerUpStatesResponse get_analog_power_up_states(const StubPtr& stub, const pb::string& device_name, const std::vector<AnalogPowerUpChannelAndType>& channels);
GetArmStartTrigTimestampValResponse get_arm_start_trig_timestamp_val(const StubPtr& stub, const nidevice_grpc::Session& task);
GetArmStartTrigTrigWhenResponse get_arm_start_trig_trig_when(const StubPtr& stub, const nidevice_grpc::Session& task);
GetAutoConfiguredCDAQSyncConnectionsResponse get_auto_configured_cdaq_sync_connections(const StubPtr& stub, const pb::uint32& port_list_size);
GetBufferAttributeUInt32Response get_buffer_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const BufferUInt32Attributes& attribute);
GetChanAttributeBoolResponse get_chan_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelBoolAttributes& attribute);
GetChanAttributeDoubleResponse get_chan_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelDoubleAttributes& attribute);
GetChanAttributeDoubleArrayResponse get_chan_attribute_double_array(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelDoubleArrayAttributes& attribute, const pb::uint32& size);
GetChanAttributeInt32Response get_chan_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelInt32Attributes& attribute);
GetChanAttributeStringResponse get_chan_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelStringAttributes& attribute, const pb::uint32& size);
GetChanAttributeUInt32Response get_chan_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelUInt32Attributes& attribute);
GetDeviceAttributeBoolResponse get_device_attribute_bool(const StubPtr& stub, const pb::string& device_name, const DeviceBoolAttributes& attribute);
GetDeviceAttributeDoubleResponse get_device_attribute_double(const StubPtr& stub, const pb::string& device_name, const DeviceDoubleAttributes& attribute);
GetDeviceAttributeDoubleArrayResponse get_device_attribute_double_array(const StubPtr& stub, const pb::string& device_name, const DeviceDoubleArrayAttributes& attribute, const pb::uint32& size);
GetDeviceAttributeInt32Response get_device_attribute_int32(const StubPtr& stub, const pb::string& device_name, const DeviceInt32Attributes& attribute);
GetDeviceAttributeInt32ArrayResponse get_device_attribute_int32_array(const StubPtr& stub, const pb::string& device_name, const DeviceInt32ArrayAttributes& attribute, const pb::uint32& size);
GetDeviceAttributeStringResponse get_device_attribute_string(const StubPtr& stub, const pb::string& device_name, const DeviceStringAttributes& attribute, const pb::uint32& size);
GetDeviceAttributeUInt32Response get_device_attribute_uint32(const StubPtr& stub, const pb::string& device_name, const DeviceUInt32Attributes& attribute);
GetDeviceAttributeUInt32ArrayResponse get_device_attribute_uint32_array(const StubPtr& stub, const pb::string& device_name, const DeviceUInt32ArrayAttributes& attribute, const pb::uint32& size);
GetDigitalLogicFamilyPowerUpStateResponse get_digital_logic_family_power_up_state(const StubPtr& stub, const pb::string& device_name);
GetDigitalPowerUpStatesResponse get_digital_power_up_states(const StubPtr& stub, const pb::string& device_name, const std::vector<pb::string>& channel_name);
GetDigitalPullUpPullDownStatesResponse get_digital_pull_up_pull_down_states(const StubPtr& stub, const pb::string& device_name, const std::vector<pb::string>& channel_name);
GetDisconnectedCDAQSyncPortsResponse get_disconnected_cdaq_sync_ports(const StubPtr& stub, const pb::uint32& port_list_size);
GetErrorStringResponse get_error_string(const StubPtr& stub, const pb::int32& error_code);
GetExtendedErrorInfoResponse get_extended_error_info(const StubPtr& stub);
GetFirstSampClkWhenResponse get_first_samp_clk_when(const StubPtr& stub, const nidevice_grpc::Session& task);
GetFirstSampTimestampValResponse get_first_samp_timestamp_val(const StubPtr& stub, const nidevice_grpc::Session& task);
GetNthTaskChannelResponse get_nth_task_channel(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::uint32& index, const pb::int32& buffer_size);
GetNthTaskDeviceResponse get_nth_task_device(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::uint32& index, const pb::int32& buffer_size);
GetNthTaskReadChannelResponse get_nth_task_read_channel(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::uint32& index, const pb::int32& buffer_size);
GetReadAttributeBoolResponse get_read_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadBoolAttributes& attribute);
GetReadAttributeDoubleResponse get_read_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadDoubleAttributes& attribute);
GetReadAttributeInt32Response get_read_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadInt32Attributes& attribute);
GetReadAttributeStringResponse get_read_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadStringAttributes& attribute, const pb::uint32& size);
GetReadAttributeUInt32Response get_read_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadUInt32Attributes& attribute);
GetReadAttributeUInt64Response get_read_attribute_uint64(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadUInt64Attributes& attribute);
GetRefTrigTimestampValResponse get_ref_trig_timestamp_val(const StubPtr& stub, const nidevice_grpc::Session& task);
GetScaleAttributeDoubleResponse get_scale_attribute_double(const StubPtr& stub, const pb::string& scale_name, const ScaleDoubleAttributes& attribute);
GetScaleAttributeDoubleArrayResponse get_scale_attribute_double_array(const StubPtr& stub, const pb::string& scale_name, const ScaleDoubleArrayAttributes& attribute, const pb::uint32& size);
GetScaleAttributeInt32Response get_scale_attribute_int32(const StubPtr& stub, const pb::string& scale_name, const ScaleInt32Attributes& attribute);
GetScaleAttributeStringResponse get_scale_attribute_string(const StubPtr& stub, const pb::string& scale_name, const ScaleStringAttributes& attribute, const pb::uint32& size);
GetSelfCalLastDateAndTimeResponse get_self_cal_last_date_and_time(const StubPtr& stub, const pb::string& device_name);
GetStartTrigTimestampValResponse get_start_trig_timestamp_val(const StubPtr& stub, const nidevice_grpc::Session& task);
GetStartTrigTrigWhenResponse get_start_trig_trig_when(const StubPtr& stub, const nidevice_grpc::Session& task);
GetSyncPulseTimeWhenResponse get_sync_pulse_time_when(const StubPtr& stub, const nidevice_grpc::Session& task);
GetTaskAttributeBoolResponse get_task_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const TaskBoolAttributes& attribute);
GetTaskAttributeStringResponse get_task_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const TaskStringAttributes& attribute, const pb::uint32& size);
GetTaskAttributeUInt32Response get_task_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const TaskUInt32Attributes& attribute);
GetTimingAttributeBoolResponse get_timing_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingBoolAttributes& attribute);
GetTimingAttributeDoubleResponse get_timing_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingDoubleAttributes& attribute);
GetTimingAttributeExBoolResponse get_timing_attribute_ex_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingBoolAttributes& attribute);
GetTimingAttributeExDoubleResponse get_timing_attribute_ex_double(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingDoubleAttributes& attribute);
GetTimingAttributeExInt32Response get_timing_attribute_ex_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingInt32Attributes& attribute);
GetTimingAttributeExStringResponse get_timing_attribute_ex_string(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingStringAttributes& attribute, const pb::uint32& size);
GetTimingAttributeExTimestampResponse get_timing_attribute_ex_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingTimestampAttributes& attribute);
GetTimingAttributeExUInt32Response get_timing_attribute_ex_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingUInt32Attributes& attribute);
GetTimingAttributeInt32Response get_timing_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingInt32Attributes& attribute);
GetTimingAttributeStringResponse get_timing_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingStringAttributes& attribute, const pb::uint32& size);
GetTimingAttributeTimestampResponse get_timing_attribute_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingTimestampAttributes& attribute);
GetTimingAttributeUInt32Response get_timing_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingUInt32Attributes& attribute);
GetTrigAttributeBoolResponse get_trig_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerBoolAttributes& attribute);
GetTrigAttributeDoubleResponse get_trig_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerDoubleAttributes& attribute);
GetTrigAttributeDoubleArrayResponse get_trig_attribute_double_array(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerDoubleArrayAttributes& attribute, const pb::uint32& size);
GetTrigAttributeInt32Response get_trig_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerInt32Attributes& attribute);
GetTrigAttributeInt32ArrayResponse get_trig_attribute_int32_array(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerInt32ArrayAttributes& attribute, const pb::uint32& size);
GetTrigAttributeStringResponse get_trig_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerStringAttributes& attribute, const pb::uint32& size);
GetTrigAttributeTimestampResponse get_trig_attribute_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerTimestampAttributes& attribute);
GetTrigAttributeUInt32Response get_trig_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerUInt32Attributes& attribute);
GetWriteAttributeBoolResponse get_write_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteBoolAttributes& attribute);
GetWriteAttributeDoubleResponse get_write_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteDoubleAttributes& attribute);
GetWriteAttributeInt32Response get_write_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteInt32Attributes& attribute);
GetWriteAttributeStringResponse get_write_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteStringAttributes& attribute, const pb::uint32& size);
GetWriteAttributeUInt32Response get_write_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteUInt32Attributes& attribute);
IsTaskDoneResponse is_task_done(const StubPtr& stub, const nidevice_grpc::Session& task);
LoadTaskResponse load_task(const StubPtr& stub, const pb::string& session_name);
ReadAnalogF64Response read_analog_f64(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadAnalogScalarF64Response read_analog_scalar_f64(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadBinaryI16Response read_binary_i16(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadBinaryI32Response read_binary_i32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadBinaryU16Response read_binary_u16(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadBinaryU32Response read_binary_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadCounterF64Response read_counter_f64(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const pb::uint32& array_size_in_samps);
ReadCounterF64ExResponse read_counter_f64_ex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadCounterScalarF64Response read_counter_scalar_f64(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadCounterScalarU32Response read_counter_scalar_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadCounterU32Response read_counter_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const pb::uint32& array_size_in_samps);
ReadCounterU32ExResponse read_counter_u32_ex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadCtrFreqResponse read_ctr_freq(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& interleaved, const pb::uint32& array_size_in_samps);
ReadCtrFreqScalarResponse read_ctr_freq_scalar(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadCtrTicksResponse read_ctr_ticks(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& interleaved, const pb::uint32& array_size_in_samps);
ReadCtrTicksScalarResponse read_ctr_ticks_scalar(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadCtrTimeResponse read_ctr_time(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& interleaved, const pb::uint32& array_size_in_samps);
ReadCtrTimeScalarResponse read_ctr_time_scalar(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadDigitalLinesResponse read_digital_lines(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_bytes);
ReadDigitalScalarU32Response read_digital_scalar_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
ReadDigitalU16Response read_digital_u16(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadDigitalU32Response read_digital_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadDigitalU8Response read_digital_u8(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const simple_variant<GroupBy, pb::int32>& fill_mode, const pb::uint32& array_size_in_samps);
ReadRawResponse read_raw(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const double& timeout, const pb::uint32& array_size_in_bytes);
std::unique_ptr<grpc::ClientReader<RegisterDoneEventResponse>> register_done_event(const StubPtr& stub, ::grpc::ClientContext& context, const nidevice_grpc::Session& task);
std::unique_ptr<grpc::ClientReader<RegisterEveryNSamplesEventResponse>> register_every_n_samples_event(const StubPtr& stub, ::grpc::ClientContext& context, const nidevice_grpc::Session& task, const simple_variant<EveryNSamplesEventType, pb::int32>& every_n_samples_event_type, const pb::uint32& n_samples);
std::unique_ptr<grpc::ClientReader<RegisterSignalEventResponse>> register_signal_event(const StubPtr& stub, ::grpc::ClientContext& context, const nidevice_grpc::Session& task, const simple_variant<Signal2, pb::int32>& signal_id);
RemoveCDAQSyncConnectionResponse remove_cdaq_sync_connection(const StubPtr& stub, const pb::string& port_list);
ReserveNetworkDeviceResponse reserve_network_device(const StubPtr& stub, const pb::string& device_name, const bool& override_reservation);
ResetBufferAttributeResponse reset_buffer_attribute(const StubPtr& stub, const nidevice_grpc::Session& task, const BufferResetAttributes& attribute);
ResetChanAttributeResponse reset_chan_attribute(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelResetAttributes& attribute);
ResetDeviceResponse reset_device(const StubPtr& stub, const pb::string& device_name);
ResetReadAttributeResponse reset_read_attribute(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadResetAttributes& attribute);
ResetTimingAttributeResponse reset_timing_attribute(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingResetAttributes& attribute);
ResetTimingAttributeExResponse reset_timing_attribute_ex(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingResetAttributes& attribute);
ResetTrigAttributeResponse reset_trig_attribute(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerResetAttributes& attribute);
ResetWriteAttributeResponse reset_write_attribute(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteResetAttributes& attribute);
SaveGlobalChanResponse save_global_chan(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_name, const pb::string& save_as, const pb::string& author, const simple_variant<SaveOptions, pb::uint32>& options);
SaveScaleResponse save_scale(const StubPtr& stub, const pb::string& scale_name, const pb::string& save_as, const pb::string& author, const simple_variant<SaveOptions, pb::uint32>& options);
SaveTaskResponse save_task(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& save_as, const pb::string& author, const simple_variant<SaveOptions, pb::uint32>& options);
SelfCalResponse self_cal(const StubPtr& stub, const pb::string& device_name);
SelfTestDeviceResponse self_test_device(const StubPtr& stub, const pb::string& device_name);
SetAIChanCalCalDateResponse set_ai_chan_cal_cal_date(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_name, const pb::uint32& year, const pb::uint32& month, const pb::uint32& day, const pb::uint32& hour, const pb::uint32& minute);
SetAIChanCalExpDateResponse set_ai_chan_cal_exp_date(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel_name, const pb::uint32& year, const pb::uint32& month, const pb::uint32& day, const pb::uint32& hour, const pb::uint32& minute);
SetAnalogPowerUpStatesResponse set_analog_power_up_states(const StubPtr& stub, const pb::string& device_name, const std::vector<AnalogPowerUpChannelsAndState>& power_up_states);
SetArmStartTrigTrigWhenResponse set_arm_start_trig_trig_when(const StubPtr& stub, const nidevice_grpc::Session& task, const google::protobuf::Timestamp& data);
SetBufferAttributeUInt32Response set_buffer_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const BufferUInt32Attributes& attribute, const pb::uint32& value);
SetChanAttributeBoolResponse set_chan_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelBoolAttributes& attribute, const bool& value);
SetChanAttributeDoubleResponse set_chan_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelDoubleAttributes& attribute, const double& value);
SetChanAttributeDoubleArrayResponse set_chan_attribute_double_array(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelDoubleArrayAttributes& attribute, const std::vector<double>& value, const pb::uint32& size);
SetChanAttributeInt32Response set_chan_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelInt32Attributes& attribute, const simple_variant<ChannelInt32AttributeValues, pb::int32>& value);
SetChanAttributeStringResponse set_chan_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelStringAttributes& attribute, const pb::string& value);
SetChanAttributeUInt32Response set_chan_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& channel, const ChannelUInt32Attributes& attribute, const pb::uint32& value);
SetDigitalLogicFamilyPowerUpStateResponse set_digital_logic_family_power_up_state(const StubPtr& stub, const pb::string& device_name, const simple_variant<LogicFamily, pb::int32>& logic_family);
SetDigitalPowerUpStatesResponse set_digital_power_up_states(const StubPtr& stub, const pb::string& device_name, const std::vector<DigitalPowerUpChannelsAndState>& power_up_states);
SetDigitalPullUpPullDownStatesResponse set_digital_pull_up_pull_down_states(const StubPtr& stub, const pb::string& device_name, const std::vector<DigitalPullUpPullDownChannelsAndState>& pull_up_pull_down_states);
SetFirstSampClkWhenResponse set_first_samp_clk_when(const StubPtr& stub, const nidevice_grpc::Session& task, const google::protobuf::Timestamp& data);
SetReadAttributeBoolResponse set_read_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadBoolAttributes& attribute, const bool& value);
SetReadAttributeDoubleResponse set_read_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadDoubleAttributes& attribute, const double& value);
SetReadAttributeInt32Response set_read_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadInt32Attributes& attribute, const simple_variant<ReadInt32AttributeValues, pb::int32>& value);
SetReadAttributeStringResponse set_read_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadStringAttributes& attribute, const pb::string& value);
SetReadAttributeUInt32Response set_read_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadUInt32Attributes& attribute, const pb::uint32& value);
SetReadAttributeUInt64Response set_read_attribute_uint64(const StubPtr& stub, const nidevice_grpc::Session& task, const ReadUInt64Attributes& attribute, const pb::uint64& value);
SetScaleAttributeDoubleResponse set_scale_attribute_double(const StubPtr& stub, const pb::string& scale_name, const ScaleDoubleAttributes& attribute, const double& value);
SetScaleAttributeDoubleArrayResponse set_scale_attribute_double_array(const StubPtr& stub, const pb::string& scale_name, const ScaleDoubleArrayAttributes& attribute, const std::vector<double>& value, const pb::uint32& size);
SetScaleAttributeInt32Response set_scale_attribute_int32(const StubPtr& stub, const pb::string& scale_name, const ScaleInt32Attributes& attribute, const simple_variant<ScaleInt32AttributeValues, pb::int32>& value);
SetScaleAttributeStringResponse set_scale_attribute_string(const StubPtr& stub, const pb::string& scale_name, const ScaleStringAttributes& attribute, const pb::string& value);
SetStartTrigTrigWhenResponse set_start_trig_trig_when(const StubPtr& stub, const nidevice_grpc::Session& task, const google::protobuf::Timestamp& data);
SetSyncPulseTimeWhenResponse set_sync_pulse_time_when(const StubPtr& stub, const nidevice_grpc::Session& task, const google::protobuf::Timestamp& data);
SetTimingAttributeBoolResponse set_timing_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingBoolAttributes& attribute, const bool& value);
SetTimingAttributeDoubleResponse set_timing_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingDoubleAttributes& attribute, const double& value);
SetTimingAttributeExBoolResponse set_timing_attribute_ex_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingBoolAttributes& attribute, const bool& value);
SetTimingAttributeExDoubleResponse set_timing_attribute_ex_double(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingDoubleAttributes& attribute, const double& value);
SetTimingAttributeExInt32Response set_timing_attribute_ex_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingInt32Attributes& attribute, const simple_variant<TimingInt32AttributeValues, pb::int32>& value);
SetTimingAttributeExStringResponse set_timing_attribute_ex_string(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingStringAttributes& attribute, const pb::string& value);
SetTimingAttributeExTimestampResponse set_timing_attribute_ex_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingTimestampAttributes& attribute, const google::protobuf::Timestamp& value);
SetTimingAttributeExUInt32Response set_timing_attribute_ex_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& device_names, const TimingUInt32Attributes& attribute, const pb::uint32& value);
SetTimingAttributeInt32Response set_timing_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingInt32Attributes& attribute, const simple_variant<TimingInt32AttributeValues, pb::int32>& value);
SetTimingAttributeStringResponse set_timing_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingStringAttributes& attribute, const pb::string& value);
SetTimingAttributeTimestampResponse set_timing_attribute_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingTimestampAttributes& attribute, const google::protobuf::Timestamp& value);
SetTimingAttributeUInt32Response set_timing_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const TimingUInt32Attributes& attribute, const pb::uint32& value);
SetTrigAttributeBoolResponse set_trig_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerBoolAttributes& attribute, const bool& value);
SetTrigAttributeDoubleResponse set_trig_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerDoubleAttributes& attribute, const double& value);
SetTrigAttributeDoubleArrayResponse set_trig_attribute_double_array(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerDoubleArrayAttributes& attribute, const std::vector<double>& value, const pb::uint32& size);
SetTrigAttributeInt32Response set_trig_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerInt32Attributes& attribute, const simple_variant<TriggerInt32AttributeValues, pb::int32>& value);
SetTrigAttributeInt32ArrayResponse set_trig_attribute_int32_array(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerInt32ArrayAttributes& attribute, const std::vector<pb::int32>& value, const pb::uint32& size);
SetTrigAttributeStringResponse set_trig_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerStringAttributes& attribute, const pb::string& value);
SetTrigAttributeTimestampResponse set_trig_attribute_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerTimestampAttributes& attribute, const google::protobuf::Timestamp& value);
SetTrigAttributeUInt32Response set_trig_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const TriggerUInt32Attributes& attribute, const pb::uint32& value);
SetWriteAttributeBoolResponse set_write_attribute_bool(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteBoolAttributes& attribute, const bool& value);
SetWriteAttributeDoubleResponse set_write_attribute_double(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteDoubleAttributes& attribute, const double& value);
SetWriteAttributeInt32Response set_write_attribute_int32(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteInt32Attributes& attribute, const simple_variant<WriteInt32AttributeValues, pb::int32>& value);
SetWriteAttributeStringResponse set_write_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteStringAttributes& attribute, const pb::string& value);
SetWriteAttributeUInt32Response set_write_attribute_uint32(const StubPtr& stub, const nidevice_grpc::Session& task, const WriteUInt32Attributes& attribute, const pb::uint32& value);
StartNewFileResponse start_new_file(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::string& file_path);
StartTaskResponse start_task(const StubPtr& stub, const nidevice_grpc::Session& task);
StopTaskResponse stop_task(const StubPtr& stub, const nidevice_grpc::Session& task);
TaskControlResponse task_control(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<TaskControlAction, pb::int32>& action);
TristateOutputTermResponse tristate_output_term(const StubPtr& stub, const pb::string& output_terminal);
UnreserveNetworkDeviceResponse unreserve_network_device(const StubPtr& stub, const pb::string& device_name);
WaitForNextSampleClockResponse wait_for_next_sample_clock(const StubPtr& stub, const nidevice_grpc::Session& task, const double& timeout);
WaitForValidTimestampResponse wait_for_valid_timestamp(const StubPtr& stub, const nidevice_grpc::Session& task, const simple_variant<TimestampEvent, pb::int32>& timestamp_event, const double& timeout);
WaitUntilTaskDoneResponse wait_until_task_done(const StubPtr& stub, const nidevice_grpc::Session& task, const double& time_to_wait);
WriteAnalogF64Response write_analog_f64(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<double>& write_array);
WriteAnalogScalarF64Response write_analog_scalar_f64(const StubPtr& stub, const nidevice_grpc::Session& task, const bool& auto_start, const double& timeout, const double& value);
WriteBinaryI16Response write_binary_i16(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::int32>& write_array);
WriteBinaryI32Response write_binary_i32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::int32>& write_array);
WriteBinaryU16Response write_binary_u16(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::uint32>& write_array);
WriteBinaryU32Response write_binary_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::uint32>& write_array);
WriteCtrFreqResponse write_ctr_freq(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<double>& frequency, const std::vector<double>& duty_cycle);
WriteCtrFreqScalarResponse write_ctr_freq_scalar(const StubPtr& stub, const nidevice_grpc::Session& task, const bool& auto_start, const double& timeout, const double& frequency, const double& duty_cycle);
WriteCtrTicksResponse write_ctr_ticks(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::uint32>& high_ticks, const std::vector<pb::uint32>& low_ticks);
WriteCtrTicksScalarResponse write_ctr_ticks_scalar(const StubPtr& stub, const nidevice_grpc::Session& task, const bool& auto_start, const double& timeout, const pb::uint32& high_ticks, const pb::uint32& low_ticks);
WriteCtrTimeResponse write_ctr_time(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<double>& high_time, const std::vector<double>& low_time);
WriteCtrTimeScalarResponse write_ctr_time_scalar(const StubPtr& stub, const nidevice_grpc::Session& task, const bool& auto_start, const double& timeout, const double& high_time, const double& low_time);
WriteDigitalLinesResponse write_digital_lines(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const pb::string& write_array);
WriteDigitalScalarU32Response write_digital_scalar_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const bool& auto_start, const double& timeout, const pb::uint32& value);
WriteDigitalU16Response write_digital_u16(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::uint32>& write_array);
WriteDigitalU32Response write_digital_u32(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const std::vector<pb::uint32>& write_array);
WriteDigitalU8Response write_digital_u8(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps_per_chan, const bool& auto_start, const double& timeout, const simple_variant<GroupBy, pb::int32>& data_layout, const pb::string& write_array);
WriteRawResponse write_raw(const StubPtr& stub, const nidevice_grpc::Session& task, const pb::int32& num_samps, const bool& auto_start, const double& timeout, const pb::string& write_array);
WriteToTEDSFromArrayResponse write_to_teds_from_array(const StubPtr& stub, const pb::string& physical_channel, const pb::string& bit_stream, const pb::uint32& array_size, const simple_variant<WriteBasicTEDSOptions, pb::int32>& basic_teds_options);
WriteToTEDSFromFileResponse write_to_teds_from_file(const StubPtr& stub, const pb::string& physical_channel, const pb::string& file_path, const simple_variant<WriteBasicTEDSOptions, pb::int32>& basic_teds_options);

} // namespace nidaqmx_grpc::experimental::client

#endif /* NIDAQMX_GRPC_CLIENT_H */
