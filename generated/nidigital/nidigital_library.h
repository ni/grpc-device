//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-Digital Pattern Driver
//---------------------------------------------------------------------
#ifndef NIDIGITAL_GRPC_LIBRARY_H
#define NIDIGITAL_GRPC_LIBRARY_H

#include "nidigital_library_interface.h"

#include <server/shared_library.h>

namespace nidigital_grpc {

class NiDigitalLibrary : public nidigital_grpc::NiDigitalLibraryInterface {
 public:
  NiDigitalLibrary();
  virtual ~NiDigitalLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  ViStatus Abort(ViSession vi);
  ViStatus AbortKeepAlive(ViSession vi);
  ViStatus ApplyLevelsAndTiming(ViSession vi, ViConstString siteList, ViConstString levelsSheet, ViConstString timingSheet, ViConstString initialStateHighPins, ViConstString initialStateLowPins, ViConstString initialStateTristatePins);
  ViStatus ApplyTDROffsets(ViSession vi, ViConstString channelList, ViInt32 numOffsets, ViReal64 offsets[]);
  ViStatus BurstPattern(ViSession vi, ViConstString siteList, ViConstString startLabel, ViBoolean selectDigitalFunction, ViBoolean waitUntilDone, ViReal64 timeout);
  ViStatus ClockGeneratorAbort(ViSession vi, ViConstString channelList);
  ViStatus ClockGeneratorGenerateClock(ViSession vi, ViConstString channelList, ViReal64 frequency, ViBoolean selectDigitalFunction);
  ViStatus ClockGeneratorInitiate(ViSession vi, ViConstString channelList);
  ViStatus Close(ViSession vi);
  ViStatus Commit(ViSession vi);
  ViStatus ConfigureActiveLoadLevels(ViSession vi, ViConstString channelList, ViReal64 iol, ViReal64 ioh, ViReal64 vcom);
  ViStatus ConfigureCycleNumberHistoryRAMTrigger(ViSession vi, ViInt64 cycleNumber, ViInt32 pretriggerSamples);
  ViStatus ConfigureDigitalEdgeConditionalJumpTrigger(ViSession vi, ViConstString triggerIdentifier, ViConstString source, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString source, ViInt32 edge);
  ViStatus ConfigureFirstFailureHistoryRAMTrigger(ViSession vi, ViInt32 pretriggerSamples);
  ViStatus ConfigureHistoryRAMCyclesToAcquire(ViSession vi, ViInt32 cyclesToAcquire);
  ViStatus ConfigurePatternBurstSites(ViSession vi, ViConstString siteList);
  ViStatus ConfigurePatternLabelHistoryRAMTrigger(ViSession vi, ViConstString label, ViInt64 vectorOffset, ViInt64 cycleOffset, ViInt32 pretriggerSamples);
  ViStatus ConfigureStartLabel(ViSession vi, ViConstString label);
  ViStatus ConfigureSoftwareEdgeConditionalJumpTrigger(ViSession vi, ViConstString triggerIdentifier);
  ViStatus ConfigureSoftwareEdgeStartTrigger(ViSession vi);
  ViStatus ConfigureTerminationMode(ViSession vi, ViConstString channelList, ViInt32 mode);
  ViStatus ConfigureTimeSetCompareEdgesStrobe(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViReal64 strobeEdge);
  ViStatus ConfigureTimeSetCompareEdgesStrobe2x(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViReal64 strobeEdge, ViReal64 strobe2Edge);
  ViStatus ConfigureTimeSetDriveEdges(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 format, ViReal64 driveOnEdge, ViReal64 driveDataEdge, ViReal64 driveReturnEdge, ViReal64 driveOffEdge);
  ViStatus ConfigureTimeSetDriveEdges2x(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 format, ViReal64 driveOnEdge, ViReal64 driveDataEdge, ViReal64 driveReturnEdge, ViReal64 driveOffEdge, ViReal64 driveData2Edge, ViReal64 driveReturn2Edge);
  ViStatus ConfigureTimeSetDriveFormat(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 driveFormat);
  ViStatus ConfigureTimeSetEdge(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 edge, ViReal64 time);
  ViStatus ConfigureTimeSetEdgeMultiplier(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 edgeMultiplier);
  ViStatus ConfigureTimeSetPeriod(ViSession vi, ViConstString timeSetName, ViReal64 period);
  ViStatus ConfigureVoltageLevels(ViSession vi, ViConstString channelList, ViReal64 vil, ViReal64 vih, ViReal64 vol, ViReal64 voh, ViReal64 vterm);
  ViStatus CreateCaptureWaveformFromFileDigicapture(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath);
  ViStatus CreateCaptureWaveformParallel(ViSession vi, ViConstString pinList, ViConstString waveformName);
  ViStatus CreateCaptureWaveformSerial(ViSession vi, ViConstString pinList, ViConstString waveformName, ViUInt32 sampleWidth, ViInt32 bitOrder);
  ViStatus CreateChannelMap(ViSession vi, ViInt32 numSites);
  ViStatus CreateSourceWaveformFromFileTDMS(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath, ViBoolean writeWaveformData);
  ViStatus CreatePinMap(ViSession vi, ViConstString dutPinList, ViConstString systemPinList);
  ViStatus CreatePinGroup(ViSession vi, ViConstString pinGroupName, ViConstString pinList);
  ViStatus CreateSourceWaveformParallel(ViSession vi, ViConstString pinList, ViConstString waveformName, ViInt32 dataMapping);
  ViStatus CreateSourceWaveformSerial(ViSession vi, ViConstString pinList, ViConstString waveformName, ViInt32 dataMapping, ViUInt32 sampleWidth, ViInt32 bitOrder);
  ViStatus CreateTimeSet(ViSession vi, ViConstString name);
  ViStatus DeleteAllTimeSets(ViSession vi);
  ViStatus DisableConditionalJumpTrigger(ViSession vi, ViConstString triggerIdentifier);
  ViStatus DisableSites(ViSession vi, ViConstString siteList);
  ViStatus DisableStartTrigger(ViSession vi);
  ViStatus EnableSites(ViSession vi, ViConstString siteList);
  ViStatus EndChannelMap(ViSession vi);
  ViStatus ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  ViStatus ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal);
  ViStatus FetchHistoryRAMCycleInformation(ViSession vi, ViConstString site, ViInt64 sampleIndex, ViInt32* patternIndex, ViInt32* timeSetIndex, ViInt64* vectorNumber, ViInt64* cycleNumber, ViInt32* numDutCycles);
  ViStatus FetchHistoryRAMScanCycleNumber(ViSession vi, ViConstString site, ViInt64 sampleIndex, ViInt64* scanCycleNumber);
  ViStatus FrequencyCounterConfigureMeasurementMode(ViSession vi, ViInt32 measurementMode);
  ViStatus FrequencyCounterConfigureMeasurementTime(ViSession vi, ViConstString channelList, ViReal64 measurementTime);
  ViStatus GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean* value);
  ViStatus GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32* value);
  ViStatus GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt64* value);
  ViStatus GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64* value);
  ViStatus GetAttributeViSession(ViSession vi, ViConstString channelList, ViAttr attribute, ViSession* value);
  ViStatus GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 bufferSize, ViChar value[]);
  ViStatus GetChannelNameFromString(ViSession vi, ViConstString indices, ViInt32 nameBufferSize, ViChar names[]);
  ViStatus GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[]);
  ViStatus GetHistoryRAMSampleCount(ViSession vi, ViConstString site, ViInt64* sampleCount);
  ViStatus GetPatternName(ViSession vi, ViInt32 patternIndex, ViInt32 nameBufferSize, ViChar name[]);
  ViStatus GetPatternPinList(ViSession vi, ViConstString startLabel, ViInt32 pinListBufferSize, ViChar pinList[]);
  ViStatus GetPinName(ViSession vi, ViInt32 pinIndex, ViInt32 nameBufferSize, ViChar name[]);
  ViStatus GetTimeSetDriveFormat(ViSession vi, ViConstString pin, ViConstString timeSetName, ViInt32* format);
  ViStatus GetTimeSetEdge(ViSession vi, ViConstString pin, ViConstString timeSetName, ViInt32 edge, ViReal64* time);
  ViStatus GetTimeSetEdgeMultiplier(ViSession vi, ViConstString pin, ViConstString timeSetName, ViInt32* edgeMultiplier);
  ViStatus GetTimeSetName(ViSession vi, ViInt32 timeSetIndex, ViInt32 nameBufferSize, ViChar name[]);
  ViStatus GetTimeSetPeriod(ViSession vi, ViConstString timeSetName, ViReal64* period);
  ViStatus Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi);
  ViStatus InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* vi);
  ViStatus Initiate(ViSession vi);
  ViStatus IsDone(ViSession vi, ViBoolean* done);
  ViStatus IsSiteEnabled(ViSession vi, ViConstString site, ViBoolean* enable);
  ViStatus LoadLevels(ViSession vi, ViConstString filePath);
  ViStatus LoadPattern(ViSession vi, ViConstString filePath);
  ViStatus LoadPinMap(ViSession vi, ViConstString filePath);
  ViStatus LoadSpecifications(ViSession vi, ViConstString filePath);
  ViStatus LoadTiming(ViSession vi, ViConstString filePath);
  ViStatus LockSession(ViSession vi, ViBoolean* callerHasLock);
  ViStatus MapPinToChannel(ViSession vi, ViConstString pin, ViInt32 site, ViConstString channel);
  ViStatus PPMUConfigureApertureTime(ViSession vi, ViConstString channelList, ViReal64 apertureTime, ViInt32 units);
  ViStatus PPMUConfigureCurrentLevel(ViSession vi, ViConstString channelList, ViReal64 currentLevel);
  ViStatus PPMUConfigureCurrentLevelRange(ViSession vi, ViConstString channelList, ViReal64 range);
  ViStatus PPMUConfigureCurrentLimit(ViSession vi, ViConstString channelList, ViInt32 behavior, ViReal64 limit);
  ViStatus PPMUConfigureCurrentLimitRange(ViSession vi, ViConstString channelList, ViReal64 range);
  ViStatus PPMUConfigureOutputFunction(ViSession vi, ViConstString channelList, ViInt32 outputFunction);
  ViStatus PPMUConfigureVoltageLevel(ViSession vi, ViConstString channelList, ViReal64 voltageLevel);
  ViStatus PPMUConfigureVoltageLimits(ViSession vi, ViConstString channelList, ViReal64 lowerVoltageLimit, ViReal64 upperVoltageLimit);
  ViStatus PPMUSource(ViSession vi, ViConstString channelList);
  ViStatus ReadSequencerFlag(ViSession vi, ViConstString flag, ViBoolean* value);
  ViStatus ReadSequencerRegister(ViSession vi, ViConstString reg, ViInt32* value);
  ViStatus Reset(ViSession vi);
  ViStatus ResetDevice(ViSession vi);
  ViStatus SelfCalibrate(ViSession vi);
  ViStatus SelfTest(ViSession vi, ViInt16* testResult, ViChar testMessage[2048]);
  ViStatus SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger, ViConstString triggerIdentifier);
  ViStatus SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean value);
  ViStatus SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 value);
  ViStatus SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt64 value);
  ViStatus SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64 value);
  ViStatus SetAttributeViSession(ViSession vi, ViConstString channelList, ViAttr attribute, ViSession value);
  ViStatus SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attribute, ViConstString value);
  ViStatus UnloadAllPatterns(ViSession vi, ViBoolean unloadKeepAlivePattern);
  ViStatus UnloadSpecifications(ViSession vi, ViConstString filePath);
  ViStatus UnlockSession(ViSession vi, ViBoolean* callerHasLock);
  ViStatus WaitUntilDone(ViSession vi, ViReal64 timeout);
  ViStatus WriteSequencerFlag(ViSession vi, ViConstString flag, ViBoolean value);
  ViStatus WriteSequencerRegister(ViSession vi, ViConstString reg, ViInt32 value);
  ViStatus WriteSourceWaveformDataFromFileTDMS(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath);

 private:
  using AbortPtr = ViStatus (*)(ViSession vi);
  using AbortKeepAlivePtr = ViStatus (*)(ViSession vi);
  using ApplyLevelsAndTimingPtr = ViStatus (*)(ViSession vi, ViConstString siteList, ViConstString levelsSheet, ViConstString timingSheet, ViConstString initialStateHighPins, ViConstString initialStateLowPins, ViConstString initialStateTristatePins);
  using ApplyTDROffsetsPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViInt32 numOffsets, ViReal64 offsets[]);
  using BurstPatternPtr = ViStatus (*)(ViSession vi, ViConstString siteList, ViConstString startLabel, ViBoolean selectDigitalFunction, ViBoolean waitUntilDone, ViReal64 timeout);
  using ClockGeneratorAbortPtr = ViStatus (*)(ViSession vi, ViConstString channelList);
  using ClockGeneratorGenerateClockPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 frequency, ViBoolean selectDigitalFunction);
  using ClockGeneratorInitiatePtr = ViStatus (*)(ViSession vi, ViConstString channelList);
  using ClosePtr = ViStatus (*)(ViSession vi);
  using CommitPtr = ViStatus (*)(ViSession vi);
  using ConfigureActiveLoadLevelsPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 iol, ViReal64 ioh, ViReal64 vcom);
  using ConfigureCycleNumberHistoryRAMTriggerPtr = ViStatus (*)(ViSession vi, ViInt64 cycleNumber, ViInt32 pretriggerSamples);
  using ConfigureDigitalEdgeConditionalJumpTriggerPtr = ViStatus (*)(ViSession vi, ViConstString triggerIdentifier, ViConstString source, ViInt32 edge);
  using ConfigureDigitalEdgeStartTriggerPtr = ViStatus (*)(ViSession vi, ViConstString source, ViInt32 edge);
  using ConfigureFirstFailureHistoryRAMTriggerPtr = ViStatus (*)(ViSession vi, ViInt32 pretriggerSamples);
  using ConfigureHistoryRAMCyclesToAcquirePtr = ViStatus (*)(ViSession vi, ViInt32 cyclesToAcquire);
  using ConfigurePatternBurstSitesPtr = ViStatus (*)(ViSession vi, ViConstString siteList);
  using ConfigurePatternLabelHistoryRAMTriggerPtr = ViStatus (*)(ViSession vi, ViConstString label, ViInt64 vectorOffset, ViInt64 cycleOffset, ViInt32 pretriggerSamples);
  using ConfigureStartLabelPtr = ViStatus (*)(ViSession vi, ViConstString label);
  using ConfigureSoftwareEdgeConditionalJumpTriggerPtr = ViStatus (*)(ViSession vi, ViConstString triggerIdentifier);
  using ConfigureSoftwareEdgeStartTriggerPtr = ViStatus (*)(ViSession vi);
  using ConfigureTerminationModePtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViInt32 mode);
  using ConfigureTimeSetCompareEdgesStrobePtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViReal64 strobeEdge);
  using ConfigureTimeSetCompareEdgesStrobe2xPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViReal64 strobeEdge, ViReal64 strobe2Edge);
  using ConfigureTimeSetDriveEdgesPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 format, ViReal64 driveOnEdge, ViReal64 driveDataEdge, ViReal64 driveReturnEdge, ViReal64 driveOffEdge);
  using ConfigureTimeSetDriveEdges2xPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 format, ViReal64 driveOnEdge, ViReal64 driveDataEdge, ViReal64 driveReturnEdge, ViReal64 driveOffEdge, ViReal64 driveData2Edge, ViReal64 driveReturn2Edge);
  using ConfigureTimeSetDriveFormatPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 driveFormat);
  using ConfigureTimeSetEdgePtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 edge, ViReal64 time);
  using ConfigureTimeSetEdgeMultiplierPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString timeSetName, ViInt32 edgeMultiplier);
  using ConfigureTimeSetPeriodPtr = ViStatus (*)(ViSession vi, ViConstString timeSetName, ViReal64 period);
  using ConfigureVoltageLevelsPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 vil, ViReal64 vih, ViReal64 vol, ViReal64 voh, ViReal64 vterm);
  using CreateCaptureWaveformFromFileDigicapturePtr = ViStatus (*)(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath);
  using CreateCaptureWaveformParallelPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString waveformName);
  using CreateCaptureWaveformSerialPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString waveformName, ViUInt32 sampleWidth, ViInt32 bitOrder);
  using CreateChannelMapPtr = ViStatus (*)(ViSession vi, ViInt32 numSites);
  using CreateSourceWaveformFromFileTDMSPtr = ViStatus (*)(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath, ViBoolean writeWaveformData);
  using CreatePinMapPtr = ViStatus (*)(ViSession vi, ViConstString dutPinList, ViConstString systemPinList);
  using CreatePinGroupPtr = ViStatus (*)(ViSession vi, ViConstString pinGroupName, ViConstString pinList);
  using CreateSourceWaveformParallelPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString waveformName, ViInt32 dataMapping);
  using CreateSourceWaveformSerialPtr = ViStatus (*)(ViSession vi, ViConstString pinList, ViConstString waveformName, ViInt32 dataMapping, ViUInt32 sampleWidth, ViInt32 bitOrder);
  using CreateTimeSetPtr = ViStatus (*)(ViSession vi, ViConstString name);
  using DeleteAllTimeSetsPtr = ViStatus (*)(ViSession vi);
  using DisableConditionalJumpTriggerPtr = ViStatus (*)(ViSession vi, ViConstString triggerIdentifier);
  using DisableSitesPtr = ViStatus (*)(ViSession vi, ViConstString siteList);
  using DisableStartTriggerPtr = ViStatus (*)(ViSession vi);
  using EnableSitesPtr = ViStatus (*)(ViSession vi, ViConstString siteList);
  using EndChannelMapPtr = ViStatus (*)(ViSession vi);
  using ErrorMessagePtr = ViStatus (*)(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  using ExportSignalPtr = ViStatus (*)(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal);
  using FetchHistoryRAMCycleInformationPtr = ViStatus (*)(ViSession vi, ViConstString site, ViInt64 sampleIndex, ViInt32* patternIndex, ViInt32* timeSetIndex, ViInt64* vectorNumber, ViInt64* cycleNumber, ViInt32* numDutCycles);
  using FetchHistoryRAMScanCycleNumberPtr = ViStatus (*)(ViSession vi, ViConstString site, ViInt64 sampleIndex, ViInt64* scanCycleNumber);
  using FrequencyCounterConfigureMeasurementModePtr = ViStatus (*)(ViSession vi, ViInt32 measurementMode);
  using FrequencyCounterConfigureMeasurementTimePtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 measurementTime);
  using GetAttributeViBooleanPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean* value);
  using GetAttributeViInt32Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32* value);
  using GetAttributeViInt64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt64* value);
  using GetAttributeViReal64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64* value);
  using GetAttributeViSessionPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViAttr attribute, ViSession* value);
  using GetAttributeViStringPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 bufferSize, ViChar value[]);
  using GetChannelNameFromStringPtr = ViStatus (*)(ViSession vi, ViConstString indices, ViInt32 nameBufferSize, ViChar names[]);
  using GetErrorPtr = ViStatus (*)(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[]);
  using GetHistoryRAMSampleCountPtr = ViStatus (*)(ViSession vi, ViConstString site, ViInt64* sampleCount);
  using GetPatternNamePtr = ViStatus (*)(ViSession vi, ViInt32 patternIndex, ViInt32 nameBufferSize, ViChar name[]);
  using GetPatternPinListPtr = ViStatus (*)(ViSession vi, ViConstString startLabel, ViInt32 pinListBufferSize, ViChar pinList[]);
  using GetPinNamePtr = ViStatus (*)(ViSession vi, ViInt32 pinIndex, ViInt32 nameBufferSize, ViChar name[]);
  using GetTimeSetDriveFormatPtr = ViStatus (*)(ViSession vi, ViConstString pin, ViConstString timeSetName, ViInt32* format);
  using GetTimeSetEdgePtr = ViStatus (*)(ViSession vi, ViConstString pin, ViConstString timeSetName, ViInt32 edge, ViReal64* time);
  using GetTimeSetEdgeMultiplierPtr = ViStatus (*)(ViSession vi, ViConstString pin, ViConstString timeSetName, ViInt32* edgeMultiplier);
  using GetTimeSetNamePtr = ViStatus (*)(ViSession vi, ViInt32 timeSetIndex, ViInt32 nameBufferSize, ViChar name[]);
  using GetTimeSetPeriodPtr = ViStatus (*)(ViSession vi, ViConstString timeSetName, ViReal64* period);
  using InitPtr = ViStatus (*)(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi);
  using InitWithOptionsPtr = ViStatus (*)(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* vi);
  using InitiatePtr = ViStatus (*)(ViSession vi);
  using IsDonePtr = ViStatus (*)(ViSession vi, ViBoolean* done);
  using IsSiteEnabledPtr = ViStatus (*)(ViSession vi, ViConstString site, ViBoolean* enable);
  using LoadLevelsPtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using LoadPatternPtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using LoadPinMapPtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using LoadSpecificationsPtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using LoadTimingPtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using LockSessionPtr = ViStatus (*)(ViSession vi, ViBoolean* callerHasLock);
  using MapPinToChannelPtr = ViStatus (*)(ViSession vi, ViConstString pin, ViInt32 site, ViConstString channel);
  using PPMUConfigureApertureTimePtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 apertureTime, ViInt32 units);
  using PPMUConfigureCurrentLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 currentLevel);
  using PPMUConfigureCurrentLevelRangePtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 range);
  using PPMUConfigureCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViInt32 behavior, ViReal64 limit);
  using PPMUConfigureCurrentLimitRangePtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 range);
  using PPMUConfigureOutputFunctionPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViInt32 outputFunction);
  using PPMUConfigureVoltageLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 voltageLevel);
  using PPMUConfigureVoltageLimitsPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViReal64 lowerVoltageLimit, ViReal64 upperVoltageLimit);
  using PPMUSourcePtr = ViStatus (*)(ViSession vi, ViConstString channelList);
  using ReadSequencerFlagPtr = ViStatus (*)(ViSession vi, ViConstString flag, ViBoolean* value);
  using ReadSequencerRegisterPtr = ViStatus (*)(ViSession vi, ViConstString reg, ViInt32* value);
  using ResetPtr = ViStatus (*)(ViSession vi);
  using ResetDevicePtr = ViStatus (*)(ViSession vi);
  using SelfCalibratePtr = ViStatus (*)(ViSession vi);
  using SelfTestPtr = ViStatus (*)(ViSession vi, ViInt16* testResult, ViChar testMessage[2048]);
  using SendSoftwareEdgeTriggerPtr = ViStatus (*)(ViSession vi, ViInt32 trigger, ViConstString triggerIdentifier);
  using SetAttributeViBooleanPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean value);
  using SetAttributeViInt32Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 value);
  using SetAttributeViInt64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViInt64 value);
  using SetAttributeViReal64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64 value);
  using SetAttributeViSessionPtr = ViStatus (*)(ViSession vi, ViConstString channelList, ViAttr attribute, ViSession value);
  using SetAttributeViStringPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attribute, ViConstString value);
  using UnloadAllPatternsPtr = ViStatus (*)(ViSession vi, ViBoolean unloadKeepAlivePattern);
  using UnloadSpecificationsPtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using UnlockSessionPtr = ViStatus (*)(ViSession vi, ViBoolean* callerHasLock);
  using WaitUntilDonePtr = ViStatus (*)(ViSession vi, ViReal64 timeout);
  using WriteSequencerFlagPtr = ViStatus (*)(ViSession vi, ViConstString flag, ViBoolean value);
  using WriteSequencerRegisterPtr = ViStatus (*)(ViSession vi, ViConstString reg, ViInt32 value);
  using WriteSourceWaveformDataFromFileTDMSPtr = ViStatus (*)(ViSession vi, ViConstString waveformName, ViConstString waveformFilePath);

  typedef struct FunctionPointers {
    AbortPtr Abort;
    AbortKeepAlivePtr AbortKeepAlive;
    ApplyLevelsAndTimingPtr ApplyLevelsAndTiming;
    ApplyTDROffsetsPtr ApplyTDROffsets;
    BurstPatternPtr BurstPattern;
    ClockGeneratorAbortPtr ClockGeneratorAbort;
    ClockGeneratorGenerateClockPtr ClockGeneratorGenerateClock;
    ClockGeneratorInitiatePtr ClockGeneratorInitiate;
    ClosePtr Close;
    CommitPtr Commit;
    ConfigureActiveLoadLevelsPtr ConfigureActiveLoadLevels;
    ConfigureCycleNumberHistoryRAMTriggerPtr ConfigureCycleNumberHistoryRAMTrigger;
    ConfigureDigitalEdgeConditionalJumpTriggerPtr ConfigureDigitalEdgeConditionalJumpTrigger;
    ConfigureDigitalEdgeStartTriggerPtr ConfigureDigitalEdgeStartTrigger;
    ConfigureFirstFailureHistoryRAMTriggerPtr ConfigureFirstFailureHistoryRAMTrigger;
    ConfigureHistoryRAMCyclesToAcquirePtr ConfigureHistoryRAMCyclesToAcquire;
    ConfigurePatternBurstSitesPtr ConfigurePatternBurstSites;
    ConfigurePatternLabelHistoryRAMTriggerPtr ConfigurePatternLabelHistoryRAMTrigger;
    ConfigureStartLabelPtr ConfigureStartLabel;
    ConfigureSoftwareEdgeConditionalJumpTriggerPtr ConfigureSoftwareEdgeConditionalJumpTrigger;
    ConfigureSoftwareEdgeStartTriggerPtr ConfigureSoftwareEdgeStartTrigger;
    ConfigureTerminationModePtr ConfigureTerminationMode;
    ConfigureTimeSetCompareEdgesStrobePtr ConfigureTimeSetCompareEdgesStrobe;
    ConfigureTimeSetCompareEdgesStrobe2xPtr ConfigureTimeSetCompareEdgesStrobe2x;
    ConfigureTimeSetDriveEdgesPtr ConfigureTimeSetDriveEdges;
    ConfigureTimeSetDriveEdges2xPtr ConfigureTimeSetDriveEdges2x;
    ConfigureTimeSetDriveFormatPtr ConfigureTimeSetDriveFormat;
    ConfigureTimeSetEdgePtr ConfigureTimeSetEdge;
    ConfigureTimeSetEdgeMultiplierPtr ConfigureTimeSetEdgeMultiplier;
    ConfigureTimeSetPeriodPtr ConfigureTimeSetPeriod;
    ConfigureVoltageLevelsPtr ConfigureVoltageLevels;
    CreateCaptureWaveformFromFileDigicapturePtr CreateCaptureWaveformFromFileDigicapture;
    CreateCaptureWaveformParallelPtr CreateCaptureWaveformParallel;
    CreateCaptureWaveformSerialPtr CreateCaptureWaveformSerial;
    CreateChannelMapPtr CreateChannelMap;
    CreateSourceWaveformFromFileTDMSPtr CreateSourceWaveformFromFileTDMS;
    CreatePinMapPtr CreatePinMap;
    CreatePinGroupPtr CreatePinGroup;
    CreateSourceWaveformParallelPtr CreateSourceWaveformParallel;
    CreateSourceWaveformSerialPtr CreateSourceWaveformSerial;
    CreateTimeSetPtr CreateTimeSet;
    DeleteAllTimeSetsPtr DeleteAllTimeSets;
    DisableConditionalJumpTriggerPtr DisableConditionalJumpTrigger;
    DisableSitesPtr DisableSites;
    DisableStartTriggerPtr DisableStartTrigger;
    EnableSitesPtr EnableSites;
    EndChannelMapPtr EndChannelMap;
    ErrorMessagePtr ErrorMessage;
    ExportSignalPtr ExportSignal;
    FetchHistoryRAMCycleInformationPtr FetchHistoryRAMCycleInformation;
    FetchHistoryRAMScanCycleNumberPtr FetchHistoryRAMScanCycleNumber;
    FrequencyCounterConfigureMeasurementModePtr FrequencyCounterConfigureMeasurementMode;
    FrequencyCounterConfigureMeasurementTimePtr FrequencyCounterConfigureMeasurementTime;
    GetAttributeViBooleanPtr GetAttributeViBoolean;
    GetAttributeViInt32Ptr GetAttributeViInt32;
    GetAttributeViInt64Ptr GetAttributeViInt64;
    GetAttributeViReal64Ptr GetAttributeViReal64;
    GetAttributeViSessionPtr GetAttributeViSession;
    GetAttributeViStringPtr GetAttributeViString;
    GetChannelNameFromStringPtr GetChannelNameFromString;
    GetErrorPtr GetError;
    GetHistoryRAMSampleCountPtr GetHistoryRAMSampleCount;
    GetPatternNamePtr GetPatternName;
    GetPatternPinListPtr GetPatternPinList;
    GetPinNamePtr GetPinName;
    GetTimeSetDriveFormatPtr GetTimeSetDriveFormat;
    GetTimeSetEdgePtr GetTimeSetEdge;
    GetTimeSetEdgeMultiplierPtr GetTimeSetEdgeMultiplier;
    GetTimeSetNamePtr GetTimeSetName;
    GetTimeSetPeriodPtr GetTimeSetPeriod;
    InitPtr Init;
    InitWithOptionsPtr InitWithOptions;
    InitiatePtr Initiate;
    IsDonePtr IsDone;
    IsSiteEnabledPtr IsSiteEnabled;
    LoadLevelsPtr LoadLevels;
    LoadPatternPtr LoadPattern;
    LoadPinMapPtr LoadPinMap;
    LoadSpecificationsPtr LoadSpecifications;
    LoadTimingPtr LoadTiming;
    LockSessionPtr LockSession;
    MapPinToChannelPtr MapPinToChannel;
    PPMUConfigureApertureTimePtr PPMUConfigureApertureTime;
    PPMUConfigureCurrentLevelPtr PPMUConfigureCurrentLevel;
    PPMUConfigureCurrentLevelRangePtr PPMUConfigureCurrentLevelRange;
    PPMUConfigureCurrentLimitPtr PPMUConfigureCurrentLimit;
    PPMUConfigureCurrentLimitRangePtr PPMUConfigureCurrentLimitRange;
    PPMUConfigureOutputFunctionPtr PPMUConfigureOutputFunction;
    PPMUConfigureVoltageLevelPtr PPMUConfigureVoltageLevel;
    PPMUConfigureVoltageLimitsPtr PPMUConfigureVoltageLimits;
    PPMUSourcePtr PPMUSource;
    ReadSequencerFlagPtr ReadSequencerFlag;
    ReadSequencerRegisterPtr ReadSequencerRegister;
    ResetPtr Reset;
    ResetDevicePtr ResetDevice;
    SelfCalibratePtr SelfCalibrate;
    SelfTestPtr SelfTest;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeViBooleanPtr SetAttributeViBoolean;
    SetAttributeViInt32Ptr SetAttributeViInt32;
    SetAttributeViInt64Ptr SetAttributeViInt64;
    SetAttributeViReal64Ptr SetAttributeViReal64;
    SetAttributeViSessionPtr SetAttributeViSession;
    SetAttributeViStringPtr SetAttributeViString;
    UnloadAllPatternsPtr UnloadAllPatterns;
    UnloadSpecificationsPtr UnloadSpecifications;
    UnlockSessionPtr UnlockSession;
    WaitUntilDonePtr WaitUntilDone;
    WriteSequencerFlagPtr WriteSequencerFlag;
    WriteSequencerRegisterPtr WriteSequencerRegister;
    WriteSourceWaveformDataFromFileTDMSPtr WriteSourceWaveformDataFromFileTDMS;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidigital_grpc

#endif  // NIDIGITAL_GRPC_LIBRARY_H
