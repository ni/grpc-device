
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFSG-RESTRICTED Metadata
//---------------------------------------------------------------------
#ifndef NIRFSG_RESTRICTED_GRPC_SERVICE_H
#define NIRFSG_RESTRICTED_GRPC_SERVICE_H

#include <nirfsg_restricted.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfsg_restricted_library_interface.h"

namespace nirfsg_restricted_grpc {

struct NiRFSGRestrictedFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiRFSGRestrictedFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiRFSGRestrictedService final : public NiRFSGRestricted::Service {
public:
  using LibrarySharedPtr = std::shared_ptr<NiRFSGRestrictedLibraryInterface>;
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<ViSession>>;

  NiRFSGRestrictedService(
    LibrarySharedPtr library,
    ResourceRepositorySharedPtr resource_repository,
    const NiRFSGRestrictedFeatureToggles& feature_toggles = {});
  virtual ~NiRFSGRestrictedService();

  ::grpc::Status GetError(::grpc::ServerContext* context, const GetErrorRequest* request, GetErrorResponse* response) override;
  ::grpc::Status ErrorMessage(::grpc::ServerContext* context, const ErrorMessageRequest* request, ErrorMessageResponse* response) override;
  ::grpc::Status CreateDeembeddingSparameterTable(::grpc::ServerContext* context, const CreateDeembeddingSparameterTableRequest* request, CreateDeembeddingSparameterTableResponse* response) override;
  ::grpc::Status ConfigureSparameterTableFrequencies(::grpc::ServerContext* context, const ConfigureSparameterTableFrequenciesRequest* request, ConfigureSparameterTableFrequenciesResponse* response) override;
  ::grpc::Status ConfigureSparameterTableSparameters(::grpc::ServerContext* context, const ConfigureSparameterTableSparametersRequest* request, ConfigureSparameterTableSparametersResponse* response) override;
private:
  LibrarySharedPtr library_;
  ResourceRepositorySharedPtr session_repository_;
  ::grpc::Status ConvertApiErrorStatusForViSession(::grpc::ServerContextBase* context, int32_t status, ViSession vi);

  NiRFSGRestrictedFeatureToggles feature_toggles_;
};

} // namespace nirfsg_restricted_grpc

#endif  // NIRFSG_RESTRICTED_GRPC_SERVICE_H
