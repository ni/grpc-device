
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFSG-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nirfsg_restricted_service.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <atomic>
#include <vector>
#include "custom/ivi_errors.h"
#include <server/converters.h>

namespace nirfsg_restricted_grpc {

  using nidevice_grpc::converters::allocate_output_storage;
  using nidevice_grpc::converters::calculate_linked_array_size;
  using nidevice_grpc::converters::convert_from_grpc;
  using nidevice_grpc::converters::convert_to_grpc;
  using nidevice_grpc::converters::MatchState;

  const auto kErrorReadBufferTooSmall = -200229;
  const auto kWarningCAPIStringTruncatedToFitBuffer = 200026;

  NiRFSGRestrictedService::NiRFSGRestrictedService(
      LibrarySharedPtr library,
      ResourceRepositorySharedPtr resource_repository,
      const NiRFSGRestrictedFeatureToggles& feature_toggles)
      : library_(library),
      session_repository_(resource_repository),
      feature_toggles_(feature_toggles)
  {
  }

  NiRFSGRestrictedService::~NiRFSGRestrictedService()
  {
  }

  // Returns true if it's safe to use outputs of a method with the given status.
  inline bool status_ok(int32 status)
  {
    return status >= 0;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiRFSGRestrictedService::GetError(::grpc::ServerContext* context, const GetErrorRequest* request, GetErrorResponse* response)
  {
    if (context->IsCancelled()) {
      return ::grpc::Status::CANCELLED;
    }
    try {
      auto vi_grpc_session = request->vi();
      ViSession vi = session_repository_->access_session(vi_grpc_session.name());

      while (true) {
        auto status = library_->GetError(vi, nullptr, 0, nullptr);
        if (!status_ok(status)) {
          return ConvertApiErrorStatusForViSession(context, status, vi);
        }
        ViInt32 error_description_buffer_size = status;

        ViStatus error_code {};
        std::string error_description;
        if (error_description_buffer_size > 0) {
            error_description.resize(error_description_buffer_size - 1);
        }
        status = library_->GetError(vi, &error_code, error_description_buffer_size, (ViChar*)error_description.data());
        if (status == kErrorReadBufferTooSmall || status == kWarningCAPIStringTruncatedToFitBuffer || status > static_cast<decltype(status)>(error_description_buffer_size)) {
          // buffer is now too small, try again
          continue;
        }
        if (!status_ok(status)) {
          return ConvertApiErrorStatusForViSession(context, status, vi);
        }
        response->set_status(status);
        response->set_error_code(error_code);
        std::string error_description_utf8;
        convert_to_grpc(error_description, &error_description_utf8);
        response->set_error_description(error_description_utf8);
        nidevice_grpc::converters::trim_trailing_nulls(*(response->mutable_error_description()));
        return ::grpc::Status::OK;
      }
    }
    catch (nidevice_grpc::NonDriverException& ex) {
      return ex.GetStatus();
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiRFSGRestrictedService::ErrorMessage(::grpc::ServerContext* context, const ErrorMessageRequest* request, ErrorMessageResponse* response)
  {
    if (context->IsCancelled()) {
      return ::grpc::Status::CANCELLED;
    }
    try {
      auto vi_grpc_session = request->vi();
      ViSession vi = session_repository_->access_session(vi_grpc_session.name());
      ViStatus error_code = request->error_code();
      std::string error_message(1024 - 1, '\0');
      auto status = library_->ErrorMessage(vi, error_code, (ViChar*)error_message.data());
      if (!status_ok(status)) {
        return ConvertApiErrorStatusForViSession(context, status, vi);
      }
      response->set_status(status);
      std::string error_message_utf8;
      convert_to_grpc(error_message, &error_message_utf8);
      response->set_error_message(error_message_utf8);
      nidevice_grpc::converters::trim_trailing_nulls(*(response->mutable_error_message()));
      return ::grpc::Status::OK;
    }
    catch (nidevice_grpc::NonDriverException& ex) {
      return ex.GetStatus();
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiRFSGRestrictedService::CreateDeembeddingSparameterTable(::grpc::ServerContext* context, const CreateDeembeddingSparameterTableRequest* request, CreateDeembeddingSparameterTableResponse* response)
  {
    if (context->IsCancelled()) {
      return ::grpc::Status::CANCELLED;
    }
    try {
      auto vi_grpc_session = request->vi();
      ViSession vi = session_repository_->access_session(vi_grpc_session.name());
      auto port_mbcs = convert_from_grpc<std::string>(request->port());
      auto port = port_mbcs.c_str();
      auto table_name_mbcs = convert_from_grpc<std::string>(request->table_name());
      auto table_name = table_name_mbcs.c_str();
      ViInt32 number_of_frequencies = request->number_of_frequencies();
      ViInt32 number_of_ports = request->number_of_ports();
      auto status = library_->CreateDeembeddingSparameterTable(vi, port, table_name, number_of_frequencies, number_of_ports);
      if (!status_ok(status)) {
        return ConvertApiErrorStatusForViSession(context, status, vi);
      }
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (nidevice_grpc::NonDriverException& ex) {
      return ex.GetStatus();
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiRFSGRestrictedService::ConfigureSparameterTableFrequencies(::grpc::ServerContext* context, const ConfigureSparameterTableFrequenciesRequest* request, ConfigureSparameterTableFrequenciesResponse* response)
  {
    if (context->IsCancelled()) {
      return ::grpc::Status::CANCELLED;
    }
    try {
      auto vi_grpc_session = request->vi();
      ViSession vi = session_repository_->access_session(vi_grpc_session.name());
      auto port_mbcs = convert_from_grpc<std::string>(request->port());
      auto port = port_mbcs.c_str();
      auto table_name_mbcs = convert_from_grpc<std::string>(request->table_name());
      auto table_name = table_name_mbcs.c_str();
      auto frequencies = const_cast<ViReal64*>(request->frequencies().data());
      ViInt32 frequencies_size = static_cast<ViInt32>(request->frequencies().size());
      auto status = library_->ConfigureSparameterTableFrequencies(vi, port, table_name, frequencies, frequencies_size);
      if (!status_ok(status)) {
        return ConvertApiErrorStatusForViSession(context, status, vi);
      }
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (nidevice_grpc::NonDriverException& ex) {
      return ex.GetStatus();
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiRFSGRestrictedService::ConfigureSparameterTableSparameters(::grpc::ServerContext* context, const ConfigureSparameterTableSparametersRequest* request, ConfigureSparameterTableSparametersResponse* response)
  {
    if (context->IsCancelled()) {
      return ::grpc::Status::CANCELLED;
    }
    try {
      auto vi_grpc_session = request->vi();
      ViSession vi = session_repository_->access_session(vi_grpc_session.name());
      auto port_mbcs = convert_from_grpc<std::string>(request->port());
      auto port = port_mbcs.c_str();
      auto table_name_mbcs = convert_from_grpc<std::string>(request->table_name());
      auto table_name = table_name_mbcs.c_str();
      auto sparameter_table = convert_from_grpc<NIComplexNumber_struct>(request->sparameter_table());
      ViInt32 sparameter_table_size = static_cast<ViInt32>(request->sparameter_table().size());
      ViInt32 sparameter_orientation;
      switch (request->sparameter_orientation_enum_case()) {
        case nirfsg_restricted_grpc::ConfigureSparameterTableSparametersRequest::SparameterOrientationEnumCase::kSparameterOrientation: {
          sparameter_orientation = static_cast<ViInt32>(request->sparameter_orientation());
          break;
        }
        case nirfsg_restricted_grpc::ConfigureSparameterTableSparametersRequest::SparameterOrientationEnumCase::kSparameterOrientationRaw: {
          sparameter_orientation = static_cast<ViInt32>(request->sparameter_orientation_raw());
          break;
        }
        case nirfsg_restricted_grpc::ConfigureSparameterTableSparametersRequest::SparameterOrientationEnumCase::SPARAMETER_ORIENTATION_ENUM_NOT_SET: {
          return ::grpc::Status(::grpc::INVALID_ARGUMENT, "The value for sparameter_orientation was not specified or out of range");
          break;
        }
      }

      auto status = library_->ConfigureSparameterTableSparameters(vi, port, table_name, sparameter_table.data(), sparameter_table_size, sparameter_orientation);
      if (!status_ok(status)) {
        return ConvertApiErrorStatusForViSession(context, status, vi);
      }
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (nidevice_grpc::NonDriverException& ex) {
      return ex.GetStatus();
    }
  }


  NiRFSGRestrictedFeatureToggles::NiRFSGRestrictedFeatureToggles(
    const nidevice_grpc::FeatureToggles& feature_toggles)
    : is_enabled(
        feature_toggles.is_feature_enabled("nirfsg_restricted", CodeReadiness::kRelease))
  {
  }
} // namespace nirfsg_restricted_grpc

