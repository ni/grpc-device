//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFSG-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nirfsg_restricted_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFSG_64.dll";
#else
static const char* kLibraryName = "libnirfsg.so";
#endif

namespace nirfsg_restricted_grpc {

NiRFSGRestrictedLibrary::NiRFSGRestrictedLibrary() : NiRFSGRestrictedLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

NiRFSGRestrictedLibrary::NiRFSGRestrictedLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_->get_function_pointer("niRFSG_GetError"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_->get_function_pointer("niRFSG_error_message"));
  function_pointers_.CreateDeembeddingSparameterTable = reinterpret_cast<CreateDeembeddingSparameterTablePtr>(shared_library_->get_function_pointer("niRFSG_CreateDeembeddingSparameterTable"));
  function_pointers_.ConfigureSparameterTableFrequencies = reinterpret_cast<ConfigureSparameterTableFrequenciesPtr>(shared_library_->get_function_pointer("niRFSG_ConfigureSparameterTableFrequencies"));
  function_pointers_.ConfigureSparameterTableSparameters = reinterpret_cast<ConfigureSparameterTableSparametersPtr>(shared_library_->get_function_pointer("niRFSG_ConfigureSparameterTableSparameters"));
}

NiRFSGRestrictedLibrary::~NiRFSGRestrictedLibrary()
{
}

::grpc::Status NiRFSGRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiRFSGRestrictedLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetError.");
  }
  return function_pointers_.GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
}

ViStatus NiRFSGRestrictedLibrary::ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[1024])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_error_message.");
  }
  return function_pointers_.ErrorMessage(vi, errorCode, errorMessage);
}

ViStatus NiRFSGRestrictedLibrary::CreateDeembeddingSparameterTable(ViSession vi, ViConstString port, ViConstString tableName, ViInt32 numberOfFrequencies, ViInt32 numberOfPorts)
{
  if (!function_pointers_.CreateDeembeddingSparameterTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CreateDeembeddingSparameterTable.");
  }
  return function_pointers_.CreateDeembeddingSparameterTable(vi, port, tableName, numberOfFrequencies, numberOfPorts);
}

ViStatus NiRFSGRestrictedLibrary::ConfigureSparameterTableFrequencies(ViSession vi, ViConstString port, ViConstString tableName, ViReal64 frequencies[], ViInt32 frequenciesSize)
{
  if (!function_pointers_.ConfigureSparameterTableFrequencies) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureSparameterTableFrequencies.");
  }
  return function_pointers_.ConfigureSparameterTableFrequencies(vi, port, tableName, frequencies, frequenciesSize);
}

ViStatus NiRFSGRestrictedLibrary::ConfigureSparameterTableSparameters(ViSession vi, ViConstString port, ViConstString tableName, NIComplexNumber_struct sparameterTable[], ViInt32 sparameterTableSize, ViInt32 sparameterOrientation)
{
  if (!function_pointers_.ConfigureSparameterTableSparameters) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureSparameterTableSparameters.");
  }
  return function_pointers_.ConfigureSparameterTableSparameters(vi, port, tableName, sparameterTable, sparameterTableSize, sparameterOrientation);
}

}  // namespace nirfsg_restricted_grpc
