
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-rfmxdemod.
//---------------------------------------------------------------------
#include "nirfmxdemod_client.h"

#include <grpcpp/grpcpp.h>

#include <nirfmxdemod.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nirfmxdemod_grpc::experimental::client {

ADemodCfgAMCarrierSuppressedResponse
a_demod_cfg_am_carrier_suppressed(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<ADemodAMCarrierSuppressedEnabled, pb::int32>& am_carrier_suppressed_enabled)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgAMCarrierSuppressedRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto am_carrier_suppressed_enabled_ptr = am_carrier_suppressed_enabled.get_if<ADemodAMCarrierSuppressedEnabled>();
  const auto am_carrier_suppressed_enabled_raw_ptr = am_carrier_suppressed_enabled.get_if<pb::int32>();
  if (am_carrier_suppressed_enabled_ptr) {
    request.set_am_carrier_suppressed_enabled(*am_carrier_suppressed_enabled_ptr);
  }
  else if (am_carrier_suppressed_enabled_raw_ptr) {
    request.set_am_carrier_suppressed_enabled_raw(*am_carrier_suppressed_enabled_raw_ptr);
  }

  auto response = ADemodCfgAMCarrierSuppressedResponse{};

  raise_if_error(
      stub->ADemodCfgAMCarrierSuppressed(&context, request, &response),
      context);

  return response;
}

ADemodCfgAudioFilterResponse
a_demod_cfg_audio_filter(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<ADemodAudioFilterType, pb::int32>& audio_filter_type, const double& audio_filter_lower_cutoff_frequency, const double& audio_filter_upper_cutoff_frequency)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgAudioFilterRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto audio_filter_type_ptr = audio_filter_type.get_if<ADemodAudioFilterType>();
  const auto audio_filter_type_raw_ptr = audio_filter_type.get_if<pb::int32>();
  if (audio_filter_type_ptr) {
    request.set_audio_filter_type(*audio_filter_type_ptr);
  }
  else if (audio_filter_type_raw_ptr) {
    request.set_audio_filter_type_raw(*audio_filter_type_raw_ptr);
  }
  request.set_audio_filter_lower_cutoff_frequency(audio_filter_lower_cutoff_frequency);
  request.set_audio_filter_upper_cutoff_frequency(audio_filter_upper_cutoff_frequency);

  auto response = ADemodCfgAudioFilterResponse{};

  raise_if_error(
      stub->ADemodCfgAudioFilter(&context, request, &response),
      context);

  return response;
}

ADemodCfgAveragingResponse
a_demod_cfg_averaging(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<ADemodAveragingEnabled, pb::int32>& averaging_enabled, const pb::int32& averaging_count, const simple_variant<ADemodAveragingType, pb::int32>& averaging_type)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgAveragingRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto averaging_enabled_ptr = averaging_enabled.get_if<ADemodAveragingEnabled>();
  const auto averaging_enabled_raw_ptr = averaging_enabled.get_if<pb::int32>();
  if (averaging_enabled_ptr) {
    request.set_averaging_enabled(*averaging_enabled_ptr);
  }
  else if (averaging_enabled_raw_ptr) {
    request.set_averaging_enabled_raw(*averaging_enabled_raw_ptr);
  }
  request.set_averaging_count(averaging_count);
  const auto averaging_type_ptr = averaging_type.get_if<ADemodAveragingType>();
  const auto averaging_type_raw_ptr = averaging_type.get_if<pb::int32>();
  if (averaging_type_ptr) {
    request.set_averaging_type(*averaging_type_ptr);
  }
  else if (averaging_type_raw_ptr) {
    request.set_averaging_type_raw(*averaging_type_raw_ptr);
  }

  auto response = ADemodCfgAveragingResponse{};

  raise_if_error(
      stub->ADemodCfgAveraging(&context, request, &response),
      context);

  return response;
}

ADemodCfgCarrierCorrectionResponse
a_demod_cfg_carrier_correction(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<ADemodCarrierFrequencyCorrectionEnabled, pb::int32>& carrier_frequency_correction_enabled, const simple_variant<ADemodCarrierPhaseCorrectionEnabled, pb::int32>& carrier_phase_correction_enabled)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgCarrierCorrectionRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto carrier_frequency_correction_enabled_ptr = carrier_frequency_correction_enabled.get_if<ADemodCarrierFrequencyCorrectionEnabled>();
  const auto carrier_frequency_correction_enabled_raw_ptr = carrier_frequency_correction_enabled.get_if<pb::int32>();
  if (carrier_frequency_correction_enabled_ptr) {
    request.set_carrier_frequency_correction_enabled(*carrier_frequency_correction_enabled_ptr);
  }
  else if (carrier_frequency_correction_enabled_raw_ptr) {
    request.set_carrier_frequency_correction_enabled_raw(*carrier_frequency_correction_enabled_raw_ptr);
  }
  const auto carrier_phase_correction_enabled_ptr = carrier_phase_correction_enabled.get_if<ADemodCarrierPhaseCorrectionEnabled>();
  const auto carrier_phase_correction_enabled_raw_ptr = carrier_phase_correction_enabled.get_if<pb::int32>();
  if (carrier_phase_correction_enabled_ptr) {
    request.set_carrier_phase_correction_enabled(*carrier_phase_correction_enabled_ptr);
  }
  else if (carrier_phase_correction_enabled_raw_ptr) {
    request.set_carrier_phase_correction_enabled_raw(*carrier_phase_correction_enabled_raw_ptr);
  }

  auto response = ADemodCfgCarrierCorrectionResponse{};

  raise_if_error(
      stub->ADemodCfgCarrierCorrection(&context, request, &response),
      context);

  return response;
}

ADemodCfgFMDeEmphasisResponse
a_demod_cfg_fm_de_emphasis(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& de_emphasis)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgFMDeEmphasisRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_de_emphasis(de_emphasis);

  auto response = ADemodCfgFMDeEmphasisResponse{};

  raise_if_error(
      stub->ADemodCfgFMDeEmphasis(&context, request, &response),
      context);

  return response;
}

ADemodCfgMeasurementIntervalResponse
a_demod_cfg_measurement_interval(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& measurement_interval)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgMeasurementIntervalRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_measurement_interval(measurement_interval);

  auto response = ADemodCfgMeasurementIntervalResponse{};

  raise_if_error(
      stub->ADemodCfgMeasurementInterval(&context, request, &response),
      context);

  return response;
}

ADemodCfgModulationTypeResponse
a_demod_cfg_modulation_type(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<ADemodModulationType, pb::int32>& modulation_type)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgModulationTypeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto modulation_type_ptr = modulation_type.get_if<ADemodModulationType>();
  const auto modulation_type_raw_ptr = modulation_type.get_if<pb::int32>();
  if (modulation_type_ptr) {
    request.set_modulation_type(*modulation_type_ptr);
  }
  else if (modulation_type_raw_ptr) {
    request.set_modulation_type_raw(*modulation_type_raw_ptr);
  }

  auto response = ADemodCfgModulationTypeResponse{};

  raise_if_error(
      stub->ADemodCfgModulationType(&context, request, &response),
      context);

  return response;
}

ADemodCfgRBWFilterResponse
a_demod_cfg_rbw_filter(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& rbw, const simple_variant<ADemodRbwFilterType, pb::int32>& rbw_filter_type, const double& rbw_rrc_alpha)
{
  ::grpc::ClientContext context;

  auto request = ADemodCfgRBWFilterRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_rbw(rbw);
  const auto rbw_filter_type_ptr = rbw_filter_type.get_if<ADemodRbwFilterType>();
  const auto rbw_filter_type_raw_ptr = rbw_filter_type.get_if<pb::int32>();
  if (rbw_filter_type_ptr) {
    request.set_rbw_filter_type(*rbw_filter_type_ptr);
  }
  else if (rbw_filter_type_raw_ptr) {
    request.set_rbw_filter_type_raw(*rbw_filter_type_raw_ptr);
  }
  request.set_rbw_rrc_alpha(rbw_rrc_alpha);

  auto response = ADemodCfgRBWFilterResponse{};

  raise_if_error(
      stub->ADemodCfgRBWFilter(&context, request, &response),
      context);

  return response;
}

ADemodFetchAMMaximumModulationDepthResponse
a_demod_fetch_am_maximum_modulation_depth(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchAMMaximumModulationDepthRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchAMMaximumModulationDepthResponse{};

  raise_if_error(
      stub->ADemodFetchAMMaximumModulationDepth(&context, request, &response),
      context);

  return response;
}

ADemodFetchAMMeanModulationDepthResponse
a_demod_fetch_am_mean_modulation_depth(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchAMMeanModulationDepthRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchAMMeanModulationDepthResponse{};

  raise_if_error(
      stub->ADemodFetchAMMeanModulationDepth(&context, request, &response),
      context);

  return response;
}

ADemodFetchCarrierMeasurementResponse
a_demod_fetch_carrier_measurement(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchCarrierMeasurementRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchCarrierMeasurementResponse{};

  raise_if_error(
      stub->ADemodFetchCarrierMeasurement(&context, request, &response),
      context);

  return response;
}

ADemodFetchDemodSignalTraceResponse
a_demod_fetch_demod_signal_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchDemodSignalTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchDemodSignalTraceResponse{};

  raise_if_error(
      stub->ADemodFetchDemodSignalTrace(&context, request, &response),
      context);

  return response;
}

ADemodFetchDemodSpectrumTraceResponse
a_demod_fetch_demod_spectrum_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchDemodSpectrumTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchDemodSpectrumTraceResponse{};

  raise_if_error(
      stub->ADemodFetchDemodSpectrumTrace(&context, request, &response),
      context);

  return response;
}

ADemodFetchDistortionsResponse
a_demod_fetch_distortions(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchDistortionsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchDistortionsResponse{};

  raise_if_error(
      stub->ADemodFetchDistortions(&context, request, &response),
      context);

  return response;
}

ADemodFetchFMMaximumDeviationResponse
a_demod_fetch_fm_maximum_deviation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchFMMaximumDeviationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchFMMaximumDeviationResponse{};

  raise_if_error(
      stub->ADemodFetchFMMaximumDeviation(&context, request, &response),
      context);

  return response;
}

ADemodFetchFMMeanDeviationResponse
a_demod_fetch_fm_mean_deviation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchFMMeanDeviationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchFMMeanDeviationResponse{};

  raise_if_error(
      stub->ADemodFetchFMMeanDeviation(&context, request, &response),
      context);

  return response;
}

ADemodFetchMeanModulationFrequencyResponse
a_demod_fetch_mean_modulation_frequency(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchMeanModulationFrequencyRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchMeanModulationFrequencyResponse{};

  raise_if_error(
      stub->ADemodFetchMeanModulationFrequency(&context, request, &response),
      context);

  return response;
}

ADemodFetchPMMaximumDeviationResponse
a_demod_fetch_pm_maximum_deviation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchPMMaximumDeviationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchPMMaximumDeviationResponse{};

  raise_if_error(
      stub->ADemodFetchPMMaximumDeviation(&context, request, &response),
      context);

  return response;
}

ADemodFetchPMMeanDeviationResponse
a_demod_fetch_pm_mean_deviation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodFetchPMMeanDeviationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodFetchPMMeanDeviationResponse{};

  raise_if_error(
      stub->ADemodFetchPMMeanDeviation(&context, request, &response),
      context);

  return response;
}

ADemodReadAMResponse
a_demod_read_am(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodReadAMRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodReadAMResponse{};

  raise_if_error(
      stub->ADemodReadAM(&context, request, &response),
      context);

  return response;
}

ADemodReadFMResponse
a_demod_read_fm(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodReadFMRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodReadFMResponse{};

  raise_if_error(
      stub->ADemodReadFM(&context, request, &response),
      context);

  return response;
}

ADemodReadPMResponse
a_demod_read_pm(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = ADemodReadPMRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = ADemodReadPMResponse{};

  raise_if_error(
      stub->ADemodReadPM(&context, request, &response),
      context);

  return response;
}

AbortMeasurementsResponse
abort_measurements(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = AbortMeasurementsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = AbortMeasurementsResponse{};

  raise_if_error(
      stub->AbortMeasurements(&context, request, &response),
      context);

  return response;
}

AnalyzeIQ1WaveformResponse
analyze_iq1_waveform(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const std::string& result_name, const double& x0, const double& dx, const std::vector<nidevice_grpc::NIComplexNumberF32>& iq, const pb::int32& reset)
{
  ::grpc::ClientContext context;

  auto request = AnalyzeIQ1WaveformRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_result_name(result_name);
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(iq, request.mutable_iq());
  request.set_reset(reset);

  auto response = AnalyzeIQ1WaveformResponse{};

  raise_if_error(
      stub->AnalyzeIQ1Waveform(&context, request, &response),
      context);

  return response;
}

AutoLevelResponse
auto_level(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& bandwidth, const double& measurement_interval)
{
  ::grpc::ClientContext context;

  auto request = AutoLevelRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_bandwidth(bandwidth);
  request.set_measurement_interval(measurement_interval);

  auto response = AutoLevelResponse{};

  raise_if_error(
      stub->AutoLevel(&context, request, &response),
      context);

  return response;
}

BuildSignalStringResponse
build_signal_string(const StubPtr& stub, const std::string& signal_name, const std::string& result_name)
{
  ::grpc::ClientContext context;

  auto request = BuildSignalStringRequest{};
  request.set_signal_name(signal_name);
  request.set_result_name(result_name);

  auto response = BuildSignalStringResponse{};

  raise_if_error(
      stub->BuildSignalString(&context, request, &response),
      context);

  return response;
}

CfgDigitalEdgeTriggerResponse
cfg_digital_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DigitalEdgeTriggerSource, std::string>& digital_edge_source, const simple_variant<DigitalEdgeTriggerEdge, pb::int32>& digital_edge, const double& trigger_delay, const pb::int32& enable_trigger)
{
  ::grpc::ClientContext context;

  auto request = CfgDigitalEdgeTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto digital_edge_source_ptr = digital_edge_source.get_if<DigitalEdgeTriggerSource>();
  const auto digital_edge_source_raw_ptr = digital_edge_source.get_if<std::string>();
  if (digital_edge_source_ptr) {
    request.set_digital_edge_source_mapped(*digital_edge_source_ptr);
  }
  else if (digital_edge_source_raw_ptr) {
    request.set_digital_edge_source_raw(*digital_edge_source_raw_ptr);
  }
  const auto digital_edge_ptr = digital_edge.get_if<DigitalEdgeTriggerEdge>();
  const auto digital_edge_raw_ptr = digital_edge.get_if<pb::int32>();
  if (digital_edge_ptr) {
    request.set_digital_edge(*digital_edge_ptr);
  }
  else if (digital_edge_raw_ptr) {
    request.set_digital_edge_raw(*digital_edge_raw_ptr);
  }
  request.set_trigger_delay(trigger_delay);
  request.set_enable_trigger(enable_trigger);

  auto response = CfgDigitalEdgeTriggerResponse{};

  raise_if_error(
      stub->CfgDigitalEdgeTrigger(&context, request, &response),
      context);

  return response;
}

CfgExternalAttenuationResponse
cfg_external_attenuation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& external_attenuation)
{
  ::grpc::ClientContext context;

  auto request = CfgExternalAttenuationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_external_attenuation(external_attenuation);

  auto response = CfgExternalAttenuationResponse{};

  raise_if_error(
      stub->CfgExternalAttenuation(&context, request, &response),
      context);

  return response;
}

CfgFrequencyResponse
cfg_frequency(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& center_frequency)
{
  ::grpc::ClientContext context;

  auto request = CfgFrequencyRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_center_frequency(center_frequency);

  auto response = CfgFrequencyResponse{};

  raise_if_error(
      stub->CfgFrequency(&context, request, &response),
      context);

  return response;
}

CfgFrequencyReferenceResponse
cfg_frequency_reference(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& channel_name, const simple_variant<FrequencyReferenceSource, std::string>& frequency_reference_source, const double& frequency_reference_frequency)
{
  ::grpc::ClientContext context;

  auto request = CfgFrequencyReferenceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  const auto frequency_reference_source_ptr = frequency_reference_source.get_if<FrequencyReferenceSource>();
  const auto frequency_reference_source_raw_ptr = frequency_reference_source.get_if<std::string>();
  if (frequency_reference_source_ptr) {
    request.set_frequency_reference_source_mapped(*frequency_reference_source_ptr);
  }
  else if (frequency_reference_source_raw_ptr) {
    request.set_frequency_reference_source_raw(*frequency_reference_source_raw_ptr);
  }
  request.set_frequency_reference_frequency(frequency_reference_frequency);

  auto response = CfgFrequencyReferenceResponse{};

  raise_if_error(
      stub->CfgFrequencyReference(&context, request, &response),
      context);

  return response;
}

CfgIQPowerEdgeTriggerResponse
cfg_iq_power_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const std::string& iq_power_edge_source, const double& iq_power_edge_level, const simple_variant<IQPowerEdgeTriggerSlope, pb::int32>& iq_power_edge_slope, const double& trigger_delay, const simple_variant<TriggerMinimumQuietTimeMode, pb::int32>& trigger_min_quiet_time_mode, const double& trigger_min_quiet_time_duration, const pb::int32& enable_trigger)
{
  ::grpc::ClientContext context;

  auto request = CfgIQPowerEdgeTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_iq_power_edge_source(iq_power_edge_source);
  request.set_iq_power_edge_level(iq_power_edge_level);
  const auto iq_power_edge_slope_ptr = iq_power_edge_slope.get_if<IQPowerEdgeTriggerSlope>();
  const auto iq_power_edge_slope_raw_ptr = iq_power_edge_slope.get_if<pb::int32>();
  if (iq_power_edge_slope_ptr) {
    request.set_iq_power_edge_slope(*iq_power_edge_slope_ptr);
  }
  else if (iq_power_edge_slope_raw_ptr) {
    request.set_iq_power_edge_slope_raw(*iq_power_edge_slope_raw_ptr);
  }
  request.set_trigger_delay(trigger_delay);
  const auto trigger_min_quiet_time_mode_ptr = trigger_min_quiet_time_mode.get_if<TriggerMinimumQuietTimeMode>();
  const auto trigger_min_quiet_time_mode_raw_ptr = trigger_min_quiet_time_mode.get_if<pb::int32>();
  if (trigger_min_quiet_time_mode_ptr) {
    request.set_trigger_min_quiet_time_mode(*trigger_min_quiet_time_mode_ptr);
  }
  else if (trigger_min_quiet_time_mode_raw_ptr) {
    request.set_trigger_min_quiet_time_mode_raw(*trigger_min_quiet_time_mode_raw_ptr);
  }
  request.set_trigger_min_quiet_time_duration(trigger_min_quiet_time_duration);
  request.set_enable_trigger(enable_trigger);

  auto response = CfgIQPowerEdgeTriggerResponse{};

  raise_if_error(
      stub->CfgIQPowerEdgeTrigger(&context, request, &response),
      context);

  return response;
}

CfgMechanicalAttenuationResponse
cfg_mechanical_attenuation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& channel_name, const simple_variant<MechanicalAttenuationAuto, pb::int32>& mechanical_attenuation_auto, const double& mechanical_attenuation_value)
{
  ::grpc::ClientContext context;

  auto request = CfgMechanicalAttenuationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  const auto mechanical_attenuation_auto_ptr = mechanical_attenuation_auto.get_if<MechanicalAttenuationAuto>();
  const auto mechanical_attenuation_auto_raw_ptr = mechanical_attenuation_auto.get_if<pb::int32>();
  if (mechanical_attenuation_auto_ptr) {
    request.set_mechanical_attenuation_auto(*mechanical_attenuation_auto_ptr);
  }
  else if (mechanical_attenuation_auto_raw_ptr) {
    request.set_mechanical_attenuation_auto_raw(*mechanical_attenuation_auto_raw_ptr);
  }
  request.set_mechanical_attenuation_value(mechanical_attenuation_value);

  auto response = CfgMechanicalAttenuationResponse{};

  raise_if_error(
      stub->CfgMechanicalAttenuation(&context, request, &response),
      context);

  return response;
}

CfgRFResponse
cfg_rf(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& center_frequency, const double& reference_level, const double& external_attenuation)
{
  ::grpc::ClientContext context;

  auto request = CfgRFRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_center_frequency(center_frequency);
  request.set_reference_level(reference_level);
  request.set_external_attenuation(external_attenuation);

  auto response = CfgRFResponse{};

  raise_if_error(
      stub->CfgRF(&context, request, &response),
      context);

  return response;
}

CfgRFAttenuationResponse
cfg_rf_attenuation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& channel_name, const simple_variant<RFAttenuationAuto, pb::int32>& rf_attenuation_auto, const double& rf_attenuation_value)
{
  ::grpc::ClientContext context;

  auto request = CfgRFAttenuationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  const auto rf_attenuation_auto_ptr = rf_attenuation_auto.get_if<RFAttenuationAuto>();
  const auto rf_attenuation_auto_raw_ptr = rf_attenuation_auto.get_if<pb::int32>();
  if (rf_attenuation_auto_ptr) {
    request.set_rf_attenuation_auto(*rf_attenuation_auto_ptr);
  }
  else if (rf_attenuation_auto_raw_ptr) {
    request.set_rf_attenuation_auto_raw(*rf_attenuation_auto_raw_ptr);
  }
  request.set_rf_attenuation_value(rf_attenuation_value);

  auto response = CfgRFAttenuationResponse{};

  raise_if_error(
      stub->CfgRFAttenuation(&context, request, &response),
      context);

  return response;
}

CfgReferenceLevelResponse
cfg_reference_level(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& reference_level)
{
  ::grpc::ClientContext context;

  auto request = CfgReferenceLevelRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_reference_level(reference_level);

  auto response = CfgReferenceLevelResponse{};

  raise_if_error(
      stub->CfgReferenceLevel(&context, request, &response),
      context);

  return response;
}

CfgSoftwareEdgeTriggerResponse
cfg_software_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& trigger_delay, const pb::int32& enable_trigger)
{
  ::grpc::ClientContext context;

  auto request = CfgSoftwareEdgeTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_trigger_delay(trigger_delay);
  request.set_enable_trigger(enable_trigger);

  auto response = CfgSoftwareEdgeTriggerResponse{};

  raise_if_error(
      stub->CfgSoftwareEdgeTrigger(&context, request, &response),
      context);

  return response;
}

CheckMeasurementStatusResponse
check_measurement_status(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = CheckMeasurementStatusRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = CheckMeasurementStatusResponse{};

  raise_if_error(
      stub->CheckMeasurementStatus(&context, request, &response),
      context);

  return response;
}

ClearAllNamedResultsResponse
clear_all_named_results(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = ClearAllNamedResultsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = ClearAllNamedResultsResponse{};

  raise_if_error(
      stub->ClearAllNamedResults(&context, request, &response),
      context);

  return response;
}

ClearNamedResultResponse
clear_named_result(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = ClearNamedResultRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = ClearNamedResultResponse{};

  raise_if_error(
      stub->ClearNamedResult(&context, request, &response),
      context);

  return response;
}

CloneSignalConfigurationResponse
clone_signal_configuration(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& old_signal_name, const std::string& new_signal_name)
{
  ::grpc::ClientContext context;

  auto request = CloneSignalConfigurationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_old_signal_name(old_signal_name);
  request.set_new_signal_name(new_signal_name);

  auto response = CloneSignalConfigurationResponse{};

  raise_if_error(
      stub->CloneSignalConfiguration(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& instrument, const bool& force_destroy)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_force_destroy(force_destroy);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

CommitResponse
commit(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = CommitRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = CommitResponse{};

  raise_if_error(
      stub->Commit(&context, request, &response),
      context);

  return response;
}

CreateSignalConfigurationResponse
create_signal_configuration(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& signal_name)
{
  ::grpc::ClientContext context;

  auto request = CreateSignalConfigurationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_signal_name(signal_name);

  auto response = CreateSignalConfigurationResponse{};

  raise_if_error(
      stub->CreateSignalConfiguration(&context, request, &response),
      context);

  return response;
}

DDemodCfgAveragingResponse
d_demod_cfg_averaging(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodAveragingEnabled, pb::int32>& averaging_enabled, const pb::int32& averaging_count)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgAveragingRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto averaging_enabled_ptr = averaging_enabled.get_if<DDemodAveragingEnabled>();
  const auto averaging_enabled_raw_ptr = averaging_enabled.get_if<pb::int32>();
  if (averaging_enabled_ptr) {
    request.set_averaging_enabled(*averaging_enabled_ptr);
  }
  else if (averaging_enabled_raw_ptr) {
    request.set_averaging_enabled_raw(*averaging_enabled_raw_ptr);
  }
  request.set_averaging_count(averaging_count);

  auto response = DDemodCfgAveragingResponse{};

  raise_if_error(
      stub->DDemodCfgAveraging(&context, request, &response),
      context);

  return response;
}

DDemodCfgEVMNormalizationReferenceResponse
d_demod_cfg_evm_normalization_reference(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodEvmNormalizationReference, pb::int32>& evm_norm_ref)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgEVMNormalizationReferenceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto evm_norm_ref_ptr = evm_norm_ref.get_if<DDemodEvmNormalizationReference>();
  const auto evm_norm_ref_raw_ptr = evm_norm_ref.get_if<pb::int32>();
  if (evm_norm_ref_ptr) {
    request.set_evm_norm_ref(*evm_norm_ref_ptr);
  }
  else if (evm_norm_ref_raw_ptr) {
    request.set_evm_norm_ref_raw(*evm_norm_ref_raw_ptr);
  }

  auto response = DDemodCfgEVMNormalizationReferenceResponse{};

  raise_if_error(
      stub->DDemodCfgEVMNormalizationReference(&context, request, &response),
      context);

  return response;
}

DDemodCfgEqualizerResponse
d_demod_cfg_equalizer(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodEqualizerMode, pb::int32>& equalizer_mode, const pb::int32& equalizer_filter_length, const double& x0, const double& dx, const std::vector<nidevice_grpc::NIComplexNumberF32>& equalizer_initial_coefficients, const pb::int32& equalizer_training_count, const double& equalizer_convergence_factor)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgEqualizerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto equalizer_mode_ptr = equalizer_mode.get_if<DDemodEqualizerMode>();
  const auto equalizer_mode_raw_ptr = equalizer_mode.get_if<pb::int32>();
  if (equalizer_mode_ptr) {
    request.set_equalizer_mode(*equalizer_mode_ptr);
  }
  else if (equalizer_mode_raw_ptr) {
    request.set_equalizer_mode_raw(*equalizer_mode_raw_ptr);
  }
  request.set_equalizer_filter_length(equalizer_filter_length);
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(equalizer_initial_coefficients, request.mutable_equalizer_initial_coefficients());
  request.set_equalizer_training_count(equalizer_training_count);
  request.set_equalizer_convergence_factor(equalizer_convergence_factor);

  auto response = DDemodCfgEqualizerResponse{};

  raise_if_error(
      stub->DDemodCfgEqualizer(&context, request, &response),
      context);

  return response;
}

DDemodCfgEqualizerInitialCoefficientsResponse
d_demod_cfg_equalizer_initial_coefficients(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& x0, const double& dx, const std::vector<nidevice_grpc::NIComplexNumberF32>& equalizer_initial_coefficients)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgEqualizerInitialCoefficientsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(equalizer_initial_coefficients, request.mutable_equalizer_initial_coefficients());

  auto response = DDemodCfgEqualizerInitialCoefficientsResponse{};

  raise_if_error(
      stub->DDemodCfgEqualizerInitialCoefficients(&context, request, &response),
      context);

  return response;
}

DDemodCfgFSKDeviationResponse
d_demod_cfg_fsk_deviation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& fsk_deviation, const simple_variant<DDemodFskReferenceCompensationEnabled, pb::int32>& fsk_ref_comp_enabled)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgFSKDeviationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_fsk_deviation(fsk_deviation);
  const auto fsk_ref_comp_enabled_ptr = fsk_ref_comp_enabled.get_if<DDemodFskReferenceCompensationEnabled>();
  const auto fsk_ref_comp_enabled_raw_ptr = fsk_ref_comp_enabled.get_if<pb::int32>();
  if (fsk_ref_comp_enabled_ptr) {
    request.set_fsk_ref_comp_enabled(*fsk_ref_comp_enabled_ptr);
  }
  else if (fsk_ref_comp_enabled_raw_ptr) {
    request.set_fsk_ref_comp_enabled_raw(*fsk_ref_comp_enabled_raw_ptr);
  }

  auto response = DDemodCfgFSKDeviationResponse{};

  raise_if_error(
      stub->DDemodCfgFSKDeviation(&context, request, &response),
      context);

  return response;
}

DDemodCfgMResponse
d_demod_cfg_m(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodM, pb::int32>& m)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgMRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto m_ptr = m.get_if<DDemodM>();
  const auto m_raw_ptr = m.get_if<pb::int32>();
  if (m_ptr) {
    request.set_m(*m_ptr);
  }
  else if (m_raw_ptr) {
    request.set_m_raw(*m_raw_ptr);
  }

  auto response = DDemodCfgMResponse{};

  raise_if_error(
      stub->DDemodCfgM(&context, request, &response),
      context);

  return response;
}

DDemodCfgMeasurementFilterResponse
d_demod_cfg_measurement_filter(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodMeasurementFilterType, pb::int32>& measurement_filter_type, const double& x0, const double& dx, const std::vector<float>& measurement_filter_custom_coefficients)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgMeasurementFilterRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto measurement_filter_type_ptr = measurement_filter_type.get_if<DDemodMeasurementFilterType>();
  const auto measurement_filter_type_raw_ptr = measurement_filter_type.get_if<pb::int32>();
  if (measurement_filter_type_ptr) {
    request.set_measurement_filter_type(*measurement_filter_type_ptr);
  }
  else if (measurement_filter_type_raw_ptr) {
    request.set_measurement_filter_type_raw(*measurement_filter_type_raw_ptr);
  }
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(measurement_filter_custom_coefficients, request.mutable_measurement_filter_custom_coefficients());

  auto response = DDemodCfgMeasurementFilterResponse{};

  raise_if_error(
      stub->DDemodCfgMeasurementFilter(&context, request, &response),
      context);

  return response;
}

DDemodCfgMeasurementFilterCustomCoefficientsResponse
d_demod_cfg_measurement_filter_custom_coefficients(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& x0, const double& dx, const std::vector<float>& measurement_filter_custom_coefficients)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgMeasurementFilterCustomCoefficientsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(measurement_filter_custom_coefficients, request.mutable_measurement_filter_custom_coefficients());

  auto response = DDemodCfgMeasurementFilterCustomCoefficientsResponse{};

  raise_if_error(
      stub->DDemodCfgMeasurementFilterCustomCoefficients(&context, request, &response),
      context);

  return response;
}

DDemodCfgModulationTypeResponse
d_demod_cfg_modulation_type(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodModulationType, pb::int32>& modulation_type, const simple_variant<DDemodM, pb::int32>& m, const simple_variant<DDemodDifferentialEnabled, pb::int32>& differential_enabled)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgModulationTypeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto modulation_type_ptr = modulation_type.get_if<DDemodModulationType>();
  const auto modulation_type_raw_ptr = modulation_type.get_if<pb::int32>();
  if (modulation_type_ptr) {
    request.set_modulation_type(*modulation_type_ptr);
  }
  else if (modulation_type_raw_ptr) {
    request.set_modulation_type_raw(*modulation_type_raw_ptr);
  }
  const auto m_ptr = m.get_if<DDemodM>();
  const auto m_raw_ptr = m.get_if<pb::int32>();
  if (m_ptr) {
    request.set_m(*m_ptr);
  }
  else if (m_raw_ptr) {
    request.set_m_raw(*m_raw_ptr);
  }
  const auto differential_enabled_ptr = differential_enabled.get_if<DDemodDifferentialEnabled>();
  const auto differential_enabled_raw_ptr = differential_enabled.get_if<pb::int32>();
  if (differential_enabled_ptr) {
    request.set_differential_enabled(*differential_enabled_ptr);
  }
  else if (differential_enabled_raw_ptr) {
    request.set_differential_enabled_raw(*differential_enabled_raw_ptr);
  }

  auto response = DDemodCfgModulationTypeResponse{};

  raise_if_error(
      stub->DDemodCfgModulationType(&context, request, &response),
      context);

  return response;
}

DDemodCfgNumberOfSymbolsResponse
d_demod_cfg_number_of_symbols(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const pb::int32& number_of_symbols)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgNumberOfSymbolsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_number_of_symbols(number_of_symbols);

  auto response = DDemodCfgNumberOfSymbolsResponse{};

  raise_if_error(
      stub->DDemodCfgNumberOfSymbols(&context, request, &response),
      context);

  return response;
}

DDemodCfgPSKFormatResponse
d_demod_cfg_psk_format(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodPskFormat, pb::int32>& psk_format)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgPSKFormatRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto psk_format_ptr = psk_format.get_if<DDemodPskFormat>();
  const auto psk_format_raw_ptr = psk_format.get_if<pb::int32>();
  if (psk_format_ptr) {
    request.set_psk_format(*psk_format_ptr);
  }
  else if (psk_format_raw_ptr) {
    request.set_psk_format_raw(*psk_format_raw_ptr);
  }

  auto response = DDemodCfgPSKFormatResponse{};

  raise_if_error(
      stub->DDemodCfgPSKFormat(&context, request, &response),
      context);

  return response;
}

DDemodCfgPulseShapingFilterResponse
d_demod_cfg_pulse_shaping_filter(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodPulseShapingFilterType, pb::int32>& pulse_shaping_filter_type, const double& pulse_shaping_filter_parameter, const double& x0, const double& dx, const std::vector<float>& pulse_shaping_filter_custom_coefficients)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgPulseShapingFilterRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto pulse_shaping_filter_type_ptr = pulse_shaping_filter_type.get_if<DDemodPulseShapingFilterType>();
  const auto pulse_shaping_filter_type_raw_ptr = pulse_shaping_filter_type.get_if<pb::int32>();
  if (pulse_shaping_filter_type_ptr) {
    request.set_pulse_shaping_filter_type(*pulse_shaping_filter_type_ptr);
  }
  else if (pulse_shaping_filter_type_raw_ptr) {
    request.set_pulse_shaping_filter_type_raw(*pulse_shaping_filter_type_raw_ptr);
  }
  request.set_pulse_shaping_filter_parameter(pulse_shaping_filter_parameter);
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(pulse_shaping_filter_custom_coefficients, request.mutable_pulse_shaping_filter_custom_coefficients());

  auto response = DDemodCfgPulseShapingFilterResponse{};

  raise_if_error(
      stub->DDemodCfgPulseShapingFilter(&context, request, &response),
      context);

  return response;
}

DDemodCfgPulseShapingFilterCustomCoefficientsResponse
d_demod_cfg_pulse_shaping_filter_custom_coefficients(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& x0, const double& dx, const std::vector<float>& pulse_shaping_filter_custom_coefficients)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgPulseShapingFilterCustomCoefficientsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_x0(x0);
  request.set_dx(dx);
  copy_array(pulse_shaping_filter_custom_coefficients, request.mutable_pulse_shaping_filter_custom_coefficients());

  auto response = DDemodCfgPulseShapingFilterCustomCoefficientsResponse{};

  raise_if_error(
      stub->DDemodCfgPulseShapingFilterCustomCoefficients(&context, request, &response),
      context);

  return response;
}

DDemodCfgSamplesPerSymbolResponse
d_demod_cfg_samples_per_symbol(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const pb::int32& samples_per_symbol)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgSamplesPerSymbolRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_samples_per_symbol(samples_per_symbol);

  auto response = DDemodCfgSamplesPerSymbolResponse{};

  raise_if_error(
      stub->DDemodCfgSamplesPerSymbol(&context, request, &response),
      context);

  return response;
}

DDemodCfgSignalStructureResponse
d_demod_cfg_signal_structure(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodSignalStructure, pb::int32>& signal_structure)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgSignalStructureRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto signal_structure_ptr = signal_structure.get_if<DDemodSignalStructure>();
  const auto signal_structure_raw_ptr = signal_structure.get_if<pb::int32>();
  if (signal_structure_ptr) {
    request.set_signal_structure(*signal_structure_ptr);
  }
  else if (signal_structure_raw_ptr) {
    request.set_signal_structure_raw(*signal_structure_raw_ptr);
  }

  auto response = DDemodCfgSignalStructureResponse{};

  raise_if_error(
      stub->DDemodCfgSignalStructure(&context, request, &response),
      context);

  return response;
}

DDemodCfgSpectrumInvertedResponse
d_demod_cfg_spectrum_inverted(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodSpectrumInverted, pb::int32>& spectrum_inverted)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgSpectrumInvertedRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto spectrum_inverted_ptr = spectrum_inverted.get_if<DDemodSpectrumInverted>();
  const auto spectrum_inverted_raw_ptr = spectrum_inverted.get_if<pb::int32>();
  if (spectrum_inverted_ptr) {
    request.set_spectrum_inverted(*spectrum_inverted_ptr);
  }
  else if (spectrum_inverted_raw_ptr) {
    request.set_spectrum_inverted_raw(*spectrum_inverted_raw_ptr);
  }

  auto response = DDemodCfgSpectrumInvertedResponse{};

  raise_if_error(
      stub->DDemodCfgSpectrumInverted(&context, request, &response),
      context);

  return response;
}

DDemodCfgSymbolMapResponse
d_demod_cfg_symbol_map(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodSymbolMapType, pb::int32>& symbol_map_type, const std::vector<nidevice_grpc::NIComplexNumberF32>& symbol_map)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgSymbolMapRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto symbol_map_type_ptr = symbol_map_type.get_if<DDemodSymbolMapType>();
  const auto symbol_map_type_raw_ptr = symbol_map_type.get_if<pb::int32>();
  if (symbol_map_type_ptr) {
    request.set_symbol_map_type(*symbol_map_type_ptr);
  }
  else if (symbol_map_type_raw_ptr) {
    request.set_symbol_map_type_raw(*symbol_map_type_raw_ptr);
  }
  copy_array(symbol_map, request.mutable_symbol_map());

  auto response = DDemodCfgSymbolMapResponse{};

  raise_if_error(
      stub->DDemodCfgSymbolMap(&context, request, &response),
      context);

  return response;
}

DDemodCfgSymbolRateResponse
d_demod_cfg_symbol_rate(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& symbol_rate)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgSymbolRateRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_symbol_rate(symbol_rate);

  auto response = DDemodCfgSymbolRateResponse{};

  raise_if_error(
      stub->DDemodCfgSymbolRate(&context, request, &response),
      context);

  return response;
}

DDemodCfgSynchronizationResponse
d_demod_cfg_synchronization(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<DDemodSynchronizationEnabled, pb::int32>& synchronization_enabled, const std::vector<pb::int32>& sync_bits, const pb::int32& measurement_offset)
{
  ::grpc::ClientContext context;

  auto request = DDemodCfgSynchronizationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  const auto synchronization_enabled_ptr = synchronization_enabled.get_if<DDemodSynchronizationEnabled>();
  const auto synchronization_enabled_raw_ptr = synchronization_enabled.get_if<pb::int32>();
  if (synchronization_enabled_ptr) {
    request.set_synchronization_enabled(*synchronization_enabled_ptr);
  }
  else if (synchronization_enabled_raw_ptr) {
    request.set_synchronization_enabled_raw(*synchronization_enabled_raw_ptr);
  }
  copy_array(sync_bits, request.mutable_sync_bits());
  request.set_measurement_offset(measurement_offset);

  auto response = DDemodCfgSynchronizationResponse{};

  raise_if_error(
      stub->DDemodCfgSynchronization(&context, request, &response),
      context);

  return response;
}

DDemodFetchCarrierMeasurementResponse
d_demod_fetch_carrier_measurement(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchCarrierMeasurementRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchCarrierMeasurementResponse{};

  raise_if_error(
      stub->DDemodFetchCarrierMeasurement(&context, request, &response),
      context);

  return response;
}

DDemodFetchConstellationTraceResponse
d_demod_fetch_constellation_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchConstellationTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchConstellationTraceResponse{};

  raise_if_error(
      stub->DDemodFetchConstellationTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchDemodulatedBitsResponse
d_demod_fetch_demodulated_bits(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchDemodulatedBitsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchDemodulatedBitsResponse{};

  raise_if_error(
      stub->DDemodFetchDemodulatedBits(&context, request, &response),
      context);

  return response;
}

DDemodFetchEVMResponse
d_demod_fetch_evm(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchEVMRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchEVMResponse{};

  raise_if_error(
      stub->DDemodFetchEVM(&context, request, &response),
      context);

  return response;
}

DDemodFetchEVMTraceResponse
d_demod_fetch_evm_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchEVMTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchEVMTraceResponse{};

  raise_if_error(
      stub->DDemodFetchEVMTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchEqualizerCoefficientsResponse
d_demod_fetch_equalizer_coefficients(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchEqualizerCoefficientsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchEqualizerCoefficientsResponse{};

  raise_if_error(
      stub->DDemodFetchEqualizerCoefficients(&context, request, &response),
      context);

  return response;
}

DDemodFetchFSKDeviationTraceResponse
d_demod_fetch_fsk_deviation_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchFSKDeviationTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchFSKDeviationTraceResponse{};

  raise_if_error(
      stub->DDemodFetchFSKDeviationTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchFSKResultsResponse
d_demod_fetch_fsk_results(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchFSKResultsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchFSKResultsResponse{};

  raise_if_error(
      stub->DDemodFetchFSKResults(&context, request, &response),
      context);

  return response;
}

DDemodFetchIQImpairmentsResponse
d_demod_fetch_iq_impairments(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchIQImpairmentsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchIQImpairmentsResponse{};

  raise_if_error(
      stub->DDemodFetchIQImpairments(&context, request, &response),
      context);

  return response;
}

DDemodFetchMagnitudeErrorResponse
d_demod_fetch_magnitude_error(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMagnitudeErrorRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMagnitudeErrorResponse{};

  raise_if_error(
      stub->DDemodFetchMagnitudeError(&context, request, &response),
      context);

  return response;
}

DDemodFetchMagnitudeErrorTraceResponse
d_demod_fetch_magnitude_error_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMagnitudeErrorTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMagnitudeErrorTraceResponse{};

  raise_if_error(
      stub->DDemodFetchMagnitudeErrorTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchMeanAmplitudeDroopResponse
d_demod_fetch_mean_amplitude_droop(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMeanAmplitudeDroopRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMeanAmplitudeDroopResponse{};

  raise_if_error(
      stub->DDemodFetchMeanAmplitudeDroop(&context, request, &response),
      context);

  return response;
}

DDemodFetchMeanIQOriginOffsetResponse
d_demod_fetch_mean_iq_origin_offset(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMeanIQOriginOffsetRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMeanIQOriginOffsetResponse{};

  raise_if_error(
      stub->DDemodFetchMeanIQOriginOffset(&context, request, &response),
      context);

  return response;
}

DDemodFetchMeanQuadratureSkewResponse
d_demod_fetch_mean_quadrature_skew(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMeanQuadratureSkewRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMeanQuadratureSkewResponse{};

  raise_if_error(
      stub->DDemodFetchMeanQuadratureSkew(&context, request, &response),
      context);

  return response;
}

DDemodFetchMeanRhoFactorResponse
d_demod_fetch_mean_rho_factor(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMeanRhoFactorRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMeanRhoFactorResponse{};

  raise_if_error(
      stub->DDemodFetchMeanRhoFactor(&context, request, &response),
      context);

  return response;
}

DDemodFetchMeasurementWaveformResponse
d_demod_fetch_measurement_waveform(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchMeasurementWaveformRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchMeasurementWaveformResponse{};

  raise_if_error(
      stub->DDemodFetchMeasurementWaveform(&context, request, &response),
      context);

  return response;
}

DDemodFetchOffsetConstellationTraceResponse
d_demod_fetch_offset_constellation_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchOffsetConstellationTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchOffsetConstellationTraceResponse{};

  raise_if_error(
      stub->DDemodFetchOffsetConstellationTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchOffsetEVMResponse
d_demod_fetch_offset_evm(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchOffsetEVMRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchOffsetEVMResponse{};

  raise_if_error(
      stub->DDemodFetchOffsetEVM(&context, request, &response),
      context);

  return response;
}

DDemodFetchOffsetEVMTraceResponse
d_demod_fetch_offset_evm_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchOffsetEVMTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchOffsetEVMTraceResponse{};

  raise_if_error(
      stub->DDemodFetchOffsetEVMTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchPhaseErrorResponse
d_demod_fetch_phase_error(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchPhaseErrorRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchPhaseErrorResponse{};

  raise_if_error(
      stub->DDemodFetchPhaseError(&context, request, &response),
      context);

  return response;
}

DDemodFetchPhaseErrorTraceResponse
d_demod_fetch_phase_error_trace(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchPhaseErrorTraceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchPhaseErrorTraceResponse{};

  raise_if_error(
      stub->DDemodFetchPhaseErrorTrace(&context, request, &response),
      context);

  return response;
}

DDemodFetchReferenceWaveformResponse
d_demod_fetch_reference_waveform(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchReferenceWaveformRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchReferenceWaveformResponse{};

  raise_if_error(
      stub->DDemodFetchReferenceWaveform(&context, request, &response),
      context);

  return response;
}

DDemodFetchSyncFoundResponse
d_demod_fetch_sync_found(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodFetchSyncFoundRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodFetchSyncFoundResponse{};

  raise_if_error(
      stub->DDemodFetchSyncFound(&context, request, &response),
      context);

  return response;
}

DDemodGetEqualizerInitialCoefficientsResponse
d_demod_get_equalizer_initial_coefficients(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = DDemodGetEqualizerInitialCoefficientsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = DDemodGetEqualizerInitialCoefficientsResponse{};

  raise_if_error(
      stub->DDemodGetEqualizerInitialCoefficients(&context, request, &response),
      context);

  return response;
}

DDemodGetSymbolMapResponse
d_demod_get_symbol_map(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = DDemodGetSymbolMapRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = DDemodGetSymbolMapResponse{};

  raise_if_error(
      stub->DDemodGetSymbolMap(&context, request, &response),
      context);

  return response;
}

DDemodReadResponse
d_demod_read(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = DDemodReadRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = DDemodReadResponse{};

  raise_if_error(
      stub->DDemodRead(&context, request, &response),
      context);

  return response;
}

DDemodSetSymbolMapResponse
d_demod_set_symbol_map(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const std::vector<nidevice_grpc::NIComplexNumberF32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = DDemodSetSymbolMapRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = DDemodSetSymbolMapResponse{};

  raise_if_error(
      stub->DDemodSetSymbolMap(&context, request, &response),
      context);

  return response;
}

DeleteSignalConfigurationResponse
delete_signal_configuration(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& signal_name)
{
  ::grpc::ClientContext context;

  auto request = DeleteSignalConfigurationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_signal_name(signal_name);

  auto response = DeleteSignalConfigurationResponse{};

  raise_if_error(
      stub->DeleteSignalConfiguration(&context, request, &response),
      context);

  return response;
}

DisableTriggerResponse
disable_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = DisableTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = DisableTriggerResponse{};

  raise_if_error(
      stub->DisableTrigger(&context, request, &response),
      context);

  return response;
}

GetAllNamedResultNamesResponse
get_all_named_result_names(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = GetAllNamedResultNamesRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = GetAllNamedResultNamesResponse{};

  raise_if_error(
      stub->GetAllNamedResultNames(&context, request, &response),
      context);

  return response;
}

GetAttributeF32Response
get_attribute_f32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF32Response{};

  raise_if_error(
      stub->GetAttributeF32(&context, request, &response),
      context);

  return response;
}

GetAttributeF32ArrayResponse
get_attribute_f32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF32ArrayResponse{};

  raise_if_error(
      stub->GetAttributeF32Array(&context, request, &response),
      context);

  return response;
}

GetAttributeF64Response
get_attribute_f64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF64Response{};

  raise_if_error(
      stub->GetAttributeF64(&context, request, &response),
      context);

  return response;
}

GetAttributeF64ArrayResponse
get_attribute_f64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF64ArrayResponse{};

  raise_if_error(
      stub->GetAttributeF64Array(&context, request, &response),
      context);

  return response;
}

GetAttributeI16Response
get_attribute_i16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI16Response{};

  raise_if_error(
      stub->GetAttributeI16(&context, request, &response),
      context);

  return response;
}

GetAttributeI32Response
get_attribute_i32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI32Response{};

  raise_if_error(
      stub->GetAttributeI32(&context, request, &response),
      context);

  return response;
}

GetAttributeI32ArrayResponse
get_attribute_i32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI32ArrayResponse{};

  raise_if_error(
      stub->GetAttributeI32Array(&context, request, &response),
      context);

  return response;
}

GetAttributeI64Response
get_attribute_i64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI64Response{};

  raise_if_error(
      stub->GetAttributeI64(&context, request, &response),
      context);

  return response;
}

GetAttributeI64ArrayResponse
get_attribute_i64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI64ArrayResponse{};

  raise_if_error(
      stub->GetAttributeI64Array(&context, request, &response),
      context);

  return response;
}

GetAttributeI8Response
get_attribute_i8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI8Response{};

  raise_if_error(
      stub->GetAttributeI8(&context, request, &response),
      context);

  return response;
}

GetAttributeI8ArrayResponse
get_attribute_i8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI8ArrayResponse{};

  raise_if_error(
      stub->GetAttributeI8Array(&context, request, &response),
      context);

  return response;
}

GetAttributeNIComplexDoubleArrayResponse
get_attribute_ni_complex_double_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeNIComplexDoubleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeNIComplexDoubleArrayResponse{};

  raise_if_error(
      stub->GetAttributeNIComplexDoubleArray(&context, request, &response),
      context);

  return response;
}

GetAttributeNIComplexSingleArrayResponse
get_attribute_ni_complex_single_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeNIComplexSingleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeNIComplexSingleArrayResponse{};

  raise_if_error(
      stub->GetAttributeNIComplexSingleArray(&context, request, &response),
      context);

  return response;
}

GetAttributeStringResponse
get_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeStringRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeStringResponse{};

  raise_if_error(
      stub->GetAttributeString(&context, request, &response),
      context);

  return response;
}

GetAttributeU16Response
get_attribute_u16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU16Response{};

  raise_if_error(
      stub->GetAttributeU16(&context, request, &response),
      context);

  return response;
}

GetAttributeU32Response
get_attribute_u32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU32Response{};

  raise_if_error(
      stub->GetAttributeU32(&context, request, &response),
      context);

  return response;
}

GetAttributeU32ArrayResponse
get_attribute_u32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU32ArrayResponse{};

  raise_if_error(
      stub->GetAttributeU32Array(&context, request, &response),
      context);

  return response;
}

GetAttributeU64ArrayResponse
get_attribute_u64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU64ArrayResponse{};

  raise_if_error(
      stub->GetAttributeU64Array(&context, request, &response),
      context);

  return response;
}

GetAttributeU8Response
get_attribute_u8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU8Response{};

  raise_if_error(
      stub->GetAttributeU8(&context, request, &response),
      context);

  return response;
}

GetAttributeU8ArrayResponse
get_attribute_u8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU8ArrayResponse{};

  raise_if_error(
      stub->GetAttributeU8Array(&context, request, &response),
      context);

  return response;
}

GetErrorResponse
get_error(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = GetErrorRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = GetErrorResponse{};

  raise_if_error(
      stub->GetError(&context, request, &response),
      context);

  return response;
}

GetErrorStringResponse
get_error_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = GetErrorStringRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_error_code(error_code);

  auto response = GetErrorStringResponse{};

  raise_if_error(
      stub->GetErrorString(&context, request, &response),
      context);

  return response;
}

InitializeResponse
initialize(const StubPtr& stub, const std::string& resource_name, const std::string& option_string, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitializeRequest{};
  request.set_resource_name(resource_name);
  request.set_option_string(option_string);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitializeResponse{};

  raise_if_error(
      stub->Initialize(&context, request, &response),
      context);

  return response;
}

InitializeFromNIRFSASessionResponse
initialize_from_nirfsa_session(const StubPtr& stub, const nidevice_grpc::Session& nirfsa_session, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitializeFromNIRFSASessionRequest{};
  request.mutable_nirfsa_session()->CopyFrom(nirfsa_session);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitializeFromNIRFSASessionResponse{};

  raise_if_error(
      stub->InitializeFromNIRFSASession(&context, request, &response),
      context);

  return response;
}

InitiateResponse
initiate(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const std::string& result_name)
{
  ::grpc::ClientContext context;

  auto request = InitiateRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_result_name(result_name);

  auto response = InitiateResponse{};

  raise_if_error(
      stub->Initiate(&context, request, &response),
      context);

  return response;
}

ResetAttributeResponse
reset_attribute(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = ResetAttributeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);

  auto response = ResetAttributeResponse{};

  raise_if_error(
      stub->ResetAttribute(&context, request, &response),
      context);

  return response;
}

ResetToDefaultResponse
reset_to_default(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = ResetToDefaultRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = ResetToDefaultResponse{};

  raise_if_error(
      stub->ResetToDefault(&context, request, &response),
      context);

  return response;
}

SelectMeasurementsResponse
select_measurements(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const simple_variant<std::vector<MeasurementTypes>, std::int32_t>& measurements, const bool& enable_all_traces)
{
  ::grpc::ClientContext context;

  auto request = SelectMeasurementsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_measurements_raw(copy_bitfield_as_enum_array(measurements));
  request.set_enable_all_traces(enable_all_traces);

  auto response = SelectMeasurementsResponse{};

  raise_if_error(
      stub->SelectMeasurements(&context, request, &response),
      context);

  return response;
}

SendSoftwareEdgeTriggerResponse
send_software_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = SendSoftwareEdgeTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeTrigger(&context, request, &response),
      context);

  return response;
}

SetAttributeF32Response
set_attribute_f32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const float& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeF32Response{};

  raise_if_error(
      stub->SetAttributeF32(&context, request, &response),
      context);

  return response;
}

SetAttributeF32ArrayResponse
set_attribute_f32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<float>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeF32ArrayResponse{};

  raise_if_error(
      stub->SetAttributeF32Array(&context, request, &response),
      context);

  return response;
}

SetAttributeF64Response
set_attribute_f64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const double& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeF64Response{};

  raise_if_error(
      stub->SetAttributeF64(&context, request, &response),
      context);

  return response;
}

SetAttributeF64ArrayResponse
set_attribute_f64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<double>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeF64ArrayResponse{};

  raise_if_error(
      stub->SetAttributeF64Array(&context, request, &response),
      context);

  return response;
}

SetAttributeI16Response
set_attribute_i16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const pb::int32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeI16Response{};

  raise_if_error(
      stub->SetAttributeI16(&context, request, &response),
      context);

  return response;
}

SetAttributeI32Response
set_attribute_i32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const simple_variant<NiRFmxDemodInt32AttributeValues, pb::int32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  const auto attr_val_ptr = attr_val.get_if<NiRFmxDemodInt32AttributeValues>();
  const auto attr_val_raw_ptr = attr_val.get_if<pb::int32>();
  if (attr_val_ptr) {
    request.set_attr_val(*attr_val_ptr);
  }
  else if (attr_val_raw_ptr) {
    request.set_attr_val_raw(*attr_val_raw_ptr);
  }

  auto response = SetAttributeI32Response{};

  raise_if_error(
      stub->SetAttributeI32(&context, request, &response),
      context);

  return response;
}

SetAttributeI32ArrayResponse
set_attribute_i32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<pb::int32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeI32ArrayResponse{};

  raise_if_error(
      stub->SetAttributeI32Array(&context, request, &response),
      context);

  return response;
}

SetAttributeI64Response
set_attribute_i64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const pb::int64& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeI64Response{};

  raise_if_error(
      stub->SetAttributeI64(&context, request, &response),
      context);

  return response;
}

SetAttributeI64ArrayResponse
set_attribute_i64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<pb::int64>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeI64ArrayResponse{};

  raise_if_error(
      stub->SetAttributeI64Array(&context, request, &response),
      context);

  return response;
}

SetAttributeI8Response
set_attribute_i8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const pb::int32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeI8Response{};

  raise_if_error(
      stub->SetAttributeI8(&context, request, &response),
      context);

  return response;
}

SetAttributeI8ArrayResponse
set_attribute_i8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<pb::int32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeI8ArrayResponse{};

  raise_if_error(
      stub->SetAttributeI8Array(&context, request, &response),
      context);

  return response;
}

SetAttributeNIComplexDoubleArrayResponse
set_attribute_ni_complex_double_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<nidevice_grpc::NIComplexNumber>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeNIComplexDoubleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeNIComplexDoubleArrayResponse{};

  raise_if_error(
      stub->SetAttributeNIComplexDoubleArray(&context, request, &response),
      context);

  return response;
}

SetAttributeNIComplexSingleArrayResponse
set_attribute_ni_complex_single_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<nidevice_grpc::NIComplexNumberF32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeNIComplexSingleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeNIComplexSingleArrayResponse{};

  raise_if_error(
      stub->SetAttributeNIComplexSingleArray(&context, request, &response),
      context);

  return response;
}

SetAttributeStringResponse
set_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const simple_variant<NiRFmxDemodStringAttributeValuesMapped, std::string>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeStringRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  const auto attr_val_ptr = attr_val.get_if<NiRFmxDemodStringAttributeValuesMapped>();
  const auto attr_val_raw_ptr = attr_val.get_if<std::string>();
  if (attr_val_ptr) {
    request.set_attr_val_mapped(*attr_val_ptr);
  }
  else if (attr_val_raw_ptr) {
    request.set_attr_val_raw(*attr_val_raw_ptr);
  }

  auto response = SetAttributeStringResponse{};

  raise_if_error(
      stub->SetAttributeString(&context, request, &response),
      context);

  return response;
}

SetAttributeU16Response
set_attribute_u16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const pb::uint32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU16Response{};

  raise_if_error(
      stub->SetAttributeU16(&context, request, &response),
      context);

  return response;
}

SetAttributeU32Response
set_attribute_u32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const pb::uint32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU32Response{};

  raise_if_error(
      stub->SetAttributeU32(&context, request, &response),
      context);

  return response;
}

SetAttributeU32ArrayResponse
set_attribute_u32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<pb::uint32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeU32ArrayResponse{};

  raise_if_error(
      stub->SetAttributeU32Array(&context, request, &response),
      context);

  return response;
}

SetAttributeU64ArrayResponse
set_attribute_u64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::vector<pb::uint64>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeU64ArrayResponse{};

  raise_if_error(
      stub->SetAttributeU64Array(&context, request, &response),
      context);

  return response;
}

SetAttributeU8Response
set_attribute_u8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const pb::uint32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU8Response{};

  raise_if_error(
      stub->SetAttributeU8(&context, request, &response),
      context);

  return response;
}

SetAttributeU8ArrayResponse
set_attribute_u8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const NiRFmxDemodAttribute& attribute_id, const std::string& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU8ArrayResponse{};

  raise_if_error(
      stub->SetAttributeU8Array(&context, request, &response),
      context);

  return response;
}

WaitForAcquisitionCompleteResponse
wait_for_acquisition_complete(const StubPtr& stub, const nidevice_grpc::Session& instrument, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitForAcquisitionCompleteRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_timeout(timeout);

  auto response = WaitForAcquisitionCompleteResponse{};

  raise_if_error(
      stub->WaitForAcquisitionComplete(&context, request, &response),
      context);

  return response;
}

WaitForMeasurementCompleteResponse
wait_for_measurement_complete(const StubPtr& stub, const nidevice_grpc::Session& instrument, const std::string& selector_string, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitForMeasurementCompleteRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_timeout(timeout);

  auto response = WaitForMeasurementCompleteResponse{};

  raise_if_error(
      stub->WaitForMeasurementComplete(&context, request, &response),
      context);

  return response;
}


} // namespace nirfmxdemod_grpc::experimental::client
