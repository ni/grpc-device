//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-rfmxdemod Metadata
//---------------------------------------------------------------------
#include "nirfmxdemod_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxDemod.dll";
#else
static const char* kLibraryName = "libnirfmxdemod.so.1";
#endif

namespace nirfmxdemod_grpc {

NiRFmxDemodLibrary::NiRFmxDemodLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.ADemodCfgAMCarrierSuppressed = reinterpret_cast<ADemodCfgAMCarrierSuppressedPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgAMCarrierSuppressed"));
  function_pointers_.ADemodCfgAudioFilter = reinterpret_cast<ADemodCfgAudioFilterPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgAudioFilter"));
  function_pointers_.ADemodCfgAveraging = reinterpret_cast<ADemodCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgAveraging"));
  function_pointers_.ADemodCfgCarrierCorrection = reinterpret_cast<ADemodCfgCarrierCorrectionPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgCarrierCorrection"));
  function_pointers_.ADemodCfgFMDeEmphasis = reinterpret_cast<ADemodCfgFMDeEmphasisPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgFMDeEmphasis"));
  function_pointers_.ADemodCfgMeasurementInterval = reinterpret_cast<ADemodCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgMeasurementInterval"));
  function_pointers_.ADemodCfgModulationType = reinterpret_cast<ADemodCfgModulationTypePtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgModulationType"));
  function_pointers_.ADemodCfgRBWFilter = reinterpret_cast<ADemodCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodCfgRBWFilter"));
  function_pointers_.ADemodFetchAMMaximumModulationDepth = reinterpret_cast<ADemodFetchAMMaximumModulationDepthPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchAMMaximumModulationDepth"));
  function_pointers_.ADemodFetchAMMeanModulationDepth = reinterpret_cast<ADemodFetchAMMeanModulationDepthPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchAMMeanModulationDepth"));
  function_pointers_.ADemodFetchCarrierMeasurement = reinterpret_cast<ADemodFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchCarrierMeasurement"));
  function_pointers_.ADemodFetchDemodSignalTrace = reinterpret_cast<ADemodFetchDemodSignalTracePtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchDemodSignalTrace"));
  function_pointers_.ADemodFetchDemodSpectrumTrace = reinterpret_cast<ADemodFetchDemodSpectrumTracePtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchDemodSpectrumTrace"));
  function_pointers_.ADemodFetchDistortions = reinterpret_cast<ADemodFetchDistortionsPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchDistortions"));
  function_pointers_.ADemodFetchFMMaximumDeviation = reinterpret_cast<ADemodFetchFMMaximumDeviationPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchFMMaximumDeviation"));
  function_pointers_.ADemodFetchFMMeanDeviation = reinterpret_cast<ADemodFetchFMMeanDeviationPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchFMMeanDeviation"));
  function_pointers_.ADemodFetchMeanModulationFrequency = reinterpret_cast<ADemodFetchMeanModulationFrequencyPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchMeanModulationFrequency"));
  function_pointers_.ADemodFetchPMMaximumDeviation = reinterpret_cast<ADemodFetchPMMaximumDeviationPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchPMMaximumDeviation"));
  function_pointers_.ADemodFetchPMMeanDeviation = reinterpret_cast<ADemodFetchPMMeanDeviationPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodFetchPMMeanDeviation"));
  function_pointers_.ADemodReadAM = reinterpret_cast<ADemodReadAMPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodReadAM"));
  function_pointers_.ADemodReadFM = reinterpret_cast<ADemodReadFMPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodReadFM"));
  function_pointers_.ADemodReadPM = reinterpret_cast<ADemodReadPMPtr>(shared_library_.get_function_pointer("RFmxDemod_ADemodReadPM"));
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_.get_function_pointer("RFmxDemod_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_.get_function_pointer("RFmxDemod_AnalyzeIQ1Waveform"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_.get_function_pointer("RFmxDemod_AutoLevel"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_.get_function_pointer("RFmxDemod_BuildSignalString"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgFrequency"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_.get_function_pointer("RFmxDemod_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgMechanicalAttenuation"));
  function_pointers_.CfgRF = reinterpret_cast<CfgRFPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgRF"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgReferenceLevel"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxDemod_CfgSoftwareEdgeTrigger"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxDemod_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_.get_function_pointer("RFmxDemod_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_.get_function_pointer("RFmxDemod_ClearNamedResult"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxDemod_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("RFmxDemod_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("RFmxDemod_Commit"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxDemod_CreateSignalConfiguration"));
  function_pointers_.DDemodCfgAveraging = reinterpret_cast<DDemodCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgAveraging"));
  function_pointers_.DDemodCfgEVMNormalizationReference = reinterpret_cast<DDemodCfgEVMNormalizationReferencePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgEVMNormalizationReference"));
  function_pointers_.DDemodCfgEqualizer = reinterpret_cast<DDemodCfgEqualizerPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgEqualizer"));
  function_pointers_.DDemodCfgEqualizerInitialCoefficients = reinterpret_cast<DDemodCfgEqualizerInitialCoefficientsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgEqualizerInitialCoefficients"));
  function_pointers_.DDemodCfgFSKDeviation = reinterpret_cast<DDemodCfgFSKDeviationPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgFSKDeviation"));
  function_pointers_.DDemodCfgM = reinterpret_cast<DDemodCfgMPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgM"));
  function_pointers_.DDemodCfgMeasurementFilter = reinterpret_cast<DDemodCfgMeasurementFilterPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgMeasurementFilter"));
  function_pointers_.DDemodCfgMeasurementFilterCustomCoefficients = reinterpret_cast<DDemodCfgMeasurementFilterCustomCoefficientsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgMeasurementFilterCustomCoefficients"));
  function_pointers_.DDemodCfgModulationType = reinterpret_cast<DDemodCfgModulationTypePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgModulationType"));
  function_pointers_.DDemodCfgNumberOfSymbols = reinterpret_cast<DDemodCfgNumberOfSymbolsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgNumberOfSymbols"));
  function_pointers_.DDemodCfgPSKFormat = reinterpret_cast<DDemodCfgPSKFormatPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgPSKFormat"));
  function_pointers_.DDemodCfgPulseShapingFilter = reinterpret_cast<DDemodCfgPulseShapingFilterPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgPulseShapingFilter"));
  function_pointers_.DDemodCfgPulseShapingFilterCustomCoefficients = reinterpret_cast<DDemodCfgPulseShapingFilterCustomCoefficientsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgPulseShapingFilterCustomCoefficients"));
  function_pointers_.DDemodCfgSamplesPerSymbol = reinterpret_cast<DDemodCfgSamplesPerSymbolPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgSamplesPerSymbol"));
  function_pointers_.DDemodCfgSignalStructure = reinterpret_cast<DDemodCfgSignalStructurePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgSignalStructure"));
  function_pointers_.DDemodCfgSpectrumInverted = reinterpret_cast<DDemodCfgSpectrumInvertedPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgSpectrumInverted"));
  function_pointers_.DDemodCfgSymbolMap = reinterpret_cast<DDemodCfgSymbolMapPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgSymbolMap"));
  function_pointers_.DDemodCfgSymbolRate = reinterpret_cast<DDemodCfgSymbolRatePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgSymbolRate"));
  function_pointers_.DDemodCfgSynchronization = reinterpret_cast<DDemodCfgSynchronizationPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodCfgSynchronization"));
  function_pointers_.DDemodFetchCarrierMeasurement = reinterpret_cast<DDemodFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchCarrierMeasurement"));
  function_pointers_.DDemodFetchConstellationTrace = reinterpret_cast<DDemodFetchConstellationTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchConstellationTrace"));
  function_pointers_.DDemodFetchDemodulatedBits = reinterpret_cast<DDemodFetchDemodulatedBitsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchDemodulatedBits"));
  function_pointers_.DDemodFetchEVM = reinterpret_cast<DDemodFetchEVMPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchEVM"));
  function_pointers_.DDemodFetchEVMTrace = reinterpret_cast<DDemodFetchEVMTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchEVMTrace"));
  function_pointers_.DDemodFetchEqualizerCoefficients = reinterpret_cast<DDemodFetchEqualizerCoefficientsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchEqualizerCoefficients"));
  function_pointers_.DDemodFetchFSKDeviationTrace = reinterpret_cast<DDemodFetchFSKDeviationTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchFSKDeviationTrace"));
  function_pointers_.DDemodFetchFSKResults = reinterpret_cast<DDemodFetchFSKResultsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchFSKResults"));
  function_pointers_.DDemodFetchIQImpairments = reinterpret_cast<DDemodFetchIQImpairmentsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchIQImpairments"));
  function_pointers_.DDemodFetchMagnitudeError = reinterpret_cast<DDemodFetchMagnitudeErrorPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMagnitudeError"));
  function_pointers_.DDemodFetchMagnitudeErrorTrace = reinterpret_cast<DDemodFetchMagnitudeErrorTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMagnitudeErrorTrace"));
  function_pointers_.DDemodFetchMeanAmplitudeDroop = reinterpret_cast<DDemodFetchMeanAmplitudeDroopPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMeanAmplitudeDroop"));
  function_pointers_.DDemodFetchMeanIQOriginOffset = reinterpret_cast<DDemodFetchMeanIQOriginOffsetPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMeanIQOriginOffset"));
  function_pointers_.DDemodFetchMeanQuadratureSkew = reinterpret_cast<DDemodFetchMeanQuadratureSkewPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMeanQuadratureSkew"));
  function_pointers_.DDemodFetchMeanRhoFactor = reinterpret_cast<DDemodFetchMeanRhoFactorPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMeanRhoFactor"));
  function_pointers_.DDemodFetchMeasurementWaveform = reinterpret_cast<DDemodFetchMeasurementWaveformPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchMeasurementWaveform"));
  function_pointers_.DDemodFetchOffsetConstellationTrace = reinterpret_cast<DDemodFetchOffsetConstellationTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchOffsetConstellationTrace"));
  function_pointers_.DDemodFetchOffsetEVM = reinterpret_cast<DDemodFetchOffsetEVMPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchOffsetEVM"));
  function_pointers_.DDemodFetchOffsetEVMTrace = reinterpret_cast<DDemodFetchOffsetEVMTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchOffsetEVMTrace"));
  function_pointers_.DDemodFetchPhaseError = reinterpret_cast<DDemodFetchPhaseErrorPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchPhaseError"));
  function_pointers_.DDemodFetchPhaseErrorTrace = reinterpret_cast<DDemodFetchPhaseErrorTracePtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchPhaseErrorTrace"));
  function_pointers_.DDemodFetchReferenceWaveform = reinterpret_cast<DDemodFetchReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchReferenceWaveform"));
  function_pointers_.DDemodFetchSyncFound = reinterpret_cast<DDemodFetchSyncFoundPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodFetchSyncFound"));
  function_pointers_.DDemodGetEqualizerInitialCoefficients = reinterpret_cast<DDemodGetEqualizerInitialCoefficientsPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodGetEqualizerInitialCoefficients"));
  function_pointers_.DDemodGetSymbolMap = reinterpret_cast<DDemodGetSymbolMapPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodGetSymbolMap"));
  function_pointers_.DDemodRead = reinterpret_cast<DDemodReadPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodRead"));
  function_pointers_.DDemodSetSymbolMap = reinterpret_cast<DDemodSetSymbolMapPtr>(shared_library_.get_function_pointer("RFmxDemod_DDemodSetSymbolMap"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxDemod_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_.get_function_pointer("RFmxDemod_DisableTrigger"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxDemod_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxDemod_GetErrorString"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("RFmxDemod_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_.get_function_pointer("RFmxDemod_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("RFmxDemod_Initiate"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("RFmxDemod_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_.get_function_pointer("RFmxDemod_ResetToDefault"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_.get_function_pointer("RFmxDemod_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxDemod_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxDemod_SetAttributeU8Array"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_.get_function_pointer("RFmxDemod_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_.get_function_pointer("RFmxDemod_WaitForMeasurementComplete"));
}

NiRFmxDemodLibrary::~NiRFmxDemodLibrary()
{
}

::grpc::Status NiRFmxDemodLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxDemodLibrary::ADemodCfgAMCarrierSuppressed(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amCarrierSuppressedEnabled)
{
  if (!function_pointers_.ADemodCfgAMCarrierSuppressed) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgAMCarrierSuppressed.");
  }
  return function_pointers_.ADemodCfgAMCarrierSuppressed(instrumentHandle, selectorString, amCarrierSuppressedEnabled);
}

int32 NiRFmxDemodLibrary::ADemodCfgAudioFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 audioFilterType, float64 audioFilterLowerCutoffFrequency, float64 audioFilterUpperCutoffFrequency)
{
  if (!function_pointers_.ADemodCfgAudioFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgAudioFilter.");
  }
  return function_pointers_.ADemodCfgAudioFilter(instrumentHandle, selectorString, audioFilterType, audioFilterLowerCutoffFrequency, audioFilterUpperCutoffFrequency);
}

int32 NiRFmxDemodLibrary::ADemodCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.ADemodCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgAveraging.");
  }
  return function_pointers_.ADemodCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxDemodLibrary::ADemodCfgCarrierCorrection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierFrequencyCorrectionEnabled, int32 carrierPhaseCorrectionEnabled)
{
  if (!function_pointers_.ADemodCfgCarrierCorrection) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgCarrierCorrection.");
  }
  return function_pointers_.ADemodCfgCarrierCorrection(instrumentHandle, selectorString, carrierFrequencyCorrectionEnabled, carrierPhaseCorrectionEnabled);
}

int32 NiRFmxDemodLibrary::ADemodCfgFMDeEmphasis(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 deEmphasis)
{
  if (!function_pointers_.ADemodCfgFMDeEmphasis) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgFMDeEmphasis.");
  }
  return function_pointers_.ADemodCfgFMDeEmphasis(instrumentHandle, selectorString, deEmphasis);
}

int32 NiRFmxDemodLibrary::ADemodCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.ADemodCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgMeasurementInterval.");
  }
  return function_pointers_.ADemodCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 NiRFmxDemodLibrary::ADemodCfgModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType)
{
  if (!function_pointers_.ADemodCfgModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgModulationType.");
  }
  return function_pointers_.ADemodCfgModulationType(instrumentHandle, selectorString, modulationType);
}

int32 NiRFmxDemodLibrary::ADemodCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rbwrrcAlpha)
{
  if (!function_pointers_.ADemodCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodCfgRBWFilter.");
  }
  return function_pointers_.ADemodCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rbwrrcAlpha);
}

int32 NiRFmxDemodLibrary::ADemodFetchAMMaximumModulationDepth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumModulationDepth, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak)
{
  if (!function_pointers_.ADemodFetchAMMaximumModulationDepth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchAMMaximumModulationDepth.");
  }
  return function_pointers_.ADemodFetchAMMaximumModulationDepth(instrumentHandle, selectorString, timeout, maximumModulationDepth, maximumHalfPeakToPeak, maximumRMS, maximumPositivePeak, maximumNegativePeak);
}

int32 NiRFmxDemodLibrary::ADemodFetchAMMeanModulationDepth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationDepth, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak)
{
  if (!function_pointers_.ADemodFetchAMMeanModulationDepth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchAMMeanModulationDepth.");
  }
  return function_pointers_.ADemodFetchAMMeanModulationDepth(instrumentHandle, selectorString, timeout, meanModulationDepth, meanHalfPeakToPeak, meanRMS, meanPositivePeak, meanNegativePeak);
}

int32 NiRFmxDemodLibrary::ADemodFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanCarrierFrequencyError, float64* meanCarrierPower)
{
  if (!function_pointers_.ADemodFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchCarrierMeasurement.");
  }
  return function_pointers_.ADemodFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, meanCarrierFrequencyError, meanCarrierPower);
}

int32 NiRFmxDemodLibrary::ADemodFetchDemodSignalTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 demodulatedSignal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ADemodFetchDemodSignalTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchDemodSignalTrace.");
  }
  return function_pointers_.ADemodFetchDemodSignalTrace(instrumentHandle, selectorString, timeout, x0, dx, demodulatedSignal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::ADemodFetchDemodSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 demodulatedSpectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ADemodFetchDemodSpectrumTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchDemodSpectrumTrace.");
  }
  return function_pointers_.ADemodFetchDemodSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, demodulatedSpectrum, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::ADemodFetchDistortions(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageSINAD, float64* averageSNR, float64* averageTHD, float64* averageTHDWithNoise)
{
  if (!function_pointers_.ADemodFetchDistortions) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchDistortions.");
  }
  return function_pointers_.ADemodFetchDistortions(instrumentHandle, selectorString, timeout, averageSINAD, averageSNR, averageTHD, averageTHDWithNoise);
}

int32 NiRFmxDemodLibrary::ADemodFetchFMMaximumDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumDeviation, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak)
{
  if (!function_pointers_.ADemodFetchFMMaximumDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchFMMaximumDeviation.");
  }
  return function_pointers_.ADemodFetchFMMaximumDeviation(instrumentHandle, selectorString, timeout, maximumDeviation, maximumHalfPeakToPeak, maximumRMS, maximumPositivePeak, maximumNegativePeak);
}

int32 NiRFmxDemodLibrary::ADemodFetchFMMeanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak)
{
  if (!function_pointers_.ADemodFetchFMMeanDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchFMMeanDeviation.");
  }
  return function_pointers_.ADemodFetchFMMeanDeviation(instrumentHandle, selectorString, timeout, meanDeviation, meanHalfPeakToPeak, meanRMS, meanPositivePeak, meanNegativePeak);
}

int32 NiRFmxDemodLibrary::ADemodFetchMeanModulationFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationFrequency)
{
  if (!function_pointers_.ADemodFetchMeanModulationFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchMeanModulationFrequency.");
  }
  return function_pointers_.ADemodFetchMeanModulationFrequency(instrumentHandle, selectorString, timeout, meanModulationFrequency);
}

int32 NiRFmxDemodLibrary::ADemodFetchPMMaximumDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumDeviation, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak)
{
  if (!function_pointers_.ADemodFetchPMMaximumDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchPMMaximumDeviation.");
  }
  return function_pointers_.ADemodFetchPMMaximumDeviation(instrumentHandle, selectorString, timeout, maximumDeviation, maximumHalfPeakToPeak, maximumRMS, maximumPositivePeak, maximumNegativePeak);
}

int32 NiRFmxDemodLibrary::ADemodFetchPMMeanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak)
{
  if (!function_pointers_.ADemodFetchPMMeanDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodFetchPMMeanDeviation.");
  }
  return function_pointers_.ADemodFetchPMMeanDeviation(instrumentHandle, selectorString, timeout, meanDeviation, meanHalfPeakToPeak, meanRMS, meanPositivePeak, meanNegativePeak);
}

int32 NiRFmxDemodLibrary::ADemodReadAM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationDepth, float64* meanCarrierPower)
{
  if (!function_pointers_.ADemodReadAM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodReadAM.");
  }
  return function_pointers_.ADemodReadAM(instrumentHandle, selectorString, timeout, meanModulationDepth, meanCarrierPower);
}

int32 NiRFmxDemodLibrary::ADemodReadFM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanCarrierFrequencyError)
{
  if (!function_pointers_.ADemodReadFM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodReadFM.");
  }
  return function_pointers_.ADemodReadFM(instrumentHandle, selectorString, timeout, meanDeviation, meanCarrierFrequencyError);
}

int32 NiRFmxDemodLibrary::ADemodReadPM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanCarrierFrequencyError)
{
  if (!function_pointers_.ADemodReadPM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ADemodReadPM.");
  }
  return function_pointers_.ADemodReadPM(instrumentHandle, selectorString, timeout, meanDeviation, meanCarrierFrequencyError);
}

int32 NiRFmxDemodLibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_AbortMeasurements.");
  }
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
}

int32 NiRFmxDemodLibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_AnalyzeIQ1Waveform.");
  }
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 NiRFmxDemodLibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_AutoLevel.");
  }
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, bandwidth, measurementInterval, referenceLevel);
}

int32 NiRFmxDemodLibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_BuildSignalString.");
  }
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 NiRFmxDemodLibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgDigitalEdgeTrigger.");
  }
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 NiRFmxDemodLibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgExternalAttenuation.");
  }
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 NiRFmxDemodLibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgFrequency.");
  }
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 NiRFmxDemodLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgFrequencyReference.");
  }
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 NiRFmxDemodLibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgIQPowerEdgeTrigger.");
  }
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeLevel, iqPowerEdgeSlope, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, enableTrigger);
}

int32 NiRFmxDemodLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgMechanicalAttenuation.");
  }
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 NiRFmxDemodLibrary::CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  if (!function_pointers_.CfgRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgRF.");
  }
  return function_pointers_.CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
}

int32 NiRFmxDemodLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgRFAttenuation.");
  }
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 NiRFmxDemodLibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgReferenceLevel.");
  }
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 NiRFmxDemodLibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CfgSoftwareEdgeTrigger.");
  }
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 NiRFmxDemodLibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CheckMeasurementStatus.");
  }
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 NiRFmxDemodLibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ClearAllNamedResults.");
  }
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 NiRFmxDemodLibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ClearNamedResult.");
  }
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
}

int32 NiRFmxDemodLibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CloneSignalConfiguration.");
  }
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 NiRFmxDemodLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_Close.");
  }
  return function_pointers_.Close(instrumentHandle, forceDestroy);
}

int32 NiRFmxDemodLibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_Commit.");
  }
  return function_pointers_.Commit(instrumentHandle, selectorString);
}

int32 NiRFmxDemodLibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_CreateSignalConfiguration.");
  }
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxDemodLibrary::DDemodCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.DDemodCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgAveraging.");
  }
  return function_pointers_.DDemodCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxDemodLibrary::DDemodCfgEVMNormalizationReference(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmNormRef)
{
  if (!function_pointers_.DDemodCfgEVMNormalizationReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgEVMNormalizationReference.");
  }
  return function_pointers_.DDemodCfgEVMNormalizationReference(instrumentHandle, selectorString, evmNormRef);
}

int32 NiRFmxDemodLibrary::DDemodCfgEqualizer(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 equalizerMode, int32 equalizerFilterLength, float64 x0, float64 dx, NIComplexSingle equalizerInitialCoefficients[], int32 equalizerTrainingCount, float64 equalizerConvergenceFactor, int32 arraySize)
{
  if (!function_pointers_.DDemodCfgEqualizer) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgEqualizer.");
  }
  return function_pointers_.DDemodCfgEqualizer(instrumentHandle, selectorString, equalizerMode, equalizerFilterLength, x0, dx, equalizerInitialCoefficients, equalizerTrainingCount, equalizerConvergenceFactor, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgEqualizerInitialCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle equalizerInitialCoefficients[], int32 arraySize)
{
  if (!function_pointers_.DDemodCfgEqualizerInitialCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgEqualizerInitialCoefficients.");
  }
  return function_pointers_.DDemodCfgEqualizerInitialCoefficients(instrumentHandle, selectorString, x0, dx, equalizerInitialCoefficients, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgFSKDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fskDeviation, int32 fskRefCompEnabled)
{
  if (!function_pointers_.DDemodCfgFSKDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgFSKDeviation.");
  }
  return function_pointers_.DDemodCfgFSKDeviation(instrumentHandle, selectorString, fskDeviation, fskRefCompEnabled);
}

int32 NiRFmxDemodLibrary::DDemodCfgM(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 m)
{
  if (!function_pointers_.DDemodCfgM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgM.");
  }
  return function_pointers_.DDemodCfgM(instrumentHandle, selectorString, m);
}

int32 NiRFmxDemodLibrary::DDemodCfgMeasurementFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementFilterType, float64 x0, float64 dx, float32 measurementFilterCustomCoefficients[], int32 arraySize)
{
  if (!function_pointers_.DDemodCfgMeasurementFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgMeasurementFilter.");
  }
  return function_pointers_.DDemodCfgMeasurementFilter(instrumentHandle, selectorString, measurementFilterType, x0, dx, measurementFilterCustomCoefficients, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgMeasurementFilterCustomCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 measurementFilterCustomCoefficients[], int32 arraySize)
{
  if (!function_pointers_.DDemodCfgMeasurementFilterCustomCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgMeasurementFilterCustomCoefficients.");
  }
  return function_pointers_.DDemodCfgMeasurementFilterCustomCoefficients(instrumentHandle, selectorString, x0, dx, measurementFilterCustomCoefficients, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType, int32 m, int32 differentialEnabled)
{
  if (!function_pointers_.DDemodCfgModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgModulationType.");
  }
  return function_pointers_.DDemodCfgModulationType(instrumentHandle, selectorString, modulationType, m, differentialEnabled);
}

int32 NiRFmxDemodLibrary::DDemodCfgNumberOfSymbols(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSymbols)
{
  if (!function_pointers_.DDemodCfgNumberOfSymbols) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgNumberOfSymbols.");
  }
  return function_pointers_.DDemodCfgNumberOfSymbols(instrumentHandle, selectorString, numberOfSymbols);
}

int32 NiRFmxDemodLibrary::DDemodCfgPSKFormat(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pskFormat)
{
  if (!function_pointers_.DDemodCfgPSKFormat) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgPSKFormat.");
  }
  return function_pointers_.DDemodCfgPSKFormat(instrumentHandle, selectorString, pskFormat);
}

int32 NiRFmxDemodLibrary::DDemodCfgPulseShapingFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pulseShapingFilterType, float64 pulseShapingFilterParameter, float64 x0, float64 dx, float32 pulseShapingFilterCustomCoefficients[], int32 arraySize)
{
  if (!function_pointers_.DDemodCfgPulseShapingFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgPulseShapingFilter.");
  }
  return function_pointers_.DDemodCfgPulseShapingFilter(instrumentHandle, selectorString, pulseShapingFilterType, pulseShapingFilterParameter, x0, dx, pulseShapingFilterCustomCoefficients, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgPulseShapingFilterCustomCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 pulseShapingFilterCustomCoefficients[], int32 arraySize)
{
  if (!function_pointers_.DDemodCfgPulseShapingFilterCustomCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgPulseShapingFilterCustomCoefficients.");
  }
  return function_pointers_.DDemodCfgPulseShapingFilterCustomCoefficients(instrumentHandle, selectorString, x0, dx, pulseShapingFilterCustomCoefficients, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgSamplesPerSymbol(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 samplesPerSymbol)
{
  if (!function_pointers_.DDemodCfgSamplesPerSymbol) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgSamplesPerSymbol.");
  }
  return function_pointers_.DDemodCfgSamplesPerSymbol(instrumentHandle, selectorString, samplesPerSymbol);
}

int32 NiRFmxDemodLibrary::DDemodCfgSignalStructure(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 signalStructure)
{
  if (!function_pointers_.DDemodCfgSignalStructure) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgSignalStructure.");
  }
  return function_pointers_.DDemodCfgSignalStructure(instrumentHandle, selectorString, signalStructure);
}

int32 NiRFmxDemodLibrary::DDemodCfgSpectrumInverted(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumInverted)
{
  if (!function_pointers_.DDemodCfgSpectrumInverted) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgSpectrumInverted.");
  }
  return function_pointers_.DDemodCfgSpectrumInverted(instrumentHandle, selectorString, spectrumInverted);
}

int32 NiRFmxDemodLibrary::DDemodCfgSymbolMap(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 symbolMapType, NIComplexSingle symbolMap[], int32 arraySize)
{
  if (!function_pointers_.DDemodCfgSymbolMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgSymbolMap.");
  }
  return function_pointers_.DDemodCfgSymbolMap(instrumentHandle, selectorString, symbolMapType, symbolMap, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodCfgSymbolRate(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 symbolRate)
{
  if (!function_pointers_.DDemodCfgSymbolRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgSymbolRate.");
  }
  return function_pointers_.DDemodCfgSymbolRate(instrumentHandle, selectorString, symbolRate);
}

int32 NiRFmxDemodLibrary::DDemodCfgSynchronization(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationEnabled, int8 syncBits[], int32 measurementOffset, int32 arraySize)
{
  if (!function_pointers_.DDemodCfgSynchronization) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodCfgSynchronization.");
  }
  return function_pointers_.DDemodCfgSynchronization(instrumentHandle, selectorString, synchronizationEnabled, syncBits, measurementOffset, arraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFrequencyOffset, float64* meanFrequencyDrift, float64* meanPhaseError)
{
  if (!function_pointers_.DDemodFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchCarrierMeasurement.");
  }
  return function_pointers_.DDemodFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, meanFrequencyOffset, meanFrequencyDrift, meanPhaseError);
}

int32 NiRFmxDemodLibrary::DDemodFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellationTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchConstellationTrace.");
  }
  return function_pointers_.DDemodFetchConstellationTrace(instrumentHandle, selectorString, timeout, constellationTrace, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 demodulatedBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchDemodulatedBits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchDemodulatedBits.");
  }
  return function_pointers_.DDemodFetchDemodulatedBits(instrumentHandle, selectorString, timeout, demodulatedBits, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* maximumRMSEVM, float64* meanModulationErrorRatio, float64* maximumPeakEVM, float64* meanPeakEVM)
{
  if (!function_pointers_.DDemodFetchEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchEVM.");
  }
  return function_pointers_.DDemodFetchEVM(instrumentHandle, selectorString, timeout, meanRMSEVM, maximumRMSEVM, meanModulationErrorRatio, maximumPeakEVM, meanPeakEVM);
}

int32 NiRFmxDemodLibrary::DDemodFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchEVMTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchEVMTrace.");
  }
  return function_pointers_.DDemodFetchEVMTrace(instrumentHandle, selectorString, timeout, x0, dx, evm, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchEqualizerCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle equalizerCoefficients[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchEqualizerCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchEqualizerCoefficients.");
  }
  return function_pointers_.DDemodFetchEqualizerCoefficients(instrumentHandle, selectorString, timeout, x0, dx, equalizerCoefficients, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchFSKDeviationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 fskError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchFSKDeviationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchFSKDeviationTrace.");
  }
  return function_pointers_.DDemodFetchFSKDeviationTrace(instrumentHandle, selectorString, timeout, x0, dx, fskError, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchFSKResults(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFSKDeviation, float64* meanRMSFSKError, float64* maximumPeakFSKError)
{
  if (!function_pointers_.DDemodFetchFSKResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchFSKResults.");
  }
  return function_pointers_.DDemodFetchFSKResults(instrumentHandle, selectorString, timeout, meanFSKDeviation, meanRMSFSKError, maximumPeakFSKError);
}

int32 NiRFmxDemodLibrary::DDemodFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQGainImbalance, float64* meanQuadratureSkew, float64* meanIQOriginOffset)
{
  if (!function_pointers_.DDemodFetchIQImpairments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchIQImpairments.");
  }
  return function_pointers_.DDemodFetchIQImpairments(instrumentHandle, selectorString, timeout, meanIQGainImbalance, meanQuadratureSkew, meanIQOriginOffset);
}

int32 NiRFmxDemodLibrary::DDemodFetchMagnitudeError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanMagnitudeError, float64* maximumMagnitudeError)
{
  if (!function_pointers_.DDemodFetchMagnitudeError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMagnitudeError.");
  }
  return function_pointers_.DDemodFetchMagnitudeError(instrumentHandle, selectorString, timeout, meanMagnitudeError, maximumMagnitudeError);
}

int32 NiRFmxDemodLibrary::DDemodFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchMagnitudeErrorTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMagnitudeErrorTrace.");
  }
  return function_pointers_.DDemodFetchMagnitudeErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, magnitudeError, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchMeanAmplitudeDroop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanAmplitudeDroop)
{
  if (!function_pointers_.DDemodFetchMeanAmplitudeDroop) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMeanAmplitudeDroop.");
  }
  return function_pointers_.DDemodFetchMeanAmplitudeDroop(instrumentHandle, selectorString, timeout, meanAmplitudeDroop);
}

int32 NiRFmxDemodLibrary::DDemodFetchMeanIQOriginOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32* meanIQOriginOffset)
{
  if (!function_pointers_.DDemodFetchMeanIQOriginOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMeanIQOriginOffset.");
  }
  return function_pointers_.DDemodFetchMeanIQOriginOffset(instrumentHandle, selectorString, timeout, meanIQOriginOffset);
}

int32 NiRFmxDemodLibrary::DDemodFetchMeanQuadratureSkew(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32* meanQuadratureSkew)
{
  if (!function_pointers_.DDemodFetchMeanQuadratureSkew) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMeanQuadratureSkew.");
  }
  return function_pointers_.DDemodFetchMeanQuadratureSkew(instrumentHandle, selectorString, timeout, meanQuadratureSkew);
}

int32 NiRFmxDemodLibrary::DDemodFetchMeanRhoFactor(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRhoFactor)
{
  if (!function_pointers_.DDemodFetchMeanRhoFactor) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMeanRhoFactor.");
  }
  return function_pointers_.DDemodFetchMeanRhoFactor(instrumentHandle, selectorString, timeout, meanRhoFactor);
}

int32 NiRFmxDemodLibrary::DDemodFetchMeasurementWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle measurementWaveform[], int32 arraySize, int32* actualArraySize, int32* samplesPerSymbol, float64* symbolRate)
{
  if (!function_pointers_.DDemodFetchMeasurementWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchMeasurementWaveform.");
  }
  return function_pointers_.DDemodFetchMeasurementWaveform(instrumentHandle, selectorString, timeout, x0, dx, measurementWaveform, arraySize, actualArraySize, samplesPerSymbol, symbolRate);
}

int32 NiRFmxDemodLibrary::DDemodFetchOffsetConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle offsetConstellationTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchOffsetConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchOffsetConstellationTrace.");
  }
  return function_pointers_.DDemodFetchOffsetConstellationTrace(instrumentHandle, selectorString, timeout, offsetConstellationTrace, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchOffsetEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSOffsetEVM, float64* maximumRMSOffsetEVM, float64* maximumPeakOffsetEVM, float64* meanPeakOffsetEVM)
{
  if (!function_pointers_.DDemodFetchOffsetEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchOffsetEVM.");
  }
  return function_pointers_.DDemodFetchOffsetEVM(instrumentHandle, selectorString, timeout, meanRMSOffsetEVM, maximumRMSOffsetEVM, maximumPeakOffsetEVM, meanPeakOffsetEVM);
}

int32 NiRFmxDemodLibrary::DDemodFetchOffsetEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 offsetEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchOffsetEVMTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchOffsetEVMTrace.");
  }
  return function_pointers_.DDemodFetchOffsetEVMTrace(instrumentHandle, selectorString, timeout, x0, dx, offsetEVM, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPhaseError, float64* maximumPhaseError)
{
  if (!function_pointers_.DDemodFetchPhaseError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchPhaseError.");
  }
  return function_pointers_.DDemodFetchPhaseError(instrumentHandle, selectorString, timeout, meanPhaseError, maximumPhaseError);
}

int32 NiRFmxDemodLibrary::DDemodFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchPhaseErrorTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchPhaseErrorTrace.");
  }
  return function_pointers_.DDemodFetchPhaseErrorTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseError, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodFetchReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchReferenceWaveform.");
  }
  return function_pointers_.DDemodFetchReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, referenceWaveform, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodFetchSyncFound(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* syncFound)
{
  if (!function_pointers_.DDemodFetchSyncFound) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodFetchSyncFound.");
  }
  return function_pointers_.DDemodFetchSyncFound(instrumentHandle, selectorString, timeout, syncFound);
}

int32 NiRFmxDemodLibrary::DDemodGetEqualizerInitialCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* x0, float64* dx, NIComplexSingle equalizerInitialCoefficients[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodGetEqualizerInitialCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodGetEqualizerInitialCoefficients.");
  }
  return function_pointers_.DDemodGetEqualizerInitialCoefficients(instrumentHandle, selectorString, x0, dx, equalizerInitialCoefficients, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodGetSymbolMap(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle symbolMap[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DDemodGetSymbolMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodGetSymbolMap.");
  }
  return function_pointers_.DDemodGetSymbolMap(instrumentHandle, selectorString, symbolMap, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::DDemodRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFrequencyOffset, float64* meanRMSEVM, float64* maximumPeakEVM, float64* meanModulationErrorRatio)
{
  if (!function_pointers_.DDemodRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodRead.");
  }
  return function_pointers_.DDemodRead(instrumentHandle, selectorString, timeout, meanFrequencyOffset, meanRMSEVM, maximumPeakEVM, meanModulationErrorRatio);
}

int32 NiRFmxDemodLibrary::DDemodSetSymbolMap(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.DDemodSetSymbolMap) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DDemodSetSymbolMap.");
  }
  return function_pointers_.DDemodSetSymbolMap(instrumentHandle, selectorString, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DeleteSignalConfiguration.");
  }
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxDemodLibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_DisableTrigger.");
  }
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
}

int32 NiRFmxDemodLibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAllNamedResultNames.");
  }
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 NiRFmxDemodLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeF32.");
  }
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeF32Array.");
  }
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeF64.");
  }
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeF64Array.");
  }
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI16.");
  }
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI32.");
  }
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI32Array.");
  }
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI64.");
  }
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI64Array.");
  }
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI8.");
  }
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeI8Array.");
  }
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeString.");
  }
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeU16.");
  }
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeU32.");
  }
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeU32Array.");
  }
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeU64Array.");
  }
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeU8.");
  }
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetAttributeU8Array.");
  }
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxDemodLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxDemodLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxDemodLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_Initialize.");
  }
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 NiRFmxDemodLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_InitializeFromNIRFSASession.");
  }
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 NiRFmxDemodLibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_Initiate.");
  }
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
}

int32 NiRFmxDemodLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 NiRFmxDemodLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_ResetToDefault.");
  }
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
}

int32 NiRFmxDemodLibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SelectMeasurements.");
  }
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 NiRFmxDemodLibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 NiRFmxDemodLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeF32.");
  }
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeF32Array.");
  }
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeF64.");
  }
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeF64Array.");
  }
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI16.");
  }
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI32.");
  }
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI32Array.");
  }
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI64.");
  }
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI64Array.");
  }
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI8.");
  }
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeI8Array.");
  }
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeString.");
  }
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeU16.");
  }
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeU32.");
  }
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeU32Array.");
  }
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeU64Array.");
  }
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeU8.");
  }
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxDemodLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_SetAttributeU8Array.");
  }
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxDemodLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_WaitForAcquisitionComplete.");
  }
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 NiRFmxDemodLibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxDemod_WaitForMeasurementComplete.");
  }
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxdemod_grpc
