//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-rfmxdemod
//---------------------------------------------------------------------
#ifndef NIRFMXDEMOD_GRPC_MOCK_LIBRARY_H
#define NIRFMXDEMOD_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nirfmxdemod_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiRFmxDemodMockLibrary : public nirfmxdemod_grpc::NiRFmxDemodLibraryInterface {
 public:
  MOCK_METHOD(int32, ADemodCfgAMCarrierSuppressed, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amCarrierSuppressedEnabled), (override));
  MOCK_METHOD(int32, ADemodCfgAudioFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 audioFilterType, float64 audioFilterLowerCutoffFrequency, float64 audioFilterUpperCutoffFrequency), (override));
  MOCK_METHOD(int32, ADemodCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, ADemodCfgCarrierCorrection, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierFrequencyCorrectionEnabled, int32 carrierPhaseCorrectionEnabled), (override));
  MOCK_METHOD(int32, ADemodCfgFMDeEmphasis, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 deEmphasis), (override));
  MOCK_METHOD(int32, ADemodCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, ADemodCfgModulationType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType), (override));
  MOCK_METHOD(int32, ADemodCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rbwrrcAlpha), (override));
  MOCK_METHOD(int32, ADemodFetchAMMaximumModulationDepth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumModulationDepth, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak), (override));
  MOCK_METHOD(int32, ADemodFetchAMMeanModulationDepth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationDepth, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak), (override));
  MOCK_METHOD(int32, ADemodFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanCarrierFrequencyError, float64* meanCarrierPower), (override));
  MOCK_METHOD(int32, ADemodFetchDemodSignalTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 demodulatedSignal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ADemodFetchDemodSpectrumTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 demodulatedSpectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ADemodFetchDistortions, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageSINAD, float64* averageSNR, float64* averageTHD, float64* averageTHDWithNoise), (override));
  MOCK_METHOD(int32, ADemodFetchFMMaximumDeviation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumDeviation, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak), (override));
  MOCK_METHOD(int32, ADemodFetchFMMeanDeviation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak), (override));
  MOCK_METHOD(int32, ADemodFetchMeanModulationFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationFrequency), (override));
  MOCK_METHOD(int32, ADemodFetchPMMaximumDeviation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumDeviation, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak), (override));
  MOCK_METHOD(int32, ADemodFetchPMMeanDeviation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak), (override));
  MOCK_METHOD(int32, ADemodReadAM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationDepth, float64* meanCarrierPower), (override));
  MOCK_METHOD(int32, ADemodReadFM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanCarrierFrequencyError), (override));
  MOCK_METHOD(int32, ADemodReadPM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanCarrierFrequencyError), (override));
  MOCK_METHOD(int32, AbortMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, AnalyzeIQ1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AutoLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel), (override));
  MOCK_METHOD(int32, BuildSignalString, (char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, CfgDigitalEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgExternalAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency), (override));
  MOCK_METHOD(int32, CfgFrequencyReference, (niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency), (override));
  MOCK_METHOD(int32, CfgIQPowerEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgMechanicalAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue), (override));
  MOCK_METHOD(int32, CfgRF, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgRFAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue), (override));
  MOCK_METHOD(int32, CfgReferenceLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel), (override));
  MOCK_METHOD(int32, CfgSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CheckMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone), (override));
  MOCK_METHOD(int32, ClearAllNamedResults, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, ClearNamedResult, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CloneSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]), (override));
  MOCK_METHOD(int32, Close, (niRFmxInstrHandle instrumentHandle, int32 forceDestroy), (override));
  MOCK_METHOD(int32, Commit, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CreateSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DDemodCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, DDemodCfgEVMNormalizationReference, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmNormRef), (override));
  MOCK_METHOD(int32, DDemodCfgEqualizer, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 equalizerMode, int32 equalizerFilterLength, float64 x0, float64 dx, NIComplexSingle equalizerInitialCoefficients[], int32 equalizerTrainingCount, float64 equalizerConvergenceFactor, int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgEqualizerInitialCoefficients, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle equalizerInitialCoefficients[], int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgFSKDeviation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fskDeviation, int32 fskRefCompEnabled), (override));
  MOCK_METHOD(int32, DDemodCfgM, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 m), (override));
  MOCK_METHOD(int32, DDemodCfgMeasurementFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementFilterType, float64 x0, float64 dx, float32 measurementFilterCustomCoefficients[], int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgMeasurementFilterCustomCoefficients, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 measurementFilterCustomCoefficients[], int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgModulationType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType, int32 m, int32 differentialEnabled), (override));
  MOCK_METHOD(int32, DDemodCfgNumberOfSymbols, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSymbols), (override));
  MOCK_METHOD(int32, DDemodCfgPSKFormat, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pskFormat), (override));
  MOCK_METHOD(int32, DDemodCfgPulseShapingFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pulseShapingFilterType, float64 pulseShapingFilterParameter, float64 x0, float64 dx, float32 pulseShapingFilterCustomCoefficients[], int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgPulseShapingFilterCustomCoefficients, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 pulseShapingFilterCustomCoefficients[], int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgSamplesPerSymbol, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 samplesPerSymbol), (override));
  MOCK_METHOD(int32, DDemodCfgSignalStructure, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 signalStructure), (override));
  MOCK_METHOD(int32, DDemodCfgSpectrumInverted, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumInverted), (override));
  MOCK_METHOD(int32, DDemodCfgSymbolMap, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 symbolMapType, NIComplexSingle symbolMap[], int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodCfgSymbolRate, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 symbolRate), (override));
  MOCK_METHOD(int32, DDemodCfgSynchronization, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationEnabled, int8 syncBits[], int32 measurementOffset, int32 arraySize), (override));
  MOCK_METHOD(int32, DDemodFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFrequencyOffset, float64* meanFrequencyDrift, float64* meanPhaseError), (override));
  MOCK_METHOD(int32, DDemodFetchConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellationTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchDemodulatedBits, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 demodulatedBits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* maximumRMSEVM, float64* meanModulationErrorRatio, float64* maximumPeakEVM, float64* meanPeakEVM), (override));
  MOCK_METHOD(int32, DDemodFetchEVMTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchEqualizerCoefficients, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle equalizerCoefficients[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchFSKDeviationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 fskError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchFSKResults, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFSKDeviation, float64* meanRMSFSKError, float64* maximumPeakFSKError), (override));
  MOCK_METHOD(int32, DDemodFetchIQImpairments, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQGainImbalance, float64* meanQuadratureSkew, float64* meanIQOriginOffset), (override));
  MOCK_METHOD(int32, DDemodFetchMagnitudeError, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanMagnitudeError, float64* maximumMagnitudeError), (override));
  MOCK_METHOD(int32, DDemodFetchMagnitudeErrorTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchMeanAmplitudeDroop, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanAmplitudeDroop), (override));
  MOCK_METHOD(int32, DDemodFetchMeanIQOriginOffset, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32* meanIQOriginOffset), (override));
  MOCK_METHOD(int32, DDemodFetchMeanQuadratureSkew, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32* meanQuadratureSkew), (override));
  MOCK_METHOD(int32, DDemodFetchMeanRhoFactor, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRhoFactor), (override));
  MOCK_METHOD(int32, DDemodFetchMeasurementWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle measurementWaveform[], int32 arraySize, int32* actualArraySize, int32* samplesPerSymbol, float64* symbolRate), (override));
  MOCK_METHOD(int32, DDemodFetchOffsetConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle offsetConstellationTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchOffsetEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSOffsetEVM, float64* maximumRMSOffsetEVM, float64* maximumPeakOffsetEVM, float64* meanPeakOffsetEVM), (override));
  MOCK_METHOD(int32, DDemodFetchOffsetEVMTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 offsetEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchPhaseError, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPhaseError, float64* maximumPhaseError), (override));
  MOCK_METHOD(int32, DDemodFetchPhaseErrorTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchReferenceWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodFetchSyncFound, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* syncFound), (override));
  MOCK_METHOD(int32, DDemodGetEqualizerInitialCoefficients, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64* x0, float64* dx, NIComplexSingle equalizerInitialCoefficients[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodGetSymbolMap, (niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle symbolMap[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DDemodRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFrequencyOffset, float64* meanRMSEVM, float64* maximumPeakEVM, float64* meanModulationErrorRatio), (override));
  MOCK_METHOD(int32, DDemodSetSymbolMap, (niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, DeleteSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DisableTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, GetAllNamedResultNames, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists), (override));
  MOCK_METHOD(int32, GetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]), (override));
  MOCK_METHOD(int32, GetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetError, (niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, GetErrorString, (niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, Initialize, (char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession), (override));
  MOCK_METHOD(int32, InitializeFromNIRFSASession, (uInt32 nirfsaSession, niRFmxInstrHandle* handleOut), (override));
  MOCK_METHOD(int32, Initiate, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]), (override));
  MOCK_METHOD(int32, ResetAttribute, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID), (override));
  MOCK_METHOD(int32, ResetToDefault, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, SelectMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces), (override));
  MOCK_METHOD(int32, SendSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle), (override));
  MOCK_METHOD(int32, SetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]), (override));
  MOCK_METHOD(int32, SetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, WaitForAcquisitionComplete, (niRFmxInstrHandle instrumentHandle, float64 timeout), (override));
  MOCK_METHOD(int32, WaitForMeasurementComplete, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIRFMXDEMOD_GRPC_MOCK_LIBRARY_H
