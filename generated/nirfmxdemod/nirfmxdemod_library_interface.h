//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-rfmxdemod
//---------------------------------------------------------------------
#ifndef NIRFMXDEMOD_GRPC_LIBRARY_WRAPPER_H
#define NIRFMXDEMOD_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>
#include <niRFmxDemod.h>

namespace nirfmxdemod_grpc {

class NiRFmxDemodLibraryInterface {
 public:
  virtual ~NiRFmxDemodLibraryInterface() {}

  virtual int32 ADemodCfgAMCarrierSuppressed(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amCarrierSuppressedEnabled) = 0;
  virtual int32 ADemodCfgAudioFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 audioFilterType, float64 audioFilterLowerCutoffFrequency, float64 audioFilterUpperCutoffFrequency) = 0;
  virtual int32 ADemodCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 ADemodCfgCarrierCorrection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierFrequencyCorrectionEnabled, int32 carrierPhaseCorrectionEnabled) = 0;
  virtual int32 ADemodCfgFMDeEmphasis(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 deEmphasis) = 0;
  virtual int32 ADemodCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 ADemodCfgModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType) = 0;
  virtual int32 ADemodCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rbwrrcAlpha) = 0;
  virtual int32 ADemodFetchAMMaximumModulationDepth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumModulationDepth, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak) = 0;
  virtual int32 ADemodFetchAMMeanModulationDepth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationDepth, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak) = 0;
  virtual int32 ADemodFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanCarrierFrequencyError, float64* meanCarrierPower) = 0;
  virtual int32 ADemodFetchDemodSignalTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 demodulatedSignal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ADemodFetchDemodSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 demodulatedSpectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ADemodFetchDistortions(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageSINAD, float64* averageSNR, float64* averageTHD, float64* averageTHDWithNoise) = 0;
  virtual int32 ADemodFetchFMMaximumDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumDeviation, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak) = 0;
  virtual int32 ADemodFetchFMMeanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak) = 0;
  virtual int32 ADemodFetchMeanModulationFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationFrequency) = 0;
  virtual int32 ADemodFetchPMMaximumDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumDeviation, float64* maximumHalfPeakToPeak, float64* maximumRMS, float64* maximumPositivePeak, float64* maximumNegativePeak) = 0;
  virtual int32 ADemodFetchPMMeanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanHalfPeakToPeak, float64* meanRMS, float64* meanPositivePeak, float64* meanNegativePeak) = 0;
  virtual int32 ADemodReadAM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanModulationDepth, float64* meanCarrierPower) = 0;
  virtual int32 ADemodReadFM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanCarrierFrequencyError) = 0;
  virtual int32 ADemodReadPM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanDeviation, float64* meanCarrierFrequencyError) = 0;
  virtual int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]) = 0;
  virtual int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved) = 0;
  virtual int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel) = 0;
  virtual int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) = 0;
  virtual int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger) = 0;
  virtual int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation) = 0;
  virtual int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency) = 0;
  virtual int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) = 0;
  virtual int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger) = 0;
  virtual int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) = 0;
  virtual int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation) = 0;
  virtual int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) = 0;
  virtual int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel) = 0;
  virtual int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger) = 0;
  virtual int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone) = 0;
  virtual int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]) = 0;
  virtual int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]) = 0;
  virtual int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]) = 0;
  virtual int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) = 0;
  virtual int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]) = 0;
  virtual int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) = 0;
  virtual int32 DDemodCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount) = 0;
  virtual int32 DDemodCfgEVMNormalizationReference(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmNormRef) = 0;
  virtual int32 DDemodCfgEqualizer(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 equalizerMode, int32 equalizerFilterLength, float64 x0, float64 dx, NIComplexSingle equalizerInitialCoefficients[], int32 equalizerTrainingCount, float64 equalizerConvergenceFactor, int32 arraySize) = 0;
  virtual int32 DDemodCfgEqualizerInitialCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle equalizerInitialCoefficients[], int32 arraySize) = 0;
  virtual int32 DDemodCfgFSKDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fskDeviation, int32 fskRefCompEnabled) = 0;
  virtual int32 DDemodCfgM(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 m) = 0;
  virtual int32 DDemodCfgMeasurementFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementFilterType, float64 x0, float64 dx, float32 measurementFilterCustomCoefficients[], int32 arraySize) = 0;
  virtual int32 DDemodCfgMeasurementFilterCustomCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 measurementFilterCustomCoefficients[], int32 arraySize) = 0;
  virtual int32 DDemodCfgModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType, int32 m, int32 differentialEnabled) = 0;
  virtual int32 DDemodCfgNumberOfSymbols(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSymbols) = 0;
  virtual int32 DDemodCfgPSKFormat(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pskFormat) = 0;
  virtual int32 DDemodCfgPulseShapingFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pulseShapingFilterType, float64 pulseShapingFilterParameter, float64 x0, float64 dx, float32 pulseShapingFilterCustomCoefficients[], int32 arraySize) = 0;
  virtual int32 DDemodCfgPulseShapingFilterCustomCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 pulseShapingFilterCustomCoefficients[], int32 arraySize) = 0;
  virtual int32 DDemodCfgSamplesPerSymbol(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 samplesPerSymbol) = 0;
  virtual int32 DDemodCfgSignalStructure(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 signalStructure) = 0;
  virtual int32 DDemodCfgSpectrumInverted(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumInverted) = 0;
  virtual int32 DDemodCfgSymbolMap(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 symbolMapType, NIComplexSingle symbolMap[], int32 arraySize) = 0;
  virtual int32 DDemodCfgSymbolRate(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 symbolRate) = 0;
  virtual int32 DDemodCfgSynchronization(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationEnabled, int8 syncBits[], int32 measurementOffset, int32 arraySize) = 0;
  virtual int32 DDemodFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFrequencyOffset, float64* meanFrequencyDrift, float64* meanPhaseError) = 0;
  virtual int32 DDemodFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellationTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 demodulatedBits[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* maximumRMSEVM, float64* meanModulationErrorRatio, float64* maximumPeakEVM, float64* meanPeakEVM) = 0;
  virtual int32 DDemodFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchEqualizerCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle equalizerCoefficients[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchFSKDeviationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 fskError[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchFSKResults(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFSKDeviation, float64* meanRMSFSKError, float64* maximumPeakFSKError) = 0;
  virtual int32 DDemodFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQGainImbalance, float64* meanQuadratureSkew, float64* meanIQOriginOffset) = 0;
  virtual int32 DDemodFetchMagnitudeError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanMagnitudeError, float64* maximumMagnitudeError) = 0;
  virtual int32 DDemodFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchMeanAmplitudeDroop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanAmplitudeDroop) = 0;
  virtual int32 DDemodFetchMeanIQOriginOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32* meanIQOriginOffset) = 0;
  virtual int32 DDemodFetchMeanQuadratureSkew(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32* meanQuadratureSkew) = 0;
  virtual int32 DDemodFetchMeanRhoFactor(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRhoFactor) = 0;
  virtual int32 DDemodFetchMeasurementWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle measurementWaveform[], int32 arraySize, int32* actualArraySize, int32* samplesPerSymbol, float64* symbolRate) = 0;
  virtual int32 DDemodFetchOffsetConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle offsetConstellationTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchOffsetEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSOffsetEVM, float64* maximumRMSOffsetEVM, float64* maximumPeakOffsetEVM, float64* meanPeakOffsetEVM) = 0;
  virtual int32 DDemodFetchOffsetEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 offsetEVM[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPhaseError, float64* maximumPhaseError) = 0;
  virtual int32 DDemodFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodFetchSyncFound(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* syncFound) = 0;
  virtual int32 DDemodGetEqualizerInitialCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* x0, float64* dx, NIComplexSingle equalizerInitialCoefficients[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodGetSymbolMap(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle symbolMap[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DDemodRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanFrequencyOffset, float64* meanRMSEVM, float64* maximumPeakEVM, float64* meanModulationErrorRatio) = 0;
  virtual int32 DDemodSetSymbolMap(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle attrVal[], int32 arraySize) = 0;
  virtual int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) = 0;
  virtual int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]) = 0;
  virtual int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) = 0;
  virtual int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal) = 0;
  virtual int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal) = 0;
  virtual int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal) = 0;
  virtual int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal) = 0;
  virtual int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal) = 0;
  virtual int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal) = 0;
  virtual int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeNIComplexDouble(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble* attrVal) = 0;
  virtual int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeNIComplexSingle(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle* attrVal) = 0;
  virtual int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) = 0;
  virtual int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal) = 0;
  virtual int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal) = 0;
  virtual int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal) = 0;
  virtual int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) = 0;
  virtual int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) = 0;
  virtual int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) = 0;
  virtual int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut) = 0;
  virtual int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]) = 0;
  virtual int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID) = 0;
  virtual int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]) = 0;
  virtual int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces) = 0;
  virtual int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle) = 0;
  virtual int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal) = 0;
  virtual int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal) = 0;
  virtual int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal) = 0;
  virtual int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal) = 0;
  virtual int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal) = 0;
  virtual int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal) = 0;
  virtual int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeNIComplexDouble(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal) = 0;
  virtual int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeNIComplexSingle(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal) = 0;
  virtual int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]) = 0;
  virtual int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal) = 0;
  virtual int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal) = 0;
  virtual int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal) = 0;
  virtual int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) = 0;
  virtual int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout) = 0;
  virtual int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) = 0;
};

}  // namespace nirfmxdemod_grpc
#endif  // NIRFMXDEMOD_GRPC_LIBRARY_WRAPPER_H
