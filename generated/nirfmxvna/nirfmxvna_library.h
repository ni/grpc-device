//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-rfmxvna
//---------------------------------------------------------------------
#ifndef NIRFMXVNA_GRPC_LIBRARY_H
#define NIRFMXVNA_GRPC_LIBRARY_H

#include "nirfmxvna_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxvna_grpc {

class NiRFmxVNALibrary : public nirfmxvna_grpc::NiRFmxVNALibraryInterface {
 public:
  NiRFmxVNALibrary();
  explicit NiRFmxVNALibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxVNALibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 BuildCalibrationElementString(char selectorString[], char calibrationElementID[], int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildCalkitString(char selectorString[], char calkitID[], int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildCalstepString(char selectorString[], int32 calstepNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildConnectorString(char selectorString[], char connectorID[], int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildMarkerString(char selectorString[], int32 markerNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildPortString(char selectorString[], char portString[], int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildPulseGeneratorString(char selectorString[], int32 pulseGeneratorNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSParameterString(char selectorString[], int32 sParameterNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) override;
  int32 BuildWaveString(char selectorString[], int32 waveNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 CalibrationAbort(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CalibrationAcquire(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) override;
  int32 CalibrationInitiate(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CalibrationSave(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[]) override;
  int32 CalkitManagerCalkitAddCalibrationElement(niRFmxInstrHandle instrumentHandle, char selectorString[], char calibrationElementID[]) override;
  int32 CalkitManagerCalkitAddConnector(niRFmxInstrHandle instrumentHandle, char selectorString[], char connectorID[]) override;
  int32 CalkitManagerCalkitCalibrationElementDelayModelGetDelay(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* delay) override;
  int32 CalkitManagerCalkitCalibrationElementDelayModelSetDelay(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 delay) override;
  int32 CalkitManagerCalkitCalibrationElementGetDescription(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char description[]) override;
  int32 CalkitManagerCalkitCalibrationElementGetMaximumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* maximumFrequency) override;
  int32 CalkitManagerCalkitCalibrationElementGetMinimumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* minimumFrequency) override;
  int32 CalkitManagerCalkitCalibrationElementGetPortConnectors(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char connectorIDs[]) override;
  int32 CalkitManagerCalkitCalibrationElementGetSParameterDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* sParameterDefinition) override;
  int32 CalkitManagerCalkitCalibrationElementGetTypes(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 calibrationElementTypes[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetC0(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* c0) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetC1(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* c1) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetC2(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* c2) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetC3(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* c3) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetModelType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* modelType) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetOffsetDelay(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* offsetDelay) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetOffsetLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* offsetLoss) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetOffsetZ0(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* offsetZ0) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetReferenceImpedance(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* referenceImpedance) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelGetSParamAvailability(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* sParameterAvailability) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetC0(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 c0) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetC1(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 c1) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetC2(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 c2) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetC3(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 c3) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetModelType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modelType) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetOffsetDelay(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetDelay) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetOffsetLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetLoss) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetOffsetZ0(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetZ0) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetReferenceImpedance(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceImpedance) override;
  int32 CalkitManagerCalkitCalibrationElementReflectModelSetSParamAvailability(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sParameterAvailability) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequency[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS11(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s11[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS11Split(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 s11I[], float64 s11Q[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS12(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s12[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS12Split(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 s12I[], float64 s12Q[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS21(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s21[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS21Split(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 s21I[], float64 s21Q[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS22(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s22[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetS22Split(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 s22I[], float64 s22Q[], int32 arraySize, int32* actualArraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterGetSParamAvailability(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* sParameterAvailability) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequency[], int32 arraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetFromFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char fileName[]) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetS11(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s11[], int32 arraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetS12(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s12[], int32 arraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetS21(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s21[], int32 arraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetS22(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexDouble s22[], int32 arraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSParameterSetSParamAvailability(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sParameterAvailability) override;
  int32 CalkitManagerCalkitCalibrationElementSetDescription(niRFmxInstrHandle instrumentHandle, char selectorString[], char description[]) override;
  int32 CalkitManagerCalkitCalibrationElementSetMaximumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 maximumFrequency) override;
  int32 CalkitManagerCalkitCalibrationElementSetMinimumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 minimumFrequency) override;
  int32 CalkitManagerCalkitCalibrationElementSetPortConnectors(niRFmxInstrHandle instrumentHandle, char selectorString[], char connectorIDs[], int32 arraySize) override;
  int32 CalkitManagerCalkitCalibrationElementSetSParameterDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sParameterDefinition) override;
  int32 CalkitManagerCalkitCalibrationElementSetTypes(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 calibrationElementTypes[], int32 arraySize) override;
  int32 CalkitManagerCalkitConnectorGetDescription(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char description[]) override;
  int32 CalkitManagerCalkitConnectorGetGender(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* connectorGender) override;
  int32 CalkitManagerCalkitConnectorGetImpedance(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* impedance) override;
  int32 CalkitManagerCalkitConnectorGetMaximumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* maximumFrequency) override;
  int32 CalkitManagerCalkitConnectorGetMinimumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* minimumFrequency) override;
  int32 CalkitManagerCalkitConnectorGetType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char connectorType[]) override;
  int32 CalkitManagerCalkitConnectorSetDescription(niRFmxInstrHandle instrumentHandle, char selectorString[], char description[]) override;
  int32 CalkitManagerCalkitConnectorSetGender(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 connectorGender) override;
  int32 CalkitManagerCalkitConnectorSetImpedance(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 impedance) override;
  int32 CalkitManagerCalkitConnectorSetMaximumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 maximumFrequency) override;
  int32 CalkitManagerCalkitConnectorSetMinimumFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 minimumFrequency) override;
  int32 CalkitManagerCalkitConnectorSetType(niRFmxInstrHandle instrumentHandle, char selectorString[], char connectorType[]) override;
  int32 CalkitManagerCalkitGetCalibrationElementIDs(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char calibrationElementIDs[]) override;
  int32 CalkitManagerCalkitGetConnectorIDs(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char connectorIDs[]) override;
  int32 CalkitManagerCalkitGetDescription(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char calkitDescription[]) override;
  int32 CalkitManagerCalkitGetLRLLineAutoChar(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* autoCharacterizationEnabled) override;
  int32 CalkitManagerCalkitGetTRLReferencePlane(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* referencePlane) override;
  int32 CalkitManagerCalkitGetVersion(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char calkitVersion[]) override;
  int32 CalkitManagerCalkitRemoveCalibrationElement(niRFmxInstrHandle instrumentHandle, char selectorString[], char calibrationElementID[]) override;
  int32 CalkitManagerCalkitRemoveConnector(niRFmxInstrHandle instrumentHandle, char selectorString[], char connectorID[]) override;
  int32 CalkitManagerCalkitSetDescription(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitDescription[]) override;
  int32 CalkitManagerCalkitSetLRLLineAutoChar(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoCharacterizationEnabled) override;
  int32 CalkitManagerCalkitSetTRLReferencePlane(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referencePlane) override;
  int32 CalkitManagerCalkitSetVersion(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitVersion[]) override;
  int32 CalkitManagerCreateCalkit(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitID[]) override;
  int32 CalkitManagerExportCalkit(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitID[], char calkitFilePath[]) override;
  int32 CalkitManagerGetCalkitIDs(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char calkitIDs[]) override;
  int32 CalkitManagerImportCalkit(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitFilePath[]) override;
  int32 CalkitManagerRemoveCalkit(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitID[]) override;
  int32 CalkitManagerValidateCalkit(niRFmxInstrHandle instrumentHandle, char selectorString[], char calkitID[]) override;
  int32 CalsetEmbedFixtureS2p(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], char fixtureS2pFilePath[], char vnaPort[], int32 sParameterOrientation, char newCalsetName[]) override;
  int32 CalsetGetErrorTerm(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], int32 errorTermIdentifier, char measurementPort[], char sourcePort[], NIComplexSingle errorTerm[], int32 arraySize, int32* actualArraySize) override;
  int32 CalsetGetErrorTermSplit(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], int32 errorTermIdentifier, char measurementPort[], char sourcePort[], float32 errorTermI[], float32 errorTermQ[], int32 arraySize, int32* actualArraySize) override;
  int32 CalsetGetFrequencyGrid(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], int32 errorTermIdentifier, float64 frequencyGrid[], int32 arraySize, int32* actualArraySize) override;
  int32 CalsetLoadFromFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], char calsetFilePath[]) override;
  int32 CalsetSaveToFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], char calsetFilePath[]) override;
  int32 CfgCorrectionPortSubset(niRFmxInstrHandle instrumentHandle, char selectorString[], char portSubset[]) override;
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) override;
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) override;
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) override;
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone) override;
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearCalset(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[]) override;
  int32 ClearMeasurementMemoryNames(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]) override;
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) override;
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CopyCalset(niRFmxInstrHandle instrumentHandle, char selectorString[], char sourceCalsetName[], char newCalsetName[]) override;
  int32 CopyDataToMeasurementMemory(niRFmxInstrHandle instrumentHandle, char selectorString[], char measurementMemoryName[]) override;
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DeselectActiveCalset(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 GetAllCalsetNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char calsetNames[]) override;
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) override;
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal) override;
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal) override;
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal) override;
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal) override;
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal) override;
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal) override;
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) override;
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal) override;
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal) override;
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal) override;
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetMeasurementMemoryNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char measurementMemoryNames[]) override;
  int32 GetMeasurementMemoryXData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x[], int32 arraySize, int32* actualArraySize) override;
  int32 GetMeasurementMemoryYData(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 y1[], float32 y2[], int32 arraySize, int32* actualArraySize) override;
  int32 IQFetchData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle data[], int32 arraySize, int32* actualArraySize) override;
  int32 IQFetchDataSplit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 dataI[], float32 dataQ[], int32 arraySize, int32* actualArraySize) override;
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) override;
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut) override;
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]) override;
  int32 LoadDataToMeasurementMemoryFromFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char filePath[], char parameter[], char measurementMemoryName[]) override;
  int32 MarkerCfgDataSource(niRFmxInstrHandle instrumentHandle, char selectorString[], char dataSource[]) override;
  int32 MarkerCfgMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 markerMode) override;
  int32 MarkerCfgNumberOfMarkers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfMarkers) override;
  int32 MarkerCfgPeakSearchExcursion(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 peakExcursionEnabled, float64 peakExcursion) override;
  int32 MarkerCfgPeakSearchThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 threshold) override;
  int32 MarkerCfgReferenceMarker(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceMarker) override;
  int32 MarkerCfgTargetValue(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 targetValue) override;
  int32 MarkerCfgType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 markerType) override;
  int32 MarkerCfgX(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerX) override;
  int32 MarkerCfgY(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerY1, float64 markerY2) override;
  int32 MarkerFetchX(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* markerX) override;
  int32 MarkerFetchY(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* markerY1, float64* markerY2) override;
  int32 MarkerSearch(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 searchMode) override;
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID) override;
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 SParamsCfgSParameter(niRFmxInstrHandle instrumentHandle, char selectorString[], char sParameter[]) override;
  int32 SParamsExportToSnPFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char snpFilePath[]) override;
  int32 SParamsFetchXData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 x[], int32 arraySize, int32* actualArraySize) override;
  int32 SParamsFetchYData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 y1[], float32 y2[], int32 arraySize, int32* actualArraySize) override;
  int32 SParamsGetSParameter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char sParameter[]) override;
  int32 SelectActiveCalset(niRFmxInstrHandle instrumentHandle, char selectorString[], char calsetName[], int32 restoreConfiguration) override;
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces) override;
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle) override;
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal) override;
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) override;
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal) override;
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal) override;
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal) override;
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) override;
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal) override;
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal) override;
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) override;
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]) override;
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal) override;
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal) override;
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) override;
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) override;
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal) override;
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) override;
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout) override;
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) override;
  int32 WavesCfgWave(niRFmxInstrHandle instrumentHandle, char selectorString[], char wave[]) override;
  int32 WavesFetchXData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 x[], int32 arraySize, int32* actualArraySize) override;
  int32 WavesFetchYData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 y1[], float32 y2[], int32 arraySize, int32* actualArraySize) override;
  int32 WavesGetWave(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char wave[]) override;

 private:
  using AbortMeasurementsPtr = decltype(&RFmxVNA_AbortMeasurements);
  using BuildCalibrationElementStringPtr = decltype(&RFmxVNA_BuildCalibrationElementString);
  using BuildCalkitStringPtr = decltype(&RFmxVNA_BuildCalkitString);
  using BuildCalstepStringPtr = decltype(&RFmxVNA_BuildCalstepString);
  using BuildConnectorStringPtr = decltype(&RFmxVNA_BuildConnectorString);
  using BuildMarkerStringPtr = decltype(&RFmxVNA_BuildMarkerString);
  using BuildPortStringPtr = decltype(&RFmxVNA_BuildPortString);
  using BuildPulseGeneratorStringPtr = decltype(&RFmxVNA_BuildPulseGeneratorString);
  using BuildSParameterStringPtr = decltype(&RFmxVNA_BuildSParameterString);
  using BuildSegmentStringPtr = decltype(&RFmxVNA_BuildSegmentString);
  using BuildSignalStringPtr = decltype(&RFmxVNA_BuildSignalString);
  using BuildWaveStringPtr = decltype(&RFmxVNA_BuildWaveString);
  using CalibrationAbortPtr = decltype(&RFmxVNA_CalibrationAbort);
  using CalibrationAcquirePtr = decltype(&RFmxVNA_CalibrationAcquire);
  using CalibrationInitiatePtr = decltype(&RFmxVNA_CalibrationInitiate);
  using CalibrationSavePtr = decltype(&RFmxVNA_CalibrationSave);
  using CalkitManagerCalkitAddCalibrationElementPtr = decltype(&RFmxVNA_CalkitManagerCalkitAddCalibrationElement);
  using CalkitManagerCalkitAddConnectorPtr = decltype(&RFmxVNA_CalkitManagerCalkitAddConnector);
  using CalkitManagerCalkitCalibrationElementDelayModelGetDelayPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementDelayModelGetDelay);
  using CalkitManagerCalkitCalibrationElementDelayModelSetDelayPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementDelayModelSetDelay);
  using CalkitManagerCalkitCalibrationElementGetDescriptionPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementGetDescription);
  using CalkitManagerCalkitCalibrationElementGetMaximumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementGetMaximumFrequency);
  using CalkitManagerCalkitCalibrationElementGetMinimumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementGetMinimumFrequency);
  using CalkitManagerCalkitCalibrationElementGetPortConnectorsPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementGetPortConnectors);
  using CalkitManagerCalkitCalibrationElementGetSParameterDefinitionPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementGetSParameterDefinition);
  using CalkitManagerCalkitCalibrationElementGetTypesPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementGetTypes);
  using CalkitManagerCalkitCalibrationElementReflectModelGetC0Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetC0);
  using CalkitManagerCalkitCalibrationElementReflectModelGetC1Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetC1);
  using CalkitManagerCalkitCalibrationElementReflectModelGetC2Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetC2);
  using CalkitManagerCalkitCalibrationElementReflectModelGetC3Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetC3);
  using CalkitManagerCalkitCalibrationElementReflectModelGetModelTypePtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetModelType);
  using CalkitManagerCalkitCalibrationElementReflectModelGetOffsetDelayPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetOffsetDelay);
  using CalkitManagerCalkitCalibrationElementReflectModelGetOffsetLossPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetOffsetLoss);
  using CalkitManagerCalkitCalibrationElementReflectModelGetOffsetZ0Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetOffsetZ0);
  using CalkitManagerCalkitCalibrationElementReflectModelGetReferenceImpedancePtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetReferenceImpedance);
  using CalkitManagerCalkitCalibrationElementReflectModelGetSParamAvailabilityPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelGetSParamAvailability);
  using CalkitManagerCalkitCalibrationElementReflectModelSetC0Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetC0);
  using CalkitManagerCalkitCalibrationElementReflectModelSetC1Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetC1);
  using CalkitManagerCalkitCalibrationElementReflectModelSetC2Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetC2);
  using CalkitManagerCalkitCalibrationElementReflectModelSetC3Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetC3);
  using CalkitManagerCalkitCalibrationElementReflectModelSetModelTypePtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetModelType);
  using CalkitManagerCalkitCalibrationElementReflectModelSetOffsetDelayPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetOffsetDelay);
  using CalkitManagerCalkitCalibrationElementReflectModelSetOffsetLossPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetOffsetLoss);
  using CalkitManagerCalkitCalibrationElementReflectModelSetOffsetZ0Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetOffsetZ0);
  using CalkitManagerCalkitCalibrationElementReflectModelSetReferenceImpedancePtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetReferenceImpedance);
  using CalkitManagerCalkitCalibrationElementReflectModelSetSParamAvailabilityPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementReflectModelSetSParamAvailability);
  using CalkitManagerCalkitCalibrationElementSParameterGetFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetFrequency);
  using CalkitManagerCalkitCalibrationElementSParameterGetS11Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS11);
  using CalkitManagerCalkitCalibrationElementSParameterGetS11SplitPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS11Split);
  using CalkitManagerCalkitCalibrationElementSParameterGetS12Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS12);
  using CalkitManagerCalkitCalibrationElementSParameterGetS12SplitPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS12Split);
  using CalkitManagerCalkitCalibrationElementSParameterGetS21Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS21);
  using CalkitManagerCalkitCalibrationElementSParameterGetS21SplitPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS21Split);
  using CalkitManagerCalkitCalibrationElementSParameterGetS22Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS22);
  using CalkitManagerCalkitCalibrationElementSParameterGetS22SplitPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetS22Split);
  using CalkitManagerCalkitCalibrationElementSParameterGetSParamAvailabilityPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterGetSParamAvailability);
  using CalkitManagerCalkitCalibrationElementSParameterSetFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetFrequency);
  using CalkitManagerCalkitCalibrationElementSParameterSetFromFilePtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetFromFile);
  using CalkitManagerCalkitCalibrationElementSParameterSetS11Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetS11);
  using CalkitManagerCalkitCalibrationElementSParameterSetS12Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetS12);
  using CalkitManagerCalkitCalibrationElementSParameterSetS21Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetS21);
  using CalkitManagerCalkitCalibrationElementSParameterSetS22Ptr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetS22);
  using CalkitManagerCalkitCalibrationElementSParameterSetSParamAvailabilityPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSParameterSetSParamAvailability);
  using CalkitManagerCalkitCalibrationElementSetDescriptionPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSetDescription);
  using CalkitManagerCalkitCalibrationElementSetMaximumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSetMaximumFrequency);
  using CalkitManagerCalkitCalibrationElementSetMinimumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSetMinimumFrequency);
  using CalkitManagerCalkitCalibrationElementSetPortConnectorsPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSetPortConnectors);
  using CalkitManagerCalkitCalibrationElementSetSParameterDefinitionPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSetSParameterDefinition);
  using CalkitManagerCalkitCalibrationElementSetTypesPtr = decltype(&RFmxVNA_CalkitManagerCalkitCalibrationElementSetTypes);
  using CalkitManagerCalkitConnectorGetDescriptionPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorGetDescription);
  using CalkitManagerCalkitConnectorGetGenderPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorGetGender);
  using CalkitManagerCalkitConnectorGetImpedancePtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorGetImpedance);
  using CalkitManagerCalkitConnectorGetMaximumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorGetMaximumFrequency);
  using CalkitManagerCalkitConnectorGetMinimumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorGetMinimumFrequency);
  using CalkitManagerCalkitConnectorGetTypePtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorGetType);
  using CalkitManagerCalkitConnectorSetDescriptionPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorSetDescription);
  using CalkitManagerCalkitConnectorSetGenderPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorSetGender);
  using CalkitManagerCalkitConnectorSetImpedancePtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorSetImpedance);
  using CalkitManagerCalkitConnectorSetMaximumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorSetMaximumFrequency);
  using CalkitManagerCalkitConnectorSetMinimumFrequencyPtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorSetMinimumFrequency);
  using CalkitManagerCalkitConnectorSetTypePtr = decltype(&RFmxVNA_CalkitManagerCalkitConnectorSetType);
  using CalkitManagerCalkitGetCalibrationElementIDsPtr = decltype(&RFmxVNA_CalkitManagerCalkitGetCalibrationElementIDs);
  using CalkitManagerCalkitGetConnectorIDsPtr = decltype(&RFmxVNA_CalkitManagerCalkitGetConnectorIDs);
  using CalkitManagerCalkitGetDescriptionPtr = decltype(&RFmxVNA_CalkitManagerCalkitGetDescription);
  using CalkitManagerCalkitGetLRLLineAutoCharPtr = decltype(&RFmxVNA_CalkitManagerCalkitGetLRLLineAutoChar);
  using CalkitManagerCalkitGetTRLReferencePlanePtr = decltype(&RFmxVNA_CalkitManagerCalkitGetTRLReferencePlane);
  using CalkitManagerCalkitGetVersionPtr = decltype(&RFmxVNA_CalkitManagerCalkitGetVersion);
  using CalkitManagerCalkitRemoveCalibrationElementPtr = decltype(&RFmxVNA_CalkitManagerCalkitRemoveCalibrationElement);
  using CalkitManagerCalkitRemoveConnectorPtr = decltype(&RFmxVNA_CalkitManagerCalkitRemoveConnector);
  using CalkitManagerCalkitSetDescriptionPtr = decltype(&RFmxVNA_CalkitManagerCalkitSetDescription);
  using CalkitManagerCalkitSetLRLLineAutoCharPtr = decltype(&RFmxVNA_CalkitManagerCalkitSetLRLLineAutoChar);
  using CalkitManagerCalkitSetTRLReferencePlanePtr = decltype(&RFmxVNA_CalkitManagerCalkitSetTRLReferencePlane);
  using CalkitManagerCalkitSetVersionPtr = decltype(&RFmxVNA_CalkitManagerCalkitSetVersion);
  using CalkitManagerCreateCalkitPtr = decltype(&RFmxVNA_CalkitManagerCreateCalkit);
  using CalkitManagerExportCalkitPtr = decltype(&RFmxVNA_CalkitManagerExportCalkit);
  using CalkitManagerGetCalkitIDsPtr = decltype(&RFmxVNA_CalkitManagerGetCalkitIDs);
  using CalkitManagerImportCalkitPtr = decltype(&RFmxVNA_CalkitManagerImportCalkit);
  using CalkitManagerRemoveCalkitPtr = decltype(&RFmxVNA_CalkitManagerRemoveCalkit);
  using CalkitManagerValidateCalkitPtr = decltype(&RFmxVNA_CalkitManagerValidateCalkit);
  using CalsetEmbedFixtureS2pPtr = decltype(&RFmxVNA_CalsetEmbedFixtureS2p);
  using CalsetGetErrorTermPtr = decltype(&RFmxVNA_CalsetGetErrorTerm);
  using CalsetGetErrorTermSplitPtr = decltype(&RFmxVNA_CalsetGetErrorTermSplit);
  using CalsetGetFrequencyGridPtr = decltype(&RFmxVNA_CalsetGetFrequencyGrid);
  using CalsetLoadFromFilePtr = decltype(&RFmxVNA_CalsetLoadFromFile);
  using CalsetSaveToFilePtr = decltype(&RFmxVNA_CalsetSaveToFile);
  using CfgCorrectionPortSubsetPtr = decltype(&RFmxVNA_CfgCorrectionPortSubset);
  using CfgFrequencyReferencePtr = decltype(&RFmxVNA_CfgFrequencyReference);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxVNA_CfgMechanicalAttenuation);
  using CfgRFAttenuationPtr = decltype(&RFmxVNA_CfgRFAttenuation);
  using CheckMeasurementStatusPtr = decltype(&RFmxVNA_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxVNA_ClearAllNamedResults);
  using ClearCalsetPtr = decltype(&RFmxVNA_ClearCalset);
  using ClearMeasurementMemoryNamesPtr = decltype(&RFmxVNA_ClearMeasurementMemoryNames);
  using ClearNamedResultPtr = decltype(&RFmxVNA_ClearNamedResult);
  using CloneSignalConfigurationPtr = decltype(&RFmxVNA_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxVNA_Close);
  using CommitPtr = decltype(&RFmxVNA_Commit);
  using CopyCalsetPtr = decltype(&RFmxVNA_CopyCalset);
  using CopyDataToMeasurementMemoryPtr = decltype(&RFmxVNA_CopyDataToMeasurementMemory);
  using CreateSignalConfigurationPtr = decltype(&RFmxVNA_CreateSignalConfiguration);
  using DeleteSignalConfigurationPtr = decltype(&RFmxVNA_DeleteSignalConfiguration);
  using DeselectActiveCalsetPtr = decltype(&RFmxVNA_DeselectActiveCalset);
  using GetAllCalsetNamesPtr = decltype(&RFmxVNA_GetAllCalsetNames);
  using GetAllNamedResultNamesPtr = decltype(&RFmxVNA_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxVNA_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxVNA_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxVNA_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxVNA_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxVNA_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxVNA_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxVNA_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxVNA_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxVNA_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxVNA_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxVNA_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxVNA_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxVNA_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxVNA_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxVNA_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxVNA_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxVNA_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxVNA_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxVNA_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxVNA_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxVNA_GetError);
  using GetErrorStringPtr = decltype(&RFmxVNA_GetErrorString);
  using GetMeasurementMemoryNamesPtr = decltype(&RFmxVNA_GetMeasurementMemoryNames);
  using GetMeasurementMemoryXDataPtr = decltype(&RFmxVNA_GetMeasurementMemoryXData);
  using GetMeasurementMemoryYDataPtr = decltype(&RFmxVNA_GetMeasurementMemoryYData);
  using IQFetchDataPtr = decltype(&RFmxVNA_IQFetchData);
  using IQFetchDataSplitPtr = decltype(&RFmxVNA_IQFetchDataSplit);
  using InitializePtr = decltype(&RFmxVNA_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxVNA_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxVNA_Initiate);
  using LoadDataToMeasurementMemoryFromFilePtr = decltype(&RFmxVNA_LoadDataToMeasurementMemoryFromFile);
  using MarkerCfgDataSourcePtr = decltype(&RFmxVNA_MarkerCfgDataSource);
  using MarkerCfgModePtr = decltype(&RFmxVNA_MarkerCfgMode);
  using MarkerCfgNumberOfMarkersPtr = decltype(&RFmxVNA_MarkerCfgNumberOfMarkers);
  using MarkerCfgPeakSearchExcursionPtr = decltype(&RFmxVNA_MarkerCfgPeakSearchExcursion);
  using MarkerCfgPeakSearchThresholdPtr = decltype(&RFmxVNA_MarkerCfgPeakSearchThreshold);
  using MarkerCfgReferenceMarkerPtr = decltype(&RFmxVNA_MarkerCfgReferenceMarker);
  using MarkerCfgTargetValuePtr = decltype(&RFmxVNA_MarkerCfgTargetValue);
  using MarkerCfgTypePtr = decltype(&RFmxVNA_MarkerCfgType);
  using MarkerCfgXPtr = decltype(&RFmxVNA_MarkerCfgX);
  using MarkerCfgYPtr = decltype(&RFmxVNA_MarkerCfgY);
  using MarkerFetchXPtr = decltype(&RFmxVNA_MarkerFetchX);
  using MarkerFetchYPtr = decltype(&RFmxVNA_MarkerFetchY);
  using MarkerSearchPtr = decltype(&RFmxVNA_MarkerSearch);
  using ResetAttributePtr = decltype(&RFmxVNA_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxVNA_ResetToDefault);
  using SParamsCfgSParameterPtr = decltype(&RFmxVNA_SParamsCfgSParameter);
  using SParamsExportToSnPFilePtr = decltype(&RFmxVNA_SParamsExportToSnPFile);
  using SParamsFetchXDataPtr = decltype(&RFmxVNA_SParamsFetchXData);
  using SParamsFetchYDataPtr = decltype(&RFmxVNA_SParamsFetchYData);
  using SParamsGetSParameterPtr = decltype(&RFmxVNA_SParamsGetSParameter);
  using SelectActiveCalsetPtr = decltype(&RFmxVNA_SelectActiveCalset);
  using SelectMeasurementsPtr = decltype(&RFmxVNA_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxVNA_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxVNA_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxVNA_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxVNA_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxVNA_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxVNA_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxVNA_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxVNA_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxVNA_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxVNA_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxVNA_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxVNA_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxVNA_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxVNA_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxVNA_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxVNA_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxVNA_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxVNA_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxVNA_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxVNA_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxVNA_SetAttributeU8Array);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxVNA_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxVNA_WaitForMeasurementComplete);
  using WavesCfgWavePtr = decltype(&RFmxVNA_WavesCfgWave);
  using WavesFetchXDataPtr = decltype(&RFmxVNA_WavesFetchXData);
  using WavesFetchYDataPtr = decltype(&RFmxVNA_WavesFetchYData);
  using WavesGetWavePtr = decltype(&RFmxVNA_WavesGetWave);

  typedef struct FunctionPointers {
    AbortMeasurementsPtr AbortMeasurements;
    BuildCalibrationElementStringPtr BuildCalibrationElementString;
    BuildCalkitStringPtr BuildCalkitString;
    BuildCalstepStringPtr BuildCalstepString;
    BuildConnectorStringPtr BuildConnectorString;
    BuildMarkerStringPtr BuildMarkerString;
    BuildPortStringPtr BuildPortString;
    BuildPulseGeneratorStringPtr BuildPulseGeneratorString;
    BuildSParameterStringPtr BuildSParameterString;
    BuildSegmentStringPtr BuildSegmentString;
    BuildSignalStringPtr BuildSignalString;
    BuildWaveStringPtr BuildWaveString;
    CalibrationAbortPtr CalibrationAbort;
    CalibrationAcquirePtr CalibrationAcquire;
    CalibrationInitiatePtr CalibrationInitiate;
    CalibrationSavePtr CalibrationSave;
    CalkitManagerCalkitAddCalibrationElementPtr CalkitManagerCalkitAddCalibrationElement;
    CalkitManagerCalkitAddConnectorPtr CalkitManagerCalkitAddConnector;
    CalkitManagerCalkitCalibrationElementDelayModelGetDelayPtr CalkitManagerCalkitCalibrationElementDelayModelGetDelay;
    CalkitManagerCalkitCalibrationElementDelayModelSetDelayPtr CalkitManagerCalkitCalibrationElementDelayModelSetDelay;
    CalkitManagerCalkitCalibrationElementGetDescriptionPtr CalkitManagerCalkitCalibrationElementGetDescription;
    CalkitManagerCalkitCalibrationElementGetMaximumFrequencyPtr CalkitManagerCalkitCalibrationElementGetMaximumFrequency;
    CalkitManagerCalkitCalibrationElementGetMinimumFrequencyPtr CalkitManagerCalkitCalibrationElementGetMinimumFrequency;
    CalkitManagerCalkitCalibrationElementGetPortConnectorsPtr CalkitManagerCalkitCalibrationElementGetPortConnectors;
    CalkitManagerCalkitCalibrationElementGetSParameterDefinitionPtr CalkitManagerCalkitCalibrationElementGetSParameterDefinition;
    CalkitManagerCalkitCalibrationElementGetTypesPtr CalkitManagerCalkitCalibrationElementGetTypes;
    CalkitManagerCalkitCalibrationElementReflectModelGetC0Ptr CalkitManagerCalkitCalibrationElementReflectModelGetC0;
    CalkitManagerCalkitCalibrationElementReflectModelGetC1Ptr CalkitManagerCalkitCalibrationElementReflectModelGetC1;
    CalkitManagerCalkitCalibrationElementReflectModelGetC2Ptr CalkitManagerCalkitCalibrationElementReflectModelGetC2;
    CalkitManagerCalkitCalibrationElementReflectModelGetC3Ptr CalkitManagerCalkitCalibrationElementReflectModelGetC3;
    CalkitManagerCalkitCalibrationElementReflectModelGetModelTypePtr CalkitManagerCalkitCalibrationElementReflectModelGetModelType;
    CalkitManagerCalkitCalibrationElementReflectModelGetOffsetDelayPtr CalkitManagerCalkitCalibrationElementReflectModelGetOffsetDelay;
    CalkitManagerCalkitCalibrationElementReflectModelGetOffsetLossPtr CalkitManagerCalkitCalibrationElementReflectModelGetOffsetLoss;
    CalkitManagerCalkitCalibrationElementReflectModelGetOffsetZ0Ptr CalkitManagerCalkitCalibrationElementReflectModelGetOffsetZ0;
    CalkitManagerCalkitCalibrationElementReflectModelGetReferenceImpedancePtr CalkitManagerCalkitCalibrationElementReflectModelGetReferenceImpedance;
    CalkitManagerCalkitCalibrationElementReflectModelGetSParamAvailabilityPtr CalkitManagerCalkitCalibrationElementReflectModelGetSParamAvailability;
    CalkitManagerCalkitCalibrationElementReflectModelSetC0Ptr CalkitManagerCalkitCalibrationElementReflectModelSetC0;
    CalkitManagerCalkitCalibrationElementReflectModelSetC1Ptr CalkitManagerCalkitCalibrationElementReflectModelSetC1;
    CalkitManagerCalkitCalibrationElementReflectModelSetC2Ptr CalkitManagerCalkitCalibrationElementReflectModelSetC2;
    CalkitManagerCalkitCalibrationElementReflectModelSetC3Ptr CalkitManagerCalkitCalibrationElementReflectModelSetC3;
    CalkitManagerCalkitCalibrationElementReflectModelSetModelTypePtr CalkitManagerCalkitCalibrationElementReflectModelSetModelType;
    CalkitManagerCalkitCalibrationElementReflectModelSetOffsetDelayPtr CalkitManagerCalkitCalibrationElementReflectModelSetOffsetDelay;
    CalkitManagerCalkitCalibrationElementReflectModelSetOffsetLossPtr CalkitManagerCalkitCalibrationElementReflectModelSetOffsetLoss;
    CalkitManagerCalkitCalibrationElementReflectModelSetOffsetZ0Ptr CalkitManagerCalkitCalibrationElementReflectModelSetOffsetZ0;
    CalkitManagerCalkitCalibrationElementReflectModelSetReferenceImpedancePtr CalkitManagerCalkitCalibrationElementReflectModelSetReferenceImpedance;
    CalkitManagerCalkitCalibrationElementReflectModelSetSParamAvailabilityPtr CalkitManagerCalkitCalibrationElementReflectModelSetSParamAvailability;
    CalkitManagerCalkitCalibrationElementSParameterGetFrequencyPtr CalkitManagerCalkitCalibrationElementSParameterGetFrequency;
    CalkitManagerCalkitCalibrationElementSParameterGetS11Ptr CalkitManagerCalkitCalibrationElementSParameterGetS11;
    CalkitManagerCalkitCalibrationElementSParameterGetS11SplitPtr CalkitManagerCalkitCalibrationElementSParameterGetS11Split;
    CalkitManagerCalkitCalibrationElementSParameterGetS12Ptr CalkitManagerCalkitCalibrationElementSParameterGetS12;
    CalkitManagerCalkitCalibrationElementSParameterGetS12SplitPtr CalkitManagerCalkitCalibrationElementSParameterGetS12Split;
    CalkitManagerCalkitCalibrationElementSParameterGetS21Ptr CalkitManagerCalkitCalibrationElementSParameterGetS21;
    CalkitManagerCalkitCalibrationElementSParameterGetS21SplitPtr CalkitManagerCalkitCalibrationElementSParameterGetS21Split;
    CalkitManagerCalkitCalibrationElementSParameterGetS22Ptr CalkitManagerCalkitCalibrationElementSParameterGetS22;
    CalkitManagerCalkitCalibrationElementSParameterGetS22SplitPtr CalkitManagerCalkitCalibrationElementSParameterGetS22Split;
    CalkitManagerCalkitCalibrationElementSParameterGetSParamAvailabilityPtr CalkitManagerCalkitCalibrationElementSParameterGetSParamAvailability;
    CalkitManagerCalkitCalibrationElementSParameterSetFrequencyPtr CalkitManagerCalkitCalibrationElementSParameterSetFrequency;
    CalkitManagerCalkitCalibrationElementSParameterSetFromFilePtr CalkitManagerCalkitCalibrationElementSParameterSetFromFile;
    CalkitManagerCalkitCalibrationElementSParameterSetS11Ptr CalkitManagerCalkitCalibrationElementSParameterSetS11;
    CalkitManagerCalkitCalibrationElementSParameterSetS12Ptr CalkitManagerCalkitCalibrationElementSParameterSetS12;
    CalkitManagerCalkitCalibrationElementSParameterSetS21Ptr CalkitManagerCalkitCalibrationElementSParameterSetS21;
    CalkitManagerCalkitCalibrationElementSParameterSetS22Ptr CalkitManagerCalkitCalibrationElementSParameterSetS22;
    CalkitManagerCalkitCalibrationElementSParameterSetSParamAvailabilityPtr CalkitManagerCalkitCalibrationElementSParameterSetSParamAvailability;
    CalkitManagerCalkitCalibrationElementSetDescriptionPtr CalkitManagerCalkitCalibrationElementSetDescription;
    CalkitManagerCalkitCalibrationElementSetMaximumFrequencyPtr CalkitManagerCalkitCalibrationElementSetMaximumFrequency;
    CalkitManagerCalkitCalibrationElementSetMinimumFrequencyPtr CalkitManagerCalkitCalibrationElementSetMinimumFrequency;
    CalkitManagerCalkitCalibrationElementSetPortConnectorsPtr CalkitManagerCalkitCalibrationElementSetPortConnectors;
    CalkitManagerCalkitCalibrationElementSetSParameterDefinitionPtr CalkitManagerCalkitCalibrationElementSetSParameterDefinition;
    CalkitManagerCalkitCalibrationElementSetTypesPtr CalkitManagerCalkitCalibrationElementSetTypes;
    CalkitManagerCalkitConnectorGetDescriptionPtr CalkitManagerCalkitConnectorGetDescription;
    CalkitManagerCalkitConnectorGetGenderPtr CalkitManagerCalkitConnectorGetGender;
    CalkitManagerCalkitConnectorGetImpedancePtr CalkitManagerCalkitConnectorGetImpedance;
    CalkitManagerCalkitConnectorGetMaximumFrequencyPtr CalkitManagerCalkitConnectorGetMaximumFrequency;
    CalkitManagerCalkitConnectorGetMinimumFrequencyPtr CalkitManagerCalkitConnectorGetMinimumFrequency;
    CalkitManagerCalkitConnectorGetTypePtr CalkitManagerCalkitConnectorGetType;
    CalkitManagerCalkitConnectorSetDescriptionPtr CalkitManagerCalkitConnectorSetDescription;
    CalkitManagerCalkitConnectorSetGenderPtr CalkitManagerCalkitConnectorSetGender;
    CalkitManagerCalkitConnectorSetImpedancePtr CalkitManagerCalkitConnectorSetImpedance;
    CalkitManagerCalkitConnectorSetMaximumFrequencyPtr CalkitManagerCalkitConnectorSetMaximumFrequency;
    CalkitManagerCalkitConnectorSetMinimumFrequencyPtr CalkitManagerCalkitConnectorSetMinimumFrequency;
    CalkitManagerCalkitConnectorSetTypePtr CalkitManagerCalkitConnectorSetType;
    CalkitManagerCalkitGetCalibrationElementIDsPtr CalkitManagerCalkitGetCalibrationElementIDs;
    CalkitManagerCalkitGetConnectorIDsPtr CalkitManagerCalkitGetConnectorIDs;
    CalkitManagerCalkitGetDescriptionPtr CalkitManagerCalkitGetDescription;
    CalkitManagerCalkitGetLRLLineAutoCharPtr CalkitManagerCalkitGetLRLLineAutoChar;
    CalkitManagerCalkitGetTRLReferencePlanePtr CalkitManagerCalkitGetTRLReferencePlane;
    CalkitManagerCalkitGetVersionPtr CalkitManagerCalkitGetVersion;
    CalkitManagerCalkitRemoveCalibrationElementPtr CalkitManagerCalkitRemoveCalibrationElement;
    CalkitManagerCalkitRemoveConnectorPtr CalkitManagerCalkitRemoveConnector;
    CalkitManagerCalkitSetDescriptionPtr CalkitManagerCalkitSetDescription;
    CalkitManagerCalkitSetLRLLineAutoCharPtr CalkitManagerCalkitSetLRLLineAutoChar;
    CalkitManagerCalkitSetTRLReferencePlanePtr CalkitManagerCalkitSetTRLReferencePlane;
    CalkitManagerCalkitSetVersionPtr CalkitManagerCalkitSetVersion;
    CalkitManagerCreateCalkitPtr CalkitManagerCreateCalkit;
    CalkitManagerExportCalkitPtr CalkitManagerExportCalkit;
    CalkitManagerGetCalkitIDsPtr CalkitManagerGetCalkitIDs;
    CalkitManagerImportCalkitPtr CalkitManagerImportCalkit;
    CalkitManagerRemoveCalkitPtr CalkitManagerRemoveCalkit;
    CalkitManagerValidateCalkitPtr CalkitManagerValidateCalkit;
    CalsetEmbedFixtureS2pPtr CalsetEmbedFixtureS2p;
    CalsetGetErrorTermPtr CalsetGetErrorTerm;
    CalsetGetErrorTermSplitPtr CalsetGetErrorTermSplit;
    CalsetGetFrequencyGridPtr CalsetGetFrequencyGrid;
    CalsetLoadFromFilePtr CalsetLoadFromFile;
    CalsetSaveToFilePtr CalsetSaveToFile;
    CfgCorrectionPortSubsetPtr CfgCorrectionPortSubset;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearCalsetPtr ClearCalset;
    ClearMeasurementMemoryNamesPtr ClearMeasurementMemoryNames;
    ClearNamedResultPtr ClearNamedResult;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CopyCalsetPtr CopyCalset;
    CopyDataToMeasurementMemoryPtr CopyDataToMeasurementMemory;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DeselectActiveCalsetPtr DeselectActiveCalset;
    GetAllCalsetNamesPtr GetAllCalsetNames;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    GetMeasurementMemoryNamesPtr GetMeasurementMemoryNames;
    GetMeasurementMemoryXDataPtr GetMeasurementMemoryXData;
    GetMeasurementMemoryYDataPtr GetMeasurementMemoryYData;
    IQFetchDataPtr IQFetchData;
    IQFetchDataSplitPtr IQFetchDataSplit;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    LoadDataToMeasurementMemoryFromFilePtr LoadDataToMeasurementMemoryFromFile;
    MarkerCfgDataSourcePtr MarkerCfgDataSource;
    MarkerCfgModePtr MarkerCfgMode;
    MarkerCfgNumberOfMarkersPtr MarkerCfgNumberOfMarkers;
    MarkerCfgPeakSearchExcursionPtr MarkerCfgPeakSearchExcursion;
    MarkerCfgPeakSearchThresholdPtr MarkerCfgPeakSearchThreshold;
    MarkerCfgReferenceMarkerPtr MarkerCfgReferenceMarker;
    MarkerCfgTargetValuePtr MarkerCfgTargetValue;
    MarkerCfgTypePtr MarkerCfgType;
    MarkerCfgXPtr MarkerCfgX;
    MarkerCfgYPtr MarkerCfgY;
    MarkerFetchXPtr MarkerFetchX;
    MarkerFetchYPtr MarkerFetchY;
    MarkerSearchPtr MarkerSearch;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SParamsCfgSParameterPtr SParamsCfgSParameter;
    SParamsExportToSnPFilePtr SParamsExportToSnPFile;
    SParamsFetchXDataPtr SParamsFetchXData;
    SParamsFetchYDataPtr SParamsFetchYData;
    SParamsGetSParameterPtr SParamsGetSParameter;
    SelectActiveCalsetPtr SelectActiveCalset;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
    WavesCfgWavePtr WavesCfgWave;
    WavesFetchXDataPtr WavesFetchXData;
    WavesFetchYDataPtr WavesFetchYData;
    WavesGetWavePtr WavesGetWave;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxvna_grpc

#endif  // NIRFMXVNA_GRPC_LIBRARY_H
