
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-XNETSOCKET.
//---------------------------------------------------------------------
#include "nixnetsocket_client.h"

#include <grpcpp/grpcpp.h>

#include <nixnetsocket.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nixnetsocket_grpc::experimental::client {

AcceptResponse
accept(const StubPtr& stub, const nidevice_grpc::Session& socket)
{
  ::grpc::ClientContext context;

  auto request = AcceptRequest{};
  request.mutable_socket()->CopyFrom(socket);

  auto response = AcceptResponse{};

  raise_if_error(
      stub->Accept(&context, request, &response));

  return response;
}

BindResponse
bind(const StubPtr& stub, const nidevice_grpc::Session& socket, const SockAddr& name)
{
  ::grpc::ClientContext context;

  auto request = BindRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.mutable_name()->CopyFrom(name);

  auto response = BindResponse{};

  raise_if_error(
      stub->Bind(&context, request, &response));

  return response;
}

ConnectResponse
connect(const StubPtr& stub, const nidevice_grpc::Session& socket, const SockAddr& name)
{
  ::grpc::ClientContext context;

  auto request = ConnectRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.mutable_name()->CopyFrom(name);

  auto response = ConnectResponse{};

  raise_if_error(
      stub->Connect(&context, request, &response));

  return response;
}

ListenResponse
listen(const StubPtr& stub, const nidevice_grpc::Session& socket, const pb::int32& backlog)
{
  ::grpc::ClientContext context;

  auto request = ListenRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.set_backlog(backlog);

  auto response = ListenResponse{};

  raise_if_error(
      stub->Listen(&context, request, &response));

  return response;
}

SendToResponse
send_to(const StubPtr& stub, const nidevice_grpc::Session& socket, const pb::string& dataptr, const pb::int32& flags, const SockAddr& to)
{
  ::grpc::ClientContext context;

  auto request = SendToRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.set_dataptr(dataptr);
  request.set_flags(flags);
  request.mutable_to()->CopyFrom(to);

  auto response = SendToResponse{};

  raise_if_error(
      stub->SendTo(&context, request, &response));

  return response;
}

SendResponse
send(const StubPtr& stub, const nidevice_grpc::Session& socket, const pb::string& dataptr, const pb::int32& flags)
{
  ::grpc::ClientContext context;

  auto request = SendRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.set_dataptr(dataptr);
  request.set_flags(flags);

  auto response = SendResponse{};

  raise_if_error(
      stub->Send(&context, request, &response));

  return response;
}

RecvResponse
recv(const StubPtr& stub, const nidevice_grpc::Session& socket, const pb::string& mem, const pb::int32& flags)
{
  ::grpc::ClientContext context;

  auto request = RecvRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.set_mem(mem);
  request.set_flags(flags);

  auto response = RecvResponse{};

  raise_if_error(
      stub->Recv(&context, request, &response));

  return response;
}

ShutdownResponse
shutdown(const StubPtr& stub, const nidevice_grpc::Session& socket, const pb::int32& how)
{
  ::grpc::ClientContext context;

  auto request = ShutdownRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.set_how(how);

  auto response = ShutdownResponse{};

  raise_if_error(
      stub->Shutdown(&context, request, &response));

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& socket)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_socket()->CopyFrom(socket);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response));

  return response;
}

IpStackClearResponse
ip_stack_clear(const StubPtr& stub, const nidevice_grpc::Session& stack_ref)
{
  ::grpc::ClientContext context;

  auto request = IpStackClearRequest{};
  request.mutable_stack_ref()->CopyFrom(stack_ref);

  auto response = IpStackClearResponse{};

  raise_if_error(
      stub->IpStackClear(&context, request, &response));

  return response;
}

IpStackCreateResponse
ip_stack_create(const StubPtr& stub, const pb::string& stack_name, const pb::string& config)
{
  ::grpc::ClientContext context;

  auto request = IpStackCreateRequest{};
  request.set_stack_name(stack_name);
  request.set_config(config);

  auto response = IpStackCreateResponse{};

  raise_if_error(
      stub->IpStackCreate(&context, request, &response));

  return response;
}

IsSetResponse
is_set(const StubPtr& stub, const nidevice_grpc::Session& fd, const std::vector<nidevice_grpc::Session>& set)
{
  ::grpc::ClientContext context;

  auto request = IsSetRequest{};
  request.mutable_fd()->CopyFrom(fd);
  copy_array(set, request.mutable_set());

  auto response = IsSetResponse{};

  raise_if_error(
      stub->IsSet(&context, request, &response));

  return response;
}

SelectResponse
select(const StubPtr& stub, const std::vector<nidevice_grpc::Session>& read_fds, const std::vector<nidevice_grpc::Session>& write_fds, const std::vector<nidevice_grpc::Session>& except_fds, const google::protobuf::Duration& timeout)
{
  ::grpc::ClientContext context;

  auto request = SelectRequest{};
  copy_array(read_fds, request.mutable_read_fds());
  copy_array(write_fds, request.mutable_write_fds());
  copy_array(except_fds, request.mutable_except_fds());
  request.mutable_timeout()->CopyFrom(timeout);

  auto response = SelectResponse{};

  raise_if_error(
      stub->Select(&context, request, &response));

  return response;
}

SocketResponse
socket(const StubPtr& stub, const nidevice_grpc::Session& stack_ref, const pb::int32& domain, const pb::int32& type, const pb::int32& prototcol)
{
  ::grpc::ClientContext context;

  auto request = SocketRequest{};
  request.mutable_stack_ref()->CopyFrom(stack_ref);
  request.set_domain(domain);
  request.set_type(type);
  request.set_prototcol(prototcol);

  auto response = SocketResponse{};

  raise_if_error(
      stub->Socket(&context, request, &response));

  return response;
}


} // namespace nixnetsocket_grpc::experimental::client
