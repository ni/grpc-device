//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-XNETSOCKET
//---------------------------------------------------------------------
#ifndef NIXNETSOCKET_GRPC_LIBRARY_H
#define NIXNETSOCKET_GRPC_LIBRARY_H

#include "nixnetsocket_library_interface.h"

#include <server/shared_library.h>

namespace nixnetsocket_grpc {

class NiXnetSocketLibrary : public nixnetsocket_grpc::NiXnetSocketLibraryInterface {
 public:
  NiXnetSocketLibrary();
  virtual ~NiXnetSocketLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  nxSOCKET Accept(nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen);
  int32_t Bind(nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen);
  int32_t Connect(nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen);
  uint32_t InetAddr(nxIpStackRef_t stack_ref, const char cp[]);
  int32_t InetAToN(nxIpStackRef_t stack_ref, const char cp[], nxin_addr* name);
  char* InetNToA(nxIpStackRef_t stack_ref, nxin_addr inParameter);
  const char* InetNToP(nxIpStackRef_t stack_ref, int32_t af, void* src, char dst[nxINET6_ADDRSTRLEN], nxsocklen_t size);
  int32_t InetPToN(nxIpStackRef_t stack_ref, int32_t af, const char src[], void* dst);
  int32_t FreeAddrInfo(nxaddrinfo* res);
  int32_t GetAddrInfo(nxIpStackRef_t stack_ref, const char node[], const char service[], nxaddrinfo* hints, nxaddrinfo** res);
  int32_t GetNameInfo(nxIpStackRef_t stack_ref, nxsockaddr* addr, nxsocklen_t addr_len, char host[], nxsocklen_t host_len, char serv[], nxsocklen_t serv_len, int32_t flags);
  int32_t Listen(nxSOCKET socket, int32_t backlog);
  int32_t SendTo(nxSOCKET socket, char dataptr[], int32_t size, int32_t flags, nxsockaddr* to, nxsocklen_t tolen);
  int32_t Send(nxSOCKET socket, char dataptr[], int32_t size, int32_t flags);
  int32_t RecvFrom(nxSOCKET socket, char mem[], int32_t size, int32_t flags, nxsockaddr* from, nxsocklen_t* fromlen);
  int32_t Recv(nxSOCKET socket, char mem[], int32_t size, int32_t flags);
  int32_t GetSockName(nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen);
  int32_t GetPeerName(nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen);
  int32_t Shutdown(nxSOCKET socket, int32_t how);
  int32_t Close(nxSOCKET socket);
  int32_t GetLastErrorNum();
  char* GetLastErrorStr(char buf[], size_t bufLen);
  int32_t GetSockOpt(nxSOCKET socket, int32_t level, int32_t optname, void* optval, nxsocklen_t* optlen);
  int32_t IpStackClear(nxIpStackRef_t stack_ref);
  int32_t IpStackCreate(char stack_name[], char config[], nxIpStackRef_t* stack_ref);
  void IpStackFreeAllStacksInfoStr(nixnetsocket_grpc::IpStackInfoString info);
  int32_t IpStackFreeInfo(nxVirtualInterface_t* firstVirtualInterface);
  int32_t IpStackGetAllStacksInfoStr(uint32_t format, nixnetsocket_grpc::IpStackInfoString* info);
  int32_t IpStackGetInfo(nxIpStackRef_t stack_ref, uint32_t info_id, nxVirtualInterface_t** virtual_interfaces);
  int32_t IpStackOpen(char stack_name[], nxIpStackRef_t* stack_ref);
  int32_t IpStackWaitForInterface(nxIpStackRef_t stack_ref, const char localInterface[], int32_t timeoutMs);
  int32_t IsSet(nxSOCKET fd, nxfd_set* set);
  int32_t Select(int32_t nfds, nxfd_set* read_fds, nxfd_set* write_fds, nxfd_set* except_fds, nxtimeval* timeout);
  int32_t SetSockOpt(nxSOCKET socket, int32_t level, int32_t optname, void* optval, nxsocklen_t optlen);
  nxSOCKET Socket(nxIpStackRef_t stack_ref, int32_t domain, int32_t type, int32_t prototcol);

 private:
  using AcceptPtr = decltype(&nxaccept);
  using BindPtr = decltype(&nxbind);
  using ConnectPtr = decltype(&nxconnect);
  using InetAddrPtr = decltype(&nxinet_addr);
  using InetAToNPtr = decltype(&nxinet_aton);
  using InetNToAPtr = decltype(&nxinet_ntoa);
  using InetNToPPtr = decltype(&nxinet_ntop);
  using InetPToNPtr = decltype(&nxinet_pton);
  using FreeAddrInfoPtr = int32_t (*)(nxaddrinfo* res);
  using GetAddrInfoPtr = decltype(&nxgetaddrinfo);
  using GetNameInfoPtr = decltype(&nxgetnameinfo);
  using ListenPtr = decltype(&nxlisten);
  using SendToPtr = decltype(&nxsendto);
  using SendPtr = decltype(&nxsend);
  using RecvFromPtr = decltype(&nxrecvfrom);
  using RecvPtr = decltype(&nxrecv);
  using GetSockNamePtr = decltype(&nxgetsockname);
  using GetPeerNamePtr = decltype(&nxgetpeername);
  using ShutdownPtr = decltype(&nxshutdown);
  using ClosePtr = decltype(&nxclose);
  using GetLastErrorNumPtr = int32_t (*)();
  using GetLastErrorStrPtr = char* (*)(char buf[], size_t bufLen);
  using GetSockOptPtr = decltype(&nxgetsockopt);
  using IpStackClearPtr = decltype(&nxIpStackClear);
  using IpStackCreatePtr = decltype(&nxIpStackCreate);
  using IpStackFreeAllStacksInfoStrPtr = void (*)(nixnetsocket_grpc::IpStackInfoString info);
  using IpStackFreeInfoPtr = int32_t (*)(nxVirtualInterface_t* firstVirtualInterface);
  using IpStackGetAllStacksInfoStrPtr = decltype(&nxIpStackGetAllStacksInfoStr);
  using IpStackGetInfoPtr = decltype(&nxIpStackGetInfo);
  using IpStackOpenPtr = decltype(&nxIpStackOpen);
  using IpStackWaitForInterfacePtr = decltype(&nxIpStackWaitForInterface);
  using IsSetPtr = decltype(&nxfd_isset);
  using SelectPtr = decltype(&nxselect);
  using SetSockOptPtr = decltype(&nxsetsockopt);
  using SocketPtr = decltype(&nxsocket);

  typedef struct FunctionPointers {
    AcceptPtr Accept;
    BindPtr Bind;
    ConnectPtr Connect;
    InetAddrPtr InetAddr;
    InetAToNPtr InetAToN;
    InetNToAPtr InetNToA;
    InetNToPPtr InetNToP;
    InetPToNPtr InetPToN;
    FreeAddrInfoPtr FreeAddrInfo;
    GetAddrInfoPtr GetAddrInfo;
    GetNameInfoPtr GetNameInfo;
    ListenPtr Listen;
    SendToPtr SendTo;
    SendPtr Send;
    RecvFromPtr RecvFrom;
    RecvPtr Recv;
    GetSockNamePtr GetSockName;
    GetPeerNamePtr GetPeerName;
    ShutdownPtr Shutdown;
    ClosePtr Close;
    GetLastErrorNumPtr GetLastErrorNum;
    GetLastErrorStrPtr GetLastErrorStr;
    GetSockOptPtr GetSockOpt;
    IpStackClearPtr IpStackClear;
    IpStackCreatePtr IpStackCreate;
    IpStackFreeAllStacksInfoStrPtr IpStackFreeAllStacksInfoStr;
    IpStackFreeInfoPtr IpStackFreeInfo;
    IpStackGetAllStacksInfoStrPtr IpStackGetAllStacksInfoStr;
    IpStackGetInfoPtr IpStackGetInfo;
    IpStackOpenPtr IpStackOpen;
    IpStackWaitForInterfacePtr IpStackWaitForInterface;
    IsSetPtr IsSet;
    SelectPtr Select;
    SetSockOptPtr SetSockOpt;
    SocketPtr Socket;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nixnetsocket_grpc

#endif  // NIXNETSOCKET_GRPC_LIBRARY_H
