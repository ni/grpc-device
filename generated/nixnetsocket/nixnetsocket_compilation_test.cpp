//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-XNETSOCKET Metadata
//---------------------------------------------------------------------
#include "nixnetsocket_library.h"

namespace nixnetsocket_grpc {

nxSOCKET Accept(nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen)
{
  return nxaccept(socket, addr, addrlen);
}

int32_t Bind(nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen)
{
  return nxbind(socket, name, namelen);
}

int32_t Close(nxSOCKET socket)
{
  return nxclose(socket);
}

int32_t Connect(nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen)
{
  return nxconnect(socket, name, namelen);
}

int32_t FdIsSet(nxSOCKET fd, nxfd_set* set)
{
  return nxfd_isset(fd, set);
}

int32_t GetAddrInfo(nxIpStackRef_t stack_ref, const char node_api[], const char service_api[], nxaddrinfo* hints, nxaddrinfo** res)
{
  return nxgetaddrinfo(stack_ref, node_api, service_api, hints, res);
}

int32_t GetNameInfo(nxIpStackRef_t stack_ref, nxsockaddr* addr, nxsocklen_t addrlen, char host[], nxsocklen_t hostlen, char serv[], nxsocklen_t servlen, int32_t flags)
{
  return nxgetnameinfo(stack_ref, addr, addrlen, host, hostlen, serv, servlen, flags);
}

int32_t GetPeerName(nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen)
{
  return nxgetpeername(socket, addr, addrlen);
}

int32_t GetSockName(nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen)
{
  return nxgetsockname(socket, addr, addrlen);
}

int32_t GetSockOpt(nxSOCKET socket, int32_t level, int32_t optname, void* optval, nxsocklen_t* optlen)
{
  return nxgetsockopt(socket, level, optname, optval, optlen);
}

uint32_t InetAddr(nxIpStackRef_t stack_ref, const char cp[])
{
  return nxinet_addr(stack_ref, cp);
}

int32_t InetAToN(nxIpStackRef_t stack_ref, const char cp[], nxin_addr* name)
{
  return nxinet_aton(stack_ref, cp, name);
}

char* InetNToA(nxIpStackRef_t stack_ref, nxin_addr inParameter)
{
  return nxinet_ntoa(stack_ref, inParameter);
}

const char* InetNToP(nxIpStackRef_t stack_ref, int32_t af, void* src, char dst[nxINET6_ADDRSTRLEN], nxsocklen_t size)
{
  return nxinet_ntop(stack_ref, af, src, dst, size);
}

int32_t InetPToN(nxIpStackRef_t stack_ref, int32_t af, const char src[], void* dst)
{
  return nxinet_pton(stack_ref, af, src, dst);
}

int32_t IpStackClear(nxIpStackRef_t stack_ref)
{
  return nxIpStackClear(stack_ref);
}

int32_t IpStackCreate(char stack_name[], char config[], nxIpStackRef_t* stack_ref)
{
  return nxIpStackCreate(stack_name, config, stack_ref);
}

int32_t IpStackGetAllStacksInfoStr(uint32_t format, nixnetsocket_grpc::IpStackInfoString* info)
{
  return nxIpStackGetAllStacksInfoStr(format, info);
}

int32_t IpStackGetInfo(nxIpStackRef_t stack_ref, uint32_t info_id, nxVirtualInterface_t** virtual_interfaces)
{
  return nxIpStackGetInfo(stack_ref, info_id, virtual_interfaces);
}

int32_t IpStackOpen(char stack_name[], nxIpStackRef_t* stack_ref)
{
  return nxIpStackOpen(stack_name, stack_ref);
}

int32_t IpStackWaitForInterface(nxIpStackRef_t stack_ref, const char localInterface[], int32_t timeoutMs)
{
  return nxIpStackWaitForInterface(stack_ref, localInterface, timeoutMs);
}

int32_t Listen(nxSOCKET socket, int32_t backlog)
{
  return nxlisten(socket, backlog);
}

int32_t Recv(nxSOCKET socket, char mem[], int32_t size, int32_t flags)
{
  return nxrecv(socket, mem, size, flags);
}

int32_t RecvFrom(nxSOCKET socket, char mem[], int32_t size, int32_t flags, nxsockaddr* from, nxsocklen_t* fromlen)
{
  return nxrecvfrom(socket, mem, size, flags, from, fromlen);
}

int32_t Select(int32_t nfds, nxfd_set* readfds, nxfd_set* writefds, nxfd_set* exceptfds, nxtimeval* timeout)
{
  return nxselect(nfds, readfds, writefds, exceptfds, timeout);
}

int32_t Send(nxSOCKET socket, char dataptr[], int32_t size, int32_t flags)
{
  return nxsend(socket, dataptr, size, flags);
}

int32_t SendTo(nxSOCKET socket, char dataptr[], int32_t size, int32_t flags, nxsockaddr* to, nxsocklen_t tolen)
{
  return nxsendto(socket, dataptr, size, flags, to, tolen);
}

int32_t SetSockOpt(nxSOCKET socket, int32_t level, int32_t optname, void* optval, nxsocklen_t optlen)
{
  return nxsetsockopt(socket, level, optname, optval, optlen);
}

int32_t Shutdown(nxSOCKET socket, int32_t how)
{
  return nxshutdown(socket, how);
}

nxSOCKET Socket(nxIpStackRef_t stack_ref, int32_t domain, int32_t type, int32_t protocol)
{
  return nxsocket(stack_ref, domain, type, protocol);
}

char* StrErrR(int errnum, char buf[], size_t bufLen)
{
  return nxstrerr_r(errnum, buf, bufLen);
}

}  // namespace nixnetsocket_grpc
