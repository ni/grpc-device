//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-XNETSOCKET
//---------------------------------------------------------------------
#ifndef NIXNETSOCKET_GRPC_MOCK_LIBRARY_H
#define NIXNETSOCKET_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nixnetsocket_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiXnetSocketMockLibrary : public nixnetsocket_grpc::NiXnetSocketLibraryInterface {
 public:
  MOCK_METHOD(nxSOCKET, Accept, (nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen), (override));
  MOCK_METHOD(int32_t, Bind, (nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen), (override));
  MOCK_METHOD(int32_t, Close, (nxSOCKET socket), (override));
  MOCK_METHOD(int32_t, Connect, (nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen), (override));
  MOCK_METHOD(int32_t, FreeAddrInfo, (nxaddrinfo* res), (override));
  MOCK_METHOD(int32_t, GetAddrInfo, (nxIpStackRef_t stack_ref, const char node[], const char service[], nxaddrinfo* hints, nxaddrinfo** res), (override));
  MOCK_METHOD(int32_t, GetLastErrorNum, (), (override));
  MOCK_METHOD(char*, GetLastErrorStr, (char buf[], size_t bufLen), (override));
  MOCK_METHOD(int32_t, GetNameInfo, (nxIpStackRef_t stack_ref, nxsockaddr* addr, nxsocklen_t addr_len, char host[], nxsocklen_t host_len, char serv[], nxsocklen_t serv_len, int32_t flags), (override));
  MOCK_METHOD(int32_t, GetPeerName, (nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen), (override));
  MOCK_METHOD(int32_t, GetSockName, (nxSOCKET socket, nxsockaddr* addr, nxsocklen_t* addrlen), (override));
  MOCK_METHOD(int32_t, GetSockOpt, (nxSOCKET socket, int32_t level, int32_t optname, void* optval, nxsocklen_t* optlen), (override));
  MOCK_METHOD(uint32_t, InetAddr, (nxIpStackRef_t stack_ref, const char cp[]), (override));
  MOCK_METHOD(int32_t, InetAToN, (nxIpStackRef_t stack_ref, const char cp[], nxin_addr* name), (override));
  MOCK_METHOD(char*, InetNToA, (nxIpStackRef_t stack_ref, nxin_addr inParameter), (override));
  MOCK_METHOD(const char*, InetNToP, (nxIpStackRef_t stack_ref, int32_t af, void* src, char dst[nxINET6_ADDRSTRLEN], nxsocklen_t size), (override));
  MOCK_METHOD(int32_t, InetPToN, (nxIpStackRef_t stack_ref, int32_t af, const char src[], void* dst), (override));
  MOCK_METHOD(int32_t, IpStackClear, (nxIpStackRef_t stack_ref), (override));
  MOCK_METHOD(int32_t, IpStackCreate, (char stack_name[], char config[], nxIpStackRef_t* stack_ref), (override));
  MOCK_METHOD(void, IpStackFreeAllStacksInfoStr, (nixnetsocket_grpc::IpStackInfoString info), (override));
  MOCK_METHOD(int32_t, IpStackFreeInfo, (nxVirtualInterface_t* firstVirtualInterface), (override));
  MOCK_METHOD(int32_t, IpStackGetAllStacksInfoStr, (uint32_t format, nixnetsocket_grpc::IpStackInfoString* info), (override));
  MOCK_METHOD(int32_t, IpStackGetInfo, (nxIpStackRef_t stack_ref, uint32_t info_id, nxVirtualInterface_t** virtual_interfaces), (override));
  MOCK_METHOD(int32_t, IpStackOpen, (char stack_name[], nxIpStackRef_t* stack_ref), (override));
  MOCK_METHOD(int32_t, IpStackWaitForInterface, (nxIpStackRef_t stack_ref, const char localInterface[], int32_t timeoutMs), (override));
  MOCK_METHOD(int32_t, IsSet, (nxSOCKET fd, nxfd_set* set), (override));
  MOCK_METHOD(int32_t, Listen, (nxSOCKET socket, int32_t backlog), (override));
  MOCK_METHOD(int32_t, Recv, (nxSOCKET socket, char mem[], int32_t size, int32_t flags), (override));
  MOCK_METHOD(int32_t, RecvFrom, (nxSOCKET socket, char mem[], int32_t size, int32_t flags, nxsockaddr* from, nxsocklen_t* fromlen), (override));
  MOCK_METHOD(int32_t, Select, (int32_t nfds, nxfd_set* read_fds, nxfd_set* write_fds, nxfd_set* except_fds, nxtimeval* timeout), (override));
  MOCK_METHOD(int32_t, Send, (nxSOCKET socket, char dataptr[], int32_t size, int32_t flags), (override));
  MOCK_METHOD(int32_t, SendTo, (nxSOCKET socket, char dataptr[], int32_t size, int32_t flags, nxsockaddr* to, nxsocklen_t tolen), (override));
  MOCK_METHOD(int32_t, SetSockOpt, (nxSOCKET socket, int32_t level, int32_t optname, void* optval, nxsocklen_t optlen), (override));
  MOCK_METHOD(int32_t, Shutdown, (nxSOCKET socket, int32_t how), (override));
  MOCK_METHOD(nxSOCKET, Socket, (nxIpStackRef_t stack_ref, int32_t domain, int32_t type, int32_t prototcol), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIXNETSOCKET_GRPC_MOCK_LIBRARY_H
