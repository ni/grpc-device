//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-XNETSOCKET Metadata
//---------------------------------------------------------------------
#include "nixnetsocket_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nixntipstack.dll";
#else
static const char* kLibraryName = "libnixntipstack.so.1";
#endif

namespace nixnetsocket_grpc {

NiXnetSocketLibrary::NiXnetSocketLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("nxclose"));
  function_pointers_.GetLastErrorNum = reinterpret_cast<GetLastErrorNumPtr>(shared_library_.get_function_pointer("nxgetlasterrornum"));
  function_pointers_.GetLastErrorStr = reinterpret_cast<GetLastErrorStrPtr>(shared_library_.get_function_pointer("nxgetlasterrorstr"));
  function_pointers_.Socket = reinterpret_cast<SocketPtr>(shared_library_.get_function_pointer("nxsocket"));
}

NiXnetSocketLibrary::~NiXnetSocketLibrary()
{
}

::grpc::Status NiXnetSocketLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32_t NiXnetSocketLibrary::Close(nxSOCKET socket)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxclose.");
  }
#if defined(_MSC_VER)
  return nxclose(socket);
#else
  return function_pointers_.Close(socket);
#endif
}

int32_t NiXnetSocketLibrary::GetLastErrorNum()
{
  if (!function_pointers_.GetLastErrorNum) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxgetlasterrornum.");
  }
#if defined(_MSC_VER)
  return nxgetlasterrornum();
#else
  return function_pointers_.GetLastErrorNum();
#endif
}

char* NiXnetSocketLibrary::GetLastErrorStr(char buf[], size_t bufLen)
{
  if (!function_pointers_.GetLastErrorStr) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxgetlasterrorstr.");
  }
#if defined(_MSC_VER)
  return nxgetlasterrorstr(buf, bufLen);
#else
  return function_pointers_.GetLastErrorStr(buf, bufLen);
#endif
}

nxSOCKET NiXnetSocketLibrary::Socket(nxIpStackRef_t stack_ref, int32_t domain, int32_t type, int32_t prototcol)
{
  if (!function_pointers_.Socket) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxsocket.");
  }
#if defined(_MSC_VER)
  return nxsocket(stack_ref, domain, type, prototcol);
#else
  return function_pointers_.Socket(stack_ref, domain, type, prototcol);
#endif
}

}  // namespace nixnetsocket_grpc
