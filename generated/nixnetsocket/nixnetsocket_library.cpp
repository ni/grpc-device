//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-XNETSOCKET Metadata
//---------------------------------------------------------------------
#include "nixnetsocket_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nixntipstack.dll";
#else
static const char* kLibraryName = "libnixntipstack.so.1";
#endif

namespace nixnetsocket_grpc {

NiXnetSocketLibrary::NiXnetSocketLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Bind = reinterpret_cast<BindPtr>(shared_library_.get_function_pointer("nxbind"));
  function_pointers_.Connect = reinterpret_cast<ConnectPtr>(shared_library_.get_function_pointer("nxconnect"));
  function_pointers_.Listen = reinterpret_cast<ListenPtr>(shared_library_.get_function_pointer("nxlisten"));
  function_pointers_.SendTo = reinterpret_cast<SendToPtr>(shared_library_.get_function_pointer("nxsendto"));
  function_pointers_.Send = reinterpret_cast<SendPtr>(shared_library_.get_function_pointer("nxsend"));
  function_pointers_.Recv = reinterpret_cast<RecvPtr>(shared_library_.get_function_pointer("nxrecv"));
  function_pointers_.Shutdown = reinterpret_cast<ShutdownPtr>(shared_library_.get_function_pointer("nxshutdown"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("nxclose"));
  function_pointers_.GetLastErrorNum = reinterpret_cast<GetLastErrorNumPtr>(shared_library_.get_function_pointer("nxgetlasterrornum"));
  function_pointers_.GetLastErrorStr = reinterpret_cast<GetLastErrorStrPtr>(shared_library_.get_function_pointer("nxgetlasterrorstr"));
  function_pointers_.IsSet = reinterpret_cast<IsSetPtr>(shared_library_.get_function_pointer("nxfd_isset"));
  function_pointers_.Select = reinterpret_cast<SelectPtr>(shared_library_.get_function_pointer("nxselect"));
  function_pointers_.Socket = reinterpret_cast<SocketPtr>(shared_library_.get_function_pointer("nxsocket"));
}

NiXnetSocketLibrary::~NiXnetSocketLibrary()
{
}

::grpc::Status NiXnetSocketLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32_t NiXnetSocketLibrary::Bind(nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen)
{
  if (!function_pointers_.Bind) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxbind.");
  }
#if defined(_MSC_VER)
  return nxbind(socket, name, namelen);
#else
  return function_pointers_.Bind(socket, name, namelen);
#endif
}

int32_t NiXnetSocketLibrary::Connect(nxSOCKET socket, nxsockaddr* name, nxsocklen_t namelen)
{
  if (!function_pointers_.Connect) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxconnect.");
  }
#if defined(_MSC_VER)
  return nxconnect(socket, name, namelen);
#else
  return function_pointers_.Connect(socket, name, namelen);
#endif
}

int32_t NiXnetSocketLibrary::Listen(nxSOCKET socket, int32_t backlog)
{
  if (!function_pointers_.Listen) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxlisten.");
  }
#if defined(_MSC_VER)
  return nxlisten(socket, backlog);
#else
  return function_pointers_.Listen(socket, backlog);
#endif
}

int32_t NiXnetSocketLibrary::SendTo(nxSOCKET socket, char dataptr[], int32_t size, int32_t flags, nxsockaddr* to, nxsocklen_t tolen)
{
  if (!function_pointers_.SendTo) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxsendto.");
  }
#if defined(_MSC_VER)
  return nxsendto(socket, dataptr, size, flags, to, tolen);
#else
  return function_pointers_.SendTo(socket, dataptr, size, flags, to, tolen);
#endif
}

int32_t NiXnetSocketLibrary::Send(nxSOCKET socket, char dataptr[], int32_t size, int32_t flags)
{
  if (!function_pointers_.Send) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxsend.");
  }
#if defined(_MSC_VER)
  return nxsend(socket, dataptr, size, flags);
#else
  return function_pointers_.Send(socket, dataptr, size, flags);
#endif
}

int32_t NiXnetSocketLibrary::Recv(nxSOCKET socket, char mem[], int32_t size, int32_t flags)
{
  if (!function_pointers_.Recv) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxrecv.");
  }
#if defined(_MSC_VER)
  return nxrecv(socket, mem, size, flags);
#else
  return function_pointers_.Recv(socket, mem, size, flags);
#endif
}

int32_t NiXnetSocketLibrary::Shutdown(nxSOCKET socket, int32_t how)
{
  if (!function_pointers_.Shutdown) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxshutdown.");
  }
#if defined(_MSC_VER)
  return nxshutdown(socket, how);
#else
  return function_pointers_.Shutdown(socket, how);
#endif
}

int32_t NiXnetSocketLibrary::Close(nxSOCKET socket)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxclose.");
  }
#if defined(_MSC_VER)
  return nxclose(socket);
#else
  return function_pointers_.Close(socket);
#endif
}

int32_t NiXnetSocketLibrary::GetLastErrorNum()
{
  if (!function_pointers_.GetLastErrorNum) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxgetlasterrornum.");
  }
#if defined(_MSC_VER)
  return nxgetlasterrornum();
#else
  return function_pointers_.GetLastErrorNum();
#endif
}

char* NiXnetSocketLibrary::GetLastErrorStr(char buf[], size_t bufLen)
{
  if (!function_pointers_.GetLastErrorStr) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxgetlasterrorstr.");
  }
#if defined(_MSC_VER)
  return nxgetlasterrorstr(buf, bufLen);
#else
  return function_pointers_.GetLastErrorStr(buf, bufLen);
#endif
}

int32_t NiXnetSocketLibrary::IsSet(nxSOCKET fd, nxfd_set* set)
{
  if (!function_pointers_.IsSet) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxfd_isset.");
  }
#if defined(_MSC_VER)
  return nxfd_isset(fd, set);
#else
  return function_pointers_.IsSet(fd, set);
#endif
}

int32_t NiXnetSocketLibrary::Select(int32_t nfds, nxfd_set* read_fds, nxfd_set* write_fds, nxfd_set* except_fds, nxtimeval* timeout)
{
  if (!function_pointers_.Select) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxselect.");
  }
#if defined(_MSC_VER)
  return nxselect(nfds, read_fds, write_fds, except_fds, timeout);
#else
  return function_pointers_.Select(nfds, read_fds, write_fds, except_fds, timeout);
#endif
}

nxSOCKET NiXnetSocketLibrary::Socket(nxIpStackRef_t stack_ref, int32_t domain, int32_t type, int32_t prototcol)
{
  if (!function_pointers_.Socket) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxsocket.");
  }
#if defined(_MSC_VER)
  return nxsocket(stack_ref, domain, type, prototcol);
#else
  return function_pointers_.Socket(stack_ref, domain, type, prototcol);
#endif
}

}  // namespace nixnetsocket_grpc
