
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-XNETSOCKET Metadata
//---------------------------------------------------------------------
#ifndef NIXNETSOCKET_GRPC_SERVICE_H
#define NIXNETSOCKET_GRPC_SERVICE_H

#include <nixnetsocket.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nixnetsocket_library_interface.h"

namespace nixnetsocket_grpc {

struct NiXnetSocketFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiXnetSocketFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiXnetSocketService final : public NiXnetSocket::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<nxSOCKET>>;

  NiXnetSocketService(
    NiXnetSocketLibraryInterface* library,
    ResourceRepositorySharedPtr session_repository,
    const NiXnetSocketFeatureToggles& feature_toggles = {});
  virtual ~NiXnetSocketService();
  
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status GetLastErrorNum(::grpc::ServerContext* context, const GetLastErrorNumRequest* request, GetLastErrorNumResponse* response) override;
  ::grpc::Status GetLastErrorStr(::grpc::ServerContext* context, const GetLastErrorStrRequest* request, GetLastErrorStrResponse* response) override;
  ::grpc::Status Socket(::grpc::ServerContext* context, const SocketRequest* request, SocketResponse* response) override;
private:
  NiXnetSocketLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  NiXnetSocketFeatureToggles feature_toggles_;
};

} // namespace nixnetsocket_grpc

#endif  // NIXNETSOCKET_GRPC_SERVICE_H
