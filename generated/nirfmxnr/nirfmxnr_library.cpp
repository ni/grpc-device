//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXNR Metadata
//---------------------------------------------------------------------
#include "nirfmxnr_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxNR.dll";
#else
static const char* kLibraryName = "libnirfmxnr.so.1";
#endif

namespace nirfmxnr_grpc {

NiRFmxNRLibrary::NiRFmxNRLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.ACPCfgAveraging = reinterpret_cast<ACPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgAveraging"));
  function_pointers_.ACPCfgMeasurementMethod = reinterpret_cast<ACPCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgMeasurementMethod"));
  function_pointers_.ACPCfgNoiseCompensationEnabled = reinterpret_cast<ACPCfgNoiseCompensationEnabledPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgNoiseCompensationEnabled"));
  function_pointers_.ACPCfgNumberOfENDCOffsets = reinterpret_cast<ACPCfgNumberOfENDCOffsetsPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgNumberOfENDCOffsets"));
  function_pointers_.ACPCfgNumberOfEUTRAOffsets = reinterpret_cast<ACPCfgNumberOfEUTRAOffsetsPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgNumberOfEUTRAOffsets"));
  function_pointers_.ACPCfgNumberOfNROffsets = reinterpret_cast<ACPCfgNumberOfNROffsetsPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgNumberOfNROffsets"));
  function_pointers_.ACPCfgNumberOfUTRAOffsets = reinterpret_cast<ACPCfgNumberOfUTRAOffsetsPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgNumberOfUTRAOffsets"));
  function_pointers_.ACPCfgPowerUnits = reinterpret_cast<ACPCfgPowerUnitsPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgPowerUnits"));
  function_pointers_.ACPCfgRBWFilter = reinterpret_cast<ACPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgRBWFilter"));
  function_pointers_.ACPCfgSweepTime = reinterpret_cast<ACPCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxNR_ACPCfgSweepTime"));
  function_pointers_.ACPFetchAbsolutePowersTrace = reinterpret_cast<ACPFetchAbsolutePowersTracePtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchAbsolutePowersTrace"));
  function_pointers_.ACPFetchComponentCarrierMeasurement = reinterpret_cast<ACPFetchComponentCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchComponentCarrierMeasurement"));
  function_pointers_.ACPFetchComponentCarrierMeasurementArray = reinterpret_cast<ACPFetchComponentCarrierMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchComponentCarrierMeasurementArray"));
  function_pointers_.ACPFetchOffsetMeasurement = reinterpret_cast<ACPFetchOffsetMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchOffsetMeasurement"));
  function_pointers_.ACPFetchOffsetMeasurementArray = reinterpret_cast<ACPFetchOffsetMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchOffsetMeasurementArray"));
  function_pointers_.ACPFetchRelativePowersTrace = reinterpret_cast<ACPFetchRelativePowersTracePtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchRelativePowersTrace"));
  function_pointers_.ACPFetchSpectrum = reinterpret_cast<ACPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchSpectrum"));
  function_pointers_.ACPFetchSubblockMeasurement = reinterpret_cast<ACPFetchSubblockMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchSubblockMeasurement"));
  function_pointers_.ACPFetchTotalAggregatedPower = reinterpret_cast<ACPFetchTotalAggregatedPowerPtr>(shared_library_.get_function_pointer("RFmxNR_ACPFetchTotalAggregatedPower"));
  function_pointers_.ACPValidateNoiseCalibrationData = reinterpret_cast<ACPValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxNR_ACPValidateNoiseCalibrationData"));
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_.get_function_pointer("RFmxNR_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_.get_function_pointer("RFmxNR_AnalyzeIQ1Waveform"));
  function_pointers_.AnalyzeSpectrum1Waveform = reinterpret_cast<AnalyzeSpectrum1WaveformPtr>(shared_library_.get_function_pointer("RFmxNR_AnalyzeSpectrum1Waveform"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_.get_function_pointer("RFmxNR_AutoLevel"));
  function_pointers_.BuildBandwidthPartString = reinterpret_cast<BuildBandwidthPartStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildBandwidthPartString"));
  function_pointers_.BuildCORESETClusterString = reinterpret_cast<BuildCORESETClusterStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildCORESETClusterString"));
  function_pointers_.BuildCORESETString = reinterpret_cast<BuildCORESETStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildCORESETString"));
  function_pointers_.BuildCarrierString = reinterpret_cast<BuildCarrierStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildCarrierString"));
  function_pointers_.BuildListStepString = reinterpret_cast<BuildListStepStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildListStepString"));
  function_pointers_.BuildListString = reinterpret_cast<BuildListStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildListString"));
  function_pointers_.BuildOffsetString = reinterpret_cast<BuildOffsetStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildOffsetString"));
  function_pointers_.BuildPDCCHString = reinterpret_cast<BuildPDCCHStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildPDCCHString"));
  function_pointers_.BuildPDSCHClusterString = reinterpret_cast<BuildPDSCHClusterStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildPDSCHClusterString"));
  function_pointers_.BuildPDSCHString = reinterpret_cast<BuildPDSCHStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildPDSCHString"));
  function_pointers_.BuildPUSCHClusterString = reinterpret_cast<BuildPUSCHClusterStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildPUSCHClusterString"));
  function_pointers_.BuildPUSCHString = reinterpret_cast<BuildPUSCHStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildPUSCHString"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildSignalString"));
  function_pointers_.BuildSubblockString = reinterpret_cast<BuildSubblockStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildSubblockString"));
  function_pointers_.BuildUserString = reinterpret_cast<BuildUserStringPtr>(shared_library_.get_function_pointer("RFmxNR_BuildUserString"));
  function_pointers_.CHPCfgAveraging = reinterpret_cast<CHPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxNR_CHPCfgAveraging"));
  function_pointers_.CHPCfgRBWFilter = reinterpret_cast<CHPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxNR_CHPCfgRBWFilter"));
  function_pointers_.CHPCfgSweepTime = reinterpret_cast<CHPCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxNR_CHPCfgSweepTime"));
  function_pointers_.CHPFetchComponentCarrierMeasurement = reinterpret_cast<CHPFetchComponentCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_CHPFetchComponentCarrierMeasurement"));
  function_pointers_.CHPFetchComponentCarrierMeasurementArray = reinterpret_cast<CHPFetchComponentCarrierMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxNR_CHPFetchComponentCarrierMeasurementArray"));
  function_pointers_.CHPFetchSpectrum = reinterpret_cast<CHPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxNR_CHPFetchSpectrum"));
  function_pointers_.CHPFetchSubblockPower = reinterpret_cast<CHPFetchSubblockPowerPtr>(shared_library_.get_function_pointer("RFmxNR_CHPFetchSubblockPower"));
  function_pointers_.CHPFetchTotalAggregatedPower = reinterpret_cast<CHPFetchTotalAggregatedPowerPtr>(shared_library_.get_function_pointer("RFmxNR_CHPFetchTotalAggregatedPower"));
  function_pointers_.CHPValidateNoiseCalibrationData = reinterpret_cast<CHPValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxNR_CHPValidateNoiseCalibrationData"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxNR_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_.get_function_pointer("RFmxNR_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_.get_function_pointer("RFmxNR_CfgFrequency"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_.get_function_pointer("RFmxNR_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxNR_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_.get_function_pointer("RFmxNR_CfgMechanicalAttenuation"));
  function_pointers_.CfgRF = reinterpret_cast<CfgRFPtr>(shared_library_.get_function_pointer("RFmxNR_CfgRF"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_.get_function_pointer("RFmxNR_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxNR_CfgReferenceLevel"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxNR_CfgSoftwareEdgeTrigger"));
  function_pointers_.CfggNodeBCategory = reinterpret_cast<CfggNodeBCategoryPtr>(shared_library_.get_function_pointer("RFmxNR_CfggNodeBCategory"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxNR_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_.get_function_pointer("RFmxNR_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_.get_function_pointer("RFmxNR_ClearNamedResult"));
  function_pointers_.ClearNoiseCalibrationDatabase = reinterpret_cast<ClearNoiseCalibrationDatabasePtr>(shared_library_.get_function_pointer("RFmxNR_ClearNoiseCalibrationDatabase"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxNR_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("RFmxNR_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("RFmxNR_Commit"));
  function_pointers_.CreateList = reinterpret_cast<CreateListPtr>(shared_library_.get_function_pointer("RFmxNR_CreateList"));
  function_pointers_.CreateListStep = reinterpret_cast<CreateListStepPtr>(shared_library_.get_function_pointer("RFmxNR_CreateListStep"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxNR_CreateSignalConfiguration"));
  function_pointers_.DeleteList = reinterpret_cast<DeleteListPtr>(shared_library_.get_function_pointer("RFmxNR_DeleteList"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxNR_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_.get_function_pointer("RFmxNR_DisableTrigger"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_.get_function_pointer("RFmxNR_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxNR_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxNR_GetErrorString"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("RFmxNR_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_.get_function_pointer("RFmxNR_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("RFmxNR_Initiate"));
  function_pointers_.ModAccAutoLevel = reinterpret_cast<ModAccAutoLevelPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccAutoLevel"));
  function_pointers_.ModAccCfgMeasurementMode = reinterpret_cast<ModAccCfgMeasurementModePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccCfgMeasurementMode"));
  function_pointers_.ModAccCfgNoiseCompensationEnabled = reinterpret_cast<ModAccCfgNoiseCompensationEnabledPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccCfgNoiseCompensationEnabled"));
  function_pointers_.ModAccCfgReferenceWaveform = reinterpret_cast<ModAccCfgReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccCfgReferenceWaveform"));
  function_pointers_.ModAccClearNoiseCalibrationDatabase = reinterpret_cast<ModAccClearNoiseCalibrationDatabasePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccClearNoiseCalibrationDatabase"));
  function_pointers_.ModAccFetchCompositeEVM = reinterpret_cast<ModAccFetchCompositeEVMPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchCompositeEVM"));
  function_pointers_.ModAccFetchFrequencyErrorMean = reinterpret_cast<ModAccFetchFrequencyErrorMeanPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchFrequencyErrorMean"));
  function_pointers_.ModAccFetchIQGainImbalancePerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchIQGainImbalancePerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchIQGainImbalancePerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchIQQuadratureErrorPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchInBandEmissionTrace = reinterpret_cast<ModAccFetchInBandEmissionTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchInBandEmissionTrace"));
  function_pointers_.ModAccFetchPBCHDMRSConstellationTrace = reinterpret_cast<ModAccFetchPBCHDMRSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPBCHDMRSConstellationTrace"));
  function_pointers_.ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace = reinterpret_cast<ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchPBCHDataConstellationTrace = reinterpret_cast<ModAccFetchPBCHDataConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPBCHDataConstellationTrace"));
  function_pointers_.ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace = reinterpret_cast<ModAccFetchPBCHDataRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchPDSCH1024QAMConstellationTrace = reinterpret_cast<ModAccFetchPDSCH1024QAMConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCH1024QAMConstellationTrace"));
  function_pointers_.ModAccFetchPDSCH16QAMConstellationTrace = reinterpret_cast<ModAccFetchPDSCH16QAMConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCH16QAMConstellationTrace"));
  function_pointers_.ModAccFetchPDSCH256QAMConstellationTrace = reinterpret_cast<ModAccFetchPDSCH256QAMConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCH256QAMConstellationTrace"));
  function_pointers_.ModAccFetchPDSCH64QAMConstellationTrace = reinterpret_cast<ModAccFetchPDSCH64QAMConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCH64QAMConstellationTrace"));
  function_pointers_.ModAccFetchPDSCH8PSKConstellationTrace = reinterpret_cast<ModAccFetchPDSCH8PSKConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCH8PSKConstellationTrace"));
  function_pointers_.ModAccFetchPDSCHDMRSConstellationTrace = reinterpret_cast<ModAccFetchPDSCHDMRSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCHDMRSConstellationTrace"));
  function_pointers_.ModAccFetchPDSCHDataConstellationTrace = reinterpret_cast<ModAccFetchPDSCHDataConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCHDataConstellationTrace"));
  function_pointers_.ModAccFetchPDSCHDemodulatedBits = reinterpret_cast<ModAccFetchPDSCHDemodulatedBitsPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCHDemodulatedBits"));
  function_pointers_.ModAccFetchPDSCHPTRSConstellationTrace = reinterpret_cast<ModAccFetchPDSCHPTRSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCHPTRSConstellationTrace"));
  function_pointers_.ModAccFetchPDSCHQPSKConstellationTrace = reinterpret_cast<ModAccFetchPDSCHQPSKConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPDSCHQPSKConstellationTrace"));
  function_pointers_.ModAccFetchPSSConstellationTrace = reinterpret_cast<ModAccFetchPSSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPSSConstellationTrace"));
  function_pointers_.ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchPSSRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchPSSRMSEVMPerSymbolMeanTrace = reinterpret_cast<ModAccFetchPSSRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPSSRMSEVMPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchPUSCHDMRSConstellationTrace = reinterpret_cast<ModAccFetchPUSCHDMRSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPUSCHDMRSConstellationTrace"));
  function_pointers_.ModAccFetchPUSCHDataConstellationTrace = reinterpret_cast<ModAccFetchPUSCHDataConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPUSCHDataConstellationTrace"));
  function_pointers_.ModAccFetchPUSCHDemodulatedBits = reinterpret_cast<ModAccFetchPUSCHDemodulatedBitsPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPUSCHDemodulatedBits"));
  function_pointers_.ModAccFetchPUSCHPTRSConstellationTrace = reinterpret_cast<ModAccFetchPUSCHPTRSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPUSCHPTRSConstellationTrace"));
  function_pointers_.ModAccFetchPeakEVMPerSlotMaximumTrace = reinterpret_cast<ModAccFetchPeakEVMPerSlotMaximumTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPeakEVMPerSlotMaximumTrace"));
  function_pointers_.ModAccFetchPeakEVMPerSubcarrierMaximumTrace = reinterpret_cast<ModAccFetchPeakEVMPerSubcarrierMaximumTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPeakEVMPerSubcarrierMaximumTrace"));
  function_pointers_.ModAccFetchPeakEVMPerSymbolMaximumTrace = reinterpret_cast<ModAccFetchPeakEVMPerSymbolMaximumTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchPeakEVMPerSymbolMaximumTrace"));
  function_pointers_.ModAccFetchRMSEVMHighPerSymbolMeanTrace = reinterpret_cast<ModAccFetchRMSEVMHighPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchRMSEVMHighPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchRMSEVMLowPerSymbolMeanTrace = reinterpret_cast<ModAccFetchRMSEVMLowPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchRMSEVMLowPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchRMSEVMPerSlotMeanTrace = reinterpret_cast<ModAccFetchRMSEVMPerSlotMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchRMSEVMPerSlotMeanTrace"));
  function_pointers_.ModAccFetchRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchRMSEVMPerSymbolMeanTrace = reinterpret_cast<ModAccFetchRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchRMSEVMPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchSSSConstellationTrace = reinterpret_cast<ModAccFetchSSSConstellationTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchSSSConstellationTrace"));
  function_pointers_.ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace = reinterpret_cast<ModAccFetchSSSRMSEVMPerSubcarrierMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace"));
  function_pointers_.ModAccFetchSSSRMSEVMPerSymbolMeanTrace = reinterpret_cast<ModAccFetchSSSRMSEVMPerSymbolMeanTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchSSSRMSEVMPerSymbolMeanTrace"));
  function_pointers_.ModAccFetchSpectralFlatnessTrace = reinterpret_cast<ModAccFetchSpectralFlatnessTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchSpectralFlatnessTrace"));
  function_pointers_.ModAccFetchSubblockInBandEmissionTrace = reinterpret_cast<ModAccFetchSubblockInBandEmissionTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchSubblockInBandEmissionTrace"));
  function_pointers_.ModAccValidateCalibrationData = reinterpret_cast<ModAccValidateCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxNR_ModAccValidateCalibrationData"));
  function_pointers_.OBWCfgAveraging = reinterpret_cast<OBWCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxNR_OBWCfgAveraging"));
  function_pointers_.OBWCfgRBWFilter = reinterpret_cast<OBWCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxNR_OBWCfgRBWFilter"));
  function_pointers_.OBWCfgSweepTime = reinterpret_cast<OBWCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxNR_OBWCfgSweepTime"));
  function_pointers_.OBWFetchMeasurement = reinterpret_cast<OBWFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_OBWFetchMeasurement"));
  function_pointers_.OBWFetchSpectrum = reinterpret_cast<OBWFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxNR_OBWFetchSpectrum"));
  function_pointers_.PVTCfgAveraging = reinterpret_cast<PVTCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxNR_PVTCfgAveraging"));
  function_pointers_.PVTCfgMeasurementMethod = reinterpret_cast<PVTCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxNR_PVTCfgMeasurementMethod"));
  function_pointers_.PVTCfgOFFPowerExclusionPeriods = reinterpret_cast<PVTCfgOFFPowerExclusionPeriodsPtr>(shared_library_.get_function_pointer("RFmxNR_PVTCfgOFFPowerExclusionPeriods"));
  function_pointers_.PVTFetchMeasurement = reinterpret_cast<PVTFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_PVTFetchMeasurement"));
  function_pointers_.PVTFetchMeasurementArray = reinterpret_cast<PVTFetchMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxNR_PVTFetchMeasurementArray"));
  function_pointers_.PVTFetchSignalPowerTrace = reinterpret_cast<PVTFetchSignalPowerTracePtr>(shared_library_.get_function_pointer("RFmxNR_PVTFetchSignalPowerTrace"));
  function_pointers_.PVTFetchWindowedSignalPowerTrace = reinterpret_cast<PVTFetchWindowedSignalPowerTracePtr>(shared_library_.get_function_pointer("RFmxNR_PVTFetchWindowedSignalPowerTrace"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("RFmxNR_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_.get_function_pointer("RFmxNR_ResetToDefault"));
  function_pointers_.SEMCfgAveraging = reinterpret_cast<SEMCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgAveraging"));
  function_pointers_.SEMCfgComponentCarrierRatedOutputPower = reinterpret_cast<SEMCfgComponentCarrierRatedOutputPowerPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgComponentCarrierRatedOutputPower"));
  function_pointers_.SEMCfgComponentCarrierRatedOutputPowerArray = reinterpret_cast<SEMCfgComponentCarrierRatedOutputPowerArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgComponentCarrierRatedOutputPowerArray"));
  function_pointers_.SEMCfgNumberOfOffsets = reinterpret_cast<SEMCfgNumberOfOffsetsPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgNumberOfOffsets"));
  function_pointers_.SEMCfgOffsetAbsoluteLimit = reinterpret_cast<SEMCfgOffsetAbsoluteLimitPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetAbsoluteLimit"));
  function_pointers_.SEMCfgOffsetAbsoluteLimitArray = reinterpret_cast<SEMCfgOffsetAbsoluteLimitArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetAbsoluteLimitArray"));
  function_pointers_.SEMCfgOffsetBandwidthIntegral = reinterpret_cast<SEMCfgOffsetBandwidthIntegralPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetBandwidthIntegral"));
  function_pointers_.SEMCfgOffsetBandwidthIntegralArray = reinterpret_cast<SEMCfgOffsetBandwidthIntegralArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetBandwidthIntegralArray"));
  function_pointers_.SEMCfgOffsetFrequency = reinterpret_cast<SEMCfgOffsetFrequencyPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetFrequency"));
  function_pointers_.SEMCfgOffsetFrequencyArray = reinterpret_cast<SEMCfgOffsetFrequencyArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetFrequencyArray"));
  function_pointers_.SEMCfgOffsetLimitFailMask = reinterpret_cast<SEMCfgOffsetLimitFailMaskPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetLimitFailMask"));
  function_pointers_.SEMCfgOffsetLimitFailMaskArray = reinterpret_cast<SEMCfgOffsetLimitFailMaskArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetLimitFailMaskArray"));
  function_pointers_.SEMCfgOffsetRBWFilter = reinterpret_cast<SEMCfgOffsetRBWFilterPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetRBWFilter"));
  function_pointers_.SEMCfgOffsetRBWFilterArray = reinterpret_cast<SEMCfgOffsetRBWFilterArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetRBWFilterArray"));
  function_pointers_.SEMCfgOffsetRelativeLimit = reinterpret_cast<SEMCfgOffsetRelativeLimitPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetRelativeLimit"));
  function_pointers_.SEMCfgOffsetRelativeLimitArray = reinterpret_cast<SEMCfgOffsetRelativeLimitArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgOffsetRelativeLimitArray"));
  function_pointers_.SEMCfgSweepTime = reinterpret_cast<SEMCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgSweepTime"));
  function_pointers_.SEMCfgUplinkMaskType = reinterpret_cast<SEMCfgUplinkMaskTypePtr>(shared_library_.get_function_pointer("RFmxNR_SEMCfgUplinkMaskType"));
  function_pointers_.SEMFetchComponentCarrierMeasurement = reinterpret_cast<SEMFetchComponentCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchComponentCarrierMeasurement"));
  function_pointers_.SEMFetchComponentCarrierMeasurementArray = reinterpret_cast<SEMFetchComponentCarrierMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchComponentCarrierMeasurementArray"));
  function_pointers_.SEMFetchLowerOffsetMargin = reinterpret_cast<SEMFetchLowerOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchLowerOffsetMargin"));
  function_pointers_.SEMFetchLowerOffsetMarginArray = reinterpret_cast<SEMFetchLowerOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchLowerOffsetMarginArray"));
  function_pointers_.SEMFetchLowerOffsetPower = reinterpret_cast<SEMFetchLowerOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchLowerOffsetPower"));
  function_pointers_.SEMFetchLowerOffsetPowerArray = reinterpret_cast<SEMFetchLowerOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchLowerOffsetPowerArray"));
  function_pointers_.SEMFetchMeasurementStatus = reinterpret_cast<SEMFetchMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchMeasurementStatus"));
  function_pointers_.SEMFetchSpectrum = reinterpret_cast<SEMFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchSpectrum"));
  function_pointers_.SEMFetchSubblockMeasurement = reinterpret_cast<SEMFetchSubblockMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchSubblockMeasurement"));
  function_pointers_.SEMFetchTotalAggregatedPower = reinterpret_cast<SEMFetchTotalAggregatedPowerPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchTotalAggregatedPower"));
  function_pointers_.SEMFetchUpperOffsetMargin = reinterpret_cast<SEMFetchUpperOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchUpperOffsetMargin"));
  function_pointers_.SEMFetchUpperOffsetMarginArray = reinterpret_cast<SEMFetchUpperOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchUpperOffsetMarginArray"));
  function_pointers_.SEMFetchUpperOffsetPower = reinterpret_cast<SEMFetchUpperOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchUpperOffsetPower"));
  function_pointers_.SEMFetchUpperOffsetPowerArray = reinterpret_cast<SEMFetchUpperOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SEMFetchUpperOffsetPowerArray"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_.get_function_pointer("RFmxNR_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxNR_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxNR_SetAttributeU8Array"));
  function_pointers_.TXPFetchMeasurement = reinterpret_cast<TXPFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxNR_TXPFetchMeasurement"));
  function_pointers_.TXPFetchPowerTrace = reinterpret_cast<TXPFetchPowerTracePtr>(shared_library_.get_function_pointer("RFmxNR_TXPFetchPowerTrace"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_.get_function_pointer("RFmxNR_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_.get_function_pointer("RFmxNR_WaitForMeasurementComplete"));
}

NiRFmxNRLibrary::~NiRFmxNRLibrary()
{
}

::grpc::Status NiRFmxNRLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxNRLibrary::ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.ACPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.ACPCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgMeasurementMethod.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#else
  return function_pointers_.ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.ACPCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgNoiseCompensationEnabled.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#else
  return function_pointers_.ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgNumberOfENDCOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfENDCOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfENDCOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgNumberOfENDCOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgNumberOfENDCOffsets(instrumentHandle, selectorString, numberOfENDCOffsets);
#else
  return function_pointers_.ACPCfgNumberOfENDCOffsets(instrumentHandle, selectorString, numberOfENDCOffsets);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgNumberOfEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfEUTRAOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfEUTRAOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgNumberOfEUTRAOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgNumberOfEUTRAOffsets(instrumentHandle, selectorString, numberOfEUTRAOffsets);
#else
  return function_pointers_.ACPCfgNumberOfEUTRAOffsets(instrumentHandle, selectorString, numberOfEUTRAOffsets);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgNumberOfNROffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfNROffsets)
{
  if (!function_pointers_.ACPCfgNumberOfNROffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgNumberOfNROffsets.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgNumberOfNROffsets(instrumentHandle, selectorString, numberOfNROffsets);
#else
  return function_pointers_.ACPCfgNumberOfNROffsets(instrumentHandle, selectorString, numberOfNROffsets);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgNumberOfUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfUTRAOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgNumberOfUTRAOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgNumberOfUTRAOffsets(instrumentHandle, selectorString, numberOfUTRAOffsets);
#else
  return function_pointers_.ACPCfgNumberOfUTRAOffsets(instrumentHandle, selectorString, numberOfUTRAOffsets);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  if (!function_pointers_.ACPCfgPowerUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgPowerUnits.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#else
  return function_pointers_.ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.ACPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxNRLibrary::ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.ACPCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchAbsolutePowersTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchAbsolutePowersTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  if (!function_pointers_.ACPFetchComponentCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchComponentCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
#else
  return function_pointers_.ACPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchComponentCarrierMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchComponentCarrierMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower)
{
  if (!function_pointers_.ACPFetchOffsetMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchOffsetMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
#else
  return function_pointers_.ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchOffsetMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchOffsetMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchRelativePowersTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchRelativePowersTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  if (!function_pointers_.ACPFetchSubblockMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchSubblockMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
#else
  return function_pointers_.ACPFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
#endif
}

int32 NiRFmxNRLibrary::ACPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  if (!function_pointers_.ACPFetchTotalAggregatedPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPFetchTotalAggregatedPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
#else
  return function_pointers_.ACPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
#endif
}

int32 NiRFmxNRLibrary::ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.ACPValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ACPValidateNoiseCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#else
  return function_pointers_.ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#endif
}

int32 NiRFmxNRLibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_AbortMeasurements.");
  }
#if defined(_MSC_VER)
  return RFmxNR_AbortMeasurements(instrumentHandle, selectorString);
#else
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_AnalyzeIQ1Waveform.");
  }
#if defined(_MSC_VER)
  return RFmxNR_AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
#else
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
#endif
}

int32 NiRFmxNRLibrary::AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeSpectrum1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_AnalyzeSpectrum1Waveform.");
  }
#if defined(_MSC_VER)
  return RFmxNR_AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
#else
  return function_pointers_.AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
#endif
}

int32 NiRFmxNRLibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_AutoLevel.");
  }
#if defined(_MSC_VER)
  return RFmxNR_AutoLevel(instrumentHandle, selectorString, measurementInterval, referenceLevel);
#else
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, measurementInterval, referenceLevel);
#endif
}

int32 NiRFmxNRLibrary::BuildBandwidthPartString(char selectorString[], int32 bandwidthPartNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildBandwidthPartString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildBandwidthPartString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildBandwidthPartString(selectorString, bandwidthPartNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildBandwidthPartString(selectorString, bandwidthPartNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildCORESETClusterString(char selectorString[], int32 coresetClusterNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildCORESETClusterString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildCORESETClusterString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildCORESETClusterString(selectorString, coresetClusterNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildCORESETClusterString(selectorString, coresetClusterNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildCORESETString(char selectorString[], int32 coresetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildCORESETString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildCORESETString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildCORESETString(selectorString, coresetNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildCORESETString(selectorString, coresetNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildCarrierString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildCarrierString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildCarrierString(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildCarrierString(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildListStepString(char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildListStepString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildListStepString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildListStepString(listName, resultName, stepNumber, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildListStepString(listName, resultName, stepNumber, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxNRLibrary::BuildListString(char listName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildListString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildListString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildListString(listName, resultName, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildListString(listName, resultName, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxNRLibrary::BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildOffsetString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildOffsetString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildPDCCHString(char selectorString[], int32 pdcchNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPDCCHString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildPDCCHString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildPDCCHString(selectorString, pdcchNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildPDCCHString(selectorString, pdcchNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildPDSCHClusterString(char selectorString[], int32 pdschClusterNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPDSCHClusterString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildPDSCHClusterString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildPDSCHClusterString(selectorString, pdschClusterNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildPDSCHClusterString(selectorString, pdschClusterNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildPDSCHString(char selectorString[], int32 pdschNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPDSCHString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildPDSCHString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildPDSCHString(selectorString, pdschNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildPDSCHString(selectorString, pdschNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildPUSCHClusterString(char selectorString[], int32 puschClusterNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPUSCHClusterString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildPUSCHClusterString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildPUSCHClusterString(selectorString, puschClusterNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildPUSCHClusterString(selectorString, puschClusterNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildPUSCHString(char selectorString[], int32 puschNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPUSCHString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildPUSCHString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildPUSCHString(selectorString, puschNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildPUSCHString(selectorString, puschNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildSignalString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxNRLibrary::BuildSubblockString(char selectorString[], int32 subblockNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSubblockString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildSubblockString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildSubblockString(selectorString, subblockNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildSubblockString(selectorString, subblockNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::BuildUserString(char selectorString[], int32 userNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildUserString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_BuildUserString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_BuildUserString(selectorString, userNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildUserString(selectorString, userNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxNRLibrary::CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.CHPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxNRLibrary::CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.CHPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxNRLibrary::CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.CHPCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxNRLibrary::CHPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  if (!function_pointers_.CHPFetchComponentCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPFetchComponentCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
#else
  return function_pointers_.CHPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
#endif
}

int32 NiRFmxNRLibrary::CHPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CHPFetchComponentCarrierMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPFetchComponentCarrierMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
#else
  return function_pointers_.CHPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CHPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::CHPFetchSubblockPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower)
{
  if (!function_pointers_.CHPFetchSubblockPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPFetchSubblockPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPFetchSubblockPower(instrumentHandle, selectorString, timeout, subblockPower);
#else
  return function_pointers_.CHPFetchSubblockPower(instrumentHandle, selectorString, timeout, subblockPower);
#endif
}

int32 NiRFmxNRLibrary::CHPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  if (!function_pointers_.CHPFetchTotalAggregatedPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPFetchTotalAggregatedPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
#else
  return function_pointers_.CHPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
#endif
}

int32 NiRFmxNRLibrary::CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.CHPValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CHPValidateNoiseCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#else
  return function_pointers_.CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#endif
}

int32 NiRFmxNRLibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgDigitalEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
#else
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
#endif
}

int32 NiRFmxNRLibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgExternalAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
#else
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
#endif
}

int32 NiRFmxNRLibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgFrequency(instrumentHandle, selectorString, centerFrequency);
#else
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
#endif
}

int32 NiRFmxNRLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgFrequencyReference.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
#else
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
#endif
}

int32 NiRFmxNRLibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgIQPowerEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
#else
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
#endif
}

int32 NiRFmxNRLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgMechanicalAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
#else
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
#endif
}

int32 NiRFmxNRLibrary::CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  if (!function_pointers_.CfgRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgRF.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
#else
  return function_pointers_.CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
#endif
}

int32 NiRFmxNRLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgRFAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
#else
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
#endif
}

int32 NiRFmxNRLibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgReferenceLevel.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
#else
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
#endif
}

int32 NiRFmxNRLibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfgSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
#else
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
#endif
}

int32 NiRFmxNRLibrary::CfggNodeBCategory(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 gNodeBCategory)
{
  if (!function_pointers_.CfggNodeBCategory) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CfggNodeBCategory.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CfggNodeBCategory(instrumentHandle, selectorString, gNodeBCategory);
#else
  return function_pointers_.CfggNodeBCategory(instrumentHandle, selectorString, gNodeBCategory);
#endif
}

int32 NiRFmxNRLibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CheckMeasurementStatus.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
#else
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
#endif
}

int32 NiRFmxNRLibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ClearAllNamedResults.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ClearAllNamedResults(instrumentHandle, selectorString);
#else
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ClearNamedResult.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ClearNamedResult(instrumentHandle, selectorString);
#else
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNoiseCalibrationDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ClearNoiseCalibrationDatabase.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
#else
  return function_pointers_.ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CloneSignalConfiguration.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
#else
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
#endif
}

int32 NiRFmxNRLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_Close.");
  }
#if defined(_MSC_VER)
  return RFmxNR_Close(instrumentHandle, forceDestroy);
#else
  return function_pointers_.Close(instrumentHandle, forceDestroy);
#endif
}

int32 NiRFmxNRLibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_Commit.");
  }
#if defined(_MSC_VER)
  return RFmxNR_Commit(instrumentHandle, selectorString);
#else
  return function_pointers_.Commit(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::CreateList(niRFmxInstrHandle instrumentHandle, char listName[])
{
  if (!function_pointers_.CreateList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CreateList.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CreateList(instrumentHandle, listName);
#else
  return function_pointers_.CreateList(instrumentHandle, listName);
#endif
}

int32 NiRFmxNRLibrary::CreateListStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex)
{
  if (!function_pointers_.CreateListStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CreateListStep.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CreateListStep(instrumentHandle, selectorString, createdStepIndex);
#else
  return function_pointers_.CreateListStep(instrumentHandle, selectorString, createdStepIndex);
#endif
}

int32 NiRFmxNRLibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_CreateSignalConfiguration.");
  }
#if defined(_MSC_VER)
  return RFmxNR_CreateSignalConfiguration(instrumentHandle, signalName);
#else
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
#endif
}

int32 NiRFmxNRLibrary::DeleteList(niRFmxInstrHandle instrumentHandle, char listName[])
{
  if (!function_pointers_.DeleteList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_DeleteList.");
  }
#if defined(_MSC_VER)
  return RFmxNR_DeleteList(instrumentHandle, listName);
#else
  return function_pointers_.DeleteList(instrumentHandle, listName);
#endif
}

int32 NiRFmxNRLibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_DeleteSignalConfiguration.");
  }
#if defined(_MSC_VER)
  return RFmxNR_DeleteSignalConfiguration(instrumentHandle, signalName);
#else
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
#endif
}

int32 NiRFmxNRLibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_DisableTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxNR_DisableTrigger(instrumentHandle, selectorString);
#else
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAllNamedResultNames.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
#else
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeF32.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeF32Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeF64.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeF64Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI16.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI32.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI32Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI64.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI64Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI8.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeI8Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeNIComplexDoubleArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeNIComplexSingleArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
#else
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeU16.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeU32.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeU32Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeU64Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeU8.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetAttributeU8Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetError.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#else
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#endif
}

int32 NiRFmxNRLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetErrorString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#else
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#endif
}

int32 NiRFmxNRLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_Initialize.");
  }
#if defined(_MSC_VER)
  return RFmxNR_Initialize(resourceName, optionString, handleOut, isNewSession);
#else
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
#endif
}

int32 NiRFmxNRLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_InitializeFromNIRFSASession.");
  }
#if defined(_MSC_VER)
  return RFmxNR_InitializeFromNIRFSASession(nirfsaSession, handleOut);
#else
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
#endif
}

int32 NiRFmxNRLibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_Initiate.");
  }
#if defined(_MSC_VER)
  return RFmxNR_Initiate(instrumentHandle, selectorString, resultName);
#else
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
#endif
}

int32 NiRFmxNRLibrary::ModAccAutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.ModAccAutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccAutoLevel.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccAutoLevel(instrumentHandle, selectorString, timeout);
#else
  return function_pointers_.ModAccAutoLevel(instrumentHandle, selectorString, timeout);
#endif
}

int32 NiRFmxNRLibrary::ModAccCfgMeasurementMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMode)
{
  if (!function_pointers_.ModAccCfgMeasurementMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccCfgMeasurementMode.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccCfgMeasurementMode(instrumentHandle, selectorString, measurementMode);
#else
  return function_pointers_.ModAccCfgMeasurementMode(instrumentHandle, selectorString, measurementMode);
#endif
}

int32 NiRFmxNRLibrary::ModAccCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.ModAccCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccCfgNoiseCompensationEnabled.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#else
  return function_pointers_.ModAccCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#endif
}

int32 NiRFmxNRLibrary::ModAccCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize)
{
  if (!function_pointers_.ModAccCfgReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccCfgReferenceWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize);
#else
  return function_pointers_.ModAccCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.ModAccClearNoiseCalibrationDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccClearNoiseCalibrationDatabase.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccClearNoiseCalibrationDatabase(instrumentHandle);
#else
  return function_pointers_.ModAccClearNoiseCalibrationDatabase(instrumentHandle);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchCompositeEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* compositeRMSEVMMean, float64* compositePeakEVMMaximum)
{
  if (!function_pointers_.ModAccFetchCompositeEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchCompositeEVM.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchCompositeEVM(instrumentHandle, selectorString, timeout, compositeRMSEVMMean, compositePeakEVMMaximum);
#else
  return function_pointers_.ModAccFetchCompositeEVM(instrumentHandle, selectorString, timeout, compositeRMSEVMMean, compositePeakEVMMaximum);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchFrequencyErrorMean(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorMean)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorMean) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchFrequencyErrorMean.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchFrequencyErrorMean(instrumentHandle, selectorString, timeout, frequencyErrorMean);
#else
  return function_pointers_.ModAccFetchFrequencyErrorMean(instrumentHandle, selectorString, timeout, frequencyErrorMean);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchIQGainImbalancePerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqGainImbalancePerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchIQGainImbalancePerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchIQGainImbalancePerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchIQGainImbalancePerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqGainImbalancePerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchIQGainImbalancePerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqGainImbalancePerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqQuadratureErrorPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqQuadratureErrorPerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, iqQuadratureErrorPerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 inBandEmission[], float32 inBandEmissionMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchInBandEmissionTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchInBandEmissionTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchInBandEmissionTrace(instrumentHandle, selectorString, timeout, x0, dx, inBandEmission, inBandEmissionMask, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchInBandEmissionTrace(instrumentHandle, selectorString, timeout, x0, dx, inBandEmission, inBandEmissionMask, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPBCHDMRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchdmrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPBCHDMRSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPBCHDMRSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPBCHDMRSConstellationTrace(instrumentHandle, selectorString, timeout, pbchdmrsConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPBCHDMRSConstellationTrace(instrumentHandle, selectorString, timeout, pbchdmrsConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchdmrsrmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchdmrsrmsevmPerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchdmrsrmsevmPerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchdmrsrmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchdmrsrmsevmPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchdmrsrmsevmPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPBCHDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchDataConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPBCHDataConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPBCHDataConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPBCHDataConstellationTrace(instrumentHandle, selectorString, timeout, pbchDataConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPBCHDataConstellationTrace(instrumentHandle, selectorString, timeout, pbchDataConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchDataRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchDataRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchDataRMSEVMPerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pbchDataRMSEVMPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCH1024QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam1024Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH1024QAMConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCH1024QAMConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCH1024QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam1024Constellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCH1024QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam1024Constellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCH16QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam16Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH16QAMConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCH16QAMConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCH16QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam16Constellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCH16QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam16Constellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCH256QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam256Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH256QAMConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCH256QAMConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCH256QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam256Constellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCH256QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam256Constellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCH64QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam64Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH64QAMConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCH64QAMConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCH64QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam64Constellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCH64QAMConstellationTrace(instrumentHandle, selectorString, timeout, qam64Constellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCH8PSKConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle psk8Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH8PSKConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCH8PSKConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCH8PSKConstellationTrace(instrumentHandle, selectorString, timeout, psk8Constellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCH8PSKConstellationTrace(instrumentHandle, selectorString, timeout, psk8Constellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCHDMRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdschdmrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHDMRSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCHDMRSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCHDMRSConstellationTrace(instrumentHandle, selectorString, timeout, pdschdmrsConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCHDMRSConstellationTrace(instrumentHandle, selectorString, timeout, pdschdmrsConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCHDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdschDataConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHDataConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCHDataConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCHDataConstellationTrace(instrumentHandle, selectorString, timeout, pdschDataConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCHDataConstellationTrace(instrumentHandle, selectorString, timeout, pdschDataConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHDemodulatedBits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCHDemodulatedBits.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCHDemodulatedBits(instrumentHandle, selectorString, timeout, bits, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCHDemodulatedBits(instrumentHandle, selectorString, timeout, bits, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCHPTRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdschptrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHPTRSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCHPTRSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCHPTRSConstellationTrace(instrumentHandle, selectorString, timeout, pdschptrsConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCHPTRSConstellationTrace(instrumentHandle, selectorString, timeout, pdschptrsConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPDSCHQPSKConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qpskConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHQPSKConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPDSCHQPSKConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPDSCHQPSKConstellationTrace(instrumentHandle, selectorString, timeout, qpskConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPDSCHQPSKConstellationTrace(instrumentHandle, selectorString, timeout, qpskConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPSSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pssConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPSSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPSSConstellationTrace(instrumentHandle, selectorString, timeout, pssConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPSSConstellationTrace(instrumentHandle, selectorString, timeout, pssConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pssrmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pssrmsevmPerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pssrmsevmPerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPSSRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pssrmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPSSRMSEVMPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPSSRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pssrmsevmPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPSSRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, pssrmsevmPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPUSCHDMRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle puschdmrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHDMRSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPUSCHDMRSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPUSCHDMRSConstellationTrace(instrumentHandle, selectorString, timeout, puschdmrsConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPUSCHDMRSConstellationTrace(instrumentHandle, selectorString, timeout, puschdmrsConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPUSCHDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle puschDataConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHDataConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPUSCHDataConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPUSCHDataConstellationTrace(instrumentHandle, selectorString, timeout, puschDataConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPUSCHDataConstellationTrace(instrumentHandle, selectorString, timeout, puschDataConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPUSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHDemodulatedBits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPUSCHDemodulatedBits.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPUSCHDemodulatedBits(instrumentHandle, selectorString, timeout, bits, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPUSCHDemodulatedBits(instrumentHandle, selectorString, timeout, bits, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPUSCHPTRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle puschptrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHPTRSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPUSCHPTRSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPUSCHPTRSConstellationTrace(instrumentHandle, selectorString, timeout, puschptrsConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPUSCHPTRSConstellationTrace(instrumentHandle, selectorString, timeout, puschptrsConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPeakEVMPerSlotMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 peakEVMPerSlotMaximum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPeakEVMPerSlotMaximumTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPeakEVMPerSlotMaximumTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPeakEVMPerSlotMaximumTrace(instrumentHandle, selectorString, timeout, x0, dx, peakEVMPerSlotMaximum, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPeakEVMPerSlotMaximumTrace(instrumentHandle, selectorString, timeout, x0, dx, peakEVMPerSlotMaximum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPeakEVMPerSubcarrierMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 peakEVMPerSubcarrierMaximum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPeakEVMPerSubcarrierMaximumTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPeakEVMPerSubcarrierMaximumTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPeakEVMPerSubcarrierMaximumTrace(instrumentHandle, selectorString, timeout, x0, dx, peakEVMPerSubcarrierMaximum, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPeakEVMPerSubcarrierMaximumTrace(instrumentHandle, selectorString, timeout, x0, dx, peakEVMPerSubcarrierMaximum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchPeakEVMPerSymbolMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 peakEVMPerSymbolMaximum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPeakEVMPerSymbolMaximumTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchPeakEVMPerSymbolMaximumTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchPeakEVMPerSymbolMaximumTrace(instrumentHandle, selectorString, timeout, x0, dx, peakEVMPerSymbolMaximum, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchPeakEVMPerSymbolMaximumTrace(instrumentHandle, selectorString, timeout, x0, dx, peakEVMPerSymbolMaximum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchRMSEVMHighPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmHighPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSEVMHighPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchRMSEVMHighPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchRMSEVMHighPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmHighPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchRMSEVMHighPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmHighPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchRMSEVMLowPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmLowPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSEVMLowPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchRMSEVMLowPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchRMSEVMLowPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmLowPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchRMSEVMLowPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmLowPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchRMSEVMPerSlotMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSlotMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSEVMPerSlotMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchRMSEVMPerSlotMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchRMSEVMPerSlotMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSlotMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchRMSEVMPerSlotMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSlotMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchRMSEVMPerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchRMSEVMPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchSSSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle sssConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSSSConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchSSSConstellationTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchSSSConstellationTrace(instrumentHandle, selectorString, timeout, sssConstellation, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchSSSConstellationTrace(instrumentHandle, selectorString, timeout, sssConstellation, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 sssrmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, sssrmsevmPerSubcarrierMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, sssrmsevmPerSubcarrierMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchSSSRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 sssrmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSSSRMSEVMPerSymbolMeanTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchSSSRMSEVMPerSymbolMeanTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchSSSRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, sssrmsevmPerSymbolMean, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchSSSRMSEVMPerSymbolMeanTrace(instrumentHandle, selectorString, timeout, x0, dx, sssrmsevmPerSymbolMean, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchSpectralFlatnessTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatness[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSpectralFlatnessTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchSpectralFlatnessTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchSpectralFlatnessTrace(instrumentHandle, selectorString, timeout, x0, dx, spectralFlatness, spectralFlatnessLowerMask, spectralFlatnessUpperMask, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchSpectralFlatnessTrace(instrumentHandle, selectorString, timeout, x0, dx, spectralFlatness, spectralFlatnessLowerMask, spectralFlatnessUpperMask, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccFetchSubblockInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subblockInBandEmission[], float64 subblockInBandEmissionMask[], float64 subblockInBandEmissionRBIndices[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSubblockInBandEmissionTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchSubblockInBandEmissionTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccFetchSubblockInBandEmissionTrace(instrumentHandle, selectorString, timeout, subblockInBandEmission, subblockInBandEmissionMask, subblockInBandEmissionRBIndices, arraySize, actualArraySize);
#else
  return function_pointers_.ModAccFetchSubblockInBandEmissionTrace(instrumentHandle, selectorString, timeout, subblockInBandEmission, subblockInBandEmissionMask, subblockInBandEmissionRBIndices, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ModAccValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid)
{
  if (!function_pointers_.ModAccValidateCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccValidateCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ModAccValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
#else
  return function_pointers_.ModAccValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
#endif
}

int32 NiRFmxNRLibrary::OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.OBWCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_OBWCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxNR_OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxNRLibrary::OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.OBWCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_OBWCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxNR_OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxNRLibrary::OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.OBWCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_OBWCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxNR_OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxNRLibrary::OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency)
{
  if (!function_pointers_.OBWFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_OBWFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, absolutePower, startFrequency, stopFrequency);
#else
  return function_pointers_.OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, absolutePower, startFrequency, stopFrequency);
#endif
}

int32 NiRFmxNRLibrary::OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OBWFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_OBWFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxNR_OBWFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.OBWFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.PVTCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.PVTCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxNRLibrary::PVTCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.PVTCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTCfgMeasurementMethod.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#else
  return function_pointers_.PVTCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#endif
}

int32 NiRFmxNRLibrary::PVTCfgOFFPowerExclusionPeriods(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offPowerExclusionBefore, float64 offPowerExclusionAfter)
{
  if (!function_pointers_.PVTCfgOFFPowerExclusionPeriods) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTCfgOFFPowerExclusionPeriods.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTCfgOFFPowerExclusionPeriods(instrumentHandle, selectorString, offPowerExclusionBefore, offPowerExclusionAfter);
#else
  return function_pointers_.PVTCfgOFFPowerExclusionPeriods(instrumentHandle, selectorString, offPowerExclusionBefore, offPowerExclusionAfter);
#endif
}

int32 NiRFmxNRLibrary::PVTFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* absoluteOFFPowerBefore, float64* absoluteOFFPowerAfter, float64* absoluteONPower, float64* burstWidth)
{
  if (!function_pointers_.PVTFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTFetchMeasurement(instrumentHandle, selectorString, timeout, measurementStatus, absoluteOFFPowerBefore, absoluteOFFPowerAfter, absoluteONPower, burstWidth);
#else
  return function_pointers_.PVTFetchMeasurement(instrumentHandle, selectorString, timeout, measurementStatus, absoluteOFFPowerBefore, absoluteOFFPowerAfter, absoluteONPower, burstWidth);
#endif
}

int32 NiRFmxNRLibrary::PVTFetchMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 absoluteOFFPowerBefore[], float64 absoluteOFFPowerAfter[], float64 absoluteONPower[], float64 burstWidth[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTFetchMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTFetchMeasurementArray(instrumentHandle, selectorString, timeout, measurementStatus, absoluteOFFPowerBefore, absoluteOFFPowerAfter, absoluteONPower, burstWidth, arraySize, actualArraySize);
#else
  return function_pointers_.PVTFetchMeasurementArray(instrumentHandle, selectorString, timeout, measurementStatus, absoluteOFFPowerBefore, absoluteOFFPowerAfter, absoluteONPower, burstWidth, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::PVTFetchSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchSignalPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTFetchSignalPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTFetchSignalPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, signalPower, absoluteLimit, arraySize, actualArraySize);
#else
  return function_pointers_.PVTFetchSignalPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, signalPower, absoluteLimit, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::PVTFetchWindowedSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 windowedSignalPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchWindowedSignalPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_PVTFetchWindowedSignalPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_PVTFetchWindowedSignalPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, windowedSignalPower, arraySize, actualArraySize);
#else
  return function_pointers_.PVTFetchWindowedSignalPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, windowedSignalPower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ResetAttribute.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ResetAttribute(instrumentHandle, selectorString, attributeID);
#else
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
#endif
}

int32 NiRFmxNRLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ResetToDefault.");
  }
#if defined(_MSC_VER)
  return RFmxNR_ResetToDefault(instrumentHandle, selectorString);
#else
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.SEMCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgComponentCarrierRatedOutputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierRatedOutputPower)
{
  if (!function_pointers_.SEMCfgComponentCarrierRatedOutputPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgComponentCarrierRatedOutputPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgComponentCarrierRatedOutputPower(instrumentHandle, selectorString, componentCarrierRatedOutputPower);
#else
  return function_pointers_.SEMCfgComponentCarrierRatedOutputPower(instrumentHandle, selectorString, componentCarrierRatedOutputPower);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgComponentCarrierRatedOutputPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierRatedOutputPower[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgComponentCarrierRatedOutputPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgComponentCarrierRatedOutputPowerArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgComponentCarrierRatedOutputPowerArray(instrumentHandle, selectorString, componentCarrierRatedOutputPower, numberOfElements);
#else
  return function_pointers_.SEMCfgComponentCarrierRatedOutputPowerArray(instrumentHandle, selectorString, componentCarrierRatedOutputPower, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  if (!function_pointers_.SEMCfgNumberOfOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgNumberOfOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
#else
  return function_pointers_.SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 absoluteLimitStart, float64 absoluteLimitStop)
{
  if (!function_pointers_.SEMCfgOffsetAbsoluteLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetAbsoluteLimit.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitStart, absoluteLimitStop);
#else
  return function_pointers_.SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitStart, absoluteLimitStop);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetAbsoluteLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetAbsoluteLimitArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitStart, absoluteLimitStop, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitStart, absoluteLimitStop, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral)
{
  if (!function_pointers_.SEMCfgOffsetBandwidthIntegral) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetBandwidthIntegral.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, bandwidthIntegral);
#else
  return function_pointers_.SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, bandwidthIntegral);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetBandwidthIntegralArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetBandwidthIntegralArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetBandwidthIntegralArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetBandwidthIntegralArray(instrumentHandle, selectorString, bandwidthIntegral, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetBandwidthIntegralArray(instrumentHandle, selectorString, bandwidthIntegral, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetSideband)
{
  if (!function_pointers_.SEMCfgOffsetFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband);
#else
  return function_pointers_.SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetFrequencyArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask)
{
  if (!function_pointers_.SEMCfgOffsetLimitFailMask) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetLimitFailMask.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
#else
  return function_pointers_.SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetLimitFailMaskArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetLimitFailMaskArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetLimitFailMaskArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetLimitFailMaskArray(instrumentHandle, selectorString, limitFailMask, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetLimitFailMaskArray(instrumentHandle, selectorString, limitFailMask, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW, int32 offsetRBWFilterType)
{
  if (!function_pointers_.SEMCfgOffsetRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType);
#else
  return function_pointers_.SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW[], int32 offsetRBWFilterType[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRBWFilterArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetRBWFilterArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart, float64 relativeLimitStop)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetRelativeLimit.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop);
#else
  return function_pointers_.SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgOffsetRelativeLimitArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop, numberOfElements);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.SEMCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxNRLibrary::SEMCfgUplinkMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkMaskType)
{
  if (!function_pointers_.SEMCfgUplinkMaskType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMCfgUplinkMaskType.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMCfgUplinkMaskType(instrumentHandle, selectorString, uplinkMaskType);
#else
  return function_pointers_.SEMCfgUplinkMaskType(instrumentHandle, selectorString, uplinkMaskType);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* relativePower)
{
  if (!function_pointers_.SEMFetchComponentCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchComponentCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, relativePower);
#else
  return function_pointers_.SEMFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, relativePower);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchComponentCarrierMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchComponentCarrierMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, relativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, relativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchLowerOffsetMargin.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#else
  return function_pointers_.SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchLowerOffsetMarginArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchLowerOffsetPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#else
  return function_pointers_.SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchLowerOffsetPowerArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  if (!function_pointers_.SEMFetchMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchMeasurementStatus.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
#else
  return function_pointers_.SEMFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, compositeMask, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, compositeMask, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  if (!function_pointers_.SEMFetchSubblockMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchSubblockMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
#else
  return function_pointers_.SEMFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  if (!function_pointers_.SEMFetchTotalAggregatedPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchTotalAggregatedPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
#else
  return function_pointers_.SEMFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchUpperOffsetMargin.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#else
  return function_pointers_.SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchUpperOffsetMarginArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchUpperOffsetPower.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#else
  return function_pointers_.SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#endif
}

int32 NiRFmxNRLibrary::SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SEMFetchUpperOffsetPowerArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SelectMeasurements.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
#else
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
#endif
}

int32 NiRFmxNRLibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SendSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SendSoftwareEdgeTrigger(instrumentHandle);
#else
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeF32.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeF32Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeF64.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeF64Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI16.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI32.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI32Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI64.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI64Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI8.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeI8Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeNIComplexDoubleArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeNIComplexSingleArray.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeString.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeU16.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeU32.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeU32Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeU64Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeU8.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxNRLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_SetAttributeU8Array.");
  }
#if defined(_MSC_VER)
  return RFmxNR_SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxNRLibrary::TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averagePowerMean, float64* peakPowerMaximum)
{
  if (!function_pointers_.TXPFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_TXPFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxNR_TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum);
#else
  return function_pointers_.TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averagePowerMean, peakPowerMaximum);
#endif
}

int32 NiRFmxNRLibrary::TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.TXPFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_TXPFetchPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxNR_TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#else
  return function_pointers_.TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#endif
}

int32 NiRFmxNRLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_WaitForAcquisitionComplete.");
  }
#if defined(_MSC_VER)
  return RFmxNR_WaitForAcquisitionComplete(instrumentHandle, timeout);
#else
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
#endif
}

int32 NiRFmxNRLibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_WaitForMeasurementComplete.");
  }
#if defined(_MSC_VER)
  return RFmxNR_WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
#else
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
#endif
}

}  // namespace nirfmxnr_grpc
