//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-RFMXNR
//---------------------------------------------------------------------
#ifndef NIRFMXNR_GRPC_LIBRARY_H
#define NIRFMXNR_GRPC_LIBRARY_H

#include "nirfmxnr_library_interface.h"

#include <server/shared_library.h>

namespace nirfmxnr_grpc {

class NiRFmxNRLibrary : public nirfmxnr_grpc::NiRFmxNRLibraryInterface {
 public:
  NiRFmxNRLibrary();
  virtual ~NiRFmxNRLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod);
  int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled);
  int32 ACPCfgNumberOfENDCOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfENDCOffsets);
  int32 ACPCfgNumberOfEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfEUTRAOffsets);
  int32 ACPCfgNumberOfNROffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfNROffsets);
  int32 ACPCfgNumberOfUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets);
  int32 ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits);
  int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType);
  int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower);
  int32 ACPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower);
  int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency);
  int32 ACPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower);
  int32 ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid);
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved);
  int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved);
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel);
  int32 BuildBandwidthPartString(char selectorString[], int32 bandwidthPartNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildCORESETClusterString(char selectorString[], int32 coresetClusterNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildCORESETString(char selectorString[], int32 coresetNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildListStepString(char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[]);
  int32 BuildListString(char listName[], char resultName[], int32 selectorStringLength, char selectorString[]);
  int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildPDCCHString(char selectorString[], int32 pdcchNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildPDSCHClusterString(char selectorString[], int32 pdschClusterNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildPDSCHString(char selectorString[], int32 pdschNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildPUSCHClusterString(char selectorString[], int32 puschClusterNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildPUSCHString(char selectorString[], int32 puschNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]);
  int32 BuildSubblockString(char selectorString[], int32 subblockNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildUserString(char selectorString[], int32 userNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType);
  int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 CHPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower);
  int32 CHPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize);
  int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize);
  int32 CHPFetchSubblockPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower);
  int32 CHPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower);
  int32 CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid);
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger);
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation);
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency);
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency);
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger);
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue);
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation);
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue);
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel);
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger);
  int32 CfggNodeBCategory(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 gNodeBCategory);
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone);
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]);
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy);
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 CreateList(niRFmxInstrHandle instrumentHandle, char listName[]);
  int32 CreateListStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex);
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]);
  int32 DeleteList(niRFmxInstrHandle instrumentHandle, char listName[]);
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]);
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists);
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal);
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal);
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal);
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal);
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal);
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal);
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]);
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal);
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal);
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal);
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession);
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut);
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]);
  int32 ModAccAutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout);
  int32 ModAccCfgMeasurementMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMode);
  int32 ModAccCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled);
  int32 ModAccCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize);
  int32 ModAccClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle);
  int32 ModAccFetchCompositeEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* compositeRMSEVMMean, float64* compositePeakEVMMaximum);
  int32 ModAccFetchFrequencyErrorMean(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyErrorMean);
  int32 ModAccFetchFrequencyErrorPerSlotMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequencyErrorPerSlotMaximum[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchIQGainImbalancePerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqGainImbalancePerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqQuadratureErrorPerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 inBandEmission[], float32 inBandEmissionMask[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPBCHDMRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchdmrsConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchdmrsrmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchdmrsrmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPBCHDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchDataConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchDataRMSEVMPerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pbchDataRMSEVMPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCH1024QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam1024Constellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCH16QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam16Constellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCH256QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam256Constellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCH64QAMConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam64Constellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCH8PSKConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle psk8Constellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCHDMRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdschdmrsConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCHDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdschDataConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCHPTRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdschptrsConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPDSCHQPSKConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qpskConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPSSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pssConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pssrmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPSSRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pssrmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPUSCHDMRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle puschdmrsConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPUSCHDataConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle puschDataConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPUSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPUSCHPTRSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle puschptrsConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPeakEVMPerSlotMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 peakEVMPerSlotMaximum[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPeakEVMPerSubcarrierMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 peakEVMPerSubcarrierMaximum[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPeakEVMPerSymbolMaximumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 peakEVMPerSymbolMaximum[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchRMSEVMHighPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmHighPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchRMSEVMLowPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmLowPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchRMSEVMPerSlotMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSlotMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchSSSConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle sssConstellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 sssrmsevmPerSubcarrierMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchSSSRMSEVMPerSymbolMeanTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 sssrmsevmPerSymbolMean[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchSpectralFlatnessTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatness[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchSubblockInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subblockInBandEmission[], float64 subblockInBandEmissionMask[], float64 subblockInBandEmissionRBIndices[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchTransientPeriodLocationsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 transientPeriodLocations[], int32 arraySize, int32* actualArraySize);
  int32 ModAccValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid);
  int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType);
  int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency);
  int32 OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize);
  int32 PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 PVTCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod);
  int32 PVTCfgOFFPowerExclusionPeriods(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offPowerExclusionBefore, float64 offPowerExclusionAfter);
  int32 PVTFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* absoluteOFFPowerBefore, float64* absoluteOFFPowerAfter, float64* absoluteONPower, float64* burstWidth);
  int32 PVTFetchMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 absoluteOFFPowerBefore[], float64 absoluteOFFPowerAfter[], float64 absoluteONPower[], float64 burstWidth[], int32 arraySize, int32* actualArraySize);
  int32 PVTFetchSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize);
  int32 PVTFetchWindowedSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 windowedSignalPower[], int32 arraySize, int32* actualArraySize);
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID);
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 SEMCfgComponentCarrierRatedOutputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierRatedOutputPower);
  int32 SEMCfgComponentCarrierRatedOutputPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierRatedOutputPower[], int32 numberOfElements);
  int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets);
  int32 SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 absoluteLimitStart, float64 absoluteLimitStop);
  int32 SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements);
  int32 SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral);
  int32 SEMCfgOffsetBandwidthIntegralArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral[], int32 numberOfElements);
  int32 SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetSideband);
  int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements);
  int32 SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask);
  int32 SEMCfgOffsetLimitFailMaskArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask[], int32 numberOfElements);
  int32 SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW, int32 offsetRBWFilterType);
  int32 SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW[], int32 offsetRBWFilterType[], int32 numberOfElements);
  int32 SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart, float64 relativeLimitStop);
  int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements);
  int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 SEMCfgUplinkMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkMaskType);
  int32 SEMFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* relativePower);
  int32 SEMFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 relativePower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower);
  int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower);
  int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus);
  int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency);
  int32 SEMFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower);
  int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower);
  int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower);
  int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize);
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces);
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle);
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal);
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize);
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal);
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize);
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal);
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal);
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize);
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal);
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize);
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal);
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize);
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]);
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal);
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal);
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize);
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize);
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal);
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize);
  int32 TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averagePowerMean, float64* peakPowerMaximum);
  int32 TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize);
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout);
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout);

 private:
  using ACPCfgAveragingPtr = decltype(&RFmxNR_ACPCfgAveraging);
  using ACPCfgMeasurementMethodPtr = decltype(&RFmxNR_ACPCfgMeasurementMethod);
  using ACPCfgNoiseCompensationEnabledPtr = decltype(&RFmxNR_ACPCfgNoiseCompensationEnabled);
  using ACPCfgNumberOfENDCOffsetsPtr = decltype(&RFmxNR_ACPCfgNumberOfENDCOffsets);
  using ACPCfgNumberOfEUTRAOffsetsPtr = decltype(&RFmxNR_ACPCfgNumberOfEUTRAOffsets);
  using ACPCfgNumberOfNROffsetsPtr = decltype(&RFmxNR_ACPCfgNumberOfNROffsets);
  using ACPCfgNumberOfUTRAOffsetsPtr = decltype(&RFmxNR_ACPCfgNumberOfUTRAOffsets);
  using ACPCfgPowerUnitsPtr = decltype(&RFmxNR_ACPCfgPowerUnits);
  using ACPCfgRBWFilterPtr = decltype(&RFmxNR_ACPCfgRBWFilter);
  using ACPCfgSweepTimePtr = decltype(&RFmxNR_ACPCfgSweepTime);
  using ACPFetchAbsolutePowersTracePtr = decltype(&RFmxNR_ACPFetchAbsolutePowersTrace);
  using ACPFetchComponentCarrierMeasurementPtr = decltype(&RFmxNR_ACPFetchComponentCarrierMeasurement);
  using ACPFetchComponentCarrierMeasurementArrayPtr = decltype(&RFmxNR_ACPFetchComponentCarrierMeasurementArray);
  using ACPFetchOffsetMeasurementPtr = decltype(&RFmxNR_ACPFetchOffsetMeasurement);
  using ACPFetchOffsetMeasurementArrayPtr = decltype(&RFmxNR_ACPFetchOffsetMeasurementArray);
  using ACPFetchRelativePowersTracePtr = decltype(&RFmxNR_ACPFetchRelativePowersTrace);
  using ACPFetchSpectrumPtr = decltype(&RFmxNR_ACPFetchSpectrum);
  using ACPFetchSubblockMeasurementPtr = decltype(&RFmxNR_ACPFetchSubblockMeasurement);
  using ACPFetchTotalAggregatedPowerPtr = decltype(&RFmxNR_ACPFetchTotalAggregatedPower);
  using ACPValidateNoiseCalibrationDataPtr = decltype(&RFmxNR_ACPValidateNoiseCalibrationData);
  using AbortMeasurementsPtr = decltype(&RFmxNR_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxNR_AnalyzeIQ1Waveform);
  using AnalyzeSpectrum1WaveformPtr = decltype(&RFmxNR_AnalyzeSpectrum1Waveform);
  using AutoLevelPtr = decltype(&RFmxNR_AutoLevel);
  using BuildBandwidthPartStringPtr = decltype(&RFmxNR_BuildBandwidthPartString);
  using BuildCORESETClusterStringPtr = decltype(&RFmxNR_BuildCORESETClusterString);
  using BuildCORESETStringPtr = decltype(&RFmxNR_BuildCORESETString);
  using BuildCarrierStringPtr = decltype(&RFmxNR_BuildCarrierString);
  using BuildListStepStringPtr = decltype(&RFmxNR_BuildListStepString);
  using BuildListStringPtr = decltype(&RFmxNR_BuildListString);
  using BuildOffsetStringPtr = decltype(&RFmxNR_BuildOffsetString);
  using BuildPDCCHStringPtr = decltype(&RFmxNR_BuildPDCCHString);
  using BuildPDSCHClusterStringPtr = decltype(&RFmxNR_BuildPDSCHClusterString);
  using BuildPDSCHStringPtr = decltype(&RFmxNR_BuildPDSCHString);
  using BuildPUSCHClusterStringPtr = decltype(&RFmxNR_BuildPUSCHClusterString);
  using BuildPUSCHStringPtr = decltype(&RFmxNR_BuildPUSCHString);
  using BuildSignalStringPtr = decltype(&RFmxNR_BuildSignalString);
  using BuildSubblockStringPtr = decltype(&RFmxNR_BuildSubblockString);
  using BuildUserStringPtr = decltype(&RFmxNR_BuildUserString);
  using CHPCfgAveragingPtr = decltype(&RFmxNR_CHPCfgAveraging);
  using CHPCfgRBWFilterPtr = decltype(&RFmxNR_CHPCfgRBWFilter);
  using CHPCfgSweepTimePtr = decltype(&RFmxNR_CHPCfgSweepTime);
  using CHPFetchComponentCarrierMeasurementPtr = decltype(&RFmxNR_CHPFetchComponentCarrierMeasurement);
  using CHPFetchComponentCarrierMeasurementArrayPtr = decltype(&RFmxNR_CHPFetchComponentCarrierMeasurementArray);
  using CHPFetchSpectrumPtr = decltype(&RFmxNR_CHPFetchSpectrum);
  using CHPFetchSubblockPowerPtr = decltype(&RFmxNR_CHPFetchSubblockPower);
  using CHPFetchTotalAggregatedPowerPtr = decltype(&RFmxNR_CHPFetchTotalAggregatedPower);
  using CHPValidateNoiseCalibrationDataPtr = decltype(&RFmxNR_CHPValidateNoiseCalibrationData);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxNR_CfgDigitalEdgeTrigger);
  using CfgExternalAttenuationPtr = decltype(&RFmxNR_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxNR_CfgFrequency);
  using CfgFrequencyReferencePtr = decltype(&RFmxNR_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxNR_CfgIQPowerEdgeTrigger);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxNR_CfgMechanicalAttenuation);
  using CfgRFPtr = decltype(&RFmxNR_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxNR_CfgRFAttenuation);
  using CfgReferenceLevelPtr = decltype(&RFmxNR_CfgReferenceLevel);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxNR_CfgSoftwareEdgeTrigger);
  using CfggNodeBCategoryPtr = decltype(&RFmxNR_CfggNodeBCategory);
  using CheckMeasurementStatusPtr = decltype(&RFmxNR_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxNR_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxNR_ClearNamedResult);
  using ClearNoiseCalibrationDatabasePtr = decltype(&RFmxNR_ClearNoiseCalibrationDatabase);
  using CloneSignalConfigurationPtr = decltype(&RFmxNR_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxNR_Close);
  using CommitPtr = decltype(&RFmxNR_Commit);
  using CreateListPtr = decltype(&RFmxNR_CreateList);
  using CreateListStepPtr = decltype(&RFmxNR_CreateListStep);
  using CreateSignalConfigurationPtr = decltype(&RFmxNR_CreateSignalConfiguration);
  using DeleteListPtr = decltype(&RFmxNR_DeleteList);
  using DeleteSignalConfigurationPtr = decltype(&RFmxNR_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxNR_DisableTrigger);
  using GetAllNamedResultNamesPtr = decltype(&RFmxNR_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxNR_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxNR_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxNR_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxNR_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxNR_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxNR_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxNR_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxNR_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxNR_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxNR_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxNR_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxNR_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxNR_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxNR_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxNR_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxNR_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxNR_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxNR_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxNR_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxNR_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxNR_GetError);
  using GetErrorStringPtr = decltype(&RFmxNR_GetErrorString);
  using InitializePtr = decltype(&RFmxNR_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxNR_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxNR_Initiate);
  using ModAccAutoLevelPtr = decltype(&RFmxNR_ModAccAutoLevel);
  using ModAccCfgMeasurementModePtr = decltype(&RFmxNR_ModAccCfgMeasurementMode);
  using ModAccCfgNoiseCompensationEnabledPtr = decltype(&RFmxNR_ModAccCfgNoiseCompensationEnabled);
  using ModAccCfgReferenceWaveformPtr = decltype(&RFmxNR_ModAccCfgReferenceWaveform);
  using ModAccClearNoiseCalibrationDatabasePtr = decltype(&RFmxNR_ModAccClearNoiseCalibrationDatabase);
  using ModAccFetchCompositeEVMPtr = decltype(&RFmxNR_ModAccFetchCompositeEVM);
  using ModAccFetchFrequencyErrorMeanPtr = decltype(&RFmxNR_ModAccFetchFrequencyErrorMean);
  using ModAccFetchFrequencyErrorPerSlotMaximumTracePtr = decltype(&RFmxNR_ModAccFetchFrequencyErrorPerSlotMaximumTrace);
  using ModAccFetchIQGainImbalancePerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchIQGainImbalancePerSubcarrierMeanTrace);
  using ModAccFetchIQQuadratureErrorPerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace);
  using ModAccFetchInBandEmissionTracePtr = decltype(&RFmxNR_ModAccFetchInBandEmissionTrace);
  using ModAccFetchPBCHDMRSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPBCHDMRSConstellationTrace);
  using ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace);
  using ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace);
  using ModAccFetchPBCHDataConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPBCHDataConstellationTrace);
  using ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace);
  using ModAccFetchPBCHDataRMSEVMPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace);
  using ModAccFetchPDSCH1024QAMConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCH1024QAMConstellationTrace);
  using ModAccFetchPDSCH16QAMConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCH16QAMConstellationTrace);
  using ModAccFetchPDSCH256QAMConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCH256QAMConstellationTrace);
  using ModAccFetchPDSCH64QAMConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCH64QAMConstellationTrace);
  using ModAccFetchPDSCH8PSKConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCH8PSKConstellationTrace);
  using ModAccFetchPDSCHDMRSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCHDMRSConstellationTrace);
  using ModAccFetchPDSCHDataConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCHDataConstellationTrace);
  using ModAccFetchPDSCHDemodulatedBitsPtr = decltype(&RFmxNR_ModAccFetchPDSCHDemodulatedBits);
  using ModAccFetchPDSCHPTRSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCHPTRSConstellationTrace);
  using ModAccFetchPDSCHQPSKConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPDSCHQPSKConstellationTrace);
  using ModAccFetchPSSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPSSConstellationTrace);
  using ModAccFetchPSSRMSEVMPerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace);
  using ModAccFetchPSSRMSEVMPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchPSSRMSEVMPerSymbolMeanTrace);
  using ModAccFetchPUSCHDMRSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPUSCHDMRSConstellationTrace);
  using ModAccFetchPUSCHDataConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPUSCHDataConstellationTrace);
  using ModAccFetchPUSCHDemodulatedBitsPtr = decltype(&RFmxNR_ModAccFetchPUSCHDemodulatedBits);
  using ModAccFetchPUSCHPTRSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchPUSCHPTRSConstellationTrace);
  using ModAccFetchPeakEVMPerSlotMaximumTracePtr = decltype(&RFmxNR_ModAccFetchPeakEVMPerSlotMaximumTrace);
  using ModAccFetchPeakEVMPerSubcarrierMaximumTracePtr = decltype(&RFmxNR_ModAccFetchPeakEVMPerSubcarrierMaximumTrace);
  using ModAccFetchPeakEVMPerSymbolMaximumTracePtr = decltype(&RFmxNR_ModAccFetchPeakEVMPerSymbolMaximumTrace);
  using ModAccFetchRMSEVMHighPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchRMSEVMHighPerSymbolMeanTrace);
  using ModAccFetchRMSEVMLowPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchRMSEVMLowPerSymbolMeanTrace);
  using ModAccFetchRMSEVMPerSlotMeanTracePtr = decltype(&RFmxNR_ModAccFetchRMSEVMPerSlotMeanTrace);
  using ModAccFetchRMSEVMPerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchRMSEVMPerSubcarrierMeanTrace);
  using ModAccFetchRMSEVMPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchRMSEVMPerSymbolMeanTrace);
  using ModAccFetchSSSConstellationTracePtr = decltype(&RFmxNR_ModAccFetchSSSConstellationTrace);
  using ModAccFetchSSSRMSEVMPerSubcarrierMeanTracePtr = decltype(&RFmxNR_ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace);
  using ModAccFetchSSSRMSEVMPerSymbolMeanTracePtr = decltype(&RFmxNR_ModAccFetchSSSRMSEVMPerSymbolMeanTrace);
  using ModAccFetchSpectralFlatnessTracePtr = decltype(&RFmxNR_ModAccFetchSpectralFlatnessTrace);
  using ModAccFetchSubblockInBandEmissionTracePtr = decltype(&RFmxNR_ModAccFetchSubblockInBandEmissionTrace);
  using ModAccFetchTransientPeriodLocationsTracePtr = decltype(&RFmxNR_ModAccFetchTransientPeriodLocationsTrace);
  using ModAccValidateCalibrationDataPtr = decltype(&RFmxNR_ModAccValidateCalibrationData);
  using OBWCfgAveragingPtr = decltype(&RFmxNR_OBWCfgAveraging);
  using OBWCfgRBWFilterPtr = decltype(&RFmxNR_OBWCfgRBWFilter);
  using OBWCfgSweepTimePtr = decltype(&RFmxNR_OBWCfgSweepTime);
  using OBWFetchMeasurementPtr = decltype(&RFmxNR_OBWFetchMeasurement);
  using OBWFetchSpectrumPtr = decltype(&RFmxNR_OBWFetchSpectrum);
  using PVTCfgAveragingPtr = decltype(&RFmxNR_PVTCfgAveraging);
  using PVTCfgMeasurementMethodPtr = decltype(&RFmxNR_PVTCfgMeasurementMethod);
  using PVTCfgOFFPowerExclusionPeriodsPtr = decltype(&RFmxNR_PVTCfgOFFPowerExclusionPeriods);
  using PVTFetchMeasurementPtr = decltype(&RFmxNR_PVTFetchMeasurement);
  using PVTFetchMeasurementArrayPtr = decltype(&RFmxNR_PVTFetchMeasurementArray);
  using PVTFetchSignalPowerTracePtr = decltype(&RFmxNR_PVTFetchSignalPowerTrace);
  using PVTFetchWindowedSignalPowerTracePtr = decltype(&RFmxNR_PVTFetchWindowedSignalPowerTrace);
  using ResetAttributePtr = decltype(&RFmxNR_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxNR_ResetToDefault);
  using SEMCfgAveragingPtr = decltype(&RFmxNR_SEMCfgAveraging);
  using SEMCfgComponentCarrierRatedOutputPowerPtr = decltype(&RFmxNR_SEMCfgComponentCarrierRatedOutputPower);
  using SEMCfgComponentCarrierRatedOutputPowerArrayPtr = decltype(&RFmxNR_SEMCfgComponentCarrierRatedOutputPowerArray);
  using SEMCfgNumberOfOffsetsPtr = decltype(&RFmxNR_SEMCfgNumberOfOffsets);
  using SEMCfgOffsetAbsoluteLimitPtr = decltype(&RFmxNR_SEMCfgOffsetAbsoluteLimit);
  using SEMCfgOffsetAbsoluteLimitArrayPtr = decltype(&RFmxNR_SEMCfgOffsetAbsoluteLimitArray);
  using SEMCfgOffsetBandwidthIntegralPtr = decltype(&RFmxNR_SEMCfgOffsetBandwidthIntegral);
  using SEMCfgOffsetBandwidthIntegralArrayPtr = decltype(&RFmxNR_SEMCfgOffsetBandwidthIntegralArray);
  using SEMCfgOffsetFrequencyPtr = decltype(&RFmxNR_SEMCfgOffsetFrequency);
  using SEMCfgOffsetFrequencyArrayPtr = decltype(&RFmxNR_SEMCfgOffsetFrequencyArray);
  using SEMCfgOffsetLimitFailMaskPtr = decltype(&RFmxNR_SEMCfgOffsetLimitFailMask);
  using SEMCfgOffsetLimitFailMaskArrayPtr = decltype(&RFmxNR_SEMCfgOffsetLimitFailMaskArray);
  using SEMCfgOffsetRBWFilterPtr = decltype(&RFmxNR_SEMCfgOffsetRBWFilter);
  using SEMCfgOffsetRBWFilterArrayPtr = decltype(&RFmxNR_SEMCfgOffsetRBWFilterArray);
  using SEMCfgOffsetRelativeLimitPtr = decltype(&RFmxNR_SEMCfgOffsetRelativeLimit);
  using SEMCfgOffsetRelativeLimitArrayPtr = decltype(&RFmxNR_SEMCfgOffsetRelativeLimitArray);
  using SEMCfgSweepTimePtr = decltype(&RFmxNR_SEMCfgSweepTime);
  using SEMCfgUplinkMaskTypePtr = decltype(&RFmxNR_SEMCfgUplinkMaskType);
  using SEMFetchComponentCarrierMeasurementPtr = decltype(&RFmxNR_SEMFetchComponentCarrierMeasurement);
  using SEMFetchComponentCarrierMeasurementArrayPtr = decltype(&RFmxNR_SEMFetchComponentCarrierMeasurementArray);
  using SEMFetchLowerOffsetMarginPtr = decltype(&RFmxNR_SEMFetchLowerOffsetMargin);
  using SEMFetchLowerOffsetMarginArrayPtr = decltype(&RFmxNR_SEMFetchLowerOffsetMarginArray);
  using SEMFetchLowerOffsetPowerPtr = decltype(&RFmxNR_SEMFetchLowerOffsetPower);
  using SEMFetchLowerOffsetPowerArrayPtr = decltype(&RFmxNR_SEMFetchLowerOffsetPowerArray);
  using SEMFetchMeasurementStatusPtr = decltype(&RFmxNR_SEMFetchMeasurementStatus);
  using SEMFetchSpectrumPtr = decltype(&RFmxNR_SEMFetchSpectrum);
  using SEMFetchSubblockMeasurementPtr = decltype(&RFmxNR_SEMFetchSubblockMeasurement);
  using SEMFetchTotalAggregatedPowerPtr = decltype(&RFmxNR_SEMFetchTotalAggregatedPower);
  using SEMFetchUpperOffsetMarginPtr = decltype(&RFmxNR_SEMFetchUpperOffsetMargin);
  using SEMFetchUpperOffsetMarginArrayPtr = decltype(&RFmxNR_SEMFetchUpperOffsetMarginArray);
  using SEMFetchUpperOffsetPowerPtr = decltype(&RFmxNR_SEMFetchUpperOffsetPower);
  using SEMFetchUpperOffsetPowerArrayPtr = decltype(&RFmxNR_SEMFetchUpperOffsetPowerArray);
  using SelectMeasurementsPtr = decltype(&RFmxNR_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxNR_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxNR_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxNR_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxNR_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxNR_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxNR_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxNR_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxNR_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxNR_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxNR_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxNR_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxNR_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxNR_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxNR_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxNR_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxNR_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxNR_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxNR_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxNR_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxNR_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxNR_SetAttributeU8Array);
  using TXPFetchMeasurementPtr = decltype(&RFmxNR_TXPFetchMeasurement);
  using TXPFetchPowerTracePtr = decltype(&RFmxNR_TXPFetchPowerTrace);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxNR_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxNR_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    ACPCfgAveragingPtr ACPCfgAveraging;
    ACPCfgMeasurementMethodPtr ACPCfgMeasurementMethod;
    ACPCfgNoiseCompensationEnabledPtr ACPCfgNoiseCompensationEnabled;
    ACPCfgNumberOfENDCOffsetsPtr ACPCfgNumberOfENDCOffsets;
    ACPCfgNumberOfEUTRAOffsetsPtr ACPCfgNumberOfEUTRAOffsets;
    ACPCfgNumberOfNROffsetsPtr ACPCfgNumberOfNROffsets;
    ACPCfgNumberOfUTRAOffsetsPtr ACPCfgNumberOfUTRAOffsets;
    ACPCfgPowerUnitsPtr ACPCfgPowerUnits;
    ACPCfgRBWFilterPtr ACPCfgRBWFilter;
    ACPCfgSweepTimePtr ACPCfgSweepTime;
    ACPFetchAbsolutePowersTracePtr ACPFetchAbsolutePowersTrace;
    ACPFetchComponentCarrierMeasurementPtr ACPFetchComponentCarrierMeasurement;
    ACPFetchComponentCarrierMeasurementArrayPtr ACPFetchComponentCarrierMeasurementArray;
    ACPFetchOffsetMeasurementPtr ACPFetchOffsetMeasurement;
    ACPFetchOffsetMeasurementArrayPtr ACPFetchOffsetMeasurementArray;
    ACPFetchRelativePowersTracePtr ACPFetchRelativePowersTrace;
    ACPFetchSpectrumPtr ACPFetchSpectrum;
    ACPFetchSubblockMeasurementPtr ACPFetchSubblockMeasurement;
    ACPFetchTotalAggregatedPowerPtr ACPFetchTotalAggregatedPower;
    ACPValidateNoiseCalibrationDataPtr ACPValidateNoiseCalibrationData;
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AnalyzeSpectrum1WaveformPtr AnalyzeSpectrum1Waveform;
    AutoLevelPtr AutoLevel;
    BuildBandwidthPartStringPtr BuildBandwidthPartString;
    BuildCORESETClusterStringPtr BuildCORESETClusterString;
    BuildCORESETStringPtr BuildCORESETString;
    BuildCarrierStringPtr BuildCarrierString;
    BuildListStepStringPtr BuildListStepString;
    BuildListStringPtr BuildListString;
    BuildOffsetStringPtr BuildOffsetString;
    BuildPDCCHStringPtr BuildPDCCHString;
    BuildPDSCHClusterStringPtr BuildPDSCHClusterString;
    BuildPDSCHStringPtr BuildPDSCHString;
    BuildPUSCHClusterStringPtr BuildPUSCHClusterString;
    BuildPUSCHStringPtr BuildPUSCHString;
    BuildSignalStringPtr BuildSignalString;
    BuildSubblockStringPtr BuildSubblockString;
    BuildUserStringPtr BuildUserString;
    CHPCfgAveragingPtr CHPCfgAveraging;
    CHPCfgRBWFilterPtr CHPCfgRBWFilter;
    CHPCfgSweepTimePtr CHPCfgSweepTime;
    CHPFetchComponentCarrierMeasurementPtr CHPFetchComponentCarrierMeasurement;
    CHPFetchComponentCarrierMeasurementArrayPtr CHPFetchComponentCarrierMeasurementArray;
    CHPFetchSpectrumPtr CHPFetchSpectrum;
    CHPFetchSubblockPowerPtr CHPFetchSubblockPower;
    CHPFetchTotalAggregatedPowerPtr CHPFetchTotalAggregatedPower;
    CHPValidateNoiseCalibrationDataPtr CHPValidateNoiseCalibrationData;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CfggNodeBCategoryPtr CfggNodeBCategory;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    ClearNoiseCalibrationDatabasePtr ClearNoiseCalibrationDatabase;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateListPtr CreateList;
    CreateListStepPtr CreateListStep;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteListPtr DeleteList;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    ModAccAutoLevelPtr ModAccAutoLevel;
    ModAccCfgMeasurementModePtr ModAccCfgMeasurementMode;
    ModAccCfgNoiseCompensationEnabledPtr ModAccCfgNoiseCompensationEnabled;
    ModAccCfgReferenceWaveformPtr ModAccCfgReferenceWaveform;
    ModAccClearNoiseCalibrationDatabasePtr ModAccClearNoiseCalibrationDatabase;
    ModAccFetchCompositeEVMPtr ModAccFetchCompositeEVM;
    ModAccFetchFrequencyErrorMeanPtr ModAccFetchFrequencyErrorMean;
    ModAccFetchFrequencyErrorPerSlotMaximumTracePtr ModAccFetchFrequencyErrorPerSlotMaximumTrace;
    ModAccFetchIQGainImbalancePerSubcarrierMeanTracePtr ModAccFetchIQGainImbalancePerSubcarrierMeanTrace;
    ModAccFetchIQQuadratureErrorPerSubcarrierMeanTracePtr ModAccFetchIQQuadratureErrorPerSubcarrierMeanTrace;
    ModAccFetchInBandEmissionTracePtr ModAccFetchInBandEmissionTrace;
    ModAccFetchPBCHDMRSConstellationTracePtr ModAccFetchPBCHDMRSConstellationTrace;
    ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTracePtr ModAccFetchPBCHDMRSRMSEVMPerSubcarrierMeanTrace;
    ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTracePtr ModAccFetchPBCHDMRSRMSEVMPerSymbolMeanTrace;
    ModAccFetchPBCHDataConstellationTracePtr ModAccFetchPBCHDataConstellationTrace;
    ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTracePtr ModAccFetchPBCHDataRMSEVMPerSubcarrierMeanTrace;
    ModAccFetchPBCHDataRMSEVMPerSymbolMeanTracePtr ModAccFetchPBCHDataRMSEVMPerSymbolMeanTrace;
    ModAccFetchPDSCH1024QAMConstellationTracePtr ModAccFetchPDSCH1024QAMConstellationTrace;
    ModAccFetchPDSCH16QAMConstellationTracePtr ModAccFetchPDSCH16QAMConstellationTrace;
    ModAccFetchPDSCH256QAMConstellationTracePtr ModAccFetchPDSCH256QAMConstellationTrace;
    ModAccFetchPDSCH64QAMConstellationTracePtr ModAccFetchPDSCH64QAMConstellationTrace;
    ModAccFetchPDSCH8PSKConstellationTracePtr ModAccFetchPDSCH8PSKConstellationTrace;
    ModAccFetchPDSCHDMRSConstellationTracePtr ModAccFetchPDSCHDMRSConstellationTrace;
    ModAccFetchPDSCHDataConstellationTracePtr ModAccFetchPDSCHDataConstellationTrace;
    ModAccFetchPDSCHDemodulatedBitsPtr ModAccFetchPDSCHDemodulatedBits;
    ModAccFetchPDSCHPTRSConstellationTracePtr ModAccFetchPDSCHPTRSConstellationTrace;
    ModAccFetchPDSCHQPSKConstellationTracePtr ModAccFetchPDSCHQPSKConstellationTrace;
    ModAccFetchPSSConstellationTracePtr ModAccFetchPSSConstellationTrace;
    ModAccFetchPSSRMSEVMPerSubcarrierMeanTracePtr ModAccFetchPSSRMSEVMPerSubcarrierMeanTrace;
    ModAccFetchPSSRMSEVMPerSymbolMeanTracePtr ModAccFetchPSSRMSEVMPerSymbolMeanTrace;
    ModAccFetchPUSCHDMRSConstellationTracePtr ModAccFetchPUSCHDMRSConstellationTrace;
    ModAccFetchPUSCHDataConstellationTracePtr ModAccFetchPUSCHDataConstellationTrace;
    ModAccFetchPUSCHDemodulatedBitsPtr ModAccFetchPUSCHDemodulatedBits;
    ModAccFetchPUSCHPTRSConstellationTracePtr ModAccFetchPUSCHPTRSConstellationTrace;
    ModAccFetchPeakEVMPerSlotMaximumTracePtr ModAccFetchPeakEVMPerSlotMaximumTrace;
    ModAccFetchPeakEVMPerSubcarrierMaximumTracePtr ModAccFetchPeakEVMPerSubcarrierMaximumTrace;
    ModAccFetchPeakEVMPerSymbolMaximumTracePtr ModAccFetchPeakEVMPerSymbolMaximumTrace;
    ModAccFetchRMSEVMHighPerSymbolMeanTracePtr ModAccFetchRMSEVMHighPerSymbolMeanTrace;
    ModAccFetchRMSEVMLowPerSymbolMeanTracePtr ModAccFetchRMSEVMLowPerSymbolMeanTrace;
    ModAccFetchRMSEVMPerSlotMeanTracePtr ModAccFetchRMSEVMPerSlotMeanTrace;
    ModAccFetchRMSEVMPerSubcarrierMeanTracePtr ModAccFetchRMSEVMPerSubcarrierMeanTrace;
    ModAccFetchRMSEVMPerSymbolMeanTracePtr ModAccFetchRMSEVMPerSymbolMeanTrace;
    ModAccFetchSSSConstellationTracePtr ModAccFetchSSSConstellationTrace;
    ModAccFetchSSSRMSEVMPerSubcarrierMeanTracePtr ModAccFetchSSSRMSEVMPerSubcarrierMeanTrace;
    ModAccFetchSSSRMSEVMPerSymbolMeanTracePtr ModAccFetchSSSRMSEVMPerSymbolMeanTrace;
    ModAccFetchSpectralFlatnessTracePtr ModAccFetchSpectralFlatnessTrace;
    ModAccFetchSubblockInBandEmissionTracePtr ModAccFetchSubblockInBandEmissionTrace;
    ModAccFetchTransientPeriodLocationsTracePtr ModAccFetchTransientPeriodLocationsTrace;
    ModAccValidateCalibrationDataPtr ModAccValidateCalibrationData;
    OBWCfgAveragingPtr OBWCfgAveraging;
    OBWCfgRBWFilterPtr OBWCfgRBWFilter;
    OBWCfgSweepTimePtr OBWCfgSweepTime;
    OBWFetchMeasurementPtr OBWFetchMeasurement;
    OBWFetchSpectrumPtr OBWFetchSpectrum;
    PVTCfgAveragingPtr PVTCfgAveraging;
    PVTCfgMeasurementMethodPtr PVTCfgMeasurementMethod;
    PVTCfgOFFPowerExclusionPeriodsPtr PVTCfgOFFPowerExclusionPeriods;
    PVTFetchMeasurementPtr PVTFetchMeasurement;
    PVTFetchMeasurementArrayPtr PVTFetchMeasurementArray;
    PVTFetchSignalPowerTracePtr PVTFetchSignalPowerTrace;
    PVTFetchWindowedSignalPowerTracePtr PVTFetchWindowedSignalPowerTrace;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SEMCfgAveragingPtr SEMCfgAveraging;
    SEMCfgComponentCarrierRatedOutputPowerPtr SEMCfgComponentCarrierRatedOutputPower;
    SEMCfgComponentCarrierRatedOutputPowerArrayPtr SEMCfgComponentCarrierRatedOutputPowerArray;
    SEMCfgNumberOfOffsetsPtr SEMCfgNumberOfOffsets;
    SEMCfgOffsetAbsoluteLimitPtr SEMCfgOffsetAbsoluteLimit;
    SEMCfgOffsetAbsoluteLimitArrayPtr SEMCfgOffsetAbsoluteLimitArray;
    SEMCfgOffsetBandwidthIntegralPtr SEMCfgOffsetBandwidthIntegral;
    SEMCfgOffsetBandwidthIntegralArrayPtr SEMCfgOffsetBandwidthIntegralArray;
    SEMCfgOffsetFrequencyPtr SEMCfgOffsetFrequency;
    SEMCfgOffsetFrequencyArrayPtr SEMCfgOffsetFrequencyArray;
    SEMCfgOffsetLimitFailMaskPtr SEMCfgOffsetLimitFailMask;
    SEMCfgOffsetLimitFailMaskArrayPtr SEMCfgOffsetLimitFailMaskArray;
    SEMCfgOffsetRBWFilterPtr SEMCfgOffsetRBWFilter;
    SEMCfgOffsetRBWFilterArrayPtr SEMCfgOffsetRBWFilterArray;
    SEMCfgOffsetRelativeLimitPtr SEMCfgOffsetRelativeLimit;
    SEMCfgOffsetRelativeLimitArrayPtr SEMCfgOffsetRelativeLimitArray;
    SEMCfgSweepTimePtr SEMCfgSweepTime;
    SEMCfgUplinkMaskTypePtr SEMCfgUplinkMaskType;
    SEMFetchComponentCarrierMeasurementPtr SEMFetchComponentCarrierMeasurement;
    SEMFetchComponentCarrierMeasurementArrayPtr SEMFetchComponentCarrierMeasurementArray;
    SEMFetchLowerOffsetMarginPtr SEMFetchLowerOffsetMargin;
    SEMFetchLowerOffsetMarginArrayPtr SEMFetchLowerOffsetMarginArray;
    SEMFetchLowerOffsetPowerPtr SEMFetchLowerOffsetPower;
    SEMFetchLowerOffsetPowerArrayPtr SEMFetchLowerOffsetPowerArray;
    SEMFetchMeasurementStatusPtr SEMFetchMeasurementStatus;
    SEMFetchSpectrumPtr SEMFetchSpectrum;
    SEMFetchSubblockMeasurementPtr SEMFetchSubblockMeasurement;
    SEMFetchTotalAggregatedPowerPtr SEMFetchTotalAggregatedPower;
    SEMFetchUpperOffsetMarginPtr SEMFetchUpperOffsetMargin;
    SEMFetchUpperOffsetMarginArrayPtr SEMFetchUpperOffsetMarginArray;
    SEMFetchUpperOffsetPowerPtr SEMFetchUpperOffsetPower;
    SEMFetchUpperOffsetPowerArrayPtr SEMFetchUpperOffsetPowerArray;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    TXPFetchMeasurementPtr TXPFetchMeasurement;
    TXPFetchPowerTracePtr TXPFetchPowerTrace;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxnr_grpc

#endif  // NIRFMXNR_GRPC_LIBRARY_H
