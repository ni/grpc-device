//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-SYNC
//---------------------------------------------------------------------
#ifndef NISYNC_GRPC_LIBRARY_H
#define NISYNC_GRPC_LIBRARY_H

#include "nisync_library_interface.h"

#include <server/shared_library.h>

namespace nisync_grpc {

class NiSyncLibrary : public nisync_grpc::NiSyncLibraryInterface {
 public:
  NiSyncLibrary();
  virtual ~NiSyncLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  ViStatus init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi);
  ViStatus close(ViSession vi);
  ViStatus error_message(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  ViStatus reset(ViSession vi);
  ViStatus PersistConfig(ViSession vi);
  ViStatus self_test(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256]);
  ViStatus revision_query(ViSession vi, ViChar driverRevision[256], ViChar firmwareRevision[256]);
  ViStatus ConnectTrigTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge);
  ViStatus DisconnectTrigTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  ViStatus ConnectSWTrigToTerminal(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge, ViReal64 delay);
  ViStatus DisconnectSWTrigFromTerminal(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  ViStatus SendSoftwareTrigger(ViSession vi, ViConstString srcTerminal);
  ViStatus ConnectClkTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  ViStatus DisconnectClkTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  ViStatus MeasureFrequency(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViReal64* actualDuration, ViReal64* frequency, ViReal64* error);
  ViStatus MeasureFrequencyEx(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViUInt32 decimationCount, ViReal64* actualDuration, ViReal64* frequency, ViReal64* frequencyError);
  ViStatus Start1588(ViSession vi);
  ViStatus Stop1588(ViSession vi);
  ViStatus Start8021AS(ViSession vi);
  ViStatus Stop8021AS(ViSession vi);
  ViStatus SetTime(ViSession vi, ViInt32 timeSource, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds);
  ViStatus GetTime(ViSession vi, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds);
  ViStatus ResetFrequency(ViSession vi);
  ViStatus CreateFutureTimeEvent(ViSession vi, ViConstString terminal, ViInt32 outputLevel, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds);
  ViStatus ClearFutureTimeEvents(ViSession vi, ViConstString terminal);
  ViStatus EnableTimeStampTrigger(ViSession vi, ViConstString terminal, ViInt32 activeEdge);
  ViStatus EnableTimeStampTriggerWithDecimation(ViSession vi, ViConstString terminal, ViInt32 activeEdge, ViUInt32 decimationCount);
  ViStatus ReadTriggerTimeStamp(ViSession vi, ViConstString terminal, ViReal64 timeout, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds, ViInt32* detectedEdge);
  ViStatus ReadMultipleTriggerTimeStamp(ViSession vi, ViConstString terminal, ViUInt32 timestampsToRead, ViReal64 timeout, ViUInt32 timeSecondsBuffer[], ViUInt32 timeNanosecondsBuffer[], ViUInt16 timeFractionalNanosecondsBuffer[], ViInt32 detectedEdgeBuffer[], ViUInt32* timestampsRead);
  ViStatus DisableTimeStampTrigger(ViSession vi, ViConstString terminal);
  ViStatus CreateClock(ViSession vi, ViConstString terminal, ViUInt32 highTicks, ViUInt32 lowTicks, ViUInt32 startTimeSeconds, ViUInt32 startTimeNanoseconds, ViUInt16 startTimeFractionalNanoseconds, ViUInt32 stopTimeSeconds, ViUInt32 stopTimeNanoseconds, ViUInt16 stopTimeFractionalNanoseconds);
  ViStatus ClearClock(ViSession vi, ViConstString terminal);
  ViStatus SetTimeReferenceFreeRunning(ViSession vi);
  ViStatus SetTimeReferenceGPS(ViSession vi);
  ViStatus SetTimeReferenceIRIG(ViSession vi, ViInt32 irigType, ViConstString terminalName);
  ViStatus SetTimeReferencePPS(ViSession vi, ViConstString terminalName, ViBoolean useManualTime, ViUInt32 initialTimeSeconds, ViUInt32 initialTimeNanoseconds, ViUInt16 initialTimeFractionalNanoseconds);
  ViStatus SetTimeReference1588OrdinaryClock(ViSession vi);
  ViStatus SetTimeReference8021AS(ViSession vi);
  ViStatus EnableGPSTimestamping(ViSession vi);
  ViStatus EnableIRIGTimestamping(ViSession vi, ViInt32 irigType, ViConstString terminalName);
  ViStatus ReadLastGPSTimestamp(ViSession vi, ViUInt32* timestampSeconds, ViUInt32* timestampNanoseconds, ViUInt16* timestampFractionalNanoseconds, ViUInt32* gpsSeconds, ViUInt32* gpsNanoseconds, ViUInt16* gpsFractionalNanoseconds);
  ViStatus ReadLastIRIGTimestamp(ViSession vi, ViConstString terminal, ViUInt32* timestampSeconds, ViUInt32* timestampNanoseconds, ViUInt16* timestampFractionalNanoseconds, ViUInt32* irigbSeconds, ViUInt32* irigbNanoseconds, ViUInt16* irigbFractionalNanoseconds);
  ViStatus DisableGPSTimestamping(ViSession vi);
  ViStatus DisableIRIGTimestamping(ViSession vi, ViConstString terminalName);
  ViStatus GetVelocity(ViSession vi, ViReal64* eastVelocity, ViReal64* northVelocity, ViReal64* upVelocity);
  ViStatus GetLocation(ViSession vi, ViReal64* latitude, ViReal64* longitude, ViReal64* altitude);
  ViStatus GetTimeReferenceNames(ViSession vi, ViUInt32 bufferSize, ViChar timeReferenceNames[]);
  ViStatus GetAttributeViInt32(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32* value);
  ViStatus GetAttributeViReal64(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64* value);
  ViStatus GetAttributeViBoolean(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean* value);
  ViStatus GetAttributeViString(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 bufferSize, ViChar value[]);
  ViStatus SetAttributeViInt32(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 value);
  ViStatus SetAttributeViReal64(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64 value);
  ViStatus SetAttributeViBoolean(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean value);
  ViStatus SetAttributeViString(ViSession vi, ViConstString activeItem, ViAttr attribute, ViConstString value);
  ViStatus GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute);
  ViStatus GetExtCalLastTemp(ViSession vi, ViReal64* temp);
  ViStatus GetExtCalRecommendedInterval(ViSession vi, ViInt32* months);
  ViStatus ChangeExtCalPassword(ViSession vi, ViConstString oldPassword, ViConstString newPassword);
  ViStatus ReadCurrentTemperature(ViSession vi, ViReal64* temperature);
  ViStatus CalGetOscillatorVoltage(ViSession vi, ViReal64* voltage);
  ViStatus CalGetClk10PhaseVoltage(ViSession vi, ViReal64* voltage);
  ViStatus CalGetDDSStartPulsePhaseVoltage(ViSession vi, ViReal64* voltage);
  ViStatus CalGetDDSInitialPhase(ViSession vi, ViReal64* phase);
  ViStatus InitExtCal(ViRsrc resourceName, ViConstString password, ViSession* vi);
  ViStatus CloseExtCal(ViSession vi, ViInt32 action);
  ViStatus CalAdjustOscillatorVoltage(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage);
  ViStatus CalAdjustClk10PhaseVoltage(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage);
  ViStatus CalAdjustDDSStartPulsePhaseVoltage(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage);
  ViStatus CalAdjustDDSInitialPhase(ViSession vi, ViReal64 measuredPhase, ViReal64* oldPhase);

 private:
  using initPtr = ViStatus (*)(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi);
  using closePtr = ViStatus (*)(ViSession vi);
  using error_messagePtr = ViStatus (*)(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  using resetPtr = ViStatus (*)(ViSession vi);
  using PersistConfigPtr = ViStatus (*)(ViSession vi);
  using self_testPtr = ViStatus (*)(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256]);
  using revision_queryPtr = ViStatus (*)(ViSession vi, ViChar driverRevision[256], ViChar firmwareRevision[256]);
  using ConnectTrigTerminalsPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge);
  using DisconnectTrigTerminalsPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  using ConnectSWTrigToTerminalPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge, ViReal64 delay);
  using DisconnectSWTrigFromTerminalPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  using SendSoftwareTriggerPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal);
  using ConnectClkTerminalsPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  using DisconnectClkTerminalsPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal);
  using MeasureFrequencyPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViReal64* actualDuration, ViReal64* frequency, ViReal64* error);
  using MeasureFrequencyExPtr = ViStatus (*)(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViUInt32 decimationCount, ViReal64* actualDuration, ViReal64* frequency, ViReal64* frequencyError);
  using Start1588Ptr = ViStatus (*)(ViSession vi);
  using Stop1588Ptr = ViStatus (*)(ViSession vi);
  using Start8021ASPtr = ViStatus (*)(ViSession vi);
  using Stop8021ASPtr = ViStatus (*)(ViSession vi);
  using SetTimePtr = ViStatus (*)(ViSession vi, ViInt32 timeSource, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds);
  using GetTimePtr = ViStatus (*)(ViSession vi, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds);
  using ResetFrequencyPtr = ViStatus (*)(ViSession vi);
  using CreateFutureTimeEventPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViInt32 outputLevel, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds);
  using ClearFutureTimeEventsPtr = ViStatus (*)(ViSession vi, ViConstString terminal);
  using EnableTimeStampTriggerPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViInt32 activeEdge);
  using EnableTimeStampTriggerWithDecimationPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViInt32 activeEdge, ViUInt32 decimationCount);
  using ReadTriggerTimeStampPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViReal64 timeout, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds, ViInt32* detectedEdge);
  using ReadMultipleTriggerTimeStampPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViUInt32 timestampsToRead, ViReal64 timeout, ViUInt32 timeSecondsBuffer[], ViUInt32 timeNanosecondsBuffer[], ViUInt16 timeFractionalNanosecondsBuffer[], ViInt32 detectedEdgeBuffer[], ViUInt32* timestampsRead);
  using DisableTimeStampTriggerPtr = ViStatus (*)(ViSession vi, ViConstString terminal);
  using CreateClockPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViUInt32 highTicks, ViUInt32 lowTicks, ViUInt32 startTimeSeconds, ViUInt32 startTimeNanoseconds, ViUInt16 startTimeFractionalNanoseconds, ViUInt32 stopTimeSeconds, ViUInt32 stopTimeNanoseconds, ViUInt16 stopTimeFractionalNanoseconds);
  using ClearClockPtr = ViStatus (*)(ViSession vi, ViConstString terminal);
  using SetTimeReferenceFreeRunningPtr = ViStatus (*)(ViSession vi);
  using SetTimeReferenceGPSPtr = ViStatus (*)(ViSession vi);
  using SetTimeReferenceIRIGPtr = ViStatus (*)(ViSession vi, ViInt32 irigType, ViConstString terminalName);
  using SetTimeReferencePPSPtr = ViStatus (*)(ViSession vi, ViConstString terminalName, ViBoolean useManualTime, ViUInt32 initialTimeSeconds, ViUInt32 initialTimeNanoseconds, ViUInt16 initialTimeFractionalNanoseconds);
  using SetTimeReference1588OrdinaryClockPtr = ViStatus (*)(ViSession vi);
  using SetTimeReference8021ASPtr = ViStatus (*)(ViSession vi);
  using EnableGPSTimestampingPtr = ViStatus (*)(ViSession vi);
  using EnableIRIGTimestampingPtr = ViStatus (*)(ViSession vi, ViInt32 irigType, ViConstString terminalName);
  using ReadLastGPSTimestampPtr = ViStatus (*)(ViSession vi, ViUInt32* timestampSeconds, ViUInt32* timestampNanoseconds, ViUInt16* timestampFractionalNanoseconds, ViUInt32* gpsSeconds, ViUInt32* gpsNanoseconds, ViUInt16* gpsFractionalNanoseconds);
  using ReadLastIRIGTimestampPtr = ViStatus (*)(ViSession vi, ViConstString terminal, ViUInt32* timestampSeconds, ViUInt32* timestampNanoseconds, ViUInt16* timestampFractionalNanoseconds, ViUInt32* irigbSeconds, ViUInt32* irigbNanoseconds, ViUInt16* irigbFractionalNanoseconds);
  using DisableGPSTimestampingPtr = ViStatus (*)(ViSession vi);
  using DisableIRIGTimestampingPtr = ViStatus (*)(ViSession vi, ViConstString terminalName);
  using GetVelocityPtr = ViStatus (*)(ViSession vi, ViReal64* eastVelocity, ViReal64* northVelocity, ViReal64* upVelocity);
  using GetLocationPtr = ViStatus (*)(ViSession vi, ViReal64* latitude, ViReal64* longitude, ViReal64* altitude);
  using GetTimeReferenceNamesPtr = ViStatus (*)(ViSession vi, ViUInt32 bufferSize, ViChar timeReferenceNames[]);
  using GetAttributeViInt32Ptr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32* value);
  using GetAttributeViReal64Ptr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64* value);
  using GetAttributeViBooleanPtr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean* value);
  using GetAttributeViStringPtr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 bufferSize, ViChar value[]);
  using SetAttributeViInt32Ptr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 value);
  using SetAttributeViReal64Ptr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64 value);
  using SetAttributeViBooleanPtr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean value);
  using SetAttributeViStringPtr = ViStatus (*)(ViSession vi, ViConstString activeItem, ViAttr attribute, ViConstString value);
  using GetExtCalLastDateAndTimePtr = ViStatus (*)(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute);
  using GetExtCalLastTempPtr = ViStatus (*)(ViSession vi, ViReal64* temp);
  using GetExtCalRecommendedIntervalPtr = ViStatus (*)(ViSession vi, ViInt32* months);
  using ChangeExtCalPasswordPtr = ViStatus (*)(ViSession vi, ViConstString oldPassword, ViConstString newPassword);
  using ReadCurrentTemperaturePtr = ViStatus (*)(ViSession vi, ViReal64* temperature);
  using CalGetOscillatorVoltagePtr = ViStatus (*)(ViSession vi, ViReal64* voltage);
  using CalGetClk10PhaseVoltagePtr = ViStatus (*)(ViSession vi, ViReal64* voltage);
  using CalGetDDSStartPulsePhaseVoltagePtr = ViStatus (*)(ViSession vi, ViReal64* voltage);
  using CalGetDDSInitialPhasePtr = ViStatus (*)(ViSession vi, ViReal64* phase);
  using InitExtCalPtr = ViStatus (*)(ViRsrc resourceName, ViConstString password, ViSession* vi);
  using CloseExtCalPtr = ViStatus (*)(ViSession vi, ViInt32 action);
  using CalAdjustOscillatorVoltagePtr = ViStatus (*)(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage);
  using CalAdjustClk10PhaseVoltagePtr = ViStatus (*)(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage);
  using CalAdjustDDSStartPulsePhaseVoltagePtr = ViStatus (*)(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage);
  using CalAdjustDDSInitialPhasePtr = ViStatus (*)(ViSession vi, ViReal64 measuredPhase, ViReal64* oldPhase);

  typedef struct FunctionPointers {
    initPtr init;
    closePtr close;
    error_messagePtr error_message;
    resetPtr reset;
    PersistConfigPtr PersistConfig;
    self_testPtr self_test;
    revision_queryPtr revision_query;
    ConnectTrigTerminalsPtr ConnectTrigTerminals;
    DisconnectTrigTerminalsPtr DisconnectTrigTerminals;
    ConnectSWTrigToTerminalPtr ConnectSWTrigToTerminal;
    DisconnectSWTrigFromTerminalPtr DisconnectSWTrigFromTerminal;
    SendSoftwareTriggerPtr SendSoftwareTrigger;
    ConnectClkTerminalsPtr ConnectClkTerminals;
    DisconnectClkTerminalsPtr DisconnectClkTerminals;
    MeasureFrequencyPtr MeasureFrequency;
    MeasureFrequencyExPtr MeasureFrequencyEx;
    Start1588Ptr Start1588;
    Stop1588Ptr Stop1588;
    Start8021ASPtr Start8021AS;
    Stop8021ASPtr Stop8021AS;
    SetTimePtr SetTime;
    GetTimePtr GetTime;
    ResetFrequencyPtr ResetFrequency;
    CreateFutureTimeEventPtr CreateFutureTimeEvent;
    ClearFutureTimeEventsPtr ClearFutureTimeEvents;
    EnableTimeStampTriggerPtr EnableTimeStampTrigger;
    EnableTimeStampTriggerWithDecimationPtr EnableTimeStampTriggerWithDecimation;
    ReadTriggerTimeStampPtr ReadTriggerTimeStamp;
    ReadMultipleTriggerTimeStampPtr ReadMultipleTriggerTimeStamp;
    DisableTimeStampTriggerPtr DisableTimeStampTrigger;
    CreateClockPtr CreateClock;
    ClearClockPtr ClearClock;
    SetTimeReferenceFreeRunningPtr SetTimeReferenceFreeRunning;
    SetTimeReferenceGPSPtr SetTimeReferenceGPS;
    SetTimeReferenceIRIGPtr SetTimeReferenceIRIG;
    SetTimeReferencePPSPtr SetTimeReferencePPS;
    SetTimeReference1588OrdinaryClockPtr SetTimeReference1588OrdinaryClock;
    SetTimeReference8021ASPtr SetTimeReference8021AS;
    EnableGPSTimestampingPtr EnableGPSTimestamping;
    EnableIRIGTimestampingPtr EnableIRIGTimestamping;
    ReadLastGPSTimestampPtr ReadLastGPSTimestamp;
    ReadLastIRIGTimestampPtr ReadLastIRIGTimestamp;
    DisableGPSTimestampingPtr DisableGPSTimestamping;
    DisableIRIGTimestampingPtr DisableIRIGTimestamping;
    GetVelocityPtr GetVelocity;
    GetLocationPtr GetLocation;
    GetTimeReferenceNamesPtr GetTimeReferenceNames;
    GetAttributeViInt32Ptr GetAttributeViInt32;
    GetAttributeViReal64Ptr GetAttributeViReal64;
    GetAttributeViBooleanPtr GetAttributeViBoolean;
    GetAttributeViStringPtr GetAttributeViString;
    SetAttributeViInt32Ptr SetAttributeViInt32;
    SetAttributeViReal64Ptr SetAttributeViReal64;
    SetAttributeViBooleanPtr SetAttributeViBoolean;
    SetAttributeViStringPtr SetAttributeViString;
    GetExtCalLastDateAndTimePtr GetExtCalLastDateAndTime;
    GetExtCalLastTempPtr GetExtCalLastTemp;
    GetExtCalRecommendedIntervalPtr GetExtCalRecommendedInterval;
    ChangeExtCalPasswordPtr ChangeExtCalPassword;
    ReadCurrentTemperaturePtr ReadCurrentTemperature;
    CalGetOscillatorVoltagePtr CalGetOscillatorVoltage;
    CalGetClk10PhaseVoltagePtr CalGetClk10PhaseVoltage;
    CalGetDDSStartPulsePhaseVoltagePtr CalGetDDSStartPulsePhaseVoltage;
    CalGetDDSInitialPhasePtr CalGetDDSInitialPhase;
    InitExtCalPtr InitExtCal;
    CloseExtCalPtr CloseExtCal;
    CalAdjustOscillatorVoltagePtr CalAdjustOscillatorVoltage;
    CalAdjustClk10PhaseVoltagePtr CalAdjustClk10PhaseVoltage;
    CalAdjustDDSStartPulsePhaseVoltagePtr CalAdjustDDSStartPulsePhaseVoltage;
    CalAdjustDDSInitialPhasePtr CalAdjustDDSInitialPhase;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nisync_grpc

#endif  // NISYNC_GRPC_LIBRARY_H
