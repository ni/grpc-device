//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SYNC Metadata
//---------------------------------------------------------------------
#include "nisync_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nisync.dll";
#else
static const char* kLibraryName = "libnisync.so";
#endif

namespace nisync_grpc {

NiSyncLibrary::NiSyncLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.init = reinterpret_cast<initPtr>(shared_library_.get_function_pointer("niSync_init"));
  function_pointers_.close = reinterpret_cast<closePtr>(shared_library_.get_function_pointer("niSync_close"));
}

NiSyncLibrary::~NiSyncLibrary()
{
}

::grpc::Status NiSyncLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiSyncLibrary::init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_init.");
  }
#if defined(_MSC_VER)
  return niSync_init(resourceName, idQuery, resetDevice, vi);
#else
  return function_pointers_.init(resourceName, idQuery, resetDevice, vi);
#endif
}

ViStatus NiSyncLibrary::close(ViSession vi)
{
  if (!function_pointers_.close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_close.");
  }
#if defined(_MSC_VER)
  return niSync_close(vi);
#else
  return function_pointers_.close(vi);
#endif
}

}  // namespace nisync_grpc
