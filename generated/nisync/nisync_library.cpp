//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SYNC Metadata
//---------------------------------------------------------------------
#include "nisync_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nisync.dll";
#else
static const char* kLibraryName = "libnisync.so";
#endif

namespace nisync_grpc {

NiSyncLibrary::NiSyncLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.init = reinterpret_cast<initPtr>(shared_library_.get_function_pointer("niSync_init"));
  function_pointers_.close = reinterpret_cast<closePtr>(shared_library_.get_function_pointer("niSync_close"));
  function_pointers_.error_message = reinterpret_cast<error_messagePtr>(shared_library_.get_function_pointer("niSync_error_message"));
  function_pointers_.reset = reinterpret_cast<resetPtr>(shared_library_.get_function_pointer("niSync_reset"));
  function_pointers_.PersistConfig = reinterpret_cast<PersistConfigPtr>(shared_library_.get_function_pointer("niSync_PersistConfig"));
  function_pointers_.self_test = reinterpret_cast<self_testPtr>(shared_library_.get_function_pointer("niSync_self_test"));
  function_pointers_.revision_query = reinterpret_cast<revision_queryPtr>(shared_library_.get_function_pointer("niSync_revision_query"));
  function_pointers_.ConnectTrigTerminals = reinterpret_cast<ConnectTrigTerminalsPtr>(shared_library_.get_function_pointer("niSync_ConnectTrigTerminals"));
  function_pointers_.DisconnectTrigTerminals = reinterpret_cast<DisconnectTrigTerminalsPtr>(shared_library_.get_function_pointer("niSync_DisconnectTrigTerminals"));
  function_pointers_.ConnectSWTrigToTerminal = reinterpret_cast<ConnectSWTrigToTerminalPtr>(shared_library_.get_function_pointer("niSync_ConnectSWTrigToTerminal"));
  function_pointers_.DisconnectSWTrigFromTerminal = reinterpret_cast<DisconnectSWTrigFromTerminalPtr>(shared_library_.get_function_pointer("niSync_DisconnectSWTrigFromTerminal"));
  function_pointers_.SendSoftwareTrigger = reinterpret_cast<SendSoftwareTriggerPtr>(shared_library_.get_function_pointer("niSync_SendSoftwareTrigger"));
  function_pointers_.ConnectClkTerminals = reinterpret_cast<ConnectClkTerminalsPtr>(shared_library_.get_function_pointer("niSync_ConnectClkTerminals"));
  function_pointers_.DisconnectClkTerminals = reinterpret_cast<DisconnectClkTerminalsPtr>(shared_library_.get_function_pointer("niSync_DisconnectClkTerminals"));
  function_pointers_.MeasureFrequency = reinterpret_cast<MeasureFrequencyPtr>(shared_library_.get_function_pointer("niSync_MeasureFrequency"));
  function_pointers_.MeasureFrequencyEx = reinterpret_cast<MeasureFrequencyExPtr>(shared_library_.get_function_pointer("niSync_MeasureFrequencyEx"));
  function_pointers_.Start1588 = reinterpret_cast<Start1588Ptr>(shared_library_.get_function_pointer("niSync_Start1588"));
  function_pointers_.Stop1588 = reinterpret_cast<Stop1588Ptr>(shared_library_.get_function_pointer("niSync_Stop1588"));
  function_pointers_.Start8021AS = reinterpret_cast<Start8021ASPtr>(shared_library_.get_function_pointer("niSync_Start8021AS"));
  function_pointers_.Stop8021AS = reinterpret_cast<Stop8021ASPtr>(shared_library_.get_function_pointer("niSync_Stop8021AS"));
  function_pointers_.SetTime = reinterpret_cast<SetTimePtr>(shared_library_.get_function_pointer("niSync_SetTime"));
  function_pointers_.GetTime = reinterpret_cast<GetTimePtr>(shared_library_.get_function_pointer("niSync_GetTime"));
  function_pointers_.ResetFrequency = reinterpret_cast<ResetFrequencyPtr>(shared_library_.get_function_pointer("niSync_ResetFrequency"));
  function_pointers_.CreateFutureTimeEvent = reinterpret_cast<CreateFutureTimeEventPtr>(shared_library_.get_function_pointer("niSync_CreateFutureTimeEvent"));
  function_pointers_.ClearFutureTimeEvents = reinterpret_cast<ClearFutureTimeEventsPtr>(shared_library_.get_function_pointer("niSync_ClearFutureTimeEvents"));
  function_pointers_.EnableTimeStampTrigger = reinterpret_cast<EnableTimeStampTriggerPtr>(shared_library_.get_function_pointer("niSync_EnableTimeStampTrigger"));
  function_pointers_.EnableTimeStampTriggerWithDecimation = reinterpret_cast<EnableTimeStampTriggerWithDecimationPtr>(shared_library_.get_function_pointer("niSync_EnableTimeStampTriggerWithDecimation"));
  function_pointers_.ReadTriggerTimeStamp = reinterpret_cast<ReadTriggerTimeStampPtr>(shared_library_.get_function_pointer("niSync_ReadTriggerTimeStamp"));
  function_pointers_.DisableTimeStampTrigger = reinterpret_cast<DisableTimeStampTriggerPtr>(shared_library_.get_function_pointer("niSync_DisableTimeStampTrigger"));
  function_pointers_.CreateClock = reinterpret_cast<CreateClockPtr>(shared_library_.get_function_pointer("niSync_CreateClock"));
  function_pointers_.ClearClock = reinterpret_cast<ClearClockPtr>(shared_library_.get_function_pointer("niSync_ClearClock"));
  function_pointers_.SetTimeReferenceFreeRunning = reinterpret_cast<SetTimeReferenceFreeRunningPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferenceFreeRunning"));
  function_pointers_.SetTimeReferenceGPS = reinterpret_cast<SetTimeReferenceGPSPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferenceGPS"));
  function_pointers_.SetTimeReferenceIRIG = reinterpret_cast<SetTimeReferenceIRIGPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferenceIRIG"));
  function_pointers_.SetTimeReferencePPS = reinterpret_cast<SetTimeReferencePPSPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferencePPS"));
  function_pointers_.SetTimeReference1588OrdinaryClock = reinterpret_cast<SetTimeReference1588OrdinaryClockPtr>(shared_library_.get_function_pointer("niSync_SetTimeReference1588OrdinaryClock"));
  function_pointers_.SetTimeReference8021AS = reinterpret_cast<SetTimeReference8021ASPtr>(shared_library_.get_function_pointer("niSync_SetTimeReference8021AS"));
  function_pointers_.EnableGPSTimestamping = reinterpret_cast<EnableGPSTimestampingPtr>(shared_library_.get_function_pointer("niSync_EnableGPSTimestamping"));
  function_pointers_.EnableIRIGTimestamping = reinterpret_cast<EnableIRIGTimestampingPtr>(shared_library_.get_function_pointer("niSync_EnableIRIGTimestamping"));
  function_pointers_.ReadLastGPSTimestamp = reinterpret_cast<ReadLastGPSTimestampPtr>(shared_library_.get_function_pointer("niSync_ReadLastGPSTimestamp"));
  function_pointers_.ReadLastIRIGTimestamp = reinterpret_cast<ReadLastIRIGTimestampPtr>(shared_library_.get_function_pointer("niSync_ReadLastIRIGTimestamp"));
  function_pointers_.DisableGPSTimestamping = reinterpret_cast<DisableGPSTimestampingPtr>(shared_library_.get_function_pointer("niSync_DisableGPSTimestamping"));
  function_pointers_.DisableIRIGTimestamping = reinterpret_cast<DisableIRIGTimestampingPtr>(shared_library_.get_function_pointer("niSync_DisableIRIGTimestamping"));
  function_pointers_.GetVelocity = reinterpret_cast<GetVelocityPtr>(shared_library_.get_function_pointer("niSync_GetVelocity"));
  function_pointers_.GetLocation = reinterpret_cast<GetLocationPtr>(shared_library_.get_function_pointer("niSync_GetLocation"));
  function_pointers_.GetTimeReferenceNames = reinterpret_cast<GetTimeReferenceNamesPtr>(shared_library_.get_function_pointer("niSync_GetTimeReferenceNames"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSync_GetAttributeViInt32"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSync_GetAttributeViReal64"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSync_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niSync_GetAttributeViString"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSync_SetAttributeViInt32"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSync_SetAttributeViReal64"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSync_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niSync_SetAttributeViString"));
  function_pointers_.GetExtCalLastDateAndTime = reinterpret_cast<GetExtCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niSync_GetExtCalLastDateAndTime"));
  function_pointers_.GetExtCalLastTemp = reinterpret_cast<GetExtCalLastTempPtr>(shared_library_.get_function_pointer("niSync_GetExtCalLastTemp"));
  function_pointers_.GetExtCalRecommendedInterval = reinterpret_cast<GetExtCalRecommendedIntervalPtr>(shared_library_.get_function_pointer("niSync_GetExtCalRecommendedInterval"));
  function_pointers_.ChangeExtCalPassword = reinterpret_cast<ChangeExtCalPasswordPtr>(shared_library_.get_function_pointer("niSync_ChangeExtCalPassword"));
  function_pointers_.ReadCurrentTemperature = reinterpret_cast<ReadCurrentTemperaturePtr>(shared_library_.get_function_pointer("niSync_ReadCurrentTemperature"));
  function_pointers_.CalGetOscillatorVoltage = reinterpret_cast<CalGetOscillatorVoltagePtr>(shared_library_.get_function_pointer("niSync_CalGetOscillatorVoltage"));
  function_pointers_.CalGetClk10PhaseVoltage = reinterpret_cast<CalGetClk10PhaseVoltagePtr>(shared_library_.get_function_pointer("niSync_CalGetClk10PhaseVoltage"));
  function_pointers_.CalGetDDSStartPulsePhaseVoltage = reinterpret_cast<CalGetDDSStartPulsePhaseVoltagePtr>(shared_library_.get_function_pointer("niSync_CalGetDDSStartPulsePhaseVoltage"));
  function_pointers_.CalGetDDSInitialPhase = reinterpret_cast<CalGetDDSInitialPhasePtr>(shared_library_.get_function_pointer("niSync_CalGetDDSInitialPhase"));
  function_pointers_.InitExtCal = reinterpret_cast<InitExtCalPtr>(shared_library_.get_function_pointer("niSync_InitExtCal"));
  function_pointers_.CloseExtCal = reinterpret_cast<CloseExtCalPtr>(shared_library_.get_function_pointer("niSync_CloseExtCal"));
  function_pointers_.CalAdjustOscillatorVoltage = reinterpret_cast<CalAdjustOscillatorVoltagePtr>(shared_library_.get_function_pointer("niSync_CalAdjustOscillatorVoltage"));
  function_pointers_.CalAdjustClk10PhaseVoltage = reinterpret_cast<CalAdjustClk10PhaseVoltagePtr>(shared_library_.get_function_pointer("niSync_CalAdjustClk10PhaseVoltage"));
  function_pointers_.CalAdjustDDSStartPulsePhaseVoltage = reinterpret_cast<CalAdjustDDSStartPulsePhaseVoltagePtr>(shared_library_.get_function_pointer("niSync_CalAdjustDDSStartPulsePhaseVoltage"));
  function_pointers_.CalAdjustDDSInitialPhase = reinterpret_cast<CalAdjustDDSInitialPhasePtr>(shared_library_.get_function_pointer("niSync_CalAdjustDDSInitialPhase"));
}

NiSyncLibrary::~NiSyncLibrary()
{
}

::grpc::Status NiSyncLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiSyncLibrary::init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_init.");
  }
#if defined(_MSC_VER)
  return niSync_init(resourceName, idQuery, resetDevice, vi);
#else
  return function_pointers_.init(resourceName, idQuery, resetDevice, vi);
#endif
}

ViStatus NiSyncLibrary::close(ViSession vi)
{
  if (!function_pointers_.close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_close.");
  }
#if defined(_MSC_VER)
  return niSync_close(vi);
#else
  return function_pointers_.close(vi);
#endif
}

ViStatus NiSyncLibrary::error_message(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.error_message) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_error_message.");
  }
#if defined(_MSC_VER)
  return niSync_error_message(vi, errorCode, errorMessage);
#else
  return function_pointers_.error_message(vi, errorCode, errorMessage);
#endif
}

ViStatus NiSyncLibrary::reset(ViSession vi)
{
  if (!function_pointers_.reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_reset.");
  }
#if defined(_MSC_VER)
  return niSync_reset(vi);
#else
  return function_pointers_.reset(vi);
#endif
}

ViStatus NiSyncLibrary::PersistConfig(ViSession vi)
{
  if (!function_pointers_.PersistConfig) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_PersistConfig.");
  }
#if defined(_MSC_VER)
  return niSync_PersistConfig(vi);
#else
  return function_pointers_.PersistConfig(vi);
#endif
}

ViStatus NiSyncLibrary::self_test(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!function_pointers_.self_test) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_self_test.");
  }
#if defined(_MSC_VER)
  return niSync_self_test(vi, selfTestResult, selfTestMessage);
#else
  return function_pointers_.self_test(vi, selfTestResult, selfTestMessage);
#endif
}

ViStatus NiSyncLibrary::revision_query(ViSession vi, ViChar driverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.revision_query) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_revision_query.");
  }
#if defined(_MSC_VER)
  return niSync_revision_query(vi, driverRevision, firmwareRevision);
#else
  return function_pointers_.revision_query(vi, driverRevision, firmwareRevision);
#endif
}

ViStatus NiSyncLibrary::ConnectTrigTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge)
{
  if (!function_pointers_.ConnectTrigTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ConnectTrigTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_ConnectTrigTerminals(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge);
#else
  return function_pointers_.ConnectTrigTerminals(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge);
#endif
}

ViStatus NiSyncLibrary::DisconnectTrigTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.DisconnectTrigTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisconnectTrigTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_DisconnectTrigTerminals(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.DisconnectTrigTerminals(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::ConnectSWTrigToTerminal(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge, ViReal64 delay)
{
  if (!function_pointers_.ConnectSWTrigToTerminal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ConnectSWTrigToTerminal.");
  }
#if defined(_MSC_VER)
  return niSync_ConnectSWTrigToTerminal(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge, delay);
#else
  return function_pointers_.ConnectSWTrigToTerminal(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge, delay);
#endif
}

ViStatus NiSyncLibrary::DisconnectSWTrigFromTerminal(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.DisconnectSWTrigFromTerminal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisconnectSWTrigFromTerminal.");
  }
#if defined(_MSC_VER)
  return niSync_DisconnectSWTrigFromTerminal(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.DisconnectSWTrigFromTerminal(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::SendSoftwareTrigger(ViSession vi, ViConstString srcTerminal)
{
  if (!function_pointers_.SendSoftwareTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SendSoftwareTrigger.");
  }
#if defined(_MSC_VER)
  return niSync_SendSoftwareTrigger(vi, srcTerminal);
#else
  return function_pointers_.SendSoftwareTrigger(vi, srcTerminal);
#endif
}

ViStatus NiSyncLibrary::ConnectClkTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.ConnectClkTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ConnectClkTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_ConnectClkTerminals(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.ConnectClkTerminals(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::DisconnectClkTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.DisconnectClkTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisconnectClkTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_DisconnectClkTerminals(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.DisconnectClkTerminals(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::MeasureFrequency(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViReal64* actualDuration, ViReal64* frequency, ViReal64* error)
{
  if (!function_pointers_.MeasureFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_MeasureFrequency.");
  }
#if defined(_MSC_VER)
  return niSync_MeasureFrequency(vi, srcTerminal, duration, actualDuration, frequency, error);
#else
  return function_pointers_.MeasureFrequency(vi, srcTerminal, duration, actualDuration, frequency, error);
#endif
}

ViStatus NiSyncLibrary::MeasureFrequencyEx(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViUInt32 decimationCount, ViReal64* actualDuration, ViReal64* frequency, ViReal64* frequencyError)
{
  if (!function_pointers_.MeasureFrequencyEx) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_MeasureFrequencyEx.");
  }
#if defined(_MSC_VER)
  return niSync_MeasureFrequencyEx(vi, srcTerminal, duration, decimationCount, actualDuration, frequency, frequencyError);
#else
  return function_pointers_.MeasureFrequencyEx(vi, srcTerminal, duration, decimationCount, actualDuration, frequency, frequencyError);
#endif
}

ViStatus NiSyncLibrary::Start1588(ViSession vi)
{
  if (!function_pointers_.Start1588) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_Start1588.");
  }
#if defined(_MSC_VER)
  return niSync_Start1588(vi);
#else
  return function_pointers_.Start1588(vi);
#endif
}

ViStatus NiSyncLibrary::Stop1588(ViSession vi)
{
  if (!function_pointers_.Stop1588) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_Stop1588.");
  }
#if defined(_MSC_VER)
  return niSync_Stop1588(vi);
#else
  return function_pointers_.Stop1588(vi);
#endif
}

ViStatus NiSyncLibrary::Start8021AS(ViSession vi)
{
  if (!function_pointers_.Start8021AS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_Start8021AS.");
  }
#if defined(_MSC_VER)
  return niSync_Start8021AS(vi);
#else
  return function_pointers_.Start8021AS(vi);
#endif
}

ViStatus NiSyncLibrary::Stop8021AS(ViSession vi)
{
  if (!function_pointers_.Stop8021AS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_Stop8021AS.");
  }
#if defined(_MSC_VER)
  return niSync_Stop8021AS(vi);
#else
  return function_pointers_.Stop8021AS(vi);
#endif
}

ViStatus NiSyncLibrary::SetTime(ViSession vi, ViInt32 timeSource, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds)
{
  if (!function_pointers_.SetTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTime.");
  }
#if defined(_MSC_VER)
  return niSync_SetTime(vi, timeSource, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#else
  return function_pointers_.SetTime(vi, timeSource, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::GetTime(ViSession vi, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds)
{
  if (!function_pointers_.GetTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetTime.");
  }
#if defined(_MSC_VER)
  return niSync_GetTime(vi, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#else
  return function_pointers_.GetTime(vi, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::ResetFrequency(ViSession vi)
{
  if (!function_pointers_.ResetFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ResetFrequency.");
  }
#if defined(_MSC_VER)
  return niSync_ResetFrequency(vi);
#else
  return function_pointers_.ResetFrequency(vi);
#endif
}

ViStatus NiSyncLibrary::CreateFutureTimeEvent(ViSession vi, ViConstString terminal, ViInt32 outputLevel, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds)
{
  if (!function_pointers_.CreateFutureTimeEvent) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CreateFutureTimeEvent.");
  }
#if defined(_MSC_VER)
  return niSync_CreateFutureTimeEvent(vi, terminal, outputLevel, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#else
  return function_pointers_.CreateFutureTimeEvent(vi, terminal, outputLevel, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::ClearFutureTimeEvents(ViSession vi, ViConstString terminal)
{
  if (!function_pointers_.ClearFutureTimeEvents) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ClearFutureTimeEvents.");
  }
#if defined(_MSC_VER)
  return niSync_ClearFutureTimeEvents(vi, terminal);
#else
  return function_pointers_.ClearFutureTimeEvents(vi, terminal);
#endif
}

ViStatus NiSyncLibrary::EnableTimeStampTrigger(ViSession vi, ViConstString terminal, ViInt32 activeEdge)
{
  if (!function_pointers_.EnableTimeStampTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_EnableTimeStampTrigger.");
  }
#if defined(_MSC_VER)
  return niSync_EnableTimeStampTrigger(vi, terminal, activeEdge);
#else
  return function_pointers_.EnableTimeStampTrigger(vi, terminal, activeEdge);
#endif
}

ViStatus NiSyncLibrary::EnableTimeStampTriggerWithDecimation(ViSession vi, ViConstString terminal, ViInt32 activeEdge, ViUInt32 decimationCount)
{
  if (!function_pointers_.EnableTimeStampTriggerWithDecimation) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_EnableTimeStampTriggerWithDecimation.");
  }
#if defined(_MSC_VER)
  return niSync_EnableTimeStampTriggerWithDecimation(vi, terminal, activeEdge, decimationCount);
#else
  return function_pointers_.EnableTimeStampTriggerWithDecimation(vi, terminal, activeEdge, decimationCount);
#endif
}

ViStatus NiSyncLibrary::ReadTriggerTimeStamp(ViSession vi, ViConstString terminal, ViReal64 timeout, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds, ViInt32* detectedEdge)
{
  if (!function_pointers_.ReadTriggerTimeStamp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ReadTriggerTimeStamp.");
  }
#if defined(_MSC_VER)
  return niSync_ReadTriggerTimeStamp(vi, terminal, timeout, timeSeconds, timeNanoseconds, timeFractionalNanoseconds, detectedEdge);
#else
  return function_pointers_.ReadTriggerTimeStamp(vi, terminal, timeout, timeSeconds, timeNanoseconds, timeFractionalNanoseconds, detectedEdge);
#endif
}

ViStatus NiSyncLibrary::DisableTimeStampTrigger(ViSession vi, ViConstString terminal)
{
  if (!function_pointers_.DisableTimeStampTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisableTimeStampTrigger.");
  }
#if defined(_MSC_VER)
  return niSync_DisableTimeStampTrigger(vi, terminal);
#else
  return function_pointers_.DisableTimeStampTrigger(vi, terminal);
#endif
}

ViStatus NiSyncLibrary::CreateClock(ViSession vi, ViConstString terminal, ViUInt32 highTicks, ViUInt32 lowTicks, ViUInt32 startTimeSeconds, ViUInt32 startTimeNanoseconds, ViUInt16 startTimeFractionalNanoseconds, ViUInt32 stopTimeSeconds, ViUInt32 stopTimeNanoseconds, ViUInt16 stopTimeFractionalNanoseconds)
{
  if (!function_pointers_.CreateClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CreateClock.");
  }
#if defined(_MSC_VER)
  return niSync_CreateClock(vi, terminal, highTicks, lowTicks, startTimeSeconds, startTimeNanoseconds, startTimeFractionalNanoseconds, stopTimeSeconds, stopTimeNanoseconds, stopTimeFractionalNanoseconds);
#else
  return function_pointers_.CreateClock(vi, terminal, highTicks, lowTicks, startTimeSeconds, startTimeNanoseconds, startTimeFractionalNanoseconds, stopTimeSeconds, stopTimeNanoseconds, stopTimeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::ClearClock(ViSession vi, ViConstString terminal)
{
  if (!function_pointers_.ClearClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ClearClock.");
  }
#if defined(_MSC_VER)
  return niSync_ClearClock(vi, terminal);
#else
  return function_pointers_.ClearClock(vi, terminal);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferenceFreeRunning(ViSession vi)
{
  if (!function_pointers_.SetTimeReferenceFreeRunning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferenceFreeRunning.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferenceFreeRunning(vi);
#else
  return function_pointers_.SetTimeReferenceFreeRunning(vi);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferenceGPS(ViSession vi)
{
  if (!function_pointers_.SetTimeReferenceGPS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferenceGPS.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferenceGPS(vi);
#else
  return function_pointers_.SetTimeReferenceGPS(vi);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferenceIRIG(ViSession vi, ViInt32 irigType, ViConstString terminalName)
{
  if (!function_pointers_.SetTimeReferenceIRIG) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferenceIRIG.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferenceIRIG(vi, irigType, terminalName);
#else
  return function_pointers_.SetTimeReferenceIRIG(vi, irigType, terminalName);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferencePPS(ViSession vi, ViConstString terminalName, ViBoolean useManualTime, ViUInt32 initialTimeSeconds, ViUInt32 initialTimeNanoseconds, ViUInt16 initialTimeFractionalNanoseconds)
{
  if (!function_pointers_.SetTimeReferencePPS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferencePPS.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferencePPS(vi, terminalName, useManualTime, initialTimeSeconds, initialTimeNanoseconds, initialTimeFractionalNanoseconds);
#else
  return function_pointers_.SetTimeReferencePPS(vi, terminalName, useManualTime, initialTimeSeconds, initialTimeNanoseconds, initialTimeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::SetTimeReference1588OrdinaryClock(ViSession vi)
{
  if (!function_pointers_.SetTimeReference1588OrdinaryClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReference1588OrdinaryClock.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReference1588OrdinaryClock(vi);
#else
  return function_pointers_.SetTimeReference1588OrdinaryClock(vi);
#endif
}

ViStatus NiSyncLibrary::SetTimeReference8021AS(ViSession vi)
{
  if (!function_pointers_.SetTimeReference8021AS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReference8021AS.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReference8021AS(vi);
#else
  return function_pointers_.SetTimeReference8021AS(vi);
#endif
}

ViStatus NiSyncLibrary::EnableGPSTimestamping(ViSession vi)
{
  if (!function_pointers_.EnableGPSTimestamping) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_EnableGPSTimestamping.");
  }
#if defined(_MSC_VER)
  return niSync_EnableGPSTimestamping(vi);
#else
  return function_pointers_.EnableGPSTimestamping(vi);
#endif
}

ViStatus NiSyncLibrary::EnableIRIGTimestamping(ViSession vi, ViInt32 irigType, ViConstString terminalName)
{
  if (!function_pointers_.EnableIRIGTimestamping) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_EnableIRIGTimestamping.");
  }
#if defined(_MSC_VER)
  return niSync_EnableIRIGTimestamping(vi, irigType, terminalName);
#else
  return function_pointers_.EnableIRIGTimestamping(vi, irigType, terminalName);
#endif
}

ViStatus NiSyncLibrary::ReadLastGPSTimestamp(ViSession vi, ViUInt32* timestampSeconds, ViUInt32* timestampNanoseconds, ViUInt16* timestampFractionalNanoseconds, ViUInt32* gpsSeconds, ViUInt32* gpsNanoseconds, ViUInt16* gpsFractionalNanoseconds)
{
  if (!function_pointers_.ReadLastGPSTimestamp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ReadLastGPSTimestamp.");
  }
#if defined(_MSC_VER)
  return niSync_ReadLastGPSTimestamp(vi, timestampSeconds, timestampNanoseconds, timestampFractionalNanoseconds, gpsSeconds, gpsNanoseconds, gpsFractionalNanoseconds);
#else
  return function_pointers_.ReadLastGPSTimestamp(vi, timestampSeconds, timestampNanoseconds, timestampFractionalNanoseconds, gpsSeconds, gpsNanoseconds, gpsFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::ReadLastIRIGTimestamp(ViSession vi, ViConstString terminal, ViUInt32* timestampSeconds, ViUInt32* timestampNanoseconds, ViUInt16* timestampFractionalNanoseconds, ViUInt32* irigbSeconds, ViUInt32* irigbNanoseconds, ViUInt16* irigbFractionalNanoseconds)
{
  if (!function_pointers_.ReadLastIRIGTimestamp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ReadLastIRIGTimestamp.");
  }
#if defined(_MSC_VER)
  return niSync_ReadLastIRIGTimestamp(vi, terminal, timestampSeconds, timestampNanoseconds, timestampFractionalNanoseconds, irigbSeconds, irigbNanoseconds, irigbFractionalNanoseconds);
#else
  return function_pointers_.ReadLastIRIGTimestamp(vi, terminal, timestampSeconds, timestampNanoseconds, timestampFractionalNanoseconds, irigbSeconds, irigbNanoseconds, irigbFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::DisableGPSTimestamping(ViSession vi)
{
  if (!function_pointers_.DisableGPSTimestamping) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisableGPSTimestamping.");
  }
#if defined(_MSC_VER)
  return niSync_DisableGPSTimestamping(vi);
#else
  return function_pointers_.DisableGPSTimestamping(vi);
#endif
}

ViStatus NiSyncLibrary::DisableIRIGTimestamping(ViSession vi, ViConstString terminalName)
{
  if (!function_pointers_.DisableIRIGTimestamping) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisableIRIGTimestamping.");
  }
#if defined(_MSC_VER)
  return niSync_DisableIRIGTimestamping(vi, terminalName);
#else
  return function_pointers_.DisableIRIGTimestamping(vi, terminalName);
#endif
}

ViStatus NiSyncLibrary::GetVelocity(ViSession vi, ViReal64* eastVelocity, ViReal64* northVelocity, ViReal64* upVelocity)
{
  if (!function_pointers_.GetVelocity) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetVelocity.");
  }
#if defined(_MSC_VER)
  return niSync_GetVelocity(vi, eastVelocity, northVelocity, upVelocity);
#else
  return function_pointers_.GetVelocity(vi, eastVelocity, northVelocity, upVelocity);
#endif
}

ViStatus NiSyncLibrary::GetLocation(ViSession vi, ViReal64* latitude, ViReal64* longitude, ViReal64* altitude)
{
  if (!function_pointers_.GetLocation) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetLocation.");
  }
#if defined(_MSC_VER)
  return niSync_GetLocation(vi, latitude, longitude, altitude);
#else
  return function_pointers_.GetLocation(vi, latitude, longitude, altitude);
#endif
}

ViStatus NiSyncLibrary::GetTimeReferenceNames(ViSession vi, ViUInt32 bufferSize, ViChar timeReferenceNames[])
{
  if (!function_pointers_.GetTimeReferenceNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetTimeReferenceNames.");
  }
#if defined(_MSC_VER)
  return niSync_GetTimeReferenceNames(vi, bufferSize, timeReferenceNames);
#else
  return function_pointers_.GetTimeReferenceNames(vi, bufferSize, timeReferenceNames);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViInt32(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32* value)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViInt32(vi, activeItem, attribute, value);
#else
  return function_pointers_.GetAttributeViInt32(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViReal64(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64* value)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViReal64(vi, activeItem, attribute, value);
#else
  return function_pointers_.GetAttributeViReal64(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViBoolean(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean* value)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViBoolean(vi, activeItem, attribute, value);
#else
  return function_pointers_.GetAttributeViBoolean(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViString(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 bufferSize, ViChar value[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViString(vi, activeItem, attribute, bufferSize, value);
#else
  return function_pointers_.GetAttributeViString(vi, activeItem, attribute, bufferSize, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViInt32(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 value)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViInt32(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViInt32(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViReal64(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64 value)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViReal64(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViReal64(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViBoolean(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean value)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViBoolean(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViBoolean(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViString(ViSession vi, ViConstString activeItem, ViAttr attribute, ViConstString value)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViString(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViString(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetExtCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetExtCalLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return niSync_GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
#else
  return function_pointers_.GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
#endif
}

ViStatus NiSyncLibrary::GetExtCalLastTemp(ViSession vi, ViReal64* temp)
{
  if (!function_pointers_.GetExtCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetExtCalLastTemp.");
  }
#if defined(_MSC_VER)
  return niSync_GetExtCalLastTemp(vi, temp);
#else
  return function_pointers_.GetExtCalLastTemp(vi, temp);
#endif
}

ViStatus NiSyncLibrary::GetExtCalRecommendedInterval(ViSession vi, ViInt32* months)
{
  if (!function_pointers_.GetExtCalRecommendedInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetExtCalRecommendedInterval.");
  }
#if defined(_MSC_VER)
  return niSync_GetExtCalRecommendedInterval(vi, months);
#else
  return function_pointers_.GetExtCalRecommendedInterval(vi, months);
#endif
}

ViStatus NiSyncLibrary::ChangeExtCalPassword(ViSession vi, ViConstString oldPassword, ViConstString newPassword)
{
  if (!function_pointers_.ChangeExtCalPassword) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ChangeExtCalPassword.");
  }
#if defined(_MSC_VER)
  return niSync_ChangeExtCalPassword(vi, oldPassword, newPassword);
#else
  return function_pointers_.ChangeExtCalPassword(vi, oldPassword, newPassword);
#endif
}

ViStatus NiSyncLibrary::ReadCurrentTemperature(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.ReadCurrentTemperature) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ReadCurrentTemperature.");
  }
#if defined(_MSC_VER)
  return niSync_ReadCurrentTemperature(vi, temperature);
#else
  return function_pointers_.ReadCurrentTemperature(vi, temperature);
#endif
}

ViStatus NiSyncLibrary::CalGetOscillatorVoltage(ViSession vi, ViReal64* voltage)
{
  if (!function_pointers_.CalGetOscillatorVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalGetOscillatorVoltage.");
  }
#if defined(_MSC_VER)
  return niSync_CalGetOscillatorVoltage(vi, voltage);
#else
  return function_pointers_.CalGetOscillatorVoltage(vi, voltage);
#endif
}

ViStatus NiSyncLibrary::CalGetClk10PhaseVoltage(ViSession vi, ViReal64* voltage)
{
  if (!function_pointers_.CalGetClk10PhaseVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalGetClk10PhaseVoltage.");
  }
#if defined(_MSC_VER)
  return niSync_CalGetClk10PhaseVoltage(vi, voltage);
#else
  return function_pointers_.CalGetClk10PhaseVoltage(vi, voltage);
#endif
}

ViStatus NiSyncLibrary::CalGetDDSStartPulsePhaseVoltage(ViSession vi, ViReal64* voltage)
{
  if (!function_pointers_.CalGetDDSStartPulsePhaseVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalGetDDSStartPulsePhaseVoltage.");
  }
#if defined(_MSC_VER)
  return niSync_CalGetDDSStartPulsePhaseVoltage(vi, voltage);
#else
  return function_pointers_.CalGetDDSStartPulsePhaseVoltage(vi, voltage);
#endif
}

ViStatus NiSyncLibrary::CalGetDDSInitialPhase(ViSession vi, ViReal64* phase)
{
  if (!function_pointers_.CalGetDDSInitialPhase) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalGetDDSInitialPhase.");
  }
#if defined(_MSC_VER)
  return niSync_CalGetDDSInitialPhase(vi, phase);
#else
  return function_pointers_.CalGetDDSInitialPhase(vi, phase);
#endif
}

ViStatus NiSyncLibrary::InitExtCal(ViRsrc resourceName, ViConstString password, ViSession* vi)
{
  if (!function_pointers_.InitExtCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_InitExtCal.");
  }
#if defined(_MSC_VER)
  return niSync_InitExtCal(resourceName, password, vi);
#else
  return function_pointers_.InitExtCal(resourceName, password, vi);
#endif
}

ViStatus NiSyncLibrary::CloseExtCal(ViSession vi, ViInt32 action)
{
  if (!function_pointers_.CloseExtCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CloseExtCal.");
  }
#if defined(_MSC_VER)
  return niSync_CloseExtCal(vi, action);
#else
  return function_pointers_.CloseExtCal(vi, action);
#endif
}

ViStatus NiSyncLibrary::CalAdjustOscillatorVoltage(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage)
{
  if (!function_pointers_.CalAdjustOscillatorVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalAdjustOscillatorVoltage.");
  }
#if defined(_MSC_VER)
  return niSync_CalAdjustOscillatorVoltage(vi, measuredVoltage, oldVoltage);
#else
  return function_pointers_.CalAdjustOscillatorVoltage(vi, measuredVoltage, oldVoltage);
#endif
}

ViStatus NiSyncLibrary::CalAdjustClk10PhaseVoltage(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage)
{
  if (!function_pointers_.CalAdjustClk10PhaseVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalAdjustClk10PhaseVoltage.");
  }
#if defined(_MSC_VER)
  return niSync_CalAdjustClk10PhaseVoltage(vi, measuredVoltage, oldVoltage);
#else
  return function_pointers_.CalAdjustClk10PhaseVoltage(vi, measuredVoltage, oldVoltage);
#endif
}

ViStatus NiSyncLibrary::CalAdjustDDSStartPulsePhaseVoltage(ViSession vi, ViReal64 measuredVoltage, ViReal64* oldVoltage)
{
  if (!function_pointers_.CalAdjustDDSStartPulsePhaseVoltage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalAdjustDDSStartPulsePhaseVoltage.");
  }
#if defined(_MSC_VER)
  return niSync_CalAdjustDDSStartPulsePhaseVoltage(vi, measuredVoltage, oldVoltage);
#else
  return function_pointers_.CalAdjustDDSStartPulsePhaseVoltage(vi, measuredVoltage, oldVoltage);
#endif
}

ViStatus NiSyncLibrary::CalAdjustDDSInitialPhase(ViSession vi, ViReal64 measuredPhase, ViReal64* oldPhase)
{
  if (!function_pointers_.CalAdjustDDSInitialPhase) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_CalAdjustDDSInitialPhase.");
  }
#if defined(_MSC_VER)
  return niSync_CalAdjustDDSInitialPhase(vi, measuredPhase, oldPhase);
#else
  return function_pointers_.CalAdjustDDSInitialPhase(vi, measuredPhase, oldPhase);
#endif
}

}  // namespace nisync_grpc
