//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SYNC Metadata
//---------------------------------------------------------------------
#include "nisync_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nisync.dll";
#else
static const char* kLibraryName = "libnisync.so";
#endif

namespace nisync_grpc {

NiSyncLibrary::NiSyncLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.init = reinterpret_cast<initPtr>(shared_library_.get_function_pointer("niSync_init"));
  function_pointers_.close = reinterpret_cast<closePtr>(shared_library_.get_function_pointer("niSync_close"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niSync_revision_query"));
  function_pointers_.SendSoftwareTrigger = reinterpret_cast<SendSoftwareTriggerPtr>(shared_library_.get_function_pointer("niSync_SendSoftwareTrigger"));
  function_pointers_.ConnectClkTerminals = reinterpret_cast<ConnectClkTerminalsPtr>(shared_library_.get_function_pointer("niSync_ConnectClkTerminals"));
  function_pointers_.DisconnectClkTerminals = reinterpret_cast<DisconnectClkTerminalsPtr>(shared_library_.get_function_pointer("niSync_DisconnectClkTerminals"));
  function_pointers_.ConnectSWTrigToTerminal = reinterpret_cast<ConnectSWTrigToTerminalPtr>(shared_library_.get_function_pointer("niSync_ConnectSWTrigToTerminal"));
  function_pointers_.DisconnectSWTrigFromTerminal = reinterpret_cast<DisconnectSWTrigFromTerminalPtr>(shared_library_.get_function_pointer("niSync_DisconnectSWTrigFromTerminal"));
  function_pointers_.ConnectTrigTerminals = reinterpret_cast<ConnectTrigTerminalsPtr>(shared_library_.get_function_pointer("niSync_ConnectTrigTerminals"));
  function_pointers_.DisconnectTrigTerminals = reinterpret_cast<DisconnectTrigTerminalsPtr>(shared_library_.get_function_pointer("niSync_DisconnectTrigTerminals"));
  function_pointers_.MeasureFrequencyEx = reinterpret_cast<MeasureFrequencyExPtr>(shared_library_.get_function_pointer("niSync_MeasureFrequencyEx"));
  function_pointers_.SetTime = reinterpret_cast<SetTimePtr>(shared_library_.get_function_pointer("niSync_SetTime"));
  function_pointers_.GetTime = reinterpret_cast<GetTimePtr>(shared_library_.get_function_pointer("niSync_GetTime"));
  function_pointers_.SetTimeReferenceFreeRunning = reinterpret_cast<SetTimeReferenceFreeRunningPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferenceFreeRunning"));
  function_pointers_.SetTimeReferenceGPS = reinterpret_cast<SetTimeReferenceGPSPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferenceGPS"));
  function_pointers_.SetTimeReferenceIRIG = reinterpret_cast<SetTimeReferenceIRIGPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferenceIRIG"));
  function_pointers_.SetTimeReferencePPS = reinterpret_cast<SetTimeReferencePPSPtr>(shared_library_.get_function_pointer("niSync_SetTimeReferencePPS"));
  function_pointers_.SetTimeReference1588OrdinaryClock = reinterpret_cast<SetTimeReference1588OrdinaryClockPtr>(shared_library_.get_function_pointer("niSync_SetTimeReference1588OrdinaryClock"));
  function_pointers_.SetTimeReference8021AS = reinterpret_cast<SetTimeReference8021ASPtr>(shared_library_.get_function_pointer("niSync_SetTimeReference8021AS"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSync_GetAttributeViInt32"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSync_SetAttributeViInt32"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niSync_GetAttributeViString"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niSync_SetAttributeViString"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSync_GetAttributeViBoolean"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSync_SetAttributeViBoolean"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSync_GetAttributeViReal64"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSync_SetAttributeViReal64"));
}

NiSyncLibrary::~NiSyncLibrary()
{
}

::grpc::Status NiSyncLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiSyncLibrary::init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_init.");
  }
#if defined(_MSC_VER)
  return niSync_init(resourceName, idQuery, resetDevice, vi);
#else
  return function_pointers_.init(resourceName, idQuery, resetDevice, vi);
#endif
}

ViStatus NiSyncLibrary::close(ViSession vi)
{
  if (!function_pointers_.close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_close.");
  }
#if defined(_MSC_VER)
  return niSync_close(vi);
#else
  return function_pointers_.close(vi);
#endif
}

ViStatus NiSyncLibrary::RevisionQuery(ViSession vi, ViChar driverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_revision_query.");
  }
#if defined(_MSC_VER)
  return niSync_revision_query(vi, driverRevision, firmwareRevision);
#else
  return function_pointers_.RevisionQuery(vi, driverRevision, firmwareRevision);
#endif
}

ViStatus NiSyncLibrary::SendSoftwareTrigger(ViSession vi, ViConstString srcTerminal)
{
  if (!function_pointers_.SendSoftwareTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SendSoftwareTrigger.");
  }
#if defined(_MSC_VER)
  return niSync_SendSoftwareTrigger(vi, srcTerminal);
#else
  return function_pointers_.SendSoftwareTrigger(vi, srcTerminal);
#endif
}

ViStatus NiSyncLibrary::ConnectClkTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.ConnectClkTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ConnectClkTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_ConnectClkTerminals(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.ConnectClkTerminals(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::DisconnectClkTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.DisconnectClkTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisconnectClkTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_DisconnectClkTerminals(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.DisconnectClkTerminals(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::ConnectSWTrigToTerminal(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge, ViReal64 delay)
{
  if (!function_pointers_.ConnectSWTrigToTerminal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ConnectSWTrigToTerminal.");
  }
#if defined(_MSC_VER)
  return niSync_ConnectSWTrigToTerminal(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge, delay);
#else
  return function_pointers_.ConnectSWTrigToTerminal(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge, delay);
#endif
}

ViStatus NiSyncLibrary::DisconnectSWTrigFromTerminal(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.DisconnectSWTrigFromTerminal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisconnectSWTrigFromTerminal.");
  }
#if defined(_MSC_VER)
  return niSync_DisconnectSWTrigFromTerminal(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.DisconnectSWTrigFromTerminal(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::ConnectTrigTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal, ViConstString syncClock, ViInt32 invert, ViInt32 updateEdge)
{
  if (!function_pointers_.ConnectTrigTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_ConnectTrigTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_ConnectTrigTerminals(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge);
#else
  return function_pointers_.ConnectTrigTerminals(vi, srcTerminal, destTerminal, syncClock, invert, updateEdge);
#endif
}

ViStatus NiSyncLibrary::DisconnectTrigTerminals(ViSession vi, ViConstString srcTerminal, ViConstString destTerminal)
{
  if (!function_pointers_.DisconnectTrigTerminals) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_DisconnectTrigTerminals.");
  }
#if defined(_MSC_VER)
  return niSync_DisconnectTrigTerminals(vi, srcTerminal, destTerminal);
#else
  return function_pointers_.DisconnectTrigTerminals(vi, srcTerminal, destTerminal);
#endif
}

ViStatus NiSyncLibrary::MeasureFrequencyEx(ViSession vi, ViConstString srcTerminal, ViReal64 duration, ViUInt32 decimationCount, ViReal64* actualDuration, ViReal64* frequency, ViReal64* frequencyError)
{
  if (!function_pointers_.MeasureFrequencyEx) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_MeasureFrequencyEx.");
  }
#if defined(_MSC_VER)
  return niSync_MeasureFrequencyEx(vi, srcTerminal, duration, decimationCount, actualDuration, frequency, frequencyError);
#else
  return function_pointers_.MeasureFrequencyEx(vi, srcTerminal, duration, decimationCount, actualDuration, frequency, frequencyError);
#endif
}

ViStatus NiSyncLibrary::SetTime(ViSession vi, ViInt32 timeSource, ViUInt32 timeSeconds, ViUInt32 timeNanoseconds, ViUInt16 timeFractionalNanoseconds)
{
  if (!function_pointers_.SetTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTime.");
  }
#if defined(_MSC_VER)
  return niSync_SetTime(vi, timeSource, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#else
  return function_pointers_.SetTime(vi, timeSource, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::GetTime(ViSession vi, ViUInt32* timeSeconds, ViUInt32* timeNanoseconds, ViUInt16* timeFractionalNanoseconds)
{
  if (!function_pointers_.GetTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetTime.");
  }
#if defined(_MSC_VER)
  return niSync_GetTime(vi, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#else
  return function_pointers_.GetTime(vi, timeSeconds, timeNanoseconds, timeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferenceFreeRunning(ViSession vi)
{
  if (!function_pointers_.SetTimeReferenceFreeRunning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferenceFreeRunning.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferenceFreeRunning(vi);
#else
  return function_pointers_.SetTimeReferenceFreeRunning(vi);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferenceGPS(ViSession vi)
{
  if (!function_pointers_.SetTimeReferenceGPS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferenceGPS.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferenceGPS(vi);
#else
  return function_pointers_.SetTimeReferenceGPS(vi);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferenceIRIG(ViSession vi, ViInt32 irigType, ViConstString terminalName)
{
  if (!function_pointers_.SetTimeReferenceIRIG) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferenceIRIG.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferenceIRIG(vi, irigType, terminalName);
#else
  return function_pointers_.SetTimeReferenceIRIG(vi, irigType, terminalName);
#endif
}

ViStatus NiSyncLibrary::SetTimeReferencePPS(ViSession vi, ViConstString terminalName, ViBoolean useManualTime, ViUInt32 initialTimeSeconds, ViUInt32 initialTimeNanoseconds, ViUInt16 initialTimeFractionalNanoseconds)
{
  if (!function_pointers_.SetTimeReferencePPS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReferencePPS.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReferencePPS(vi, terminalName, useManualTime, initialTimeSeconds, initialTimeNanoseconds, initialTimeFractionalNanoseconds);
#else
  return function_pointers_.SetTimeReferencePPS(vi, terminalName, useManualTime, initialTimeSeconds, initialTimeNanoseconds, initialTimeFractionalNanoseconds);
#endif
}

ViStatus NiSyncLibrary::SetTimeReference1588OrdinaryClock(ViSession vi)
{
  if (!function_pointers_.SetTimeReference1588OrdinaryClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReference1588OrdinaryClock.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReference1588OrdinaryClock(vi);
#else
  return function_pointers_.SetTimeReference1588OrdinaryClock(vi);
#endif
}

ViStatus NiSyncLibrary::SetTimeReference8021AS(ViSession vi)
{
  if (!function_pointers_.SetTimeReference8021AS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetTimeReference8021AS.");
  }
#if defined(_MSC_VER)
  return niSync_SetTimeReference8021AS(vi);
#else
  return function_pointers_.SetTimeReference8021AS(vi);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViInt32(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32* value)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViInt32(vi, activeItem, attribute, value);
#else
  return function_pointers_.GetAttributeViInt32(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViInt32(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 value)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViInt32(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViInt32(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViString(ViSession vi, ViConstString activeItem, ViAttr attribute, ViInt32 bufferSize, ViChar value[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViString(vi, activeItem, attribute, bufferSize, value);
#else
  return function_pointers_.GetAttributeViString(vi, activeItem, attribute, bufferSize, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViString(ViSession vi, ViConstString activeItem, ViAttr attribute, ViConstString value)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViString(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViString(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViBoolean(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean* value)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViBoolean(vi, activeItem, attribute, value);
#else
  return function_pointers_.GetAttributeViBoolean(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViBoolean(ViSession vi, ViConstString activeItem, ViAttr attribute, ViBoolean value)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViBoolean(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViBoolean(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::GetAttributeViReal64(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64* value)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niSync_GetAttributeViReal64(vi, activeItem, attribute, value);
#else
  return function_pointers_.GetAttributeViReal64(vi, activeItem, attribute, value);
#endif
}

ViStatus NiSyncLibrary::SetAttributeViReal64(ViSession vi, ViConstString activeItem, ViAttr attribute, ViReal64 value)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSync_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niSync_SetAttributeViReal64(vi, activeItem, attribute, value);
#else
  return function_pointers_.SetAttributeViReal64(vi, activeItem, attribute, value);
#endif
}

}  // namespace nisync_grpc
