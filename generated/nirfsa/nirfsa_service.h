
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFSA Metadata
//---------------------------------------------------------------------
#ifndef NIRFSA_GRPC_SERVICE_H
#define NIRFSA_GRPC_SERVICE_H

#include <nirfsa.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfsa_library_interface.h"

namespace nirfsa_grpc {

class NiRFSAService final : public NiRFSA::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<ViSession>>;

  NiRFSAService(
    NiRFSALibraryInterface* library,
    ResourceRepositorySharedPtr session_repository,
    const nidevice_grpc::FeatureToggles& feature_toggles = {});
  virtual ~NiRFSAService();
  
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status InitWithOptions(::grpc::ServerContext* context, const InitWithOptionsRequest* request, InitWithOptionsResponse* response) override;

  bool is_enabled();
private:
  NiRFSALibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  struct NiRFSAFeatureToggles
  {
    using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
    NiRFSAFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles);

    bool is_enabled;
  };

  NiRFSAFeatureToggles feature_toggles_;
};

} // namespace nirfsa_grpc

#endif  // NIRFSA_GRPC_SERVICE_H
