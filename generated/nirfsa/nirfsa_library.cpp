//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFSA Metadata
//---------------------------------------------------------------------
#include "nirfsa_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFSA_64.dll";
#else
static const char* kLibraryName = "libnirfsa.so";
#endif

namespace nirfsa_grpc {

NiRFSALibrary::NiRFSALibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Abort = reinterpret_cast<AbortPtr>(shared_library_.get_function_pointer("niRFSA_Abort"));
  function_pointers_.CheckAcquisitionStatus = reinterpret_cast<CheckAcquisitionStatusPtr>(shared_library_.get_function_pointer("niRFSA_CheckAcquisitionStatus"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niRFSA_ClearError"));
  function_pointers_.ClearSelfCalibrateRange = reinterpret_cast<ClearSelfCalibrateRangePtr>(shared_library_.get_function_pointer("niRFSA_ClearSelfCalibrateRange"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niRFSA_close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niRFSA_Commit"));
  function_pointers_.ConfigureAcquisitionType = reinterpret_cast<ConfigureAcquisitionTypePtr>(shared_library_.get_function_pointer("niRFSA_ConfigureAcquisitionType"));
  function_pointers_.ConfigureDeembeddingTableInterpolationLinear = reinterpret_cast<ConfigureDeembeddingTableInterpolationLinearPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureDeembeddingTableInterpolationLinear"));
  function_pointers_.ConfigureDeembeddingTableInterpolationNearest = reinterpret_cast<ConfigureDeembeddingTableInterpolationNearestPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureDeembeddingTableInterpolationNearest"));
  function_pointers_.ConfigureDeembeddingTableInterpolationSpline = reinterpret_cast<ConfigureDeembeddingTableInterpolationSplinePtr>(shared_library_.get_function_pointer("niRFSA_ConfigureDeembeddingTableInterpolationSpline"));
  function_pointers_.ConfigureDigitalEdgeAdvanceTrigger = reinterpret_cast<ConfigureDigitalEdgeAdvanceTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureDigitalEdgeAdvanceTrigger"));
  function_pointers_.ConfigureDigitalEdgeRefTrigger = reinterpret_cast<ConfigureDigitalEdgeRefTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureDigitalEdgeRefTrigger"));
  function_pointers_.ConfigureDigitalEdgeStartTrigger = reinterpret_cast<ConfigureDigitalEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureDigitalEdgeStartTrigger"));
  function_pointers_.ConfigureIQCarrierFrequency = reinterpret_cast<ConfigureIQCarrierFrequencyPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureIQCarrierFrequency"));
  function_pointers_.ConfigureIQPowerEdgeRefTrigger = reinterpret_cast<ConfigureIQPowerEdgeRefTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureIQPowerEdgeRefTrigger"));
  function_pointers_.ConfigureIQRate = reinterpret_cast<ConfigureIQRatePtr>(shared_library_.get_function_pointer("niRFSA_ConfigureIQRate"));
  function_pointers_.ConfigureNumberOfRecords = reinterpret_cast<ConfigureNumberOfRecordsPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureNumberOfRecords"));
  function_pointers_.ConfigureNumberOfSamples = reinterpret_cast<ConfigureNumberOfSamplesPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureNumberOfSamples"));
  function_pointers_.ConfigurePXIChassisClk10 = reinterpret_cast<ConfigurePXIChassisClk10Ptr>(shared_library_.get_function_pointer("niRFSA_ConfigurePXIChassisClk10"));
  function_pointers_.ConfigureRefClock = reinterpret_cast<ConfigureRefClockPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureRefClock"));
  function_pointers_.ConfigureReferenceLevel = reinterpret_cast<ConfigureReferenceLevelPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureReferenceLevel"));
  function_pointers_.ConfigureResolutionBandwidth = reinterpret_cast<ConfigureResolutionBandwidthPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureResolutionBandwidth"));
  function_pointers_.ConfigureSoftwareEdgeAdvanceTrigger = reinterpret_cast<ConfigureSoftwareEdgeAdvanceTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureSoftwareEdgeAdvanceTrigger"));
  function_pointers_.ConfigureSoftwareEdgeRefTrigger = reinterpret_cast<ConfigureSoftwareEdgeRefTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureSoftwareEdgeRefTrigger"));
  function_pointers_.ConfigureSoftwareEdgeStartTrigger = reinterpret_cast<ConfigureSoftwareEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureSoftwareEdgeStartTrigger"));
  function_pointers_.ConfigureSpectrumFrequencyCenterSpan = reinterpret_cast<ConfigureSpectrumFrequencyCenterSpanPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureSpectrumFrequencyCenterSpan"));
  function_pointers_.ConfigureSpectrumFrequencyStartStop = reinterpret_cast<ConfigureSpectrumFrequencyStartStopPtr>(shared_library_.get_function_pointer("niRFSA_ConfigureSpectrumFrequencyStartStop"));
  function_pointers_.CreateConfigurationList = reinterpret_cast<CreateConfigurationListPtr>(shared_library_.get_function_pointer("niRFSA_CreateConfigurationList"));
  function_pointers_.CreateConfigurationListStep = reinterpret_cast<CreateConfigurationListStepPtr>(shared_library_.get_function_pointer("niRFSA_CreateConfigurationListStep"));
  function_pointers_.CreateDeembeddingSparameterTableArray = reinterpret_cast<CreateDeembeddingSparameterTableArrayPtr>(shared_library_.get_function_pointer("niRFSA_CreateDeembeddingSparameterTableArray"));
  function_pointers_.CreateDeembeddingSparameterTableS2PFile = reinterpret_cast<CreateDeembeddingSparameterTableS2PFilePtr>(shared_library_.get_function_pointer("niRFSA_CreateDeembeddingSparameterTableS2PFile"));
  function_pointers_.DeleteAllDeembeddingTables = reinterpret_cast<DeleteAllDeembeddingTablesPtr>(shared_library_.get_function_pointer("niRFSA_DeleteAllDeembeddingTables"));
  function_pointers_.DeleteConfigurationList = reinterpret_cast<DeleteConfigurationListPtr>(shared_library_.get_function_pointer("niRFSA_DeleteConfigurationList"));
  function_pointers_.DeleteDeembeddingTable = reinterpret_cast<DeleteDeembeddingTablePtr>(shared_library_.get_function_pointer("niRFSA_DeleteDeembeddingTable"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niRFSA_Disable"));
  function_pointers_.DisableAdvanceTrigger = reinterpret_cast<DisableAdvanceTriggerPtr>(shared_library_.get_function_pointer("niRFSA_DisableAdvanceTrigger"));
  function_pointers_.DisableRefTrigger = reinterpret_cast<DisableRefTriggerPtr>(shared_library_.get_function_pointer("niRFSA_DisableRefTrigger"));
  function_pointers_.DisableStartTrigger = reinterpret_cast<DisableStartTriggerPtr>(shared_library_.get_function_pointer("niRFSA_DisableStartTrigger"));
  function_pointers_.EnableSessionAccess = reinterpret_cast<EnableSessionAccessPtr>(shared_library_.get_function_pointer("niRFSA_EnableSessionAccess"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_.get_function_pointer("niRFSA_error_message"));
  function_pointers_.ErrorQuery = reinterpret_cast<ErrorQueryPtr>(shared_library_.get_function_pointer("niRFSA_error_query"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_.get_function_pointer("niRFSA_ExportSignal"));
  function_pointers_.FetchIQMultiRecordComplexF32 = reinterpret_cast<FetchIQMultiRecordComplexF32Ptr>(shared_library_.get_function_pointer("niRFSA_FetchIQMultiRecordComplexF32"));
  function_pointers_.FetchIQMultiRecordComplexF64 = reinterpret_cast<FetchIQMultiRecordComplexF64Ptr>(shared_library_.get_function_pointer("niRFSA_FetchIQMultiRecordComplexF64"));
  function_pointers_.FetchIQMultiRecordComplexI16 = reinterpret_cast<FetchIQMultiRecordComplexI16Ptr>(shared_library_.get_function_pointer("niRFSA_FetchIQMultiRecordComplexI16"));
  function_pointers_.FetchIQSingleRecordComplexF32 = reinterpret_cast<FetchIQSingleRecordComplexF32Ptr>(shared_library_.get_function_pointer("niRFSA_FetchIQSingleRecordComplexF32"));
  function_pointers_.FetchIQSingleRecordComplexF64 = reinterpret_cast<FetchIQSingleRecordComplexF64Ptr>(shared_library_.get_function_pointer("niRFSA_FetchIQSingleRecordComplexF64"));
  function_pointers_.FetchIQSingleRecordComplexI16 = reinterpret_cast<FetchIQSingleRecordComplexI16Ptr>(shared_library_.get_function_pointer("niRFSA_FetchIQSingleRecordComplexI16"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niRFSA_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niRFSA_GetAttributeViInt32"));
  function_pointers_.GetAttributeViInt64 = reinterpret_cast<GetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niRFSA_GetAttributeViInt64"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niRFSA_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niRFSA_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niRFSA_GetAttributeViString"));
  function_pointers_.GetCalUserDefinedInfo = reinterpret_cast<GetCalUserDefinedInfoPtr>(shared_library_.get_function_pointer("niRFSA_GetCalUserDefinedInfo"));
  function_pointers_.GetCalUserDefinedInfoMaxSize = reinterpret_cast<GetCalUserDefinedInfoMaxSizePtr>(shared_library_.get_function_pointer("niRFSA_GetCalUserDefinedInfoMaxSize"));
  function_pointers_.GetDeembeddingSparameters = reinterpret_cast<GetDeembeddingSparametersPtr>(shared_library_.get_function_pointer("niRFSA_GetDeembeddingSparameters"));
  function_pointers_.GetDeviceResponse = reinterpret_cast<GetDeviceResponsePtr>(shared_library_.get_function_pointer("niRFSA_GetDeviceResponse"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niRFSA_GetError"));
  function_pointers_.GetExtCalLastDateAndTime = reinterpret_cast<GetExtCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niRFSA_GetExtCalLastDateAndTime"));
  function_pointers_.GetExtCalLastTemp = reinterpret_cast<GetExtCalLastTempPtr>(shared_library_.get_function_pointer("niRFSA_GetExtCalLastTemp"));
  function_pointers_.GetExtCalRecommendedInterval = reinterpret_cast<GetExtCalRecommendedIntervalPtr>(shared_library_.get_function_pointer("niRFSA_GetExtCalRecommendedInterval"));
  function_pointers_.GetFetchBacklog = reinterpret_cast<GetFetchBacklogPtr>(shared_library_.get_function_pointer("niRFSA_GetFetchBacklog"));
  function_pointers_.GetFrequencyResponse = reinterpret_cast<GetFrequencyResponsePtr>(shared_library_.get_function_pointer("niRFSA_GetFrequencyResponse"));
  function_pointers_.GetNormalizationCoefficients = reinterpret_cast<GetNormalizationCoefficientsPtr>(shared_library_.get_function_pointer("niRFSA_GetNormalizationCoefficients"));
  function_pointers_.GetNumberOfSpectralLines = reinterpret_cast<GetNumberOfSpectralLinesPtr>(shared_library_.get_function_pointer("niRFSA_GetNumberOfSpectralLines"));
  function_pointers_.GetRelayName = reinterpret_cast<GetRelayNamePtr>(shared_library_.get_function_pointer("niRFSA_GetRelayName"));
  function_pointers_.GetRelayOperationsCount = reinterpret_cast<GetRelayOperationsCountPtr>(shared_library_.get_function_pointer("niRFSA_GetRelayOperationsCount"));
  function_pointers_.GetScalingCoefficients = reinterpret_cast<GetScalingCoefficientsPtr>(shared_library_.get_function_pointer("niRFSA_GetScalingCoefficients"));
  function_pointers_.GetSelfCalLastDateAndTime = reinterpret_cast<GetSelfCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niRFSA_GetSelfCalLastDateAndTime"));
  function_pointers_.GetSelfCalLastTemp = reinterpret_cast<GetSelfCalLastTempPtr>(shared_library_.get_function_pointer("niRFSA_GetSelfCalLastTemp"));
  function_pointers_.GetSpectralInfoForSMT = reinterpret_cast<GetSpectralInfoForSMTPtr>(shared_library_.get_function_pointer("niRFSA_GetSpectralInfoForSMT"));
  function_pointers_.GetStreamEndpointHandle = reinterpret_cast<GetStreamEndpointHandlePtr>(shared_library_.get_function_pointer("niRFSA_GetStreamEndpointHandle"));
  function_pointers_.GetTerminalName = reinterpret_cast<GetTerminalNamePtr>(shared_library_.get_function_pointer("niRFSA_GetTerminalName"));
  function_pointers_.GetUserData = reinterpret_cast<GetUserDataPtr>(shared_library_.get_function_pointer("niRFSA_GetUserData"));
  function_pointers_.Init = reinterpret_cast<InitPtr>(shared_library_.get_function_pointer("niRFSA_init"));
  function_pointers_.InitWithOptions = reinterpret_cast<InitWithOptionsPtr>(shared_library_.get_function_pointer("niRFSA_InitWithOptions"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("niRFSA_Initiate"));
  function_pointers_.InvalidateAllAttributes = reinterpret_cast<InvalidateAllAttributesPtr>(shared_library_.get_function_pointer("niRFSA_InvalidateAllAttributes"));
  function_pointers_.IsSelfCalValid = reinterpret_cast<IsSelfCalValidPtr>(shared_library_.get_function_pointer("niRFSA_IsSelfCalValid"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niRFSA_LockSession"));
  function_pointers_.PerformThermalCorrection = reinterpret_cast<PerformThermalCorrectionPtr>(shared_library_.get_function_pointer("niRFSA_PerformThermalCorrection"));
  function_pointers_.ReadIQSingleRecordComplexF64 = reinterpret_cast<ReadIQSingleRecordComplexF64Ptr>(shared_library_.get_function_pointer("niRFSA_ReadIQSingleRecordComplexF64"));
  function_pointers_.ReadPowerSpectrumF32 = reinterpret_cast<ReadPowerSpectrumF32Ptr>(shared_library_.get_function_pointer("niRFSA_ReadPowerSpectrumF32"));
  function_pointers_.ReadPowerSpectrumF64 = reinterpret_cast<ReadPowerSpectrumF64Ptr>(shared_library_.get_function_pointer("niRFSA_ReadPowerSpectrumF64"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niRFSA_reset"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("niRFSA_ResetAttribute"));
  function_pointers_.ResetDevice = reinterpret_cast<ResetDevicePtr>(shared_library_.get_function_pointer("niRFSA_ResetDevice"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niRFSA_ResetWithDefaults"));
  function_pointers_.ResetWithOptions = reinterpret_cast<ResetWithOptionsPtr>(shared_library_.get_function_pointer("niRFSA_ResetWithOptions"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niRFSA_revision_query"));
  function_pointers_.SelfCal = reinterpret_cast<SelfCalPtr>(shared_library_.get_function_pointer("niRFSA_SelfCal"));
  function_pointers_.SelfCalibrate = reinterpret_cast<SelfCalibratePtr>(shared_library_.get_function_pointer("niRFSA_SelfCalibrate"));
  function_pointers_.SelfCalibrateRange = reinterpret_cast<SelfCalibrateRangePtr>(shared_library_.get_function_pointer("niRFSA_SelfCalibrateRange"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niRFSA_self_test"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("niRFSA_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niRFSA_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niRFSA_SetAttributeViInt32"));
  function_pointers_.SetAttributeViInt64 = reinterpret_cast<SetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niRFSA_SetAttributeViInt64"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niRFSA_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niRFSA_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niRFSA_SetAttributeViString"));
  function_pointers_.SetCalUserDefinedInfo = reinterpret_cast<SetCalUserDefinedInfoPtr>(shared_library_.get_function_pointer("niRFSA_SetCalUserDefinedInfo"));
  function_pointers_.SetUserData = reinterpret_cast<SetUserDataPtr>(shared_library_.get_function_pointer("niRFSA_SetUserData"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niRFSA_UnlockSession"));
}

NiRFSALibrary::~NiRFSALibrary()
{
}

::grpc::Status NiRFSALibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiRFSALibrary::Abort(ViSession vi)
{
  if (!function_pointers_.Abort) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_Abort.");
  }
  return function_pointers_.Abort(vi);
}

ViStatus NiRFSALibrary::CheckAcquisitionStatus(ViSession vi, ViBoolean* isDone)
{
  if (!function_pointers_.CheckAcquisitionStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_CheckAcquisitionStatus.");
  }
  return function_pointers_.CheckAcquisitionStatus(vi, isDone);
}

ViStatus NiRFSALibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ClearError.");
  }
  return function_pointers_.ClearError(vi);
}

ViStatus NiRFSALibrary::ClearSelfCalibrateRange(ViSession vi)
{
  if (!function_pointers_.ClearSelfCalibrateRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ClearSelfCalibrateRange.");
  }
  return function_pointers_.ClearSelfCalibrateRange(vi);
}

ViStatus NiRFSALibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_close.");
  }
  return function_pointers_.Close(vi);
}

ViStatus NiRFSALibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_Commit.");
  }
  return function_pointers_.Commit(vi);
}

ViStatus NiRFSALibrary::ConfigureAcquisitionType(ViSession vi, ViInt32 acquisitionType)
{
  if (!function_pointers_.ConfigureAcquisitionType) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureAcquisitionType.");
  }
  return function_pointers_.ConfigureAcquisitionType(vi, acquisitionType);
}

ViStatus NiRFSALibrary::ConfigureDeembeddingTableInterpolationLinear(ViSession vi, ViConstString port, ViConstString tableName, ViInt32 format)
{
  if (!function_pointers_.ConfigureDeembeddingTableInterpolationLinear) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureDeembeddingTableInterpolationLinear.");
  }
  return function_pointers_.ConfigureDeembeddingTableInterpolationLinear(vi, port, tableName, format);
}

ViStatus NiRFSALibrary::ConfigureDeembeddingTableInterpolationNearest(ViSession vi, ViConstString port, ViConstString tableName)
{
  if (!function_pointers_.ConfigureDeembeddingTableInterpolationNearest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureDeembeddingTableInterpolationNearest.");
  }
  return function_pointers_.ConfigureDeembeddingTableInterpolationNearest(vi, port, tableName);
}

ViStatus NiRFSALibrary::ConfigureDeembeddingTableInterpolationSpline(ViSession vi, ViConstString port, ViConstString tableName)
{
  if (!function_pointers_.ConfigureDeembeddingTableInterpolationSpline) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureDeembeddingTableInterpolationSpline.");
  }
  return function_pointers_.ConfigureDeembeddingTableInterpolationSpline(vi, port, tableName);
}

ViStatus NiRFSALibrary::ConfigureDigitalEdgeAdvanceTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureDigitalEdgeAdvanceTrigger.");
  }
  return function_pointers_.ConfigureDigitalEdgeAdvanceTrigger(vi, source, edge);
}

ViStatus NiRFSALibrary::ConfigureDigitalEdgeRefTrigger(ViSession vi, ViConstString source, ViInt32 edge, ViInt64 pretriggerSamples)
{
  if (!function_pointers_.ConfigureDigitalEdgeRefTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureDigitalEdgeRefTrigger.");
  }
  return function_pointers_.ConfigureDigitalEdgeRefTrigger(vi, source, edge, pretriggerSamples);
}

ViStatus NiRFSALibrary::ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureDigitalEdgeStartTrigger.");
  }
  return function_pointers_.ConfigureDigitalEdgeStartTrigger(vi, source, edge);
}

ViStatus NiRFSALibrary::ConfigureIQCarrierFrequency(ViSession vi, ViConstString channelList, ViReal64 carrierFrequency)
{
  if (!function_pointers_.ConfigureIQCarrierFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureIQCarrierFrequency.");
  }
  return function_pointers_.ConfigureIQCarrierFrequency(vi, channelList, carrierFrequency);
}

ViStatus NiRFSALibrary::ConfigureIQPowerEdgeRefTrigger(ViSession vi, ViConstString source, ViReal64 level, ViInt32 slope, ViInt64 pretriggerSamples)
{
  if (!function_pointers_.ConfigureIQPowerEdgeRefTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureIQPowerEdgeRefTrigger.");
  }
  return function_pointers_.ConfigureIQPowerEdgeRefTrigger(vi, source, level, slope, pretriggerSamples);
}

ViStatus NiRFSALibrary::ConfigureIQRate(ViSession vi, ViConstString channelList, ViReal64 iqRate)
{
  if (!function_pointers_.ConfigureIQRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureIQRate.");
  }
  return function_pointers_.ConfigureIQRate(vi, channelList, iqRate);
}

ViStatus NiRFSALibrary::ConfigureNumberOfRecords(ViSession vi, ViConstString channelList, ViBoolean numberOfRecordsIsFinite, ViInt64 numberOfRecords)
{
  if (!function_pointers_.ConfigureNumberOfRecords) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureNumberOfRecords.");
  }
  return function_pointers_.ConfigureNumberOfRecords(vi, channelList, numberOfRecordsIsFinite, numberOfRecords);
}

ViStatus NiRFSALibrary::ConfigureNumberOfSamples(ViSession vi, ViConstString channelList, ViBoolean numberOfSamplesIsFinite, ViInt64 samplesPerRecord)
{
  if (!function_pointers_.ConfigureNumberOfSamples) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureNumberOfSamples.");
  }
  return function_pointers_.ConfigureNumberOfSamples(vi, channelList, numberOfSamplesIsFinite, samplesPerRecord);
}

ViStatus NiRFSALibrary::ConfigurePXIChassisClk10(ViSession vi, ViConstString pxiClk10Source)
{
  if (!function_pointers_.ConfigurePXIChassisClk10) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigurePXIChassisClk10.");
  }
  return function_pointers_.ConfigurePXIChassisClk10(vi, pxiClk10Source);
}

ViStatus NiRFSALibrary::ConfigureRefClock(ViSession vi, ViConstString clockSource, ViReal64 refClockRate)
{
  if (!function_pointers_.ConfigureRefClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureRefClock.");
  }
  return function_pointers_.ConfigureRefClock(vi, clockSource, refClockRate);
}

ViStatus NiRFSALibrary::ConfigureReferenceLevel(ViSession vi, ViConstString channelList, ViReal64 referenceLevel)
{
  if (!function_pointers_.ConfigureReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureReferenceLevel.");
  }
  return function_pointers_.ConfigureReferenceLevel(vi, channelList, referenceLevel);
}

ViStatus NiRFSALibrary::ConfigureResolutionBandwidth(ViSession vi, ViConstString channelList, ViReal64 resolutionBandwidth)
{
  if (!function_pointers_.ConfigureResolutionBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureResolutionBandwidth.");
  }
  return function_pointers_.ConfigureResolutionBandwidth(vi, channelList, resolutionBandwidth);
}

ViStatus NiRFSALibrary::ConfigureSoftwareEdgeAdvanceTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureSoftwareEdgeAdvanceTrigger.");
  }
  return function_pointers_.ConfigureSoftwareEdgeAdvanceTrigger(vi);
}

ViStatus NiRFSALibrary::ConfigureSoftwareEdgeRefTrigger(ViSession vi, ViInt64 pretriggerSamples)
{
  if (!function_pointers_.ConfigureSoftwareEdgeRefTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureSoftwareEdgeRefTrigger.");
  }
  return function_pointers_.ConfigureSoftwareEdgeRefTrigger(vi, pretriggerSamples);
}

ViStatus NiRFSALibrary::ConfigureSoftwareEdgeStartTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureSoftwareEdgeStartTrigger.");
  }
  return function_pointers_.ConfigureSoftwareEdgeStartTrigger(vi);
}

ViStatus NiRFSALibrary::ConfigureSpectrumFrequencyCenterSpan(ViSession vi, ViConstString channelList, ViReal64 centerFrequency, ViReal64 span)
{
  if (!function_pointers_.ConfigureSpectrumFrequencyCenterSpan) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureSpectrumFrequencyCenterSpan.");
  }
  return function_pointers_.ConfigureSpectrumFrequencyCenterSpan(vi, channelList, centerFrequency, span);
}

ViStatus NiRFSALibrary::ConfigureSpectrumFrequencyStartStop(ViSession vi, ViConstString channelList, ViReal64 startFrequency, ViReal64 stopFrequency)
{
  if (!function_pointers_.ConfigureSpectrumFrequencyStartStop) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ConfigureSpectrumFrequencyStartStop.");
  }
  return function_pointers_.ConfigureSpectrumFrequencyStartStop(vi, channelList, startFrequency, stopFrequency);
}

ViStatus NiRFSALibrary::CreateConfigurationList(ViSession vi, ViConstString listName, ViInt32 numberOfListAttributes, ViAttr listAttributeIds[], ViBoolean setAsActiveList)
{
  if (!function_pointers_.CreateConfigurationList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_CreateConfigurationList.");
  }
  return function_pointers_.CreateConfigurationList(vi, listName, numberOfListAttributes, listAttributeIds, setAsActiveList);
}

ViStatus NiRFSALibrary::CreateConfigurationListStep(ViSession vi, ViBoolean setAsActiveStep)
{
  if (!function_pointers_.CreateConfigurationListStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_CreateConfigurationListStep.");
  }
  return function_pointers_.CreateConfigurationListStep(vi, setAsActiveStep);
}

ViStatus NiRFSALibrary::CreateDeembeddingSparameterTableArray(ViSession vi, ViConstString port, ViConstString tableName, ViReal64 frequencies[], ViInt32 frequenciesSize, NIComplexNumber_struct sparameterTable[], ViInt32 sparameterTableSize, ViInt32 numberOfPorts, ViInt32 sparameterOrientation)
{
  if (!function_pointers_.CreateDeembeddingSparameterTableArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_CreateDeembeddingSparameterTableArray.");
  }
  return function_pointers_.CreateDeembeddingSparameterTableArray(vi, port, tableName, frequencies, frequenciesSize, sparameterTable, sparameterTableSize, numberOfPorts, sparameterOrientation);
}

ViStatus NiRFSALibrary::CreateDeembeddingSparameterTableS2PFile(ViSession vi, ViConstString port, ViConstString tableName, ViConstString s2pFilePath, ViInt32 sparameterOrientation)
{
  if (!function_pointers_.CreateDeembeddingSparameterTableS2PFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_CreateDeembeddingSparameterTableS2PFile.");
  }
  return function_pointers_.CreateDeembeddingSparameterTableS2PFile(vi, port, tableName, s2pFilePath, sparameterOrientation);
}

ViStatus NiRFSALibrary::DeleteAllDeembeddingTables(ViSession vi)
{
  if (!function_pointers_.DeleteAllDeembeddingTables) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_DeleteAllDeembeddingTables.");
  }
  return function_pointers_.DeleteAllDeembeddingTables(vi);
}

ViStatus NiRFSALibrary::DeleteConfigurationList(ViSession vi, ViConstString listName)
{
  if (!function_pointers_.DeleteConfigurationList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_DeleteConfigurationList.");
  }
  return function_pointers_.DeleteConfigurationList(vi, listName);
}

ViStatus NiRFSALibrary::DeleteDeembeddingTable(ViSession vi, ViConstString port, ViConstString tableName)
{
  if (!function_pointers_.DeleteDeembeddingTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_DeleteDeembeddingTable.");
  }
  return function_pointers_.DeleteDeembeddingTable(vi, port, tableName);
}

ViStatus NiRFSALibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_Disable.");
  }
  return function_pointers_.Disable(vi);
}

ViStatus NiRFSALibrary::DisableAdvanceTrigger(ViSession vi)
{
  if (!function_pointers_.DisableAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_DisableAdvanceTrigger.");
  }
  return function_pointers_.DisableAdvanceTrigger(vi);
}

ViStatus NiRFSALibrary::DisableRefTrigger(ViSession vi)
{
  if (!function_pointers_.DisableRefTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_DisableRefTrigger.");
  }
  return function_pointers_.DisableRefTrigger(vi);
}

ViStatus NiRFSALibrary::DisableStartTrigger(ViSession vi)
{
  if (!function_pointers_.DisableStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_DisableStartTrigger.");
  }
  return function_pointers_.DisableStartTrigger(vi);
}

ViStatus NiRFSALibrary::EnableSessionAccess(ViSession vi, ViBoolean enable)
{
  if (!function_pointers_.EnableSessionAccess) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_EnableSessionAccess.");
  }
  return function_pointers_.EnableSessionAccess(vi, enable);
}

ViStatus NiRFSALibrary::ErrorMessage(ViSession vi, ViStatus statusCode, ViChar errorMessage[1024])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_error_message.");
  }
  return function_pointers_.ErrorMessage(vi, statusCode, errorMessage);
}

ViStatus NiRFSALibrary::ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[1024])
{
  if (!function_pointers_.ErrorQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_error_query.");
  }
  return function_pointers_.ErrorQuery(vi, errorCode, errorMessage);
}

ViStatus NiRFSALibrary::ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ExportSignal.");
  }
  return function_pointers_.ExportSignal(vi, signal, signalIdentifier, outputTerminal);
}

ViStatus NiRFSALibrary::FetchIQMultiRecordComplexF32(ViSession vi, ViConstString channelList, ViInt64 startingRecord, ViInt64 numberOfRecords, ViInt64 numberOfSamples, ViReal64 timeout, NIComplexNumberF32_struct data[], niRFSA_wfmInfo_struct wfmInfo[])
{
  if (!function_pointers_.FetchIQMultiRecordComplexF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_FetchIQMultiRecordComplexF32.");
  }
  return function_pointers_.FetchIQMultiRecordComplexF32(vi, channelList, startingRecord, numberOfRecords, numberOfSamples, timeout, data, wfmInfo);
}

ViStatus NiRFSALibrary::FetchIQMultiRecordComplexF64(ViSession vi, ViConstString channelList, ViInt64 startingRecord, ViInt64 numberOfRecords, ViInt64 numberOfSamples, ViReal64 timeout, NIComplexNumber_struct data[], niRFSA_wfmInfo_struct wfmInfo[])
{
  if (!function_pointers_.FetchIQMultiRecordComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_FetchIQMultiRecordComplexF64.");
  }
  return function_pointers_.FetchIQMultiRecordComplexF64(vi, channelList, startingRecord, numberOfRecords, numberOfSamples, timeout, data, wfmInfo);
}

ViStatus NiRFSALibrary::FetchIQMultiRecordComplexI16(ViSession vi, ViConstString channelList, ViInt64 startingRecord, ViInt64 numberOfRecords, ViInt64 numberOfSamples, ViReal64 timeout, NIComplexI16_struct data[], niRFSA_wfmInfo_struct wfmInfo[])
{
  if (!function_pointers_.FetchIQMultiRecordComplexI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_FetchIQMultiRecordComplexI16.");
  }
  return function_pointers_.FetchIQMultiRecordComplexI16(vi, channelList, startingRecord, numberOfRecords, numberOfSamples, timeout, data, wfmInfo);
}

ViStatus NiRFSALibrary::FetchIQSingleRecordComplexF32(ViSession vi, ViConstString channelList, ViInt64 recordNumber, ViInt64 numberOfSamples, ViReal64 timeout, NIComplexNumberF32_struct data[], niRFSA_wfmInfo_struct* wfmInfo)
{
  if (!function_pointers_.FetchIQSingleRecordComplexF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_FetchIQSingleRecordComplexF32.");
  }
  return function_pointers_.FetchIQSingleRecordComplexF32(vi, channelList, recordNumber, numberOfSamples, timeout, data, wfmInfo);
}

ViStatus NiRFSALibrary::FetchIQSingleRecordComplexF64(ViSession vi, ViConstString channelList, ViInt64 recordNumber, ViInt64 numberOfSamples, ViReal64 timeout, NIComplexNumber_struct data[], niRFSA_wfmInfo_struct* wfmInfo)
{
  if (!function_pointers_.FetchIQSingleRecordComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_FetchIQSingleRecordComplexF64.");
  }
  return function_pointers_.FetchIQSingleRecordComplexF64(vi, channelList, recordNumber, numberOfSamples, timeout, data, wfmInfo);
}

ViStatus NiRFSALibrary::FetchIQSingleRecordComplexI16(ViSession vi, ViConstString channelList, ViInt64 recordNumber, ViInt64 numberOfSamples, ViReal64 timeout, NIComplexI16_struct data[], niRFSA_wfmInfo_struct* wfmInfo)
{
  if (!function_pointers_.FetchIQSingleRecordComplexI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_FetchIQSingleRecordComplexI16.");
  }
  return function_pointers_.FetchIQSingleRecordComplexI16(vi, channelList, recordNumber, numberOfSamples, timeout, data, wfmInfo);
}

ViStatus NiRFSALibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* value)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetAttributeViBoolean.");
  }
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* value)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetAttributeViInt32.");
  }
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* value)
{
  if (!function_pointers_.GetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetAttributeViInt64.");
  }
  return function_pointers_.GetAttributeViInt64(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* value)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetAttributeViReal64.");
  }
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* value)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetAttributeViSession.");
  }
  return function_pointers_.GetAttributeViSession(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufSize, ViChar value[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetAttributeViString.");
  }
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, bufSize, value);
}

ViStatus NiRFSALibrary::GetCalUserDefinedInfo(ViSession vi, ViChar info[2048])
{
  if (!function_pointers_.GetCalUserDefinedInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetCalUserDefinedInfo.");
  }
  return function_pointers_.GetCalUserDefinedInfo(vi, info);
}

ViStatus NiRFSALibrary::GetCalUserDefinedInfoMaxSize(ViSession vi, ViInt32* infoSize)
{
  if (!function_pointers_.GetCalUserDefinedInfoMaxSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetCalUserDefinedInfoMaxSize.");
  }
  return function_pointers_.GetCalUserDefinedInfoMaxSize(vi, infoSize);
}

ViStatus NiRFSALibrary::GetDeembeddingSparameters(ViSession vi, NIComplexNumber_struct sparameters[], ViInt32 sparametersArraySize, ViInt32* numberOfSparameters, ViInt32* numberOfPorts)
{
  if (!function_pointers_.GetDeembeddingSparameters) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetDeembeddingSparameters.");
  }
  return function_pointers_.GetDeembeddingSparameters(vi, sparameters, sparametersArraySize, numberOfSparameters, numberOfPorts);
}

ViStatus NiRFSALibrary::GetDeviceResponse(ViSession vi, ViConstString channelList, ViInt32 responseType, ViInt32 bufferSize, ViReal64 frequencies[], ViReal64 magnitudeResponse[], ViReal64 phaseResponse[], ViInt32* numberOfFrequencies)
{
  if (!function_pointers_.GetDeviceResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetDeviceResponse.");
  }
  return function_pointers_.GetDeviceResponse(vi, channelList, responseType, bufferSize, frequencies, magnitudeResponse, phaseResponse, numberOfFrequencies);
}

ViStatus NiRFSALibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetError.");
  }
  return function_pointers_.GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
}

ViStatus NiRFSALibrary::GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetExtCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetExtCalLastDateAndTime.");
  }
  return function_pointers_.GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
}

ViStatus NiRFSALibrary::GetExtCalLastTemp(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.GetExtCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetExtCalLastTemp.");
  }
  return function_pointers_.GetExtCalLastTemp(vi, temperature);
}

ViStatus NiRFSALibrary::GetExtCalRecommendedInterval(ViSession vi, ViInt32* months)
{
  if (!function_pointers_.GetExtCalRecommendedInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetExtCalRecommendedInterval.");
  }
  return function_pointers_.GetExtCalRecommendedInterval(vi, months);
}

ViStatus NiRFSALibrary::GetFetchBacklog(ViSession vi, ViConstString channelList, ViInt64 recordNumber, ViInt64* backlog)
{
  if (!function_pointers_.GetFetchBacklog) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetFetchBacklog.");
  }
  return function_pointers_.GetFetchBacklog(vi, channelList, recordNumber, backlog);
}

ViStatus NiRFSALibrary::GetFrequencyResponse(ViSession vi, ViConstString channelList, ViInt32 bufferSize, ViReal64 frequencies[], ViReal64 magnitudeResponse[], ViReal64 phaseResponse[], ViInt32* numberOfFrequencies)
{
  if (!function_pointers_.GetFrequencyResponse) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetFrequencyResponse.");
  }
  return function_pointers_.GetFrequencyResponse(vi, channelList, bufferSize, frequencies, magnitudeResponse, phaseResponse, numberOfFrequencies);
}

ViStatus NiRFSALibrary::GetNormalizationCoefficients(ViSession vi, ViConstString channelList, ViInt32 arraySize, niRFSA_coefficientInfo_struct coefficientInfo[], ViInt32* numberOfCoefficientSets)
{
  if (!function_pointers_.GetNormalizationCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetNormalizationCoefficients.");
  }
  return function_pointers_.GetNormalizationCoefficients(vi, channelList, arraySize, coefficientInfo, numberOfCoefficientSets);
}

ViStatus NiRFSALibrary::GetNumberOfSpectralLines(ViSession vi, ViConstString channelList, ViInt32* numberOfSpectralLines)
{
  if (!function_pointers_.GetNumberOfSpectralLines) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetNumberOfSpectralLines.");
  }
  return function_pointers_.GetNumberOfSpectralLines(vi, channelList, numberOfSpectralLines);
}

ViStatus NiRFSALibrary::GetRelayName(ViSession vi, ViConstString channelList, ViInt32 index, ViChar name[], ViInt32* bufferSize)
{
  if (!function_pointers_.GetRelayName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetRelayName.");
  }
  return function_pointers_.GetRelayName(vi, channelList, index, name, bufferSize);
}

ViStatus NiRFSALibrary::GetRelayOperationsCount(ViSession vi, ViConstString channelList, ViInt32 operationsCount[], ViInt32* bufferSize)
{
  if (!function_pointers_.GetRelayOperationsCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetRelayOperationsCount.");
  }
  return function_pointers_.GetRelayOperationsCount(vi, channelList, operationsCount, bufferSize);
}

ViStatus NiRFSALibrary::GetScalingCoefficients(ViSession vi, ViConstString channelList, ViInt32 arraySize, niRFSA_coefficientInfo_struct coefficientInfo[], ViInt32* numberOfCoefficientSets)
{
  if (!function_pointers_.GetScalingCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetScalingCoefficients.");
  }
  return function_pointers_.GetScalingCoefficients(vi, channelList, arraySize, coefficientInfo, numberOfCoefficientSets);
}

ViStatus NiRFSALibrary::GetSelfCalLastDateAndTime(ViSession vi, ViInt64 selfCalibrationStep, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetSelfCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetSelfCalLastDateAndTime.");
  }
  return function_pointers_.GetSelfCalLastDateAndTime(vi, selfCalibrationStep, year, month, day, hour, minute);
}

ViStatus NiRFSALibrary::GetSelfCalLastTemp(ViSession vi, ViInt64 selfCalibrationStep, ViReal64* temp)
{
  if (!function_pointers_.GetSelfCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetSelfCalLastTemp.");
  }
  return function_pointers_.GetSelfCalLastTemp(vi, selfCalibrationStep, temp);
}

ViStatus NiRFSALibrary::GetSpectralInfoForSMT(ViSession vi, SmtSpectrumInfo_struct* spectrumInfo)
{
  if (!function_pointers_.GetSpectralInfoForSMT) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetSpectralInfoForSMT.");
  }
  return function_pointers_.GetSpectralInfoForSMT(vi, spectrumInfo);
}

ViStatus NiRFSALibrary::GetStreamEndpointHandle(ViSession vi, ViConstString streamEndpoint, ViUInt32* writerHandle)
{
  if (!function_pointers_.GetStreamEndpointHandle) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetStreamEndpointHandle.");
  }
  return function_pointers_.GetStreamEndpointHandle(vi, streamEndpoint, writerHandle);
}

ViStatus NiRFSALibrary::GetTerminalName(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViInt32 bufferSize, ViChar terminalName[])
{
  if (!function_pointers_.GetTerminalName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetTerminalName.");
  }
  return function_pointers_.GetTerminalName(vi, signal, signalIdentifier, bufferSize, terminalName);
}

ViStatus NiRFSALibrary::GetUserData(ViSession vi, ViConstString identifier, ViInt32 bufferSize, ViInt8 data[], ViInt32* actualDataSize)
{
  if (!function_pointers_.GetUserData) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_GetUserData.");
  }
  return function_pointers_.GetUserData(vi, identifier, bufferSize, data, actualDataSize);
}

ViStatus NiRFSALibrary::Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean reset, ViSession* vi)
{
  if (!function_pointers_.Init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_init.");
  }
  return function_pointers_.Init(resourceName, idQuery, reset, vi);
}

ViStatus NiRFSALibrary::InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean reset, ViConstString optionString, ViSession* vi)
{
  if (!function_pointers_.InitWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_InitWithOptions.");
  }
  return function_pointers_.InitWithOptions(resourceName, idQuery, reset, optionString, vi);
}

ViStatus NiRFSALibrary::Initiate(ViSession vi)
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_Initiate.");
  }
  return function_pointers_.Initiate(vi);
}

ViStatus NiRFSALibrary::InvalidateAllAttributes(ViSession vi)
{
  if (!function_pointers_.InvalidateAllAttributes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_InvalidateAllAttributes.");
  }
  return function_pointers_.InvalidateAllAttributes(vi);
}

ViStatus NiRFSALibrary::IsSelfCalValid(ViSession vi, ViBoolean* selfCalValid, ViInt64* validSteps)
{
  if (!function_pointers_.IsSelfCalValid) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_IsSelfCalValid.");
  }
  return function_pointers_.IsSelfCalValid(vi, selfCalValid, validSteps);
}

ViStatus NiRFSALibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_LockSession.");
  }
  return function_pointers_.LockSession(vi, callerHasLock);
}

ViStatus NiRFSALibrary::PerformThermalCorrection(ViSession vi)
{
  if (!function_pointers_.PerformThermalCorrection) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_PerformThermalCorrection.");
  }
  return function_pointers_.PerformThermalCorrection(vi);
}

ViStatus NiRFSALibrary::ReadIQSingleRecordComplexF64(ViSession vi, ViConstString channelList, ViReal64 timeout, NIComplexNumber_struct data[], ViInt64 dataArraySize, niRFSA_wfmInfo_struct* wfmInfo)
{
  if (!function_pointers_.ReadIQSingleRecordComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ReadIQSingleRecordComplexF64.");
  }
  return function_pointers_.ReadIQSingleRecordComplexF64(vi, channelList, timeout, data, dataArraySize, wfmInfo);
}

ViStatus NiRFSALibrary::ReadPowerSpectrumF32(ViSession vi, ViConstString channelList, ViReal64 timeout, ViReal32 powerSpectrumData[], ViInt32 dataArraySize, niRFSA_spectrumInfo_struct* spectrumInfo)
{
  if (!function_pointers_.ReadPowerSpectrumF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ReadPowerSpectrumF32.");
  }
  return function_pointers_.ReadPowerSpectrumF32(vi, channelList, timeout, powerSpectrumData, dataArraySize, spectrumInfo);
}

ViStatus NiRFSALibrary::ReadPowerSpectrumF64(ViSession vi, ViConstString channelList, ViReal64 timeout, ViReal64 powerSpectrumData[], ViInt32 dataArraySize, niRFSA_spectrumInfo_struct* spectrumInfo)
{
  if (!function_pointers_.ReadPowerSpectrumF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ReadPowerSpectrumF64.");
  }
  return function_pointers_.ReadPowerSpectrumF64(vi, channelList, timeout, powerSpectrumData, dataArraySize, spectrumInfo);
}

ViStatus NiRFSALibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_reset.");
  }
  return function_pointers_.Reset(vi);
}

ViStatus NiRFSALibrary::ResetAttribute(ViSession vi, ViConstString channelName, ViAttr attributeId)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(vi, channelName, attributeId);
}

ViStatus NiRFSALibrary::ResetDevice(ViSession vi)
{
  if (!function_pointers_.ResetDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ResetDevice.");
  }
  return function_pointers_.ResetDevice(vi);
}

ViStatus NiRFSALibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ResetWithDefaults.");
  }
  return function_pointers_.ResetWithDefaults(vi);
}

ViStatus NiRFSALibrary::ResetWithOptions(ViSession vi, ViUInt64 stepsToOmit)
{
  if (!function_pointers_.ResetWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_ResetWithOptions.");
  }
  return function_pointers_.ResetWithOptions(vi, stepsToOmit);
}

ViStatus NiRFSALibrary::RevisionQuery(ViSession vi, ViChar driverRev[256], ViChar instrRev[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_revision_query.");
  }
  return function_pointers_.RevisionQuery(vi, driverRev, instrRev);
}

ViStatus NiRFSALibrary::SelfCal(ViSession vi)
{
  if (!function_pointers_.SelfCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SelfCal.");
  }
  return function_pointers_.SelfCal(vi);
}

ViStatus NiRFSALibrary::SelfCalibrate(ViSession vi, ViInt64 stepsToOmit)
{
  if (!function_pointers_.SelfCalibrate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SelfCalibrate.");
  }
  return function_pointers_.SelfCalibrate(vi, stepsToOmit);
}

ViStatus NiRFSALibrary::SelfCalibrateRange(ViSession vi, ViInt64 stepsToOmit, ViReal64 minFrequency, ViReal64 maxFrequency, ViReal64 minReferenceLevel, ViReal64 maxReferenceLevel)
{
  if (!function_pointers_.SelfCalibrateRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SelfCalibrateRange.");
  }
  return function_pointers_.SelfCalibrateRange(vi, stepsToOmit, minFrequency, maxFrequency, minReferenceLevel, maxReferenceLevel);
}

ViStatus NiRFSALibrary::SelfTest(ViSession vi, ViInt16* testResult, ViChar testMessage[2048])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_self_test.");
  }
  return function_pointers_.SelfTest(vi, testResult, testMessage);
}

ViStatus NiRFSALibrary::SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger, ViConstString triggerIdentifier)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(vi, trigger, triggerIdentifier);
}

ViStatus NiRFSALibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetAttributeViBoolean.");
  }
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetAttributeViInt32.");
  }
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value)
{
  if (!function_pointers_.SetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetAttributeViInt64.");
  }
  return function_pointers_.SetAttributeViInt64(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetAttributeViReal64.");
  }
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetAttributeViSession.");
  }
  return function_pointers_.SetAttributeViSession(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetAttributeViString.");
  }
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, value);
}

ViStatus NiRFSALibrary::SetCalUserDefinedInfo(ViSession vi, ViConstString info)
{
  if (!function_pointers_.SetCalUserDefinedInfo) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetCalUserDefinedInfo.");
  }
  return function_pointers_.SetCalUserDefinedInfo(vi, info);
}

ViStatus NiRFSALibrary::SetUserData(ViSession vi, ViConstString identifier, ViInt32 bufferSize, ViInt8 data[])
{
  if (!function_pointers_.SetUserData) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_SetUserData.");
  }
  return function_pointers_.SetUserData(vi, identifier, bufferSize, data);
}

ViStatus NiRFSALibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSA_UnlockSession.");
  }
  return function_pointers_.UnlockSession(vi, callerHasLock);
}

}  // namespace nirfsa_grpc
