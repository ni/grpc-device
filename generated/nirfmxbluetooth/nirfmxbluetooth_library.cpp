//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXBLUETOOTH Metadata
//---------------------------------------------------------------------
#include "nirfmxbluetooth_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxBT.dll";
#else
static const char* kLibraryName = "libnirfmxbt.so.1";
#endif

namespace nirfmxbluetooth_grpc {

NiRFmxBluetoothLibrary::NiRFmxBluetoothLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.ACPCfgAveraging = reinterpret_cast<ACPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxBT_ACPCfgAveraging"));
  function_pointers_.ACPCfgBurstSynchronizationType = reinterpret_cast<ACPCfgBurstSynchronizationTypePtr>(shared_library_.get_function_pointer("RFmxBT_ACPCfgBurstSynchronizationType"));
  function_pointers_.ACPCfgNumberOfOffsets = reinterpret_cast<ACPCfgNumberOfOffsetsPtr>(shared_library_.get_function_pointer("RFmxBT_ACPCfgNumberOfOffsets"));
  function_pointers_.ACPCfgOffsetChannelMode = reinterpret_cast<ACPCfgOffsetChannelModePtr>(shared_library_.get_function_pointer("RFmxBT_ACPCfgOffsetChannelMode"));
  function_pointers_.ACPFetchAbsolutePowerTrace = reinterpret_cast<ACPFetchAbsolutePowerTracePtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchAbsolutePowerTrace"));
  function_pointers_.ACPFetchMaskTrace = reinterpret_cast<ACPFetchMaskTracePtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchMaskTrace"));
  function_pointers_.ACPFetchMeasurementStatus = reinterpret_cast<ACPFetchMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchMeasurementStatus"));
  function_pointers_.ACPFetchOffsetMeasurement = reinterpret_cast<ACPFetchOffsetMeasurementPtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchOffsetMeasurement"));
  function_pointers_.ACPFetchOffsetMeasurementArray = reinterpret_cast<ACPFetchOffsetMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchOffsetMeasurementArray"));
  function_pointers_.ACPFetchReferenceChannelPower = reinterpret_cast<ACPFetchReferenceChannelPowerPtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchReferenceChannelPower"));
  function_pointers_.ACPFetchSpectrum = reinterpret_cast<ACPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxBT_ACPFetchSpectrum"));
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_.get_function_pointer("RFmxBT_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_.get_function_pointer("RFmxBT_AnalyzeIQ1Waveform"));
  function_pointers_.AutoDetectSignal = reinterpret_cast<AutoDetectSignalPtr>(shared_library_.get_function_pointer("RFmxBT_AutoDetectSignal"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_.get_function_pointer("RFmxBT_AutoLevel"));
  function_pointers_.BuildOffsetString = reinterpret_cast<BuildOffsetStringPtr>(shared_library_.get_function_pointer("RFmxBT_BuildOffsetString"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_.get_function_pointer("RFmxBT_BuildSignalString"));
  function_pointers_.BuildSlotString = reinterpret_cast<BuildSlotStringPtr>(shared_library_.get_function_pointer("RFmxBT_BuildSlotString"));
  function_pointers_.CfgChannelNumber = reinterpret_cast<CfgChannelNumberPtr>(shared_library_.get_function_pointer("RFmxBT_CfgChannelNumber"));
  function_pointers_.CfgDataRate = reinterpret_cast<CfgDataRatePtr>(shared_library_.get_function_pointer("RFmxBT_CfgDataRate"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxBT_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_.get_function_pointer("RFmxBT_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_.get_function_pointer("RFmxBT_CfgFrequency"));
  function_pointers_.CfgFrequencyChannelNumber = reinterpret_cast<CfgFrequencyChannelNumberPtr>(shared_library_.get_function_pointer("RFmxBT_CfgFrequencyChannelNumber"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_.get_function_pointer("RFmxBT_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxBT_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgLEDirectionFinding = reinterpret_cast<CfgLEDirectionFindingPtr>(shared_library_.get_function_pointer("RFmxBT_CfgLEDirectionFinding"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_.get_function_pointer("RFmxBT_CfgMechanicalAttenuation"));
  function_pointers_.CfgPacketType = reinterpret_cast<CfgPacketTypePtr>(shared_library_.get_function_pointer("RFmxBT_CfgPacketType"));
  function_pointers_.CfgPayloadBitPattern = reinterpret_cast<CfgPayloadBitPatternPtr>(shared_library_.get_function_pointer("RFmxBT_CfgPayloadBitPattern"));
  function_pointers_.CfgPayloadLength = reinterpret_cast<CfgPayloadLengthPtr>(shared_library_.get_function_pointer("RFmxBT_CfgPayloadLength"));
  function_pointers_.CfgRF = reinterpret_cast<CfgRFPtr>(shared_library_.get_function_pointer("RFmxBT_CfgRF"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_.get_function_pointer("RFmxBT_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxBT_CfgReferenceLevel"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxBT_CfgSoftwareEdgeTrigger"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxBT_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_.get_function_pointer("RFmxBT_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_.get_function_pointer("RFmxBT_ClearNamedResult"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxBT_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("RFmxBT_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("RFmxBT_Commit"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxBT_CreateSignalConfiguration"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxBT_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_.get_function_pointer("RFmxBT_DisableTrigger"));
  function_pointers_.FrequencyRangeCfgAveraging = reinterpret_cast<FrequencyRangeCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxBT_FrequencyRangeCfgAveraging"));
  function_pointers_.FrequencyRangeCfgSpan = reinterpret_cast<FrequencyRangeCfgSpanPtr>(shared_library_.get_function_pointer("RFmxBT_FrequencyRangeCfgSpan"));
  function_pointers_.FrequencyRangeFetchMeasurement = reinterpret_cast<FrequencyRangeFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxBT_FrequencyRangeFetchMeasurement"));
  function_pointers_.FrequencyRangeFetchSpectrum = reinterpret_cast<FrequencyRangeFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxBT_FrequencyRangeFetchSpectrum"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_.get_function_pointer("RFmxBT_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxBT_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxBT_GetErrorString"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("RFmxBT_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_.get_function_pointer("RFmxBT_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("RFmxBT_Initiate"));
  function_pointers_.ModAccCfgAveraging = reinterpret_cast<ModAccCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccCfgAveraging"));
  function_pointers_.ModAccCfgBurstSynchronizationType = reinterpret_cast<ModAccCfgBurstSynchronizationTypePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccCfgBurstSynchronizationType"));
  function_pointers_.ModAccFetchConstellationTrace = reinterpret_cast<ModAccFetchConstellationTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchConstellationTrace"));
  function_pointers_.ModAccFetchDEVM = reinterpret_cast<ModAccFetchDEVMPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDEVM"));
  function_pointers_.ModAccFetchDEVMMagnitudeError = reinterpret_cast<ModAccFetchDEVMMagnitudeErrorPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDEVMMagnitudeError"));
  function_pointers_.ModAccFetchDEVMPerSymbolTrace = reinterpret_cast<ModAccFetchDEVMPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDEVMPerSymbolTrace"));
  function_pointers_.ModAccFetchDEVMPhaseError = reinterpret_cast<ModAccFetchDEVMPhaseErrorPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDEVMPhaseError"));
  function_pointers_.ModAccFetchDemodulatedBitTrace = reinterpret_cast<ModAccFetchDemodulatedBitTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDemodulatedBitTrace"));
  function_pointers_.ModAccFetchDf1 = reinterpret_cast<ModAccFetchDf1Ptr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDf1"));
  function_pointers_.ModAccFetchDf1maxTrace = reinterpret_cast<ModAccFetchDf1maxTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDf1maxTrace"));
  function_pointers_.ModAccFetchDf2 = reinterpret_cast<ModAccFetchDf2Ptr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDf2"));
  function_pointers_.ModAccFetchDf2maxTrace = reinterpret_cast<ModAccFetchDf2maxTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchDf2maxTrace"));
  function_pointers_.ModAccFetchFrequencyErrorBR = reinterpret_cast<ModAccFetchFrequencyErrorBRPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyErrorBR"));
  function_pointers_.ModAccFetchFrequencyErrorEDR = reinterpret_cast<ModAccFetchFrequencyErrorEDRPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyErrorEDR"));
  function_pointers_.ModAccFetchFrequencyErrorLE = reinterpret_cast<ModAccFetchFrequencyErrorLEPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyErrorLE"));
  function_pointers_.ModAccFetchFrequencyErrorTraceBR = reinterpret_cast<ModAccFetchFrequencyErrorTraceBRPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyErrorTraceBR"));
  function_pointers_.ModAccFetchFrequencyErrorTraceLE = reinterpret_cast<ModAccFetchFrequencyErrorTraceLEPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyErrorTraceLE"));
  function_pointers_.ModAccFetchFrequencyErrorWiPlusW0TraceEDR = reinterpret_cast<ModAccFetchFrequencyErrorWiPlusW0TraceEDRPtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyErrorWiPlusW0TraceEDR"));
  function_pointers_.ModAccFetchFrequencyTrace = reinterpret_cast<ModAccFetchFrequencyTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchFrequencyTrace"));
  function_pointers_.ModAccFetchRMSDEVMTrace = reinterpret_cast<ModAccFetchRMSDEVMTracePtr>(shared_library_.get_function_pointer("RFmxBT_ModAccFetchRMSDEVMTrace"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("RFmxBT_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_.get_function_pointer("RFmxBT_ResetToDefault"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_.get_function_pointer("RFmxBT_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxBT_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxBT_SetAttributeU8Array"));
  function_pointers_.TXPCfgAveraging = reinterpret_cast<TXPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxBT_TXPCfgAveraging"));
  function_pointers_.TXPCfgBurstSynchronizationType = reinterpret_cast<TXPCfgBurstSynchronizationTypePtr>(shared_library_.get_function_pointer("RFmxBT_TXPCfgBurstSynchronizationType"));
  function_pointers_.TXPFetchEDRPowers = reinterpret_cast<TXPFetchEDRPowersPtr>(shared_library_.get_function_pointer("RFmxBT_TXPFetchEDRPowers"));
  function_pointers_.TXPFetchLECTEReferencePeriodPowers = reinterpret_cast<TXPFetchLECTEReferencePeriodPowersPtr>(shared_library_.get_function_pointer("RFmxBT_TXPFetchLECTEReferencePeriodPowers"));
  function_pointers_.TXPFetchLECTETransmitSlotPowers = reinterpret_cast<TXPFetchLECTETransmitSlotPowersPtr>(shared_library_.get_function_pointer("RFmxBT_TXPFetchLECTETransmitSlotPowers"));
  function_pointers_.TXPFetchLECTETransmitSlotPowersArray = reinterpret_cast<TXPFetchLECTETransmitSlotPowersArrayPtr>(shared_library_.get_function_pointer("RFmxBT_TXPFetchLECTETransmitSlotPowersArray"));
  function_pointers_.TXPFetchPowerTrace = reinterpret_cast<TXPFetchPowerTracePtr>(shared_library_.get_function_pointer("RFmxBT_TXPFetchPowerTrace"));
  function_pointers_.TXPFetchPowers = reinterpret_cast<TXPFetchPowersPtr>(shared_library_.get_function_pointer("RFmxBT_TXPFetchPowers"));
  function_pointers_.TwentydBBandwidthCfgAveraging = reinterpret_cast<TwentydBBandwidthCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxBT_20dBBandwidthCfgAveraging"));
  function_pointers_.TwentydBBandwidthFetchMeasurement = reinterpret_cast<TwentydBBandwidthFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxBT_20dBBandwidthFetchMeasurement"));
  function_pointers_.TwentydBBandwidthFetchSpectrum = reinterpret_cast<TwentydBBandwidthFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxBT_20dBBandwidthFetchSpectrum"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_.get_function_pointer("RFmxBT_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_.get_function_pointer("RFmxBT_WaitForMeasurementComplete"));
}

NiRFmxBluetoothLibrary::~NiRFmxBluetoothLibrary()
{
}

::grpc::Status NiRFmxBluetoothLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxBluetoothLibrary::ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.ACPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPCfgAveraging.");
  }
  return function_pointers_.ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxBluetoothLibrary::ACPCfgBurstSynchronizationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstSynchronizationType)
{
  if (!function_pointers_.ACPCfgBurstSynchronizationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPCfgBurstSynchronizationType.");
  }
  return function_pointers_.ACPCfgBurstSynchronizationType(instrumentHandle, selectorString, burstSynchronizationType);
}

int32 NiRFmxBluetoothLibrary::ACPCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPCfgNumberOfOffsets.");
  }
  return function_pointers_.ACPCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 NiRFmxBluetoothLibrary::ACPCfgOffsetChannelMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetChannelMode)
{
  if (!function_pointers_.ACPCfgOffsetChannelMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPCfgOffsetChannelMode.");
  }
  return function_pointers_.ACPCfgOffsetChannelMode(instrumentHandle, selectorString, offsetChannelMode);
}

int32 NiRFmxBluetoothLibrary::ACPFetchAbsolutePowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absolutePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchAbsolutePowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchAbsolutePowerTrace.");
  }
  return function_pointers_.ACPFetchAbsolutePowerTrace(instrumentHandle, selectorString, timeout, x0, dx, absolutePower, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ACPFetchMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 limitWithExceptionMask[], float32 limitWithoutExceptionMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchMaskTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchMaskTrace.");
  }
  return function_pointers_.ACPFetchMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, limitWithExceptionMask, limitWithoutExceptionMask, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ACPFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  if (!function_pointers_.ACPFetchMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchMeasurementStatus.");
  }
  return function_pointers_.ACPFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 NiRFmxBluetoothLibrary::ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerAbsolutePower, float64* upperAbsolutePower, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerMargin, float64* upperMargin)
{
  if (!function_pointers_.ACPFetchOffsetMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchOffsetMeasurement.");
  }
  return function_pointers_.ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerAbsolutePower, upperAbsolutePower, lowerRelativePower, upperRelativePower, lowerMargin, upperMargin);
}

int32 NiRFmxBluetoothLibrary::ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerAbsolutePower[], float64 upperAbsolutePower[], float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerMargin[], float64 upperMargin[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchOffsetMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchOffsetMeasurementArray.");
  }
  return function_pointers_.ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerAbsolutePower, upperAbsolutePower, lowerRelativePower, upperRelativePower, lowerMargin, upperMargin, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ACPFetchReferenceChannelPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* referenceChannelPower)
{
  if (!function_pointers_.ACPFetchReferenceChannelPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchReferenceChannelPower.");
  }
  return function_pointers_.ACPFetchReferenceChannelPower(instrumentHandle, selectorString, timeout, referenceChannelPower);
}

int32 NiRFmxBluetoothLibrary::ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ACPFetchSpectrum.");
  }
  return function_pointers_.ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_AbortMeasurements.");
  }
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
}

int32 NiRFmxBluetoothLibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_AnalyzeIQ1Waveform.");
  }
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 NiRFmxBluetoothLibrary::AutoDetectSignal(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.AutoDetectSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_AutoDetectSignal.");
  }
  return function_pointers_.AutoDetectSignal(instrumentHandle, selectorString, timeout);
}

int32 NiRFmxBluetoothLibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_AutoLevel.");
  }
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, measurementInterval, referenceLevel);
}

int32 NiRFmxBluetoothLibrary::BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildOffsetString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_BuildOffsetString.");
  }
  return function_pointers_.BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxBluetoothLibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_BuildSignalString.");
  }
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 NiRFmxBluetoothLibrary::BuildSlotString(char selectorString[], int32 slotNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSlotString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_BuildSlotString.");
  }
  return function_pointers_.BuildSlotString(selectorString, slotNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxBluetoothLibrary::CfgChannelNumber(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelNumber)
{
  if (!function_pointers_.CfgChannelNumber) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgChannelNumber.");
  }
  return function_pointers_.CfgChannelNumber(instrumentHandle, selectorString, channelNumber);
}

int32 NiRFmxBluetoothLibrary::CfgDataRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dataRate)
{
  if (!function_pointers_.CfgDataRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgDataRate.");
  }
  return function_pointers_.CfgDataRate(instrumentHandle, selectorString, dataRate);
}

int32 NiRFmxBluetoothLibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgDigitalEdgeTrigger.");
  }
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 NiRFmxBluetoothLibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgExternalAttenuation.");
  }
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 NiRFmxBluetoothLibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgFrequency.");
  }
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 NiRFmxBluetoothLibrary::CfgFrequencyChannelNumber(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 standard, int32 channelNumber)
{
  if (!function_pointers_.CfgFrequencyChannelNumber) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgFrequencyChannelNumber.");
  }
  return function_pointers_.CfgFrequencyChannelNumber(instrumentHandle, selectorString, standard, channelNumber);
}

int32 NiRFmxBluetoothLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgFrequencyReference.");
  }
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 NiRFmxBluetoothLibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgIQPowerEdgeTrigger.");
  }
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
}

int32 NiRFmxBluetoothLibrary::CfgLEDirectionFinding(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 directionFindingMode, float64 cteLength, float64 cteSlotDuration)
{
  if (!function_pointers_.CfgLEDirectionFinding) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgLEDirectionFinding.");
  }
  return function_pointers_.CfgLEDirectionFinding(instrumentHandle, selectorString, directionFindingMode, cteLength, cteSlotDuration);
}

int32 NiRFmxBluetoothLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgMechanicalAttenuation.");
  }
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 NiRFmxBluetoothLibrary::CfgPacketType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 packetType)
{
  if (!function_pointers_.CfgPacketType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgPacketType.");
  }
  return function_pointers_.CfgPacketType(instrumentHandle, selectorString, packetType);
}

int32 NiRFmxBluetoothLibrary::CfgPayloadBitPattern(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 payloadBitPattern)
{
  if (!function_pointers_.CfgPayloadBitPattern) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgPayloadBitPattern.");
  }
  return function_pointers_.CfgPayloadBitPattern(instrumentHandle, selectorString, payloadBitPattern);
}

int32 NiRFmxBluetoothLibrary::CfgPayloadLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 payloadLengthMode, int32 payloadLength)
{
  if (!function_pointers_.CfgPayloadLength) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgPayloadLength.");
  }
  return function_pointers_.CfgPayloadLength(instrumentHandle, selectorString, payloadLengthMode, payloadLength);
}

int32 NiRFmxBluetoothLibrary::CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  if (!function_pointers_.CfgRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgRF.");
  }
  return function_pointers_.CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
}

int32 NiRFmxBluetoothLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgRFAttenuation.");
  }
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 NiRFmxBluetoothLibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgReferenceLevel.");
  }
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 NiRFmxBluetoothLibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CfgSoftwareEdgeTrigger.");
  }
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 NiRFmxBluetoothLibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CheckMeasurementStatus.");
  }
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 NiRFmxBluetoothLibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ClearAllNamedResults.");
  }
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 NiRFmxBluetoothLibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ClearNamedResult.");
  }
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
}

int32 NiRFmxBluetoothLibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CloneSignalConfiguration.");
  }
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 NiRFmxBluetoothLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_Close.");
  }
  return function_pointers_.Close(instrumentHandle, forceDestroy);
}

int32 NiRFmxBluetoothLibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_Commit.");
  }
  return function_pointers_.Commit(instrumentHandle, selectorString);
}

int32 NiRFmxBluetoothLibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_CreateSignalConfiguration.");
  }
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxBluetoothLibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_DeleteSignalConfiguration.");
  }
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxBluetoothLibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_DisableTrigger.");
  }
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
}

int32 NiRFmxBluetoothLibrary::FrequencyRangeCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.FrequencyRangeCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_FrequencyRangeCfgAveraging.");
  }
  return function_pointers_.FrequencyRangeCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxBluetoothLibrary::FrequencyRangeCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  if (!function_pointers_.FrequencyRangeCfgSpan) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_FrequencyRangeCfgSpan.");
  }
  return function_pointers_.FrequencyRangeCfgSpan(instrumentHandle, selectorString, span);
}

int32 NiRFmxBluetoothLibrary::FrequencyRangeFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* highFrequency, float64* lowFrequency)
{
  if (!function_pointers_.FrequencyRangeFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_FrequencyRangeFetchMeasurement.");
  }
  return function_pointers_.FrequencyRangeFetchMeasurement(instrumentHandle, selectorString, timeout, highFrequency, lowFrequency);
}

int32 NiRFmxBluetoothLibrary::FrequencyRangeFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.FrequencyRangeFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_FrequencyRangeFetchSpectrum.");
  }
  return function_pointers_.FrequencyRangeFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAllNamedResultNames.");
  }
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 NiRFmxBluetoothLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeF32.");
  }
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeF32Array.");
  }
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeF64.");
  }
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeF64Array.");
  }
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI16.");
  }
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI32.");
  }
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI32Array.");
  }
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI64.");
  }
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI64Array.");
  }
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI8.");
  }
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeI8Array.");
  }
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeString.");
  }
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeU16.");
  }
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeU32.");
  }
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeU32Array.");
  }
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeU64Array.");
  }
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeU8.");
  }
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetAttributeU8Array.");
  }
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxBluetoothLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxBluetoothLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_Initialize.");
  }
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 NiRFmxBluetoothLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_InitializeFromNIRFSASession.");
  }
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 NiRFmxBluetoothLibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_Initiate.");
  }
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
}

int32 NiRFmxBluetoothLibrary::ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.ModAccCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccCfgAveraging.");
  }
  return function_pointers_.ModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxBluetoothLibrary::ModAccCfgBurstSynchronizationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstSynchronizationType)
{
  if (!function_pointers_.ModAccCfgBurstSynchronizationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccCfgBurstSynchronizationType.");
  }
  return function_pointers_.ModAccCfgBurstSynchronizationType(instrumentHandle, selectorString, burstSynchronizationType);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchConstellationTrace.");
  }
  return function_pointers_.ModAccFetchConstellationTrace(instrumentHandle, selectorString, timeout, constellation, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakRMSDEVMMaximum, float64* peakDEVMMaximum, float64* ninetyninePercentDEVM)
{
  if (!function_pointers_.ModAccFetchDEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDEVM.");
  }
  return function_pointers_.ModAccFetchDEVM(instrumentHandle, selectorString, timeout, peakRMSDEVMMaximum, peakDEVMMaximum, ninetyninePercentDEVM);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDEVMMagnitudeError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRMSMagnitudeErrorMean, float64* peakRMSMagnitudeErrorMaximum)
{
  if (!function_pointers_.ModAccFetchDEVMMagnitudeError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDEVMMagnitudeError.");
  }
  return function_pointers_.ModAccFetchDEVMMagnitudeError(instrumentHandle, selectorString, timeout, averageRMSMagnitudeErrorMean, peakRMSMagnitudeErrorMaximum);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 devmPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDEVMPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDEVMPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchDEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, devmPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDEVMPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRMSPhaseErrorMean, float64* peakRMSPhaseErrorMaximum)
{
  if (!function_pointers_.ModAccFetchDEVMPhaseError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDEVMPhaseError.");
  }
  return function_pointers_.ModAccFetchDEVMPhaseError(instrumentHandle, selectorString, timeout, averageRMSPhaseErrorMean, peakRMSPhaseErrorMaximum);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDemodulatedBitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 demodulatedBits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDemodulatedBitTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDemodulatedBitTrace.");
  }
  return function_pointers_.ModAccFetchDemodulatedBitTrace(instrumentHandle, selectorString, timeout, demodulatedBits, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDf1(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* df1avgMaximum, float64* df1avgMinimum)
{
  if (!function_pointers_.ModAccFetchDf1) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDf1.");
  }
  return function_pointers_.ModAccFetchDf1(instrumentHandle, selectorString, timeout, df1avgMaximum, df1avgMinimum);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDf1maxTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 time[], float32 df1max[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDf1maxTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDf1maxTrace.");
  }
  return function_pointers_.ModAccFetchDf1maxTrace(instrumentHandle, selectorString, timeout, time, df1max, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDf2(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* df2avgMinimum, float64* percentageOfSymbolsAboveDf2maxThreshold)
{
  if (!function_pointers_.ModAccFetchDf2) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDf2.");
  }
  return function_pointers_.ModAccFetchDf2(instrumentHandle, selectorString, timeout, df2avgMinimum, percentageOfSymbolsAboveDf2maxThreshold);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchDf2maxTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 time[], float32 df2max[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDf2maxTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchDf2maxTrace.");
  }
  return function_pointers_.ModAccFetchDf2maxTrace(instrumentHandle, selectorString, timeout, time, df2max, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyErrorBR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* initialFrequencyErrorMaximum, float64* peakFrequencyDriftMaximum, float64* peakFrequencyDriftRateMaximum)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorBR) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyErrorBR.");
  }
  return function_pointers_.ModAccFetchFrequencyErrorBR(instrumentHandle, selectorString, timeout, initialFrequencyErrorMaximum, peakFrequencyDriftMaximum, peakFrequencyDriftRateMaximum);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyErrorEDR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* headerFrequencyErrorWiMaximum, float64* peakFrequencyErrorWiPlusW0Maximum, float64* peakFrequencyErrorW0Maximum)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorEDR) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyErrorEDR.");
  }
  return function_pointers_.ModAccFetchFrequencyErrorEDR(instrumentHandle, selectorString, timeout, headerFrequencyErrorWiMaximum, peakFrequencyErrorWiPlusW0Maximum, peakFrequencyErrorW0Maximum);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyErrorLE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakFrequencyErrorMaximum, float64* initialFrequencyDriftMaximum, float64* peakFrequencyDriftMaximum, float64* peakFrequencyDriftRateMaximum)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorLE) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyErrorLE.");
  }
  return function_pointers_.ModAccFetchFrequencyErrorLE(instrumentHandle, selectorString, timeout, peakFrequencyErrorMaximum, initialFrequencyDriftMaximum, peakFrequencyDriftMaximum, peakFrequencyDriftRateMaximum);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyErrorTraceBR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 time[], float32 frequencyError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorTraceBR) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyErrorTraceBR.");
  }
  return function_pointers_.ModAccFetchFrequencyErrorTraceBR(instrumentHandle, selectorString, timeout, time, frequencyError, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyErrorTraceLE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 time[], float32 frequencyError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorTraceLE) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyErrorTraceLE.");
  }
  return function_pointers_.ModAccFetchFrequencyErrorTraceLE(instrumentHandle, selectorString, timeout, time, frequencyError, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyErrorWiPlusW0TraceEDR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 time[], float32 frequencyErrorWiPlusW0[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchFrequencyErrorWiPlusW0TraceEDR) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyErrorWiPlusW0TraceEDR.");
  }
  return function_pointers_.ModAccFetchFrequencyErrorWiPlusW0TraceEDR(instrumentHandle, selectorString, timeout, time, frequencyErrorWiPlusW0, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchFrequencyTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequency[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchFrequencyTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchFrequencyTrace.");
  }
  return function_pointers_.ModAccFetchFrequencyTrace(instrumentHandle, selectorString, timeout, x0, dx, frequency, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ModAccFetchRMSDEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 rmsdevm[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSDEVMTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ModAccFetchRMSDEVMTrace.");
  }
  return function_pointers_.ModAccFetchRMSDEVMTrace(instrumentHandle, selectorString, timeout, rmsdevm, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 NiRFmxBluetoothLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_ResetToDefault.");
  }
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
}

int32 NiRFmxBluetoothLibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SelectMeasurements.");
  }
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 NiRFmxBluetoothLibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 NiRFmxBluetoothLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeF32.");
  }
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeF32Array.");
  }
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeF64.");
  }
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeF64Array.");
  }
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI16.");
  }
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI32.");
  }
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI32Array.");
  }
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI64.");
  }
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI64Array.");
  }
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI8.");
  }
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeI8Array.");
  }
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeString.");
  }
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeU16.");
  }
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeU32.");
  }
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeU32Array.");
  }
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeU64Array.");
  }
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeU8.");
  }
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxBluetoothLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_SetAttributeU8Array.");
  }
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxBluetoothLibrary::TXPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.TXPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPCfgAveraging.");
  }
  return function_pointers_.TXPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxBluetoothLibrary::TXPCfgBurstSynchronizationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 burstSynchronizationType)
{
  if (!function_pointers_.TXPCfgBurstSynchronizationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPCfgBurstSynchronizationType.");
  }
  return function_pointers_.TXPCfgBurstSynchronizationType(instrumentHandle, selectorString, burstSynchronizationType);
}

int32 NiRFmxBluetoothLibrary::TXPFetchEDRPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* edrgfskAveragePowerMean, float64* edrdpskAveragePowerMean, float64* edr_DPSK_GFSKAveragePowerRatioMean)
{
  if (!function_pointers_.TXPFetchEDRPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPFetchEDRPowers.");
  }
  return function_pointers_.TXPFetchEDRPowers(instrumentHandle, selectorString, timeout, edrgfskAveragePowerMean, edrdpskAveragePowerMean, edr_DPSK_GFSKAveragePowerRatioMean);
}

int32 NiRFmxBluetoothLibrary::TXPFetchLECTEReferencePeriodPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* referencePeriodAveragePowerMean, float64* referencePeriodPeakAbsolutePowerDeviationMaximum)
{
  if (!function_pointers_.TXPFetchLECTEReferencePeriodPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPFetchLECTEReferencePeriodPowers.");
  }
  return function_pointers_.TXPFetchLECTEReferencePeriodPowers(instrumentHandle, selectorString, timeout, referencePeriodAveragePowerMean, referencePeriodPeakAbsolutePowerDeviationMaximum);
}

int32 NiRFmxBluetoothLibrary::TXPFetchLECTETransmitSlotPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* transmitSlotAveragePowerMean, float64* transmitSlotPeakAbsolutePowerDeviationMaximum)
{
  if (!function_pointers_.TXPFetchLECTETransmitSlotPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPFetchLECTETransmitSlotPowers.");
  }
  return function_pointers_.TXPFetchLECTETransmitSlotPowers(instrumentHandle, selectorString, timeout, transmitSlotAveragePowerMean, transmitSlotPeakAbsolutePowerDeviationMaximum);
}

int32 NiRFmxBluetoothLibrary::TXPFetchLECTETransmitSlotPowersArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 transmitSlotAveragePowerMean[], float64 transmitSlotPeakAbsolutePowerDeviationMaximum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.TXPFetchLECTETransmitSlotPowersArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPFetchLECTETransmitSlotPowersArray.");
  }
  return function_pointers_.TXPFetchLECTETransmitSlotPowersArray(instrumentHandle, selectorString, timeout, transmitSlotAveragePowerMean, transmitSlotPeakAbsolutePowerDeviationMaximum, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.TXPFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPFetchPowerTrace.");
  }
  return function_pointers_.TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::TXPFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averagePowerMean, float64* averagePowerMaximum, float64* averagePowerMinimum, float64* peakToAveragePowerRatioMaximum)
{
  if (!function_pointers_.TXPFetchPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_TXPFetchPowers.");
  }
  return function_pointers_.TXPFetchPowers(instrumentHandle, selectorString, timeout, averagePowerMean, averagePowerMaximum, averagePowerMinimum, peakToAveragePowerRatioMaximum);
}

int32 NiRFmxBluetoothLibrary::TwentydBBandwidthCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.TwentydBBandwidthCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_20dBBandwidthCfgAveraging.");
  }
  return function_pointers_.TwentydBBandwidthCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxBluetoothLibrary::TwentydBBandwidthFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakPower, float64* bandwidth, float64* highFrequency, float64* lowFrequency)
{
  if (!function_pointers_.TwentydBBandwidthFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_20dBBandwidthFetchMeasurement.");
  }
  return function_pointers_.TwentydBBandwidthFetchMeasurement(instrumentHandle, selectorString, timeout, peakPower, bandwidth, highFrequency, lowFrequency);
}

int32 NiRFmxBluetoothLibrary::TwentydBBandwidthFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.TwentydBBandwidthFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_20dBBandwidthFetchSpectrum.");
  }
  return function_pointers_.TwentydBBandwidthFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 NiRFmxBluetoothLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_WaitForAcquisitionComplete.");
  }
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 NiRFmxBluetoothLibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxBT_WaitForMeasurementComplete.");
  }
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxbluetooth_grpc
