
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-DMM-RESTRICTED.
//---------------------------------------------------------------------
#include "nidmm_restricted_client.h"

#include <grpcpp/grpcpp.h>

#include <nidmm_restricted.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nidmm_restricted_grpc::experimental::client {

AttributeWasSetByUserResponse
attribute_was_set_by_user(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& rep_cap_name, const pb::int32& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = AttributeWasSetByUserRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_rep_cap_name(rep_cap_name);
  request.set_attribute_id(attribute_id);

  auto response = AttributeWasSetByUserResponse{};

  raise_if_error(
      stub->AttributeWasSetByUser(&context, request, &response),
      context);

  return response;
}

CachedReadStatusResponse
cached_read_status(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CachedReadStatusRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CachedReadStatusResponse{};

  raise_if_error(
      stub->CachedReadStatus(&context, request, &response),
      context);

  return response;
}

FetchMultiPointWithCachingResponse
fetch_multi_point_with_caching(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& max_time, const pb::int32& array_size, const bool& is_monitoring)
{
  ::grpc::ClientContext context;

  auto request = FetchMultiPointWithCachingRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_max_time(max_time);
  request.set_array_size(array_size);
  request.set_is_monitoring(is_monitoring);

  auto response = FetchMultiPointWithCachingResponse{};

  raise_if_error(
      stub->FetchMultiPointWithCaching(&context, request, &response),
      context);

  return response;
}

GetOpenSessionsInformationResponse
get_open_sessions_information(const StubPtr& stub, const std::string& resource_name, const std::string& info_json, const pb::uint64& buffer_size)
{
  ::grpc::ClientContext context;

  auto request = GetOpenSessionsInformationRequest{};
  request.set_resource_name(resource_name);
  request.set_info_json(info_json);
  request.set_buffer_size(buffer_size);

  auto response = GetOpenSessionsInformationResponse{};

  raise_if_error(
      stub->GetOpenSessionsInformation(&context, request, &response),
      context);

  return response;
}

RequestPrivilegeResponse
request_privilege(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<PrivilegeLevel, pb::int32>& privilege_level)
{
  ::grpc::ClientContext context;

  auto request = RequestPrivilegeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto privilege_level_ptr = privilege_level.get_if<PrivilegeLevel>();
  const auto privilege_level_raw_ptr = privilege_level.get_if<pb::int32>();
  if (privilege_level_ptr) {
    request.set_privilege_level(*privilege_level_ptr);
  }
  else if (privilege_level_raw_ptr) {
    request.set_privilege_level_raw(*privilege_level_raw_ptr);
  }

  auto response = RequestPrivilegeResponse{};

  raise_if_error(
      stub->RequestPrivilege(&context, request, &response),
      context);

  return response;
}


} // namespace nidmm_restricted_grpc::experimental::client
