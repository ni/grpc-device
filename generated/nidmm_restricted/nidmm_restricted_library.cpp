//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-DMM-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nidmm_restricted_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "nidmm_64.dll";
#else
static const char* kLibraryName = "libnidmm.so";
#endif

namespace nidmm_restricted_grpc {

NiDmmRestrictedLibrary::NiDmmRestrictedLibrary() : NiDmmRestrictedLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

NiDmmRestrictedLibrary::NiDmmRestrictedLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AttributeWasSetByUser = reinterpret_cast<AttributeWasSetByUserPtr>(shared_library_->get_function_pointer("niDMM_AttributeWasSetByUser"));
  function_pointers_.CachedReadStatus = reinterpret_cast<CachedReadStatusPtr>(shared_library_->get_function_pointer("niDMM_CachedReadStatus"));
  function_pointers_.FetchMultiPointWithCaching = reinterpret_cast<FetchMultiPointWithCachingPtr>(shared_library_->get_function_pointer("niDMM_FetchMultiPointWithCaching"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_->get_function_pointer("niDMM_GetError"));
  function_pointers_.GetErrorMessage = reinterpret_cast<GetErrorMessagePtr>(shared_library_->get_function_pointer("niDMM_GetErrorMessage"));
  function_pointers_.GetOpenSessionsInformation = reinterpret_cast<GetOpenSessionsInformationPtr>(shared_library_->get_function_pointer("niDMM_GetOpenSessionsInformation"));
  function_pointers_.RequestPrivilege = reinterpret_cast<RequestPrivilegePtr>(shared_library_->get_function_pointer("niDMM_RequestPrivilege"));
}

NiDmmRestrictedLibrary::~NiDmmRestrictedLibrary()
{
}

::grpc::Status NiDmmRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViBoolean NiDmmRestrictedLibrary::AttributeWasSetByUser(ViSession vi, ViConstString repCapName, ViAttr attributeId)
{
  if (!function_pointers_.AttributeWasSetByUser) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_AttributeWasSetByUser.");
  }
  return function_pointers_.AttributeWasSetByUser(vi, repCapName, attributeId);
}

ViStatus NiDmmRestrictedLibrary::CachedReadStatus(ViSession vi, ViInt32* acqBacklog, ViInt16* acqStatus)
{
  if (!function_pointers_.CachedReadStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_CachedReadStatus.");
  }
  return function_pointers_.CachedReadStatus(vi, acqBacklog, acqStatus);
}

ViStatus NiDmmRestrictedLibrary::FetchMultiPointWithCaching(ViSession vi, ViInt32 maxTime, ViInt32 arraySize, ViReal64 readingArray[], ViInt32* actualPts, ViBoolean isMonitoring)
{
  if (!function_pointers_.FetchMultiPointWithCaching) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_FetchMultiPointWithCaching.");
  }
  return function_pointers_.FetchMultiPointWithCaching(vi, maxTime, arraySize, readingArray, actualPts, isMonitoring);
}

ViStatus NiDmmRestrictedLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 bufferSize, ViChar description[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetError.");
  }
  return function_pointers_.GetError(vi, errorCode, bufferSize, description);
}

ViStatus NiDmmRestrictedLibrary::GetErrorMessage(ViSession vi, ViStatus errorCode, ViInt32 bufferSize, ViChar errorMessage[])
{
  if (!function_pointers_.GetErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetErrorMessage.");
  }
  return function_pointers_.GetErrorMessage(vi, errorCode, bufferSize, errorMessage);
}

ViStatus NiDmmRestrictedLibrary::GetOpenSessionsInformation(ViRsrc resourceName, ViString infoJson, ViUInt64 bufferSize, ViUInt64* bufferSizeNeededInBytes)
{
  if (!function_pointers_.GetOpenSessionsInformation) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_GetOpenSessionsInformation.");
  }
  return function_pointers_.GetOpenSessionsInformation(resourceName, infoJson, bufferSize, bufferSizeNeededInBytes);
}

ViStatus NiDmmRestrictedLibrary::RequestPrivilege(ViSession vi, ViInt32 privilegeLevel)
{
  if (!function_pointers_.RequestPrivilege) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDMM_RequestPrivilege.");
  }
  return function_pointers_.RequestPrivilege(vi, privilegeLevel);
}

}  // namespace nidmm_restricted_grpc
