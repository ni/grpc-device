//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-rfmxtdscdma
//---------------------------------------------------------------------
#ifndef NIRFMXTDSCDMA_GRPC_LIBRARY_H
#define NIRFMXTDSCDMA_GRPC_LIBRARY_H

#include "nirfmxtdscdma_library_interface.h"

#include <server/shared_library.h>

namespace nirfmxtdscdma_grpc {

class NiRFmxTDSCDMALibrary : public nirfmxtdscdma_grpc::NiRFmxTDSCDMALibraryInterface {
 public:
  NiRFmxTDSCDMALibrary();
  virtual ~NiRFmxTDSCDMALibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod);
  int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled);
  int32 ACPCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets);
  int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType);
  int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchCarrierAbsolutePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower);
  int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower);
  int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize);
  int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize);
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved);
  int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved);
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel);
  int32 BuildChannelString(char selectorString[], int32 channelNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]);
  int32 CDACfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount);
  int32 CDACfgMeasurementChannel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spreadingFactor, int32 channelizationCode);
  int32 CDACfgPowerUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnit);
  int32 CDACfgSynchronizationModeAndOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset);
  int32 CDAFetchCodeDomainPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanTotalPower, float64* meanTotalActivePower, float64* meanActivePower, float64* maximumPeakActivePower, float64* meanInactivePower, float64* maximumPeakInactivePower);
  int32 CDAFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffset, float64* iqGainImbalance, float64* iqQuadratureError);
  int32 CDAFetchMaximumCodeDomainPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 maximumCodeDomainPowers[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMaximumSymbolEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 maximumSymbolEVM[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMaximumSymbolMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 maximumSymbolMagnitudeError[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMaximumSymbolPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 maximumSymbolPhaseError[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMeanCodeDomainPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 meanCodeDomainPowers[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMeanSymbolEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 meanSymbolEVM[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMeanSymbolMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 meanSymbolMagnitudeError[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchMeanSymbolPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 meanSymbolPhaseError[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchSymbolConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle symbolConstellation[], int32 arraySize, int32* actualArraySize);
  int32 CDAFetchSymbolEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSSymbolEVM, float64* maximumPeakSymbolEVM, float64* frequencyError, float64* chipRateError, float64* meanRMSSymbolMagnitudeError, float64* meanRMSSymbolPhaseError, float64* meanSymbolPower);
  int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType);
  int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 CHPFetchCarrierAbsolutePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower);
  int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize);
  int32 CfgChannelConfigurationMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelConfigurationMode);
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger);
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation);
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency);
  int32 CfgFrequencyChannelNumber(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelNumber);
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency);
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 minimumQuietTimeMode, float64 minimumQuietTime, int32 iqPowerEdgeLevelType, int32 enableTrigger);
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue);
  int32 CfgMidambleShift(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 midambleAutoDetectionMode, int32 maximumNumberOfUsers, int32 midambleShift);
  int32 CfgNumberOfChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfChannels);
  int32 CfgPilot(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 pilotCode);
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation);
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue);
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel);
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger);
  int32 CfgUplinkScramblingCode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkScramblingCode);
  int32 CfgUserDefinedChannel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 slotIndex, int32 channelType, int32 slotFormat, int32 modulationType, int32 channelizationCode);
  int32 CfgUserDefinedChannelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 slotIndex[], int32 channelType[], int32 slotFormat[], int32 modulationType[], int32 channelizationCode[], int32 numberOfElements);
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* done);
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]);
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy);
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]);
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]);
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists);
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal);
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal);
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal);
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal);
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal);
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal);
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]);
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal);
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal);
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal);
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession);
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut);
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]);
  int32 ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount);
  int32 ModAccCfgSlotType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 slotType);
  int32 ModAccCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength);
  int32 ModAccFetchCodeDomainErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 codeDomainError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchCompositeEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsCompositeEVM, float64* peakCompositeEVM, float64* compositeRho, float64* frequencyError, float64* chipRateError, float64* rmsCompositeMagnitudeError, float64* rmsCompositePhaseError);
  int32 ModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchDataActiveCDE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPeakDataActiveCDE, int32* peakDataActiveCDESpreadingFactor, int32* peakDataActiveCDECode, int32* peakDataActiveCDENumberOfChannels);
  int32 ModAccFetchDataCDE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPeakDataCDE, int32* peakDataCDESpreadingFactor, int32* peakDataCDECode);
  int32 ModAccFetchDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsDataEVM, float64* peakDataEVM, float64* dataRho, float64* rmsDataMagnitudeError, float64* rmsDataPhaseError);
  int32 ModAccFetchDataRCDE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPeakDataRCDE, int32* peakDataRCDESpreadingFactor, int32* peakDataRCDECode);
  int32 ModAccFetchDetectedChannel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedSlotIndex, int32* detectedSpreadingFactor, int32* detectedModulationType, int32* detectedChannelizationCode);
  int32 ModAccFetchDetectedChannelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedSlotIndex[], int32 detectedSpreadingFactor[], int32 detectedModulationType[], int32 detectedChannelizationCode[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffset, float64* iqGainImbalance, float64* iqQuadratureError);
  int32 ModAccFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchMaximumCodeDomainErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 maximumCodeDomainError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchMaximumEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVM[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchMaximumMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumMagnitudeError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchMaximumPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumPhaseError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchMidambleAndDataPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* midamblePower, float64* dataField1Power, float64* dataField2Power);
  int32 ModAccFetchMidambleEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsMidambleEVM, float64* peakMidambleEVM, float64* midambleRho, float64* rmsMidambleMagnitudeError, float64* rmsMidamblePhaseError);
  int32 ModAccFetchNumberOfDetectedChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfDetectedChannels);
  int32 ModAccFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize);
  int32 ModAccFetchPilotEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsPilotEVM, float64* peakPilotEVM, float64* pilotRho, float64* rmsPilotMagnitudeError, float64* rmsPilotPhaseError);
  int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType);
  int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency);
  int32 OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize);
  int32 PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 PVTCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod);
  int32 PVTFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus);
  int32 PVTFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanAbsoluteONPower, float64* meanAbsoluteOFFPower);
  int32 PVTFetchSegmentMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* segmentStatus, float64* segmentMargin, float64* segmentMarginTime, float64* segmentMeanAbsolutePower, float64* segmentMaximumAbsolutePower, float64* segmentMinimumAbsolutePower);
  int32 PVTFetchSegmentMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 segmentStatus[], float64 segmentMargin[], float64 segmentMarginTime[], float64 segmentMeanAbsolutePower[], float64 segmentMaximumAbsolutePower[], float64 segmentMinimumAbsolutePower[], int32 arraySize, int32* actualArraySize);
  int32 PVTFetchSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize);
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID);
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType);
  int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval);
  int32 SEMFetchCarrierAbsoluteIntegratedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsoluteIntegratedPower);
  int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower);
  int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower);
  int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus);
  int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 relativeMask[], float32 absoluteMask[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower);
  int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize);
  int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower);
  int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize);
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces);
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle);
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal);
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize);
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal);
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize);
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal);
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal);
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize);
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal);
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize);
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal);
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize);
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]);
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal);
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal);
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize);
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize);
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal);
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize);
  int32 SlotPowerCfgMeasurementLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementLength);
  int32 SlotPowerFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPower[], float64 slotPowerDelta[], int32 arraySize, int32* actualArraySize);
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout);
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout);

 private:
  using ACPCfgAveragingPtr = decltype(&RFmxTDSCDMA_ACPCfgAveraging);
  using ACPCfgMeasurementMethodPtr = decltype(&RFmxTDSCDMA_ACPCfgMeasurementMethod);
  using ACPCfgNoiseCompensationEnabledPtr = decltype(&RFmxTDSCDMA_ACPCfgNoiseCompensationEnabled);
  using ACPCfgNumberOfOffsetsPtr = decltype(&RFmxTDSCDMA_ACPCfgNumberOfOffsets);
  using ACPCfgRBWFilterPtr = decltype(&RFmxTDSCDMA_ACPCfgRBWFilter);
  using ACPCfgSweepTimePtr = decltype(&RFmxTDSCDMA_ACPCfgSweepTime);
  using ACPFetchAbsolutePowersTracePtr = decltype(&RFmxTDSCDMA_ACPFetchAbsolutePowersTrace);
  using ACPFetchCarrierAbsolutePowerPtr = decltype(&RFmxTDSCDMA_ACPFetchCarrierAbsolutePower);
  using ACPFetchOffsetMeasurementPtr = decltype(&RFmxTDSCDMA_ACPFetchOffsetMeasurement);
  using ACPFetchOffsetMeasurementArrayPtr = decltype(&RFmxTDSCDMA_ACPFetchOffsetMeasurementArray);
  using ACPFetchRelativePowersTracePtr = decltype(&RFmxTDSCDMA_ACPFetchRelativePowersTrace);
  using ACPFetchSpectrumPtr = decltype(&RFmxTDSCDMA_ACPFetchSpectrum);
  using AbortMeasurementsPtr = decltype(&RFmxTDSCDMA_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxTDSCDMA_AnalyzeIQ1Waveform);
  using AnalyzeSpectrum1WaveformPtr = decltype(&RFmxTDSCDMA_AnalyzeSpectrum1Waveform);
  using AutoLevelPtr = decltype(&RFmxTDSCDMA_AutoLevel);
  using BuildChannelStringPtr = decltype(&RFmxTDSCDMA_BuildChannelString);
  using BuildOffsetStringPtr = decltype(&RFmxTDSCDMA_BuildOffsetString);
  using BuildSegmentStringPtr = decltype(&RFmxTDSCDMA_BuildSegmentString);
  using BuildSignalStringPtr = decltype(&RFmxTDSCDMA_BuildSignalString);
  using CDACfgAveragingPtr = decltype(&RFmxTDSCDMA_CDACfgAveraging);
  using CDACfgMeasurementChannelPtr = decltype(&RFmxTDSCDMA_CDACfgMeasurementChannel);
  using CDACfgPowerUnitPtr = decltype(&RFmxTDSCDMA_CDACfgPowerUnit);
  using CDACfgSynchronizationModeAndOffsetPtr = decltype(&RFmxTDSCDMA_CDACfgSynchronizationModeAndOffset);
  using CDAFetchCodeDomainPowerPtr = decltype(&RFmxTDSCDMA_CDAFetchCodeDomainPower);
  using CDAFetchIQImpairmentsPtr = decltype(&RFmxTDSCDMA_CDAFetchIQImpairments);
  using CDAFetchMaximumCodeDomainPowerTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMaximumCodeDomainPowerTrace);
  using CDAFetchMaximumSymbolEVMTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMaximumSymbolEVMTrace);
  using CDAFetchMaximumSymbolMagnitudeErrorTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMaximumSymbolMagnitudeErrorTrace);
  using CDAFetchMaximumSymbolPhaseErrorTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMaximumSymbolPhaseErrorTrace);
  using CDAFetchMeanCodeDomainPowerTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMeanCodeDomainPowerTrace);
  using CDAFetchMeanSymbolEVMTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMeanSymbolEVMTrace);
  using CDAFetchMeanSymbolMagnitudeErrorTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMeanSymbolMagnitudeErrorTrace);
  using CDAFetchMeanSymbolPhaseErrorTracePtr = decltype(&RFmxTDSCDMA_CDAFetchMeanSymbolPhaseErrorTrace);
  using CDAFetchSymbolConstellationTracePtr = decltype(&RFmxTDSCDMA_CDAFetchSymbolConstellationTrace);
  using CDAFetchSymbolEVMPtr = decltype(&RFmxTDSCDMA_CDAFetchSymbolEVM);
  using CHPCfgAveragingPtr = decltype(&RFmxTDSCDMA_CHPCfgAveraging);
  using CHPCfgRBWFilterPtr = decltype(&RFmxTDSCDMA_CHPCfgRBWFilter);
  using CHPCfgSweepTimePtr = decltype(&RFmxTDSCDMA_CHPCfgSweepTime);
  using CHPFetchCarrierAbsolutePowerPtr = decltype(&RFmxTDSCDMA_CHPFetchCarrierAbsolutePower);
  using CHPFetchSpectrumPtr = decltype(&RFmxTDSCDMA_CHPFetchSpectrum);
  using CfgChannelConfigurationModePtr = decltype(&RFmxTDSCDMA_CfgChannelConfigurationMode);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxTDSCDMA_CfgDigitalEdgeTrigger);
  using CfgExternalAttenuationPtr = decltype(&RFmxTDSCDMA_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxTDSCDMA_CfgFrequency);
  using CfgFrequencyChannelNumberPtr = decltype(&RFmxTDSCDMA_CfgFrequencyChannelNumber);
  using CfgFrequencyReferencePtr = decltype(&RFmxTDSCDMA_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxTDSCDMA_CfgIQPowerEdgeTrigger);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxTDSCDMA_CfgMechanicalAttenuation);
  using CfgMidambleShiftPtr = decltype(&RFmxTDSCDMA_CfgMidambleShift);
  using CfgNumberOfChannelsPtr = decltype(&RFmxTDSCDMA_CfgNumberOfChannels);
  using CfgPilotPtr = decltype(&RFmxTDSCDMA_CfgPilot);
  using CfgRFPtr = decltype(&RFmxTDSCDMA_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxTDSCDMA_CfgRFAttenuation);
  using CfgReferenceLevelPtr = decltype(&RFmxTDSCDMA_CfgReferenceLevel);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxTDSCDMA_CfgSoftwareEdgeTrigger);
  using CfgUplinkScramblingCodePtr = decltype(&RFmxTDSCDMA_CfgUplinkScramblingCode);
  using CfgUserDefinedChannelPtr = decltype(&RFmxTDSCDMA_CfgUserDefinedChannel);
  using CfgUserDefinedChannelArrayPtr = decltype(&RFmxTDSCDMA_CfgUserDefinedChannelArray);
  using CheckMeasurementStatusPtr = decltype(&RFmxTDSCDMA_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxTDSCDMA_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxTDSCDMA_ClearNamedResult);
  using CloneSignalConfigurationPtr = decltype(&RFmxTDSCDMA_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxTDSCDMA_Close);
  using CommitPtr = decltype(&RFmxTDSCDMA_Commit);
  using CreateSignalConfigurationPtr = decltype(&RFmxTDSCDMA_CreateSignalConfiguration);
  using DeleteSignalConfigurationPtr = decltype(&RFmxTDSCDMA_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxTDSCDMA_DisableTrigger);
  using GetAllNamedResultNamesPtr = decltype(&RFmxTDSCDMA_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxTDSCDMA_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxTDSCDMA_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxTDSCDMA_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxTDSCDMA_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxTDSCDMA_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxTDSCDMA_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxTDSCDMA_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxTDSCDMA_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxTDSCDMA_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxTDSCDMA_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxTDSCDMA_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxTDSCDMA_GetError);
  using GetErrorStringPtr = decltype(&RFmxTDSCDMA_GetErrorString);
  using InitializePtr = decltype(&RFmxTDSCDMA_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxTDSCDMA_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxTDSCDMA_Initiate);
  using ModAccCfgAveragingPtr = decltype(&RFmxTDSCDMA_ModAccCfgAveraging);
  using ModAccCfgSlotTypePtr = decltype(&RFmxTDSCDMA_ModAccCfgSlotType);
  using ModAccCfgSynchronizationModeAndIntervalPtr = decltype(&RFmxTDSCDMA_ModAccCfgSynchronizationModeAndInterval);
  using ModAccFetchCodeDomainErrorTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchCodeDomainErrorTrace);
  using ModAccFetchCompositeEVMPtr = decltype(&RFmxTDSCDMA_ModAccFetchCompositeEVM);
  using ModAccFetchConstellationTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchConstellationTrace);
  using ModAccFetchDataActiveCDEPtr = decltype(&RFmxTDSCDMA_ModAccFetchDataActiveCDE);
  using ModAccFetchDataCDEPtr = decltype(&RFmxTDSCDMA_ModAccFetchDataCDE);
  using ModAccFetchDataEVMPtr = decltype(&RFmxTDSCDMA_ModAccFetchDataEVM);
  using ModAccFetchDataRCDEPtr = decltype(&RFmxTDSCDMA_ModAccFetchDataRCDE);
  using ModAccFetchDetectedChannelPtr = decltype(&RFmxTDSCDMA_ModAccFetchDetectedChannel);
  using ModAccFetchDetectedChannelArrayPtr = decltype(&RFmxTDSCDMA_ModAccFetchDetectedChannelArray);
  using ModAccFetchEVMTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchEVMTrace);
  using ModAccFetchIQImpairmentsPtr = decltype(&RFmxTDSCDMA_ModAccFetchIQImpairments);
  using ModAccFetchMagnitudeErrorTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchMagnitudeErrorTrace);
  using ModAccFetchMaximumCodeDomainErrorTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchMaximumCodeDomainErrorTrace);
  using ModAccFetchMaximumEVMTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchMaximumEVMTrace);
  using ModAccFetchMaximumMagnitudeErrorTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchMaximumMagnitudeErrorTrace);
  using ModAccFetchMaximumPhaseErrorTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchMaximumPhaseErrorTrace);
  using ModAccFetchMidambleAndDataPowerPtr = decltype(&RFmxTDSCDMA_ModAccFetchMidambleAndDataPower);
  using ModAccFetchMidambleEVMPtr = decltype(&RFmxTDSCDMA_ModAccFetchMidambleEVM);
  using ModAccFetchNumberOfDetectedChannelsPtr = decltype(&RFmxTDSCDMA_ModAccFetchNumberOfDetectedChannels);
  using ModAccFetchPhaseErrorTracePtr = decltype(&RFmxTDSCDMA_ModAccFetchPhaseErrorTrace);
  using ModAccFetchPilotEVMPtr = decltype(&RFmxTDSCDMA_ModAccFetchPilotEVM);
  using OBWCfgAveragingPtr = decltype(&RFmxTDSCDMA_OBWCfgAveraging);
  using OBWCfgRBWFilterPtr = decltype(&RFmxTDSCDMA_OBWCfgRBWFilter);
  using OBWCfgSweepTimePtr = decltype(&RFmxTDSCDMA_OBWCfgSweepTime);
  using OBWFetchMeasurementPtr = decltype(&RFmxTDSCDMA_OBWFetchMeasurement);
  using OBWFetchSpectrumPtr = decltype(&RFmxTDSCDMA_OBWFetchSpectrum);
  using PVTCfgAveragingPtr = decltype(&RFmxTDSCDMA_PVTCfgAveraging);
  using PVTCfgMeasurementMethodPtr = decltype(&RFmxTDSCDMA_PVTCfgMeasurementMethod);
  using PVTFetchMeasurementStatusPtr = decltype(&RFmxTDSCDMA_PVTFetchMeasurementStatus);
  using PVTFetchPowersPtr = decltype(&RFmxTDSCDMA_PVTFetchPowers);
  using PVTFetchSegmentMeasurementPtr = decltype(&RFmxTDSCDMA_PVTFetchSegmentMeasurement);
  using PVTFetchSegmentMeasurementArrayPtr = decltype(&RFmxTDSCDMA_PVTFetchSegmentMeasurementArray);
  using PVTFetchSignalPowerTracePtr = decltype(&RFmxTDSCDMA_PVTFetchSignalPowerTrace);
  using ResetAttributePtr = decltype(&RFmxTDSCDMA_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxTDSCDMA_ResetToDefault);
  using SEMCfgAveragingPtr = decltype(&RFmxTDSCDMA_SEMCfgAveraging);
  using SEMCfgSweepTimePtr = decltype(&RFmxTDSCDMA_SEMCfgSweepTime);
  using SEMFetchCarrierAbsoluteIntegratedPowerPtr = decltype(&RFmxTDSCDMA_SEMFetchCarrierAbsoluteIntegratedPower);
  using SEMFetchLowerOffsetMarginPtr = decltype(&RFmxTDSCDMA_SEMFetchLowerOffsetMargin);
  using SEMFetchLowerOffsetMarginArrayPtr = decltype(&RFmxTDSCDMA_SEMFetchLowerOffsetMarginArray);
  using SEMFetchLowerOffsetPowerPtr = decltype(&RFmxTDSCDMA_SEMFetchLowerOffsetPower);
  using SEMFetchLowerOffsetPowerArrayPtr = decltype(&RFmxTDSCDMA_SEMFetchLowerOffsetPowerArray);
  using SEMFetchMeasurementStatusPtr = decltype(&RFmxTDSCDMA_SEMFetchMeasurementStatus);
  using SEMFetchSpectrumPtr = decltype(&RFmxTDSCDMA_SEMFetchSpectrum);
  using SEMFetchUpperOffsetMarginPtr = decltype(&RFmxTDSCDMA_SEMFetchUpperOffsetMargin);
  using SEMFetchUpperOffsetMarginArrayPtr = decltype(&RFmxTDSCDMA_SEMFetchUpperOffsetMarginArray);
  using SEMFetchUpperOffsetPowerPtr = decltype(&RFmxTDSCDMA_SEMFetchUpperOffsetPower);
  using SEMFetchUpperOffsetPowerArrayPtr = decltype(&RFmxTDSCDMA_SEMFetchUpperOffsetPowerArray);
  using SelectMeasurementsPtr = decltype(&RFmxTDSCDMA_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxTDSCDMA_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxTDSCDMA_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxTDSCDMA_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxTDSCDMA_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxTDSCDMA_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxTDSCDMA_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxTDSCDMA_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxTDSCDMA_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxTDSCDMA_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxTDSCDMA_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxTDSCDMA_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxTDSCDMA_SetAttributeU8Array);
  using SlotPowerCfgMeasurementLengthPtr = decltype(&RFmxTDSCDMA_SlotPowerCfgMeasurementLength);
  using SlotPowerFetchPowersPtr = decltype(&RFmxTDSCDMA_SlotPowerFetchPowers);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxTDSCDMA_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxTDSCDMA_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    ACPCfgAveragingPtr ACPCfgAveraging;
    ACPCfgMeasurementMethodPtr ACPCfgMeasurementMethod;
    ACPCfgNoiseCompensationEnabledPtr ACPCfgNoiseCompensationEnabled;
    ACPCfgNumberOfOffsetsPtr ACPCfgNumberOfOffsets;
    ACPCfgRBWFilterPtr ACPCfgRBWFilter;
    ACPCfgSweepTimePtr ACPCfgSweepTime;
    ACPFetchAbsolutePowersTracePtr ACPFetchAbsolutePowersTrace;
    ACPFetchCarrierAbsolutePowerPtr ACPFetchCarrierAbsolutePower;
    ACPFetchOffsetMeasurementPtr ACPFetchOffsetMeasurement;
    ACPFetchOffsetMeasurementArrayPtr ACPFetchOffsetMeasurementArray;
    ACPFetchRelativePowersTracePtr ACPFetchRelativePowersTrace;
    ACPFetchSpectrumPtr ACPFetchSpectrum;
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AnalyzeSpectrum1WaveformPtr AnalyzeSpectrum1Waveform;
    AutoLevelPtr AutoLevel;
    BuildChannelStringPtr BuildChannelString;
    BuildOffsetStringPtr BuildOffsetString;
    BuildSegmentStringPtr BuildSegmentString;
    BuildSignalStringPtr BuildSignalString;
    CDACfgAveragingPtr CDACfgAveraging;
    CDACfgMeasurementChannelPtr CDACfgMeasurementChannel;
    CDACfgPowerUnitPtr CDACfgPowerUnit;
    CDACfgSynchronizationModeAndOffsetPtr CDACfgSynchronizationModeAndOffset;
    CDAFetchCodeDomainPowerPtr CDAFetchCodeDomainPower;
    CDAFetchIQImpairmentsPtr CDAFetchIQImpairments;
    CDAFetchMaximumCodeDomainPowerTracePtr CDAFetchMaximumCodeDomainPowerTrace;
    CDAFetchMaximumSymbolEVMTracePtr CDAFetchMaximumSymbolEVMTrace;
    CDAFetchMaximumSymbolMagnitudeErrorTracePtr CDAFetchMaximumSymbolMagnitudeErrorTrace;
    CDAFetchMaximumSymbolPhaseErrorTracePtr CDAFetchMaximumSymbolPhaseErrorTrace;
    CDAFetchMeanCodeDomainPowerTracePtr CDAFetchMeanCodeDomainPowerTrace;
    CDAFetchMeanSymbolEVMTracePtr CDAFetchMeanSymbolEVMTrace;
    CDAFetchMeanSymbolMagnitudeErrorTracePtr CDAFetchMeanSymbolMagnitudeErrorTrace;
    CDAFetchMeanSymbolPhaseErrorTracePtr CDAFetchMeanSymbolPhaseErrorTrace;
    CDAFetchSymbolConstellationTracePtr CDAFetchSymbolConstellationTrace;
    CDAFetchSymbolEVMPtr CDAFetchSymbolEVM;
    CHPCfgAveragingPtr CHPCfgAveraging;
    CHPCfgRBWFilterPtr CHPCfgRBWFilter;
    CHPCfgSweepTimePtr CHPCfgSweepTime;
    CHPFetchCarrierAbsolutePowerPtr CHPFetchCarrierAbsolutePower;
    CHPFetchSpectrumPtr CHPFetchSpectrum;
    CfgChannelConfigurationModePtr CfgChannelConfigurationMode;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyChannelNumberPtr CfgFrequencyChannelNumber;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgMidambleShiftPtr CfgMidambleShift;
    CfgNumberOfChannelsPtr CfgNumberOfChannels;
    CfgPilotPtr CfgPilot;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CfgUplinkScramblingCodePtr CfgUplinkScramblingCode;
    CfgUserDefinedChannelPtr CfgUserDefinedChannel;
    CfgUserDefinedChannelArrayPtr CfgUserDefinedChannelArray;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    ModAccCfgAveragingPtr ModAccCfgAveraging;
    ModAccCfgSlotTypePtr ModAccCfgSlotType;
    ModAccCfgSynchronizationModeAndIntervalPtr ModAccCfgSynchronizationModeAndInterval;
    ModAccFetchCodeDomainErrorTracePtr ModAccFetchCodeDomainErrorTrace;
    ModAccFetchCompositeEVMPtr ModAccFetchCompositeEVM;
    ModAccFetchConstellationTracePtr ModAccFetchConstellationTrace;
    ModAccFetchDataActiveCDEPtr ModAccFetchDataActiveCDE;
    ModAccFetchDataCDEPtr ModAccFetchDataCDE;
    ModAccFetchDataEVMPtr ModAccFetchDataEVM;
    ModAccFetchDataRCDEPtr ModAccFetchDataRCDE;
    ModAccFetchDetectedChannelPtr ModAccFetchDetectedChannel;
    ModAccFetchDetectedChannelArrayPtr ModAccFetchDetectedChannelArray;
    ModAccFetchEVMTracePtr ModAccFetchEVMTrace;
    ModAccFetchIQImpairmentsPtr ModAccFetchIQImpairments;
    ModAccFetchMagnitudeErrorTracePtr ModAccFetchMagnitudeErrorTrace;
    ModAccFetchMaximumCodeDomainErrorTracePtr ModAccFetchMaximumCodeDomainErrorTrace;
    ModAccFetchMaximumEVMTracePtr ModAccFetchMaximumEVMTrace;
    ModAccFetchMaximumMagnitudeErrorTracePtr ModAccFetchMaximumMagnitudeErrorTrace;
    ModAccFetchMaximumPhaseErrorTracePtr ModAccFetchMaximumPhaseErrorTrace;
    ModAccFetchMidambleAndDataPowerPtr ModAccFetchMidambleAndDataPower;
    ModAccFetchMidambleEVMPtr ModAccFetchMidambleEVM;
    ModAccFetchNumberOfDetectedChannelsPtr ModAccFetchNumberOfDetectedChannels;
    ModAccFetchPhaseErrorTracePtr ModAccFetchPhaseErrorTrace;
    ModAccFetchPilotEVMPtr ModAccFetchPilotEVM;
    OBWCfgAveragingPtr OBWCfgAveraging;
    OBWCfgRBWFilterPtr OBWCfgRBWFilter;
    OBWCfgSweepTimePtr OBWCfgSweepTime;
    OBWFetchMeasurementPtr OBWFetchMeasurement;
    OBWFetchSpectrumPtr OBWFetchSpectrum;
    PVTCfgAveragingPtr PVTCfgAveraging;
    PVTCfgMeasurementMethodPtr PVTCfgMeasurementMethod;
    PVTFetchMeasurementStatusPtr PVTFetchMeasurementStatus;
    PVTFetchPowersPtr PVTFetchPowers;
    PVTFetchSegmentMeasurementPtr PVTFetchSegmentMeasurement;
    PVTFetchSegmentMeasurementArrayPtr PVTFetchSegmentMeasurementArray;
    PVTFetchSignalPowerTracePtr PVTFetchSignalPowerTrace;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SEMCfgAveragingPtr SEMCfgAveraging;
    SEMCfgSweepTimePtr SEMCfgSweepTime;
    SEMFetchCarrierAbsoluteIntegratedPowerPtr SEMFetchCarrierAbsoluteIntegratedPower;
    SEMFetchLowerOffsetMarginPtr SEMFetchLowerOffsetMargin;
    SEMFetchLowerOffsetMarginArrayPtr SEMFetchLowerOffsetMarginArray;
    SEMFetchLowerOffsetPowerPtr SEMFetchLowerOffsetPower;
    SEMFetchLowerOffsetPowerArrayPtr SEMFetchLowerOffsetPowerArray;
    SEMFetchMeasurementStatusPtr SEMFetchMeasurementStatus;
    SEMFetchSpectrumPtr SEMFetchSpectrum;
    SEMFetchUpperOffsetMarginPtr SEMFetchUpperOffsetMargin;
    SEMFetchUpperOffsetMarginArrayPtr SEMFetchUpperOffsetMarginArray;
    SEMFetchUpperOffsetPowerPtr SEMFetchUpperOffsetPower;
    SEMFetchUpperOffsetPowerArrayPtr SEMFetchUpperOffsetPowerArray;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    SlotPowerCfgMeasurementLengthPtr SlotPowerCfgMeasurementLength;
    SlotPowerFetchPowersPtr SlotPowerFetchPowers;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxtdscdma_grpc

#endif  // NIRFMXTDSCDMA_GRPC_LIBRARY_H
