//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXINSTR Metadata
//---------------------------------------------------------------------
#include "nirfmxinstr_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxInstr.dll";
#else
static const char* kLibraryName = "libnirfmxinstr.so.1";
#endif

namespace nirfmxinstr_grpc {

NiRFmxInstrLibrary::NiRFmxInstrLibrary() : NiRFmxInstrLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

NiRFmxInstrLibrary::NiRFmxInstrLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.BuildCalibrationPlaneString = reinterpret_cast<BuildCalibrationPlaneStringPtr>(shared_library_->get_function_pointer("RFmxInstr_BuildCalibrationPlaneString"));
  function_pointers_.BuildInstrumentString = reinterpret_cast<BuildInstrumentStringPtr>(shared_library_->get_function_pointer("RFmxInstr_BuildInstrumentString"));
  function_pointers_.BuildLOString = reinterpret_cast<BuildLOStringPtr>(shared_library_->get_function_pointer("RFmxInstr_BuildLOString"));
  function_pointers_.BuildModuleString = reinterpret_cast<BuildModuleStringPtr>(shared_library_->get_function_pointer("RFmxInstr_BuildModuleString"));
  function_pointers_.BuildPortString = reinterpret_cast<BuildPortStringPtr>(shared_library_->get_function_pointer("RFmxInstr_BuildPortString2"));
  function_pointers_.CfgExternalAttenuationInterpolationLinear = reinterpret_cast<CfgExternalAttenuationInterpolationLinearPtr>(shared_library_->get_function_pointer("RFmxInstr_CfgExternalAttenuationInterpolationLinear"));
  function_pointers_.CfgExternalAttenuationInterpolationNearest = reinterpret_cast<CfgExternalAttenuationInterpolationNearestPtr>(shared_library_->get_function_pointer("RFmxInstr_CfgExternalAttenuationInterpolationNearest"));
  function_pointers_.CfgExternalAttenuationInterpolationSpline = reinterpret_cast<CfgExternalAttenuationInterpolationSplinePtr>(shared_library_->get_function_pointer("RFmxInstr_CfgExternalAttenuationInterpolationSpline"));
  function_pointers_.CfgExternalAttenuationTable = reinterpret_cast<CfgExternalAttenuationTablePtr>(shared_library_->get_function_pointer("RFmxInstr_CfgExternalAttenuationTable"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_->get_function_pointer("RFmxInstr_CfgFrequencyReference"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_->get_function_pointer("RFmxInstr_CfgMechanicalAttenuation"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_->get_function_pointer("RFmxInstr_CfgRFAttenuation"));
  function_pointers_.CfgSParameterExternalAttenuationTable = reinterpret_cast<CfgSParameterExternalAttenuationTablePtr>(shared_library_->get_function_pointer("RFmxInstr_CfgSParameterExternalAttenuationTable"));
  function_pointers_.CfgSParameterExternalAttenuationType = reinterpret_cast<CfgSParameterExternalAttenuationTypePtr>(shared_library_->get_function_pointer("RFmxInstr_CfgSParameterExternalAttenuationType"));
  function_pointers_.CheckAcquisitionStatus = reinterpret_cast<CheckAcquisitionStatusPtr>(shared_library_->get_function_pointer("RFmxInstr_CheckAcquisitionStatus"));
  function_pointers_.CheckIfListExists = reinterpret_cast<CheckIfListExistsPtr>(shared_library_->get_function_pointer("RFmxInstr_CheckIfListExists"));
  function_pointers_.CheckIfSignalConfigurationExists = reinterpret_cast<CheckIfSignalConfigurationExistsPtr>(shared_library_->get_function_pointer("RFmxInstr_CheckIfSignalConfigurationExists"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_->get_function_pointer("RFmxInstr_Close"));
  function_pointers_.DeleteAllExternalAttenuationTables = reinterpret_cast<DeleteAllExternalAttenuationTablesPtr>(shared_library_->get_function_pointer("RFmxInstr_DeleteAllExternalAttenuationTables"));
  function_pointers_.DeleteExternalAttenuationTable = reinterpret_cast<DeleteExternalAttenuationTablePtr>(shared_library_->get_function_pointer("RFmxInstr_DeleteExternalAttenuationTable"));
  function_pointers_.DisableCalibrationPlane = reinterpret_cast<DisableCalibrationPlanePtr>(shared_library_->get_function_pointer("RFmxInstr_DisableCalibrationPlane"));
  function_pointers_.EnableCalibrationPlane = reinterpret_cast<EnableCalibrationPlanePtr>(shared_library_->get_function_pointer("RFmxInstr_EnableCalibrationPlane"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_->get_function_pointer("RFmxInstr_ExportSignal"));
  function_pointers_.FetchRawIQData = reinterpret_cast<FetchRawIQDataPtr>(shared_library_->get_function_pointer("RFmxInstr_FetchRawIQData"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAttributeU8Array"));
  function_pointers_.GetAvailablePaths = reinterpret_cast<GetAvailablePathsPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAvailablePaths"));
  function_pointers_.GetAvailablePorts = reinterpret_cast<GetAvailablePortsPtr>(shared_library_->get_function_pointer("RFmxInstr_GetAvailablePorts"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_->get_function_pointer("RFmxInstr_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_->get_function_pointer("RFmxInstr_GetErrorString"));
  function_pointers_.GetExternalAttenuationTableActualValue = reinterpret_cast<GetExternalAttenuationTableActualValuePtr>(shared_library_->get_function_pointer("RFmxInstr_GetExternalAttenuationTableActualValue"));
  function_pointers_.GetListNames = reinterpret_cast<GetListNamesPtr>(shared_library_->get_function_pointer("RFmxInstr_GetListNames"));
  function_pointers_.GetNIRFSASession = reinterpret_cast<GetNIRFSASessionPtr>(shared_library_->get_function_pointer("RFmxInstr_GetNIRFSASession"));
  function_pointers_.GetNIRFSASessionArray = reinterpret_cast<GetNIRFSASessionArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_GetNIRFSASessionArray"));
  function_pointers_.GetSParameterExternalAttenuationType = reinterpret_cast<GetSParameterExternalAttenuationTypePtr>(shared_library_->get_function_pointer("RFmxInstr_GetSParameterExternalAttenuationType"));
  function_pointers_.GetSelfCalibrateLastDateAndTime = reinterpret_cast<GetSelfCalibrateLastDateAndTimePtr>(shared_library_->get_function_pointer("RFmxInstr_GetSelfCalibrateLastDateAndTime"));
  function_pointers_.GetSelfCalibrateLastTemperature = reinterpret_cast<GetSelfCalibrateLastTemperaturePtr>(shared_library_->get_function_pointer("RFmxInstr_GetSelfCalibrateLastTemperature"));
  function_pointers_.GetSignalConfigurationNames = reinterpret_cast<GetSignalConfigurationNamesPtr>(shared_library_->get_function_pointer("RFmxInstr_GetSignalConfigurationNames"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_->get_function_pointer("RFmxInstr_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_->get_function_pointer("RFmxInstr_InitializeFromNIRFSASession"));
  function_pointers_.InitializeFromNIRFSASessionArray = reinterpret_cast<InitializeFromNIRFSASessionArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_InitializeFromNIRFSASessionArray"));
  function_pointers_.IsSelfCalibrateValid = reinterpret_cast<IsSelfCalibrateValidPtr>(shared_library_->get_function_pointer("RFmxInstr_IsSelfCalibrateValid"));
  function_pointers_.LoadAllConfigurations = reinterpret_cast<LoadAllConfigurationsPtr>(shared_library_->get_function_pointer("RFmxInstr_LoadAllConfigurations"));
  function_pointers_.LoadConfigurations = reinterpret_cast<LoadConfigurationsPtr>(shared_library_->get_function_pointer("RFmxInstr_LoadConfigurations"));
  function_pointers_.LoadSParameterExternalAttenuationTableFromS2PFile = reinterpret_cast<LoadSParameterExternalAttenuationTableFromS2PFilePtr>(shared_library_->get_function_pointer("RFmxInstr_LoadSParameterExternalAttenuationTableFromS2PFile"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_->get_function_pointer("RFmxInstr_ResetAttribute"));
  function_pointers_.ResetDriver = reinterpret_cast<ResetDriverPtr>(shared_library_->get_function_pointer("RFmxInstr_ResetDriver"));
  function_pointers_.ResetEntireSession = reinterpret_cast<ResetEntireSessionPtr>(shared_library_->get_function_pointer("RFmxInstr_ResetEntireSession"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_->get_function_pointer("RFmxInstr_ResetToDefault"));
  function_pointers_.SaveAllConfigurations = reinterpret_cast<SaveAllConfigurationsPtr>(shared_library_->get_function_pointer("RFmxInstr_SaveAllConfigurations"));
  function_pointers_.SelectActiveExternalAttenuationTable = reinterpret_cast<SelectActiveExternalAttenuationTablePtr>(shared_library_->get_function_pointer("RFmxInstr_SelectActiveExternalAttenuationTable"));
  function_pointers_.SelfCalibrate = reinterpret_cast<SelfCalibratePtr>(shared_library_->get_function_pointer("RFmxInstr_SelfCalibrate"));
  function_pointers_.SelfCalibrateRange = reinterpret_cast<SelfCalibrateRangePtr>(shared_library_->get_function_pointer("RFmxInstr_SelfCalibrateRange"));
  function_pointers_.SendSoftwareEdgeAdvanceTrigger = reinterpret_cast<SendSoftwareEdgeAdvanceTriggerPtr>(shared_library_->get_function_pointer("RFmxInstr_SendSoftwareEdgeAdvanceTrigger"));
  function_pointers_.SendSoftwareEdgeStartTrigger = reinterpret_cast<SendSoftwareEdgeStartTriggerPtr>(shared_library_->get_function_pointer("RFmxInstr_SendSoftwareEdgeStartTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_->get_function_pointer("RFmxInstr_SetAttributeU8Array"));
  function_pointers_.TimestampFromValues = reinterpret_cast<TimestampFromValuesPtr>(shared_library_->get_function_pointer("RFmxInstr_TimestampFromValues"));
  function_pointers_.ValuesFromTimestamp = reinterpret_cast<ValuesFromTimestampPtr>(shared_library_->get_function_pointer("RFmxInstr_ValuesFromTimestamp"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_->get_function_pointer("RFmxInstr_WaitForAcquisitionComplete"));
}

NiRFmxInstrLibrary::~NiRFmxInstrLibrary()
{
}

::grpc::Status NiRFmxInstrLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxInstrLibrary::BuildCalibrationPlaneString(char calibrationPlaneName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildCalibrationPlaneString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_BuildCalibrationPlaneString.");
  }
  return function_pointers_.BuildCalibrationPlaneString(calibrationPlaneName, selectorStringLength, selectorString);
}

int32 NiRFmxInstrLibrary::BuildInstrumentString(char selectorString[], int32 instrumentNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildInstrumentString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_BuildInstrumentString.");
  }
  return function_pointers_.BuildInstrumentString(selectorString, instrumentNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxInstrLibrary::BuildLOString(char selectorString[], int32 loIndex, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildLOString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_BuildLOString.");
  }
  return function_pointers_.BuildLOString(selectorString, loIndex, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxInstrLibrary::BuildModuleString(char selectorString[], char moduleName[], int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildModuleString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_BuildModuleString.");
  }
  return function_pointers_.BuildModuleString(selectorString, moduleName, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxInstrLibrary::BuildPortString(char selectorString[], char portName[], char deviceName[], int32 channelNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPortString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_BuildPortString2.");
  }
  return function_pointers_.BuildPortString(selectorString, portName, deviceName, channelNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxInstrLibrary::CfgExternalAttenuationInterpolationLinear(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], int32 format)
{
  if (!function_pointers_.CfgExternalAttenuationInterpolationLinear) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgExternalAttenuationInterpolationLinear.");
  }
  return function_pointers_.CfgExternalAttenuationInterpolationLinear(instrumentHandle, selectorString, tableName, format);
}

int32 NiRFmxInstrLibrary::CfgExternalAttenuationInterpolationNearest(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  if (!function_pointers_.CfgExternalAttenuationInterpolationNearest) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgExternalAttenuationInterpolationNearest.");
  }
  return function_pointers_.CfgExternalAttenuationInterpolationNearest(instrumentHandle, selectorString, tableName);
}

int32 NiRFmxInstrLibrary::CfgExternalAttenuationInterpolationSpline(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  if (!function_pointers_.CfgExternalAttenuationInterpolationSpline) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgExternalAttenuationInterpolationSpline.");
  }
  return function_pointers_.CfgExternalAttenuationInterpolationSpline(instrumentHandle, selectorString, tableName);
}

int32 NiRFmxInstrLibrary::CfgExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], float64 frequency[], float64 externalAttenuation[], int32 arraySize)
{
  if (!function_pointers_.CfgExternalAttenuationTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgExternalAttenuationTable.");
  }
  return function_pointers_.CfgExternalAttenuationTable(instrumentHandle, selectorString, tableName, frequency, externalAttenuation, arraySize);
}

int32 NiRFmxInstrLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgFrequencyReference.");
  }
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 NiRFmxInstrLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgMechanicalAttenuation.");
  }
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 NiRFmxInstrLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgRFAttenuation.");
  }
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 NiRFmxInstrLibrary::CfgSParameterExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], float64 frequency[], int32 frequencyArraySize, NIComplexDouble sParameters[], int32 sParameterTableSize, int32 numberOfPorts, int32 sParameterOrientation)
{
  if (!function_pointers_.CfgSParameterExternalAttenuationTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgSParameterExternalAttenuationTable.");
  }
  return function_pointers_.CfgSParameterExternalAttenuationTable(instrumentHandle, selectorString, tableName, frequency, frequencyArraySize, sParameters, sParameterTableSize, numberOfPorts, sParameterOrientation);
}

int32 NiRFmxInstrLibrary::CfgSParameterExternalAttenuationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sParameterType)
{
  if (!function_pointers_.CfgSParameterExternalAttenuationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CfgSParameterExternalAttenuationType.");
  }
  return function_pointers_.CfgSParameterExternalAttenuationType(instrumentHandle, selectorString, sParameterType);
}

int32 NiRFmxInstrLibrary::CheckAcquisitionStatus(niRFmxInstrHandle instrumentHandle, int32* acquisitionDone)
{
  if (!function_pointers_.CheckAcquisitionStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CheckAcquisitionStatus.");
  }
  return function_pointers_.CheckAcquisitionStatus(instrumentHandle, acquisitionDone);
}

int32 NiRFmxInstrLibrary::CheckIfListExists(niRFmxInstrHandle instrumentHandle, char listName[], int32* listExists, int32* personality)
{
  if (!function_pointers_.CheckIfListExists) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CheckIfListExists.");
  }
  return function_pointers_.CheckIfListExists(instrumentHandle, listName, listExists, personality);
}

int32 NiRFmxInstrLibrary::CheckIfSignalConfigurationExists(niRFmxInstrHandle instrumentHandle, char signalName[], int32* signalConfigurationExists, int32* personality)
{
  if (!function_pointers_.CheckIfSignalConfigurationExists) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_CheckIfSignalConfigurationExists.");
  }
  return function_pointers_.CheckIfSignalConfigurationExists(instrumentHandle, signalName, signalConfigurationExists, personality);
}

int32 NiRFmxInstrLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_Close.");
  }
  return function_pointers_.Close(instrumentHandle, forceDestroy);
}

int32 NiRFmxInstrLibrary::DeleteAllExternalAttenuationTables(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DeleteAllExternalAttenuationTables) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_DeleteAllExternalAttenuationTables.");
  }
  return function_pointers_.DeleteAllExternalAttenuationTables(instrumentHandle, selectorString);
}

int32 NiRFmxInstrLibrary::DeleteExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  if (!function_pointers_.DeleteExternalAttenuationTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_DeleteExternalAttenuationTable.");
  }
  return function_pointers_.DeleteExternalAttenuationTable(instrumentHandle, selectorString, tableName);
}

int32 NiRFmxInstrLibrary::DisableCalibrationPlane(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableCalibrationPlane) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_DisableCalibrationPlane.");
  }
  return function_pointers_.DisableCalibrationPlane(instrumentHandle, selectorString);
}

int32 NiRFmxInstrLibrary::EnableCalibrationPlane(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.EnableCalibrationPlane) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_EnableCalibrationPlane.");
  }
  return function_pointers_.EnableCalibrationPlane(instrumentHandle, selectorString);
}

int32 NiRFmxInstrLibrary::ExportSignal(niRFmxInstrHandle instrumentHandle, int32 exportSignalSource, char exportSignalOutputTerminal[])
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_ExportSignal.");
  }
  return function_pointers_.ExportSignal(instrumentHandle, exportSignalSource, exportSignalOutputTerminal);
}

int32 NiRFmxInstrLibrary::FetchRawIQData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordsToFetch, int64 samplesToRead, float64* x0, float64* dx, NIComplexSingle data[], int32 arraySize, int32* actualArraySize, void* reserved)
{
  if (!function_pointers_.FetchRawIQData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_FetchRawIQData.");
  }
  return function_pointers_.FetchRawIQData(instrumentHandle, selectorString, timeout, recordsToFetch, samplesToRead, x0, dx, data, arraySize, actualArraySize, reserved);
}

int32 NiRFmxInstrLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeF32.");
  }
  return function_pointers_.GetAttributeF32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeF32Array.");
  }
  return function_pointers_.GetAttributeF32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeF64.");
  }
  return function_pointers_.GetAttributeF64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeF64Array.");
  }
  return function_pointers_.GetAttributeF64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI16.");
  }
  return function_pointers_.GetAttributeI16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI32.");
  }
  return function_pointers_.GetAttributeI32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI32Array.");
  }
  return function_pointers_.GetAttributeI32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI64.");
  }
  return function_pointers_.GetAttributeI64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI64Array.");
  }
  return function_pointers_.GetAttributeI64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI8.");
  }
  return function_pointers_.GetAttributeI8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeI8Array.");
  }
  return function_pointers_.GetAttributeI8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeString.");
  }
  return function_pointers_.GetAttributeString(instrumentHandle, channelName, attributeID, arraySize, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeU16.");
  }
  return function_pointers_.GetAttributeU16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeU32.");
  }
  return function_pointers_.GetAttributeU32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeU32Array.");
  }
  return function_pointers_.GetAttributeU32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeU64Array.");
  }
  return function_pointers_.GetAttributeU64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeU8.");
  }
  return function_pointers_.GetAttributeU8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAttributeU8Array.");
  }
  return function_pointers_.GetAttributeU8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetAvailablePaths(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char availablePaths[])
{
  if (!function_pointers_.GetAvailablePaths) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAvailablePaths.");
  }
  return function_pointers_.GetAvailablePaths(instrumentHandle, selectorString, arraySize, availablePaths);
}

int32 NiRFmxInstrLibrary::GetAvailablePorts(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char availablePorts[])
{
  if (!function_pointers_.GetAvailablePorts) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetAvailablePorts.");
  }
  return function_pointers_.GetAvailablePorts(instrumentHandle, selectorString, arraySize, availablePorts);
}

int32 NiRFmxInstrLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxInstrLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxInstrLibrary::GetExternalAttenuationTableActualValue(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* externalAttenuation)
{
  if (!function_pointers_.GetExternalAttenuationTableActualValue) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetExternalAttenuationTableActualValue.");
  }
  return function_pointers_.GetExternalAttenuationTableActualValue(instrumentHandle, selectorString, externalAttenuation);
}

int32 NiRFmxInstrLibrary::GetListNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 personalityFilter, char listNames[], int32 listNamesSize, int32* actualListNamesSize, int32 personality[], int32 personalityArraySize, int32* actualPersonalityArraySize)
{
  if (!function_pointers_.GetListNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetListNames.");
  }
  return function_pointers_.GetListNames(instrumentHandle, selectorString, personalityFilter, listNames, listNamesSize, actualListNamesSize, personality, personalityArraySize, actualPersonalityArraySize);
}

int32 NiRFmxInstrLibrary::GetNIRFSASession(niRFmxInstrHandle instrumentHandle, uInt32* niRfsaSession)
{
  if (!function_pointers_.GetNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetNIRFSASession.");
  }
  return function_pointers_.GetNIRFSASession(instrumentHandle, niRfsaSession);
}

int32 NiRFmxInstrLibrary::GetNIRFSASessionArray(niRFmxInstrHandle instrumentHandle, uInt32 nirfsaSessions[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetNIRFSASessionArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetNIRFSASessionArray.");
  }
  return function_pointers_.GetNIRFSASessionArray(instrumentHandle, nirfsaSessions, arraySize, actualArraySize);
}

int32 NiRFmxInstrLibrary::GetSParameterExternalAttenuationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* sParameterType)
{
  if (!function_pointers_.GetSParameterExternalAttenuationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetSParameterExternalAttenuationType.");
  }
  return function_pointers_.GetSParameterExternalAttenuationType(instrumentHandle, selectorString, sParameterType);
}

int32 NiRFmxInstrLibrary::GetSelfCalibrateLastDateAndTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 selfCalibrateStep, CVIAbsoluteTime* timestamp)
{
  if (!function_pointers_.GetSelfCalibrateLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetSelfCalibrateLastDateAndTime.");
  }
  return function_pointers_.GetSelfCalibrateLastDateAndTime(instrumentHandle, selectorString, selfCalibrateStep, timestamp);
}

int32 NiRFmxInstrLibrary::GetSelfCalibrateLastTemperature(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 selfCalibrateStep, float64* temperature)
{
  if (!function_pointers_.GetSelfCalibrateLastTemperature) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetSelfCalibrateLastTemperature.");
  }
  return function_pointers_.GetSelfCalibrateLastTemperature(instrumentHandle, selectorString, selfCalibrateStep, temperature);
}

int32 NiRFmxInstrLibrary::GetSignalConfigurationNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 personalityFilter, char signalNames[], int32 signalNamesSize, int32* actualSignalNamesSize, int32 personality[], int32 personalityArraySize, int32* actualPersonalityArraySize)
{
  if (!function_pointers_.GetSignalConfigurationNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_GetSignalConfigurationNames.");
  }
  return function_pointers_.GetSignalConfigurationNames(instrumentHandle, selectorString, personalityFilter, signalNames, signalNamesSize, actualSignalNamesSize, personality, personalityArraySize, actualPersonalityArraySize);
}

int32 NiRFmxInstrLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_Initialize.");
  }
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 NiRFmxInstrLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_InitializeFromNIRFSASession.");
  }
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 NiRFmxInstrLibrary::InitializeFromNIRFSASessionArray(uInt32 nirfsaSessions[], int32 numberOfNIRFSASessions, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASessionArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_InitializeFromNIRFSASessionArray.");
  }
  return function_pointers_.InitializeFromNIRFSASessionArray(nirfsaSessions, numberOfNIRFSASessions, handleOut);
}

int32 NiRFmxInstrLibrary::IsSelfCalibrateValid(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* selfCalibrateValid, int32* validSteps)
{
  if (!function_pointers_.IsSelfCalibrateValid) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_IsSelfCalibrateValid.");
  }
  return function_pointers_.IsSelfCalibrateValid(instrumentHandle, selectorString, selfCalibrateValid, validSteps);
}

int32 NiRFmxInstrLibrary::LoadAllConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[], int32 loadRFInstrConfiguration)
{
  if (!function_pointers_.LoadAllConfigurations) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_LoadAllConfigurations.");
  }
  return function_pointers_.LoadAllConfigurations(instrumentHandle, filePath, loadRFInstrConfiguration);
}

int32 NiRFmxInstrLibrary::LoadConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[])
{
  if (!function_pointers_.LoadConfigurations) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_LoadConfigurations.");
  }
  return function_pointers_.LoadConfigurations(instrumentHandle, filePath);
}

int32 NiRFmxInstrLibrary::LoadSParameterExternalAttenuationTableFromS2PFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], char s2PFilePath[], int32 sParameterOrientation)
{
  if (!function_pointers_.LoadSParameterExternalAttenuationTableFromS2PFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_LoadSParameterExternalAttenuationTableFromS2PFile.");
  }
  return function_pointers_.LoadSParameterExternalAttenuationTableFromS2PFile(instrumentHandle, selectorString, tableName, s2PFilePath, sParameterOrientation);
}

int32 NiRFmxInstrLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(instrumentHandle, channelName, attributeID);
}

int32 NiRFmxInstrLibrary::ResetDriver(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.ResetDriver) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_ResetDriver.");
  }
  return function_pointers_.ResetDriver(instrumentHandle);
}

int32 NiRFmxInstrLibrary::ResetEntireSession(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.ResetEntireSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_ResetEntireSession.");
  }
  return function_pointers_.ResetEntireSession(instrumentHandle);
}

int32 NiRFmxInstrLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_ResetToDefault.");
  }
  return function_pointers_.ResetToDefault(instrumentHandle);
}

int32 NiRFmxInstrLibrary::SaveAllConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[])
{
  if (!function_pointers_.SaveAllConfigurations) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SaveAllConfigurations.");
  }
  return function_pointers_.SaveAllConfigurations(instrumentHandle, filePath);
}

int32 NiRFmxInstrLibrary::SelectActiveExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  if (!function_pointers_.SelectActiveExternalAttenuationTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SelectActiveExternalAttenuationTable.");
  }
  return function_pointers_.SelectActiveExternalAttenuationTable(instrumentHandle, selectorString, tableName);
}

int32 NiRFmxInstrLibrary::SelfCalibrate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 stepsToOmit)
{
  if (!function_pointers_.SelfCalibrate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SelfCalibrate.");
  }
  return function_pointers_.SelfCalibrate(instrumentHandle, selectorString, stepsToOmit);
}

int32 NiRFmxInstrLibrary::SelfCalibrateRange(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 stepsToOmit, float64 minimumFrequency, float64 maximumFrequency, float64 minimumReferenceLevel, float64 maximumReferenceLevel)
{
  if (!function_pointers_.SelfCalibrateRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SelfCalibrateRange.");
  }
  return function_pointers_.SelfCalibrateRange(instrumentHandle, selectorString, stepsToOmit, minimumFrequency, maximumFrequency, minimumReferenceLevel, maximumReferenceLevel);
}

int32 NiRFmxInstrLibrary::SendSoftwareEdgeAdvanceTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SendSoftwareEdgeAdvanceTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeAdvanceTrigger(instrumentHandle);
}

int32 NiRFmxInstrLibrary::SendSoftwareEdgeStartTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SendSoftwareEdgeStartTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeStartTrigger(instrumentHandle);
}

int32 NiRFmxInstrLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeF32.");
  }
  return function_pointers_.SetAttributeF32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeF32Array.");
  }
  return function_pointers_.SetAttributeF32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeF64.");
  }
  return function_pointers_.SetAttributeF64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeF64Array.");
  }
  return function_pointers_.SetAttributeF64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI16.");
  }
  return function_pointers_.SetAttributeI16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI32.");
  }
  return function_pointers_.SetAttributeI32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI32Array.");
  }
  return function_pointers_.SetAttributeI32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI64.");
  }
  return function_pointers_.SetAttributeI64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI64Array.");
  }
  return function_pointers_.SetAttributeI64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI8.");
  }
  return function_pointers_.SetAttributeI8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeI8Array.");
  }
  return function_pointers_.SetAttributeI8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeString.");
  }
  return function_pointers_.SetAttributeString(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeU16.");
  }
  return function_pointers_.SetAttributeU16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeU32.");
  }
  return function_pointers_.SetAttributeU32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeU32Array.");
  }
  return function_pointers_.SetAttributeU32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeU64Array.");
  }
  return function_pointers_.SetAttributeU64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeU8.");
  }
  return function_pointers_.SetAttributeU8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 NiRFmxInstrLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_SetAttributeU8Array.");
  }
  return function_pointers_.SetAttributeU8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 NiRFmxInstrLibrary::TimestampFromValues(int64 secondsSince1970, float64 fractionalSeconds, CVIAbsoluteTime* timestamp)
{
  if (!function_pointers_.TimestampFromValues) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_TimestampFromValues.");
  }
  return function_pointers_.TimestampFromValues(secondsSince1970, fractionalSeconds, timestamp);
}

int32 NiRFmxInstrLibrary::ValuesFromTimestamp(CVIAbsoluteTime timestamp, int64* secondsSince1970, float64* fractionalSeconds)
{
  if (!function_pointers_.ValuesFromTimestamp) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_ValuesFromTimestamp.");
  }
  return function_pointers_.ValuesFromTimestamp(timestamp, secondsSince1970, fractionalSeconds);
}

int32 NiRFmxInstrLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxInstr_WaitForAcquisitionComplete.");
  }
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
}

}  // namespace nirfmxinstr_grpc
