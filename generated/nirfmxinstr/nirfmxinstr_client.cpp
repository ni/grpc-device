
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-RFMXINSTR.
//---------------------------------------------------------------------
#include "nirfmxinstr_client.h"

#include <grpcpp/grpcpp.h>

#include <nirfmxinstr.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nirfmxinstr_grpc::experimental::client {

BuildCalibrationPlaneStringResponse
build_calibration_plane_string(const StubPtr& stub, const pb::string& calibration_plane_name)
{
  ::grpc::ClientContext context;

  auto request = BuildCalibrationPlaneStringRequest{};
  request.set_calibration_plane_name(calibration_plane_name);

  auto response = BuildCalibrationPlaneStringResponse{};

  raise_if_error(
      stub->BuildCalibrationPlaneString(&context, request, &response));

  return response;
}

BuildInstrumentStringResponse
build_instrument_string(const StubPtr& stub, const pb::string& selector_string, const pb::int32& instrument_number)
{
  ::grpc::ClientContext context;

  auto request = BuildInstrumentStringRequest{};
  request.set_selector_string(selector_string);
  request.set_instrument_number(instrument_number);

  auto response = BuildInstrumentStringResponse{};

  raise_if_error(
      stub->BuildInstrumentString(&context, request, &response));

  return response;
}

BuildLOStringResponse
build_lo_string(const StubPtr& stub, const pb::string& selector_string, const pb::int32& lo_index)
{
  ::grpc::ClientContext context;

  auto request = BuildLOStringRequest{};
  request.set_selector_string(selector_string);
  request.set_lo_index(lo_index);

  auto response = BuildLOStringResponse{};

  raise_if_error(
      stub->BuildLOString(&context, request, &response));

  return response;
}

BuildModuleStringResponse
build_module_string(const StubPtr& stub, const pb::string& selector_string, const pb::string& module_name)
{
  ::grpc::ClientContext context;

  auto request = BuildModuleStringRequest{};
  request.set_selector_string(selector_string);
  request.set_module_name(module_name);

  auto response = BuildModuleStringResponse{};

  raise_if_error(
      stub->BuildModuleString(&context, request, &response));

  return response;
}

BuildPortStringResponse
build_port_string(const StubPtr& stub, const pb::string& selector_string, const pb::string& port_name, const pb::string& device_name, const pb::int32& channel_number)
{
  ::grpc::ClientContext context;

  auto request = BuildPortStringRequest{};
  request.set_selector_string(selector_string);
  request.set_port_name(port_name);
  request.set_device_name(device_name);
  request.set_channel_number(channel_number);

  auto response = BuildPortStringResponse{};

  raise_if_error(
      stub->BuildPortString(&context, request, &response));

  return response;
}

CfgExternalAttenuationInterpolationLinearResponse
cfg_external_attenuation_interpolation_linear(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name, const pb::int32& format)
{
  ::grpc::ClientContext context;

  auto request = CfgExternalAttenuationInterpolationLinearRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);
  request.set_format(format);

  auto response = CfgExternalAttenuationInterpolationLinearResponse{};

  raise_if_error(
      stub->CfgExternalAttenuationInterpolationLinear(&context, request, &response));

  return response;
}

CfgExternalAttenuationInterpolationNearestResponse
cfg_external_attenuation_interpolation_nearest(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name)
{
  ::grpc::ClientContext context;

  auto request = CfgExternalAttenuationInterpolationNearestRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);

  auto response = CfgExternalAttenuationInterpolationNearestResponse{};

  raise_if_error(
      stub->CfgExternalAttenuationInterpolationNearest(&context, request, &response));

  return response;
}

CfgExternalAttenuationInterpolationSplineResponse
cfg_external_attenuation_interpolation_spline(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name)
{
  ::grpc::ClientContext context;

  auto request = CfgExternalAttenuationInterpolationSplineRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);

  auto response = CfgExternalAttenuationInterpolationSplineResponse{};

  raise_if_error(
      stub->CfgExternalAttenuationInterpolationSpline(&context, request, &response));

  return response;
}

CfgExternalAttenuationTableResponse
cfg_external_attenuation_table(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name, const std::vector<double>& frequency, const std::vector<double>& external_attenuation)
{
  ::grpc::ClientContext context;

  auto request = CfgExternalAttenuationTableRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);
  copy_array(frequency, request.mutable_frequency());
  copy_array(external_attenuation, request.mutable_external_attenuation());

  auto response = CfgExternalAttenuationTableResponse{};

  raise_if_error(
      stub->CfgExternalAttenuationTable(&context, request, &response));

  return response;
}

CfgFrequencyReferenceResponse
cfg_frequency_reference(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::string& frequency_reference_source, const double& frequency_reference_frequency)
{
  ::grpc::ClientContext context;

  auto request = CfgFrequencyReferenceRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_frequency_reference_source(frequency_reference_source);
  request.set_frequency_reference_frequency(frequency_reference_frequency);

  auto response = CfgFrequencyReferenceResponse{};

  raise_if_error(
      stub->CfgFrequencyReference(&context, request, &response));

  return response;
}

CfgMechanicalAttenuationResponse
cfg_mechanical_attenuation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& mechanical_attenuation_auto, const double& mechanical_attenuation_value)
{
  ::grpc::ClientContext context;

  auto request = CfgMechanicalAttenuationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_mechanical_attenuation_auto(mechanical_attenuation_auto);
  request.set_mechanical_attenuation_value(mechanical_attenuation_value);

  auto response = CfgMechanicalAttenuationResponse{};

  raise_if_error(
      stub->CfgMechanicalAttenuation(&context, request, &response));

  return response;
}

CfgRFAttenuationResponse
cfg_rf_attenuation(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& rf_attenuation_auto, const double& rf_attenuation_value)
{
  ::grpc::ClientContext context;

  auto request = CfgRFAttenuationRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_rf_attenuation_auto(rf_attenuation_auto);
  request.set_rf_attenuation_value(rf_attenuation_value);

  auto response = CfgRFAttenuationResponse{};

  raise_if_error(
      stub->CfgRFAttenuation(&context, request, &response));

  return response;
}

CfgSParameterExternalAttenuationTableResponse
cfg_s_parameter_external_attenuation_table(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name, const std::vector<double>& frequency, const std::vector<nidevice_grpc::NIComplexNumber>& s_parameters, const pb::int32& number_of_ports, const pb::int32& s_parameter_orientation)
{
  ::grpc::ClientContext context;

  auto request = CfgSParameterExternalAttenuationTableRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);
  copy_array(frequency, request.mutable_frequency());
  copy_array(s_parameters, request.mutable_s_parameters());
  request.set_number_of_ports(number_of_ports);
  request.set_s_parameter_orientation(s_parameter_orientation);

  auto response = CfgSParameterExternalAttenuationTableResponse{};

  raise_if_error(
      stub->CfgSParameterExternalAttenuationTable(&context, request, &response));

  return response;
}

CfgSParameterExternalAttenuationTypeResponse
cfg_s_parameter_external_attenuation_type(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::int32& s_parameter_type)
{
  ::grpc::ClientContext context;

  auto request = CfgSParameterExternalAttenuationTypeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_s_parameter_type(s_parameter_type);

  auto response = CfgSParameterExternalAttenuationTypeResponse{};

  raise_if_error(
      stub->CfgSParameterExternalAttenuationType(&context, request, &response));

  return response;
}

CheckAcquisitionStatusResponse
check_acquisition_status(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = CheckAcquisitionStatusRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = CheckAcquisitionStatusResponse{};

  raise_if_error(
      stub->CheckAcquisitionStatus(&context, request, &response));

  return response;
}

CheckIfListExistsResponse
check_if_list_exists(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& list_name)
{
  ::grpc::ClientContext context;

  auto request = CheckIfListExistsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_list_name(list_name);

  auto response = CheckIfListExistsResponse{};

  raise_if_error(
      stub->CheckIfListExists(&context, request, &response));

  return response;
}

CheckIfSignalConfigurationExistsResponse
check_if_signal_configuration_exists(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& signal_name)
{
  ::grpc::ClientContext context;

  auto request = CheckIfSignalConfigurationExistsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_signal_name(signal_name);

  auto response = CheckIfSignalConfigurationExistsResponse{};

  raise_if_error(
      stub->CheckIfSignalConfigurationExists(&context, request, &response));

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& force_destroy)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_force_destroy(force_destroy);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response));

  return response;
}

DeleteAllExternalAttenuationTablesResponse
delete_all_external_attenuation_tables(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = DeleteAllExternalAttenuationTablesRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = DeleteAllExternalAttenuationTablesResponse{};

  raise_if_error(
      stub->DeleteAllExternalAttenuationTables(&context, request, &response));

  return response;
}

DeleteExternalAttenuationTableResponse
delete_external_attenuation_table(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name)
{
  ::grpc::ClientContext context;

  auto request = DeleteExternalAttenuationTableRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);

  auto response = DeleteExternalAttenuationTableResponse{};

  raise_if_error(
      stub->DeleteExternalAttenuationTable(&context, request, &response));

  return response;
}

DisableCalibrationPlaneResponse
disable_calibration_plane(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = DisableCalibrationPlaneRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = DisableCalibrationPlaneResponse{};

  raise_if_error(
      stub->DisableCalibrationPlane(&context, request, &response));

  return response;
}

EnableCalibrationPlaneResponse
enable_calibration_plane(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = EnableCalibrationPlaneRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = EnableCalibrationPlaneResponse{};

  raise_if_error(
      stub->EnableCalibrationPlane(&context, request, &response));

  return response;
}

ExportSignalResponse
export_signal(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& export_signal_source, const pb::string& export_signal_output_terminal)
{
  ::grpc::ClientContext context;

  auto request = ExportSignalRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_export_signal_source(export_signal_source);
  request.set_export_signal_output_terminal(export_signal_output_terminal);

  auto response = ExportSignalResponse{};

  raise_if_error(
      stub->ExportSignal(&context, request, &response));

  return response;
}

GetAttributeF32Response
get_attribute_f32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF32Response{};

  raise_if_error(
      stub->GetAttributeF32(&context, request, &response));

  return response;
}

GetAttributeF32ArrayResponse
get_attribute_f32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF32ArrayResponse{};

  raise_if_error(
      stub->GetAttributeF32Array(&context, request, &response));

  return response;
}

GetAttributeF64Response
get_attribute_f64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF64Response{};

  raise_if_error(
      stub->GetAttributeF64(&context, request, &response));

  return response;
}

GetAttributeF64ArrayResponse
get_attribute_f64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeF64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeF64ArrayResponse{};

  raise_if_error(
      stub->GetAttributeF64Array(&context, request, &response));

  return response;
}

GetAttributeI16Response
get_attribute_i16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI16Response{};

  raise_if_error(
      stub->GetAttributeI16(&context, request, &response));

  return response;
}

GetAttributeI32Response
get_attribute_i32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI32Response{};

  raise_if_error(
      stub->GetAttributeI32(&context, request, &response));

  return response;
}

GetAttributeI32ArrayResponse
get_attribute_i32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI32ArrayResponse{};

  raise_if_error(
      stub->GetAttributeI32Array(&context, request, &response));

  return response;
}

GetAttributeI64Response
get_attribute_i64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI64Response{};

  raise_if_error(
      stub->GetAttributeI64(&context, request, &response));

  return response;
}

GetAttributeI64ArrayResponse
get_attribute_i64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI64ArrayResponse{};

  raise_if_error(
      stub->GetAttributeI64Array(&context, request, &response));

  return response;
}

GetAttributeI8Response
get_attribute_i8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI8Response{};

  raise_if_error(
      stub->GetAttributeI8(&context, request, &response));

  return response;
}

GetAttributeI8ArrayResponse
get_attribute_i8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeI8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeI8ArrayResponse{};

  raise_if_error(
      stub->GetAttributeI8Array(&context, request, &response));

  return response;
}

GetAttributeNIComplexDoubleArrayResponse
get_attribute_ni_complex_double_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeNIComplexDoubleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeNIComplexDoubleArrayResponse{};

  raise_if_error(
      stub->GetAttributeNIComplexDoubleArray(&context, request, &response));

  return response;
}

GetAttributeNIComplexSingleArrayResponse
get_attribute_ni_complex_single_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeNIComplexSingleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeNIComplexSingleArrayResponse{};

  raise_if_error(
      stub->GetAttributeNIComplexSingleArray(&context, request, &response));

  return response;
}

GetAttributeStringResponse
get_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeStringRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeStringResponse{};

  raise_if_error(
      stub->GetAttributeString(&context, request, &response));

  return response;
}

GetAttributeU16Response
get_attribute_u16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU16Response{};

  raise_if_error(
      stub->GetAttributeU16(&context, request, &response));

  return response;
}

GetAttributeU32Response
get_attribute_u32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU32Response{};

  raise_if_error(
      stub->GetAttributeU32(&context, request, &response));

  return response;
}

GetAttributeU32ArrayResponse
get_attribute_u32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU32ArrayResponse{};

  raise_if_error(
      stub->GetAttributeU32Array(&context, request, &response));

  return response;
}

GetAttributeU64ArrayResponse
get_attribute_u64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU64ArrayResponse{};

  raise_if_error(
      stub->GetAttributeU64Array(&context, request, &response));

  return response;
}

GetAttributeU8Response
get_attribute_u8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU8Response{};

  raise_if_error(
      stub->GetAttributeU8(&context, request, &response));

  return response;
}

GetAttributeU8ArrayResponse
get_attribute_u8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeU8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeU8ArrayResponse{};

  raise_if_error(
      stub->GetAttributeU8Array(&context, request, &response));

  return response;
}

GetAvailablePortsResponse
get_available_ports(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = GetAvailablePortsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = GetAvailablePortsResponse{};

  raise_if_error(
      stub->GetAvailablePorts(&context, request, &response));

  return response;
}

GetErrorResponse
get_error(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = GetErrorRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = GetErrorResponse{};

  raise_if_error(
      stub->GetError(&context, request, &response));

  return response;
}

GetErrorStringResponse
get_error_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = GetErrorStringRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_error_code(error_code);

  auto response = GetErrorStringResponse{};

  raise_if_error(
      stub->GetErrorString(&context, request, &response));

  return response;
}

GetExternalAttenuationTableActualValueResponse
get_external_attenuation_table_actual_value(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = GetExternalAttenuationTableActualValueRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = GetExternalAttenuationTableActualValueResponse{};

  raise_if_error(
      stub->GetExternalAttenuationTableActualValue(&context, request, &response));

  return response;
}

GetNIRFSASessionResponse
get_nirfsa_session(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = GetNIRFSASessionRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = GetNIRFSASessionResponse{};

  raise_if_error(
      stub->GetNIRFSASession(&context, request, &response));

  return response;
}

GetNIRFSASessionArrayResponse
get_nirfsa_session_array(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = GetNIRFSASessionArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = GetNIRFSASessionArrayResponse{};

  raise_if_error(
      stub->GetNIRFSASessionArray(&context, request, &response));

  return response;
}

GetSelfCalibrateLastDateAndTimeResponse
get_self_calibrate_last_date_and_time(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::int64& self_calibrate_step)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalibrateLastDateAndTimeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_self_calibrate_step(self_calibrate_step);

  auto response = GetSelfCalibrateLastDateAndTimeResponse{};

  raise_if_error(
      stub->GetSelfCalibrateLastDateAndTime(&context, request, &response));

  return response;
}

GetSelfCalibrateLastTemperatureResponse
get_self_calibrate_last_temperature(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::int64& self_calibrate_step)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalibrateLastTemperatureRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_self_calibrate_step(self_calibrate_step);

  auto response = GetSelfCalibrateLastTemperatureResponse{};

  raise_if_error(
      stub->GetSelfCalibrateLastTemperature(&context, request, &response));

  return response;
}

InitializeResponse
initialize(const StubPtr& stub, const pb::string& resource_name, const pb::string& option_string)
{
  ::grpc::ClientContext context;

  auto request = InitializeRequest{};
  request.set_resource_name(resource_name);
  request.set_option_string(option_string);

  auto response = InitializeResponse{};

  raise_if_error(
      stub->Initialize(&context, request, &response));

  return response;
}

InitializeFromNIRFSASessionResponse
initialize_from_nirfsa_session(const StubPtr& stub, const nidevice_grpc::Session& nirfsa_session)
{
  ::grpc::ClientContext context;

  auto request = InitializeFromNIRFSASessionRequest{};
  request.mutable_nirfsa_session()->CopyFrom(nirfsa_session);

  auto response = InitializeFromNIRFSASessionResponse{};

  raise_if_error(
      stub->InitializeFromNIRFSASession(&context, request, &response));

  return response;
}

InitializeFromNIRFSASessionArrayResponse
initialize_from_nirfsa_session_array(const StubPtr& stub, const std::vector<pb::uint32>& nirfsa_sessions)
{
  ::grpc::ClientContext context;

  auto request = InitializeFromNIRFSASessionArrayRequest{};
  copy_array(nirfsa_sessions, request.mutable_nirfsa_sessions());

  auto response = InitializeFromNIRFSASessionArrayResponse{};

  raise_if_error(
      stub->InitializeFromNIRFSASessionArray(&context, request, &response));

  return response;
}

IsSelfCalibrateValidResponse
is_self_calibrate_valid(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string)
{
  ::grpc::ClientContext context;

  auto request = IsSelfCalibrateValidRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);

  auto response = IsSelfCalibrateValidResponse{};

  raise_if_error(
      stub->IsSelfCalibrateValid(&context, request, &response));

  return response;
}

LoadAllConfigurationsResponse
load_all_configurations(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& file_path, const pb::int32& load_rf_instr_configuration)
{
  ::grpc::ClientContext context;

  auto request = LoadAllConfigurationsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_file_path(file_path);
  request.set_load_rf_instr_configuration(load_rf_instr_configuration);

  auto response = LoadAllConfigurationsResponse{};

  raise_if_error(
      stub->LoadAllConfigurations(&context, request, &response));

  return response;
}

LoadSParameterExternalAttenuationTableFromS2PFileResponse
load_s_parameter_external_attenuation_table_from_s2p_file(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name, const pb::string& s2_p_file_path, const pb::int32& s_parameter_orientation)
{
  ::grpc::ClientContext context;

  auto request = LoadSParameterExternalAttenuationTableFromS2PFileRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);
  request.set_s2_p_file_path(s2_p_file_path);
  request.set_s_parameter_orientation(s_parameter_orientation);

  auto response = LoadSParameterExternalAttenuationTableFromS2PFileResponse{};

  raise_if_error(
      stub->LoadSParameterExternalAttenuationTableFromS2PFile(&context, request, &response));

  return response;
}

ResetAttributeResponse
reset_attribute(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = ResetAttributeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = ResetAttributeResponse{};

  raise_if_error(
      stub->ResetAttribute(&context, request, &response));

  return response;
}

ResetDriverResponse
reset_driver(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = ResetDriverRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = ResetDriverResponse{};

  raise_if_error(
      stub->ResetDriver(&context, request, &response));

  return response;
}

ResetEntireSessionResponse
reset_entire_session(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = ResetEntireSessionRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = ResetEntireSessionResponse{};

  raise_if_error(
      stub->ResetEntireSession(&context, request, &response));

  return response;
}

ResetToDefaultResponse
reset_to_default(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = ResetToDefaultRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = ResetToDefaultResponse{};

  raise_if_error(
      stub->ResetToDefault(&context, request, &response));

  return response;
}

SaveAllConfigurationsResponse
save_all_configurations(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = SaveAllConfigurationsRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_file_path(file_path);

  auto response = SaveAllConfigurationsResponse{};

  raise_if_error(
      stub->SaveAllConfigurations(&context, request, &response));

  return response;
}

SelectActiveExternalAttenuationTableResponse
select_active_external_attenuation_table(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::string& table_name)
{
  ::grpc::ClientContext context;

  auto request = SelectActiveExternalAttenuationTableRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_table_name(table_name);

  auto response = SelectActiveExternalAttenuationTableResponse{};

  raise_if_error(
      stub->SelectActiveExternalAttenuationTable(&context, request, &response));

  return response;
}

SelfCalibrateResponse
self_calibrate(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::int32& steps_to_omit)
{
  ::grpc::ClientContext context;

  auto request = SelfCalibrateRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_steps_to_omit(steps_to_omit);

  auto response = SelfCalibrateResponse{};

  raise_if_error(
      stub->SelfCalibrate(&context, request, &response));

  return response;
}

SelfCalibrateRangeResponse
self_calibrate_range(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::int32& steps_to_omit, const double& minimum_frequency, const double& maximum_frequency, const double& minimum_reference_level, const double& maximum_reference_level)
{
  ::grpc::ClientContext context;

  auto request = SelfCalibrateRangeRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_selector_string(selector_string);
  request.set_steps_to_omit(steps_to_omit);
  request.set_minimum_frequency(minimum_frequency);
  request.set_maximum_frequency(maximum_frequency);
  request.set_minimum_reference_level(minimum_reference_level);
  request.set_maximum_reference_level(maximum_reference_level);

  auto response = SelfCalibrateRangeResponse{};

  raise_if_error(
      stub->SelfCalibrateRange(&context, request, &response));

  return response;
}

SendSoftwareEdgeAdvanceTriggerResponse
send_software_edge_advance_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeAdvanceTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = SendSoftwareEdgeAdvanceTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeAdvanceTrigger(&context, request, &response));

  return response;
}

SendSoftwareEdgeStartTriggerResponse
send_software_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& instrument)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeStartTriggerRequest{};
  request.mutable_instrument()->CopyFrom(instrument);

  auto response = SendSoftwareEdgeStartTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeStartTrigger(&context, request, &response));

  return response;
}

SetAttributeF32Response
set_attribute_f32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const float& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeF32Response{};

  raise_if_error(
      stub->SetAttributeF32(&context, request, &response));

  return response;
}

SetAttributeF32ArrayResponse
set_attribute_f32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<float>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeF32ArrayResponse{};

  raise_if_error(
      stub->SetAttributeF32Array(&context, request, &response));

  return response;
}

SetAttributeF64Response
set_attribute_f64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const double& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeF64Response{};

  raise_if_error(
      stub->SetAttributeF64(&context, request, &response));

  return response;
}

SetAttributeF64ArrayResponse
set_attribute_f64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<double>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeF64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeF64ArrayResponse{};

  raise_if_error(
      stub->SetAttributeF64Array(&context, request, &response));

  return response;
}

SetAttributeI16Response
set_attribute_i16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::int32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeI16Response{};

  raise_if_error(
      stub->SetAttributeI16(&context, request, &response));

  return response;
}

SetAttributeI32Response
set_attribute_i32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const simple_variant<NiRFmxInstrInt32AttributeValues, pb::int32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attr_val_ptr = attr_val.get_if<NiRFmxInstrInt32AttributeValues>();
  const auto attr_val_raw_ptr = attr_val.get_if<pb::int32>();
  if (attr_val_ptr) {
    request.set_attr_val(*attr_val_ptr);
  }
  else if (attr_val_raw_ptr) {
    request.set_attr_val_raw(*attr_val_raw_ptr);
  }

  auto response = SetAttributeI32Response{};

  raise_if_error(
      stub->SetAttributeI32(&context, request, &response));

  return response;
}

SetAttributeI32ArrayResponse
set_attribute_i32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<pb::int32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeI32ArrayResponse{};

  raise_if_error(
      stub->SetAttributeI32Array(&context, request, &response));

  return response;
}

SetAttributeI64Response
set_attribute_i64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::int64& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI64Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeI64Response{};

  raise_if_error(
      stub->SetAttributeI64(&context, request, &response));

  return response;
}

SetAttributeI64ArrayResponse
set_attribute_i64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<pb::int64>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeI64ArrayResponse{};

  raise_if_error(
      stub->SetAttributeI64Array(&context, request, &response));

  return response;
}

SetAttributeI8Response
set_attribute_i8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::int32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeI8Response{};

  raise_if_error(
      stub->SetAttributeI8(&context, request, &response));

  return response;
}

SetAttributeI8ArrayResponse
set_attribute_i8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<pb::int32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeI8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeI8ArrayResponse{};

  raise_if_error(
      stub->SetAttributeI8Array(&context, request, &response));

  return response;
}

SetAttributeNIComplexDoubleArrayResponse
set_attribute_ni_complex_double_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<nidevice_grpc::NIComplexNumber>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeNIComplexDoubleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeNIComplexDoubleArrayResponse{};

  raise_if_error(
      stub->SetAttributeNIComplexDoubleArray(&context, request, &response));

  return response;
}

SetAttributeNIComplexSingleArrayResponse
set_attribute_ni_complex_single_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<nidevice_grpc::NIComplexNumberF32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeNIComplexSingleArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeNIComplexSingleArrayResponse{};

  raise_if_error(
      stub->SetAttributeNIComplexSingleArray(&context, request, &response));

  return response;
}

SetAttributeStringResponse
set_attribute_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::string& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeStringRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeStringResponse{};

  raise_if_error(
      stub->SetAttributeString(&context, request, &response));

  return response;
}

SetAttributeU16Response
set_attribute_u16(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::uint32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU16Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU16Response{};

  raise_if_error(
      stub->SetAttributeU16(&context, request, &response));

  return response;
}

SetAttributeU32Response
set_attribute_u32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::uint32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU32Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU32Response{};

  raise_if_error(
      stub->SetAttributeU32(&context, request, &response));

  return response;
}

SetAttributeU32ArrayResponse
set_attribute_u32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<pb::uint32>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU32ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeU32ArrayResponse{};

  raise_if_error(
      stub->SetAttributeU32Array(&context, request, &response));

  return response;
}

SetAttributeU64ArrayResponse
set_attribute_u64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const std::vector<pb::uint64>& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU64ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  copy_array(attr_val, request.mutable_attr_val());

  auto response = SetAttributeU64ArrayResponse{};

  raise_if_error(
      stub->SetAttributeU64Array(&context, request, &response));

  return response;
}

SetAttributeU8Response
set_attribute_u8(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::uint32& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU8Request{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU8Response{};

  raise_if_error(
      stub->SetAttributeU8(&context, request, &response));

  return response;
}

SetAttributeU8ArrayResponse
set_attribute_u8_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const NiRFmxInstrAttribute& attribute_id, const pb::string& attr_val)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeU8ArrayRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attr_val(attr_val);

  auto response = SetAttributeU8ArrayResponse{};

  raise_if_error(
      stub->SetAttributeU8Array(&context, request, &response));

  return response;
}

TimestampFromValuesResponse
timestamp_from_values(const StubPtr& stub, const pb::int64& seconds_since1970, const double& fractional_seconds)
{
  ::grpc::ClientContext context;

  auto request = TimestampFromValuesRequest{};
  request.set_seconds_since1970(seconds_since1970);
  request.set_fractional_seconds(fractional_seconds);

  auto response = TimestampFromValuesResponse{};

  raise_if_error(
      stub->TimestampFromValues(&context, request, &response));

  return response;
}

ValuesFromTimestampResponse
values_from_timestamp(const StubPtr& stub, const google::protobuf::Timestamp& timestamp)
{
  ::grpc::ClientContext context;

  auto request = ValuesFromTimestampRequest{};
  request.mutable_timestamp()->CopyFrom(timestamp);

  auto response = ValuesFromTimestampResponse{};

  raise_if_error(
      stub->ValuesFromTimestamp(&context, request, &response));

  return response;
}

WaitForAcquisitionCompleteResponse
wait_for_acquisition_complete(const StubPtr& stub, const nidevice_grpc::Session& instrument, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitForAcquisitionCompleteRequest{};
  request.mutable_instrument()->CopyFrom(instrument);
  request.set_timeout(timeout);

  auto response = WaitForAcquisitionCompleteResponse{};

  raise_if_error(
      stub->WaitForAcquisitionComplete(&context, request, &response));

  return response;
}


} // namespace nirfmxinstr_grpc::experimental::client
