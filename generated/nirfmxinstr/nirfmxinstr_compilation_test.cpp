//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-RFMXINSTR Metadata
//---------------------------------------------------------------------
#include "nirfmxinstr_library.h"

namespace nirfmxinstr_grpc {

int32 BuildCalibrationPlaneString(char calibrationPlaneName[], int32 selectorStringLength, char selectorString[])
{
  return RFmxInstr_BuildCalibrationPlaneString(calibrationPlaneName, selectorStringLength, selectorString);
}

int32 BuildInstrumentString(char selectorString[], int32 instrumentNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxInstr_BuildInstrumentString(selectorString, instrumentNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildLOString(char selectorString[], int32 loIndex, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxInstr_BuildLOString(selectorString, loIndex, selectorStringOutLength, selectorStringOut);
}

int32 BuildModuleString(char selectorString[], char moduleName[], int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxInstr_BuildModuleString(selectorString, moduleName, selectorStringOutLength, selectorStringOut);
}

int32 BuildPortString(char selectorString[], char portName[], char deviceName[], int32 channelNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxInstr_BuildPortString2(selectorString, portName, deviceName, channelNumber, selectorStringOutLength, selectorStringOut);
}

int32 CfgExternalAttenuationInterpolationLinear(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], int32 format)
{
  return RFmxInstr_CfgExternalAttenuationInterpolationLinear(instrumentHandle, selectorString, tableName, format);
}

int32 CfgExternalAttenuationInterpolationNearest(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  return RFmxInstr_CfgExternalAttenuationInterpolationNearest(instrumentHandle, selectorString, tableName);
}

int32 CfgExternalAttenuationInterpolationSpline(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  return RFmxInstr_CfgExternalAttenuationInterpolationSpline(instrumentHandle, selectorString, tableName);
}

int32 CfgExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], float64 frequency[], float64 externalAttenuation[], int32 arraySize)
{
  return RFmxInstr_CfgExternalAttenuationTable(instrumentHandle, selectorString, tableName, frequency, externalAttenuation, arraySize);
}

int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  return RFmxInstr_CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  return RFmxInstr_CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  return RFmxInstr_CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 CfgSParameterExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], float64 frequency[], int32 frequencyArraySize, NIComplexDouble sParameters[], int32 sParameterTableSize, int32 numberOfPorts, int32 sParameterOrientation)
{
  return RFmxInstr_CfgSParameterExternalAttenuationTable(instrumentHandle, selectorString, tableName, frequency, frequencyArraySize, sParameters, sParameterTableSize, numberOfPorts, sParameterOrientation);
}

int32 CfgSParameterExternalAttenuationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sParameterType)
{
  return RFmxInstr_CfgSParameterExternalAttenuationType(instrumentHandle, selectorString, sParameterType);
}

int32 CheckAcquisitionStatus(niRFmxInstrHandle instrumentHandle, int32* acquisitionDone)
{
  return RFmxInstr_CheckAcquisitionStatus(instrumentHandle, acquisitionDone);
}

int32 CheckIfListExists(niRFmxInstrHandle instrumentHandle, char listName[], int32* listExists, int32* personality)
{
  return RFmxInstr_CheckIfListExists(instrumentHandle, listName, listExists, personality);
}

int32 CheckIfSignalConfigurationExists(niRFmxInstrHandle instrumentHandle, char signalName[], int32* signalConfigurationExists, int32* personality)
{
  return RFmxInstr_CheckIfSignalConfigurationExists(instrumentHandle, signalName, signalConfigurationExists, personality);
}

int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  return RFmxInstr_Close(instrumentHandle, forceDestroy);
}

int32 DeleteAllExternalAttenuationTables(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxInstr_DeleteAllExternalAttenuationTables(instrumentHandle, selectorString);
}

int32 DeleteExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  return RFmxInstr_DeleteExternalAttenuationTable(instrumentHandle, selectorString, tableName);
}

int32 DisableCalibrationPlane(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxInstr_DisableCalibrationPlane(instrumentHandle, selectorString);
}

int32 EnableCalibrationPlane(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxInstr_EnableCalibrationPlane(instrumentHandle, selectorString);
}

int32 ExportSignal(niRFmxInstrHandle instrumentHandle, int32 exportSignalSource, char exportSignalOutputTerminal[])
{
  return RFmxInstr_ExportSignal(instrumentHandle, exportSignalSource, exportSignalOutputTerminal);
}

int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32* attrVal)
{
  return RFmxInstr_GetAttributeF32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeF32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64* attrVal)
{
  return RFmxInstr_GetAttributeF64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeF64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int16* attrVal)
{
  return RFmxInstr_GetAttributeI16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32* attrVal)
{
  return RFmxInstr_GetAttributeI32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeI32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64* attrVal)
{
  return RFmxInstr_GetAttributeI64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeI64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8* attrVal)
{
  return RFmxInstr_GetAttributeI8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeI8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeNIComplexDoubleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeNIComplexSingleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 arraySize, char attrVal[])
{
  return RFmxInstr_GetAttributeString(instrumentHandle, channelName, attributeID, arraySize, attrVal);
}

int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt16* attrVal)
{
  return RFmxInstr_GetAttributeU16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32* attrVal)
{
  return RFmxInstr_GetAttributeU32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeU32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeU64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8* attrVal)
{
  return RFmxInstr_GetAttributeU8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetAttributeU8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAvailablePaths(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char availablePaths[])
{
  return RFmxInstr_GetAvailablePaths(instrumentHandle, selectorString, arraySize, availablePaths);
}

int32 GetAvailablePorts(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char availablePorts[])
{
  return RFmxInstr_GetAvailablePorts(instrumentHandle, selectorString, arraySize, availablePorts);
}

int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxInstr_GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxInstr_GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 GetExternalAttenuationTableActualValue(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* externalAttenuation)
{
  return RFmxInstr_GetExternalAttenuationTableActualValue(instrumentHandle, selectorString, externalAttenuation);
}

int32 GetListNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 personalityFilter, char listNames[], int32 listNamesSize, int32* actualListNamesSize, int32 personality[], int32 personalityArraySize, int32* actualPersonalityArraySize)
{
  return RFmxInstr_GetListNames(instrumentHandle, selectorString, personalityFilter, listNames, listNamesSize, actualListNamesSize, personality, personalityArraySize, actualPersonalityArraySize);
}

int32 GetNIRFSASession(niRFmxInstrHandle instrumentHandle, uInt32* niRfsaSession)
{
  return RFmxInstr_GetNIRFSASession(instrumentHandle, niRfsaSession);
}

int32 GetNIRFSASessionArray(niRFmxInstrHandle instrumentHandle, uInt32 nirfsaSessions[], int32 arraySize, int32* actualArraySize)
{
  return RFmxInstr_GetNIRFSASessionArray(instrumentHandle, nirfsaSessions, arraySize, actualArraySize);
}

int32 GetSParameterExternalAttenuationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* sParameterType)
{
  return RFmxInstr_GetSParameterExternalAttenuationType(instrumentHandle, selectorString, sParameterType);
}

int32 GetSelfCalibrateLastDateAndTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 selfCalibrateStep, CVIAbsoluteTime* timestamp)
{
  return RFmxInstr_GetSelfCalibrateLastDateAndTime(instrumentHandle, selectorString, selfCalibrateStep, timestamp);
}

int32 GetSelfCalibrateLastTemperature(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 selfCalibrateStep, float64* temperature)
{
  return RFmxInstr_GetSelfCalibrateLastTemperature(instrumentHandle, selectorString, selfCalibrateStep, temperature);
}

int32 GetSignalConfigurationNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 personalityFilter, char signalNames[], int32 signalNamesSize, int32* actualSignalNamesSize, int32 personality[], int32 personalityArraySize, int32* actualPersonalityArraySize)
{
  return RFmxInstr_GetSignalConfigurationNames(instrumentHandle, selectorString, personalityFilter, signalNames, signalNamesSize, actualSignalNamesSize, personality, personalityArraySize, actualPersonalityArraySize);
}

int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  return RFmxInstr_Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  return RFmxInstr_InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 InitializeFromNIRFSASessionArray(uInt32 nirfsaSessions[], int32 numberOfNIRFSASessions, niRFmxInstrHandle* handleOut)
{
  return RFmxInstr_InitializeFromNIRFSASessionArray(nirfsaSessions, numberOfNIRFSASessions, handleOut);
}

int32 IsSelfCalibrateValid(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* selfCalibrateValid, int32* validSteps)
{
  return RFmxInstr_IsSelfCalibrateValid(instrumentHandle, selectorString, selfCalibrateValid, validSteps);
}

int32 LoadAllConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[], int32 loadRFInstrConfiguration)
{
  return RFmxInstr_LoadAllConfigurations(instrumentHandle, filePath, loadRFInstrConfiguration);
}

int32 LoadSParameterExternalAttenuationTableFromS2PFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], char s2PFilePath[], int32 sParameterOrientation)
{
  return RFmxInstr_LoadSParameterExternalAttenuationTableFromS2PFile(instrumentHandle, selectorString, tableName, s2PFilePath, sParameterOrientation);
}

int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID)
{
  return RFmxInstr_ResetAttribute(instrumentHandle, channelName, attributeID);
}

int32 ResetDriver(niRFmxInstrHandle instrumentHandle)
{
  return RFmxInstr_ResetDriver(instrumentHandle);
}

int32 ResetEntireSession(niRFmxInstrHandle instrumentHandle)
{
  return RFmxInstr_ResetEntireSession(instrumentHandle);
}

int32 ResetToDefault(niRFmxInstrHandle instrumentHandle)
{
  return RFmxInstr_ResetToDefault(instrumentHandle);
}

int32 SaveAllConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[])
{
  return RFmxInstr_SaveAllConfigurations(instrumentHandle, filePath);
}

int32 SelectActiveExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[])
{
  return RFmxInstr_SelectActiveExternalAttenuationTable(instrumentHandle, selectorString, tableName);
}

int32 SelfCalibrate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 stepsToOmit)
{
  return RFmxInstr_SelfCalibrate(instrumentHandle, selectorString, stepsToOmit);
}

int32 SelfCalibrateRange(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 stepsToOmit, float64 minimumFrequency, float64 maximumFrequency, float64 minimumReferenceLevel, float64 maximumReferenceLevel)
{
  return RFmxInstr_SelfCalibrateRange(instrumentHandle, selectorString, stepsToOmit, minimumFrequency, maximumFrequency, minimumReferenceLevel, maximumReferenceLevel);
}

int32 SendSoftwareEdgeAdvanceTrigger(niRFmxInstrHandle instrumentHandle)
{
  return RFmxInstr_SendSoftwareEdgeAdvanceTrigger(instrumentHandle);
}

int32 SendSoftwareEdgeStartTrigger(niRFmxInstrHandle instrumentHandle)
{
  return RFmxInstr_SendSoftwareEdgeStartTrigger(instrumentHandle);
}

int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal)
{
  return RFmxInstr_SetAttributeF32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeF32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal)
{
  return RFmxInstr_SetAttributeF64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeF64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int16 attrVal)
{
  return RFmxInstr_SetAttributeI16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal)
{
  return RFmxInstr_SetAttributeI32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeI32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal)
{
  return RFmxInstr_SetAttributeI64(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeI64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal)
{
  return RFmxInstr_SetAttributeI8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeI8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeNIComplexDoubleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeNIComplexSingleArray(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, char attrVal[])
{
  return RFmxInstr_SetAttributeString(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt16 attrVal)
{
  return RFmxInstr_SetAttributeU16(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal)
{
  return RFmxInstr_SetAttributeU32(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeU32Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeU64Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal)
{
  return RFmxInstr_SetAttributeU8(instrumentHandle, channelName, attributeID, attrVal);
}

int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  return RFmxInstr_SetAttributeU8Array(instrumentHandle, channelName, attributeID, attrVal, arraySize);
}

int32 TimestampFromValues(int64 secondsSince1970, float64 fractionalSeconds, CVIAbsoluteTime* timestamp)
{
  return RFmxInstr_TimestampFromValues(secondsSince1970, fractionalSeconds, timestamp);
}

int32 ValuesFromTimestamp(CVIAbsoluteTime timestamp, int64* secondsSince1970, float64* fractionalSeconds)
{
  return RFmxInstr_ValuesFromTimestamp(timestamp, secondsSince1970, fractionalSeconds);
}

int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  return RFmxInstr_WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 FetchRawIQData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordsToFetch, int64 samplesToRead, float64* x0, float64* dx, NIComplexSingle data[], int32 arraySize, int32* actualArraySize, void* reserved)
{
  return RFmxInstr_FetchRawIQData(instrumentHandle, selectorString, timeout, recordsToFetch, samplesToRead, x0, dx, data, arraySize, actualArraySize, reserved);
}

}  // namespace nirfmxinstr_grpc
