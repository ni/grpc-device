//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-RFMXINSTR
//---------------------------------------------------------------------
#ifndef NIRFMXINSTR_GRPC_LIBRARY_H
#define NIRFMXINSTR_GRPC_LIBRARY_H

#include "nirfmxinstr_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxinstr_grpc {

class NiRFmxInstrLibrary : public nirfmxinstr_grpc::NiRFmxInstrLibraryInterface {
 public:
  NiRFmxInstrLibrary();
  explicit NiRFmxInstrLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxInstrLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 BuildCalibrationPlaneString(char calibrationPlaneName[], int32 selectorStringLength, char selectorString[]);
  int32 BuildInstrumentString(char selectorString[], int32 instrumentNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildLOString(char selectorString[], int32 loIndex, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildModuleString(char selectorString[], char moduleName[], int32 selectorStringOutLength, char selectorStringOut[]);
  int32 BuildPortString(char selectorString[], char portName[], char deviceName[], int32 channelNumber, int32 selectorStringOutLength, char selectorStringOut[]);
  int32 CfgExternalAttenuationInterpolationLinear(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], int32 format);
  int32 CfgExternalAttenuationInterpolationNearest(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[]);
  int32 CfgExternalAttenuationInterpolationSpline(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[]);
  int32 CfgExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], float64 frequency[], float64 externalAttenuation[], int32 arraySize);
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency);
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue);
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue);
  int32 CfgSParameterExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], float64 frequency[], int32 frequencyArraySize, NIComplexDouble sParameters[], int32 sParameterTableSize, int32 numberOfPorts, int32 sParameterOrientation);
  int32 CfgSParameterExternalAttenuationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sParameterType);
  int32 CheckAcquisitionStatus(niRFmxInstrHandle instrumentHandle, int32* acquisitionDone);
  int32 CheckIfListExists(niRFmxInstrHandle instrumentHandle, char listName[], int32* listExists, int32* personality);
  int32 CheckIfSignalConfigurationExists(niRFmxInstrHandle instrumentHandle, char signalName[], int32* signalConfigurationExists, int32* personality);
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy);
  int32 DeleteAllExternalAttenuationTables(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 DeleteExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[]);
  int32 DisableCalibrationPlane(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 EnableCalibrationPlane(niRFmxInstrHandle instrumentHandle, char selectorString[]);
  int32 ExportSignal(niRFmxInstrHandle instrumentHandle, int32 exportSignalSource, char exportSignalOutputTerminal[]);
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32* attrVal);
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64* attrVal);
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int16* attrVal);
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32* attrVal);
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64* attrVal);
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8* attrVal);
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 arraySize, char attrVal[]);
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt16* attrVal);
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32* attrVal);
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8* attrVal);
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize);
  int32 GetAvailablePorts(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, char availablePorts[]);
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 GetExternalAttenuationTableActualValue(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* externalAttenuation);
  int32 GetListNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 personalityFilter, char listNames[], int32 listNamesSize, int32* actualListNamesSize, int32 personality[], int32 personalityArraySize, int32* actualPersonalityArraySize);
  int32 GetNIRFSASession(niRFmxInstrHandle instrumentHandle, uInt32* niRfsaSession);
  int32 GetNIRFSASessionArray(niRFmxInstrHandle instrumentHandle, uInt32 nirfsaSessions[], int32 arraySize, int32* actualArraySize);
  int32 GetSParameterExternalAttenuationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* sParameterType);
  int32 GetSelfCalibrateLastDateAndTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 selfCalibrateStep, CVIAbsoluteTime* timestamp);
  int32 GetSelfCalibrateLastTemperature(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 selfCalibrateStep, float64* temperature);
  int32 GetSignalConfigurationNames(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 personalityFilter, char signalNames[], int32 signalNamesSize, int32* actualSignalNamesSize, int32 personality[], int32 personalityArraySize, int32* actualPersonalityArraySize);
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession);
  int32 InitializeWithChannel(char resourceName[], char optionString[], char channelName[], niRFmxInstrHandle* handleOut, int32* isNewSession);
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut);
  int32 InitializeFromNIRFSASessionArray(uInt32 nirfsaSessions[], int32 numberOfNIRFSASessions, niRFmxInstrHandle* handleOut);
  int32 IsSelfCalibrateValid(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* selfCalibrateValid, int32* validSteps);
  int32 LoadAllConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[], int32 loadRFInstrConfiguration);
  int32 LoadSParameterExternalAttenuationTableFromS2PFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[], char s2PFilePath[], int32 sParameterOrientation);
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID);
  int32 ResetDriver(niRFmxInstrHandle instrumentHandle);
  int32 ResetEntireSession(niRFmxInstrHandle instrumentHandle);
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle);
  int32 SaveAllConfigurations(niRFmxInstrHandle instrumentHandle, char filePath[]);
  int32 SelectActiveExternalAttenuationTable(niRFmxInstrHandle instrumentHandle, char selectorString[], char tableName[]);
  int32 SelfCalibrate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 stepsToOmit);
  int32 SelfCalibrateRange(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 stepsToOmit, float64 minimumFrequency, float64 maximumFrequency, float64 minimumReferenceLevel, float64 maximumReferenceLevel);
  int32 SendSoftwareEdgeAdvanceTrigger(niRFmxInstrHandle instrumentHandle);
  int32 SendSoftwareEdgeStartTrigger(niRFmxInstrHandle instrumentHandle);
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal);
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float32 attrVal[], int32 arraySize);
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal);
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, float64 attrVal[], int32 arraySize);
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int16 attrVal);
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal);
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int32 attrVal[], int32 arraySize);
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal);
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int64 attrVal[], int32 arraySize);
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal);
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, int8 attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize);
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize);
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, char attrVal[]);
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt16 attrVal);
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal);
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt32 attrVal[], int32 arraySize);
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt64 attrVal[], int32 arraySize);
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal);
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char channelName[], int32 attributeID, uInt8 attrVal[], int32 arraySize);
  int32 TimestampFromValues(int64 secondsSince1970, float64 fractionalSeconds, CVIAbsoluteTime* timestamp);
  int32 ValuesFromTimestamp(CVIAbsoluteTime timestamp, int64* secondsSince1970, float64* fractionalSeconds);
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout);

 private:
  using BuildCalibrationPlaneStringPtr = decltype(&RFmxInstr_BuildCalibrationPlaneString);
  using BuildInstrumentStringPtr = decltype(&RFmxInstr_BuildInstrumentString);
  using BuildLOStringPtr = decltype(&RFmxInstr_BuildLOString);
  using BuildModuleStringPtr = decltype(&RFmxInstr_BuildModuleString);
  using BuildPortStringPtr = decltype(&RFmxInstr_BuildPortString2);
  using CfgExternalAttenuationInterpolationLinearPtr = decltype(&RFmxInstr_CfgExternalAttenuationInterpolationLinear);
  using CfgExternalAttenuationInterpolationNearestPtr = decltype(&RFmxInstr_CfgExternalAttenuationInterpolationNearest);
  using CfgExternalAttenuationInterpolationSplinePtr = decltype(&RFmxInstr_CfgExternalAttenuationInterpolationSpline);
  using CfgExternalAttenuationTablePtr = decltype(&RFmxInstr_CfgExternalAttenuationTable);
  using CfgFrequencyReferencePtr = decltype(&RFmxInstr_CfgFrequencyReference);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxInstr_CfgMechanicalAttenuation);
  using CfgRFAttenuationPtr = decltype(&RFmxInstr_CfgRFAttenuation);
  using CfgSParameterExternalAttenuationTablePtr = decltype(&RFmxInstr_CfgSParameterExternalAttenuationTable);
  using CfgSParameterExternalAttenuationTypePtr = decltype(&RFmxInstr_CfgSParameterExternalAttenuationType);
  using CheckAcquisitionStatusPtr = decltype(&RFmxInstr_CheckAcquisitionStatus);
  using CheckIfListExistsPtr = decltype(&RFmxInstr_CheckIfListExists);
  using CheckIfSignalConfigurationExistsPtr = decltype(&RFmxInstr_CheckIfSignalConfigurationExists);
  using ClosePtr = decltype(&RFmxInstr_Close);
  using DeleteAllExternalAttenuationTablesPtr = decltype(&RFmxInstr_DeleteAllExternalAttenuationTables);
  using DeleteExternalAttenuationTablePtr = decltype(&RFmxInstr_DeleteExternalAttenuationTable);
  using DisableCalibrationPlanePtr = decltype(&RFmxInstr_DisableCalibrationPlane);
  using EnableCalibrationPlanePtr = decltype(&RFmxInstr_EnableCalibrationPlane);
  using ExportSignalPtr = decltype(&RFmxInstr_ExportSignal);
  using GetAttributeF32Ptr = decltype(&RFmxInstr_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxInstr_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxInstr_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxInstr_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxInstr_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxInstr_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxInstr_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxInstr_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxInstr_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxInstr_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxInstr_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxInstr_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxInstr_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxInstr_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxInstr_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxInstr_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxInstr_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxInstr_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxInstr_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxInstr_GetAttributeU8Array);
  using GetAvailablePortsPtr = decltype(&RFmxInstr_GetAvailablePorts);
  using GetErrorPtr = decltype(&RFmxInstr_GetError);
  using GetErrorStringPtr = decltype(&RFmxInstr_GetErrorString);
  using GetExternalAttenuationTableActualValuePtr = decltype(&RFmxInstr_GetExternalAttenuationTableActualValue);
  using GetListNamesPtr = decltype(&RFmxInstr_GetListNames);
  using GetNIRFSASessionPtr = decltype(&RFmxInstr_GetNIRFSASession);
  using GetNIRFSASessionArrayPtr = decltype(&RFmxInstr_GetNIRFSASessionArray);
  using GetSParameterExternalAttenuationTypePtr = decltype(&RFmxInstr_GetSParameterExternalAttenuationType);
  using GetSelfCalibrateLastDateAndTimePtr = decltype(&RFmxInstr_GetSelfCalibrateLastDateAndTime);
  using GetSelfCalibrateLastTemperaturePtr = decltype(&RFmxInstr_GetSelfCalibrateLastTemperature);
  using GetSignalConfigurationNamesPtr = decltype(&RFmxInstr_GetSignalConfigurationNames);
  using InitializePtr = decltype(&RFmxInstr_Initialize);
  using InitializeWithChannelPtr = decltype(&RFmxInstr_InitializeWithChannel);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxInstr_InitializeFromNIRFSASession);
  using InitializeFromNIRFSASessionArrayPtr = decltype(&RFmxInstr_InitializeFromNIRFSASessionArray);
  using IsSelfCalibrateValidPtr = decltype(&RFmxInstr_IsSelfCalibrateValid);
  using LoadAllConfigurationsPtr = decltype(&RFmxInstr_LoadAllConfigurations);
  using LoadSParameterExternalAttenuationTableFromS2PFilePtr = decltype(&RFmxInstr_LoadSParameterExternalAttenuationTableFromS2PFile);
  using ResetAttributePtr = decltype(&RFmxInstr_ResetAttribute);
  using ResetDriverPtr = decltype(&RFmxInstr_ResetDriver);
  using ResetEntireSessionPtr = decltype(&RFmxInstr_ResetEntireSession);
  using ResetToDefaultPtr = decltype(&RFmxInstr_ResetToDefault);
  using SaveAllConfigurationsPtr = decltype(&RFmxInstr_SaveAllConfigurations);
  using SelectActiveExternalAttenuationTablePtr = decltype(&RFmxInstr_SelectActiveExternalAttenuationTable);
  using SelfCalibratePtr = decltype(&RFmxInstr_SelfCalibrate);
  using SelfCalibrateRangePtr = decltype(&RFmxInstr_SelfCalibrateRange);
  using SendSoftwareEdgeAdvanceTriggerPtr = decltype(&RFmxInstr_SendSoftwareEdgeAdvanceTrigger);
  using SendSoftwareEdgeStartTriggerPtr = decltype(&RFmxInstr_SendSoftwareEdgeStartTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxInstr_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxInstr_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxInstr_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxInstr_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxInstr_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxInstr_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxInstr_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxInstr_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxInstr_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxInstr_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxInstr_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxInstr_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxInstr_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxInstr_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxInstr_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxInstr_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxInstr_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxInstr_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxInstr_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxInstr_SetAttributeU8Array);
  using TimestampFromValuesPtr = decltype(&RFmxInstr_TimestampFromValues);
  using ValuesFromTimestampPtr = decltype(&RFmxInstr_ValuesFromTimestamp);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxInstr_WaitForAcquisitionComplete);

  typedef struct FunctionPointers {
    BuildCalibrationPlaneStringPtr BuildCalibrationPlaneString;
    BuildInstrumentStringPtr BuildInstrumentString;
    BuildLOStringPtr BuildLOString;
    BuildModuleStringPtr BuildModuleString;
    BuildPortStringPtr BuildPortString;
    CfgExternalAttenuationInterpolationLinearPtr CfgExternalAttenuationInterpolationLinear;
    CfgExternalAttenuationInterpolationNearestPtr CfgExternalAttenuationInterpolationNearest;
    CfgExternalAttenuationInterpolationSplinePtr CfgExternalAttenuationInterpolationSpline;
    CfgExternalAttenuationTablePtr CfgExternalAttenuationTable;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgSParameterExternalAttenuationTablePtr CfgSParameterExternalAttenuationTable;
    CfgSParameterExternalAttenuationTypePtr CfgSParameterExternalAttenuationType;
    CheckAcquisitionStatusPtr CheckAcquisitionStatus;
    CheckIfListExistsPtr CheckIfListExists;
    CheckIfSignalConfigurationExistsPtr CheckIfSignalConfigurationExists;
    ClosePtr Close;
    DeleteAllExternalAttenuationTablesPtr DeleteAllExternalAttenuationTables;
    DeleteExternalAttenuationTablePtr DeleteExternalAttenuationTable;
    DisableCalibrationPlanePtr DisableCalibrationPlane;
    EnableCalibrationPlanePtr EnableCalibrationPlane;
    ExportSignalPtr ExportSignal;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetAvailablePortsPtr GetAvailablePorts;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    GetExternalAttenuationTableActualValuePtr GetExternalAttenuationTableActualValue;
    GetListNamesPtr GetListNames;
    GetNIRFSASessionPtr GetNIRFSASession;
    GetNIRFSASessionArrayPtr GetNIRFSASessionArray;
    GetSParameterExternalAttenuationTypePtr GetSParameterExternalAttenuationType;
    GetSelfCalibrateLastDateAndTimePtr GetSelfCalibrateLastDateAndTime;
    GetSelfCalibrateLastTemperaturePtr GetSelfCalibrateLastTemperature;
    GetSignalConfigurationNamesPtr GetSignalConfigurationNames;
    InitializePtr Initialize;
    InitializeWithChannelPtr InitializeWithChannel;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitializeFromNIRFSASessionArrayPtr InitializeFromNIRFSASessionArray;
    IsSelfCalibrateValidPtr IsSelfCalibrateValid;
    LoadAllConfigurationsPtr LoadAllConfigurations;
    LoadSParameterExternalAttenuationTableFromS2PFilePtr LoadSParameterExternalAttenuationTableFromS2PFile;
    ResetAttributePtr ResetAttribute;
    ResetDriverPtr ResetDriver;
    ResetEntireSessionPtr ResetEntireSession;
    ResetToDefaultPtr ResetToDefault;
    SaveAllConfigurationsPtr SaveAllConfigurations;
    SelectActiveExternalAttenuationTablePtr SelectActiveExternalAttenuationTable;
    SelfCalibratePtr SelfCalibrate;
    SelfCalibrateRangePtr SelfCalibrateRange;
    SendSoftwareEdgeAdvanceTriggerPtr SendSoftwareEdgeAdvanceTrigger;
    SendSoftwareEdgeStartTriggerPtr SendSoftwareEdgeStartTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    TimestampFromValuesPtr TimestampFromValues;
    ValuesFromTimestampPtr ValuesFromTimestamp;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxinstr_grpc

#endif  // NIRFMXINSTR_GRPC_LIBRARY_H
