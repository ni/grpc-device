//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-MXLCTERMINALADAPTOR-RESTRICTED
//---------------------------------------------------------------------
#ifndef NIMXLCTERMINALADAPTOR_RESTRICTED_GRPC_LIBRARY_WRAPPER_H
#define NIMXLCTERMINALADAPTOR_RESTRICTED_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>
#include <TerminalAdaptorTypes.h>

namespace nimxlcterminaladaptor_restricted_grpc {

class NimxlcTerminalAdaptorRestrictedLibraryInterface {
 public:
  virtual ~NimxlcTerminalAdaptorRestrictedLibraryInterface() {}

  virtual nimxlc_Session createSession(const char hostname[], nierr_Status* c_status) = 0;
  virtual void destroySession(nimxlc_Session session) = 0;
  virtual void refreshTerminalCache(nimxlc_Session session, nierr_Status* c_status) = 0;
  virtual bool hasTerminalInformationChanged(nimxlc_Session session, uint32_t systemChangeNumber, nierr_Status* c_status) = 0;
  virtual uint32_t getSystemChangeNumber(nimxlc_Session session, nierr_Status* c_status) = 0;
  virtual nimxlc_DeviceContainer getDeviceContainer(nimxlc_Session session, nierr_Status* c_status) = 0;
  virtual nimxlc_DeviceIterator DeviceContainer_begin(nimxlc_DeviceContainer container) = 0;
  virtual void DeviceIterator_next(nimxlc_DeviceIterator* iterator) = 0;
  virtual nimxlc_TerminalContainer DeviceIterator_getTerminalContainer(nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator, nierr_Status* cStatus) = 0;
  virtual const char* DeviceIterator_getDeviceName(nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator, nierr_Status* cStatus) = 0;
  virtual bool DeviceIterator_supportsOnBoardClock(nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator, nierr_Status* cStatus) = 0;
  virtual bool DeviceIterator_isEnd(nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator) = 0;
  virtual void DeviceContainer_destroy(nimxlc_DeviceContainer container) = 0;
  virtual nimxlc_TerminalIterator TerminalContainer_begin(nimxlc_TerminalContainer container) = 0;
  virtual void TerminalIterator_next(nimxlc_TerminalIterator* iterator) = 0;
  virtual bool TerminalIterator_isEnd(nimxlc_TerminalContainer container, nimxlc_TerminalIterator iterator) = 0;
  virtual void TerminalContainer_destroy(nimxlc_TerminalContainer container) = 0;
  virtual const char* TerminalIterator_getTerminalName(nimxlc_TerminalContainer container, nimxlc_TerminalIterator iterator, nierr_Status* cStatus) = 0;
  virtual const char* TerminalIterator_getVisibility(nimxlc_TerminalContainer container, nimxlc_TerminalIterator iterator, nierr_Status* cStatus) = 0;
};

}  // namespace nimxlcterminaladaptor_restricted_grpc
#endif  // NIMXLCTERMINALADAPTOR_RESTRICTED_GRPC_LIBRARY_WRAPPER_H
