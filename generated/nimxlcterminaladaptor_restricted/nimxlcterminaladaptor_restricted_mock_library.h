//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-MXLCTERMINALADAPTOR-RESTRICTED
//---------------------------------------------------------------------
#ifndef NIMXLCTERMINALADAPTOR_RESTRICTED_GRPC_MOCK_LIBRARY_H
#define NIMXLCTERMINALADAPTOR_RESTRICTED_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nimxlcterminaladaptor_restricted_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NimxlcTerminalAdaptorRestrictedMockLibrary : public nimxlcterminaladaptor_restricted_grpc::NimxlcTerminalAdaptorRestrictedLibraryInterface {
 public:
  MOCK_METHOD(nimxlc_Session, createSession, (const char hostname[], nierr_Status* c_status), (override));
  MOCK_METHOD(void, destroySession, (nimxlc_Session session), (override));
  MOCK_METHOD(void, refreshTerminalCache, (nimxlc_Session session, nierr_Status* c_status), (override));
  MOCK_METHOD(bool, hasTerminalInformationChanged, (nimxlc_Session session, uint32_t systemChangeNumber, nierr_Status* c_status), (override));
  MOCK_METHOD(uint32_t, getSystemChangeNumber, (nimxlc_Session session, nierr_Status* c_status), (override));
  MOCK_METHOD(nimxlc_DeviceContainer, getDeviceContainer, (nimxlc_Session session, nierr_Status* c_status), (override));
  MOCK_METHOD(nimxlc_DeviceIterator, DeviceContainer_begin, (nimxlc_DeviceContainer container), (override));
  MOCK_METHOD(void, DeviceIterator_next, (nimxlc_DeviceIterator* iterator), (override));
  MOCK_METHOD(nimxlc_TerminalContainer, DeviceIterator_getTerminalContainer, (nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator, nierr_Status* cStatus), (override));
  MOCK_METHOD(const char*, DeviceIterator_getDeviceName, (nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator, nierr_Status* cStatus), (override));
  MOCK_METHOD(bool, DeviceIterator_supportsOnBoardClock, (nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator, nierr_Status* cStatus), (override));
  MOCK_METHOD(bool, DeviceIterator_isEnd, (nimxlc_DeviceContainer container, nimxlc_DeviceIterator iterator), (override));
  MOCK_METHOD(void, DeviceContainer_destroy, (nimxlc_DeviceContainer container), (override));
  MOCK_METHOD(nimxlc_TerminalIterator, TerminalContainer_begin, (nimxlc_TerminalContainer container), (override));
  MOCK_METHOD(void, TerminalIterator_next, (nimxlc_TerminalIterator* iterator), (override));
  MOCK_METHOD(bool, TerminalIterator_isEnd, (nimxlc_TerminalContainer container, nimxlc_TerminalIterator iterator), (override));
  MOCK_METHOD(void, TerminalContainer_destroy, (nimxlc_TerminalContainer container), (override));
  MOCK_METHOD(const char*, TerminalIterator_getTerminalName, (nimxlc_TerminalContainer container, nimxlc_TerminalIterator iterator, nierr_Status* cStatus), (override));
  MOCK_METHOD(const char*, TerminalIterator_getVisibility, (nimxlc_TerminalContainer container, nimxlc_TerminalIterator iterator, nierr_Status* cStatus), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIMXLCTERMINALADAPTOR_RESTRICTED_GRPC_MOCK_LIBRARY_H
