//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SWITCH Metadata
//---------------------------------------------------------------------
#include "niswitch_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niswitch_64.dll";
#else
static const char* kLibraryName = "libniswitch.so";
#endif

namespace ni {
namespace niswitch {
namespace grpc {

NiSwitchLibrary::NiSwitchLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AbortScan = reinterpret_cast<AbortScanPtr>(shared_library_.get_function_pointer("niSwitch_AbortScan"));
  function_pointers_.CanConnect = reinterpret_cast<CanConnectPtr>(shared_library_.get_function_pointer("niSwitch_CanConnect"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niSwitch_Commit"));
  function_pointers_.Connect = reinterpret_cast<ConnectPtr>(shared_library_.get_function_pointer("niSwitch_Connect"));
  function_pointers_.ConnectMultiple = reinterpret_cast<ConnectMultiplePtr>(shared_library_.get_function_pointer("niSwitch_ConnectMultiple"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niSwitch_Disable"));
  function_pointers_.Disconnect = reinterpret_cast<DisconnectPtr>(shared_library_.get_function_pointer("niSwitch_Disconnect"));
  function_pointers_.DisconnectAll = reinterpret_cast<DisconnectAllPtr>(shared_library_.get_function_pointer("niSwitch_DisconnectAll"));
  function_pointers_.DisconnectMultiple = reinterpret_cast<DisconnectMultiplePtr>(shared_library_.get_function_pointer("niSwitch_DisconnectMultiple"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViInt32"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViReal64"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViString"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niSwitch_GetChannelName"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niSwitch_GetError"));
  function_pointers_.GetPath = reinterpret_cast<GetPathPtr>(shared_library_.get_function_pointer("niSwitch_GetPath"));
  function_pointers_.GetRelayCount = reinterpret_cast<GetRelayCountPtr>(shared_library_.get_function_pointer("niSwitch_GetRelayCount"));
  function_pointers_.GetRelayName = reinterpret_cast<GetRelayNamePtr>(shared_library_.get_function_pointer("niSwitch_GetRelayName"));
  function_pointers_.GetRelayPosition = reinterpret_cast<GetRelayPositionPtr>(shared_library_.get_function_pointer("niSwitch_GetRelayPosition"));
  function_pointers_.InitWithTopology = reinterpret_cast<InitWithTopologyPtr>(shared_library_.get_function_pointer("niSwitch_InitWithTopology"));
  function_pointers_.InitiateScan = reinterpret_cast<InitiateScanPtr>(shared_library_.get_function_pointer("niSwitch_InitiateScan"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niSwitch_LockSession"));
  function_pointers_.RelayControl = reinterpret_cast<RelayControlPtr>(shared_library_.get_function_pointer("niSwitch_RelayControl"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niSwitch_ResetWithDefaults"));
  function_pointers_.RouteScanAdvancedOutput = reinterpret_cast<RouteScanAdvancedOutputPtr>(shared_library_.get_function_pointer("niSwitch_RouteScanAdvancedOutput"));
  function_pointers_.RouteTriggerInput = reinterpret_cast<RouteTriggerInputPtr>(shared_library_.get_function_pointer("niSwitch_RouteTriggerInput"));
  function_pointers_.SendSoftwareTrigger = reinterpret_cast<SendSoftwareTriggerPtr>(shared_library_.get_function_pointer("niSwitch_SendSoftwareTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViInt32"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViReal64"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViString"));
  function_pointers_.SetPath = reinterpret_cast<SetPathPtr>(shared_library_.get_function_pointer("niSwitch_SetPath"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niSwitch_UnlockSession"));
  function_pointers_.WaitForDebounce = reinterpret_cast<WaitForDebouncePtr>(shared_library_.get_function_pointer("niSwitch_WaitForDebounce"));
  function_pointers_.WaitForScanComplete = reinterpret_cast<WaitForScanCompletePtr>(shared_library_.get_function_pointer("niSwitch_WaitForScanComplete"));
  function_pointers_.close = reinterpret_cast<closePtr>(shared_library_.get_function_pointer("niSwitch_close"));
  function_pointers_.error_message = reinterpret_cast<error_messagePtr>(shared_library_.get_function_pointer("niSwitch_error_message"));
  function_pointers_.reset = reinterpret_cast<resetPtr>(shared_library_.get_function_pointer("niSwitch_reset"));
  function_pointers_.self_test = reinterpret_cast<self_testPtr>(shared_library_.get_function_pointer("niSwitch_self_test"));
}

NiSwitchLibrary::~NiSwitchLibrary()
{
}

::grpc::Status NiSwitchLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiSwitchLibrary::AbortScan(ViSession vi)
{
  if (!function_pointers_.AbortScan) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_AbortScan.");
  }
#if defined(_MSC_VER)
  return niSwitch_AbortScan(vi);
#else
  return function_pointers_.AbortScan(vi);
#endif
}

ViStatus NiSwitchLibrary::CanConnect(ViSession vi, ViConstString channel1, ViConstString channel2, ViInt32* pathCapability)
{
  if (!function_pointers_.CanConnect) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_CanConnect.");
  }
#if defined(_MSC_VER)
  return niSwitch_CanConnect(vi, channel1, channel2, pathCapability);
#else
  return function_pointers_.CanConnect(vi, channel1, channel2, pathCapability);
#endif
}

ViStatus NiSwitchLibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_Commit.");
  }
#if defined(_MSC_VER)
  return niSwitch_Commit(vi);
#else
  return function_pointers_.Commit(vi);
#endif
}

ViStatus NiSwitchLibrary::Connect(ViSession vi, ViConstString channel1, ViConstString channel2)
{
  if (!function_pointers_.Connect) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_Connect.");
  }
#if defined(_MSC_VER)
  return niSwitch_Connect(vi, channel1, channel2);
#else
  return function_pointers_.Connect(vi, channel1, channel2);
#endif
}

ViStatus NiSwitchLibrary::ConnectMultiple(ViSession vi, ViConstString connectionList)
{
  if (!function_pointers_.ConnectMultiple) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_ConnectMultiple.");
  }
#if defined(_MSC_VER)
  return niSwitch_ConnectMultiple(vi, connectionList);
#else
  return function_pointers_.ConnectMultiple(vi, connectionList);
#endif
}

ViStatus NiSwitchLibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_Disable.");
  }
#if defined(_MSC_VER)
  return niSwitch_Disable(vi);
#else
  return function_pointers_.Disable(vi);
#endif
}

ViStatus NiSwitchLibrary::Disconnect(ViSession vi, ViConstString channel1, ViConstString channel2)
{
  if (!function_pointers_.Disconnect) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_Disconnect.");
  }
#if defined(_MSC_VER)
  return niSwitch_Disconnect(vi, channel1, channel2);
#else
  return function_pointers_.Disconnect(vi, channel1, channel2);
#endif
}

ViStatus NiSwitchLibrary::DisconnectAll(ViSession vi)
{
  if (!function_pointers_.DisconnectAll) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_DisconnectAll.");
  }
#if defined(_MSC_VER)
  return niSwitch_DisconnectAll(vi);
#else
  return function_pointers_.DisconnectAll(vi);
#endif
}

ViStatus NiSwitchLibrary::DisconnectMultiple(ViSession vi, ViConstString disconnectionList)
{
  if (!function_pointers_.DisconnectMultiple) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_DisconnectMultiple.");
  }
#if defined(_MSC_VER)
  return niSwitch_DisconnectMultiple(vi, disconnectionList);
#else
  return function_pointers_.DisconnectMultiple(vi, disconnectionList);
#endif
}

ViStatus NiSwitchLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 arraySize, ViChar attributeValue[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetAttributeViString(vi, channelName, attributeId, arraySize, attributeValue);
#else
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, arraySize, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelNameBuffer[])
{
  if (!function_pointers_.GetChannelName) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetChannelName.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetChannelName(vi, index, bufferSize, channelNameBuffer);
#else
  return function_pointers_.GetChannelName(vi, index, bufferSize, channelNameBuffer);
#endif
}

ViStatus NiSwitchLibrary::GetError(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[])
{
  if (!function_pointers_.GetError) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetError.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetError(vi, code, bufferSize, description);
#else
  return function_pointers_.GetError(vi, code, bufferSize, description);
#endif
}

ViStatus NiSwitchLibrary::GetPath(ViSession vi, ViConstString channel1, ViConstString channel2, ViInt32 bufferSize, ViChar path[])
{
  if (!function_pointers_.GetPath) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetPath.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetPath(vi, channel1, channel2, bufferSize, path);
#else
  return function_pointers_.GetPath(vi, channel1, channel2, bufferSize, path);
#endif
}

ViStatus NiSwitchLibrary::GetRelayCount(ViSession vi, ViConstString relayName, ViInt32* relayCount)
{
  if (!function_pointers_.GetRelayCount) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetRelayCount.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetRelayCount(vi, relayName, relayCount);
#else
  return function_pointers_.GetRelayCount(vi, relayName, relayCount);
#endif
}

ViStatus NiSwitchLibrary::GetRelayName(ViSession vi, ViInt32 index, ViInt32 relayNameBufferSize, ViChar relayNameBuffer[])
{
  if (!function_pointers_.GetRelayName) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetRelayName.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetRelayName(vi, index, relayNameBufferSize, relayNameBuffer);
#else
  return function_pointers_.GetRelayName(vi, index, relayNameBufferSize, relayNameBuffer);
#endif
}

ViStatus NiSwitchLibrary::GetRelayPosition(ViSession vi, ViConstString relayName, ViInt32* relayPosition)
{
  if (!function_pointers_.GetRelayPosition) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_GetRelayPosition.");
  }
#if defined(_MSC_VER)
  return niSwitch_GetRelayPosition(vi, relayName, relayPosition);
#else
  return function_pointers_.GetRelayPosition(vi, relayName, relayPosition);
#endif
}

ViStatus NiSwitchLibrary::InitWithTopology(ViRsrc resourceName, ViConstString topology, ViBoolean simulate, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.InitWithTopology) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_InitWithTopology.");
  }
#if defined(_MSC_VER)
  return niSwitch_InitWithTopology(resourceName, topology, simulate, resetDevice, vi);
#else
  return function_pointers_.InitWithTopology(resourceName, topology, simulate, resetDevice, vi);
#endif
}

ViStatus NiSwitchLibrary::InitiateScan(ViSession vi)
{
  if (!function_pointers_.InitiateScan) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_InitiateScan.");
  }
#if defined(_MSC_VER)
  return niSwitch_InitiateScan(vi);
#else
  return function_pointers_.InitiateScan(vi);
#endif
}

ViStatus NiSwitchLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_LockSession.");
  }
#if defined(_MSC_VER)
  return niSwitch_LockSession(vi, callerHasLock);
#else
  return function_pointers_.LockSession(vi, callerHasLock);
#endif
}

ViStatus NiSwitchLibrary::RelayControl(ViSession vi, ViConstString relayName, ViInt32 relayAction)
{
  if (!function_pointers_.RelayControl) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_RelayControl.");
  }
#if defined(_MSC_VER)
  return niSwitch_RelayControl(vi, relayName, relayAction);
#else
  return function_pointers_.RelayControl(vi, relayName, relayAction);
#endif
}

ViStatus NiSwitchLibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_ResetWithDefaults.");
  }
#if defined(_MSC_VER)
  return niSwitch_ResetWithDefaults(vi);
#else
  return function_pointers_.ResetWithDefaults(vi);
#endif
}

ViStatus NiSwitchLibrary::RouteScanAdvancedOutput(ViSession vi, ViInt32 scanAdvancedOutputConnector, ViInt32 scanAdvancedOutputBusLine, ViBoolean invert)
{
  if (!function_pointers_.RouteScanAdvancedOutput) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_RouteScanAdvancedOutput.");
  }
#if defined(_MSC_VER)
  return niSwitch_RouteScanAdvancedOutput(vi, scanAdvancedOutputConnector, scanAdvancedOutputBusLine, invert);
#else
  return function_pointers_.RouteScanAdvancedOutput(vi, scanAdvancedOutputConnector, scanAdvancedOutputBusLine, invert);
#endif
}

ViStatus NiSwitchLibrary::RouteTriggerInput(ViSession vi, ViInt32 triggerInputConnector, ViInt32 triggerInputBusLine, ViBoolean invert)
{
  if (!function_pointers_.RouteTriggerInput) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_RouteTriggerInput.");
  }
#if defined(_MSC_VER)
  return niSwitch_RouteTriggerInput(vi, triggerInputConnector, triggerInputBusLine, invert);
#else
  return function_pointers_.RouteTriggerInput(vi, triggerInputConnector, triggerInputBusLine, invert);
#endif
}

ViStatus NiSwitchLibrary::SendSoftwareTrigger(ViSession vi)
{
  if (!function_pointers_.SendSoftwareTrigger) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_SendSoftwareTrigger.");
  }
#if defined(_MSC_VER)
  return niSwitch_SendSoftwareTrigger(vi);
#else
  return function_pointers_.SendSoftwareTrigger(vi);
#endif
}

ViStatus NiSwitchLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niSwitch_SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niSwitch_SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niSwitch_SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  if (!function_pointers_.SetAttributeViString) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niSwitch_SetAttributeViString(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiSwitchLibrary::SetPath(ViSession vi, ViConstString pathList)
{
  if (!function_pointers_.SetPath) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_SetPath.");
  }
#if defined(_MSC_VER)
  return niSwitch_SetPath(vi, pathList);
#else
  return function_pointers_.SetPath(vi, pathList);
#endif
}

ViStatus NiSwitchLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_UnlockSession.");
  }
#if defined(_MSC_VER)
  return niSwitch_UnlockSession(vi, callerHasLock);
#else
  return function_pointers_.UnlockSession(vi, callerHasLock);
#endif
}

ViStatus NiSwitchLibrary::WaitForDebounce(ViSession vi, ViInt32 maximumTimeMs)
{
  if (!function_pointers_.WaitForDebounce) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_WaitForDebounce.");
  }
#if defined(_MSC_VER)
  return niSwitch_WaitForDebounce(vi, maximumTimeMs);
#else
  return function_pointers_.WaitForDebounce(vi, maximumTimeMs);
#endif
}

ViStatus NiSwitchLibrary::WaitForScanComplete(ViSession vi, ViInt32 maximumTimeMs)
{
  if (!function_pointers_.WaitForScanComplete) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_WaitForScanComplete.");
  }
#if defined(_MSC_VER)
  return niSwitch_WaitForScanComplete(vi, maximumTimeMs);
#else
  return function_pointers_.WaitForScanComplete(vi, maximumTimeMs);
#endif
}

ViStatus NiSwitchLibrary::close(ViSession vi)
{
  if (!function_pointers_.close) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_close.");
  }
#if defined(_MSC_VER)
  return niSwitch_close(vi);
#else
  return function_pointers_.close(vi);
#endif
}

ViStatus NiSwitchLibrary::error_message(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.error_message) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_error_message.");
  }
#if defined(_MSC_VER)
  return niSwitch_error_message(vi, errorCode, errorMessage);
#else
  return function_pointers_.error_message(vi, errorCode, errorMessage);
#endif
}

ViStatus NiSwitchLibrary::reset(ViSession vi)
{
  if (!function_pointers_.reset) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_reset.");
  }
#if defined(_MSC_VER)
  return niSwitch_reset(vi);
#else
  return function_pointers_.reset(vi);
#endif
}

ViStatus NiSwitchLibrary::self_test(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!function_pointers_.self_test) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niSwitch_self_test.");
  }
#if defined(_MSC_VER)
  return niSwitch_self_test(vi, selfTestResult, selfTestMessage);
#else
  return function_pointers_.self_test(vi, selfTestResult, selfTestMessage);
#endif
}

}  // namespace ni
}  // namespace niswitch
}  // namespace grpc
