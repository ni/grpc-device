//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SWITCH Metadata
//---------------------------------------------------------------------
#include "niswitch_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niswitch_64.dll";
#else
static const char* kLibraryName = "libniswitch.so";
#endif

namespace niswitch_grpc {

NiSwitchLibrary::NiSwitchLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AbortScan = reinterpret_cast<AbortScanPtr>(shared_library_.get_function_pointer("niSwitch_AbortScan"));
  function_pointers_.CanConnect = reinterpret_cast<CanConnectPtr>(shared_library_.get_function_pointer("niSwitch_CanConnect"));
  function_pointers_.CheckAttributeViBoolean = reinterpret_cast<CheckAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSwitch_CheckAttributeViBoolean"));
  function_pointers_.CheckAttributeViInt32 = reinterpret_cast<CheckAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSwitch_CheckAttributeViInt32"));
  function_pointers_.CheckAttributeViReal64 = reinterpret_cast<CheckAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSwitch_CheckAttributeViReal64"));
  function_pointers_.CheckAttributeViSession = reinterpret_cast<CheckAttributeViSessionPtr>(shared_library_.get_function_pointer("niSwitch_CheckAttributeViSession"));
  function_pointers_.CheckAttributeViString = reinterpret_cast<CheckAttributeViStringPtr>(shared_library_.get_function_pointer("niSwitch_CheckAttributeViString"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niSwitch_ClearError"));
  function_pointers_.ClearInterchangeWarnings = reinterpret_cast<ClearInterchangeWarningsPtr>(shared_library_.get_function_pointer("niSwitch_ClearInterchangeWarnings"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niSwitch_close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niSwitch_Commit"));
  function_pointers_.ConfigureScanList = reinterpret_cast<ConfigureScanListPtr>(shared_library_.get_function_pointer("niSwitch_ConfigureScanList"));
  function_pointers_.ConfigureScanTrigger = reinterpret_cast<ConfigureScanTriggerPtr>(shared_library_.get_function_pointer("niSwitch_ConfigureScanTrigger"));
  function_pointers_.Connect = reinterpret_cast<ConnectPtr>(shared_library_.get_function_pointer("niSwitch_Connect"));
  function_pointers_.ConnectMultiple = reinterpret_cast<ConnectMultiplePtr>(shared_library_.get_function_pointer("niSwitch_ConnectMultiple"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niSwitch_Disable"));
  function_pointers_.Disconnect = reinterpret_cast<DisconnectPtr>(shared_library_.get_function_pointer("niSwitch_Disconnect"));
  function_pointers_.DisconnectAll = reinterpret_cast<DisconnectAllPtr>(shared_library_.get_function_pointer("niSwitch_DisconnectAll"));
  function_pointers_.DisconnectMultiple = reinterpret_cast<DisconnectMultiplePtr>(shared_library_.get_function_pointer("niSwitch_DisconnectMultiple"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_.get_function_pointer("niSwitch_error_message"));
  function_pointers_.ErrorQuery = reinterpret_cast<ErrorQueryPtr>(shared_library_.get_function_pointer("niSwitch_error_query"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViInt32"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niSwitch_GetAttributeViString"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niSwitch_GetChannelName"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niSwitch_GetError"));
  function_pointers_.GetNextCoercionRecord = reinterpret_cast<GetNextCoercionRecordPtr>(shared_library_.get_function_pointer("niSwitch_GetNextCoercionRecord"));
  function_pointers_.GetNextInterchangeWarning = reinterpret_cast<GetNextInterchangeWarningPtr>(shared_library_.get_function_pointer("niSwitch_GetNextInterchangeWarning"));
  function_pointers_.GetPath = reinterpret_cast<GetPathPtr>(shared_library_.get_function_pointer("niSwitch_GetPath"));
  function_pointers_.GetRelayCount = reinterpret_cast<GetRelayCountPtr>(shared_library_.get_function_pointer("niSwitch_GetRelayCount"));
  function_pointers_.GetRelayName = reinterpret_cast<GetRelayNamePtr>(shared_library_.get_function_pointer("niSwitch_GetRelayName"));
  function_pointers_.GetRelayPosition = reinterpret_cast<GetRelayPositionPtr>(shared_library_.get_function_pointer("niSwitch_GetRelayPosition"));
  function_pointers_.Init = reinterpret_cast<InitPtr>(shared_library_.get_function_pointer("niSwitch_init"));
  function_pointers_.InitWithOptions = reinterpret_cast<InitWithOptionsPtr>(shared_library_.get_function_pointer("niSwitch_InitWithOptions"));
  function_pointers_.InitWithTopology = reinterpret_cast<InitWithTopologyPtr>(shared_library_.get_function_pointer("niSwitch_InitWithTopology"));
  function_pointers_.InitiateScan = reinterpret_cast<InitiateScanPtr>(shared_library_.get_function_pointer("niSwitch_InitiateScan"));
  function_pointers_.InvalidateAllAttributes = reinterpret_cast<InvalidateAllAttributesPtr>(shared_library_.get_function_pointer("niSwitch_InvalidateAllAttributes"));
  function_pointers_.IsDebounced = reinterpret_cast<IsDebouncedPtr>(shared_library_.get_function_pointer("niSwitch_IsDebounced"));
  function_pointers_.IsScanning = reinterpret_cast<IsScanningPtr>(shared_library_.get_function_pointer("niSwitch_IsScanning"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niSwitch_LockSession"));
  function_pointers_.RelayControl = reinterpret_cast<RelayControlPtr>(shared_library_.get_function_pointer("niSwitch_RelayControl"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niSwitch_reset"));
  function_pointers_.ResetInterchangeCheck = reinterpret_cast<ResetInterchangeCheckPtr>(shared_library_.get_function_pointer("niSwitch_ResetInterchangeCheck"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niSwitch_ResetWithDefaults"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niSwitch_revision_query"));
  function_pointers_.RouteScanAdvancedOutput = reinterpret_cast<RouteScanAdvancedOutputPtr>(shared_library_.get_function_pointer("niSwitch_RouteScanAdvancedOutput"));
  function_pointers_.RouteTriggerInput = reinterpret_cast<RouteTriggerInputPtr>(shared_library_.get_function_pointer("niSwitch_RouteTriggerInput"));
  function_pointers_.Scan = reinterpret_cast<ScanPtr>(shared_library_.get_function_pointer("niSwitch_Scan"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niSwitch_self_test"));
  function_pointers_.SendSoftwareTrigger = reinterpret_cast<SendSoftwareTriggerPtr>(shared_library_.get_function_pointer("niSwitch_SendSoftwareTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViInt32"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niSwitch_SetAttributeViString"));
  function_pointers_.SetContinuousScan = reinterpret_cast<SetContinuousScanPtr>(shared_library_.get_function_pointer("niSwitch_SetContinuousScan"));
  function_pointers_.SetPath = reinterpret_cast<SetPathPtr>(shared_library_.get_function_pointer("niSwitch_SetPath"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niSwitch_UnlockSession"));
  function_pointers_.WaitForDebounce = reinterpret_cast<WaitForDebouncePtr>(shared_library_.get_function_pointer("niSwitch_WaitForDebounce"));
  function_pointers_.WaitForScanComplete = reinterpret_cast<WaitForScanCompletePtr>(shared_library_.get_function_pointer("niSwitch_WaitForScanComplete"));
  function_pointers_.SetRuntimeEnvironment = reinterpret_cast<SetRuntimeEnvironmentPtr>(shared_library_.get_function_pointer("niSwitch_SetRuntimeEnvironment"));
}

NiSwitchLibrary::~NiSwitchLibrary()
{
}

::grpc::Status NiSwitchLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiSwitchLibrary::AbortScan(ViSession vi)
{
  if (!function_pointers_.AbortScan) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_AbortScan.");
  }
  return function_pointers_.AbortScan(vi);
}

ViStatus NiSwitchLibrary::CanConnect(ViSession vi, ViConstString channel1, ViConstString channel2, ViInt32* pathCapability)
{
  if (!function_pointers_.CanConnect) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_CanConnect.");
  }
  return function_pointers_.CanConnect(vi, channel1, channel2, pathCapability);
}

ViStatus NiSwitchLibrary::CheckAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.CheckAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_CheckAttributeViBoolean.");
  }
  return function_pointers_.CheckAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::CheckAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.CheckAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_CheckAttributeViInt32.");
  }
  return function_pointers_.CheckAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::CheckAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.CheckAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_CheckAttributeViReal64.");
  }
  return function_pointers_.CheckAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::CheckAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.CheckAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_CheckAttributeViSession.");
  }
  return function_pointers_.CheckAttributeViSession(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::CheckAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  if (!function_pointers_.CheckAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_CheckAttributeViString.");
  }
  return function_pointers_.CheckAttributeViString(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ClearError.");
  }
  return function_pointers_.ClearError(vi);
}

ViStatus NiSwitchLibrary::ClearInterchangeWarnings(ViSession vi)
{
  if (!function_pointers_.ClearInterchangeWarnings) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ClearInterchangeWarnings.");
  }
  return function_pointers_.ClearInterchangeWarnings(vi);
}

ViStatus NiSwitchLibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_close.");
  }
  return function_pointers_.Close(vi);
}

ViStatus NiSwitchLibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_Commit.");
  }
  return function_pointers_.Commit(vi);
}

ViStatus NiSwitchLibrary::ConfigureScanList(ViSession vi, ViConstString scanlist, ViInt32 scanMode)
{
  if (!function_pointers_.ConfigureScanList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ConfigureScanList.");
  }
  return function_pointers_.ConfigureScanList(vi, scanlist, scanMode);
}

ViStatus NiSwitchLibrary::ConfigureScanTrigger(ViSession vi, ViReal64 scanDelay, ViInt32 triggerInput, ViInt32 scanAdvancedOutput)
{
  if (!function_pointers_.ConfigureScanTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ConfigureScanTrigger.");
  }
  return function_pointers_.ConfigureScanTrigger(vi, scanDelay, triggerInput, scanAdvancedOutput);
}

ViStatus NiSwitchLibrary::Connect(ViSession vi, ViConstString channel1, ViConstString channel2)
{
  if (!function_pointers_.Connect) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_Connect.");
  }
  return function_pointers_.Connect(vi, channel1, channel2);
}

ViStatus NiSwitchLibrary::ConnectMultiple(ViSession vi, ViConstString connectionList)
{
  if (!function_pointers_.ConnectMultiple) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ConnectMultiple.");
  }
  return function_pointers_.ConnectMultiple(vi, connectionList);
}

ViStatus NiSwitchLibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_Disable.");
  }
  return function_pointers_.Disable(vi);
}

ViStatus NiSwitchLibrary::Disconnect(ViSession vi, ViConstString channel1, ViConstString channel2)
{
  if (!function_pointers_.Disconnect) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_Disconnect.");
  }
  return function_pointers_.Disconnect(vi, channel1, channel2);
}

ViStatus NiSwitchLibrary::DisconnectAll(ViSession vi)
{
  if (!function_pointers_.DisconnectAll) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_DisconnectAll.");
  }
  return function_pointers_.DisconnectAll(vi);
}

ViStatus NiSwitchLibrary::DisconnectMultiple(ViSession vi, ViConstString disconnectionList)
{
  if (!function_pointers_.DisconnectMultiple) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_DisconnectMultiple.");
  }
  return function_pointers_.DisconnectMultiple(vi, disconnectionList);
}

ViStatus NiSwitchLibrary::ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_error_message.");
  }
  return function_pointers_.ErrorMessage(vi, errorCode, errorMessage);
}

ViStatus NiSwitchLibrary::ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_error_query.");
  }
  return function_pointers_.ErrorQuery(vi, errorCode, errorMessage);
}

ViStatus NiSwitchLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetAttributeViBoolean.");
  }
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetAttributeViInt32.");
  }
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetAttributeViReal64.");
  }
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetAttributeViSession.");
  }
  return function_pointers_.GetAttributeViSession(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 arraySize, ViChar attributeValue[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetAttributeViString.");
  }
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, arraySize, attributeValue);
}

ViStatus NiSwitchLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelNameBuffer[])
{
  if (!function_pointers_.GetChannelName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetChannelName.");
  }
  return function_pointers_.GetChannelName(vi, index, bufferSize, channelNameBuffer);
}

ViStatus NiSwitchLibrary::GetError(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetError.");
  }
  return function_pointers_.GetError(vi, code, bufferSize, description);
}

ViStatus NiSwitchLibrary::GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[])
{
  if (!function_pointers_.GetNextCoercionRecord) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetNextCoercionRecord.");
  }
  return function_pointers_.GetNextCoercionRecord(vi, bufferSize, coercionRecord);
}

ViStatus NiSwitchLibrary::GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[])
{
  if (!function_pointers_.GetNextInterchangeWarning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetNextInterchangeWarning.");
  }
  return function_pointers_.GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
}

ViStatus NiSwitchLibrary::GetPath(ViSession vi, ViConstString channel1, ViConstString channel2, ViInt32 bufferSize, ViChar path[])
{
  if (!function_pointers_.GetPath) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetPath.");
  }
  return function_pointers_.GetPath(vi, channel1, channel2, bufferSize, path);
}

ViStatus NiSwitchLibrary::GetRelayCount(ViSession vi, ViConstString relayName, ViInt32* relayCount)
{
  if (!function_pointers_.GetRelayCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetRelayCount.");
  }
  return function_pointers_.GetRelayCount(vi, relayName, relayCount);
}

ViStatus NiSwitchLibrary::GetRelayName(ViSession vi, ViInt32 index, ViInt32 relayNameBufferSize, ViChar relayNameBuffer[])
{
  if (!function_pointers_.GetRelayName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetRelayName.");
  }
  return function_pointers_.GetRelayName(vi, index, relayNameBufferSize, relayNameBuffer);
}

ViStatus NiSwitchLibrary::GetRelayPosition(ViSession vi, ViConstString relayName, ViInt32* relayPosition)
{
  if (!function_pointers_.GetRelayPosition) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_GetRelayPosition.");
  }
  return function_pointers_.GetRelayPosition(vi, relayName, relayPosition);
}

ViStatus NiSwitchLibrary::Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.Init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_init.");
  }
  return function_pointers_.Init(resourceName, idQuery, resetDevice, vi);
}

ViStatus NiSwitchLibrary::InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionsString, ViSession* vi)
{
  if (!function_pointers_.InitWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_InitWithOptions.");
  }
  return function_pointers_.InitWithOptions(resourceName, idQuery, resetDevice, optionsString, vi);
}

ViStatus NiSwitchLibrary::InitWithTopology(ViRsrc resourceName, ViConstString topology, ViBoolean simulate, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.InitWithTopology) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_InitWithTopology.");
  }
  return function_pointers_.InitWithTopology(resourceName, topology, simulate, resetDevice, vi);
}

ViStatus NiSwitchLibrary::InitiateScan(ViSession vi)
{
  if (!function_pointers_.InitiateScan) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_InitiateScan.");
  }
  return function_pointers_.InitiateScan(vi);
}

ViStatus NiSwitchLibrary::InvalidateAllAttributes(ViSession vi)
{
  if (!function_pointers_.InvalidateAllAttributes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_InvalidateAllAttributes.");
  }
  return function_pointers_.InvalidateAllAttributes(vi);
}

ViStatus NiSwitchLibrary::IsDebounced(ViSession vi, ViBoolean* isDebounced)
{
  if (!function_pointers_.IsDebounced) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_IsDebounced.");
  }
  return function_pointers_.IsDebounced(vi, isDebounced);
}

ViStatus NiSwitchLibrary::IsScanning(ViSession vi, ViBoolean* isScanning)
{
  if (!function_pointers_.IsScanning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_IsScanning.");
  }
  return function_pointers_.IsScanning(vi, isScanning);
}

ViStatus NiSwitchLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_LockSession.");
  }
  return function_pointers_.LockSession(vi, callerHasLock);
}

ViStatus NiSwitchLibrary::RelayControl(ViSession vi, ViConstString relayName, ViInt32 relayAction)
{
  if (!function_pointers_.RelayControl) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_RelayControl.");
  }
  return function_pointers_.RelayControl(vi, relayName, relayAction);
}

ViStatus NiSwitchLibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_reset.");
  }
  return function_pointers_.Reset(vi);
}

ViStatus NiSwitchLibrary::ResetInterchangeCheck(ViSession vi)
{
  if (!function_pointers_.ResetInterchangeCheck) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ResetInterchangeCheck.");
  }
  return function_pointers_.ResetInterchangeCheck(vi);
}

ViStatus NiSwitchLibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_ResetWithDefaults.");
  }
  return function_pointers_.ResetWithDefaults(vi);
}

ViStatus NiSwitchLibrary::RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_revision_query.");
  }
  return function_pointers_.RevisionQuery(vi, instrumentDriverRevision, firmwareRevision);
}

ViStatus NiSwitchLibrary::RouteScanAdvancedOutput(ViSession vi, ViInt32 scanAdvancedOutputConnector, ViInt32 scanAdvancedOutputBusLine, ViBoolean invert)
{
  if (!function_pointers_.RouteScanAdvancedOutput) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_RouteScanAdvancedOutput.");
  }
  return function_pointers_.RouteScanAdvancedOutput(vi, scanAdvancedOutputConnector, scanAdvancedOutputBusLine, invert);
}

ViStatus NiSwitchLibrary::RouteTriggerInput(ViSession vi, ViInt32 triggerInputConnector, ViInt32 triggerInputBusLine, ViBoolean invert)
{
  if (!function_pointers_.RouteTriggerInput) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_RouteTriggerInput.");
  }
  return function_pointers_.RouteTriggerInput(vi, triggerInputConnector, triggerInputBusLine, invert);
}

ViStatus NiSwitchLibrary::Scan(ViSession vi, ViConstString scanlist, ViInt16 initiation)
{
  if (!function_pointers_.Scan) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_Scan.");
  }
  return function_pointers_.Scan(vi, scanlist, initiation);
}

ViStatus NiSwitchLibrary::SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_self_test.");
  }
  return function_pointers_.SelfTest(vi, selfTestResult, selfTestMessage);
}

ViStatus NiSwitchLibrary::SendSoftwareTrigger(ViSession vi)
{
  if (!function_pointers_.SendSoftwareTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SendSoftwareTrigger.");
  }
  return function_pointers_.SendSoftwareTrigger(vi);
}

ViStatus NiSwitchLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetAttributeViBoolean.");
  }
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetAttributeViInt32.");
  }
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetAttributeViReal64.");
  }
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetAttributeViSession.");
  }
  return function_pointers_.SetAttributeViSession(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetAttributeViString.");
  }
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, attributeValue);
}

ViStatus NiSwitchLibrary::SetContinuousScan(ViSession vi, ViBoolean continuousScan)
{
  if (!function_pointers_.SetContinuousScan) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetContinuousScan.");
  }
  return function_pointers_.SetContinuousScan(vi, continuousScan);
}

ViStatus NiSwitchLibrary::SetPath(ViSession vi, ViConstString pathList)
{
  if (!function_pointers_.SetPath) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetPath.");
  }
  return function_pointers_.SetPath(vi, pathList);
}

ViStatus NiSwitchLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_UnlockSession.");
  }
  return function_pointers_.UnlockSession(vi, callerHasLock);
}

ViStatus NiSwitchLibrary::WaitForDebounce(ViSession vi, ViInt32 maximumTimeMs)
{
  if (!function_pointers_.WaitForDebounce) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_WaitForDebounce.");
  }
  return function_pointers_.WaitForDebounce(vi, maximumTimeMs);
}

ViStatus NiSwitchLibrary::WaitForScanComplete(ViSession vi, ViInt32 maximumTimeMs)
{
  if (!function_pointers_.WaitForScanComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_WaitForScanComplete.");
  }
  return function_pointers_.WaitForScanComplete(vi, maximumTimeMs);
}

ViStatus NiSwitchLibrary::SetRuntimeEnvironment(ViConstString environment, ViConstString environmentVersion, ViConstString reserved1, ViConstString reserved2)
{
  if (!function_pointers_.SetRuntimeEnvironment) {
    throw nidevice_grpc::LibraryLoadException("Could not find niSwitch_SetRuntimeEnvironment.");
  }
  return function_pointers_.SetRuntimeEnvironment(environment, environmentVersion, reserved1, reserved2);
}

}  // namespace niswitch_grpc
