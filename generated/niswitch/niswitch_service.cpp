
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SWITCH Metadata
//---------------------------------------------------------------------
#include "niswitch_service.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <atomic>
#include <vector>

namespace ni {
namespace niswitch {
namespace grpc {

  namespace internal = ni::hardware::grpc::internal;

  NiSwitchService::NiSwitchService(NiSwitchLibraryInterface* library, internal::SessionRepository* session_repository)
      : library_(library), session_repository_(session_repository)
  {
  }

  NiSwitchService::~NiSwitchService()
  {
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::AbortScan(::grpc::ServerContext* context, const AbortScanRequest* request, AbortScanResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->AbortScan(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::CanConnect(::grpc::ServerContext* context, const CanConnectRequest* request, CanConnectResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel1 = request->channel1().c_str();
      ViConstString channel2 = request->channel2().c_str();
      ViInt32 path_capability {};
      auto status = library_->CanConnect(vi, channel1, channel2, &path_capability);
      response->set_status(status);
      if (status == 0) {
        response->set_path_capability(static_cast<ni::niswitch::grpc::PathCapability>(path_capability));
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Commit(::grpc::ServerContext* context, const CommitRequest* request, CommitResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->Commit(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Connect(::grpc::ServerContext* context, const ConnectRequest* request, ConnectResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel1 = request->channel1().c_str();
      ViConstString channel2 = request->channel2().c_str();
      auto status = library_->Connect(vi, channel1, channel2);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::ConnectMultiple(::grpc::ServerContext* context, const ConnectMultipleRequest* request, ConnectMultipleResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString connection_list = request->connection_list().c_str();
      auto status = library_->ConnectMultiple(vi, connection_list);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Disable(::grpc::ServerContext* context, const DisableRequest* request, DisableResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->Disable(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Disconnect(::grpc::ServerContext* context, const DisconnectRequest* request, DisconnectResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel1 = request->channel1().c_str();
      ViConstString channel2 = request->channel2().c_str();
      auto status = library_->Disconnect(vi, channel1, channel2);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::DisconnectAll(::grpc::ServerContext* context, const DisconnectAllRequest* request, DisconnectAllResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->DisconnectAll(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::DisconnectMultiple(::grpc::ServerContext* context, const DisconnectMultipleRequest* request, DisconnectMultipleResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString disconnection_list = request->disconnection_list().c_str();
      auto status = library_->DisconnectMultiple(vi, disconnection_list);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetAttributeViBoolean(::grpc::ServerContext* context, const GetAttributeViBooleanRequest* request, GetAttributeViBooleanResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViBoolean attribute_value {};
      auto status = library_->GetAttributeViBoolean(vi, channel_name, attribute_id, &attribute_value);
      response->set_status(status);
      if (status == 0) {
        response->set_attribute_value(attribute_value);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetAttributeViInt32(::grpc::ServerContext* context, const GetAttributeViInt32Request* request, GetAttributeViInt32Response* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViInt32 attribute_value {};
      auto status = library_->GetAttributeViInt32(vi, channel_name, attribute_id, &attribute_value);
      response->set_status(status);
      if (status == 0) {
        response->set_attribute_value(attribute_value);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetAttributeViReal64(::grpc::ServerContext* context, const GetAttributeViReal64Request* request, GetAttributeViReal64Response* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViReal64 attribute_value {};
      auto status = library_->GetAttributeViReal64(vi, channel_name, attribute_id, &attribute_value);
      response->set_status(status);
      if (status == 0) {
        response->set_attribute_value(attribute_value);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetAttributeViString(::grpc::ServerContext* context, const GetAttributeViStringRequest* request, GetAttributeViStringResponse* response)
  {
    try {
      return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetChannelName(::grpc::ServerContext* context, const GetChannelNameRequest* request, GetChannelNameResponse* response)
  {
    try {
      return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetError(::grpc::ServerContext* context, const GetErrorRequest* request, GetErrorResponse* response)
  {
    try {
      return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetPath(::grpc::ServerContext* context, const GetPathRequest* request, GetPathResponse* response)
  {
    try {
      return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetRelayCount(::grpc::ServerContext* context, const GetRelayCountRequest* request, GetRelayCountResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString relay_name = request->relay_name().c_str();
      ViInt32 relay_count {};
      auto status = library_->GetRelayCount(vi, relay_name, &relay_count);
      response->set_status(status);
      if (status == 0) {
        response->set_relay_count(relay_count);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetRelayName(::grpc::ServerContext* context, const GetRelayNameRequest* request, GetRelayNameResponse* response)
  {
    try {
      return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetRelayPosition(::grpc::ServerContext* context, const GetRelayPositionRequest* request, GetRelayPositionResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString relay_name = request->relay_name().c_str();
      ViInt32 relay_position {};
      auto status = library_->GetRelayPosition(vi, relay_name, &relay_position);
      response->set_status(status);
      if (status == 0) {
        response->set_relay_position(static_cast<ni::niswitch::grpc::RelayPosition>(relay_position));
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::InitWithTopology(::grpc::ServerContext* context, const InitWithTopologyRequest* request, InitWithTopologyResponse* response)
  {
    try {
      ViRsrc resource_name = (ViRsrc)request->resource_name().c_str();
      ViConstString topology = request->topology().c_str();
      ViBoolean simulate = request->simulate();
      ViBoolean reset_device = request->reset_device();

      auto init_lambda = [&] () -> std::tuple<int, uint32_t> {
        ViSession vi;
        int status = library_->InitWithTopology(resource_name, topology, simulate, reset_device, &vi);
        return std::make_tuple(status, vi);
      };
      uint32_t session_id = 0;
      const std::string& session_name = request->session_name();
      auto cleanup_lambda = [&] (uint32_t id) { library_->close(id); };
      int status = session_repository_->add_session(session_name, init_lambda, cleanup_lambda, session_id);
      response->set_status(status);
      if (status == 0) {
        response->mutable_vi()->set_id(session_id);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::InitiateScan(::grpc::ServerContext* context, const InitiateScanRequest* request, InitiateScanResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->InitiateScan(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::LockSession(::grpc::ServerContext* context, const LockSessionRequest* request, LockSessionResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViBoolean caller_has_lock {};
      auto status = library_->LockSession(vi, &caller_has_lock);
      response->set_status(status);
      if (status == 0) {
        response->set_caller_has_lock(caller_has_lock);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::RelayControl(::grpc::ServerContext* context, const RelayControlRequest* request, RelayControlResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString relay_name = request->relay_name().c_str();
      ViInt32 relay_action = (ViInt32)request->relay_action();
      auto status = library_->RelayControl(vi, relay_name, relay_action);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::ResetWithDefaults(::grpc::ServerContext* context, const ResetWithDefaultsRequest* request, ResetWithDefaultsResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->ResetWithDefaults(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::RouteScanAdvancedOutput(::grpc::ServerContext* context, const RouteScanAdvancedOutputRequest* request, RouteScanAdvancedOutputResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViInt32 scan_advanced_output_connector = (ViInt32)request->scan_advanced_output_connector();
      ViInt32 scan_advanced_output_bus_line = (ViInt32)request->scan_advanced_output_bus_line();
      ViBoolean invert = request->invert();
      auto status = library_->RouteScanAdvancedOutput(vi, scan_advanced_output_connector, scan_advanced_output_bus_line, invert);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::RouteTriggerInput(::grpc::ServerContext* context, const RouteTriggerInputRequest* request, RouteTriggerInputResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViInt32 trigger_input_connector = (ViInt32)request->trigger_input_connector();
      ViInt32 trigger_input_bus_line = (ViInt32)request->trigger_input_bus_line();
      ViBoolean invert = request->invert();
      auto status = library_->RouteTriggerInput(vi, trigger_input_connector, trigger_input_bus_line, invert);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SendSoftwareTrigger(::grpc::ServerContext* context, const SendSoftwareTriggerRequest* request, SendSoftwareTriggerResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->SendSoftwareTrigger(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SetAttributeViBoolean(::grpc::ServerContext* context, const SetAttributeViBooleanRequest* request, SetAttributeViBooleanResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViBoolean attribute_value = request->attribute_value();
      auto status = library_->SetAttributeViBoolean(vi, channel_name, attribute_id, attribute_value);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SetAttributeViInt32(::grpc::ServerContext* context, const SetAttributeViInt32Request* request, SetAttributeViInt32Response* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViInt32 attribute_value = request->attribute_value();
      auto status = library_->SetAttributeViInt32(vi, channel_name, attribute_id, attribute_value);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SetAttributeViReal64(::grpc::ServerContext* context, const SetAttributeViReal64Request* request, SetAttributeViReal64Response* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViReal64 attribute_value = request->attribute_value();
      auto status = library_->SetAttributeViReal64(vi, channel_name, attribute_id, attribute_value);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SetAttributeViString(::grpc::ServerContext* context, const SetAttributeViStringRequest* request, SetAttributeViStringResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString channel_name = request->channel_name().c_str();
      ViAttr attribute_id = request->attribute_id();
      ViString attribute_value = (ViString)request->attribute_value().c_str();
      auto status = library_->SetAttributeViString(vi, channel_name, attribute_id, attribute_value);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SetPath(::grpc::ServerContext* context, const SetPathRequest* request, SetPathResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViConstString path_list = request->path_list().c_str();
      auto status = library_->SetPath(vi, path_list);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::UnlockSession(::grpc::ServerContext* context, const UnlockSessionRequest* request, UnlockSessionResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViBoolean caller_has_lock {};
      auto status = library_->UnlockSession(vi, &caller_has_lock);
      response->set_status(status);
      if (status == 0) {
        response->set_caller_has_lock(caller_has_lock);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::WaitForDebounce(::grpc::ServerContext* context, const WaitForDebounceRequest* request, WaitForDebounceResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViInt32 maximum_time_ms = request->maximum_time_ms();
      auto status = library_->WaitForDebounce(vi, maximum_time_ms);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::WaitForScanComplete(::grpc::ServerContext* context, const WaitForScanCompleteRequest* request, WaitForScanCompleteResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViInt32 maximum_time_ms = request->maximum_time_ms();
      auto status = library_->WaitForScanComplete(vi, maximum_time_ms);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      session_repository_->remove_session(vi);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::ErrorMessage(::grpc::ServerContext* context, const ErrorMessageRequest* request, ErrorMessageResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViStatus error_code = request->error_code();
      ViChar error_message[256];
      auto status = library_->error_message(vi, error_code, error_message);
      response->set_status(status);
      if (status == 0) {
        response->set_error_message(error_message);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Reset(::grpc::ServerContext* context, const ResetRequest* request, ResetResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      auto status = library_->reset(vi);
      response->set_status(status);
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SelfTest(::grpc::ServerContext* context, const SelfTestRequest* request, SelfTestResponse* response)
  {
    try {
      auto session = request->vi();
      ViSession vi = session_repository_->access_session(session.id(), session.name());
      ViInt16 self_test_result {};
      ViChar self_test_message[256];
      auto status = library_->self_test(vi, &self_test_result, self_test_message);
      response->set_status(status);
      if (status == 0) {
        response->set_self_test_result(self_test_result);
        response->set_self_test_message(self_test_message);
      }
      return ::grpc::Status::OK;
    }
    catch (internal::LibraryLoadException& ex) {
      return ::grpc::Status(::grpc::NOT_FOUND, ex.what());
    }
  }

} // namespace grpc
} // namespace niswitch
} // namespace ni

