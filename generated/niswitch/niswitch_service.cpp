
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-SWITCH Metadata
//---------------------------------------------------------------------
#include "niswitch_service.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <atomic>

namespace ni {
namespace niswitch {
namespace grpc {

  namespace internal = ni::hardware::grpc::internal;

  NiSwitchService::NiSwitchService(NiSwitchLibraryWrapper* library_wrapper, internal::SessionRepository* session_repository)
      : library_wrapper_(library_wrapper), session_repository_(session_repository)
  {
  }

  NiSwitchService::~NiSwitchService()
  {
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::AbortScan(::grpc::ServerContext* context, const AbortScanRequest* request, AbortScanResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_AbortScan");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->AbortScan(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::CanConnect(::grpc::ServerContext* context, const CanConnectRequest* request, CanConnectResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_CanConnect");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel1 = request->channel1().c_str();
    ViConstString channel2 = request->channel2().c_str();
    ViInt32 path_capability_ctype;
    auto status = library_wrapper_->CanConnect(vi, channel1, channel2, &path_capability_ctype);
    response->set_status(status);
    if (status == 0) {
      response->set_path_capability(static_cast<ni::niswitch::grpc::PathCapability>(path_capability_ctype));
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Commit(::grpc::ServerContext* context, const CommitRequest* request, CommitResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_Commit");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->Commit(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Connect(::grpc::ServerContext* context, const ConnectRequest* request, ConnectResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_Connect");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel1 = request->channel1().c_str();
    ViConstString channel2 = request->channel2().c_str();
    auto status = library_wrapper_->Connect(vi, channel1, channel2);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::ConnectMultiple(::grpc::ServerContext* context, const ConnectMultipleRequest* request, ConnectMultipleResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_ConnectMultiple");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString connection_list = request->connection_list().c_str();
    auto status = library_wrapper_->ConnectMultiple(vi, connection_list);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Disable(::grpc::ServerContext* context, const DisableRequest* request, DisableResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_Disable");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->Disable(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Disconnect(::grpc::ServerContext* context, const DisconnectRequest* request, DisconnectResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_Disconnect");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString channel1 = request->channel1().c_str();
    ViConstString channel2 = request->channel2().c_str();
    auto status = library_wrapper_->Disconnect(vi, channel1, channel2);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::DisconnectAll(::grpc::ServerContext* context, const DisconnectAllRequest* request, DisconnectAllResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_DisconnectAll");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->DisconnectAll(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::DisconnectMultiple(::grpc::ServerContext* context, const DisconnectMultipleRequest* request, DisconnectMultipleResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_DisconnectMultiple");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString disconnection_list = request->disconnection_list().c_str();
    auto status = library_wrapper_->DisconnectMultiple(vi, disconnection_list);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetChannelName(::grpc::ServerContext* context, const GetChannelNameRequest* request, GetChannelNameResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetPath(::grpc::ServerContext* context, const GetPathRequest* request, GetPathResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetRelayCount(::grpc::ServerContext* context, const GetRelayCountRequest* request, GetRelayCountResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_GetRelayCount");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString relay_name = request->relay_name().c_str();
    ViInt32 relay_count;
    auto status = library_wrapper_->GetRelayCount(vi, relay_name, &relay_count);
    response->set_status(status);
    if (status == 0) {
      response->set_relay_count(relay_count);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetRelayName(::grpc::ServerContext* context, const GetRelayNameRequest* request, GetRelayNameResponse* response)
  {
    return ::grpc::Status(::grpc::UNIMPLEMENTED, "TODO: This server handler has not been implemented.");
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::GetRelayPosition(::grpc::ServerContext* context, const GetRelayPositionRequest* request, GetRelayPositionResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_GetRelayPosition");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString relay_name = request->relay_name().c_str();
    ViInt32 relay_position_ctype;
    auto status = library_wrapper_->GetRelayPosition(vi, relay_name, &relay_position_ctype);
    response->set_status(status);
    if (status == 0) {
      response->set_relay_position(static_cast<ni::niswitch::grpc::RelayPosition>(relay_position_ctype));
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::LockSession(::grpc::ServerContext* context, const LockSessionRequest* request, LockSessionResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_LockSession");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViBoolean caller_has_lock;
    auto status = library_wrapper_->LockSession(vi, &caller_has_lock);
    response->set_status(status);
    if (status == 0) {
      response->set_caller_has_lock(caller_has_lock);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::RelayControl(::grpc::ServerContext* context, const RelayControlRequest* request, RelayControlResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_RelayControl");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString relay_name = request->relay_name().c_str();
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto relay_action = static_cast<ViInt32>((ViInt32)request->relay_action());
    ViInt32 relay_action;
    auto status = library_wrapper_->RelayControl(vi, relay_name, relay_action);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::ResetWithDefaults(::grpc::ServerContext* context, const ResetWithDefaultsRequest* request, ResetWithDefaultsResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_ResetWithDefaults");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->ResetWithDefaults(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::RouteScanAdvancedOutput(::grpc::ServerContext* context, const RouteScanAdvancedOutputRequest* request, RouteScanAdvancedOutputResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_RouteScanAdvancedOutput");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto scan_advanced_output_connector = static_cast<ViInt32>((ViInt32)request->scan_advanced_output_connector());
    ViInt32 scan_advanced_output_connector;
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto scan_advanced_output_bus_line = static_cast<ViInt32>((ViInt32)request->scan_advanced_output_bus_line());
    ViInt32 scan_advanced_output_bus_line;
    ViBoolean invert = request->invert();
    auto status = library_wrapper_->RouteScanAdvancedOutput(vi, scan_advanced_output_connector, scan_advanced_output_bus_line, invert);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::RouteTriggerInput(::grpc::ServerContext* context, const RouteTriggerInputRequest* request, RouteTriggerInputResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_RouteTriggerInput");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto trigger_input_connector = static_cast<ViInt32>((ViInt32)request->trigger_input_connector());
    ViInt32 trigger_input_connector;
    // TODO: The below would work with integer enums but we need to properly convert non-integer enums to their corresponding values of the correct type.
    // auto trigger_input_bus_line = static_cast<ViInt32>((ViInt32)request->trigger_input_bus_line());
    ViInt32 trigger_input_bus_line;
    ViBoolean invert = request->invert();
    auto status = library_wrapper_->RouteTriggerInput(vi, trigger_input_connector, trigger_input_bus_line, invert);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SendSoftwareTrigger(::grpc::ServerContext* context, const SendSoftwareTriggerRequest* request, SendSoftwareTriggerResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_SendSoftwareTrigger");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->SendSoftwareTrigger(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::SetPath(::grpc::ServerContext* context, const SetPathRequest* request, SetPathResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_SetPath");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViConstString path_list = request->path_list().c_str();
    auto status = library_wrapper_->SetPath(vi, path_list);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::UnlockSession(::grpc::ServerContext* context, const UnlockSessionRequest* request, UnlockSessionResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_UnlockSession");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViBoolean caller_has_lock;
    auto status = library_wrapper_->UnlockSession(vi, &caller_has_lock);
    response->set_status(status);
    if (status == 0) {
      response->set_caller_has_lock(caller_has_lock);
    }
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::WaitForDebounce(::grpc::ServerContext* context, const WaitForDebounceRequest* request, WaitForDebounceResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_WaitForDebounce");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViInt32 maximum_time_ms = request->maximum_time_ms();
    auto status = library_wrapper_->WaitForDebounce(vi, maximum_time_ms);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::WaitForScanComplete(::grpc::ServerContext* context, const WaitForScanCompleteRequest* request, WaitForScanCompleteResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_WaitForScanComplete");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    ViInt32 maximum_time_ms = request->maximum_time_ms();
    auto status = library_wrapper_->WaitForScanComplete(vi, maximum_time_ms);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------
  ::grpc::Status NiSwitchService::Reset(::grpc::ServerContext* context, const ResetRequest* request, ResetResponse* response)
  {
    ::grpc::Status libraryStatus = library_wrapper_->check_function_exists("niSwitch_reset");
    if (!libraryStatus.ok()) {
      return libraryStatus;
    }

    ViSession vi = request->vi();
    auto status = library_wrapper_->reset(vi);
    response->set_status(status);
    return ::grpc::Status::OK;
  }

} // namespace grpc
} // namespace niswitch
} // namespace ni
