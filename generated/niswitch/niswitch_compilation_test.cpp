//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-SWITCH Metadata
//---------------------------------------------------------------------
#include "niswitch_library.h"

namespace niswitch_grpc {

ViStatus AbortScan(ViSession vi)
{
  return niSwitch_AbortScan(vi);
}

ViStatus CanConnect(ViSession vi, ViConstString channel1, ViConstString channel2, ViInt32* pathCapability)
{
  return niSwitch_CanConnect(vi, channel1, channel2, pathCapability);
}

ViStatus CheckAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  return niSwitch_CheckAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus CheckAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  return niSwitch_CheckAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus CheckAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  return niSwitch_CheckAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus CheckAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  return niSwitch_CheckAttributeViSession(vi, channelName, attributeId, attributeValue);
}

ViStatus CheckAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  return niSwitch_CheckAttributeViString(vi, channelName, attributeId, attributeValue);
}

ViStatus ClearError(ViSession vi)
{
  return niSwitch_ClearError(vi);
}

ViStatus ClearInterchangeWarnings(ViSession vi)
{
  return niSwitch_ClearInterchangeWarnings(vi);
}

ViStatus Close(ViSession vi)
{
  return niSwitch_close(vi);
}

ViStatus Commit(ViSession vi)
{
  return niSwitch_Commit(vi);
}

ViStatus ConfigureScanList(ViSession vi, ViConstString scanlist, ViInt32 scanMode)
{
  return niSwitch_ConfigureScanList(vi, scanlist, scanMode);
}

ViStatus ConfigureScanTrigger(ViSession vi, ViReal64 scanDelay, ViInt32 triggerInput, ViInt32 scanAdvancedOutput)
{
  return niSwitch_ConfigureScanTrigger(vi, scanDelay, triggerInput, scanAdvancedOutput);
}

ViStatus Connect(ViSession vi, ViConstString channel1, ViConstString channel2)
{
  return niSwitch_Connect(vi, channel1, channel2);
}

ViStatus ConnectMultiple(ViSession vi, ViConstString connectionList)
{
  return niSwitch_ConnectMultiple(vi, connectionList);
}

ViStatus Disable(ViSession vi)
{
  return niSwitch_Disable(vi);
}

ViStatus Disconnect(ViSession vi, ViConstString channel1, ViConstString channel2)
{
  return niSwitch_Disconnect(vi, channel1, channel2);
}

ViStatus DisconnectAll(ViSession vi)
{
  return niSwitch_DisconnectAll(vi);
}

ViStatus DisconnectMultiple(ViSession vi, ViConstString disconnectionList)
{
  return niSwitch_DisconnectMultiple(vi, disconnectionList);
}

ViStatus ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  return niSwitch_error_message(vi, errorCode, errorMessage);
}

ViStatus ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256])
{
  return niSwitch_error_query(vi, errorCode, errorMessage);
}

ViStatus GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  return niSwitch_GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  return niSwitch_GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  return niSwitch_GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue)
{
  return niSwitch_GetAttributeViSession(vi, channelName, attributeId, attributeValue);
}

ViStatus GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 arraySize, ViChar attributeValue[])
{
  return niSwitch_GetAttributeViString(vi, channelName, attributeId, arraySize, attributeValue);
}

ViStatus GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelNameBuffer[])
{
  return niSwitch_GetChannelName(vi, index, bufferSize, channelNameBuffer);
}

ViStatus GetError(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[])
{
  return niSwitch_GetError(vi, code, bufferSize, description);
}

ViStatus GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[])
{
  return niSwitch_GetNextCoercionRecord(vi, bufferSize, coercionRecord);
}

ViStatus GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[])
{
  return niSwitch_GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
}

ViStatus GetPath(ViSession vi, ViConstString channel1, ViConstString channel2, ViInt32 bufferSize, ViChar path[])
{
  return niSwitch_GetPath(vi, channel1, channel2, bufferSize, path);
}

ViStatus GetRelayCount(ViSession vi, ViConstString relayName, ViInt32* relayCount)
{
  return niSwitch_GetRelayCount(vi, relayName, relayCount);
}

ViStatus GetRelayName(ViSession vi, ViInt32 index, ViInt32 relayNameBufferSize, ViChar relayNameBuffer[])
{
  return niSwitch_GetRelayName(vi, index, relayNameBufferSize, relayNameBuffer);
}

ViStatus GetRelayPosition(ViSession vi, ViConstString relayName, ViInt32* relayPosition)
{
  return niSwitch_GetRelayPosition(vi, relayName, relayPosition);
}

ViStatus Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  return niSwitch_init(resourceName, idQuery, resetDevice, vi);
}

ViStatus InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionsString, ViSession* vi)
{
  return niSwitch_InitWithOptions(resourceName, idQuery, resetDevice, optionsString, vi);
}

ViStatus InitWithTopology(ViRsrc resourceName, ViConstString topology, ViBoolean simulate, ViBoolean resetDevice, ViSession* vi)
{
  return niSwitch_InitWithTopology(resourceName, topology, simulate, resetDevice, vi);
}

ViStatus InitiateScan(ViSession vi)
{
  return niSwitch_InitiateScan(vi);
}

ViStatus InvalidateAllAttributes(ViSession vi)
{
  return niSwitch_InvalidateAllAttributes(vi);
}

ViStatus IsDebounced(ViSession vi, ViBoolean* isDebounced)
{
  return niSwitch_IsDebounced(vi, isDebounced);
}

ViStatus IsScanning(ViSession vi, ViBoolean* isScanning)
{
  return niSwitch_IsScanning(vi, isScanning);
}

ViStatus RelayControl(ViSession vi, ViConstString relayName, ViInt32 relayAction)
{
  return niSwitch_RelayControl(vi, relayName, relayAction);
}

ViStatus Reset(ViSession vi)
{
  return niSwitch_reset(vi);
}

ViStatus ResetInterchangeCheck(ViSession vi)
{
  return niSwitch_ResetInterchangeCheck(vi);
}

ViStatus ResetWithDefaults(ViSession vi)
{
  return niSwitch_ResetWithDefaults(vi);
}

ViStatus RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  return niSwitch_revision_query(vi, instrumentDriverRevision, firmwareRevision);
}

ViStatus RouteScanAdvancedOutput(ViSession vi, ViInt32 scanAdvancedOutputConnector, ViInt32 scanAdvancedOutputBusLine, ViBoolean invert)
{
  return niSwitch_RouteScanAdvancedOutput(vi, scanAdvancedOutputConnector, scanAdvancedOutputBusLine, invert);
}

ViStatus RouteTriggerInput(ViSession vi, ViInt32 triggerInputConnector, ViInt32 triggerInputBusLine, ViBoolean invert)
{
  return niSwitch_RouteTriggerInput(vi, triggerInputConnector, triggerInputBusLine, invert);
}

ViStatus Scan(ViSession vi, ViConstString scanlist, ViInt16 initiation)
{
  return niSwitch_Scan(vi, scanlist, initiation);
}

ViStatus SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  return niSwitch_self_test(vi, selfTestResult, selfTestMessage);
}

ViStatus SendSoftwareTrigger(ViSession vi)
{
  return niSwitch_SendSoftwareTrigger(vi);
}

ViStatus SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  return niSwitch_SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  return niSwitch_SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  return niSwitch_SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  return niSwitch_SetAttributeViSession(vi, channelName, attributeId, attributeValue);
}

ViStatus SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue)
{
  return niSwitch_SetAttributeViString(vi, channelName, attributeId, attributeValue);
}

ViStatus SetContinuousScan(ViSession vi, ViBoolean continuousScan)
{
  return niSwitch_SetContinuousScan(vi, continuousScan);
}

ViStatus SetPath(ViSession vi, ViConstString pathList)
{
  return niSwitch_SetPath(vi, pathList);
}

ViStatus WaitForDebounce(ViSession vi, ViInt32 maximumTimeMs)
{
  return niSwitch_WaitForDebounce(vi, maximumTimeMs);
}

ViStatus WaitForScanComplete(ViSession vi, ViInt32 maximumTimeMs)
{
  return niSwitch_WaitForScanComplete(vi, maximumTimeMs);
}

}  // namespace niswitch_grpc
