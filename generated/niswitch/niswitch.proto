
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Proto file for the NI-SWITCH Metadata
//---------------------------------------------------------------------
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ni.niswitch.grpc";
option java_outer_classname = "NiSwitch";
option csharp_namespace = "NationalInstruments.NISwitch.Grpc";

package ni.niswitch.grpc;

service NiSwitch {
  rpc AbortScan(AbortScanRequest) returns (AbortScanResponse);
  rpc CanConnect(CanConnectRequest) returns (CanConnectResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  rpc ConnectMultiple(ConnectMultipleRequest) returns (ConnectMultipleResponse);
  rpc Disable(DisableRequest) returns (DisableResponse);
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse);
  rpc DisconnectAll(DisconnectAllRequest) returns (DisconnectAllResponse);
  rpc DisconnectMultiple(DisconnectMultipleRequest) returns (DisconnectMultipleResponse);
  rpc GetChannelName(GetChannelNameRequest) returns (GetChannelNameResponse);
  rpc GetPath(GetPathRequest) returns (GetPathResponse);
  rpc GetRelayCount(GetRelayCountRequest) returns (GetRelayCountResponse);
  rpc GetRelayName(GetRelayNameRequest) returns (GetRelayNameResponse);
  rpc GetRelayPosition(GetRelayPositionRequest) returns (GetRelayPositionResponse);
  rpc LockSession(LockSessionRequest) returns (LockSessionResponse);
  rpc RelayControl(RelayControlRequest) returns (RelayControlResponse);
  rpc ResetWithDefaults(ResetWithDefaultsRequest) returns (ResetWithDefaultsResponse);
  rpc RouteScanAdvancedOutput(RouteScanAdvancedOutputRequest) returns (RouteScanAdvancedOutputResponse);
  rpc RouteTriggerInput(RouteTriggerInputRequest) returns (RouteTriggerInputResponse);
  rpc SendSoftwareTrigger(SendSoftwareTriggerRequest) returns (SendSoftwareTriggerResponse);
  rpc SetPath(SetPathRequest) returns (SetPathResponse);
  rpc UnlockSession(UnlockSessionRequest) returns (UnlockSessionResponse);
  rpc WaitForDebounce(WaitForDebounceRequest) returns (WaitForDebounceResponse);
  rpc WaitForScanComplete(WaitForScanCompleteRequest) returns (WaitForScanCompleteResponse);
  rpc Reset(ResetRequest) returns (ResetResponse);
}

enum NiSwitchAttributes {
  NISWITCH_UNSPECIFIED = 0;
  NISWITCH_SIMULATE = 1050005;
  NISWITCH_DRIVER_SETUP = 1050007;
  NISWITCH_CHANNEL_COUNT = 1050203;
  NISWITCH_IO_RESOURCE_DESCRIPTOR = 1050304;
  NISWITCH_LOGICAL_NAME = 1050305;
  NISWITCH_SUPPORTED_INSTRUMENT_MODELS = 1050327;
  NISWITCH_INSTRUMENT_FIRMWARE_REVISION = 1050510;
  NISWITCH_INSTRUMENT_MANUFACTURER = 1050511;
  NISWITCH_INSTRUMENT_MODEL = 1050512;
  NISWITCH_SPECIFIC_DRIVER_VENDOR = 1050513;
  NISWITCH_SPECIFIC_DRIVER_DESCRIPTION = 1050514;
  NISWITCH_SPECIFIC_DRIVER_REVISION = 1050551;
  NISWITCH_IS_WAITING_FOR_TRIG = 1150004;
  NISWITCH_TRIGGER_INPUT_POLARITY = 1150010;
  NISWITCH_SCAN_ADVANCED_POLARITY = 1150011;
  NISWITCH_HANDSHAKING_INITIATION = 1150013;
  NISWITCH_NUMBER_OF_RELAYS = 1150014;
  NISWITCH_SERIAL_NUMBER = 1150015;
  NISWITCH_DIGITAL_FILTER_ENABLE = 1150016;
  NISWITCH_POWER_DOWN_LATCHING_RELAYS_AFTER_DEBOUNCE = 1150017;
  NISWITCH_ANALOG_BUS_SHARING_ENABLE = 1150018;
  NISWITCH_TEMPERATURE = 1150019;
  NISWITCH_IS_SOURCE_CHANNEL = 1250001;
  NISWITCH_IS_DEBOUNCED = 1250002;
  NISWITCH_IS_CONFIGURATION_CHANNEL = 1250003;
  NISWITCH_SETTLING_TIME = 1250004;
  NISWITCH_BANDWIDTH = 1250005;
  NISWITCH_MAX_DC_VOLTAGE = 1250006;
  NISWITCH_MAX_AC_VOLTAGE = 1250007;
  NISWITCH_MAX_SWITCHING_DC_CURRENT = 1250008;
  NISWITCH_MAX_SWITCHING_AC_CURRENT = 1250009;
  NISWITCH_MAX_CARRY_DC_CURRENT = 1250010;
  NISWITCH_MAX_CARRY_AC_CURRENT = 1250011;
  NISWITCH_MAX_SWITCHING_DC_POWER = 1250012;
  NISWITCH_MAX_SWITCHING_AC_POWER = 1250013;
  NISWITCH_MAX_CARRY_DC_POWER = 1250014;
  NISWITCH_MAX_CARRY_AC_POWER = 1250015;
  NISWITCH_CHARACTERISTIC_IMPEDANCE = 1250016;
  NISWITCH_WIRE_MODE = 1250017;
  NISWITCH_NUM_OF_ROWS = 1250018;
  NISWITCH_NUM_OF_COLUMNS = 1250019;
  NISWITCH_SCAN_LIST = 1250020;
  NISWITCH_SCAN_MODE = 1250021;
  NISWITCH_TRIGGER_INPUT = 1250022;
  NISWITCH_SCAN_ADVANCED_OUTPUT = 1250023;
  NISWITCH_IS_SCANNING = 1250024;
  NISWITCH_SCAN_DELAY = 1250025;
  NISWITCH_CONTINUOUS_SCAN = 1250026;
}

enum HandshakingInitiation {
  option allow_alias = true;
  HANDSHAKING_INITIATION_UNSPECIFIED = 0;
  HANDSHAKING_INITIATION_NISWITCH_VAL_MEASUREMENT_DEVICE_INITIATED = 0;
  HANDSHAKING_INITIATION_NISWITCH_VAL_SWITCH_INITIATED = 1;
}

enum PathCapability {
  PATH_CAPABILITY_UNSPECIFIED = 0;
  PATH_CAPABILITY_NISWITCH_VAL_PATH_AVAILABLE = 1;
  PATH_CAPABILITY_NISWITCH_VAL_PATH_EXISTS = 2;
  PATH_CAPABILITY_NISWITCH_VAL_PATH_UNSUPPORTED = 3;
  PATH_CAPABILITY_NISWITCH_VAL_RESOURCE_IN_USE = 4;
  PATH_CAPABILITY_NISWITCH_VAL_SOURCE_CONFLICT = 5;
  PATH_CAPABILITY_NISWITCH_VAL_CHANNEL_NOT_AVAILABLE = 6;
}

enum RelayAction {
  RELAY_ACTION_UNSPECIFIED = 0;
  RELAY_ACTION_NISWITCH_VAL_OPEN_RELAY = 20;
  RELAY_ACTION_NISWITCH_VAL_CLOSE_RELAY = 21;
}

enum RelayPosition {
  RELAY_POSITION_UNSPECIFIED = 0;
  RELAY_POSITION_NISWITCH_VAL_OPEN = 10;
  RELAY_POSITION_NISWITCH_VAL_CLOSED = 11;
}

enum ScanAdvancedOutput {
  option allow_alias = true;
  SCAN_ADVANCED_OUTPUT_UNSPECIFIED = 0;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_NONE = 0;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_EXTERNAL = 2;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL0 = 111;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL1 = 112;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL2 = 113;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL3 = 114;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL4 = 115;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL5 = 116;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL6 = 117;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_TTL7 = 118;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_PXI_STAR = 125;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR = 1000;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR = 1001;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE1 = 1021;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE2 = 1022;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE3 = 1023;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE4 = 1024;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE5 = 1025;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE6 = 1026;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE7 = 1027;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE8 = 1028;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE9 = 1029;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE10 = 1030;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE11 = 1031;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_REARCONNECTOR_MODULE12 = 1032;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE1 = 1041;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE2 = 1042;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE3 = 1043;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE4 = 1044;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE5 = 1045;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE6 = 1046;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE7 = 1047;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE8 = 1048;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE9 = 1049;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE10 = 1050;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE11 = 1051;
  SCAN_ADVANCED_OUTPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE12 = 1052;
}

enum ScanAdvancedPolarity {
  option allow_alias = true;
  SCAN_ADVANCED_POLARITY_UNSPECIFIED = 0;
  SCAN_ADVANCED_POLARITY_NISWITCH_VAL_RISING_EDGE = 0;
  SCAN_ADVANCED_POLARITY_NISWITCH_VAL_FALLING_EDGE = 1;
}

enum ScanMode {
  option allow_alias = true;
  SCAN_MODE_UNSPECIFIED = 0;
  SCAN_MODE_NISWITCH_VAL_NONE = 0;
  SCAN_MODE_NISWITCH_VAL_BREAK_BEFORE_MAKE = 1;
  SCAN_MODE_NISWITCH_VAL_BREAK_AFTER_MAKE = 2;
}

enum TriggerInput {
  TRIGGER_INPUT_UNSPECIFIED = 0;
  TRIGGER_INPUT_NISWITCH_VAL_IMMEDIATE = 1;
  TRIGGER_INPUT_NISWITCH_VAL_EXTERNAL = 2;
  TRIGGER_INPUT_NISWITCH_VAL_SOFTWARE_TRIG = 3;
  TRIGGER_INPUT_NISWITCH_VAL_TTL0 = 111;
  TRIGGER_INPUT_NISWITCH_VAL_TTL1 = 112;
  TRIGGER_INPUT_NISWITCH_VAL_TTL2 = 113;
  TRIGGER_INPUT_NISWITCH_VAL_TTL3 = 114;
  TRIGGER_INPUT_NISWITCH_VAL_TTL4 = 115;
  TRIGGER_INPUT_NISWITCH_VAL_TTL5 = 116;
  TRIGGER_INPUT_NISWITCH_VAL_TTL6 = 117;
  TRIGGER_INPUT_NISWITCH_VAL_TTL7 = 118;
  TRIGGER_INPUT_NISWITCH_VAL_PXI_STAR = 125;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR = 1000;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR = 1001;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE1 = 1021;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE2 = 1022;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE3 = 1023;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE4 = 1024;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE5 = 1025;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE6 = 1026;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE7 = 1027;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE8 = 1028;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE9 = 1029;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE10 = 1030;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE11 = 1031;
  TRIGGER_INPUT_NISWITCH_VAL_REARCONNECTOR_MODULE12 = 1032;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE1 = 1041;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE2 = 1042;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE3 = 1043;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE4 = 1044;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE5 = 1045;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE6 = 1046;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE7 = 1047;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE8 = 1048;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE9 = 1049;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE10 = 1050;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE11 = 1051;
  TRIGGER_INPUT_NISWITCH_VAL_FRONTCONNECTOR_MODULE12 = 1052;
}

enum TriggerInputPolarity {
  option allow_alias = true;
  TRIGGER_INPUT_POLARITY_UNSPECIFIED = 0;
  TRIGGER_INPUT_POLARITY_NISWITCH_VAL_RISING_EDGE = 0;
  TRIGGER_INPUT_POLARITY_NISWITCH_VAL_FALLING_EDGE = 1;
}

message AbortScanRequest {
  fixed32 vi = 1;
}

message AbortScanResponse {
  int32 status = 1;
}

message CanConnectRequest {
  fixed32 vi = 1;
  string channel1 = 2;
  string channel2 = 3;
}

message CanConnectResponse {
  int32 status = 1;
  PathCapability path_capability = 2;
}

message CommitRequest {
  fixed32 vi = 1;
}

message CommitResponse {
  int32 status = 1;
}

message ConnectRequest {
  fixed32 vi = 1;
  string channel1 = 2;
  string channel2 = 3;
}

message ConnectResponse {
  int32 status = 1;
}

message ConnectMultipleRequest {
  fixed32 vi = 1;
  string connection_list = 2;
}

message ConnectMultipleResponse {
  int32 status = 1;
}

message DisableRequest {
  fixed32 vi = 1;
}

message DisableResponse {
  int32 status = 1;
}

message DisconnectRequest {
  fixed32 vi = 1;
  string channel1 = 2;
  string channel2 = 3;
}

message DisconnectResponse {
  int32 status = 1;
}

message DisconnectAllRequest {
  fixed32 vi = 1;
}

message DisconnectAllResponse {
  int32 status = 1;
}

message DisconnectMultipleRequest {
  fixed32 vi = 1;
  string disconnection_list = 2;
}

message DisconnectMultipleResponse {
  int32 status = 1;
}

message GetChannelNameRequest {
  fixed32 vi = 1;
  sint32 index = 2;
  sint32 buffer_size = 3;
}

message GetChannelNameResponse {
  int32 status = 1;
  string channel_name_buffer = 2;
}

message GetPathRequest {
  fixed32 vi = 1;
  string channel1 = 2;
  string channel2 = 3;
  sint32 buffer_size = 4;
}

message GetPathResponse {
  int32 status = 1;
  string path = 2;
}

message GetRelayCountRequest {
  fixed32 vi = 1;
  string relay_name = 2;
}

message GetRelayCountResponse {
  int32 status = 1;
  sint32 relay_count = 2;
}

message GetRelayNameRequest {
  fixed32 vi = 1;
  sint32 index = 2;
  sint32 relay_name_buffer_size = 3;
}

message GetRelayNameResponse {
  int32 status = 1;
  string relay_name_buffer = 2;
}

message GetRelayPositionRequest {
  fixed32 vi = 1;
  string relay_name = 2;
}

message GetRelayPositionResponse {
  int32 status = 1;
  RelayPosition relay_position = 2;
}

message LockSessionRequest {
  fixed32 vi = 1;
}

message LockSessionResponse {
  int32 status = 1;
  bool caller_has_lock = 2;
}

message RelayControlRequest {
  fixed32 vi = 1;
  string relay_name = 2;
  RelayAction relay_action = 3;
}

message RelayControlResponse {
  int32 status = 1;
}

message ResetWithDefaultsRequest {
  fixed32 vi = 1;
}

message ResetWithDefaultsResponse {
  int32 status = 1;
}

message RouteScanAdvancedOutputRequest {
  fixed32 vi = 1;
  ScanAdvancedOutput scan_advanced_output_connector = 2;
  ScanAdvancedOutput scan_advanced_output_bus_line = 3;
  bool invert = 4;
}

message RouteScanAdvancedOutputResponse {
  int32 status = 1;
}

message RouteTriggerInputRequest {
  fixed32 vi = 1;
  TriggerInput trigger_input_connector = 2;
  TriggerInput trigger_input_bus_line = 3;
  bool invert = 4;
}

message RouteTriggerInputResponse {
  int32 status = 1;
}

message SendSoftwareTriggerRequest {
  fixed32 vi = 1;
}

message SendSoftwareTriggerResponse {
  int32 status = 1;
}

message SetPathRequest {
  fixed32 vi = 1;
  string path_list = 2;
}

message SetPathResponse {
  int32 status = 1;
}

message UnlockSessionRequest {
  fixed32 vi = 1;
}

message UnlockSessionResponse {
  int32 status = 1;
  bool caller_has_lock = 2;
}

message WaitForDebounceRequest {
  fixed32 vi = 1;
  sint32 maximum_time_ms = 2;
}

message WaitForDebounceResponse {
  int32 status = 1;
}

message WaitForScanCompleteRequest {
  fixed32 vi = 1;
  sint32 maximum_time_ms = 2;
}

message WaitForScanCompleteResponse {
  int32 status = 1;
}

message ResetRequest {
  fixed32 vi = 1;
}

message ResetResponse {
  int32 status = 1;
}

