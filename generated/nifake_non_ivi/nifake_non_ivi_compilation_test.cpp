//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-FAKE-NON-IVI Metadata
//---------------------------------------------------------------------
#include "nifake_non_ivi_library.h"

namespace nifake_non_ivi_grpc {

int32 Close(FakeHandle handle)
{
  return niFakeNonIvi_Close(handle);
}

int32 CloseSecondarySession(SecondarySessionHandle secondarySessionHandle)
{
  return niFakeNonIvi_CloseSecondarySession(secondarySessionHandle);
}

int32 GetCrossDriverSession(FakeHandle handle, int32* crossDriverSession)
{
  return niFakeNonIvi_GetCrossDriverSession(handle, crossDriverSession);
}

int32 GetLatestErrorMessage(char message[], uInt32 size)
{
  return niFakeNonIvi_GetLatestErrorMessage(message, size);
}

const char* GetStringAsReturnedValue(char buf[512])
{
  return niFakeNonIvi_GetStringAsReturnedValue(buf);
}

int32 GetMarbleAttributeDouble(FakeHandle handle, int32 attribute, double* value)
{
  return niFakeNonIvi_GetMarbleAttributeDouble(handle, attribute, value);
}

int32 GetMarbleAttributeInt32(FakeHandle handle, int32 attribute, int32* value)
{
  return niFakeNonIvi_GetMarbleAttributeInt32(handle, attribute, value);
}

int32 GetMarbleAttributeInt32Array(FakeHandle handle, int32 attribute, int32 value[])
{
  return niFakeNonIvi_GetMarbleAttributeInt32Array(handle, attribute, value);
}

int32 Init(const char sessionName[], FakeHandle* handle)
{
  return niFakeNonIvi_Init(sessionName, handle);
}

int32 InitFromCrossDriverSession(int32 crossDriverSession, FakeHandle* handle)
{
  return niFakeNonIvi_InitFromCrossDriverSession(crossDriverSession, handle);
}

int32 InitFromCrossDriverSessionArray(int32 crossDriverSessionArray[], int32 numberOfCrossDriverSessions, FakeHandle* handle)
{
  return niFakeNonIvi_InitFromCrossDriverSessionArray(crossDriverSessionArray, numberOfCrossDriverSessions, handle);
}

int32 InitSecondarySession(SecondarySessionHandle* secondarySessionHandle)
{
  return niFakeNonIvi_InitSecondarySession(secondarySessionHandle);
}

int32 InitWithHandleNameAsSessionName(const char handleName[], FakeHandle* handle)
{
  return niFakeNonIvi_InitWithHandleNameAsSessionName(handleName, handle);
}

FakeHandle InitWithReturnedSession(const char handleName[])
{
  return niFakeNonIvi_InitWithReturnedSession(handleName);
}

int32 InputArraysWithNarrowIntegerTypes(const myUInt16 u16Array[], const myInt16 i16Array[], const myInt8 i8Array[])
{
  return niFakeNonIvi_InputArraysWithNarrowIntegerTypes(u16Array, i16Array, i8Array);
}

int32 IotaWithCustomSize(int32 sizeOne, int32 sizeTwo, int32 data[])
{
  return niFakeNonIvi_IotaWithCustomSize(sizeOne, sizeTwo, data);
}

int32 OutputArraysWithNarrowIntegerTypes(int32 numberOfU16Samples, myUInt16 u16Data[], int32 numberOfI16Samples, myInt16 i16Data[], int32 numberOfI8Samples, myInt8 i8Data[])
{
  return niFakeNonIvi_OutputArraysWithNarrowIntegerTypes(numberOfU16Samples, u16Data, numberOfI16Samples, i16Data, numberOfI8Samples, i8Data);
}

int32 InputArrayOfBytes(const myUInt8 u8Array[])
{
  return niFakeNonIvi_InputArrayOfBytes(u8Array);
}

int32 OutputArrayOfBytes(int32 numberOfU8Samples, myUInt8 u8Data[])
{
  return niFakeNonIvi_OutputArrayOfBytes(numberOfU8Samples, u8Data);
}

int32 OutputArraysWithPassedInByPtrMechanism(int32 i32Data[], myUInt16 u16Data[], int32* arraySize)
{
  return niFakeNonIvi_OutputArraysWithPassedInByPtrMechanism(i32Data, u16Data, arraySize);
}

int32 RegisterCallback(myInt16 inputData, CallbackPtr callbackFunction, void* callbackData)
{
  return niFakeNonIvi_RegisterCallback(inputData, callbackFunction, callbackData);
}

int32 ReadStream(int32 start, int32 stop, int32* value)
{
  return niFakeNonIvi_ReadStream(start, stop, value);
}

int32 InputTimestamp(CVIAbsoluteTime when)
{
  return niFakeNonIvi_InputTimestamp(when);
}

int32 OutputTimestamp(CVIAbsoluteTime* when)
{
  return niFakeNonIvi_OutputTimestamp(when);
}

int32 InputVarArgs(const char inputName[], const char channelName[], int32 color, double powerUpState, const char channelName0[], int32 color0, double powerUpState0, const char channelName1[], int32 color1, double powerUpState1, const char channelName2[], int32 color2, double powerUpState2)
{
  return niFakeNonIvi_InputVarArgs(inputName, channelName, color, powerUpState, channelName0, color0, powerUpState0, channelName1, color1, powerUpState1, channelName2, color2, powerUpState2);
}

int32 OutputVarArgs(const char inputName[], const char channelName[], int32* color, const char channelName0[], int32* color0, const char channelName1[], int32* color1, const char channelName2[], int32* color2)
{
  return niFakeNonIvi_OutputVarArgs(inputName, channelName, color, channelName0, color0, channelName1, color1, channelName2, color2);
}

int32 ResetMarbleAttribute(FakeHandle handle, int32 attribute)
{
  return niFakeNonIvi_ResetMarbleAttribute(handle, attribute);
}

int32 ScalarsWithNarrowIntegerTypes(myUInt16 u16, myInt16 i16, myInt8 i8)
{
  return niFakeNonIvi_ScalarsWithNarrowIntegerTypes(u16, i16, i8);
}

int32 SetMarbleAttributeDouble(FakeHandle handle, int32 attribute, double value)
{
  return niFakeNonIvi_SetMarbleAttributeDouble(handle, attribute, value);
}

int32 SetMarbleAttributeInt32(FakeHandle handle, int32 attribute, int32 value)
{
  return niFakeNonIvi_SetMarbleAttributeInt32(handle, attribute, value);
}

int32 SetColors(int32 colors[3], int32 size)
{
  return niFakeNonIvi_SetColors(colors, size);
}

int32 GetStructsWithCoercion(int32 numberOfStructs, StructWithCoercion_struct structs[])
{
  return niFakeNonIvi_GetStructsWithCoercion(numberOfStructs, structs);
}

int32 SetStructsWithCoercion(StructWithCoercion_struct structs[3])
{
  return niFakeNonIvi_SetStructsWithCoercion(structs);
}

int32 InputStringValuedEnum(char aName[])
{
  return niFakeNonIvi_InputStringValuedEnum(aName);
}

int32 WriteBooleanArray(int32 bools[], int32 size)
{
  return niFakeNonIvi_WriteBooleanArray(bools, size);
}

}  // namespace nifake_non_ivi_grpc
