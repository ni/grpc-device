
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-RFMXINSTR-RESTRICTED.
//---------------------------------------------------------------------
#ifndef NIRFMXINSTR_RESTRICTED_GRPC_CLIENT_H
#define NIRFMXINSTR_RESTRICTED_GRPC_CLIENT_H

#include <grpcpp/grpcpp.h>

#include <nirfmxinstr_restricted.grpc.pb.h>
#include <tests/utilities/client_helpers.h>

#include <memory>
#include <vector>

namespace nirfmxinstr_restricted_grpc::experimental::client {

namespace pb = ::google::protobuf;
using StubPtr = std::unique_ptr<NiRFmxInstrRestricted::Stub>;
using namespace nidevice_grpc::experimental::client;


RegisterSpecialClientSnapshotInterestResponse register_special_client_snapshot_interest(const StubPtr& stub, const pb::string& resource_name);
GetOpenSessionsInformationResponse get_open_sessions_information(const StubPtr& stub, const pb::string& resource_name);
GetRFmxVersionResponse get_r_fmx_version(const StubPtr& stub, const nidevice_grpc::Session& instrument);
GetTracesInfoForMonitorSnapshotResponse get_traces_info_for_monitor_snapshot(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string);
GetForceAllTracesEnabledResponse get_force_all_traces_enabled(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name);
SetForceAllTracesEnabledResponse set_force_all_traces_enabled(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attr_val);
SaveConfigurationsToJSONResponse save_configurations_to_json(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& signal_names);
LoadConfigurationsFromJSONResponse load_configurations_from_json(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& json_string, const pb::int32& array_size);
GetAttributeDesiredF64Response get_attribute_desired_f64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeDesiredI32Response get_attribute_desired_i32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeDesiredI64Response get_attribute_desired_i64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeDesiredStringResponse get_attribute_desired_string(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeDesiredF64ArrayResponse get_attribute_desired_f64_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeDesiredF32ArrayResponse get_attribute_desired_f32_array(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeDesiredF32Response get_attribute_desired_f32(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& channel_name, const pb::int32& attribute_id);
GetAttributeAuthorResponse get_attribute_author(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string, const pb::int32& attribute_id);
GetPrivilegeLevelResponse get_privilege_level(const StubPtr& stub, const nidevice_grpc::Session& instrument);
RequestPrivilegeResponse request_privilege(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& privilege_level);
SaveAllForRevertResponse save_all_for_revert(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& file_path);
LoadAllForRevertResponse load_all_for_revert(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& file_path);
GetInitiaitedSnapshotStringsResponse get_initiaited_snapshot_strings(const StubPtr& stub, const nidevice_grpc::Session& instrument);
GetSnapshotInfoFromCacheResponse get_snapshot_info_from_cache(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::uint64& snapshot_info_cache_index);
GetLatestConfigurationSnapshotResponse get_latest_configuration_snapshot(const StubPtr& stub, const nidevice_grpc::Session& instrument);
GetSnapshotStateResponse get_snapshot_state(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& personality, const pb::string& selector_string);
DeleteSnapshotResponse delete_snapshot(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& personality, const pb::string& selector_string);
ConvertForPowerUnitsUtilityResponse convert_for_power_units_utility(const StubPtr& stub, const nidevice_grpc::Session& instrument, const double& reference_or_trigger_level_in, const pb::int32& input_power_units, const pb::int32& output_power_units, const pb::int32& terminal_configuration, const double& bandwidth);
UnregisterSpecialClientSnapshotInterestResponse unregister_special_client_snapshot_interest(const StubPtr& stub, const pb::string& resource_name);
GetCalibrationPlaneNamesResponse get_calibration_plane_names(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string);
GetCalibrationPlaneEnabledResponse get_calibration_plane_enabled(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string);
GetExternalAttenuationTableNamesResponse get_external_attenuation_table_names(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string);
GetActiveTableNameResponse get_active_table_name(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& selector_string);
GetSignalConfigurationState64Response get_signal_configuration_state64(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& signal_name, const pb::uint32& signal_type);
SetIOTraceStatusResponse set_io_trace_status(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::int32& io_trace_status);
GetActiveResultNameResponse get_active_result_name(const StubPtr& stub, const nidevice_grpc::Session& instrument, const pb::string& signal_name, const pb::uint32& signal_type);

} // namespace nirfmxinstr_restricted_grpc::experimental::client

#endif /* NIRFMXINSTR_RESTRICTED_GRPC_CLIENT_H */
