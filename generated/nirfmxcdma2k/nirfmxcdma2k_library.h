//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-rfmxcdma2k
//---------------------------------------------------------------------
#ifndef NIRFMXCDMA2K_GRPC_LIBRARY_H
#define NIRFMXCDMA2K_GRPC_LIBRARY_H

#include "nirfmxcdma2k_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxcdma2k_grpc {

class NiRFmxCDMA2kLibrary : public nirfmxcdma2k_grpc::NiRFmxCDMA2kLibraryInterface {
 public:
  NiRFmxCDMA2kLibrary();
  explicit NiRFmxCDMA2kLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxCDMA2kLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod) override;
  int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled) override;
  int32 ACPCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets) override;
  int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchCarrierAbsolutePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower) override;
  int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower) override;
  int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel) override;
  int32 BuildChannelString(char selectorString[], int32 channelNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) override;
  int32 CDACfgMeasurementChannel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 walshCodeLength, int32 walshCodeNumber, int32 branch) override;
  int32 CDACfgPowerUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnit) override;
  int32 CDACfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength) override;
  int32 CDAFetchCodeDomainIAndQPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iMeanActivePower, float64* qMeanActivePower, float64* iPeakInactivePower, float64* qPeakInactivePower) override;
  int32 CDAFetchCodeDomainIAndQPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 iCodeDomainPowers[], float32 qCodeDomainPowers[], int32 arraySize, int32* actualArraySize) override;
  int32 CDAFetchCodeDomainPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalPower, float64* totalActivePower, float64* meanActivePower, float64* peakActivePower, float64* meanInactivePower, float64* peakInactivePower) override;
  int32 CDAFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffset, float64* iqGainImbalance, float64* iqQuadratureError) override;
  int32 CDAFetchSymbolConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle symbolConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 CDAFetchSymbolEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsSymbolEVM, float64* peakSymbolEVM, float64* rmsSymbolMagnitudeError, float64* rmsSymbolPhaseError, float64* meanSymbolPower, float64* frequencyError, float64* chipRateError) override;
  int32 CDAFetchSymbolEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 symbolEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 CDAFetchSymbolMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 symbolMagnitudeError[], int32 arraySize, int32* actualArraySize) override;
  int32 CDAFetchSymbolPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 symbolPhaseError[], int32 arraySize, int32* actualArraySize) override;
  int32 CDAFetchSymbolPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 symbolPowers[], int32 arraySize, int32* actualArraySize) override;
  int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 CHPFetchCarrierAbsolutePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower) override;
  int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 CfgBandClass(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandClass) override;
  int32 CfgChannelConfigurationMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelConfigurationMode) override;
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger) override;
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation) override;
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency) override;
  int32 CfgFrequencyChannelNumber(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 bandClass, int32 channelNumber) override;
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) override;
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 minimumQuietTimeMode, float64 minimumQuietTime, int32 iqPowerEdgeLevelType, int32 enableTrigger) override;
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) override;
  int32 CfgNumberOfChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfChannels) override;
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation) override;
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) override;
  int32 CfgRadioConfiguration(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 radioConfiguration) override;
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel) override;
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger) override;
  int32 CfgUplinkSpreading(niRFmxInstrHandle instrumentHandle, char selectorString[], int64 uplinkSpreadingLongCodeMask) override;
  int32 CfgUserDefinedChannel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 walshCodeLength, int32 walshCodeNumber, int32 branch) override;
  int32 CfgUserDefinedChannelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 walshCodeLength[], int32 walshCodeNumber[], int32 branch[], int32 numberOfElements) override;
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* done) override;
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]) override;
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) override;
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) override;
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal) override;
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal) override;
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal) override;
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal) override;
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal) override;
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal) override;
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) override;
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal) override;
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal) override;
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal) override;
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) override;
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut) override;
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]) override;
  int32 ModAccCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength) override;
  int32 ModAccFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDetectedChannel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedWalshCodeLength, int32* detectedWalshCodeNumber, int32* detectedBranch) override;
  int32 ModAccFetchDetectedChannelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedWalshCodeLength[], int32 detectedWalshCodeNumber[], int32 detectedBranch[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rmsevm, float64* peakEVM, float64* rho, float64* frequencyError, float64* chipRateError, float64* rmsMagnitudeError, float64* rmsPhaseError) override;
  int32 ModAccFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* iqOriginOffset, float64* iqGainImbalance, float64* iqQuadratureError) override;
  int32 ModAccFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchNumberOfDetectedChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* numberOfDetectedChannels) override;
  int32 ModAccFetchPeakActiveCDE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakActiveCDE, int32* peakActiveCDEWalshCodeLength, int32* peakActiveCDEWalshCodeNumber, int32* peakActiveCDEBranch) override;
  int32 ModAccFetchPeakCDE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakCDE, int32* peakCDEWalshCodeNumber, int32* peakCDEBranch) override;
  int32 ModAccFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize) override;
  int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency) override;
  int32 OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 QEVMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount) override;
  int32 QEVMCfgMeasurementLength(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementLength) override;
  int32 QEVMFetchConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle constellation[], int32 arraySize, int32* actualArraySize) override;
  int32 QEVMFetchEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* maximumPeakEVM, float64* meanFrequencyError, float64* meanMagnitudeError, float64* meanPhaseError, float64* meanChipRateError) override;
  int32 QEVMFetchEVMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evm[], int32 arraySize, int32* actualArraySize) override;
  int32 QEVMFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQOriginOffset, float64* meanIQGainImbalance, float64* meanIQQuadratureError, float64* maximumIQOriginOffset, float64* maximumIQGainImbalance, float64* maximumIQQuadratureError) override;
  int32 QEVMFetchMagnitudeErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 magnitudeError[], int32 arraySize, int32* actualArraySize) override;
  int32 QEVMFetchPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseError[], int32 arraySize, int32* actualArraySize) override;
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID) override;
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 SEMFetchCarrierAbsoluteIntegratedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsoluteIntegratedPower) override;
  int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) override;
  int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower) override;
  int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus) override;
  int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 relativeMask[], float32 absoluteMask[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) override;
  int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower) override;
  int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize) override;
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces) override;
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle) override;
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal) override;
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) override;
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal) override;
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal) override;
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal) override;
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) override;
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal) override;
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal) override;
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) override;
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]) override;
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal) override;
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal) override;
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) override;
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) override;
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal) override;
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) override;
  int32 SlotPhaseCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength) override;
  int32 SlotPhaseFetchChipPhaseErrorLinearFitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chipPhaseErrorLinearFit[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPhaseFetchChipPhaseErrorTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 chipPhaseError[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPhaseFetchMaximumPhaseDiscontinuity(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPhaseDiscontinuity) override;
  int32 SlotPhaseFetchPhaseDiscontinuities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPowerCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength) override;
  int32 SlotPowerFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPower[], float64 slotPowerDelta[], int32 arraySize, int32* actualArraySize) override;
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout) override;
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) override;

 private:
  using ACPCfgAveragingPtr = decltype(&RFmxCDMA2k_ACPCfgAveraging);
  using ACPCfgMeasurementMethodPtr = decltype(&RFmxCDMA2k_ACPCfgMeasurementMethod);
  using ACPCfgNoiseCompensationEnabledPtr = decltype(&RFmxCDMA2k_ACPCfgNoiseCompensationEnabled);
  using ACPCfgNumberOfOffsetsPtr = decltype(&RFmxCDMA2k_ACPCfgNumberOfOffsets);
  using ACPCfgRBWFilterPtr = decltype(&RFmxCDMA2k_ACPCfgRBWFilter);
  using ACPCfgSweepTimePtr = decltype(&RFmxCDMA2k_ACPCfgSweepTime);
  using ACPFetchAbsolutePowersTracePtr = decltype(&RFmxCDMA2k_ACPFetchAbsolutePowersTrace);
  using ACPFetchCarrierAbsolutePowerPtr = decltype(&RFmxCDMA2k_ACPFetchCarrierAbsolutePower);
  using ACPFetchOffsetMeasurementPtr = decltype(&RFmxCDMA2k_ACPFetchOffsetMeasurement);
  using ACPFetchOffsetMeasurementArrayPtr = decltype(&RFmxCDMA2k_ACPFetchOffsetMeasurementArray);
  using ACPFetchRelativePowersTracePtr = decltype(&RFmxCDMA2k_ACPFetchRelativePowersTrace);
  using ACPFetchSpectrumPtr = decltype(&RFmxCDMA2k_ACPFetchSpectrum);
  using AbortMeasurementsPtr = decltype(&RFmxCDMA2k_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxCDMA2k_AnalyzeIQ1Waveform);
  using AnalyzeSpectrum1WaveformPtr = decltype(&RFmxCDMA2k_AnalyzeSpectrum1Waveform);
  using AutoLevelPtr = decltype(&RFmxCDMA2k_AutoLevel);
  using BuildChannelStringPtr = decltype(&RFmxCDMA2k_BuildChannelString);
  using BuildOffsetStringPtr = decltype(&RFmxCDMA2k_BuildOffsetString);
  using BuildSignalStringPtr = decltype(&RFmxCDMA2k_BuildSignalString);
  using CDACfgMeasurementChannelPtr = decltype(&RFmxCDMA2k_CDACfgMeasurementChannel);
  using CDACfgPowerUnitPtr = decltype(&RFmxCDMA2k_CDACfgPowerUnit);
  using CDACfgSynchronizationModeAndIntervalPtr = decltype(&RFmxCDMA2k_CDACfgSynchronizationModeAndInterval);
  using CDAFetchCodeDomainIAndQPowerPtr = decltype(&RFmxCDMA2k_CDAFetchCodeDomainIAndQPower);
  using CDAFetchCodeDomainIAndQPowerTracePtr = decltype(&RFmxCDMA2k_CDAFetchCodeDomainIAndQPowerTrace);
  using CDAFetchCodeDomainPowerPtr = decltype(&RFmxCDMA2k_CDAFetchCodeDomainPower);
  using CDAFetchIQImpairmentsPtr = decltype(&RFmxCDMA2k_CDAFetchIQImpairments);
  using CDAFetchSymbolConstellationTracePtr = decltype(&RFmxCDMA2k_CDAFetchSymbolConstellationTrace);
  using CDAFetchSymbolEVMPtr = decltype(&RFmxCDMA2k_CDAFetchSymbolEVM);
  using CDAFetchSymbolEVMTracePtr = decltype(&RFmxCDMA2k_CDAFetchSymbolEVMTrace);
  using CDAFetchSymbolMagnitudeErrorTracePtr = decltype(&RFmxCDMA2k_CDAFetchSymbolMagnitudeErrorTrace);
  using CDAFetchSymbolPhaseErrorTracePtr = decltype(&RFmxCDMA2k_CDAFetchSymbolPhaseErrorTrace);
  using CDAFetchSymbolPowerTracePtr = decltype(&RFmxCDMA2k_CDAFetchSymbolPowerTrace);
  using CHPCfgAveragingPtr = decltype(&RFmxCDMA2k_CHPCfgAveraging);
  using CHPCfgRBWFilterPtr = decltype(&RFmxCDMA2k_CHPCfgRBWFilter);
  using CHPCfgSweepTimePtr = decltype(&RFmxCDMA2k_CHPCfgSweepTime);
  using CHPFetchCarrierAbsolutePowerPtr = decltype(&RFmxCDMA2k_CHPFetchCarrierAbsolutePower);
  using CHPFetchSpectrumPtr = decltype(&RFmxCDMA2k_CHPFetchSpectrum);
  using CfgBandClassPtr = decltype(&RFmxCDMA2k_CfgBandClass);
  using CfgChannelConfigurationModePtr = decltype(&RFmxCDMA2k_CfgChannelConfigurationMode);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxCDMA2k_CfgDigitalEdgeTrigger);
  using CfgExternalAttenuationPtr = decltype(&RFmxCDMA2k_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxCDMA2k_CfgFrequency);
  using CfgFrequencyChannelNumberPtr = decltype(&RFmxCDMA2k_CfgFrequencyChannelNumber);
  using CfgFrequencyReferencePtr = decltype(&RFmxCDMA2k_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxCDMA2k_CfgIQPowerEdgeTrigger);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxCDMA2k_CfgMechanicalAttenuation);
  using CfgNumberOfChannelsPtr = decltype(&RFmxCDMA2k_CfgNumberOfChannels);
  using CfgRFPtr = decltype(&RFmxCDMA2k_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxCDMA2k_CfgRFAttenuation);
  using CfgRadioConfigurationPtr = decltype(&RFmxCDMA2k_CfgRadioConfiguration);
  using CfgReferenceLevelPtr = decltype(&RFmxCDMA2k_CfgReferenceLevel);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxCDMA2k_CfgSoftwareEdgeTrigger);
  using CfgUplinkSpreadingPtr = decltype(&RFmxCDMA2k_CfgUplinkSpreading);
  using CfgUserDefinedChannelPtr = decltype(&RFmxCDMA2k_CfgUserDefinedChannel);
  using CfgUserDefinedChannelArrayPtr = decltype(&RFmxCDMA2k_CfgUserDefinedChannelArray);
  using CheckMeasurementStatusPtr = decltype(&RFmxCDMA2k_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxCDMA2k_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxCDMA2k_ClearNamedResult);
  using CloneSignalConfigurationPtr = decltype(&RFmxCDMA2k_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxCDMA2k_Close);
  using CommitPtr = decltype(&RFmxCDMA2k_Commit);
  using CreateSignalConfigurationPtr = decltype(&RFmxCDMA2k_CreateSignalConfiguration);
  using DeleteSignalConfigurationPtr = decltype(&RFmxCDMA2k_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxCDMA2k_DisableTrigger);
  using GetAllNamedResultNamesPtr = decltype(&RFmxCDMA2k_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxCDMA2k_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxCDMA2k_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxCDMA2k_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxCDMA2k_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxCDMA2k_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxCDMA2k_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxCDMA2k_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxCDMA2k_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxCDMA2k_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxCDMA2k_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxCDMA2k_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxCDMA2k_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxCDMA2k_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxCDMA2k_GetError);
  using GetErrorStringPtr = decltype(&RFmxCDMA2k_GetErrorString);
  using InitializePtr = decltype(&RFmxCDMA2k_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxCDMA2k_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxCDMA2k_Initiate);
  using ModAccCfgSynchronizationModeAndIntervalPtr = decltype(&RFmxCDMA2k_ModAccCfgSynchronizationModeAndInterval);
  using ModAccFetchConstellationTracePtr = decltype(&RFmxCDMA2k_ModAccFetchConstellationTrace);
  using ModAccFetchDetectedChannelPtr = decltype(&RFmxCDMA2k_ModAccFetchDetectedChannel);
  using ModAccFetchDetectedChannelArrayPtr = decltype(&RFmxCDMA2k_ModAccFetchDetectedChannelArray);
  using ModAccFetchEVMPtr = decltype(&RFmxCDMA2k_ModAccFetchEVM);
  using ModAccFetchEVMTracePtr = decltype(&RFmxCDMA2k_ModAccFetchEVMTrace);
  using ModAccFetchIQImpairmentsPtr = decltype(&RFmxCDMA2k_ModAccFetchIQImpairments);
  using ModAccFetchMagnitudeErrorTracePtr = decltype(&RFmxCDMA2k_ModAccFetchMagnitudeErrorTrace);
  using ModAccFetchNumberOfDetectedChannelsPtr = decltype(&RFmxCDMA2k_ModAccFetchNumberOfDetectedChannels);
  using ModAccFetchPeakActiveCDEPtr = decltype(&RFmxCDMA2k_ModAccFetchPeakActiveCDE);
  using ModAccFetchPeakCDEPtr = decltype(&RFmxCDMA2k_ModAccFetchPeakCDE);
  using ModAccFetchPhaseErrorTracePtr = decltype(&RFmxCDMA2k_ModAccFetchPhaseErrorTrace);
  using OBWCfgAveragingPtr = decltype(&RFmxCDMA2k_OBWCfgAveraging);
  using OBWCfgRBWFilterPtr = decltype(&RFmxCDMA2k_OBWCfgRBWFilter);
  using OBWCfgSweepTimePtr = decltype(&RFmxCDMA2k_OBWCfgSweepTime);
  using OBWFetchMeasurementPtr = decltype(&RFmxCDMA2k_OBWFetchMeasurement);
  using OBWFetchSpectrumPtr = decltype(&RFmxCDMA2k_OBWFetchSpectrum);
  using QEVMCfgAveragingPtr = decltype(&RFmxCDMA2k_QEVMCfgAveraging);
  using QEVMCfgMeasurementLengthPtr = decltype(&RFmxCDMA2k_QEVMCfgMeasurementLength);
  using QEVMFetchConstellationTracePtr = decltype(&RFmxCDMA2k_QEVMFetchConstellationTrace);
  using QEVMFetchEVMPtr = decltype(&RFmxCDMA2k_QEVMFetchEVM);
  using QEVMFetchEVMTracePtr = decltype(&RFmxCDMA2k_QEVMFetchEVMTrace);
  using QEVMFetchIQImpairmentsPtr = decltype(&RFmxCDMA2k_QEVMFetchIQImpairments);
  using QEVMFetchMagnitudeErrorTracePtr = decltype(&RFmxCDMA2k_QEVMFetchMagnitudeErrorTrace);
  using QEVMFetchPhaseErrorTracePtr = decltype(&RFmxCDMA2k_QEVMFetchPhaseErrorTrace);
  using ResetAttributePtr = decltype(&RFmxCDMA2k_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxCDMA2k_ResetToDefault);
  using SEMCfgAveragingPtr = decltype(&RFmxCDMA2k_SEMCfgAveraging);
  using SEMCfgSweepTimePtr = decltype(&RFmxCDMA2k_SEMCfgSweepTime);
  using SEMFetchCarrierAbsoluteIntegratedPowerPtr = decltype(&RFmxCDMA2k_SEMFetchCarrierAbsoluteIntegratedPower);
  using SEMFetchLowerOffsetMarginPtr = decltype(&RFmxCDMA2k_SEMFetchLowerOffsetMargin);
  using SEMFetchLowerOffsetMarginArrayPtr = decltype(&RFmxCDMA2k_SEMFetchLowerOffsetMarginArray);
  using SEMFetchLowerOffsetPowerPtr = decltype(&RFmxCDMA2k_SEMFetchLowerOffsetPower);
  using SEMFetchLowerOffsetPowerArrayPtr = decltype(&RFmxCDMA2k_SEMFetchLowerOffsetPowerArray);
  using SEMFetchMeasurementStatusPtr = decltype(&RFmxCDMA2k_SEMFetchMeasurementStatus);
  using SEMFetchSpectrumPtr = decltype(&RFmxCDMA2k_SEMFetchSpectrum);
  using SEMFetchUpperOffsetMarginPtr = decltype(&RFmxCDMA2k_SEMFetchUpperOffsetMargin);
  using SEMFetchUpperOffsetMarginArrayPtr = decltype(&RFmxCDMA2k_SEMFetchUpperOffsetMarginArray);
  using SEMFetchUpperOffsetPowerPtr = decltype(&RFmxCDMA2k_SEMFetchUpperOffsetPower);
  using SEMFetchUpperOffsetPowerArrayPtr = decltype(&RFmxCDMA2k_SEMFetchUpperOffsetPowerArray);
  using SelectMeasurementsPtr = decltype(&RFmxCDMA2k_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxCDMA2k_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxCDMA2k_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxCDMA2k_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxCDMA2k_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxCDMA2k_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxCDMA2k_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxCDMA2k_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxCDMA2k_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxCDMA2k_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxCDMA2k_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxCDMA2k_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxCDMA2k_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxCDMA2k_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxCDMA2k_SetAttributeU8Array);
  using SlotPhaseCfgSynchronizationModeAndIntervalPtr = decltype(&RFmxCDMA2k_SlotPhaseCfgSynchronizationModeAndInterval);
  using SlotPhaseFetchChipPhaseErrorLinearFitTracePtr = decltype(&RFmxCDMA2k_SlotPhaseFetchChipPhaseErrorLinearFitTrace);
  using SlotPhaseFetchChipPhaseErrorTracePtr = decltype(&RFmxCDMA2k_SlotPhaseFetchChipPhaseErrorTrace);
  using SlotPhaseFetchMaximumPhaseDiscontinuityPtr = decltype(&RFmxCDMA2k_SlotPhaseFetchMaximumPhaseDiscontinuity);
  using SlotPhaseFetchPhaseDiscontinuitiesPtr = decltype(&RFmxCDMA2k_SlotPhaseFetchPhaseDiscontinuities);
  using SlotPowerCfgSynchronizationModeAndIntervalPtr = decltype(&RFmxCDMA2k_SlotPowerCfgSynchronizationModeAndInterval);
  using SlotPowerFetchPowersPtr = decltype(&RFmxCDMA2k_SlotPowerFetchPowers);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxCDMA2k_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxCDMA2k_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    ACPCfgAveragingPtr ACPCfgAveraging;
    ACPCfgMeasurementMethodPtr ACPCfgMeasurementMethod;
    ACPCfgNoiseCompensationEnabledPtr ACPCfgNoiseCompensationEnabled;
    ACPCfgNumberOfOffsetsPtr ACPCfgNumberOfOffsets;
    ACPCfgRBWFilterPtr ACPCfgRBWFilter;
    ACPCfgSweepTimePtr ACPCfgSweepTime;
    ACPFetchAbsolutePowersTracePtr ACPFetchAbsolutePowersTrace;
    ACPFetchCarrierAbsolutePowerPtr ACPFetchCarrierAbsolutePower;
    ACPFetchOffsetMeasurementPtr ACPFetchOffsetMeasurement;
    ACPFetchOffsetMeasurementArrayPtr ACPFetchOffsetMeasurementArray;
    ACPFetchRelativePowersTracePtr ACPFetchRelativePowersTrace;
    ACPFetchSpectrumPtr ACPFetchSpectrum;
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AnalyzeSpectrum1WaveformPtr AnalyzeSpectrum1Waveform;
    AutoLevelPtr AutoLevel;
    BuildChannelStringPtr BuildChannelString;
    BuildOffsetStringPtr BuildOffsetString;
    BuildSignalStringPtr BuildSignalString;
    CDACfgMeasurementChannelPtr CDACfgMeasurementChannel;
    CDACfgPowerUnitPtr CDACfgPowerUnit;
    CDACfgSynchronizationModeAndIntervalPtr CDACfgSynchronizationModeAndInterval;
    CDAFetchCodeDomainIAndQPowerPtr CDAFetchCodeDomainIAndQPower;
    CDAFetchCodeDomainIAndQPowerTracePtr CDAFetchCodeDomainIAndQPowerTrace;
    CDAFetchCodeDomainPowerPtr CDAFetchCodeDomainPower;
    CDAFetchIQImpairmentsPtr CDAFetchIQImpairments;
    CDAFetchSymbolConstellationTracePtr CDAFetchSymbolConstellationTrace;
    CDAFetchSymbolEVMPtr CDAFetchSymbolEVM;
    CDAFetchSymbolEVMTracePtr CDAFetchSymbolEVMTrace;
    CDAFetchSymbolMagnitudeErrorTracePtr CDAFetchSymbolMagnitudeErrorTrace;
    CDAFetchSymbolPhaseErrorTracePtr CDAFetchSymbolPhaseErrorTrace;
    CDAFetchSymbolPowerTracePtr CDAFetchSymbolPowerTrace;
    CHPCfgAveragingPtr CHPCfgAveraging;
    CHPCfgRBWFilterPtr CHPCfgRBWFilter;
    CHPCfgSweepTimePtr CHPCfgSweepTime;
    CHPFetchCarrierAbsolutePowerPtr CHPFetchCarrierAbsolutePower;
    CHPFetchSpectrumPtr CHPFetchSpectrum;
    CfgBandClassPtr CfgBandClass;
    CfgChannelConfigurationModePtr CfgChannelConfigurationMode;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyChannelNumberPtr CfgFrequencyChannelNumber;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgNumberOfChannelsPtr CfgNumberOfChannels;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgRadioConfigurationPtr CfgRadioConfiguration;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CfgUplinkSpreadingPtr CfgUplinkSpreading;
    CfgUserDefinedChannelPtr CfgUserDefinedChannel;
    CfgUserDefinedChannelArrayPtr CfgUserDefinedChannelArray;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    ModAccCfgSynchronizationModeAndIntervalPtr ModAccCfgSynchronizationModeAndInterval;
    ModAccFetchConstellationTracePtr ModAccFetchConstellationTrace;
    ModAccFetchDetectedChannelPtr ModAccFetchDetectedChannel;
    ModAccFetchDetectedChannelArrayPtr ModAccFetchDetectedChannelArray;
    ModAccFetchEVMPtr ModAccFetchEVM;
    ModAccFetchEVMTracePtr ModAccFetchEVMTrace;
    ModAccFetchIQImpairmentsPtr ModAccFetchIQImpairments;
    ModAccFetchMagnitudeErrorTracePtr ModAccFetchMagnitudeErrorTrace;
    ModAccFetchNumberOfDetectedChannelsPtr ModAccFetchNumberOfDetectedChannels;
    ModAccFetchPeakActiveCDEPtr ModAccFetchPeakActiveCDE;
    ModAccFetchPeakCDEPtr ModAccFetchPeakCDE;
    ModAccFetchPhaseErrorTracePtr ModAccFetchPhaseErrorTrace;
    OBWCfgAveragingPtr OBWCfgAveraging;
    OBWCfgRBWFilterPtr OBWCfgRBWFilter;
    OBWCfgSweepTimePtr OBWCfgSweepTime;
    OBWFetchMeasurementPtr OBWFetchMeasurement;
    OBWFetchSpectrumPtr OBWFetchSpectrum;
    QEVMCfgAveragingPtr QEVMCfgAveraging;
    QEVMCfgMeasurementLengthPtr QEVMCfgMeasurementLength;
    QEVMFetchConstellationTracePtr QEVMFetchConstellationTrace;
    QEVMFetchEVMPtr QEVMFetchEVM;
    QEVMFetchEVMTracePtr QEVMFetchEVMTrace;
    QEVMFetchIQImpairmentsPtr QEVMFetchIQImpairments;
    QEVMFetchMagnitudeErrorTracePtr QEVMFetchMagnitudeErrorTrace;
    QEVMFetchPhaseErrorTracePtr QEVMFetchPhaseErrorTrace;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SEMCfgAveragingPtr SEMCfgAveraging;
    SEMCfgSweepTimePtr SEMCfgSweepTime;
    SEMFetchCarrierAbsoluteIntegratedPowerPtr SEMFetchCarrierAbsoluteIntegratedPower;
    SEMFetchLowerOffsetMarginPtr SEMFetchLowerOffsetMargin;
    SEMFetchLowerOffsetMarginArrayPtr SEMFetchLowerOffsetMarginArray;
    SEMFetchLowerOffsetPowerPtr SEMFetchLowerOffsetPower;
    SEMFetchLowerOffsetPowerArrayPtr SEMFetchLowerOffsetPowerArray;
    SEMFetchMeasurementStatusPtr SEMFetchMeasurementStatus;
    SEMFetchSpectrumPtr SEMFetchSpectrum;
    SEMFetchUpperOffsetMarginPtr SEMFetchUpperOffsetMargin;
    SEMFetchUpperOffsetMarginArrayPtr SEMFetchUpperOffsetMarginArray;
    SEMFetchUpperOffsetPowerPtr SEMFetchUpperOffsetPower;
    SEMFetchUpperOffsetPowerArrayPtr SEMFetchUpperOffsetPowerArray;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    SlotPhaseCfgSynchronizationModeAndIntervalPtr SlotPhaseCfgSynchronizationModeAndInterval;
    SlotPhaseFetchChipPhaseErrorLinearFitTracePtr SlotPhaseFetchChipPhaseErrorLinearFitTrace;
    SlotPhaseFetchChipPhaseErrorTracePtr SlotPhaseFetchChipPhaseErrorTrace;
    SlotPhaseFetchMaximumPhaseDiscontinuityPtr SlotPhaseFetchMaximumPhaseDiscontinuity;
    SlotPhaseFetchPhaseDiscontinuitiesPtr SlotPhaseFetchPhaseDiscontinuities;
    SlotPowerCfgSynchronizationModeAndIntervalPtr SlotPowerCfgSynchronizationModeAndInterval;
    SlotPowerFetchPowersPtr SlotPowerFetchPowers;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxcdma2k_grpc

#endif  // NIRFMXCDMA2K_GRPC_LIBRARY_H
