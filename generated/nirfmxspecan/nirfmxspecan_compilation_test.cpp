//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-RFMXSPECAN Metadata
//---------------------------------------------------------------------
#include "nirfmxspecan_library.h"

namespace nirfmxspecan_grpc {

int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 ACPCfgCarrierAndOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth, int32 numberOfOffsets, float64 channelSpacing)
{
  return RFmxSpecAn_ACPCfgCarrierAndOffsets(instrumentHandle, selectorString, integrationBandwidth, numberOfOffsets, channelSpacing);
}

int32 ACPCfgCarrierFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency)
{
  return RFmxSpecAn_ACPCfgCarrierFrequency(instrumentHandle, selectorString, carrierFrequency);
}

int32 ACPCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  return RFmxSpecAn_ACPCfgCarrierIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
}

int32 ACPCfgCarrierMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierMode)
{
  return RFmxSpecAn_ACPCfgCarrierMode(instrumentHandle, selectorString, carrierMode);
}

int32 ACPCfgCarrierRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  return RFmxSpecAn_ACPCfgCarrierRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
}

int32 ACPCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints)
{
  return RFmxSpecAn_ACPCfgDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
}

int32 ACPCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  return RFmxSpecAn_ACPCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
}

int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  return RFmxSpecAn_ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  return RFmxSpecAn_ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 ACPCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers)
{
  return RFmxSpecAn_ACPCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
}

int32 ACPCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  return RFmxSpecAn_ACPCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 ACPCfgOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency, int32 offsetSideband, int32 offsetEnabled)
{
  return RFmxSpecAn_ACPCfgOffset(instrumentHandle, selectorString, offsetFrequency, offsetSideband, offsetEnabled);
}

int32 ACPCfgOffsetArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency[], int32 offsetSideband[], int32 offsetEnabled[], int32 numberOfElements)
{
  return RFmxSpecAn_ACPCfgOffsetArray(instrumentHandle, selectorString, offsetFrequency, offsetSideband, offsetEnabled, numberOfElements);
}

int32 ACPCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition)
{
  return RFmxSpecAn_ACPCfgOffsetFrequencyDefinition(instrumentHandle, selectorString, offsetFrequencyDefinition);
}

int32 ACPCfgOffsetIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  return RFmxSpecAn_ACPCfgOffsetIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
}

int32 ACPCfgOffsetIntegrationBandwidthArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth[], int32 numberOfElements)
{
  return RFmxSpecAn_ACPCfgOffsetIntegrationBandwidthArray(instrumentHandle, selectorString, integrationBandwidth, numberOfElements);
}

int32 ACPCfgOffsetPowerReference(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetReferenceCarrier, int32 offsetReferenceSpecific)
{
  return RFmxSpecAn_ACPCfgOffsetPowerReference(instrumentHandle, selectorString, offsetReferenceCarrier, offsetReferenceSpecific);
}

int32 ACPCfgOffsetPowerReferenceArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetPowerReferenceCarrier[], int32 offsetPowerReferenceSpecific[], int32 numberOfElements)
{
  return RFmxSpecAn_ACPCfgOffsetPowerReferenceArray(instrumentHandle, selectorString, offsetPowerReferenceCarrier, offsetPowerReferenceSpecific, numberOfElements);
}

int32 ACPCfgOffsetRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  return RFmxSpecAn_ACPCfgOffsetRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
}

int32 ACPCfgOffsetRRCFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled[], float64 rrcAlpha[], int32 numberOfElements)
{
  return RFmxSpecAn_ACPCfgOffsetRRCFilterArray(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha, numberOfElements);
}

int32 ACPCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation)
{
  return RFmxSpecAn_ACPCfgOffsetRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
}

int32 ACPCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements)
{
  return RFmxSpecAn_ACPCfgOffsetRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
}

int32 ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  return RFmxSpecAn_ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
}

int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
}

int32 ACPFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* totalRelativePower, float64* carrierOffset, float64* integrationBandwidth)
{
  return RFmxSpecAn_ACPFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, totalRelativePower, carrierOffset, integrationBandwidth);
}

int32 ACPFetchFrequencyResolution(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution)
{
  return RFmxSpecAn_ACPFetchFrequencyResolution(instrumentHandle, selectorString, timeout, frequencyResolution);
}

int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower)
{
  return RFmxSpecAn_ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
}

int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
}

int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
}

int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 ACPFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower)
{
  return RFmxSpecAn_ACPFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
}

int32 ACPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower, float64* offsetCh0LowerRelativePower, float64* offsetCh0UpperRelativePower, float64* offsetCh1LowerRelativePower, float64* offsetCh1UpperRelativePower)
{
  return RFmxSpecAn_ACPRead(instrumentHandle, selectorString, timeout, carrierAbsolutePower, offsetCh0LowerRelativePower, offsetCh0UpperRelativePower, offsetCh1LowerRelativePower, offsetCh1UpperRelativePower);
}

int32 ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  return RFmxSpecAn_ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 AMPMCfgAMToAMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType)
{
  return RFmxSpecAn_AMPMCfgAMToAMCurveFit(instrumentHandle, selectorString, amToAMCurveFitOrder, amToAMCurveFitType);
}

int32 AMPMCfgAMToPMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType)
{
  return RFmxSpecAn_AMPMCfgAMToPMCurveFit(instrumentHandle, selectorString, amToPMCurveFitOrder, amToPMCurveFitType);
}

int32 AMPMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxSpecAn_AMPMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 AMPMCfgCompressionPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 compressionPointEnabled, float64 compressionLevel[], int32 arraySize)
{
  return RFmxSpecAn_AMPMCfgCompressionPoints(instrumentHandle, selectorString, compressionPointEnabled, compressionLevel, arraySize);
}

int32 AMPMCfgDUTAverageInputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower)
{
  return RFmxSpecAn_AMPMCfgDUTAverageInputPower(instrumentHandle, selectorString, dutAverageInputPower);
}

int32 AMPMCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_AMPMCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 AMPMCfgMeasurementSampleRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate)
{
  return RFmxSpecAn_AMPMCfgMeasurementSampleRate(instrumentHandle, selectorString, sampleRateMode, sampleRate);
}

int32 AMPMCfgReferencePowerType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referencePowerType)
{
  return RFmxSpecAn_AMPMCfgReferencePowerType(instrumentHandle, selectorString, referencePowerType);
}

int32 AMPMCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType)
{
  return RFmxSpecAn_AMPMCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
}

int32 AMPMCfgSynchronizationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod)
{
  return RFmxSpecAn_AMPMCfgSynchronizationMethod(instrumentHandle, selectorString, synchronizationMethod);
}

int32 AMPMCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  return RFmxSpecAn_AMPMCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
}

int32 AMPMFetchAMToAMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToAM[], float32 curveFitAMToAM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchAMToAMTrace(instrumentHandle, selectorString, timeout, referencePowers, measuredAMToAM, curveFitAMToAM, arraySize, actualArraySize);
}

int32 AMPMFetchAMToPMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToPM[], float32 curveFitAMToPM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchAMToPMTrace(instrumentHandle, selectorString, timeout, referencePowers, measuredAMToPM, curveFitAMToPM, arraySize, actualArraySize);
}

int32 AMPMFetchCompressionPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inputCompressionPoint[], float64 outputCompressionPoint[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchCompressionPoints(instrumentHandle, selectorString, timeout, inputCompressionPoint, outputCompressionPoint, arraySize, actualArraySize);
}

int32 AMPMFetchCurveFitCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 amToAMCoefficients[], float32 amToPMCoefficients[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchCurveFitCoefficients(instrumentHandle, selectorString, timeout, amToAMCoefficients, amToPMCoefficients, arraySize, actualArraySize);
}

int32 AMPMFetchCurveFitResidual(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* amToAMResidual, float64* amToPMResidual)
{
  return RFmxSpecAn_AMPMFetchCurveFitResidual(instrumentHandle, selectorString, timeout, amToAMResidual, amToPMResidual);
}

int32 AMPMFetchDUTCharacteristics(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanLinearGain, float64* onedBCompressionPoint, float64* meanRMSEVM)
{
  return RFmxSpecAn_AMPMFetchDUTCharacteristics(instrumentHandle, selectorString, timeout, meanLinearGain, onedBCompressionPoint, meanRMSEVM);
}

int32 AMPMFetchError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* gainErrorRange, float64* phaseErrorRange, float64* meanPhaseError)
{
  return RFmxSpecAn_AMPMFetchError(instrumentHandle, selectorString, timeout, gainErrorRange, phaseErrorRange, meanPhaseError);
}

int32 AMPMFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
}

int32 AMPMFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
}

int32 AMPMFetchRelativePhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePhase[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchRelativePhaseTrace(instrumentHandle, selectorString, timeout, x0, dx, relativePhase, arraySize, actualArraySize);
}

int32 AMPMFetchRelativePowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_AMPMFetchRelativePowerTrace(instrumentHandle, selectorString, timeout, x0, dx, relativePower, arraySize, actualArraySize);
}

int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_AbortMeasurements(instrumentHandle, selectorString);
}

int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  return RFmxSpecAn_AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  return RFmxSpecAn_AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
}

int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel)
{
  return RFmxSpecAn_AutoLevel(instrumentHandle, selectorString, bandwidth, measurementInterval, referenceLevel);
}

int32 BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildCarrierString2(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildHarmonicString(char selectorString[], int32 harmonicNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildHarmonicString2(selectorString, harmonicNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildIntermodString(char selectorString[], int32 intermodNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildIntermodString(selectorString, intermodNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildListStepString(char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[])
{
  return RFmxSpecAn_BuildListStepString(listName, resultName, stepNumber, selectorStringLength, selectorString);
}

int32 BuildListString(char listName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  return RFmxSpecAn_BuildListString(listName, resultName, selectorStringLength, selectorString);
}

int32 BuildMarkerString(char selectorString[], int32 markerNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildMarkerString2(selectorString, markerNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildOffsetString2(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildRangeSpurString(char signalName[], char resultName[], int32 rangeNumber, int32 spurNumber, int32 selectorStringLength, char selectorString[])
{
  return RFmxSpecAn_BuildRangeSpurString(signalName, resultName, rangeNumber, spurNumber, selectorStringLength, selectorString);
}

int32 BuildRangeString(char selectorString[], int32 rangeNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildRangeString2(selectorString, rangeNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildSegmentString(selectorString, segmentNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  return RFmxSpecAn_BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 BuildSpurString(char selectorString[], int32 spurNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxSpecAn_BuildSpurString2(selectorString, spurNumber, selectorStringOutLength, selectorStringOut);
}

int32 CCDFCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_CCDFCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 CCDFCfgNumberOfRecords(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRecords)
{
  return RFmxSpecAn_CCDFCfgNumberOfRecords(instrumentHandle, selectorString, numberOfRecords);
}

int32 CCDFCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  return RFmxSpecAn_CCDFCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
}

int32 CCDFCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  return RFmxSpecAn_CCDFCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
}

int32 CCDFFetchBasicPowerProbabilities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* tenPercentPower, float64* onePercentPower, float64* oneTenthPercentPower, float64* oneHundredthPercentPower, float64* oneThousandthPercentPower, float64* oneTenThousandthPercentPower)
{
  return RFmxSpecAn_CCDFFetchBasicPowerProbabilities(instrumentHandle, selectorString, timeout, tenPercentPower, onePercentPower, oneTenthPercentPower, oneHundredthPercentPower, oneThousandthPercentPower, oneTenThousandthPercentPower);
}

int32 CCDFFetchGaussianProbabilitiesTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 gaussianProbabilities[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_CCDFFetchGaussianProbabilitiesTrace(instrumentHandle, selectorString, timeout, x0, dx, gaussianProbabilities, arraySize, actualArraySize);
}

int32 CCDFFetchPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount)
{
  return RFmxSpecAn_CCDFFetchPower(instrumentHandle, selectorString, timeout, meanPower, meanPowerPercentile, peakPower, measuredSamplesCount);
}

int32 CCDFFetchProbabilitiesTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 probabilities[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_CCDFFetchProbabilitiesTrace(instrumentHandle, selectorString, timeout, x0, dx, probabilities, arraySize, actualArraySize);
}

int32 CCDFRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount)
{
  return RFmxSpecAn_CCDFRead(instrumentHandle, selectorString, timeout, meanPower, meanPowerPercentile, peakPower, measuredSamplesCount);
}

int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 CHPCfgCarrierOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency)
{
  return RFmxSpecAn_CHPCfgCarrierOffset(instrumentHandle, selectorString, carrierFrequency);
}

int32 CHPCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints)
{
  return RFmxSpecAn_CHPCfgDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
}

int32 CHPCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  return RFmxSpecAn_CHPCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
}

int32 CHPCfgIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  return RFmxSpecAn_CHPCfgIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
}

int32 CHPCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers)
{
  return RFmxSpecAn_CHPCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
}

int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 CHPCfgRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  return RFmxSpecAn_CHPCfgRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
}

int32 CHPCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  return RFmxSpecAn_CHPCfgSpan(instrumentHandle, selectorString, span);
}

int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 CHPFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd, float64* relativePower)
{
  return RFmxSpecAn_CHPFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, psd, relativePower);
}

int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 CHPFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower)
{
  return RFmxSpecAn_CHPFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
}

int32 CHPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd)
{
  return RFmxSpecAn_CHPRead(instrumentHandle, selectorString, timeout, absolutePower, psd);
}

int32 CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  return RFmxSpecAn_CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  return RFmxSpecAn_CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  return RFmxSpecAn_CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  return RFmxSpecAn_CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  return RFmxSpecAn_CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger)
{
  return RFmxSpecAn_CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeLevel, iqPowerEdgeSlope, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, enableTrigger);
}

int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  return RFmxSpecAn_CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  return RFmxSpecAn_CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
}

int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  return RFmxSpecAn_CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  return RFmxSpecAn_CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  return RFmxSpecAn_CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  return RFmxSpecAn_CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_ClearNamedResult(instrumentHandle, selectorString);
}

int32 ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
}

int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  return RFmxSpecAn_CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  return RFmxSpecAn_Close(instrumentHandle, forceDestroy);
}

int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_Commit(instrumentHandle, selectorString);
}

int32 CreateList(niRFmxInstrHandle instrumentHandle, char listName[])
{
  return RFmxSpecAn_CreateList(instrumentHandle, listName);
}

int32 CreateListStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex)
{
  return RFmxSpecAn_CreateListStep(instrumentHandle, selectorString, createdStepIndex);
}

int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  return RFmxSpecAn_CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 DPDApplyDigitalPredistortion(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64 measurementTimeout, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr, float64* powerOffset)
{
  return RFmxSpecAn_DPDApplyDigitalPredistortion(instrumentHandle, selectorString, x0In, dxIn, waveformIn, arraySizeIn, idleDurationPresent, measurementTimeout, x0Out, dxOut, waveformOut, arraySizeOut, actualArraySize, papr, powerOffset);
}

int32 DPDApplyPreDPDSignalConditioning(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr)
{
  return RFmxSpecAn_DPDApplyPreDPDSignalConditioning(instrumentHandle, selectorString, x0In, dxIn, waveformIn, arraySizeIn, idleDurationPresent, x0Out, dxOut, waveformOut, arraySizeOut, actualArraySize, papr);
}

int32 DPDCfgApplyDPDConfigurationInput(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurationInput)
{
  return RFmxSpecAn_DPDCfgApplyDPDConfigurationInput(instrumentHandle, selectorString, configurationInput);
}

int32 DPDCfgApplyDPDLookupTableCorrectionType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lutCorrectionType)
{
  return RFmxSpecAn_DPDCfgApplyDPDLookupTableCorrectionType(instrumentHandle, selectorString, lutCorrectionType);
}

int32 DPDCfgApplyDPDMemoryModelCorrectionType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryModelCorrectionType)
{
  return RFmxSpecAn_DPDCfgApplyDPDMemoryModelCorrectionType(instrumentHandle, selectorString, memoryModelCorrectionType);
}

int32 DPDCfgApplyDPDUserDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle dpdPolynomial[], int32 arraySize)
{
  return RFmxSpecAn_DPDCfgApplyDPDUserDPDPolynomial(instrumentHandle, selectorString, dpdPolynomial, arraySize);
}

int32 DPDCfgApplyDPDUserLookupTable(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 lutInputPowers[], NIComplexSingle lutComplexGains[], int32 arraySize)
{
  return RFmxSpecAn_DPDCfgApplyDPDUserLookupTable(instrumentHandle, selectorString, lutInputPowers, lutComplexGains, arraySize);
}

int32 DPDCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxSpecAn_DPDCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 DPDCfgDPDModel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dpdModel)
{
  return RFmxSpecAn_DPDCfgDPDModel(instrumentHandle, selectorString, dpdModel);
}

int32 DPDCfgDUTAverageInputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower)
{
  return RFmxSpecAn_DPDCfgDUTAverageInputPower(instrumentHandle, selectorString, dutAverageInputPower);
}

int32 DPDCfgGeneralizedMemoryPolynomialCrossTerms(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialLeadOrder, int32 memoryPolynomialLagOrder, int32 memoryPolynomialLeadMemoryDepth, int32 memoryPolynomialLagMemoryDepth, int32 memoryPolynomialMaximumLead, int32 memoryPolynomialMaximumLag)
{
  return RFmxSpecAn_DPDCfgGeneralizedMemoryPolynomialCrossTerms(instrumentHandle, selectorString, memoryPolynomialLeadOrder, memoryPolynomialLagOrder, memoryPolynomialLeadMemoryDepth, memoryPolynomialLagMemoryDepth, memoryPolynomialMaximumLead, memoryPolynomialMaximumLag);
}

int32 DPDCfgIterativeDPDEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 iterativeDPDEnabled)
{
  return RFmxSpecAn_DPDCfgIterativeDPDEnabled(instrumentHandle, selectorString, iterativeDPDEnabled);
}

int32 DPDCfgLookupTableAMToAMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType)
{
  return RFmxSpecAn_DPDCfgLookupTableAMToAMCurveFit(instrumentHandle, selectorString, amToAMCurveFitOrder, amToAMCurveFitType);
}

int32 DPDCfgLookupTableAMToPMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType)
{
  return RFmxSpecAn_DPDCfgLookupTableAMToPMCurveFit(instrumentHandle, selectorString, amToPMCurveFitOrder, amToPMCurveFitType);
}

int32 DPDCfgLookupTableStepSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 stepSize)
{
  return RFmxSpecAn_DPDCfgLookupTableStepSize(instrumentHandle, selectorString, stepSize);
}

int32 DPDCfgLookupTableThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  return RFmxSpecAn_DPDCfgLookupTableThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
}

int32 DPDCfgLookupTableType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lookupTableType)
{
  return RFmxSpecAn_DPDCfgLookupTableType(instrumentHandle, selectorString, lookupTableType);
}

int32 DPDCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_DPDCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 DPDCfgMeasurementSampleRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate)
{
  return RFmxSpecAn_DPDCfgMeasurementSampleRate(instrumentHandle, selectorString, sampleRateMode, sampleRate);
}

int32 DPDCfgMemoryPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialOrder, int32 memoryPolynomialMemoryDepth)
{
  return RFmxSpecAn_DPDCfgMemoryPolynomial(instrumentHandle, selectorString, memoryPolynomialOrder, memoryPolynomialMemoryDepth);
}

int32 DPDCfgPreviousDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle previousDPDPolynomial[], int32 arraySize)
{
  return RFmxSpecAn_DPDCfgPreviousDPDPolynomial(instrumentHandle, selectorString, previousDPDPolynomial, arraySize);
}

int32 DPDCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType)
{
  return RFmxSpecAn_DPDCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
}

int32 DPDCfgSynchronizationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod)
{
  return RFmxSpecAn_DPDCfgSynchronizationMethod(instrumentHandle, selectorString, synchronizationMethod);
}

int32 DPDFetchApplyDPDPreCFRPAPR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preCFRPAPR)
{
  return RFmxSpecAn_DPDFetchApplyDPDPreCFRPAPR(instrumentHandle, selectorString, timeout, preCFRPAPR);
}

int32 DPDFetchAverageGain(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageGain)
{
  return RFmxSpecAn_DPDFetchAverageGain(instrumentHandle, selectorString, timeout, averageGain);
}

int32 DPDFetchDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dpdPolynomial[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_DPDFetchDPDPolynomial(instrumentHandle, selectorString, timeout, dpdPolynomial, arraySize, actualArraySize);
}

int32 DPDFetchLookupTable(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 inputPowers[], NIComplexSingle complexGains[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_DPDFetchLookupTable(instrumentHandle, selectorString, timeout, inputPowers, complexGains, arraySize, actualArraySize);
}

int32 DPDFetchNMSE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* nmse)
{
  return RFmxSpecAn_DPDFetchNMSE(instrumentHandle, selectorString, timeout, nmse);
}

int32 DPDFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_DPDFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
}

int32 DPDFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_DPDFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
}

int32 DeleteList(niRFmxInstrHandle instrumentHandle, char listName[])
{
  return RFmxSpecAn_DeleteList(instrumentHandle, listName);
}

int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  return RFmxSpecAn_DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_DisableTrigger(instrumentHandle, selectorString);
}

int32 FCntCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_FCntCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 FCntCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_FCntCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 FCntCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  return RFmxSpecAn_FCntCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
}

int32 FCntCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  return RFmxSpecAn_FCntCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
}

int32 FCntFetchAllanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* allanDeviation)
{
  return RFmxSpecAn_FCntFetchAllanDeviation(instrumentHandle, selectorString, timeout, allanDeviation);
}

int32 FCntFetchFrequencyTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequencyTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_FCntFetchFrequencyTrace(instrumentHandle, selectorString, timeout, x0, dx, frequencyTrace, arraySize, actualArraySize);
}

int32 FCntFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase)
{
  return RFmxSpecAn_FCntFetchMeasurement(instrumentHandle, selectorString, timeout, averageRelativeFrequency, averageAbsoluteFrequency, meanPhase);
}

int32 FCntFetchPhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_FCntFetchPhaseTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseTrace, arraySize, actualArraySize);
}

int32 FCntFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 powerTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_FCntFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, powerTrace, arraySize, actualArraySize);
}

int32 FCntRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase)
{
  return RFmxSpecAn_FCntRead(instrumentHandle, selectorString, timeout, averageRelativeFrequency, averageAbsoluteFrequency, meanPhase);
}

int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  return RFmxSpecAn_GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  return RFmxSpecAn_GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  return RFmxSpecAn_GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  return RFmxSpecAn_GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  return RFmxSpecAn_GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  return RFmxSpecAn_GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  return RFmxSpecAn_GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  return RFmxSpecAn_GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  return RFmxSpecAn_GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  return RFmxSpecAn_GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  return RFmxSpecAn_GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxSpecAn_GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxSpecAn_GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 HarmCfgAutoHarmonics(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoHarmonicsSetupEnabled)
{
  return RFmxSpecAn_HarmCfgAutoHarmonics(instrumentHandle, selectorString, autoHarmonicsSetupEnabled);
}

int32 HarmCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_HarmCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 HarmCfgFundamentalMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_HarmCfgFundamentalMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 HarmCfgFundamentalRBW(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  return RFmxSpecAn_HarmCfgFundamentalRBW(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
}

int32 HarmCfgHarmonic(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder, float64 harmonicBandwidth, int32 harmonicEnabled, float64 harmonicMeasurementInterval)
{
  return RFmxSpecAn_HarmCfgHarmonic(instrumentHandle, selectorString, harmonicOrder, harmonicBandwidth, harmonicEnabled, harmonicMeasurementInterval);
}

int32 HarmCfgHarmonicArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder[], float64 harmonicBandwidth[], int32 harmonicEnabled[], float64 harmonicMeasurementInterval[], int32 numberOfElements)
{
  return RFmxSpecAn_HarmCfgHarmonicArray(instrumentHandle, selectorString, harmonicOrder, harmonicBandwidth, harmonicEnabled, harmonicMeasurementInterval, numberOfElements);
}

int32 HarmCfgNumberOfHarmonics(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfHarmonics)
{
  return RFmxSpecAn_HarmCfgNumberOfHarmonics(instrumentHandle, selectorString, numberOfHarmonics);
}

int32 HarmFetchHarmonicMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativePower, float64* averageAbsolutePower, float64* rbw, float64* frequency)
{
  return RFmxSpecAn_HarmFetchHarmonicMeasurement(instrumentHandle, selectorString, timeout, averageRelativePower, averageAbsolutePower, rbw, frequency);
}

int32 HarmFetchHarmonicMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averageRelativePower[], float64 averageAbsolutePower[], float64 rbw[], float64 frequency[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_HarmFetchHarmonicMeasurementArray(instrumentHandle, selectorString, timeout, averageRelativePower, averageAbsolutePower, rbw, frequency, arraySize, actualArraySize);
}

int32 HarmFetchHarmonicPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_HarmFetchHarmonicPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
}

int32 HarmFetchTHD(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower, float64* fundamentalFrequency)
{
  return RFmxSpecAn_HarmFetchTHD(instrumentHandle, selectorString, timeout, totalHarmonicDistortion, averageFundamentalPower, fundamentalFrequency);
}

int32 HarmRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower)
{
  return RFmxSpecAn_HarmRead(instrumentHandle, selectorString, timeout, totalHarmonicDistortion, averageFundamentalPower);
}

int32 IDPDCfgEqualizerCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle equalizerCoefficients[], int32 arraySize)
{
  return RFmxSpecAn_IDPDCfgEqualizerCoefficients(instrumentHandle, selectorString, x0, dx, equalizerCoefficients, arraySize);
}

int32 IDPDCfgPredistortedWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle predistortedWaveform[], int32 arraySize, float64 targetGain)
{
  return RFmxSpecAn_IDPDCfgPredistortedWaveform(instrumentHandle, selectorString, x0, dx, predistortedWaveform, arraySize, targetGain);
}

int32 IDPDCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType)
{
  return RFmxSpecAn_IDPDCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
}

int32 IDPDFetchEqualizerCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle equalizerCoefficients[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IDPDFetchEqualizerCoefficients(instrumentHandle, selectorString, timeout, x0, dx, equalizerCoefficients, arraySize, actualArraySize);
}

int32 IDPDFetchPredistortedWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle predistortedWaveform[], float64* papr, float64* powerOffset, float64* gain, int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IDPDFetchPredistortedWaveform(instrumentHandle, selectorString, timeout, x0, dx, predistortedWaveform, papr, powerOffset, gain, arraySize, actualArraySize);
}

int32 IDPDFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IDPDFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
}

int32 IDPDFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IDPDFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
}

int32 IDPDGetEqualizerReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* x0, float64* dx, NIComplexSingle equalizerReferenceWaveform[], float64* papr, int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IDPDGetEqualizerReferenceWaveform(instrumentHandle, selectorString, x0, dx, equalizerReferenceWaveform, papr, arraySize, actualArraySize);
}

int32 IMCfgAutoIntermodsSetup(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoIntermodsSetupEnabled, int32 maximumIntermodOrder)
{
  return RFmxSpecAn_IMCfgAutoIntermodsSetup(instrumentHandle, selectorString, autoIntermodsSetupEnabled, maximumIntermodOrder);
}

int32 IMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_IMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 IMCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  return RFmxSpecAn_IMCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
}

int32 IMCfgFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyDefinition)
{
  return RFmxSpecAn_IMCfgFrequencyDefinition(instrumentHandle, selectorString, frequencyDefinition);
}

int32 IMCfgFundamentalTones(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 lowerToneFrequency, float64 upperToneFrequency)
{
  return RFmxSpecAn_IMCfgFundamentalTones(instrumentHandle, selectorString, lowerToneFrequency, upperToneFrequency);
}

int32 IMCfgIntermod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder, float64 lowerIntermodFrequency, float64 upperIntermodFrequency, int32 intermodSide, int32 intermodEnabled)
{
  return RFmxSpecAn_IMCfgIntermod(instrumentHandle, selectorString, intermodOrder, lowerIntermodFrequency, upperIntermodFrequency, intermodSide, intermodEnabled);
}

int32 IMCfgIntermodArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder[], float64 lowerIntermodFrequency[], float64 upperIntermodFrequency[], int32 intermodSide[], int32 intermodEnabled[], int32 numberOfElements)
{
  return RFmxSpecAn_IMCfgIntermodArray(instrumentHandle, selectorString, intermodOrder, lowerIntermodFrequency, upperIntermodFrequency, intermodSide, intermodEnabled, numberOfElements);
}

int32 IMCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  return RFmxSpecAn_IMCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 IMCfgNumberOfIntermods(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfIntermods)
{
  return RFmxSpecAn_IMCfgNumberOfIntermods(instrumentHandle, selectorString, numberOfIntermods);
}

int32 IMCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_IMCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 IMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_IMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 IMFetchFundamentalMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerTonePower, float64* upperTonePower)
{
  return RFmxSpecAn_IMFetchFundamentalMeasurement(instrumentHandle, selectorString, timeout, lowerTonePower, upperTonePower);
}

int32 IMFetchInterceptPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* worstCaseOutputInterceptPower, float64* lowerOutputInterceptPower, float64* upperOutputInterceptPower)
{
  return RFmxSpecAn_IMFetchInterceptPower(instrumentHandle, selectorString, timeout, intermodOrder, worstCaseOutputInterceptPower, lowerOutputInterceptPower, upperOutputInterceptPower);
}

int32 IMFetchInterceptPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 worstCaseOutputInterceptPower[], float64 lowerOutputInterceptPower[], float64 upperOutputInterceptPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IMFetchInterceptPowerArray(instrumentHandle, selectorString, timeout, intermodOrder, worstCaseOutputInterceptPower, lowerOutputInterceptPower, upperOutputInterceptPower, arraySize, actualArraySize);
}

int32 IMFetchIntermodMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* lowerIntermodPower, float64* upperIntermodPower)
{
  return RFmxSpecAn_IMFetchIntermodMeasurement(instrumentHandle, selectorString, timeout, intermodOrder, lowerIntermodPower, upperIntermodPower);
}

int32 IMFetchIntermodMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 lowerIntermodPower[], float64 upperIntermodPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IMFetchIntermodMeasurementArray(instrumentHandle, selectorString, timeout, intermodOrder, lowerIntermodPower, upperIntermodPower, arraySize, actualArraySize);
}

int32 IMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 spectrumIndex, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IMFetchSpectrum(instrumentHandle, selectorString, timeout, spectrumIndex, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 IQCfgAcquisition(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 sampleRate, int32 numberOfRecords, float64 acquisitionTime, float64 pretriggerTime)
{
  return RFmxSpecAn_IQCfgAcquisition(instrumentHandle, selectorString, sampleRate, numberOfRecords, acquisitionTime, pretriggerTime);
}

int32 IQCfgBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthAuto, float64 bandwidth)
{
  return RFmxSpecAn_IQCfgBandwidth(instrumentHandle, selectorString, bandwidthAuto, bandwidth);
}

int32 IQFetchData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, float64* t0, float64* dt, NIComplexSingle data[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_IQFetchData(instrumentHandle, selectorString, timeout, recordToFetch, samplesToRead, t0, dt, data, arraySize, actualArraySize);
}

int32 IQGetRecordsDone(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* recordsDone)
{
  return RFmxSpecAn_IQGetRecordsDone(instrumentHandle, selectorString, recordsDone);
}

int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  return RFmxSpecAn_Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  return RFmxSpecAn_InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  return RFmxSpecAn_Initiate(instrumentHandle, selectorString, resultName);
}

int32 MarkerCfgNumberOfMarkers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfMarkers)
{
  return RFmxSpecAn_MarkerCfgNumberOfMarkers(instrumentHandle, selectorString, numberOfMarkers);
}

int32 MarkerCfgPeakExcursion(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 peakExcursionEnabled, float64 peakExcursion)
{
  return RFmxSpecAn_MarkerCfgPeakExcursion(instrumentHandle, selectorString, peakExcursionEnabled, peakExcursion);
}

int32 MarkerCfgReferenceMarker(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceMarker)
{
  return RFmxSpecAn_MarkerCfgReferenceMarker(instrumentHandle, selectorString, referenceMarker);
}

int32 MarkerCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 threshold)
{
  return RFmxSpecAn_MarkerCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, threshold);
}

int32 MarkerCfgTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 trace)
{
  return RFmxSpecAn_MarkerCfgTrace(instrumentHandle, selectorString, trace);
}

int32 MarkerCfgType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 markerType)
{
  return RFmxSpecAn_MarkerCfgType(instrumentHandle, selectorString, markerType);
}

int32 MarkerCfgXLocation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerXLocation)
{
  return RFmxSpecAn_MarkerCfgXLocation(instrumentHandle, selectorString, markerXLocation);
}

int32 MarkerFetchXY(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* markerXLocation, float64* markerYLocation)
{
  return RFmxSpecAn_MarkerFetchXY(instrumentHandle, selectorString, markerXLocation, markerYLocation);
}

int32 MarkerNextPeak(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nextPeak, int32* nextPeakFound)
{
  return RFmxSpecAn_MarkerNextPeak(instrumentHandle, selectorString, nextPeak, nextPeakFound);
}

int32 MarkerPeakSearch(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* numberOfPeaks)
{
  return RFmxSpecAn_MarkerPeakSearch(instrumentHandle, selectorString, numberOfPeaks);
}

int32 NFCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxSpecAn_NFCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NFCfgCalibrationLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 calibrationLossCompensationEnabled, float64 calibrationLossFrequency[], float64 calibrationLoss[], float64 calibrationLossTemperature, int32 arraySize)
{
  return RFmxSpecAn_NFCfgCalibrationLoss(instrumentHandle, selectorString, calibrationLossCompensationEnabled, calibrationLossFrequency, calibrationLoss, calibrationLossTemperature, arraySize);
}

int32 NFCfgColdSourceDUTSParameters(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutsParametersFrequency[], float64 duts21[], float64 duts12[], float64 duts11[], float64 duts22[], int32 arraySize)
{
  return RFmxSpecAn_NFCfgColdSourceDUTSParameters(instrumentHandle, selectorString, dutsParametersFrequency, duts21, duts12, duts11, duts22, arraySize);
}

int32 NFCfgColdSourceInputTermination(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 terminationVSWR[], float64 terminationVSWRFrequency[], float64 terminationTemperature, int32 arraySize)
{
  return RFmxSpecAn_NFCfgColdSourceInputTermination(instrumentHandle, selectorString, terminationVSWR, terminationVSWRFrequency, terminationTemperature, arraySize);
}

int32 NFCfgColdSourceMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 coldSourceMode)
{
  return RFmxSpecAn_NFCfgColdSourceMode(instrumentHandle, selectorString, coldSourceMode);
}

int32 NFCfgDUTInputLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutInputLossCompensationEnabled, float64 dutInputLossFrequency[], float64 dutInputLoss[], float64 dutInputLossTemperature, int32 arraySize)
{
  return RFmxSpecAn_NFCfgDUTInputLoss(instrumentHandle, selectorString, dutInputLossCompensationEnabled, dutInputLossFrequency, dutInputLoss, dutInputLossTemperature, arraySize);
}

int32 NFCfgDUTOutputLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutOutputLossCompensationEnabled, float64 dutOutputLossFrequency[], float64 dutOutputLoss[], float64 dutOutputLossTemperature, int32 arraySize)
{
  return RFmxSpecAn_NFCfgDUTOutputLoss(instrumentHandle, selectorString, dutOutputLossCompensationEnabled, dutOutputLossFrequency, dutOutputLoss, dutOutputLossTemperature, arraySize);
}

int32 NFCfgFrequencyList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize)
{
  return RFmxSpecAn_NFCfgFrequencyList(instrumentHandle, selectorString, frequencyList, arraySize);
}

int32 NFCfgFrequencyListStartStopPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 numberOfPoints)
{
  return RFmxSpecAn_NFCfgFrequencyList_StartStopPoints(instrumentHandle, selectorString, startFrequency, stopFrequency, numberOfPoints);
}

int32 NFCfgFrequencyListStartStopStep(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 stepSize)
{
  return RFmxSpecAn_NFCfgFrequencyList_StartStopStep(instrumentHandle, selectorString, startFrequency, stopFrequency, stepSize);
}

int32 NFCfgMeasurementBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth)
{
  return RFmxSpecAn_NFCfgMeasurementBandwidth(instrumentHandle, selectorString, measurementBandwidth);
}

int32 NFCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_NFCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 NFCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  return RFmxSpecAn_NFCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 NFCfgYFactorMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 yFactorMode)
{
  return RFmxSpecAn_NFCfgYFactorMode(instrumentHandle, selectorString, yFactorMode);
}

int32 NFCfgYFactorNoiseSourceENR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 enrFrequency[], float64 enr[], float64 coldTemperature, float64 offTemperature, int32 arraySize)
{
  return RFmxSpecAn_NFCfgYFactorNoiseSourceENR(instrumentHandle, selectorString, enrFrequency, enr, coldTemperature, offTemperature, arraySize);
}

int32 NFCfgYFactorNoiseSourceLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseSourceLossCompensationEnabled, float64 noiseSourceLossFrequency[], float64 noiseSourceLoss[], float64 noiseSourceLossTemperature, int32 arraySize)
{
  return RFmxSpecAn_NFCfgYFactorNoiseSourceLoss(instrumentHandle, selectorString, noiseSourceLossCompensationEnabled, noiseSourceLossFrequency, noiseSourceLoss, noiseSourceLossTemperature, arraySize);
}

int32 NFCfgYFactorNoiseSourceSettlingTime(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 settlingTime)
{
  return RFmxSpecAn_NFCfgYFactorNoiseSourceSettlingTime(instrumentHandle, selectorString, settlingTime);
}

int32 NFClearCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char calibrationSetupID[])
{
  return RFmxSpecAn_NFClearCalibrationDatabase(instrumentHandle, calibrationSetupID);
}

int32 NFFetchAnalyzerNoiseFigure(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 analyzerNoiseFigure[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_NFFetchAnalyzerNoiseFigure(instrumentHandle, selectorString, timeout, analyzerNoiseFigure, arraySize, actualArraySize);
}

int32 NFFetchColdSourcePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 coldSourcePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_NFFetchColdSourcePower(instrumentHandle, selectorString, timeout, coldSourcePower, arraySize, actualArraySize);
}

int32 NFFetchDUTNoiseFigureAndGain(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 dutNoiseFigure[], float64 dutNoiseTemperature[], float64 dutGain[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_NFFetchDUTNoiseFigureAndGain(instrumentHandle, selectorString, timeout, dutNoiseFigure, dutNoiseTemperature, dutGain, arraySize, actualArraySize);
}

int32 NFFetchYFactorPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 hotPower[], float64 coldPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_NFFetchYFactorPowers(instrumentHandle, selectorString, timeout, hotPower, coldPower, arraySize, actualArraySize);
}

int32 NFFetchYFactors(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 measurementYFactor[], float64 calibrationYFactor[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_NFFetchYFactors(instrumentHandle, selectorString, timeout, measurementYFactor, calibrationYFactor, arraySize, actualArraySize);
}

int32 NFRecommendReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutMaxGain, float64 dutMaxNoiseFigure, float64* referenceLevel)
{
  return RFmxSpecAn_NFRecommendReferenceLevel(instrumentHandle, selectorString, dutMaxGain, dutMaxNoiseFigure, referenceLevel);
}

int32 NFValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid)
{
  return RFmxSpecAn_NFValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
}

int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 OBWCfgBandwidthPercentage(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidthPercentage)
{
  return RFmxSpecAn_OBWCfgBandwidthPercentage(instrumentHandle, selectorString, bandwidthPercentage);
}

int32 OBWCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  return RFmxSpecAn_OBWCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
}

int32 OBWCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  return RFmxSpecAn_OBWCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
}

int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 OBWCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  return RFmxSpecAn_OBWCfgSpan(instrumentHandle, selectorString, span);
}

int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency)
{
  return RFmxSpecAn_OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, averagePower, frequencyResolution, startFrequency, stopFrequency);
}

int32 OBWFetchSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_OBWFetchSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 OBWRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency)
{
  return RFmxSpecAn_OBWRead(instrumentHandle, selectorString, timeout, occupiedBandwidth, averagePower, frequencyResolution, startFrequency, stopFrequency);
}

int32 PAVTCfgMeasurementBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth)
{
  return RFmxSpecAn_PAVTCfgMeasurementBandwidth(instrumentHandle, selectorString, measurementBandwidth);
}

int32 PAVTCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementOffset, float64 measurementLength)
{
  return RFmxSpecAn_PAVTCfgMeasurementInterval(instrumentHandle, selectorString, measurementOffset, measurementLength);
}

int32 PAVTCfgMeasurementIntervalMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementIntervalMode)
{
  return RFmxSpecAn_PAVTCfgMeasurementIntervalMode(instrumentHandle, selectorString, measurementIntervalMode);
}

int32 PAVTCfgMeasurementLocationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementLocationType)
{
  return RFmxSpecAn_PAVTCfgMeasurementLocationType(instrumentHandle, selectorString, measurementLocationType);
}

int32 PAVTCfgNumberOfSegments(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments)
{
  return RFmxSpecAn_PAVTCfgNumberOfSegments(instrumentHandle, selectorString, numberOfSegments);
}

int32 PAVTCfgSegmentMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset, float64 segmentMeasurementLength)
{
  return RFmxSpecAn_PAVTCfgSegmentMeasurementInterval(instrumentHandle, selectorString, segmentMeasurementOffset, segmentMeasurementLength);
}

int32 PAVTCfgSegmentMeasurementIntervalArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset[], float64 segmentMeasurementLength[], int32 numberOfElements)
{
  return RFmxSpecAn_PAVTCfgSegmentMeasurementIntervalArray(instrumentHandle, selectorString, segmentMeasurementOffset, segmentMeasurementLength, numberOfElements);
}

int32 PAVTCfgSegmentStartTimeList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentStartTime[], int32 numberOfElements)
{
  return RFmxSpecAn_PAVTCfgSegmentStartTimeList(instrumentHandle, selectorString, segmentStartTime, numberOfElements);
}

int32 PAVTCfgSegmentStartTimeStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments, float64 segment0StartTime, float64 segmentInterval)
{
  return RFmxSpecAn_PAVTCfgSegmentStartTimeStep(instrumentHandle, selectorString, numberOfSegments, segment0StartTime, segmentInterval);
}

int32 PAVTCfgSegmentType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType)
{
  return RFmxSpecAn_PAVTCfgSegmentType(instrumentHandle, selectorString, segmentType);
}

int32 PAVTCfgSegmentTypeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType[], int32 numberOfElements)
{
  return RFmxSpecAn_PAVTCfgSegmentTypeArray(instrumentHandle, selectorString, segmentType, numberOfElements);
}

int32 PAVTFetchAmplitudeTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 amplitude[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PAVTFetchAmplitudeTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, amplitude, arraySize, actualArraySize);
}

int32 PAVTFetchPhaseAndAmplitude(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRelativePhase, float64* meanRelativeAmplitude, float64* meanAbsolutePhase, float64* meanAbsoluteAmplitude)
{
  return RFmxSpecAn_PAVTFetchPhaseAndAmplitude(instrumentHandle, selectorString, timeout, meanRelativePhase, meanRelativeAmplitude, meanAbsolutePhase, meanAbsoluteAmplitude);
}

int32 PAVTFetchPhaseAndAmplitudeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRelativePhase[], float64 meanRelativeAmplitude[], float64 meanAbsolutePhase[], float64 meanAbsoluteAmplitude[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PAVTFetchPhaseAndAmplitudeArray(instrumentHandle, selectorString, timeout, meanRelativePhase, meanRelativeAmplitude, meanAbsolutePhase, meanAbsoluteAmplitude, arraySize, actualArraySize);
}

int32 PAVTFetchPhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 phase[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PAVTFetchPhaseTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, phase, arraySize, actualArraySize);
}

int32 PhaseNoiseCfgAutoRange(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 rbwPercentage)
{
  return RFmxSpecAn_PhaseNoiseCfgAutoRange(instrumentHandle, selectorString, startFrequency, stopFrequency, rbwPercentage);
}

int32 PhaseNoiseCfgAveragingMultiplier(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingMultiplier)
{
  return RFmxSpecAn_PhaseNoiseCfgAveragingMultiplier(instrumentHandle, selectorString, averagingMultiplier);
}

int32 PhaseNoiseCfgCancellation(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cancellationEnabled, float64 cancellationThreshold, float32 frequency[], float32 referencePhaseNoise[], int32 arraySize)
{
  return RFmxSpecAn_PhaseNoiseCfgCancellation(instrumentHandle, selectorString, cancellationEnabled, cancellationThreshold, frequency, referencePhaseNoise, arraySize);
}

int32 PhaseNoiseCfgIntegratedNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integratedNoiseRangeDefinition, float64 integratedNoiseStartFrequency[], float64 integratedNoiseStopFrequency[], int32 arraySize)
{
  return RFmxSpecAn_PhaseNoiseCfgIntegratedNoise(instrumentHandle, selectorString, integratedNoiseRangeDefinition, integratedNoiseStartFrequency, integratedNoiseStopFrequency, arraySize);
}

int32 PhaseNoiseCfgNumberOfRanges(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges)
{
  return RFmxSpecAn_PhaseNoiseCfgNumberOfRanges(instrumentHandle, selectorString, numberOfRanges);
}

int32 PhaseNoiseCfgRangeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rangeStartFrequency[], float64 rangeStopFrequency[], float64 rangeRBWPercentage[], int32 rangeAveragingCount[], int32 numberOfElements)
{
  return RFmxSpecAn_PhaseNoiseCfgRangeArray(instrumentHandle, selectorString, rangeStartFrequency, rangeStopFrequency, rangeRBWPercentage, rangeAveragingCount, numberOfElements);
}

int32 PhaseNoiseCfgRangeDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rangeDefinition)
{
  return RFmxSpecAn_PhaseNoiseCfgRangeDefinition(instrumentHandle, selectorString, rangeDefinition);
}

int32 PhaseNoiseCfgSmoothing(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 smoothingType, float64 smoothingPercentage)
{
  return RFmxSpecAn_PhaseNoiseCfgSmoothing(instrumentHandle, selectorString, smoothingType, smoothingPercentage);
}

int32 PhaseNoiseCfgSpotNoiseFrequencyList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize)
{
  return RFmxSpecAn_PhaseNoiseCfgSpotNoiseFrequencyList(instrumentHandle, selectorString, frequencyList, arraySize);
}

int32 PhaseNoiseCfgSpurRemoval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spurRemovalEnabled, float64 peakExcursion)
{
  return RFmxSpecAn_PhaseNoiseCfgSpurRemoval(instrumentHandle, selectorString, spurRemovalEnabled, peakExcursion);
}

int32 PhaseNoiseFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierFrequency, float64* carrierPower)
{
  return RFmxSpecAn_PhaseNoiseFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, carrierFrequency, carrierPower);
}

int32 PhaseNoiseFetchIntegratedNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 integratedPhaseNoise[], float64 residualPMInRadian[], float64 residualPMInDegree[], float64 residualFM[], float64 jitter[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PhaseNoiseFetchIntegratedNoise(instrumentHandle, selectorString, timeout, integratedPhaseNoise, residualPMInRadian, residualPMInDegree, residualFM, jitter, arraySize, actualArraySize);
}

int32 PhaseNoiseFetchMeasuredLogPlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 measuredPhaseNoise[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PhaseNoiseFetchMeasuredLogPlotTrace(instrumentHandle, selectorString, timeout, frequency, measuredPhaseNoise, arraySize, actualArraySize);
}

int32 PhaseNoiseFetchSmoothedLogPlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 smoothedPhaseNoise[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PhaseNoiseFetchSmoothedLogPlotTrace(instrumentHandle, selectorString, timeout, frequency, smoothedPhaseNoise, arraySize, actualArraySize);
}

int32 PhaseNoiseFetchSpotNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spotPhaseNoise[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_PhaseNoiseFetchSpotNoise(instrumentHandle, selectorString, timeout, spotPhaseNoise, arraySize, actualArraySize);
}

int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  return RFmxSpecAn_ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxSpecAn_ResetToDefault(instrumentHandle, selectorString);
}

int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 SEMCfgCarrierChannelBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierChannelBandwidth)
{
  return RFmxSpecAn_SEMCfgCarrierChannelBandwidth(instrumentHandle, selectorString, carrierChannelBandwidth);
}

int32 SEMCfgCarrierEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierEnabled)
{
  return RFmxSpecAn_SEMCfgCarrierEnabled(instrumentHandle, selectorString, carrierEnabled);
}

int32 SEMCfgCarrierFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency)
{
  return RFmxSpecAn_SEMCfgCarrierFrequency(instrumentHandle, selectorString, carrierFrequency);
}

int32 SEMCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  return RFmxSpecAn_SEMCfgCarrierIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
}

int32 SEMCfgCarrierRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_SEMCfgCarrierRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 SEMCfgCarrierRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  return RFmxSpecAn_SEMCfgCarrierRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
}

int32 SEMCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  return RFmxSpecAn_SEMCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
}

int32 SEMCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers)
{
  return RFmxSpecAn_SEMCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
}

int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  return RFmxSpecAn_SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop)
{
  return RFmxSpecAn_SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop);
}

int32 SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements)
{
  return RFmxSpecAn_SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop, numberOfElements);
}

int32 SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral)
{
  return RFmxSpecAn_SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, bandwidthIntegral);
}

int32 SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetEnabled, int32 offsetSideband)
{
  return RFmxSpecAn_SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetEnabled, offsetSideband);
}

int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetEnabled[], int32 offsetSideband[], int32 numberOfElements)
{
  return RFmxSpecAn_SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetEnabled, offsetSideband, numberOfElements);
}

int32 SEMCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition)
{
  return RFmxSpecAn_SEMCfgOffsetFrequencyDefinition(instrumentHandle, selectorString, offsetFrequencyDefinition);
}

int32 SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask)
{
  return RFmxSpecAn_SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
}

int32 SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements)
{
  return RFmxSpecAn_SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType, numberOfElements);
}

int32 SEMCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation)
{
  return RFmxSpecAn_SEMCfgOffsetRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
}

int32 SEMCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements)
{
  return RFmxSpecAn_SEMCfgOffsetRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
}

int32 SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode, float64 relativeLimitStart, float64 relativeLimitStop)
{
  return RFmxSpecAn_SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitMode, relativeLimitStart, relativeLimitStop);
}

int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  return RFmxSpecAn_SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitMode, relativeLimitStart, relativeLimitStop, numberOfElements);
}

int32 SEMCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  return RFmxSpecAn_SEMCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
}

int32 SEMCfgReferenceType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceType)
{
  return RFmxSpecAn_SEMCfgReferenceType(instrumentHandle, selectorString, referenceType);
}

int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 SEMFetchAbsoluteMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchAbsoluteMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, absoluteMask, arraySize, actualArraySize);
}

int32 SEMFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* totalRelativePower)
{
  return RFmxSpecAn_SEMFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, totalRelativePower);
}

int32 SEMFetchCompositeMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* compositeMeasurementStatus)
{
  return RFmxSpecAn_SEMFetchCompositeMeasurementStatus(instrumentHandle, selectorString, timeout, compositeMeasurementStatus);
}

int32 SEMFetchFrequencyResolution(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution)
{
  return RFmxSpecAn_SEMFetchFrequencyResolution(instrumentHandle, selectorString, timeout, frequencyResolution);
}

int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  return RFmxSpecAn_SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  return RFmxSpecAn_SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
}

int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchRelativeMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativeMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchRelativeMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, relativeMask, arraySize, actualArraySize);
}

int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 SEMFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower)
{
  return RFmxSpecAn_SEMFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
}

int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  return RFmxSpecAn_SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  return RFmxSpecAn_SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
}

int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
}

int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  return RFmxSpecAn_SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  return RFmxSpecAn_SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  return RFmxSpecAn_SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  return RFmxSpecAn_SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  return RFmxSpecAn_SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  return RFmxSpecAn_SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  return RFmxSpecAn_SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  return RFmxSpecAn_SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  return RFmxSpecAn_SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  return RFmxSpecAn_SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  return RFmxSpecAn_SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  return RFmxSpecAn_SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  return RFmxSpecAn_SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SpectrumCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_SpectrumCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 SpectrumCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints)
{
  return RFmxSpecAn_SpectrumCfgDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
}

int32 SpectrumCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  return RFmxSpecAn_SpectrumCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
}

int32 SpectrumCfgFrequencyStartStop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency)
{
  return RFmxSpecAn_SpectrumCfgFrequencyStartStop(instrumentHandle, selectorString, startFrequency, stopFrequency);
}

int32 SpectrumCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  return RFmxSpecAn_SpectrumCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 SpectrumCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumPowerUnits)
{
  return RFmxSpecAn_SpectrumCfgPowerUnits(instrumentHandle, selectorString, spectrumPowerUnits);
}

int32 SpectrumCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_SpectrumCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 SpectrumCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  return RFmxSpecAn_SpectrumCfgSpan(instrumentHandle, selectorString, span);
}

int32 SpectrumCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_SpectrumCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 SpectrumCfgVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio)
{
  return RFmxSpecAn_SpectrumCfgVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
}

int32 SpectrumFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakAmplitude, float64* peakFrequency, float64* frequencyResolution)
{
  return RFmxSpecAn_SpectrumFetchMeasurement(instrumentHandle, selectorString, timeout, peakAmplitude, peakFrequency, frequencyResolution);
}

int32 SpectrumFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpectrumFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
}

int32 SpectrumFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpectrumFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 SpectrumRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpectrumRead(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 SpectrumValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  return RFmxSpecAn_SpectrumValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 SpurCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_SpurCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 SpurCfgFFTWindowType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow)
{
  return RFmxSpecAn_SpurCfgFFTWindowType(instrumentHandle, selectorString, fftWindow);
}

int32 SpurCfgNumberOfRanges(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges)
{
  return RFmxSpecAn_SpurCfgNumberOfRanges(instrumentHandle, selectorString, numberOfRanges);
}

int32 SpurCfgRangeAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop)
{
  return RFmxSpecAn_SpurCfgRangeAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop);
}

int32 SpurCfgRangeAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop, numberOfElements);
}

int32 SpurCfgRangeDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints)
{
  return RFmxSpecAn_SpurCfgRangeDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
}

int32 SpurCfgRangeDetectorArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType[], int32 detectorPoints[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeDetectorArray(instrumentHandle, selectorString, detectorType, detectorPoints, numberOfElements);
}

int32 SpurCfgRangeFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 rangeEnabled)
{
  return RFmxSpecAn_SpurCfgRangeFrequency(instrumentHandle, selectorString, startFrequency, stopFrequency, rangeEnabled);
}

int32 SpurCfgRangeFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency[], float64 stopFrequency[], int32 rangeEnabled[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeFrequencyArray(instrumentHandle, selectorString, startFrequency, stopFrequency, rangeEnabled, numberOfElements);
}

int32 SpurCfgRangeNumberOfSpursToReport(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport)
{
  return RFmxSpecAn_SpurCfgRangeNumberOfSpursToReport(instrumentHandle, selectorString, numberOfSpursToReport);
}

int32 SpurCfgRangeNumberOfSpursToReportArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeNumberOfSpursToReportArray(instrumentHandle, selectorString, numberOfSpursToReport, numberOfElements);
}

int32 SpurCfgRangePeakCriteria(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold, float64 excursion)
{
  return RFmxSpecAn_SpurCfgRangePeakCriteria(instrumentHandle, selectorString, threshold, excursion);
}

int32 SpurCfgRangePeakCriteriaArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold[], float64 excursion[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangePeakCriteriaArray(instrumentHandle, selectorString, threshold, excursion, numberOfElements);
}

int32 SpurCfgRangeRBWArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeRBWArray(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType, numberOfElements);
}

int32 SpurCfgRangeRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxSpecAn_SpurCfgRangeRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 SpurCfgRangeRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation)
{
  return RFmxSpecAn_SpurCfgRangeRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
}

int32 SpurCfgRangeRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
}

int32 SpurCfgRangeSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxSpecAn_SpurCfgRangeSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 SpurCfgRangeSweepTimeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto[], float64 sweepTimeInterval[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeSweepTimeArray(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval, numberOfElements);
}

int32 SpurCfgRangeVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio)
{
  return RFmxSpecAn_SpurCfgRangeVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
}

int32 SpurCfgRangeVBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto[], float64 vbw[], float64 vbwToRBWRatio[], int32 numberOfElements)
{
  return RFmxSpecAn_SpurCfgRangeVBWFilterArray(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio, numberOfElements);
}

int32 SpurCfgTraceRangeIndex(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 traceRangeIndex)
{
  return RFmxSpecAn_SpurCfgTraceRangeIndex(instrumentHandle, selectorString, traceRangeIndex);
}

int32 SpurFetchAllSpurs(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurMargin[], float64 spurAbsoluteLimit[], int32 spurRangeIndex[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpurFetchAllSpurs(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurMargin, spurAbsoluteLimit, spurRangeIndex, arraySize, actualArraySize);
}

int32 SpurFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  return RFmxSpecAn_SpurFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 SpurFetchRangeAbsoluteLimitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteLimit[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpurFetchRangeAbsoluteLimitTrace(instrumentHandle, selectorString, timeout, x0, dx, absoluteLimit, arraySize, actualArraySize);
}

int32 SpurFetchRangeSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rangeSpectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpurFetchRangeSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, rangeSpectrum, arraySize, actualArraySize);
}

int32 SpurFetchRangeStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* rangeStatus, int32* detectedSpurs)
{
  return RFmxSpecAn_SpurFetchRangeStatus(instrumentHandle, selectorString, timeout, rangeStatus, detectedSpurs);
}

int32 SpurFetchRangeStatusArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 rangeStatus[], int32 numberOfDetectedSpurs[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpurFetchRangeStatusArray(instrumentHandle, selectorString, timeout, rangeStatus, numberOfDetectedSpurs, arraySize, actualArraySize);
}

int32 SpurFetchSpurMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spurFrequency, float64* spurAmplitude, float64* spurMargin, float64* spurAbsoluteLimit)
{
  return RFmxSpecAn_SpurFetchSpurMeasurement(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurMargin, spurAbsoluteLimit);
}

int32 SpurFetchSpurMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurAbsoluteLimit[], float64 spurMargin[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_SpurFetchSpurMeasurementArray(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurAbsoluteLimit, spurMargin, arraySize, actualArraySize);
}

int32 TXPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxSpecAn_TXPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 TXPCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  return RFmxSpecAn_TXPCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
}

int32 TXPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  return RFmxSpecAn_TXPCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
}

int32 TXPCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  return RFmxSpecAn_TXPCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
}

int32 TXPCfgVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio)
{
  return RFmxSpecAn_TXPCfgVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
}

int32 TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower)
{
  return RFmxSpecAn_TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averageMeanPower, peakToAverageRatio, maximumPower, minimumPower);
}

int32 TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  return RFmxSpecAn_TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
}

int32 TXPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower)
{
  return RFmxSpecAn_TXPRead(instrumentHandle, selectorString, timeout, averageMeanPower, peakToAverageRatio, maximumPower, minimumPower);
}

int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  return RFmxSpecAn_WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  return RFmxSpecAn_WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxspecan_grpc
