//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-RFMXSPECAN
//---------------------------------------------------------------------
#ifndef NIRFMXSPECAN_GRPC_LIBRARY_H
#define NIRFMXSPECAN_GRPC_LIBRARY_H

#include "nirfmxspecan_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxspecan_grpc {

class NiRFmxSpecAnLibrary : public nirfmxspecan_grpc::NiRFmxSpecAnLibraryInterface {
 public:
  NiRFmxSpecAnLibrary();
  explicit NiRFmxSpecAnLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxSpecAnLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 ACPCfgCarrierAndOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth, int32 numberOfOffsets, float64 channelSpacing) override;
  int32 ACPCfgCarrierFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency) override;
  int32 ACPCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth) override;
  int32 ACPCfgCarrierMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierMode) override;
  int32 ACPCfgCarrierRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) override;
  int32 ACPCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints) override;
  int32 ACPCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding) override;
  int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod) override;
  int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled) override;
  int32 ACPCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers) override;
  int32 ACPCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets) override;
  int32 ACPCfgOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency, int32 offsetSideband, int32 offsetEnabled) override;
  int32 ACPCfgOffsetArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency[], int32 offsetSideband[], int32 offsetEnabled[], int32 numberOfElements) override;
  int32 ACPCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition) override;
  int32 ACPCfgOffsetIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth) override;
  int32 ACPCfgOffsetIntegrationBandwidthArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth[], int32 numberOfElements) override;
  int32 ACPCfgOffsetPowerReference(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetReferenceCarrier, int32 offsetReferenceSpecific) override;
  int32 ACPCfgOffsetPowerReferenceArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetPowerReferenceCarrier[], int32 offsetPowerReferenceSpecific[], int32 numberOfElements) override;
  int32 ACPCfgOffsetRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) override;
  int32 ACPCfgOffsetRRCFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled[], float64 rrcAlpha[], int32 numberOfElements) override;
  int32 ACPCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation) override;
  int32 ACPCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements) override;
  int32 ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits) override;
  int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* totalRelativePower, float64* carrierOffset, float64* integrationBandwidth) override;
  int32 ACPFetchFrequencyResolution(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution) override;
  int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower) override;
  int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower) override;
  int32 ACPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower, float64* offsetCh0LowerRelativePower, float64* offsetCh0UpperRelativePower, float64* offsetCh1LowerRelativePower, float64* offsetCh1UpperRelativePower) override;
  int32 ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid) override;
  int32 AMPMCfgAMToAMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType) override;
  int32 AMPMCfgAMToPMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType) override;
  int32 AMPMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount) override;
  int32 AMPMCfgCompressionPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 compressionPointEnabled, float64 compressionLevel[], int32 arraySize) override;
  int32 AMPMCfgDUTAverageInputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower) override;
  int32 AMPMCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 AMPMCfgMeasurementSampleRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate) override;
  int32 AMPMCfgReferencePowerType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referencePowerType) override;
  int32 AMPMCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType) override;
  int32 AMPMCfgSynchronizationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod) override;
  int32 AMPMCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) override;
  int32 AMPMFetchAMToAMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToAM[], float32 curveFitAMToAM[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchAMToPMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToPM[], float32 curveFitAMToPM[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchCompressionPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inputCompressionPoint[], float64 outputCompressionPoint[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchCurveFitCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 amToAMCoefficients[], float32 amToPMCoefficients[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchCurveFitResidual(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* amToAMResidual, float64* amToPMResidual) override;
  int32 AMPMFetchDUTCharacteristics(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanLinearGain, float64* onedBCompressionPoint, float64* meanRMSEVM) override;
  int32 AMPMFetchError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* gainErrorRange, float64* phaseErrorRange, float64* meanPhaseError) override;
  int32 AMPMFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchRelativePhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePhase[], int32 arraySize, int32* actualArraySize) override;
  int32 AMPMFetchRelativePowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel) override;
  int32 BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildHarmonicString(char selectorString[], int32 harmonicNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildIntermodString(char selectorString[], int32 intermodNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildListStepString(char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[]) override;
  int32 BuildListString(char listName[], char resultName[], int32 selectorStringLength, char selectorString[]) override;
  int32 BuildMarkerString(char selectorString[], int32 markerNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildRangeSpurString(char signalName[], char resultName[], int32 rangeNumber, int32 spurNumber, int32 selectorStringLength, char selectorString[]) override;
  int32 BuildRangeString(char selectorString[], int32 rangeNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) override;
  int32 BuildSpurString(char selectorString[], int32 spurNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 CCDFCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 CCDFCfgNumberOfRecords(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRecords) override;
  int32 CCDFCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) override;
  int32 CCDFCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) override;
  int32 CCDFFetchBasicPowerProbabilities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* tenPercentPower, float64* onePercentPower, float64* oneTenthPercentPower, float64* oneHundredthPercentPower, float64* oneThousandthPercentPower, float64* oneTenThousandthPercentPower) override;
  int32 CCDFFetchGaussianProbabilitiesTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 gaussianProbabilities[], int32 arraySize, int32* actualArraySize) override;
  int32 CCDFFetchPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount) override;
  int32 CCDFFetchProbabilitiesTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 probabilities[], int32 arraySize, int32* actualArraySize) override;
  int32 CCDFRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount) override;
  int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 CHPCfgCarrierOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency) override;
  int32 CHPCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints) override;
  int32 CHPCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding) override;
  int32 CHPCfgIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth) override;
  int32 CHPCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers) override;
  int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 CHPCfgRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) override;
  int32 CHPCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span) override;
  int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 CHPFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd, float64* relativePower) override;
  int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 CHPFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower) override;
  int32 CHPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd) override;
  int32 CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid) override;
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger) override;
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation) override;
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency) override;
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) override;
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger) override;
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) override;
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation) override;
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) override;
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel) override;
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger) override;
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone) override;
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]) override;
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) override;
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CreateList(niRFmxInstrHandle instrumentHandle, char listName[]) override;
  int32 CreateListStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex) override;
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DPDApplyDigitalPredistortion(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64 measurementTimeout, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr, float64* powerOffset) override;
  int32 DPDApplyPreDPDSignalConditioning(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr) override;
  int32 DPDCfgApplyDPDConfigurationInput(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurationInput) override;
  int32 DPDCfgApplyDPDLookupTableCorrectionType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lutCorrectionType) override;
  int32 DPDCfgApplyDPDMemoryModelCorrectionType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryModelCorrectionType) override;
  int32 DPDCfgApplyDPDUserDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle dpdPolynomial[], int32 arraySize) override;
  int32 DPDCfgApplyDPDUserLookupTable(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 lutInputPowers[], NIComplexSingle lutComplexGains[], int32 arraySize) override;
  int32 DPDCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount) override;
  int32 DPDCfgDPDModel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dpdModel) override;
  int32 DPDCfgDUTAverageInputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower) override;
  int32 DPDCfgGeneralizedMemoryPolynomialCrossTerms(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialLeadOrder, int32 memoryPolynomialLagOrder, int32 memoryPolynomialLeadMemoryDepth, int32 memoryPolynomialLagMemoryDepth, int32 memoryPolynomialMaximumLead, int32 memoryPolynomialMaximumLag) override;
  int32 DPDCfgIterativeDPDEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 iterativeDPDEnabled) override;
  int32 DPDCfgLookupTableAMToAMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType) override;
  int32 DPDCfgLookupTableAMToPMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType) override;
  int32 DPDCfgLookupTableStepSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 stepSize) override;
  int32 DPDCfgLookupTableThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) override;
  int32 DPDCfgLookupTableType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lookupTableType) override;
  int32 DPDCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 DPDCfgMeasurementSampleRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate) override;
  int32 DPDCfgMemoryPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialOrder, int32 memoryPolynomialMemoryDepth) override;
  int32 DPDCfgPreviousDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle previousDPDPolynomial[], int32 arraySize) override;
  int32 DPDCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType) override;
  int32 DPDCfgSynchronizationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod) override;
  int32 DPDFetchApplyDPDPreCFRPAPR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preCFRPAPR) override;
  int32 DPDFetchAverageGain(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageGain) override;
  int32 DPDFetchDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dpdPolynomial[], int32 arraySize, int32* actualArraySize) override;
  int32 DPDFetchLookupTable(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 inputPowers[], NIComplexSingle complexGains[], int32 arraySize, int32* actualArraySize) override;
  int32 DPDFetchNMSE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* nmse) override;
  int32 DPDFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize) override;
  int32 DPDFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize) override;
  int32 DeleteList(niRFmxInstrHandle instrumentHandle, char listName[]) override;
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 FCntCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 FCntCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 FCntCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) override;
  int32 FCntCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) override;
  int32 FCntFetchAllanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* allanDeviation) override;
  int32 FCntFetchFrequencyTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequencyTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 FCntFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase) override;
  int32 FCntFetchPhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 FCntFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 powerTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 FCntRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase) override;
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) override;
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal) override;
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal) override;
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal) override;
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal) override;
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal) override;
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal) override;
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) override;
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal) override;
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal) override;
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal) override;
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 HarmCfgAutoHarmonics(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoHarmonicsSetupEnabled) override;
  int32 HarmCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 HarmCfgFundamentalMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 HarmCfgFundamentalRBW(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) override;
  int32 HarmCfgHarmonic(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder, float64 harmonicBandwidth, int32 harmonicEnabled, float64 harmonicMeasurementInterval) override;
  int32 HarmCfgHarmonicArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder[], float64 harmonicBandwidth[], int32 harmonicEnabled[], float64 harmonicMeasurementInterval[], int32 numberOfElements) override;
  int32 HarmCfgNumberOfHarmonics(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfHarmonics) override;
  int32 HarmFetchHarmonicMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativePower, float64* averageAbsolutePower, float64* rbw, float64* frequency) override;
  int32 HarmFetchHarmonicMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averageRelativePower[], float64 averageAbsolutePower[], float64 rbw[], float64 frequency[], int32 arraySize, int32* actualArraySize) override;
  int32 HarmFetchHarmonicPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize) override;
  int32 HarmFetchTHD(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower, float64* fundamentalFrequency) override;
  int32 HarmRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower) override;
  int32 IDPDCfgEqualizerCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle equalizerCoefficients[], int32 arraySize) override;
  int32 IDPDCfgPredistortedWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle predistortedWaveform[], int32 arraySize, float64 targetGain) override;
  int32 IDPDCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType) override;
  int32 IDPDFetchEqualizerCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle equalizerCoefficients[], int32 arraySize, int32* actualArraySize) override;
  int32 IDPDFetchPredistortedWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle predistortedWaveform[], float64* papr, float64* powerOffset, float64* gain, int32 arraySize, int32* actualArraySize) override;
  int32 IDPDFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize) override;
  int32 IDPDFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize) override;
  int32 IDPDGetEqualizerReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* x0, float64* dx, NIComplexSingle equalizerReferenceWaveform[], float64* papr, int32 arraySize, int32* actualArraySize) override;
  int32 IMCfgAutoIntermodsSetup(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoIntermodsSetupEnabled, int32 maximumIntermodOrder) override;
  int32 IMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 IMCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding) override;
  int32 IMCfgFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyDefinition) override;
  int32 IMCfgFundamentalTones(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 lowerToneFrequency, float64 upperToneFrequency) override;
  int32 IMCfgIntermod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder, float64 lowerIntermodFrequency, float64 upperIntermodFrequency, int32 intermodSide, int32 intermodEnabled) override;
  int32 IMCfgIntermodArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder[], float64 lowerIntermodFrequency[], float64 upperIntermodFrequency[], int32 intermodSide[], int32 intermodEnabled[], int32 numberOfElements) override;
  int32 IMCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod) override;
  int32 IMCfgNumberOfIntermods(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfIntermods) override;
  int32 IMCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 IMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 IMFetchFundamentalMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerTonePower, float64* upperTonePower) override;
  int32 IMFetchInterceptPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* worstCaseOutputInterceptPower, float64* lowerOutputInterceptPower, float64* upperOutputInterceptPower) override;
  int32 IMFetchInterceptPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 worstCaseOutputInterceptPower[], float64 lowerOutputInterceptPower[], float64 upperOutputInterceptPower[], int32 arraySize, int32* actualArraySize) override;
  int32 IMFetchIntermodMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* lowerIntermodPower, float64* upperIntermodPower) override;
  int32 IMFetchIntermodMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 lowerIntermodPower[], float64 upperIntermodPower[], int32 arraySize, int32* actualArraySize) override;
  int32 IMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 spectrumIndex, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 IQCfgAcquisition(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 sampleRate, int32 numberOfRecords, float64 acquisitionTime, float64 pretriggerTime) override;
  int32 IQCfgBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthAuto, float64 bandwidth) override;
  int32 IQFetchData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, float64* t0, float64* dt, NIComplexSingle data[], int32 arraySize, int32* actualArraySize) override;
  int32 IQGetRecordsDone(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* recordsDone) override;
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) override;
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut) override;
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]) override;
  int32 MarkerCfgNumberOfMarkers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfMarkers) override;
  int32 MarkerCfgPeakExcursion(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 peakExcursionEnabled, float64 peakExcursion) override;
  int32 MarkerCfgReferenceMarker(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceMarker) override;
  int32 MarkerCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 threshold) override;
  int32 MarkerCfgTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 trace) override;
  int32 MarkerCfgType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 markerType) override;
  int32 MarkerCfgXLocation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerXLocation) override;
  int32 MarkerCfgYLocation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerYLocation) override;
  int32 MarkerFetchXY(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* markerXLocation, float64* markerYLocation) override;
  int32 MarkerNextPeak(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nextPeak, int32* nextPeakFound) override;
  int32 MarkerPeakSearch(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* numberOfPeaks) override;
  int32 NFCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount) override;
  int32 NFCfgCalibrationLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 calibrationLossCompensationEnabled, float64 calibrationLossFrequency[], float64 calibrationLoss[], float64 calibrationLossTemperature, int32 arraySize) override;
  int32 NFCfgColdSourceDUTSParameters(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutsParametersFrequency[], float64 duts21[], float64 duts12[], float64 duts11[], float64 duts22[], int32 arraySize) override;
  int32 NFCfgColdSourceInputTermination(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 terminationVSWR[], float64 terminationVSWRFrequency[], float64 terminationTemperature, int32 arraySize) override;
  int32 NFCfgColdSourceMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 coldSourceMode) override;
  int32 NFCfgDUTInputLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutInputLossCompensationEnabled, float64 dutInputLossFrequency[], float64 dutInputLoss[], float64 dutInputLossTemperature, int32 arraySize) override;
  int32 NFCfgDUTOutputLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutOutputLossCompensationEnabled, float64 dutOutputLossFrequency[], float64 dutOutputLoss[], float64 dutOutputLossTemperature, int32 arraySize) override;
  int32 NFCfgFrequencyList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize) override;
  int32 NFCfgFrequencyListStartStopPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 numberOfPoints) override;
  int32 NFCfgFrequencyListStartStopStep(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 stepSize) override;
  int32 NFCfgMeasurementBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth) override;
  int32 NFCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 NFCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod) override;
  int32 NFCfgYFactorMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 yFactorMode) override;
  int32 NFCfgYFactorNoiseSourceENR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 enrFrequency[], float64 enr[], float64 coldTemperature, float64 offTemperature, int32 arraySize) override;
  int32 NFCfgYFactorNoiseSourceLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseSourceLossCompensationEnabled, float64 noiseSourceLossFrequency[], float64 noiseSourceLoss[], float64 noiseSourceLossTemperature, int32 arraySize) override;
  int32 NFCfgYFactorNoiseSourceSettlingTime(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 settlingTime) override;
  int32 NFClearCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char calibrationSetupID[]) override;
  int32 NFFetchAnalyzerNoiseFigure(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 analyzerNoiseFigure[], int32 arraySize, int32* actualArraySize) override;
  int32 NFFetchColdSourcePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 coldSourcePower[], int32 arraySize, int32* actualArraySize) override;
  int32 NFFetchDUTNoiseFigureAndGain(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 dutNoiseFigure[], float64 dutNoiseTemperature[], float64 dutGain[], int32 arraySize, int32* actualArraySize) override;
  int32 NFFetchYFactorPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 hotPower[], float64 coldPower[], int32 arraySize, int32* actualArraySize) override;
  int32 NFFetchYFactors(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 measurementYFactor[], float64 calibrationYFactor[], int32 arraySize, int32* actualArraySize) override;
  int32 NFRecommendReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutMaxGain, float64 dutMaxNoiseFigure, float64* referenceLevel) override;
  int32 NFValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid) override;
  int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 OBWCfgBandwidthPercentage(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidthPercentage) override;
  int32 OBWCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding) override;
  int32 OBWCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits) override;
  int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 OBWCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span) override;
  int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency) override;
  int32 OBWFetchSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 OBWRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency) override;
  int32 PAVTCfgMeasurementBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth) override;
  int32 PAVTCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementOffset, float64 measurementLength) override;
  int32 PAVTCfgMeasurementIntervalMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementIntervalMode) override;
  int32 PAVTCfgMeasurementLocationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementLocationType) override;
  int32 PAVTCfgNumberOfSegments(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments) override;
  int32 PAVTCfgSegmentMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset, float64 segmentMeasurementLength) override;
  int32 PAVTCfgSegmentMeasurementIntervalArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset[], float64 segmentMeasurementLength[], int32 numberOfElements) override;
  int32 PAVTCfgSegmentStartTimeList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentStartTime[], int32 numberOfElements) override;
  int32 PAVTCfgSegmentStartTimeStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments, float64 segment0StartTime, float64 segmentInterval) override;
  int32 PAVTCfgSegmentType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType) override;
  int32 PAVTCfgSegmentTypeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType[], int32 numberOfElements) override;
  int32 PAVTFetchAmplitudeTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 amplitude[], int32 arraySize, int32* actualArraySize) override;
  int32 PAVTFetchPhaseAndAmplitude(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRelativePhase, float64* meanRelativeAmplitude, float64* meanAbsolutePhase, float64* meanAbsoluteAmplitude) override;
  int32 PAVTFetchPhaseAndAmplitudeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRelativePhase[], float64 meanRelativeAmplitude[], float64 meanAbsolutePhase[], float64 meanAbsoluteAmplitude[], int32 arraySize, int32* actualArraySize) override;
  int32 PAVTFetchPhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 phase[], int32 arraySize, int32* actualArraySize) override;
  int32 PhaseNoiseCfgAutoRange(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 rbwPercentage) override;
  int32 PhaseNoiseCfgAveragingMultiplier(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingMultiplier) override;
  int32 PhaseNoiseCfgCancellation(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cancellationEnabled, float64 cancellationThreshold, float32 frequency[], float32 referencePhaseNoise[], int32 arraySize) override;
  int32 PhaseNoiseCfgIntegratedNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integratedNoiseRangeDefinition, float64 integratedNoiseStartFrequency[], float64 integratedNoiseStopFrequency[], int32 arraySize) override;
  int32 PhaseNoiseCfgNumberOfRanges(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges) override;
  int32 PhaseNoiseCfgRangeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rangeStartFrequency[], float64 rangeStopFrequency[], float64 rangeRBWPercentage[], int32 rangeAveragingCount[], int32 numberOfElements) override;
  int32 PhaseNoiseCfgRangeDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rangeDefinition) override;
  int32 PhaseNoiseCfgSmoothing(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 smoothingType, float64 smoothingPercentage) override;
  int32 PhaseNoiseCfgSpotNoiseFrequencyList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize) override;
  int32 PhaseNoiseCfgSpurRemoval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spurRemovalEnabled, float64 peakExcursion) override;
  int32 PhaseNoiseFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierFrequency, float64* carrierPower) override;
  int32 PhaseNoiseFetchIntegratedNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 integratedPhaseNoise[], float64 residualPMInRadian[], float64 residualPMInDegree[], float64 residualFM[], float64 jitter[], int32 arraySize, int32* actualArraySize) override;
  int32 PhaseNoiseFetchMeasuredLogPlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 measuredPhaseNoise[], int32 arraySize, int32* actualArraySize) override;
  int32 PhaseNoiseFetchSmoothedLogPlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 smoothedPhaseNoise[], int32 arraySize, int32* actualArraySize) override;
  int32 PhaseNoiseFetchSpotNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spotPhaseNoise[], int32 arraySize, int32* actualArraySize) override;
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID) override;
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 SEMCfgCarrierChannelBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierChannelBandwidth) override;
  int32 SEMCfgCarrierEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierEnabled) override;
  int32 SEMCfgCarrierFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency) override;
  int32 SEMCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth) override;
  int32 SEMCfgCarrierRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 SEMCfgCarrierRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) override;
  int32 SEMCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding) override;
  int32 SEMCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers) override;
  int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets) override;
  int32 SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop) override;
  int32 SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements) override;
  int32 SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral) override;
  int32 SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetEnabled, int32 offsetSideband) override;
  int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetEnabled[], int32 offsetSideband[], int32 numberOfElements) override;
  int32 SEMCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition) override;
  int32 SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask) override;
  int32 SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements) override;
  int32 SEMCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation) override;
  int32 SEMCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements) override;
  int32 SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode, float64 relativeLimitStart, float64 relativeLimitStop) override;
  int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements) override;
  int32 SEMCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits) override;
  int32 SEMCfgReferenceType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceType) override;
  int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 SEMFetchAbsoluteMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteMask[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* totalRelativePower) override;
  int32 SEMFetchCompositeMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* compositeMeasurementStatus) override;
  int32 SEMFetchFrequencyResolution(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution) override;
  int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) override;
  int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower) override;
  int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchRelativeMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativeMask[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower) override;
  int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) override;
  int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower) override;
  int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces) override;
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle) override;
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal) override;
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) override;
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal) override;
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal) override;
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal) override;
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) override;
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal) override;
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal) override;
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) override;
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]) override;
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal) override;
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal) override;
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) override;
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) override;
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal) override;
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) override;
  int32 SpectrumCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 SpectrumCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints) override;
  int32 SpectrumCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding) override;
  int32 SpectrumCfgFrequencyStartStop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency) override;
  int32 SpectrumCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled) override;
  int32 SpectrumCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumPowerUnits) override;
  int32 SpectrumCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 SpectrumCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span) override;
  int32 SpectrumCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 SpectrumCfgVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio) override;
  int32 SpectrumFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakAmplitude, float64* peakFrequency, float64* frequencyResolution) override;
  int32 SpectrumFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize) override;
  int32 SpectrumFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 SpectrumRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 SpectrumValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid) override;
  int32 SpurCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 SpurCfgFFTWindowType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow) override;
  int32 SpurCfgNumberOfRanges(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges) override;
  int32 SpurCfgRangeAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop) override;
  int32 SpurCfgRangeAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements) override;
  int32 SpurCfgRangeDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints) override;
  int32 SpurCfgRangeDetectorArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType[], int32 detectorPoints[], int32 numberOfElements) override;
  int32 SpurCfgRangeFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 rangeEnabled) override;
  int32 SpurCfgRangeFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency[], float64 stopFrequency[], int32 rangeEnabled[], int32 numberOfElements) override;
  int32 SpurCfgRangeNumberOfSpursToReport(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport) override;
  int32 SpurCfgRangeNumberOfSpursToReportArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport[], int32 numberOfElements) override;
  int32 SpurCfgRangePeakCriteria(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold, float64 excursion) override;
  int32 SpurCfgRangePeakCriteriaArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold[], float64 excursion[], int32 numberOfElements) override;
  int32 SpurCfgRangeRBWArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements) override;
  int32 SpurCfgRangeRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 SpurCfgRangeRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation) override;
  int32 SpurCfgRangeRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements) override;
  int32 SpurCfgRangeSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 SpurCfgRangeSweepTimeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto[], float64 sweepTimeInterval[], int32 numberOfElements) override;
  int32 SpurCfgRangeVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio) override;
  int32 SpurCfgRangeVBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto[], float64 vbw[], float64 vbwToRBWRatio[], int32 numberOfElements) override;
  int32 SpurCfgTraceRangeIndex(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 traceRangeIndex) override;
  int32 SpurFetchAllSpurs(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurMargin[], float64 spurAbsoluteLimit[], int32 spurRangeIndex[], int32 arraySize, int32* actualArraySize) override;
  int32 SpurFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus) override;
  int32 SpurFetchRangeAbsoluteLimitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteLimit[], int32 arraySize, int32* actualArraySize) override;
  int32 SpurFetchRangeSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rangeSpectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 SpurFetchRangeStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* rangeStatus, int32* detectedSpurs) override;
  int32 SpurFetchRangeStatusArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 rangeStatus[], int32 numberOfDetectedSpurs[], int32 arraySize, int32* actualArraySize) override;
  int32 SpurFetchSpurMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spurFrequency, float64* spurAmplitude, float64* spurMargin, float64* spurAbsoluteLimit) override;
  int32 SpurFetchSpurMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurAbsoluteLimit[], float64 spurMargin[], int32 arraySize, int32* actualArraySize) override;
  int32 TXPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 TXPCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval) override;
  int32 TXPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) override;
  int32 TXPCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) override;
  int32 TXPCfgVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio) override;
  int32 TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower) override;
  int32 TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize) override;
  int32 TXPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower) override;
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout) override;
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) override;

 private:
  using ACPCfgAveragingPtr = decltype(&RFmxSpecAn_ACPCfgAveraging);
  using ACPCfgCarrierAndOffsetsPtr = decltype(&RFmxSpecAn_ACPCfgCarrierAndOffsets);
  using ACPCfgCarrierFrequencyPtr = decltype(&RFmxSpecAn_ACPCfgCarrierFrequency);
  using ACPCfgCarrierIntegrationBandwidthPtr = decltype(&RFmxSpecAn_ACPCfgCarrierIntegrationBandwidth);
  using ACPCfgCarrierModePtr = decltype(&RFmxSpecAn_ACPCfgCarrierMode);
  using ACPCfgCarrierRRCFilterPtr = decltype(&RFmxSpecAn_ACPCfgCarrierRRCFilter);
  using ACPCfgDetectorPtr = decltype(&RFmxSpecAn_ACPCfgDetector);
  using ACPCfgFFTPtr = decltype(&RFmxSpecAn_ACPCfgFFT);
  using ACPCfgMeasurementMethodPtr = decltype(&RFmxSpecAn_ACPCfgMeasurementMethod);
  using ACPCfgNoiseCompensationEnabledPtr = decltype(&RFmxSpecAn_ACPCfgNoiseCompensationEnabled);
  using ACPCfgNumberOfCarriersPtr = decltype(&RFmxSpecAn_ACPCfgNumberOfCarriers);
  using ACPCfgNumberOfOffsetsPtr = decltype(&RFmxSpecAn_ACPCfgNumberOfOffsets);
  using ACPCfgOffsetPtr = decltype(&RFmxSpecAn_ACPCfgOffset);
  using ACPCfgOffsetArrayPtr = decltype(&RFmxSpecAn_ACPCfgOffsetArray);
  using ACPCfgOffsetFrequencyDefinitionPtr = decltype(&RFmxSpecAn_ACPCfgOffsetFrequencyDefinition);
  using ACPCfgOffsetIntegrationBandwidthPtr = decltype(&RFmxSpecAn_ACPCfgOffsetIntegrationBandwidth);
  using ACPCfgOffsetIntegrationBandwidthArrayPtr = decltype(&RFmxSpecAn_ACPCfgOffsetIntegrationBandwidthArray);
  using ACPCfgOffsetPowerReferencePtr = decltype(&RFmxSpecAn_ACPCfgOffsetPowerReference);
  using ACPCfgOffsetPowerReferenceArrayPtr = decltype(&RFmxSpecAn_ACPCfgOffsetPowerReferenceArray);
  using ACPCfgOffsetRRCFilterPtr = decltype(&RFmxSpecAn_ACPCfgOffsetRRCFilter);
  using ACPCfgOffsetRRCFilterArrayPtr = decltype(&RFmxSpecAn_ACPCfgOffsetRRCFilterArray);
  using ACPCfgOffsetRelativeAttenuationPtr = decltype(&RFmxSpecAn_ACPCfgOffsetRelativeAttenuation);
  using ACPCfgOffsetRelativeAttenuationArrayPtr = decltype(&RFmxSpecAn_ACPCfgOffsetRelativeAttenuationArray);
  using ACPCfgPowerUnitsPtr = decltype(&RFmxSpecAn_ACPCfgPowerUnits);
  using ACPCfgRBWFilterPtr = decltype(&RFmxSpecAn_ACPCfgRBWFilter);
  using ACPCfgSweepTimePtr = decltype(&RFmxSpecAn_ACPCfgSweepTime);
  using ACPFetchAbsolutePowersTracePtr = decltype(&RFmxSpecAn_ACPFetchAbsolutePowersTrace);
  using ACPFetchCarrierMeasurementPtr = decltype(&RFmxSpecAn_ACPFetchCarrierMeasurement);
  using ACPFetchFrequencyResolutionPtr = decltype(&RFmxSpecAn_ACPFetchFrequencyResolution);
  using ACPFetchOffsetMeasurementPtr = decltype(&RFmxSpecAn_ACPFetchOffsetMeasurement);
  using ACPFetchOffsetMeasurementArrayPtr = decltype(&RFmxSpecAn_ACPFetchOffsetMeasurementArray);
  using ACPFetchRelativePowersTracePtr = decltype(&RFmxSpecAn_ACPFetchRelativePowersTrace);
  using ACPFetchSpectrumPtr = decltype(&RFmxSpecAn_ACPFetchSpectrum);
  using ACPFetchTotalCarrierPowerPtr = decltype(&RFmxSpecAn_ACPFetchTotalCarrierPower);
  using ACPReadPtr = decltype(&RFmxSpecAn_ACPRead);
  using ACPValidateNoiseCalibrationDataPtr = decltype(&RFmxSpecAn_ACPValidateNoiseCalibrationData);
  using AMPMCfgAMToAMCurveFitPtr = decltype(&RFmxSpecAn_AMPMCfgAMToAMCurveFit);
  using AMPMCfgAMToPMCurveFitPtr = decltype(&RFmxSpecAn_AMPMCfgAMToPMCurveFit);
  using AMPMCfgAveragingPtr = decltype(&RFmxSpecAn_AMPMCfgAveraging);
  using AMPMCfgCompressionPointsPtr = decltype(&RFmxSpecAn_AMPMCfgCompressionPoints);
  using AMPMCfgDUTAverageInputPowerPtr = decltype(&RFmxSpecAn_AMPMCfgDUTAverageInputPower);
  using AMPMCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_AMPMCfgMeasurementInterval);
  using AMPMCfgMeasurementSampleRatePtr = decltype(&RFmxSpecAn_AMPMCfgMeasurementSampleRate);
  using AMPMCfgReferencePowerTypePtr = decltype(&RFmxSpecAn_AMPMCfgReferencePowerType);
  using AMPMCfgReferenceWaveformPtr = decltype(&RFmxSpecAn_AMPMCfgReferenceWaveform);
  using AMPMCfgSynchronizationMethodPtr = decltype(&RFmxSpecAn_AMPMCfgSynchronizationMethod);
  using AMPMCfgThresholdPtr = decltype(&RFmxSpecAn_AMPMCfgThreshold);
  using AMPMFetchAMToAMTracePtr = decltype(&RFmxSpecAn_AMPMFetchAMToAMTrace);
  using AMPMFetchAMToPMTracePtr = decltype(&RFmxSpecAn_AMPMFetchAMToPMTrace);
  using AMPMFetchCompressionPointsPtr = decltype(&RFmxSpecAn_AMPMFetchCompressionPoints);
  using AMPMFetchCurveFitCoefficientsPtr = decltype(&RFmxSpecAn_AMPMFetchCurveFitCoefficients);
  using AMPMFetchCurveFitResidualPtr = decltype(&RFmxSpecAn_AMPMFetchCurveFitResidual);
  using AMPMFetchDUTCharacteristicsPtr = decltype(&RFmxSpecAn_AMPMFetchDUTCharacteristics);
  using AMPMFetchErrorPtr = decltype(&RFmxSpecAn_AMPMFetchError);
  using AMPMFetchProcessedMeanAcquiredWaveformPtr = decltype(&RFmxSpecAn_AMPMFetchProcessedMeanAcquiredWaveform);
  using AMPMFetchProcessedReferenceWaveformPtr = decltype(&RFmxSpecAn_AMPMFetchProcessedReferenceWaveform);
  using AMPMFetchRelativePhaseTracePtr = decltype(&RFmxSpecAn_AMPMFetchRelativePhaseTrace);
  using AMPMFetchRelativePowerTracePtr = decltype(&RFmxSpecAn_AMPMFetchRelativePowerTrace);
  using AbortMeasurementsPtr = decltype(&RFmxSpecAn_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxSpecAn_AnalyzeIQ1Waveform);
  using AnalyzeSpectrum1WaveformPtr = decltype(&RFmxSpecAn_AnalyzeSpectrum1Waveform);
  using AutoLevelPtr = decltype(&RFmxSpecAn_AutoLevel);
  using BuildCarrierStringPtr = decltype(&RFmxSpecAn_BuildCarrierString2);
  using BuildHarmonicStringPtr = decltype(&RFmxSpecAn_BuildHarmonicString2);
  using BuildIntermodStringPtr = decltype(&RFmxSpecAn_BuildIntermodString);
  using BuildListStepStringPtr = decltype(&RFmxSpecAn_BuildListStepString);
  using BuildListStringPtr = decltype(&RFmxSpecAn_BuildListString);
  using BuildMarkerStringPtr = decltype(&RFmxSpecAn_BuildMarkerString2);
  using BuildOffsetStringPtr = decltype(&RFmxSpecAn_BuildOffsetString2);
  using BuildRangeSpurStringPtr = decltype(&RFmxSpecAn_BuildRangeSpurString);
  using BuildRangeStringPtr = decltype(&RFmxSpecAn_BuildRangeString2);
  using BuildSegmentStringPtr = decltype(&RFmxSpecAn_BuildSegmentString);
  using BuildSignalStringPtr = decltype(&RFmxSpecAn_BuildSignalString);
  using BuildSpurStringPtr = decltype(&RFmxSpecAn_BuildSpurString2);
  using CCDFCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_CCDFCfgMeasurementInterval);
  using CCDFCfgNumberOfRecordsPtr = decltype(&RFmxSpecAn_CCDFCfgNumberOfRecords);
  using CCDFCfgRBWFilterPtr = decltype(&RFmxSpecAn_CCDFCfgRBWFilter);
  using CCDFCfgThresholdPtr = decltype(&RFmxSpecAn_CCDFCfgThreshold);
  using CCDFFetchBasicPowerProbabilitiesPtr = decltype(&RFmxSpecAn_CCDFFetchBasicPowerProbabilities);
  using CCDFFetchGaussianProbabilitiesTracePtr = decltype(&RFmxSpecAn_CCDFFetchGaussianProbabilitiesTrace);
  using CCDFFetchPowerPtr = decltype(&RFmxSpecAn_CCDFFetchPower);
  using CCDFFetchProbabilitiesTracePtr = decltype(&RFmxSpecAn_CCDFFetchProbabilitiesTrace);
  using CCDFReadPtr = decltype(&RFmxSpecAn_CCDFRead);
  using CHPCfgAveragingPtr = decltype(&RFmxSpecAn_CHPCfgAveraging);
  using CHPCfgCarrierOffsetPtr = decltype(&RFmxSpecAn_CHPCfgCarrierOffset);
  using CHPCfgDetectorPtr = decltype(&RFmxSpecAn_CHPCfgDetector);
  using CHPCfgFFTPtr = decltype(&RFmxSpecAn_CHPCfgFFT);
  using CHPCfgIntegrationBandwidthPtr = decltype(&RFmxSpecAn_CHPCfgIntegrationBandwidth);
  using CHPCfgNumberOfCarriersPtr = decltype(&RFmxSpecAn_CHPCfgNumberOfCarriers);
  using CHPCfgRBWFilterPtr = decltype(&RFmxSpecAn_CHPCfgRBWFilter);
  using CHPCfgRRCFilterPtr = decltype(&RFmxSpecAn_CHPCfgRRCFilter);
  using CHPCfgSpanPtr = decltype(&RFmxSpecAn_CHPCfgSpan);
  using CHPCfgSweepTimePtr = decltype(&RFmxSpecAn_CHPCfgSweepTime);
  using CHPFetchCarrierMeasurementPtr = decltype(&RFmxSpecAn_CHPFetchCarrierMeasurement);
  using CHPFetchSpectrumPtr = decltype(&RFmxSpecAn_CHPFetchSpectrum);
  using CHPFetchTotalCarrierPowerPtr = decltype(&RFmxSpecAn_CHPFetchTotalCarrierPower);
  using CHPReadPtr = decltype(&RFmxSpecAn_CHPRead);
  using CHPValidateNoiseCalibrationDataPtr = decltype(&RFmxSpecAn_CHPValidateNoiseCalibrationData);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxSpecAn_CfgDigitalEdgeTrigger);
  using CfgExternalAttenuationPtr = decltype(&RFmxSpecAn_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxSpecAn_CfgFrequency);
  using CfgFrequencyReferencePtr = decltype(&RFmxSpecAn_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxSpecAn_CfgIQPowerEdgeTrigger);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxSpecAn_CfgMechanicalAttenuation);
  using CfgRFPtr = decltype(&RFmxSpecAn_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxSpecAn_CfgRFAttenuation);
  using CfgReferenceLevelPtr = decltype(&RFmxSpecAn_CfgReferenceLevel);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxSpecAn_CfgSoftwareEdgeTrigger);
  using CheckMeasurementStatusPtr = decltype(&RFmxSpecAn_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxSpecAn_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxSpecAn_ClearNamedResult);
  using ClearNoiseCalibrationDatabasePtr = decltype(&RFmxSpecAn_ClearNoiseCalibrationDatabase);
  using CloneSignalConfigurationPtr = decltype(&RFmxSpecAn_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxSpecAn_Close);
  using CommitPtr = decltype(&RFmxSpecAn_Commit);
  using CreateListPtr = decltype(&RFmxSpecAn_CreateList);
  using CreateListStepPtr = decltype(&RFmxSpecAn_CreateListStep);
  using CreateSignalConfigurationPtr = decltype(&RFmxSpecAn_CreateSignalConfiguration);
  using DPDApplyDigitalPredistortionPtr = decltype(&RFmxSpecAn_DPDApplyDigitalPredistortion);
  using DPDApplyPreDPDSignalConditioningPtr = decltype(&RFmxSpecAn_DPDApplyPreDPDSignalConditioning);
  using DPDCfgApplyDPDConfigurationInputPtr = decltype(&RFmxSpecAn_DPDCfgApplyDPDConfigurationInput);
  using DPDCfgApplyDPDLookupTableCorrectionTypePtr = decltype(&RFmxSpecAn_DPDCfgApplyDPDLookupTableCorrectionType);
  using DPDCfgApplyDPDMemoryModelCorrectionTypePtr = decltype(&RFmxSpecAn_DPDCfgApplyDPDMemoryModelCorrectionType);
  using DPDCfgApplyDPDUserDPDPolynomialPtr = decltype(&RFmxSpecAn_DPDCfgApplyDPDUserDPDPolynomial);
  using DPDCfgApplyDPDUserLookupTablePtr = decltype(&RFmxSpecAn_DPDCfgApplyDPDUserLookupTable);
  using DPDCfgAveragingPtr = decltype(&RFmxSpecAn_DPDCfgAveraging);
  using DPDCfgDPDModelPtr = decltype(&RFmxSpecAn_DPDCfgDPDModel);
  using DPDCfgDUTAverageInputPowerPtr = decltype(&RFmxSpecAn_DPDCfgDUTAverageInputPower);
  using DPDCfgGeneralizedMemoryPolynomialCrossTermsPtr = decltype(&RFmxSpecAn_DPDCfgGeneralizedMemoryPolynomialCrossTerms);
  using DPDCfgIterativeDPDEnabledPtr = decltype(&RFmxSpecAn_DPDCfgIterativeDPDEnabled);
  using DPDCfgLookupTableAMToAMCurveFitPtr = decltype(&RFmxSpecAn_DPDCfgLookupTableAMToAMCurveFit);
  using DPDCfgLookupTableAMToPMCurveFitPtr = decltype(&RFmxSpecAn_DPDCfgLookupTableAMToPMCurveFit);
  using DPDCfgLookupTableStepSizePtr = decltype(&RFmxSpecAn_DPDCfgLookupTableStepSize);
  using DPDCfgLookupTableThresholdPtr = decltype(&RFmxSpecAn_DPDCfgLookupTableThreshold);
  using DPDCfgLookupTableTypePtr = decltype(&RFmxSpecAn_DPDCfgLookupTableType);
  using DPDCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_DPDCfgMeasurementInterval);
  using DPDCfgMeasurementSampleRatePtr = decltype(&RFmxSpecAn_DPDCfgMeasurementSampleRate);
  using DPDCfgMemoryPolynomialPtr = decltype(&RFmxSpecAn_DPDCfgMemoryPolynomial);
  using DPDCfgPreviousDPDPolynomialPtr = decltype(&RFmxSpecAn_DPDCfgPreviousDPDPolynomial);
  using DPDCfgReferenceWaveformPtr = decltype(&RFmxSpecAn_DPDCfgReferenceWaveform);
  using DPDCfgSynchronizationMethodPtr = decltype(&RFmxSpecAn_DPDCfgSynchronizationMethod);
  using DPDFetchApplyDPDPreCFRPAPRPtr = decltype(&RFmxSpecAn_DPDFetchApplyDPDPreCFRPAPR);
  using DPDFetchAverageGainPtr = decltype(&RFmxSpecAn_DPDFetchAverageGain);
  using DPDFetchDPDPolynomialPtr = decltype(&RFmxSpecAn_DPDFetchDPDPolynomial);
  using DPDFetchLookupTablePtr = decltype(&RFmxSpecAn_DPDFetchLookupTable);
  using DPDFetchNMSEPtr = decltype(&RFmxSpecAn_DPDFetchNMSE);
  using DPDFetchProcessedMeanAcquiredWaveformPtr = decltype(&RFmxSpecAn_DPDFetchProcessedMeanAcquiredWaveform);
  using DPDFetchProcessedReferenceWaveformPtr = decltype(&RFmxSpecAn_DPDFetchProcessedReferenceWaveform);
  using DeleteListPtr = decltype(&RFmxSpecAn_DeleteList);
  using DeleteSignalConfigurationPtr = decltype(&RFmxSpecAn_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxSpecAn_DisableTrigger);
  using FCntCfgAveragingPtr = decltype(&RFmxSpecAn_FCntCfgAveraging);
  using FCntCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_FCntCfgMeasurementInterval);
  using FCntCfgRBWFilterPtr = decltype(&RFmxSpecAn_FCntCfgRBWFilter);
  using FCntCfgThresholdPtr = decltype(&RFmxSpecAn_FCntCfgThreshold);
  using FCntFetchAllanDeviationPtr = decltype(&RFmxSpecAn_FCntFetchAllanDeviation);
  using FCntFetchFrequencyTracePtr = decltype(&RFmxSpecAn_FCntFetchFrequencyTrace);
  using FCntFetchMeasurementPtr = decltype(&RFmxSpecAn_FCntFetchMeasurement);
  using FCntFetchPhaseTracePtr = decltype(&RFmxSpecAn_FCntFetchPhaseTrace);
  using FCntFetchPowerTracePtr = decltype(&RFmxSpecAn_FCntFetchPowerTrace);
  using FCntReadPtr = decltype(&RFmxSpecAn_FCntRead);
  using GetAllNamedResultNamesPtr = decltype(&RFmxSpecAn_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxSpecAn_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxSpecAn_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxSpecAn_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxSpecAn_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxSpecAn_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxSpecAn_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxSpecAn_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxSpecAn_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxSpecAn_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxSpecAn_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxSpecAn_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxSpecAn_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxSpecAn_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxSpecAn_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxSpecAn_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxSpecAn_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxSpecAn_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxSpecAn_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxSpecAn_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxSpecAn_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxSpecAn_GetError);
  using GetErrorStringPtr = decltype(&RFmxSpecAn_GetErrorString);
  using HarmCfgAutoHarmonicsPtr = decltype(&RFmxSpecAn_HarmCfgAutoHarmonics);
  using HarmCfgAveragingPtr = decltype(&RFmxSpecAn_HarmCfgAveraging);
  using HarmCfgFundamentalMeasurementIntervalPtr = decltype(&RFmxSpecAn_HarmCfgFundamentalMeasurementInterval);
  using HarmCfgFundamentalRBWPtr = decltype(&RFmxSpecAn_HarmCfgFundamentalRBW);
  using HarmCfgHarmonicPtr = decltype(&RFmxSpecAn_HarmCfgHarmonic);
  using HarmCfgHarmonicArrayPtr = decltype(&RFmxSpecAn_HarmCfgHarmonicArray);
  using HarmCfgNumberOfHarmonicsPtr = decltype(&RFmxSpecAn_HarmCfgNumberOfHarmonics);
  using HarmFetchHarmonicMeasurementPtr = decltype(&RFmxSpecAn_HarmFetchHarmonicMeasurement);
  using HarmFetchHarmonicMeasurementArrayPtr = decltype(&RFmxSpecAn_HarmFetchHarmonicMeasurementArray);
  using HarmFetchHarmonicPowerTracePtr = decltype(&RFmxSpecAn_HarmFetchHarmonicPowerTrace);
  using HarmFetchTHDPtr = decltype(&RFmxSpecAn_HarmFetchTHD);
  using HarmReadPtr = decltype(&RFmxSpecAn_HarmRead);
  using IDPDCfgEqualizerCoefficientsPtr = decltype(&RFmxSpecAn_IDPDCfgEqualizerCoefficients);
  using IDPDCfgPredistortedWaveformPtr = decltype(&RFmxSpecAn_IDPDCfgPredistortedWaveform);
  using IDPDCfgReferenceWaveformPtr = decltype(&RFmxSpecAn_IDPDCfgReferenceWaveform);
  using IDPDFetchEqualizerCoefficientsPtr = decltype(&RFmxSpecAn_IDPDFetchEqualizerCoefficients);
  using IDPDFetchPredistortedWaveformPtr = decltype(&RFmxSpecAn_IDPDFetchPredistortedWaveform);
  using IDPDFetchProcessedMeanAcquiredWaveformPtr = decltype(&RFmxSpecAn_IDPDFetchProcessedMeanAcquiredWaveform);
  using IDPDFetchProcessedReferenceWaveformPtr = decltype(&RFmxSpecAn_IDPDFetchProcessedReferenceWaveform);
  using IDPDGetEqualizerReferenceWaveformPtr = decltype(&RFmxSpecAn_IDPDGetEqualizerReferenceWaveform);
  using IMCfgAutoIntermodsSetupPtr = decltype(&RFmxSpecAn_IMCfgAutoIntermodsSetup);
  using IMCfgAveragingPtr = decltype(&RFmxSpecAn_IMCfgAveraging);
  using IMCfgFFTPtr = decltype(&RFmxSpecAn_IMCfgFFT);
  using IMCfgFrequencyDefinitionPtr = decltype(&RFmxSpecAn_IMCfgFrequencyDefinition);
  using IMCfgFundamentalTonesPtr = decltype(&RFmxSpecAn_IMCfgFundamentalTones);
  using IMCfgIntermodPtr = decltype(&RFmxSpecAn_IMCfgIntermod);
  using IMCfgIntermodArrayPtr = decltype(&RFmxSpecAn_IMCfgIntermodArray);
  using IMCfgMeasurementMethodPtr = decltype(&RFmxSpecAn_IMCfgMeasurementMethod);
  using IMCfgNumberOfIntermodsPtr = decltype(&RFmxSpecAn_IMCfgNumberOfIntermods);
  using IMCfgRBWFilterPtr = decltype(&RFmxSpecAn_IMCfgRBWFilter);
  using IMCfgSweepTimePtr = decltype(&RFmxSpecAn_IMCfgSweepTime);
  using IMFetchFundamentalMeasurementPtr = decltype(&RFmxSpecAn_IMFetchFundamentalMeasurement);
  using IMFetchInterceptPowerPtr = decltype(&RFmxSpecAn_IMFetchInterceptPower);
  using IMFetchInterceptPowerArrayPtr = decltype(&RFmxSpecAn_IMFetchInterceptPowerArray);
  using IMFetchIntermodMeasurementPtr = decltype(&RFmxSpecAn_IMFetchIntermodMeasurement);
  using IMFetchIntermodMeasurementArrayPtr = decltype(&RFmxSpecAn_IMFetchIntermodMeasurementArray);
  using IMFetchSpectrumPtr = decltype(&RFmxSpecAn_IMFetchSpectrum);
  using IQCfgAcquisitionPtr = decltype(&RFmxSpecAn_IQCfgAcquisition);
  using IQCfgBandwidthPtr = decltype(&RFmxSpecAn_IQCfgBandwidth);
  using IQFetchDataPtr = decltype(&RFmxSpecAn_IQFetchData);
  using IQGetRecordsDonePtr = decltype(&RFmxSpecAn_IQGetRecordsDone);
  using InitializePtr = decltype(&RFmxSpecAn_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxSpecAn_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxSpecAn_Initiate);
  using MarkerCfgNumberOfMarkersPtr = decltype(&RFmxSpecAn_MarkerCfgNumberOfMarkers);
  using MarkerCfgPeakExcursionPtr = decltype(&RFmxSpecAn_MarkerCfgPeakExcursion);
  using MarkerCfgReferenceMarkerPtr = decltype(&RFmxSpecAn_MarkerCfgReferenceMarker);
  using MarkerCfgThresholdPtr = decltype(&RFmxSpecAn_MarkerCfgThreshold);
  using MarkerCfgTracePtr = decltype(&RFmxSpecAn_MarkerCfgTrace);
  using MarkerCfgTypePtr = decltype(&RFmxSpecAn_MarkerCfgType);
  using MarkerCfgXLocationPtr = decltype(&RFmxSpecAn_MarkerCfgXLocation);
  using MarkerCfgYLocationPtr = decltype(&RFmxSpecAn_MarkerCfgYLocation);
  using MarkerFetchXYPtr = decltype(&RFmxSpecAn_MarkerFetchXY);
  using MarkerNextPeakPtr = decltype(&RFmxSpecAn_MarkerNextPeak);
  using MarkerPeakSearchPtr = decltype(&RFmxSpecAn_MarkerPeakSearch);
  using NFCfgAveragingPtr = decltype(&RFmxSpecAn_NFCfgAveraging);
  using NFCfgCalibrationLossPtr = decltype(&RFmxSpecAn_NFCfgCalibrationLoss);
  using NFCfgColdSourceDUTSParametersPtr = decltype(&RFmxSpecAn_NFCfgColdSourceDUTSParameters);
  using NFCfgColdSourceInputTerminationPtr = decltype(&RFmxSpecAn_NFCfgColdSourceInputTermination);
  using NFCfgColdSourceModePtr = decltype(&RFmxSpecAn_NFCfgColdSourceMode);
  using NFCfgDUTInputLossPtr = decltype(&RFmxSpecAn_NFCfgDUTInputLoss);
  using NFCfgDUTOutputLossPtr = decltype(&RFmxSpecAn_NFCfgDUTOutputLoss);
  using NFCfgFrequencyListPtr = decltype(&RFmxSpecAn_NFCfgFrequencyList);
  using NFCfgFrequencyListStartStopPointsPtr = decltype(&RFmxSpecAn_NFCfgFrequencyList_StartStopPoints);
  using NFCfgFrequencyListStartStopStepPtr = decltype(&RFmxSpecAn_NFCfgFrequencyList_StartStopStep);
  using NFCfgMeasurementBandwidthPtr = decltype(&RFmxSpecAn_NFCfgMeasurementBandwidth);
  using NFCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_NFCfgMeasurementInterval);
  using NFCfgMeasurementMethodPtr = decltype(&RFmxSpecAn_NFCfgMeasurementMethod);
  using NFCfgYFactorModePtr = decltype(&RFmxSpecAn_NFCfgYFactorMode);
  using NFCfgYFactorNoiseSourceENRPtr = decltype(&RFmxSpecAn_NFCfgYFactorNoiseSourceENR);
  using NFCfgYFactorNoiseSourceLossPtr = decltype(&RFmxSpecAn_NFCfgYFactorNoiseSourceLoss);
  using NFCfgYFactorNoiseSourceSettlingTimePtr = decltype(&RFmxSpecAn_NFCfgYFactorNoiseSourceSettlingTime);
  using NFClearCalibrationDatabasePtr = decltype(&RFmxSpecAn_NFClearCalibrationDatabase);
  using NFFetchAnalyzerNoiseFigurePtr = decltype(&RFmxSpecAn_NFFetchAnalyzerNoiseFigure);
  using NFFetchColdSourcePowerPtr = decltype(&RFmxSpecAn_NFFetchColdSourcePower);
  using NFFetchDUTNoiseFigureAndGainPtr = decltype(&RFmxSpecAn_NFFetchDUTNoiseFigureAndGain);
  using NFFetchYFactorPowersPtr = decltype(&RFmxSpecAn_NFFetchYFactorPowers);
  using NFFetchYFactorsPtr = decltype(&RFmxSpecAn_NFFetchYFactors);
  using NFRecommendReferenceLevelPtr = decltype(&RFmxSpecAn_NFRecommendReferenceLevel);
  using NFValidateCalibrationDataPtr = decltype(&RFmxSpecAn_NFValidateCalibrationData);
  using OBWCfgAveragingPtr = decltype(&RFmxSpecAn_OBWCfgAveraging);
  using OBWCfgBandwidthPercentagePtr = decltype(&RFmxSpecAn_OBWCfgBandwidthPercentage);
  using OBWCfgFFTPtr = decltype(&RFmxSpecAn_OBWCfgFFT);
  using OBWCfgPowerUnitsPtr = decltype(&RFmxSpecAn_OBWCfgPowerUnits);
  using OBWCfgRBWFilterPtr = decltype(&RFmxSpecAn_OBWCfgRBWFilter);
  using OBWCfgSpanPtr = decltype(&RFmxSpecAn_OBWCfgSpan);
  using OBWCfgSweepTimePtr = decltype(&RFmxSpecAn_OBWCfgSweepTime);
  using OBWFetchMeasurementPtr = decltype(&RFmxSpecAn_OBWFetchMeasurement);
  using OBWFetchSpectrumTracePtr = decltype(&RFmxSpecAn_OBWFetchSpectrumTrace);
  using OBWReadPtr = decltype(&RFmxSpecAn_OBWRead);
  using PAVTCfgMeasurementBandwidthPtr = decltype(&RFmxSpecAn_PAVTCfgMeasurementBandwidth);
  using PAVTCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_PAVTCfgMeasurementInterval);
  using PAVTCfgMeasurementIntervalModePtr = decltype(&RFmxSpecAn_PAVTCfgMeasurementIntervalMode);
  using PAVTCfgMeasurementLocationTypePtr = decltype(&RFmxSpecAn_PAVTCfgMeasurementLocationType);
  using PAVTCfgNumberOfSegmentsPtr = decltype(&RFmxSpecAn_PAVTCfgNumberOfSegments);
  using PAVTCfgSegmentMeasurementIntervalPtr = decltype(&RFmxSpecAn_PAVTCfgSegmentMeasurementInterval);
  using PAVTCfgSegmentMeasurementIntervalArrayPtr = decltype(&RFmxSpecAn_PAVTCfgSegmentMeasurementIntervalArray);
  using PAVTCfgSegmentStartTimeListPtr = decltype(&RFmxSpecAn_PAVTCfgSegmentStartTimeList);
  using PAVTCfgSegmentStartTimeStepPtr = decltype(&RFmxSpecAn_PAVTCfgSegmentStartTimeStep);
  using PAVTCfgSegmentTypePtr = decltype(&RFmxSpecAn_PAVTCfgSegmentType);
  using PAVTCfgSegmentTypeArrayPtr = decltype(&RFmxSpecAn_PAVTCfgSegmentTypeArray);
  using PAVTFetchAmplitudeTracePtr = decltype(&RFmxSpecAn_PAVTFetchAmplitudeTrace);
  using PAVTFetchPhaseAndAmplitudePtr = decltype(&RFmxSpecAn_PAVTFetchPhaseAndAmplitude);
  using PAVTFetchPhaseAndAmplitudeArrayPtr = decltype(&RFmxSpecAn_PAVTFetchPhaseAndAmplitudeArray);
  using PAVTFetchPhaseTracePtr = decltype(&RFmxSpecAn_PAVTFetchPhaseTrace);
  using PhaseNoiseCfgAutoRangePtr = decltype(&RFmxSpecAn_PhaseNoiseCfgAutoRange);
  using PhaseNoiseCfgAveragingMultiplierPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgAveragingMultiplier);
  using PhaseNoiseCfgCancellationPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgCancellation);
  using PhaseNoiseCfgIntegratedNoisePtr = decltype(&RFmxSpecAn_PhaseNoiseCfgIntegratedNoise);
  using PhaseNoiseCfgNumberOfRangesPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgNumberOfRanges);
  using PhaseNoiseCfgRangeArrayPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgRangeArray);
  using PhaseNoiseCfgRangeDefinitionPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgRangeDefinition);
  using PhaseNoiseCfgSmoothingPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgSmoothing);
  using PhaseNoiseCfgSpotNoiseFrequencyListPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgSpotNoiseFrequencyList);
  using PhaseNoiseCfgSpurRemovalPtr = decltype(&RFmxSpecAn_PhaseNoiseCfgSpurRemoval);
  using PhaseNoiseFetchCarrierMeasurementPtr = decltype(&RFmxSpecAn_PhaseNoiseFetchCarrierMeasurement);
  using PhaseNoiseFetchIntegratedNoisePtr = decltype(&RFmxSpecAn_PhaseNoiseFetchIntegratedNoise);
  using PhaseNoiseFetchMeasuredLogPlotTracePtr = decltype(&RFmxSpecAn_PhaseNoiseFetchMeasuredLogPlotTrace);
  using PhaseNoiseFetchSmoothedLogPlotTracePtr = decltype(&RFmxSpecAn_PhaseNoiseFetchSmoothedLogPlotTrace);
  using PhaseNoiseFetchSpotNoisePtr = decltype(&RFmxSpecAn_PhaseNoiseFetchSpotNoise);
  using ResetAttributePtr = decltype(&RFmxSpecAn_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxSpecAn_ResetToDefault);
  using SEMCfgAveragingPtr = decltype(&RFmxSpecAn_SEMCfgAveraging);
  using SEMCfgCarrierChannelBandwidthPtr = decltype(&RFmxSpecAn_SEMCfgCarrierChannelBandwidth);
  using SEMCfgCarrierEnabledPtr = decltype(&RFmxSpecAn_SEMCfgCarrierEnabled);
  using SEMCfgCarrierFrequencyPtr = decltype(&RFmxSpecAn_SEMCfgCarrierFrequency);
  using SEMCfgCarrierIntegrationBandwidthPtr = decltype(&RFmxSpecAn_SEMCfgCarrierIntegrationBandwidth);
  using SEMCfgCarrierRBWFilterPtr = decltype(&RFmxSpecAn_SEMCfgCarrierRBWFilter);
  using SEMCfgCarrierRRCFilterPtr = decltype(&RFmxSpecAn_SEMCfgCarrierRRCFilter);
  using SEMCfgFFTPtr = decltype(&RFmxSpecAn_SEMCfgFFT);
  using SEMCfgNumberOfCarriersPtr = decltype(&RFmxSpecAn_SEMCfgNumberOfCarriers);
  using SEMCfgNumberOfOffsetsPtr = decltype(&RFmxSpecAn_SEMCfgNumberOfOffsets);
  using SEMCfgOffsetAbsoluteLimitPtr = decltype(&RFmxSpecAn_SEMCfgOffsetAbsoluteLimit);
  using SEMCfgOffsetAbsoluteLimitArrayPtr = decltype(&RFmxSpecAn_SEMCfgOffsetAbsoluteLimitArray);
  using SEMCfgOffsetBandwidthIntegralPtr = decltype(&RFmxSpecAn_SEMCfgOffsetBandwidthIntegral);
  using SEMCfgOffsetFrequencyPtr = decltype(&RFmxSpecAn_SEMCfgOffsetFrequency);
  using SEMCfgOffsetFrequencyArrayPtr = decltype(&RFmxSpecAn_SEMCfgOffsetFrequencyArray);
  using SEMCfgOffsetFrequencyDefinitionPtr = decltype(&RFmxSpecAn_SEMCfgOffsetFrequencyDefinition);
  using SEMCfgOffsetLimitFailMaskPtr = decltype(&RFmxSpecAn_SEMCfgOffsetLimitFailMask);
  using SEMCfgOffsetRBWFilterPtr = decltype(&RFmxSpecAn_SEMCfgOffsetRBWFilter);
  using SEMCfgOffsetRBWFilterArrayPtr = decltype(&RFmxSpecAn_SEMCfgOffsetRBWFilterArray);
  using SEMCfgOffsetRelativeAttenuationPtr = decltype(&RFmxSpecAn_SEMCfgOffsetRelativeAttenuation);
  using SEMCfgOffsetRelativeAttenuationArrayPtr = decltype(&RFmxSpecAn_SEMCfgOffsetRelativeAttenuationArray);
  using SEMCfgOffsetRelativeLimitPtr = decltype(&RFmxSpecAn_SEMCfgOffsetRelativeLimit);
  using SEMCfgOffsetRelativeLimitArrayPtr = decltype(&RFmxSpecAn_SEMCfgOffsetRelativeLimitArray);
  using SEMCfgPowerUnitsPtr = decltype(&RFmxSpecAn_SEMCfgPowerUnits);
  using SEMCfgReferenceTypePtr = decltype(&RFmxSpecAn_SEMCfgReferenceType);
  using SEMCfgSweepTimePtr = decltype(&RFmxSpecAn_SEMCfgSweepTime);
  using SEMFetchAbsoluteMaskTracePtr = decltype(&RFmxSpecAn_SEMFetchAbsoluteMaskTrace);
  using SEMFetchCarrierMeasurementPtr = decltype(&RFmxSpecAn_SEMFetchCarrierMeasurement);
  using SEMFetchCompositeMeasurementStatusPtr = decltype(&RFmxSpecAn_SEMFetchCompositeMeasurementStatus);
  using SEMFetchFrequencyResolutionPtr = decltype(&RFmxSpecAn_SEMFetchFrequencyResolution);
  using SEMFetchLowerOffsetMarginPtr = decltype(&RFmxSpecAn_SEMFetchLowerOffsetMargin);
  using SEMFetchLowerOffsetMarginArrayPtr = decltype(&RFmxSpecAn_SEMFetchLowerOffsetMarginArray);
  using SEMFetchLowerOffsetPowerPtr = decltype(&RFmxSpecAn_SEMFetchLowerOffsetPower);
  using SEMFetchLowerOffsetPowerArrayPtr = decltype(&RFmxSpecAn_SEMFetchLowerOffsetPowerArray);
  using SEMFetchRelativeMaskTracePtr = decltype(&RFmxSpecAn_SEMFetchRelativeMaskTrace);
  using SEMFetchSpectrumPtr = decltype(&RFmxSpecAn_SEMFetchSpectrum);
  using SEMFetchTotalCarrierPowerPtr = decltype(&RFmxSpecAn_SEMFetchTotalCarrierPower);
  using SEMFetchUpperOffsetMarginPtr = decltype(&RFmxSpecAn_SEMFetchUpperOffsetMargin);
  using SEMFetchUpperOffsetMarginArrayPtr = decltype(&RFmxSpecAn_SEMFetchUpperOffsetMarginArray);
  using SEMFetchUpperOffsetPowerPtr = decltype(&RFmxSpecAn_SEMFetchUpperOffsetPower);
  using SEMFetchUpperOffsetPowerArrayPtr = decltype(&RFmxSpecAn_SEMFetchUpperOffsetPowerArray);
  using SelectMeasurementsPtr = decltype(&RFmxSpecAn_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxSpecAn_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxSpecAn_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxSpecAn_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxSpecAn_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxSpecAn_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxSpecAn_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxSpecAn_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxSpecAn_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxSpecAn_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxSpecAn_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxSpecAn_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxSpecAn_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxSpecAn_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxSpecAn_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxSpecAn_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxSpecAn_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxSpecAn_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxSpecAn_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxSpecAn_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxSpecAn_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxSpecAn_SetAttributeU8Array);
  using SpectrumCfgAveragingPtr = decltype(&RFmxSpecAn_SpectrumCfgAveraging);
  using SpectrumCfgDetectorPtr = decltype(&RFmxSpecAn_SpectrumCfgDetector);
  using SpectrumCfgFFTPtr = decltype(&RFmxSpecAn_SpectrumCfgFFT);
  using SpectrumCfgFrequencyStartStopPtr = decltype(&RFmxSpecAn_SpectrumCfgFrequencyStartStop);
  using SpectrumCfgNoiseCompensationEnabledPtr = decltype(&RFmxSpecAn_SpectrumCfgNoiseCompensationEnabled);
  using SpectrumCfgPowerUnitsPtr = decltype(&RFmxSpecAn_SpectrumCfgPowerUnits);
  using SpectrumCfgRBWFilterPtr = decltype(&RFmxSpecAn_SpectrumCfgRBWFilter);
  using SpectrumCfgSpanPtr = decltype(&RFmxSpecAn_SpectrumCfgSpan);
  using SpectrumCfgSweepTimePtr = decltype(&RFmxSpecAn_SpectrumCfgSweepTime);
  using SpectrumCfgVBWFilterPtr = decltype(&RFmxSpecAn_SpectrumCfgVBWFilter);
  using SpectrumFetchMeasurementPtr = decltype(&RFmxSpecAn_SpectrumFetchMeasurement);
  using SpectrumFetchPowerTracePtr = decltype(&RFmxSpecAn_SpectrumFetchPowerTrace);
  using SpectrumFetchSpectrumPtr = decltype(&RFmxSpecAn_SpectrumFetchSpectrum);
  using SpectrumReadPtr = decltype(&RFmxSpecAn_SpectrumRead);
  using SpectrumValidateNoiseCalibrationDataPtr = decltype(&RFmxSpecAn_SpectrumValidateNoiseCalibrationData);
  using SpurCfgAveragingPtr = decltype(&RFmxSpecAn_SpurCfgAveraging);
  using SpurCfgFFTWindowTypePtr = decltype(&RFmxSpecAn_SpurCfgFFTWindowType);
  using SpurCfgNumberOfRangesPtr = decltype(&RFmxSpecAn_SpurCfgNumberOfRanges);
  using SpurCfgRangeAbsoluteLimitPtr = decltype(&RFmxSpecAn_SpurCfgRangeAbsoluteLimit);
  using SpurCfgRangeAbsoluteLimitArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeAbsoluteLimitArray);
  using SpurCfgRangeDetectorPtr = decltype(&RFmxSpecAn_SpurCfgRangeDetector);
  using SpurCfgRangeDetectorArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeDetectorArray);
  using SpurCfgRangeFrequencyPtr = decltype(&RFmxSpecAn_SpurCfgRangeFrequency);
  using SpurCfgRangeFrequencyArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeFrequencyArray);
  using SpurCfgRangeNumberOfSpursToReportPtr = decltype(&RFmxSpecAn_SpurCfgRangeNumberOfSpursToReport);
  using SpurCfgRangeNumberOfSpursToReportArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeNumberOfSpursToReportArray);
  using SpurCfgRangePeakCriteriaPtr = decltype(&RFmxSpecAn_SpurCfgRangePeakCriteria);
  using SpurCfgRangePeakCriteriaArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangePeakCriteriaArray);
  using SpurCfgRangeRBWArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeRBWArray);
  using SpurCfgRangeRBWFilterPtr = decltype(&RFmxSpecAn_SpurCfgRangeRBWFilter);
  using SpurCfgRangeRelativeAttenuationPtr = decltype(&RFmxSpecAn_SpurCfgRangeRelativeAttenuation);
  using SpurCfgRangeRelativeAttenuationArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeRelativeAttenuationArray);
  using SpurCfgRangeSweepTimePtr = decltype(&RFmxSpecAn_SpurCfgRangeSweepTime);
  using SpurCfgRangeSweepTimeArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeSweepTimeArray);
  using SpurCfgRangeVBWFilterPtr = decltype(&RFmxSpecAn_SpurCfgRangeVBWFilter);
  using SpurCfgRangeVBWFilterArrayPtr = decltype(&RFmxSpecAn_SpurCfgRangeVBWFilterArray);
  using SpurCfgTraceRangeIndexPtr = decltype(&RFmxSpecAn_SpurCfgTraceRangeIndex);
  using SpurFetchAllSpursPtr = decltype(&RFmxSpecAn_SpurFetchAllSpurs);
  using SpurFetchMeasurementStatusPtr = decltype(&RFmxSpecAn_SpurFetchMeasurementStatus);
  using SpurFetchRangeAbsoluteLimitTracePtr = decltype(&RFmxSpecAn_SpurFetchRangeAbsoluteLimitTrace);
  using SpurFetchRangeSpectrumTracePtr = decltype(&RFmxSpecAn_SpurFetchRangeSpectrumTrace);
  using SpurFetchRangeStatusPtr = decltype(&RFmxSpecAn_SpurFetchRangeStatus);
  using SpurFetchRangeStatusArrayPtr = decltype(&RFmxSpecAn_SpurFetchRangeStatusArray);
  using SpurFetchSpurMeasurementPtr = decltype(&RFmxSpecAn_SpurFetchSpurMeasurement);
  using SpurFetchSpurMeasurementArrayPtr = decltype(&RFmxSpecAn_SpurFetchSpurMeasurementArray);
  using TXPCfgAveragingPtr = decltype(&RFmxSpecAn_TXPCfgAveraging);
  using TXPCfgMeasurementIntervalPtr = decltype(&RFmxSpecAn_TXPCfgMeasurementInterval);
  using TXPCfgRBWFilterPtr = decltype(&RFmxSpecAn_TXPCfgRBWFilter);
  using TXPCfgThresholdPtr = decltype(&RFmxSpecAn_TXPCfgThreshold);
  using TXPCfgVBWFilterPtr = decltype(&RFmxSpecAn_TXPCfgVBWFilter);
  using TXPFetchMeasurementPtr = decltype(&RFmxSpecAn_TXPFetchMeasurement);
  using TXPFetchPowerTracePtr = decltype(&RFmxSpecAn_TXPFetchPowerTrace);
  using TXPReadPtr = decltype(&RFmxSpecAn_TXPRead);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxSpecAn_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxSpecAn_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    ACPCfgAveragingPtr ACPCfgAveraging;
    ACPCfgCarrierAndOffsetsPtr ACPCfgCarrierAndOffsets;
    ACPCfgCarrierFrequencyPtr ACPCfgCarrierFrequency;
    ACPCfgCarrierIntegrationBandwidthPtr ACPCfgCarrierIntegrationBandwidth;
    ACPCfgCarrierModePtr ACPCfgCarrierMode;
    ACPCfgCarrierRRCFilterPtr ACPCfgCarrierRRCFilter;
    ACPCfgDetectorPtr ACPCfgDetector;
    ACPCfgFFTPtr ACPCfgFFT;
    ACPCfgMeasurementMethodPtr ACPCfgMeasurementMethod;
    ACPCfgNoiseCompensationEnabledPtr ACPCfgNoiseCompensationEnabled;
    ACPCfgNumberOfCarriersPtr ACPCfgNumberOfCarriers;
    ACPCfgNumberOfOffsetsPtr ACPCfgNumberOfOffsets;
    ACPCfgOffsetPtr ACPCfgOffset;
    ACPCfgOffsetArrayPtr ACPCfgOffsetArray;
    ACPCfgOffsetFrequencyDefinitionPtr ACPCfgOffsetFrequencyDefinition;
    ACPCfgOffsetIntegrationBandwidthPtr ACPCfgOffsetIntegrationBandwidth;
    ACPCfgOffsetIntegrationBandwidthArrayPtr ACPCfgOffsetIntegrationBandwidthArray;
    ACPCfgOffsetPowerReferencePtr ACPCfgOffsetPowerReference;
    ACPCfgOffsetPowerReferenceArrayPtr ACPCfgOffsetPowerReferenceArray;
    ACPCfgOffsetRRCFilterPtr ACPCfgOffsetRRCFilter;
    ACPCfgOffsetRRCFilterArrayPtr ACPCfgOffsetRRCFilterArray;
    ACPCfgOffsetRelativeAttenuationPtr ACPCfgOffsetRelativeAttenuation;
    ACPCfgOffsetRelativeAttenuationArrayPtr ACPCfgOffsetRelativeAttenuationArray;
    ACPCfgPowerUnitsPtr ACPCfgPowerUnits;
    ACPCfgRBWFilterPtr ACPCfgRBWFilter;
    ACPCfgSweepTimePtr ACPCfgSweepTime;
    ACPFetchAbsolutePowersTracePtr ACPFetchAbsolutePowersTrace;
    ACPFetchCarrierMeasurementPtr ACPFetchCarrierMeasurement;
    ACPFetchFrequencyResolutionPtr ACPFetchFrequencyResolution;
    ACPFetchOffsetMeasurementPtr ACPFetchOffsetMeasurement;
    ACPFetchOffsetMeasurementArrayPtr ACPFetchOffsetMeasurementArray;
    ACPFetchRelativePowersTracePtr ACPFetchRelativePowersTrace;
    ACPFetchSpectrumPtr ACPFetchSpectrum;
    ACPFetchTotalCarrierPowerPtr ACPFetchTotalCarrierPower;
    ACPReadPtr ACPRead;
    ACPValidateNoiseCalibrationDataPtr ACPValidateNoiseCalibrationData;
    AMPMCfgAMToAMCurveFitPtr AMPMCfgAMToAMCurveFit;
    AMPMCfgAMToPMCurveFitPtr AMPMCfgAMToPMCurveFit;
    AMPMCfgAveragingPtr AMPMCfgAveraging;
    AMPMCfgCompressionPointsPtr AMPMCfgCompressionPoints;
    AMPMCfgDUTAverageInputPowerPtr AMPMCfgDUTAverageInputPower;
    AMPMCfgMeasurementIntervalPtr AMPMCfgMeasurementInterval;
    AMPMCfgMeasurementSampleRatePtr AMPMCfgMeasurementSampleRate;
    AMPMCfgReferencePowerTypePtr AMPMCfgReferencePowerType;
    AMPMCfgReferenceWaveformPtr AMPMCfgReferenceWaveform;
    AMPMCfgSynchronizationMethodPtr AMPMCfgSynchronizationMethod;
    AMPMCfgThresholdPtr AMPMCfgThreshold;
    AMPMFetchAMToAMTracePtr AMPMFetchAMToAMTrace;
    AMPMFetchAMToPMTracePtr AMPMFetchAMToPMTrace;
    AMPMFetchCompressionPointsPtr AMPMFetchCompressionPoints;
    AMPMFetchCurveFitCoefficientsPtr AMPMFetchCurveFitCoefficients;
    AMPMFetchCurveFitResidualPtr AMPMFetchCurveFitResidual;
    AMPMFetchDUTCharacteristicsPtr AMPMFetchDUTCharacteristics;
    AMPMFetchErrorPtr AMPMFetchError;
    AMPMFetchProcessedMeanAcquiredWaveformPtr AMPMFetchProcessedMeanAcquiredWaveform;
    AMPMFetchProcessedReferenceWaveformPtr AMPMFetchProcessedReferenceWaveform;
    AMPMFetchRelativePhaseTracePtr AMPMFetchRelativePhaseTrace;
    AMPMFetchRelativePowerTracePtr AMPMFetchRelativePowerTrace;
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AnalyzeSpectrum1WaveformPtr AnalyzeSpectrum1Waveform;
    AutoLevelPtr AutoLevel;
    BuildCarrierStringPtr BuildCarrierString;
    BuildHarmonicStringPtr BuildHarmonicString;
    BuildIntermodStringPtr BuildIntermodString;
    BuildListStepStringPtr BuildListStepString;
    BuildListStringPtr BuildListString;
    BuildMarkerStringPtr BuildMarkerString;
    BuildOffsetStringPtr BuildOffsetString;
    BuildRangeSpurStringPtr BuildRangeSpurString;
    BuildRangeStringPtr BuildRangeString;
    BuildSegmentStringPtr BuildSegmentString;
    BuildSignalStringPtr BuildSignalString;
    BuildSpurStringPtr BuildSpurString;
    CCDFCfgMeasurementIntervalPtr CCDFCfgMeasurementInterval;
    CCDFCfgNumberOfRecordsPtr CCDFCfgNumberOfRecords;
    CCDFCfgRBWFilterPtr CCDFCfgRBWFilter;
    CCDFCfgThresholdPtr CCDFCfgThreshold;
    CCDFFetchBasicPowerProbabilitiesPtr CCDFFetchBasicPowerProbabilities;
    CCDFFetchGaussianProbabilitiesTracePtr CCDFFetchGaussianProbabilitiesTrace;
    CCDFFetchPowerPtr CCDFFetchPower;
    CCDFFetchProbabilitiesTracePtr CCDFFetchProbabilitiesTrace;
    CCDFReadPtr CCDFRead;
    CHPCfgAveragingPtr CHPCfgAveraging;
    CHPCfgCarrierOffsetPtr CHPCfgCarrierOffset;
    CHPCfgDetectorPtr CHPCfgDetector;
    CHPCfgFFTPtr CHPCfgFFT;
    CHPCfgIntegrationBandwidthPtr CHPCfgIntegrationBandwidth;
    CHPCfgNumberOfCarriersPtr CHPCfgNumberOfCarriers;
    CHPCfgRBWFilterPtr CHPCfgRBWFilter;
    CHPCfgRRCFilterPtr CHPCfgRRCFilter;
    CHPCfgSpanPtr CHPCfgSpan;
    CHPCfgSweepTimePtr CHPCfgSweepTime;
    CHPFetchCarrierMeasurementPtr CHPFetchCarrierMeasurement;
    CHPFetchSpectrumPtr CHPFetchSpectrum;
    CHPFetchTotalCarrierPowerPtr CHPFetchTotalCarrierPower;
    CHPReadPtr CHPRead;
    CHPValidateNoiseCalibrationDataPtr CHPValidateNoiseCalibrationData;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    ClearNoiseCalibrationDatabasePtr ClearNoiseCalibrationDatabase;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateListPtr CreateList;
    CreateListStepPtr CreateListStep;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DPDApplyDigitalPredistortionPtr DPDApplyDigitalPredistortion;
    DPDApplyPreDPDSignalConditioningPtr DPDApplyPreDPDSignalConditioning;
    DPDCfgApplyDPDConfigurationInputPtr DPDCfgApplyDPDConfigurationInput;
    DPDCfgApplyDPDLookupTableCorrectionTypePtr DPDCfgApplyDPDLookupTableCorrectionType;
    DPDCfgApplyDPDMemoryModelCorrectionTypePtr DPDCfgApplyDPDMemoryModelCorrectionType;
    DPDCfgApplyDPDUserDPDPolynomialPtr DPDCfgApplyDPDUserDPDPolynomial;
    DPDCfgApplyDPDUserLookupTablePtr DPDCfgApplyDPDUserLookupTable;
    DPDCfgAveragingPtr DPDCfgAveraging;
    DPDCfgDPDModelPtr DPDCfgDPDModel;
    DPDCfgDUTAverageInputPowerPtr DPDCfgDUTAverageInputPower;
    DPDCfgGeneralizedMemoryPolynomialCrossTermsPtr DPDCfgGeneralizedMemoryPolynomialCrossTerms;
    DPDCfgIterativeDPDEnabledPtr DPDCfgIterativeDPDEnabled;
    DPDCfgLookupTableAMToAMCurveFitPtr DPDCfgLookupTableAMToAMCurveFit;
    DPDCfgLookupTableAMToPMCurveFitPtr DPDCfgLookupTableAMToPMCurveFit;
    DPDCfgLookupTableStepSizePtr DPDCfgLookupTableStepSize;
    DPDCfgLookupTableThresholdPtr DPDCfgLookupTableThreshold;
    DPDCfgLookupTableTypePtr DPDCfgLookupTableType;
    DPDCfgMeasurementIntervalPtr DPDCfgMeasurementInterval;
    DPDCfgMeasurementSampleRatePtr DPDCfgMeasurementSampleRate;
    DPDCfgMemoryPolynomialPtr DPDCfgMemoryPolynomial;
    DPDCfgPreviousDPDPolynomialPtr DPDCfgPreviousDPDPolynomial;
    DPDCfgReferenceWaveformPtr DPDCfgReferenceWaveform;
    DPDCfgSynchronizationMethodPtr DPDCfgSynchronizationMethod;
    DPDFetchApplyDPDPreCFRPAPRPtr DPDFetchApplyDPDPreCFRPAPR;
    DPDFetchAverageGainPtr DPDFetchAverageGain;
    DPDFetchDPDPolynomialPtr DPDFetchDPDPolynomial;
    DPDFetchLookupTablePtr DPDFetchLookupTable;
    DPDFetchNMSEPtr DPDFetchNMSE;
    DPDFetchProcessedMeanAcquiredWaveformPtr DPDFetchProcessedMeanAcquiredWaveform;
    DPDFetchProcessedReferenceWaveformPtr DPDFetchProcessedReferenceWaveform;
    DeleteListPtr DeleteList;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    FCntCfgAveragingPtr FCntCfgAveraging;
    FCntCfgMeasurementIntervalPtr FCntCfgMeasurementInterval;
    FCntCfgRBWFilterPtr FCntCfgRBWFilter;
    FCntCfgThresholdPtr FCntCfgThreshold;
    FCntFetchAllanDeviationPtr FCntFetchAllanDeviation;
    FCntFetchFrequencyTracePtr FCntFetchFrequencyTrace;
    FCntFetchMeasurementPtr FCntFetchMeasurement;
    FCntFetchPhaseTracePtr FCntFetchPhaseTrace;
    FCntFetchPowerTracePtr FCntFetchPowerTrace;
    FCntReadPtr FCntRead;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    HarmCfgAutoHarmonicsPtr HarmCfgAutoHarmonics;
    HarmCfgAveragingPtr HarmCfgAveraging;
    HarmCfgFundamentalMeasurementIntervalPtr HarmCfgFundamentalMeasurementInterval;
    HarmCfgFundamentalRBWPtr HarmCfgFundamentalRBW;
    HarmCfgHarmonicPtr HarmCfgHarmonic;
    HarmCfgHarmonicArrayPtr HarmCfgHarmonicArray;
    HarmCfgNumberOfHarmonicsPtr HarmCfgNumberOfHarmonics;
    HarmFetchHarmonicMeasurementPtr HarmFetchHarmonicMeasurement;
    HarmFetchHarmonicMeasurementArrayPtr HarmFetchHarmonicMeasurementArray;
    HarmFetchHarmonicPowerTracePtr HarmFetchHarmonicPowerTrace;
    HarmFetchTHDPtr HarmFetchTHD;
    HarmReadPtr HarmRead;
    IDPDCfgEqualizerCoefficientsPtr IDPDCfgEqualizerCoefficients;
    IDPDCfgPredistortedWaveformPtr IDPDCfgPredistortedWaveform;
    IDPDCfgReferenceWaveformPtr IDPDCfgReferenceWaveform;
    IDPDFetchEqualizerCoefficientsPtr IDPDFetchEqualizerCoefficients;
    IDPDFetchPredistortedWaveformPtr IDPDFetchPredistortedWaveform;
    IDPDFetchProcessedMeanAcquiredWaveformPtr IDPDFetchProcessedMeanAcquiredWaveform;
    IDPDFetchProcessedReferenceWaveformPtr IDPDFetchProcessedReferenceWaveform;
    IDPDGetEqualizerReferenceWaveformPtr IDPDGetEqualizerReferenceWaveform;
    IMCfgAutoIntermodsSetupPtr IMCfgAutoIntermodsSetup;
    IMCfgAveragingPtr IMCfgAveraging;
    IMCfgFFTPtr IMCfgFFT;
    IMCfgFrequencyDefinitionPtr IMCfgFrequencyDefinition;
    IMCfgFundamentalTonesPtr IMCfgFundamentalTones;
    IMCfgIntermodPtr IMCfgIntermod;
    IMCfgIntermodArrayPtr IMCfgIntermodArray;
    IMCfgMeasurementMethodPtr IMCfgMeasurementMethod;
    IMCfgNumberOfIntermodsPtr IMCfgNumberOfIntermods;
    IMCfgRBWFilterPtr IMCfgRBWFilter;
    IMCfgSweepTimePtr IMCfgSweepTime;
    IMFetchFundamentalMeasurementPtr IMFetchFundamentalMeasurement;
    IMFetchInterceptPowerPtr IMFetchInterceptPower;
    IMFetchInterceptPowerArrayPtr IMFetchInterceptPowerArray;
    IMFetchIntermodMeasurementPtr IMFetchIntermodMeasurement;
    IMFetchIntermodMeasurementArrayPtr IMFetchIntermodMeasurementArray;
    IMFetchSpectrumPtr IMFetchSpectrum;
    IQCfgAcquisitionPtr IQCfgAcquisition;
    IQCfgBandwidthPtr IQCfgBandwidth;
    IQFetchDataPtr IQFetchData;
    IQGetRecordsDonePtr IQGetRecordsDone;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    MarkerCfgNumberOfMarkersPtr MarkerCfgNumberOfMarkers;
    MarkerCfgPeakExcursionPtr MarkerCfgPeakExcursion;
    MarkerCfgReferenceMarkerPtr MarkerCfgReferenceMarker;
    MarkerCfgThresholdPtr MarkerCfgThreshold;
    MarkerCfgTracePtr MarkerCfgTrace;
    MarkerCfgTypePtr MarkerCfgType;
    MarkerCfgXLocationPtr MarkerCfgXLocation;
    MarkerCfgYLocationPtr MarkerCfgYLocation;
    MarkerFetchXYPtr MarkerFetchXY;
    MarkerNextPeakPtr MarkerNextPeak;
    MarkerPeakSearchPtr MarkerPeakSearch;
    NFCfgAveragingPtr NFCfgAveraging;
    NFCfgCalibrationLossPtr NFCfgCalibrationLoss;
    NFCfgColdSourceDUTSParametersPtr NFCfgColdSourceDUTSParameters;
    NFCfgColdSourceInputTerminationPtr NFCfgColdSourceInputTermination;
    NFCfgColdSourceModePtr NFCfgColdSourceMode;
    NFCfgDUTInputLossPtr NFCfgDUTInputLoss;
    NFCfgDUTOutputLossPtr NFCfgDUTOutputLoss;
    NFCfgFrequencyListPtr NFCfgFrequencyList;
    NFCfgFrequencyListStartStopPointsPtr NFCfgFrequencyListStartStopPoints;
    NFCfgFrequencyListStartStopStepPtr NFCfgFrequencyListStartStopStep;
    NFCfgMeasurementBandwidthPtr NFCfgMeasurementBandwidth;
    NFCfgMeasurementIntervalPtr NFCfgMeasurementInterval;
    NFCfgMeasurementMethodPtr NFCfgMeasurementMethod;
    NFCfgYFactorModePtr NFCfgYFactorMode;
    NFCfgYFactorNoiseSourceENRPtr NFCfgYFactorNoiseSourceENR;
    NFCfgYFactorNoiseSourceLossPtr NFCfgYFactorNoiseSourceLoss;
    NFCfgYFactorNoiseSourceSettlingTimePtr NFCfgYFactorNoiseSourceSettlingTime;
    NFClearCalibrationDatabasePtr NFClearCalibrationDatabase;
    NFFetchAnalyzerNoiseFigurePtr NFFetchAnalyzerNoiseFigure;
    NFFetchColdSourcePowerPtr NFFetchColdSourcePower;
    NFFetchDUTNoiseFigureAndGainPtr NFFetchDUTNoiseFigureAndGain;
    NFFetchYFactorPowersPtr NFFetchYFactorPowers;
    NFFetchYFactorsPtr NFFetchYFactors;
    NFRecommendReferenceLevelPtr NFRecommendReferenceLevel;
    NFValidateCalibrationDataPtr NFValidateCalibrationData;
    OBWCfgAveragingPtr OBWCfgAveraging;
    OBWCfgBandwidthPercentagePtr OBWCfgBandwidthPercentage;
    OBWCfgFFTPtr OBWCfgFFT;
    OBWCfgPowerUnitsPtr OBWCfgPowerUnits;
    OBWCfgRBWFilterPtr OBWCfgRBWFilter;
    OBWCfgSpanPtr OBWCfgSpan;
    OBWCfgSweepTimePtr OBWCfgSweepTime;
    OBWFetchMeasurementPtr OBWFetchMeasurement;
    OBWFetchSpectrumTracePtr OBWFetchSpectrumTrace;
    OBWReadPtr OBWRead;
    PAVTCfgMeasurementBandwidthPtr PAVTCfgMeasurementBandwidth;
    PAVTCfgMeasurementIntervalPtr PAVTCfgMeasurementInterval;
    PAVTCfgMeasurementIntervalModePtr PAVTCfgMeasurementIntervalMode;
    PAVTCfgMeasurementLocationTypePtr PAVTCfgMeasurementLocationType;
    PAVTCfgNumberOfSegmentsPtr PAVTCfgNumberOfSegments;
    PAVTCfgSegmentMeasurementIntervalPtr PAVTCfgSegmentMeasurementInterval;
    PAVTCfgSegmentMeasurementIntervalArrayPtr PAVTCfgSegmentMeasurementIntervalArray;
    PAVTCfgSegmentStartTimeListPtr PAVTCfgSegmentStartTimeList;
    PAVTCfgSegmentStartTimeStepPtr PAVTCfgSegmentStartTimeStep;
    PAVTCfgSegmentTypePtr PAVTCfgSegmentType;
    PAVTCfgSegmentTypeArrayPtr PAVTCfgSegmentTypeArray;
    PAVTFetchAmplitudeTracePtr PAVTFetchAmplitudeTrace;
    PAVTFetchPhaseAndAmplitudePtr PAVTFetchPhaseAndAmplitude;
    PAVTFetchPhaseAndAmplitudeArrayPtr PAVTFetchPhaseAndAmplitudeArray;
    PAVTFetchPhaseTracePtr PAVTFetchPhaseTrace;
    PhaseNoiseCfgAutoRangePtr PhaseNoiseCfgAutoRange;
    PhaseNoiseCfgAveragingMultiplierPtr PhaseNoiseCfgAveragingMultiplier;
    PhaseNoiseCfgCancellationPtr PhaseNoiseCfgCancellation;
    PhaseNoiseCfgIntegratedNoisePtr PhaseNoiseCfgIntegratedNoise;
    PhaseNoiseCfgNumberOfRangesPtr PhaseNoiseCfgNumberOfRanges;
    PhaseNoiseCfgRangeArrayPtr PhaseNoiseCfgRangeArray;
    PhaseNoiseCfgRangeDefinitionPtr PhaseNoiseCfgRangeDefinition;
    PhaseNoiseCfgSmoothingPtr PhaseNoiseCfgSmoothing;
    PhaseNoiseCfgSpotNoiseFrequencyListPtr PhaseNoiseCfgSpotNoiseFrequencyList;
    PhaseNoiseCfgSpurRemovalPtr PhaseNoiseCfgSpurRemoval;
    PhaseNoiseFetchCarrierMeasurementPtr PhaseNoiseFetchCarrierMeasurement;
    PhaseNoiseFetchIntegratedNoisePtr PhaseNoiseFetchIntegratedNoise;
    PhaseNoiseFetchMeasuredLogPlotTracePtr PhaseNoiseFetchMeasuredLogPlotTrace;
    PhaseNoiseFetchSmoothedLogPlotTracePtr PhaseNoiseFetchSmoothedLogPlotTrace;
    PhaseNoiseFetchSpotNoisePtr PhaseNoiseFetchSpotNoise;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SEMCfgAveragingPtr SEMCfgAveraging;
    SEMCfgCarrierChannelBandwidthPtr SEMCfgCarrierChannelBandwidth;
    SEMCfgCarrierEnabledPtr SEMCfgCarrierEnabled;
    SEMCfgCarrierFrequencyPtr SEMCfgCarrierFrequency;
    SEMCfgCarrierIntegrationBandwidthPtr SEMCfgCarrierIntegrationBandwidth;
    SEMCfgCarrierRBWFilterPtr SEMCfgCarrierRBWFilter;
    SEMCfgCarrierRRCFilterPtr SEMCfgCarrierRRCFilter;
    SEMCfgFFTPtr SEMCfgFFT;
    SEMCfgNumberOfCarriersPtr SEMCfgNumberOfCarriers;
    SEMCfgNumberOfOffsetsPtr SEMCfgNumberOfOffsets;
    SEMCfgOffsetAbsoluteLimitPtr SEMCfgOffsetAbsoluteLimit;
    SEMCfgOffsetAbsoluteLimitArrayPtr SEMCfgOffsetAbsoluteLimitArray;
    SEMCfgOffsetBandwidthIntegralPtr SEMCfgOffsetBandwidthIntegral;
    SEMCfgOffsetFrequencyPtr SEMCfgOffsetFrequency;
    SEMCfgOffsetFrequencyArrayPtr SEMCfgOffsetFrequencyArray;
    SEMCfgOffsetFrequencyDefinitionPtr SEMCfgOffsetFrequencyDefinition;
    SEMCfgOffsetLimitFailMaskPtr SEMCfgOffsetLimitFailMask;
    SEMCfgOffsetRBWFilterPtr SEMCfgOffsetRBWFilter;
    SEMCfgOffsetRBWFilterArrayPtr SEMCfgOffsetRBWFilterArray;
    SEMCfgOffsetRelativeAttenuationPtr SEMCfgOffsetRelativeAttenuation;
    SEMCfgOffsetRelativeAttenuationArrayPtr SEMCfgOffsetRelativeAttenuationArray;
    SEMCfgOffsetRelativeLimitPtr SEMCfgOffsetRelativeLimit;
    SEMCfgOffsetRelativeLimitArrayPtr SEMCfgOffsetRelativeLimitArray;
    SEMCfgPowerUnitsPtr SEMCfgPowerUnits;
    SEMCfgReferenceTypePtr SEMCfgReferenceType;
    SEMCfgSweepTimePtr SEMCfgSweepTime;
    SEMFetchAbsoluteMaskTracePtr SEMFetchAbsoluteMaskTrace;
    SEMFetchCarrierMeasurementPtr SEMFetchCarrierMeasurement;
    SEMFetchCompositeMeasurementStatusPtr SEMFetchCompositeMeasurementStatus;
    SEMFetchFrequencyResolutionPtr SEMFetchFrequencyResolution;
    SEMFetchLowerOffsetMarginPtr SEMFetchLowerOffsetMargin;
    SEMFetchLowerOffsetMarginArrayPtr SEMFetchLowerOffsetMarginArray;
    SEMFetchLowerOffsetPowerPtr SEMFetchLowerOffsetPower;
    SEMFetchLowerOffsetPowerArrayPtr SEMFetchLowerOffsetPowerArray;
    SEMFetchRelativeMaskTracePtr SEMFetchRelativeMaskTrace;
    SEMFetchSpectrumPtr SEMFetchSpectrum;
    SEMFetchTotalCarrierPowerPtr SEMFetchTotalCarrierPower;
    SEMFetchUpperOffsetMarginPtr SEMFetchUpperOffsetMargin;
    SEMFetchUpperOffsetMarginArrayPtr SEMFetchUpperOffsetMarginArray;
    SEMFetchUpperOffsetPowerPtr SEMFetchUpperOffsetPower;
    SEMFetchUpperOffsetPowerArrayPtr SEMFetchUpperOffsetPowerArray;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    SpectrumCfgAveragingPtr SpectrumCfgAveraging;
    SpectrumCfgDetectorPtr SpectrumCfgDetector;
    SpectrumCfgFFTPtr SpectrumCfgFFT;
    SpectrumCfgFrequencyStartStopPtr SpectrumCfgFrequencyStartStop;
    SpectrumCfgNoiseCompensationEnabledPtr SpectrumCfgNoiseCompensationEnabled;
    SpectrumCfgPowerUnitsPtr SpectrumCfgPowerUnits;
    SpectrumCfgRBWFilterPtr SpectrumCfgRBWFilter;
    SpectrumCfgSpanPtr SpectrumCfgSpan;
    SpectrumCfgSweepTimePtr SpectrumCfgSweepTime;
    SpectrumCfgVBWFilterPtr SpectrumCfgVBWFilter;
    SpectrumFetchMeasurementPtr SpectrumFetchMeasurement;
    SpectrumFetchPowerTracePtr SpectrumFetchPowerTrace;
    SpectrumFetchSpectrumPtr SpectrumFetchSpectrum;
    SpectrumReadPtr SpectrumRead;
    SpectrumValidateNoiseCalibrationDataPtr SpectrumValidateNoiseCalibrationData;
    SpurCfgAveragingPtr SpurCfgAveraging;
    SpurCfgFFTWindowTypePtr SpurCfgFFTWindowType;
    SpurCfgNumberOfRangesPtr SpurCfgNumberOfRanges;
    SpurCfgRangeAbsoluteLimitPtr SpurCfgRangeAbsoluteLimit;
    SpurCfgRangeAbsoluteLimitArrayPtr SpurCfgRangeAbsoluteLimitArray;
    SpurCfgRangeDetectorPtr SpurCfgRangeDetector;
    SpurCfgRangeDetectorArrayPtr SpurCfgRangeDetectorArray;
    SpurCfgRangeFrequencyPtr SpurCfgRangeFrequency;
    SpurCfgRangeFrequencyArrayPtr SpurCfgRangeFrequencyArray;
    SpurCfgRangeNumberOfSpursToReportPtr SpurCfgRangeNumberOfSpursToReport;
    SpurCfgRangeNumberOfSpursToReportArrayPtr SpurCfgRangeNumberOfSpursToReportArray;
    SpurCfgRangePeakCriteriaPtr SpurCfgRangePeakCriteria;
    SpurCfgRangePeakCriteriaArrayPtr SpurCfgRangePeakCriteriaArray;
    SpurCfgRangeRBWArrayPtr SpurCfgRangeRBWArray;
    SpurCfgRangeRBWFilterPtr SpurCfgRangeRBWFilter;
    SpurCfgRangeRelativeAttenuationPtr SpurCfgRangeRelativeAttenuation;
    SpurCfgRangeRelativeAttenuationArrayPtr SpurCfgRangeRelativeAttenuationArray;
    SpurCfgRangeSweepTimePtr SpurCfgRangeSweepTime;
    SpurCfgRangeSweepTimeArrayPtr SpurCfgRangeSweepTimeArray;
    SpurCfgRangeVBWFilterPtr SpurCfgRangeVBWFilter;
    SpurCfgRangeVBWFilterArrayPtr SpurCfgRangeVBWFilterArray;
    SpurCfgTraceRangeIndexPtr SpurCfgTraceRangeIndex;
    SpurFetchAllSpursPtr SpurFetchAllSpurs;
    SpurFetchMeasurementStatusPtr SpurFetchMeasurementStatus;
    SpurFetchRangeAbsoluteLimitTracePtr SpurFetchRangeAbsoluteLimitTrace;
    SpurFetchRangeSpectrumTracePtr SpurFetchRangeSpectrumTrace;
    SpurFetchRangeStatusPtr SpurFetchRangeStatus;
    SpurFetchRangeStatusArrayPtr SpurFetchRangeStatusArray;
    SpurFetchSpurMeasurementPtr SpurFetchSpurMeasurement;
    SpurFetchSpurMeasurementArrayPtr SpurFetchSpurMeasurementArray;
    TXPCfgAveragingPtr TXPCfgAveraging;
    TXPCfgMeasurementIntervalPtr TXPCfgMeasurementInterval;
    TXPCfgRBWFilterPtr TXPCfgRBWFilter;
    TXPCfgThresholdPtr TXPCfgThreshold;
    TXPCfgVBWFilterPtr TXPCfgVBWFilter;
    TXPFetchMeasurementPtr TXPFetchMeasurement;
    TXPFetchPowerTracePtr TXPFetchPowerTrace;
    TXPReadPtr TXPRead;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxspecan_grpc

#endif  // NIRFMXSPECAN_GRPC_LIBRARY_H
