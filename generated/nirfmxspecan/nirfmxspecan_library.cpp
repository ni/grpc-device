//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXSPECAN Metadata
//---------------------------------------------------------------------
#include "nirfmxspecan_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxSpecAn.dll";
#else
static const char* kLibraryName = "libnirfmxspecan.so.1";
#endif

namespace nirfmxspecan_grpc {

NiRFmxSpecAnLibrary::NiRFmxSpecAnLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.ACPCfgAveraging = reinterpret_cast<ACPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgAveraging"));
  function_pointers_.ACPCfgCarrierAndOffsets = reinterpret_cast<ACPCfgCarrierAndOffsetsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgCarrierAndOffsets"));
  function_pointers_.ACPCfgCarrierFrequency = reinterpret_cast<ACPCfgCarrierFrequencyPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgCarrierFrequency"));
  function_pointers_.ACPCfgCarrierIntegrationBandwidth = reinterpret_cast<ACPCfgCarrierIntegrationBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgCarrierIntegrationBandwidth"));
  function_pointers_.ACPCfgCarrierMode = reinterpret_cast<ACPCfgCarrierModePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgCarrierMode"));
  function_pointers_.ACPCfgCarrierRRCFilter = reinterpret_cast<ACPCfgCarrierRRCFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgCarrierRRCFilter"));
  function_pointers_.ACPCfgFFT = reinterpret_cast<ACPCfgFFTPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgFFT"));
  function_pointers_.ACPCfgMeasurementMethod = reinterpret_cast<ACPCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgMeasurementMethod"));
  function_pointers_.ACPCfgNoiseCompensationEnabled = reinterpret_cast<ACPCfgNoiseCompensationEnabledPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgNoiseCompensationEnabled"));
  function_pointers_.ACPCfgNumberOfCarriers = reinterpret_cast<ACPCfgNumberOfCarriersPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgNumberOfCarriers"));
  function_pointers_.ACPCfgNumberOfOffsets = reinterpret_cast<ACPCfgNumberOfOffsetsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgNumberOfOffsets"));
  function_pointers_.ACPCfgOffset = reinterpret_cast<ACPCfgOffsetPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffset"));
  function_pointers_.ACPCfgOffsetArray = reinterpret_cast<ACPCfgOffsetArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetArray"));
  function_pointers_.ACPCfgOffsetFrequencyDefinition = reinterpret_cast<ACPCfgOffsetFrequencyDefinitionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetFrequencyDefinition"));
  function_pointers_.ACPCfgOffsetIntegrationBandwidth = reinterpret_cast<ACPCfgOffsetIntegrationBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetIntegrationBandwidth"));
  function_pointers_.ACPCfgOffsetIntegrationBandwidthArray = reinterpret_cast<ACPCfgOffsetIntegrationBandwidthArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetIntegrationBandwidthArray"));
  function_pointers_.ACPCfgOffsetPowerReference = reinterpret_cast<ACPCfgOffsetPowerReferencePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetPowerReference"));
  function_pointers_.ACPCfgOffsetPowerReferenceArray = reinterpret_cast<ACPCfgOffsetPowerReferenceArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetPowerReferenceArray"));
  function_pointers_.ACPCfgOffsetRRCFilter = reinterpret_cast<ACPCfgOffsetRRCFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetRRCFilter"));
  function_pointers_.ACPCfgOffsetRRCFilterArray = reinterpret_cast<ACPCfgOffsetRRCFilterArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetRRCFilterArray"));
  function_pointers_.ACPCfgOffsetRelativeAttenuation = reinterpret_cast<ACPCfgOffsetRelativeAttenuationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetRelativeAttenuation"));
  function_pointers_.ACPCfgOffsetRelativeAttenuationArray = reinterpret_cast<ACPCfgOffsetRelativeAttenuationArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgOffsetRelativeAttenuationArray"));
  function_pointers_.ACPCfgPowerUnits = reinterpret_cast<ACPCfgPowerUnitsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgPowerUnits"));
  function_pointers_.ACPCfgRBWFilter = reinterpret_cast<ACPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgRBWFilter"));
  function_pointers_.ACPCfgSweepTime = reinterpret_cast<ACPCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPCfgSweepTime"));
  function_pointers_.ACPFetchAbsolutePowersTrace = reinterpret_cast<ACPFetchAbsolutePowersTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchAbsolutePowersTrace"));
  function_pointers_.ACPFetchCarrierMeasurement = reinterpret_cast<ACPFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchCarrierMeasurement"));
  function_pointers_.ACPFetchFrequencyResolution = reinterpret_cast<ACPFetchFrequencyResolutionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchFrequencyResolution"));
  function_pointers_.ACPFetchOffsetMeasurement = reinterpret_cast<ACPFetchOffsetMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchOffsetMeasurement"));
  function_pointers_.ACPFetchOffsetMeasurementArray = reinterpret_cast<ACPFetchOffsetMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchOffsetMeasurementArray"));
  function_pointers_.ACPFetchRelativePowersTrace = reinterpret_cast<ACPFetchRelativePowersTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchRelativePowersTrace"));
  function_pointers_.ACPFetchSpectrum = reinterpret_cast<ACPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchSpectrum"));
  function_pointers_.ACPFetchTotalCarrierPower = reinterpret_cast<ACPFetchTotalCarrierPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPFetchTotalCarrierPower"));
  function_pointers_.ACPRead = reinterpret_cast<ACPReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPRead"));
  function_pointers_.ACPValidateNoiseCalibrationData = reinterpret_cast<ACPValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ACPValidateNoiseCalibrationData"));
  function_pointers_.AMPMCfgAMToAMCurveFit = reinterpret_cast<AMPMCfgAMToAMCurveFitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgAMToAMCurveFit"));
  function_pointers_.AMPMCfgAMToPMCurveFit = reinterpret_cast<AMPMCfgAMToPMCurveFitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgAMToPMCurveFit"));
  function_pointers_.AMPMCfgAveraging = reinterpret_cast<AMPMCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgAveraging"));
  function_pointers_.AMPMCfgCompressionPoints = reinterpret_cast<AMPMCfgCompressionPointsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgCompressionPoints"));
  function_pointers_.AMPMCfgDUTAverageInputPower = reinterpret_cast<AMPMCfgDUTAverageInputPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgDUTAverageInputPower"));
  function_pointers_.AMPMCfgMeasurementInterval = reinterpret_cast<AMPMCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgMeasurementInterval"));
  function_pointers_.AMPMCfgMeasurementSampleRate = reinterpret_cast<AMPMCfgMeasurementSampleRatePtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgMeasurementSampleRate"));
  function_pointers_.AMPMCfgReferencePowerType = reinterpret_cast<AMPMCfgReferencePowerTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgReferencePowerType"));
  function_pointers_.AMPMCfgReferenceWaveform = reinterpret_cast<AMPMCfgReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgReferenceWaveform"));
  function_pointers_.AMPMCfgSynchronizationMethod = reinterpret_cast<AMPMCfgSynchronizationMethodPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgSynchronizationMethod"));
  function_pointers_.AMPMCfgThreshold = reinterpret_cast<AMPMCfgThresholdPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMCfgThreshold"));
  function_pointers_.AMPMFetchAMToAMTrace = reinterpret_cast<AMPMFetchAMToAMTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchAMToAMTrace"));
  function_pointers_.AMPMFetchAMToPMTrace = reinterpret_cast<AMPMFetchAMToPMTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchAMToPMTrace"));
  function_pointers_.AMPMFetchCompressionPoints = reinterpret_cast<AMPMFetchCompressionPointsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchCompressionPoints"));
  function_pointers_.AMPMFetchCurveFitCoefficients = reinterpret_cast<AMPMFetchCurveFitCoefficientsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchCurveFitCoefficients"));
  function_pointers_.AMPMFetchCurveFitResidual = reinterpret_cast<AMPMFetchCurveFitResidualPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchCurveFitResidual"));
  function_pointers_.AMPMFetchDUTCharacteristics = reinterpret_cast<AMPMFetchDUTCharacteristicsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchDUTCharacteristics"));
  function_pointers_.AMPMFetchError = reinterpret_cast<AMPMFetchErrorPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchError"));
  function_pointers_.AMPMFetchProcessedMeanAcquiredWaveform = reinterpret_cast<AMPMFetchProcessedMeanAcquiredWaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchProcessedMeanAcquiredWaveform"));
  function_pointers_.AMPMFetchProcessedReferenceWaveform = reinterpret_cast<AMPMFetchProcessedReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchProcessedReferenceWaveform"));
  function_pointers_.AMPMFetchRelativePhaseTrace = reinterpret_cast<AMPMFetchRelativePhaseTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchRelativePhaseTrace"));
  function_pointers_.AMPMFetchRelativePowerTrace = reinterpret_cast<AMPMFetchRelativePowerTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_AMPMFetchRelativePowerTrace"));
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AnalyzeIQ1Waveform"));
  function_pointers_.AnalyzeSpectrum1Waveform = reinterpret_cast<AnalyzeSpectrum1WaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AnalyzeSpectrum1Waveform"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_.get_function_pointer("RFmxSpecAn_AutoLevel"));
  function_pointers_.BuildCarrierString = reinterpret_cast<BuildCarrierStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildCarrierString2"));
  function_pointers_.BuildHarmonicString = reinterpret_cast<BuildHarmonicStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildHarmonicString2"));
  function_pointers_.BuildIntermodString = reinterpret_cast<BuildIntermodStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildIntermodString"));
  function_pointers_.BuildListStepString = reinterpret_cast<BuildListStepStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildListStepString"));
  function_pointers_.BuildListString = reinterpret_cast<BuildListStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildListString"));
  function_pointers_.BuildMarkerString = reinterpret_cast<BuildMarkerStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildMarkerString2"));
  function_pointers_.BuildOffsetString = reinterpret_cast<BuildOffsetStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildOffsetString2"));
  function_pointers_.BuildRangeSpurString = reinterpret_cast<BuildRangeSpurStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildRangeSpurString"));
  function_pointers_.BuildRangeString = reinterpret_cast<BuildRangeStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildRangeString2"));
  function_pointers_.BuildSegmentString = reinterpret_cast<BuildSegmentStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildSegmentString"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildSignalString"));
  function_pointers_.BuildSpurString = reinterpret_cast<BuildSpurStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_BuildSpurString2"));
  function_pointers_.CCDFCfgMeasurementInterval = reinterpret_cast<CCDFCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFCfgMeasurementInterval"));
  function_pointers_.CCDFCfgNumberOfRecords = reinterpret_cast<CCDFCfgNumberOfRecordsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFCfgNumberOfRecords"));
  function_pointers_.CCDFCfgRBWFilter = reinterpret_cast<CCDFCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFCfgRBWFilter"));
  function_pointers_.CCDFCfgThreshold = reinterpret_cast<CCDFCfgThresholdPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFCfgThreshold"));
  function_pointers_.CCDFFetchBasicPowerProbabilities = reinterpret_cast<CCDFFetchBasicPowerProbabilitiesPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFFetchBasicPowerProbabilities"));
  function_pointers_.CCDFFetchGaussianProbabilitiesTrace = reinterpret_cast<CCDFFetchGaussianProbabilitiesTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFFetchGaussianProbabilitiesTrace"));
  function_pointers_.CCDFFetchPower = reinterpret_cast<CCDFFetchPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFFetchPower"));
  function_pointers_.CCDFFetchProbabilitiesTrace = reinterpret_cast<CCDFFetchProbabilitiesTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFFetchProbabilitiesTrace"));
  function_pointers_.CCDFRead = reinterpret_cast<CCDFReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CCDFRead"));
  function_pointers_.CHPCfgAveraging = reinterpret_cast<CHPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgAveraging"));
  function_pointers_.CHPCfgCarrierOffset = reinterpret_cast<CHPCfgCarrierOffsetPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgCarrierOffset"));
  function_pointers_.CHPCfgFFT = reinterpret_cast<CHPCfgFFTPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgFFT"));
  function_pointers_.CHPCfgIntegrationBandwidth = reinterpret_cast<CHPCfgIntegrationBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgIntegrationBandwidth"));
  function_pointers_.CHPCfgNumberOfCarriers = reinterpret_cast<CHPCfgNumberOfCarriersPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgNumberOfCarriers"));
  function_pointers_.CHPCfgRBWFilter = reinterpret_cast<CHPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgRBWFilter"));
  function_pointers_.CHPCfgRRCFilter = reinterpret_cast<CHPCfgRRCFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgRRCFilter"));
  function_pointers_.CHPCfgSpan = reinterpret_cast<CHPCfgSpanPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgSpan"));
  function_pointers_.CHPCfgSweepTime = reinterpret_cast<CHPCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPCfgSweepTime"));
  function_pointers_.CHPFetchCarrierMeasurement = reinterpret_cast<CHPFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPFetchCarrierMeasurement"));
  function_pointers_.CHPFetchSpectrum = reinterpret_cast<CHPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPFetchSpectrum"));
  function_pointers_.CHPFetchTotalCarrierPower = reinterpret_cast<CHPFetchTotalCarrierPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPFetchTotalCarrierPower"));
  function_pointers_.CHPRead = reinterpret_cast<CHPReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPRead"));
  function_pointers_.CHPValidateNoiseCalibrationData = reinterpret_cast<CHPValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CHPValidateNoiseCalibrationData"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgFrequency"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgMechanicalAttenuation"));
  function_pointers_.CfgRF = reinterpret_cast<CfgRFPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgRF"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgReferenceLevel"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CfgSoftwareEdgeTrigger"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ClearNamedResult"));
  function_pointers_.ClearNoiseCalibrationDatabase = reinterpret_cast<ClearNoiseCalibrationDatabasePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ClearNoiseCalibrationDatabase"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("RFmxSpecAn_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_Commit"));
  function_pointers_.CreateList = reinterpret_cast<CreateListPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CreateList"));
  function_pointers_.CreateListStep = reinterpret_cast<CreateListStepPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CreateListStep"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_CreateSignalConfiguration"));
  function_pointers_.DPDApplyDigitalPredistortion = reinterpret_cast<DPDApplyDigitalPredistortionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDApplyDigitalPredistortion"));
  function_pointers_.DPDApplyPreDPDSignalConditioning = reinterpret_cast<DPDApplyPreDPDSignalConditioningPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDApplyPreDPDSignalConditioning"));
  function_pointers_.DPDCfgApplyDPDConfigurationInput = reinterpret_cast<DPDCfgApplyDPDConfigurationInputPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgApplyDPDConfigurationInput"));
  function_pointers_.DPDCfgApplyDPDLookupTableCorrectionType = reinterpret_cast<DPDCfgApplyDPDLookupTableCorrectionTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgApplyDPDLookupTableCorrectionType"));
  function_pointers_.DPDCfgApplyDPDMemoryModelCorrectionType = reinterpret_cast<DPDCfgApplyDPDMemoryModelCorrectionTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgApplyDPDMemoryModelCorrectionType"));
  function_pointers_.DPDCfgApplyDPDUserDPDPolynomial = reinterpret_cast<DPDCfgApplyDPDUserDPDPolynomialPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgApplyDPDUserDPDPolynomial"));
  function_pointers_.DPDCfgApplyDPDUserLookupTable = reinterpret_cast<DPDCfgApplyDPDUserLookupTablePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgApplyDPDUserLookupTable"));
  function_pointers_.DPDCfgAveraging = reinterpret_cast<DPDCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgAveraging"));
  function_pointers_.DPDCfgDPDModel = reinterpret_cast<DPDCfgDPDModelPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgDPDModel"));
  function_pointers_.DPDCfgDUTAverageInputPower = reinterpret_cast<DPDCfgDUTAverageInputPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgDUTAverageInputPower"));
  function_pointers_.DPDCfgGeneralizedMemoryPolynomialCrossTerms = reinterpret_cast<DPDCfgGeneralizedMemoryPolynomialCrossTermsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgGeneralizedMemoryPolynomialCrossTerms"));
  function_pointers_.DPDCfgIterativeDPDEnabled = reinterpret_cast<DPDCfgIterativeDPDEnabledPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgIterativeDPDEnabled"));
  function_pointers_.DPDCfgLookupTableAMToAMCurveFit = reinterpret_cast<DPDCfgLookupTableAMToAMCurveFitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgLookupTableAMToAMCurveFit"));
  function_pointers_.DPDCfgLookupTableAMToPMCurveFit = reinterpret_cast<DPDCfgLookupTableAMToPMCurveFitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgLookupTableAMToPMCurveFit"));
  function_pointers_.DPDCfgLookupTableStepSize = reinterpret_cast<DPDCfgLookupTableStepSizePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgLookupTableStepSize"));
  function_pointers_.DPDCfgLookupTableThreshold = reinterpret_cast<DPDCfgLookupTableThresholdPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgLookupTableThreshold"));
  function_pointers_.DPDCfgLookupTableType = reinterpret_cast<DPDCfgLookupTableTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgLookupTableType"));
  function_pointers_.DPDCfgMeasurementInterval = reinterpret_cast<DPDCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgMeasurementInterval"));
  function_pointers_.DPDCfgMeasurementSampleRate = reinterpret_cast<DPDCfgMeasurementSampleRatePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgMeasurementSampleRate"));
  function_pointers_.DPDCfgMemoryPolynomial = reinterpret_cast<DPDCfgMemoryPolynomialPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgMemoryPolynomial"));
  function_pointers_.DPDCfgPreviousDPDPolynomial = reinterpret_cast<DPDCfgPreviousDPDPolynomialPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgPreviousDPDPolynomial"));
  function_pointers_.DPDCfgReferenceWaveform = reinterpret_cast<DPDCfgReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgReferenceWaveform"));
  function_pointers_.DPDCfgSynchronizationMethod = reinterpret_cast<DPDCfgSynchronizationMethodPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDCfgSynchronizationMethod"));
  function_pointers_.DPDFetchApplyDPDPreCFRPAPR = reinterpret_cast<DPDFetchApplyDPDPreCFRPAPRPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchApplyDPDPreCFRPAPR"));
  function_pointers_.DPDFetchAverageGain = reinterpret_cast<DPDFetchAverageGainPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchAverageGain"));
  function_pointers_.DPDFetchDPDPolynomial = reinterpret_cast<DPDFetchDPDPolynomialPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchDPDPolynomial"));
  function_pointers_.DPDFetchLookupTable = reinterpret_cast<DPDFetchLookupTablePtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchLookupTable"));
  function_pointers_.DPDFetchNMSE = reinterpret_cast<DPDFetchNMSEPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchNMSE"));
  function_pointers_.DPDFetchProcessedMeanAcquiredWaveform = reinterpret_cast<DPDFetchProcessedMeanAcquiredWaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchProcessedMeanAcquiredWaveform"));
  function_pointers_.DPDFetchProcessedReferenceWaveform = reinterpret_cast<DPDFetchProcessedReferenceWaveformPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DPDFetchProcessedReferenceWaveform"));
  function_pointers_.DeleteList = reinterpret_cast<DeleteListPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DeleteList"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_DisableTrigger"));
  function_pointers_.FCntCfgAveraging = reinterpret_cast<FCntCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntCfgAveraging"));
  function_pointers_.FCntCfgMeasurementInterval = reinterpret_cast<FCntCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntCfgMeasurementInterval"));
  function_pointers_.FCntCfgRBWFilter = reinterpret_cast<FCntCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntCfgRBWFilter"));
  function_pointers_.FCntCfgThreshold = reinterpret_cast<FCntCfgThresholdPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntCfgThreshold"));
  function_pointers_.FCntFetchAllanDeviation = reinterpret_cast<FCntFetchAllanDeviationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntFetchAllanDeviation"));
  function_pointers_.FCntFetchFrequencyTrace = reinterpret_cast<FCntFetchFrequencyTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntFetchFrequencyTrace"));
  function_pointers_.FCntFetchMeasurement = reinterpret_cast<FCntFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntFetchMeasurement"));
  function_pointers_.FCntFetchPhaseTrace = reinterpret_cast<FCntFetchPhaseTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntFetchPhaseTrace"));
  function_pointers_.FCntFetchPowerTrace = reinterpret_cast<FCntFetchPowerTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntFetchPowerTrace"));
  function_pointers_.FCntRead = reinterpret_cast<FCntReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_FCntRead"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_GetErrorString"));
  function_pointers_.HarmCfgAutoHarmonics = reinterpret_cast<HarmCfgAutoHarmonicsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgAutoHarmonics"));
  function_pointers_.HarmCfgAveraging = reinterpret_cast<HarmCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgAveraging"));
  function_pointers_.HarmCfgFundamentalMeasurementInterval = reinterpret_cast<HarmCfgFundamentalMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgFundamentalMeasurementInterval"));
  function_pointers_.HarmCfgFundamentalRBW = reinterpret_cast<HarmCfgFundamentalRBWPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgFundamentalRBW"));
  function_pointers_.HarmCfgHarmonic = reinterpret_cast<HarmCfgHarmonicPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgHarmonic"));
  function_pointers_.HarmCfgHarmonicArray = reinterpret_cast<HarmCfgHarmonicArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgHarmonicArray"));
  function_pointers_.HarmCfgNumberOfHarmonics = reinterpret_cast<HarmCfgNumberOfHarmonicsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmCfgNumberOfHarmonics"));
  function_pointers_.HarmFetchHarmonicMeasurement = reinterpret_cast<HarmFetchHarmonicMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmFetchHarmonicMeasurement"));
  function_pointers_.HarmFetchHarmonicMeasurementArray = reinterpret_cast<HarmFetchHarmonicMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmFetchHarmonicMeasurementArray"));
  function_pointers_.HarmFetchHarmonicPowerTrace = reinterpret_cast<HarmFetchHarmonicPowerTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmFetchHarmonicPowerTrace"));
  function_pointers_.HarmFetchTHD = reinterpret_cast<HarmFetchTHDPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmFetchTHD"));
  function_pointers_.HarmRead = reinterpret_cast<HarmReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_HarmRead"));
  function_pointers_.IMCfgAutoIntermodsSetup = reinterpret_cast<IMCfgAutoIntermodsSetupPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgAutoIntermodsSetup"));
  function_pointers_.IMCfgAveraging = reinterpret_cast<IMCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgAveraging"));
  function_pointers_.IMCfgFFT = reinterpret_cast<IMCfgFFTPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgFFT"));
  function_pointers_.IMCfgFrequencyDefinition = reinterpret_cast<IMCfgFrequencyDefinitionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgFrequencyDefinition"));
  function_pointers_.IMCfgFundamentalTones = reinterpret_cast<IMCfgFundamentalTonesPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgFundamentalTones"));
  function_pointers_.IMCfgIntermod = reinterpret_cast<IMCfgIntermodPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgIntermod"));
  function_pointers_.IMCfgIntermodArray = reinterpret_cast<IMCfgIntermodArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgIntermodArray"));
  function_pointers_.IMCfgMeasurementMethod = reinterpret_cast<IMCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgMeasurementMethod"));
  function_pointers_.IMCfgNumberOfIntermods = reinterpret_cast<IMCfgNumberOfIntermodsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgNumberOfIntermods"));
  function_pointers_.IMCfgRBWFilter = reinterpret_cast<IMCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgRBWFilter"));
  function_pointers_.IMCfgSweepTime = reinterpret_cast<IMCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMCfgSweepTime"));
  function_pointers_.IMFetchFundamentalMeasurement = reinterpret_cast<IMFetchFundamentalMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMFetchFundamentalMeasurement"));
  function_pointers_.IMFetchInterceptPower = reinterpret_cast<IMFetchInterceptPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMFetchInterceptPower"));
  function_pointers_.IMFetchInterceptPowerArray = reinterpret_cast<IMFetchInterceptPowerArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMFetchInterceptPowerArray"));
  function_pointers_.IMFetchIntermodMeasurement = reinterpret_cast<IMFetchIntermodMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMFetchIntermodMeasurement"));
  function_pointers_.IMFetchIntermodMeasurementArray = reinterpret_cast<IMFetchIntermodMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMFetchIntermodMeasurementArray"));
  function_pointers_.IMFetchSpectrum = reinterpret_cast<IMFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IMFetchSpectrum"));
  function_pointers_.IQCfgAcquisition = reinterpret_cast<IQCfgAcquisitionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IQCfgAcquisition"));
  function_pointers_.IQCfgBandwidth = reinterpret_cast<IQCfgBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IQCfgBandwidth"));
  function_pointers_.IQFetchData = reinterpret_cast<IQFetchDataPtr>(shared_library_.get_function_pointer("RFmxSpecAn_IQFetchData"));
  function_pointers_.IQGetRecordsDone = reinterpret_cast<IQGetRecordsDonePtr>(shared_library_.get_function_pointer("RFmxSpecAn_IQGetRecordsDone"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("RFmxSpecAn_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("RFmxSpecAn_Initiate"));
  function_pointers_.MarkerCfgNumberOfMarkers = reinterpret_cast<MarkerCfgNumberOfMarkersPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgNumberOfMarkers"));
  function_pointers_.MarkerCfgPeakExcursion = reinterpret_cast<MarkerCfgPeakExcursionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgPeakExcursion"));
  function_pointers_.MarkerCfgReferenceMarker = reinterpret_cast<MarkerCfgReferenceMarkerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgReferenceMarker"));
  function_pointers_.MarkerCfgThreshold = reinterpret_cast<MarkerCfgThresholdPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgThreshold"));
  function_pointers_.MarkerCfgTrace = reinterpret_cast<MarkerCfgTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgTrace"));
  function_pointers_.MarkerCfgType = reinterpret_cast<MarkerCfgTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgType"));
  function_pointers_.MarkerCfgXLocation = reinterpret_cast<MarkerCfgXLocationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerCfgXLocation"));
  function_pointers_.MarkerFetchXY = reinterpret_cast<MarkerFetchXYPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerFetchXY"));
  function_pointers_.MarkerNextPeak = reinterpret_cast<MarkerNextPeakPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerNextPeak"));
  function_pointers_.MarkerPeakSearch = reinterpret_cast<MarkerPeakSearchPtr>(shared_library_.get_function_pointer("RFmxSpecAn_MarkerPeakSearch"));
  function_pointers_.NFCfgAveraging = reinterpret_cast<NFCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgAveraging"));
  function_pointers_.NFCfgCalibrationLoss = reinterpret_cast<NFCfgCalibrationLossPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgCalibrationLoss"));
  function_pointers_.NFCfgColdSourceDUTSParameters = reinterpret_cast<NFCfgColdSourceDUTSParametersPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgColdSourceDUTSParameters"));
  function_pointers_.NFCfgColdSourceInputTermination = reinterpret_cast<NFCfgColdSourceInputTerminationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgColdSourceInputTermination"));
  function_pointers_.NFCfgColdSourceMode = reinterpret_cast<NFCfgColdSourceModePtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgColdSourceMode"));
  function_pointers_.NFCfgDUTInputLoss = reinterpret_cast<NFCfgDUTInputLossPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgDUTInputLoss"));
  function_pointers_.NFCfgDUTOutputLoss = reinterpret_cast<NFCfgDUTOutputLossPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgDUTOutputLoss"));
  function_pointers_.NFCfgFrequencyList = reinterpret_cast<NFCfgFrequencyListPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgFrequencyList"));
  function_pointers_.NFCfgFrequencyListStartStopPoints = reinterpret_cast<NFCfgFrequencyListStartStopPointsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgFrequencyList_StartStopPoints"));
  function_pointers_.NFCfgFrequencyListStartStopStep = reinterpret_cast<NFCfgFrequencyListStartStopStepPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgFrequencyList_StartStopStep"));
  function_pointers_.NFCfgMeasurementBandwidth = reinterpret_cast<NFCfgMeasurementBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgMeasurementBandwidth"));
  function_pointers_.NFCfgMeasurementInterval = reinterpret_cast<NFCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgMeasurementInterval"));
  function_pointers_.NFCfgMeasurementMethod = reinterpret_cast<NFCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgMeasurementMethod"));
  function_pointers_.NFCfgYFactorMode = reinterpret_cast<NFCfgYFactorModePtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgYFactorMode"));
  function_pointers_.NFCfgYFactorNoiseSourceENR = reinterpret_cast<NFCfgYFactorNoiseSourceENRPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgYFactorNoiseSourceENR"));
  function_pointers_.NFCfgYFactorNoiseSourceLoss = reinterpret_cast<NFCfgYFactorNoiseSourceLossPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgYFactorNoiseSourceLoss"));
  function_pointers_.NFCfgYFactorNoiseSourceSettlingTime = reinterpret_cast<NFCfgYFactorNoiseSourceSettlingTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFCfgYFactorNoiseSourceSettlingTime"));
  function_pointers_.NFClearCalibrationDatabase = reinterpret_cast<NFClearCalibrationDatabasePtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFClearCalibrationDatabase"));
  function_pointers_.NFFetchAnalyzerNoiseFigure = reinterpret_cast<NFFetchAnalyzerNoiseFigurePtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFFetchAnalyzerNoiseFigure"));
  function_pointers_.NFFetchColdSourcePower = reinterpret_cast<NFFetchColdSourcePowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFFetchColdSourcePower"));
  function_pointers_.NFFetchDUTNoiseFigureAndGain = reinterpret_cast<NFFetchDUTNoiseFigureAndGainPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFFetchDUTNoiseFigureAndGain"));
  function_pointers_.NFFetchYFactorPowers = reinterpret_cast<NFFetchYFactorPowersPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFFetchYFactorPowers"));
  function_pointers_.NFFetchYFactors = reinterpret_cast<NFFetchYFactorsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFFetchYFactors"));
  function_pointers_.NFRecommendReferenceLevel = reinterpret_cast<NFRecommendReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFRecommendReferenceLevel"));
  function_pointers_.NFValidateCalibrationData = reinterpret_cast<NFValidateCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxSpecAn_NFValidateCalibrationData"));
  function_pointers_.OBWCfgAveraging = reinterpret_cast<OBWCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgAveraging"));
  function_pointers_.OBWCfgBandwidthPercentage = reinterpret_cast<OBWCfgBandwidthPercentagePtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgBandwidthPercentage"));
  function_pointers_.OBWCfgFFT = reinterpret_cast<OBWCfgFFTPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgFFT"));
  function_pointers_.OBWCfgPowerUnits = reinterpret_cast<OBWCfgPowerUnitsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgPowerUnits"));
  function_pointers_.OBWCfgRBWFilter = reinterpret_cast<OBWCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgRBWFilter"));
  function_pointers_.OBWCfgSpan = reinterpret_cast<OBWCfgSpanPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgSpan"));
  function_pointers_.OBWCfgSweepTime = reinterpret_cast<OBWCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWCfgSweepTime"));
  function_pointers_.OBWFetchMeasurement = reinterpret_cast<OBWFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWFetchMeasurement"));
  function_pointers_.OBWFetchSpectrumTrace = reinterpret_cast<OBWFetchSpectrumTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWFetchSpectrumTrace"));
  function_pointers_.OBWRead = reinterpret_cast<OBWReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_OBWRead"));
  function_pointers_.PAVTCfgMeasurementBandwidth = reinterpret_cast<PAVTCfgMeasurementBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgMeasurementBandwidth"));
  function_pointers_.PAVTCfgMeasurementInterval = reinterpret_cast<PAVTCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgMeasurementInterval"));
  function_pointers_.PAVTCfgMeasurementIntervalMode = reinterpret_cast<PAVTCfgMeasurementIntervalModePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgMeasurementIntervalMode"));
  function_pointers_.PAVTCfgMeasurementLocationType = reinterpret_cast<PAVTCfgMeasurementLocationTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgMeasurementLocationType"));
  function_pointers_.PAVTCfgNumberOfSegments = reinterpret_cast<PAVTCfgNumberOfSegmentsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgNumberOfSegments"));
  function_pointers_.PAVTCfgSegmentMeasurementInterval = reinterpret_cast<PAVTCfgSegmentMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgSegmentMeasurementInterval"));
  function_pointers_.PAVTCfgSegmentMeasurementIntervalArray = reinterpret_cast<PAVTCfgSegmentMeasurementIntervalArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgSegmentMeasurementIntervalArray"));
  function_pointers_.PAVTCfgSegmentStartTimeList = reinterpret_cast<PAVTCfgSegmentStartTimeListPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgSegmentStartTimeList"));
  function_pointers_.PAVTCfgSegmentStartTimeStep = reinterpret_cast<PAVTCfgSegmentStartTimeStepPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgSegmentStartTimeStep"));
  function_pointers_.PAVTCfgSegmentType = reinterpret_cast<PAVTCfgSegmentTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgSegmentType"));
  function_pointers_.PAVTCfgSegmentTypeArray = reinterpret_cast<PAVTCfgSegmentTypeArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTCfgSegmentTypeArray"));
  function_pointers_.PAVTFetchAmplitudeTrace = reinterpret_cast<PAVTFetchAmplitudeTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTFetchAmplitudeTrace"));
  function_pointers_.PAVTFetchPhaseAndAmplitude = reinterpret_cast<PAVTFetchPhaseAndAmplitudePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTFetchPhaseAndAmplitude"));
  function_pointers_.PAVTFetchPhaseAndAmplitudeArray = reinterpret_cast<PAVTFetchPhaseAndAmplitudeArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTFetchPhaseAndAmplitudeArray"));
  function_pointers_.PAVTFetchPhaseTrace = reinterpret_cast<PAVTFetchPhaseTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PAVTFetchPhaseTrace"));
  function_pointers_.PhaseNoiseCfgAutoRange = reinterpret_cast<PhaseNoiseCfgAutoRangePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgAutoRange"));
  function_pointers_.PhaseNoiseCfgAveragingMultiplier = reinterpret_cast<PhaseNoiseCfgAveragingMultiplierPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgAveragingMultiplier"));
  function_pointers_.PhaseNoiseCfgCancellation = reinterpret_cast<PhaseNoiseCfgCancellationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgCancellation"));
  function_pointers_.PhaseNoiseCfgIntegratedNoise = reinterpret_cast<PhaseNoiseCfgIntegratedNoisePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgIntegratedNoise"));
  function_pointers_.PhaseNoiseCfgNumberOfRanges = reinterpret_cast<PhaseNoiseCfgNumberOfRangesPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgNumberOfRanges"));
  function_pointers_.PhaseNoiseCfgRangeArray = reinterpret_cast<PhaseNoiseCfgRangeArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgRangeArray"));
  function_pointers_.PhaseNoiseCfgRangeDefinition = reinterpret_cast<PhaseNoiseCfgRangeDefinitionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgRangeDefinition"));
  function_pointers_.PhaseNoiseCfgSmoothing = reinterpret_cast<PhaseNoiseCfgSmoothingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgSmoothing"));
  function_pointers_.PhaseNoiseCfgSpotNoiseFrequencyList = reinterpret_cast<PhaseNoiseCfgSpotNoiseFrequencyListPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgSpotNoiseFrequencyList"));
  function_pointers_.PhaseNoiseCfgSpurRemoval = reinterpret_cast<PhaseNoiseCfgSpurRemovalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseCfgSpurRemoval"));
  function_pointers_.PhaseNoiseFetchCarrierMeasurement = reinterpret_cast<PhaseNoiseFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseFetchCarrierMeasurement"));
  function_pointers_.PhaseNoiseFetchIntegratedNoise = reinterpret_cast<PhaseNoiseFetchIntegratedNoisePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseFetchIntegratedNoise"));
  function_pointers_.PhaseNoiseFetchMeasuredLogPlotTrace = reinterpret_cast<PhaseNoiseFetchMeasuredLogPlotTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseFetchMeasuredLogPlotTrace"));
  function_pointers_.PhaseNoiseFetchSmoothedLogPlotTrace = reinterpret_cast<PhaseNoiseFetchSmoothedLogPlotTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseFetchSmoothedLogPlotTrace"));
  function_pointers_.PhaseNoiseFetchSpotNoise = reinterpret_cast<PhaseNoiseFetchSpotNoisePtr>(shared_library_.get_function_pointer("RFmxSpecAn_PhaseNoiseFetchSpotNoise"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("RFmxSpecAn_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_.get_function_pointer("RFmxSpecAn_ResetToDefault"));
  function_pointers_.SEMCfgAveraging = reinterpret_cast<SEMCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgAveraging"));
  function_pointers_.SEMCfgCarrierChannelBandwidth = reinterpret_cast<SEMCfgCarrierChannelBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgCarrierChannelBandwidth"));
  function_pointers_.SEMCfgCarrierEnabled = reinterpret_cast<SEMCfgCarrierEnabledPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgCarrierEnabled"));
  function_pointers_.SEMCfgCarrierFrequency = reinterpret_cast<SEMCfgCarrierFrequencyPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgCarrierFrequency"));
  function_pointers_.SEMCfgCarrierIntegrationBandwidth = reinterpret_cast<SEMCfgCarrierIntegrationBandwidthPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgCarrierIntegrationBandwidth"));
  function_pointers_.SEMCfgCarrierRBWFilter = reinterpret_cast<SEMCfgCarrierRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgCarrierRBWFilter"));
  function_pointers_.SEMCfgCarrierRRCFilter = reinterpret_cast<SEMCfgCarrierRRCFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgCarrierRRCFilter"));
  function_pointers_.SEMCfgFFT = reinterpret_cast<SEMCfgFFTPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgFFT"));
  function_pointers_.SEMCfgNumberOfCarriers = reinterpret_cast<SEMCfgNumberOfCarriersPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgNumberOfCarriers"));
  function_pointers_.SEMCfgNumberOfOffsets = reinterpret_cast<SEMCfgNumberOfOffsetsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgNumberOfOffsets"));
  function_pointers_.SEMCfgOffsetAbsoluteLimit = reinterpret_cast<SEMCfgOffsetAbsoluteLimitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetAbsoluteLimit"));
  function_pointers_.SEMCfgOffsetAbsoluteLimitArray = reinterpret_cast<SEMCfgOffsetAbsoluteLimitArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetAbsoluteLimitArray"));
  function_pointers_.SEMCfgOffsetBandwidthIntegral = reinterpret_cast<SEMCfgOffsetBandwidthIntegralPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetBandwidthIntegral"));
  function_pointers_.SEMCfgOffsetFrequency = reinterpret_cast<SEMCfgOffsetFrequencyPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetFrequency"));
  function_pointers_.SEMCfgOffsetFrequencyArray = reinterpret_cast<SEMCfgOffsetFrequencyArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetFrequencyArray"));
  function_pointers_.SEMCfgOffsetFrequencyDefinition = reinterpret_cast<SEMCfgOffsetFrequencyDefinitionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetFrequencyDefinition"));
  function_pointers_.SEMCfgOffsetLimitFailMask = reinterpret_cast<SEMCfgOffsetLimitFailMaskPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetLimitFailMask"));
  function_pointers_.SEMCfgOffsetRBWFilter = reinterpret_cast<SEMCfgOffsetRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetRBWFilter"));
  function_pointers_.SEMCfgOffsetRBWFilterArray = reinterpret_cast<SEMCfgOffsetRBWFilterArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetRBWFilterArray"));
  function_pointers_.SEMCfgOffsetRelativeAttenuation = reinterpret_cast<SEMCfgOffsetRelativeAttenuationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetRelativeAttenuation"));
  function_pointers_.SEMCfgOffsetRelativeAttenuationArray = reinterpret_cast<SEMCfgOffsetRelativeAttenuationArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetRelativeAttenuationArray"));
  function_pointers_.SEMCfgOffsetRelativeLimit = reinterpret_cast<SEMCfgOffsetRelativeLimitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetRelativeLimit"));
  function_pointers_.SEMCfgOffsetRelativeLimitArray = reinterpret_cast<SEMCfgOffsetRelativeLimitArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgOffsetRelativeLimitArray"));
  function_pointers_.SEMCfgPowerUnits = reinterpret_cast<SEMCfgPowerUnitsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgPowerUnits"));
  function_pointers_.SEMCfgReferenceType = reinterpret_cast<SEMCfgReferenceTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgReferenceType"));
  function_pointers_.SEMCfgSweepTime = reinterpret_cast<SEMCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMCfgSweepTime"));
  function_pointers_.SEMFetchAbsoluteMaskTrace = reinterpret_cast<SEMFetchAbsoluteMaskTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchAbsoluteMaskTrace"));
  function_pointers_.SEMFetchCarrierMeasurement = reinterpret_cast<SEMFetchCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchCarrierMeasurement"));
  function_pointers_.SEMFetchCompositeMeasurementStatus = reinterpret_cast<SEMFetchCompositeMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchCompositeMeasurementStatus"));
  function_pointers_.SEMFetchFrequencyResolution = reinterpret_cast<SEMFetchFrequencyResolutionPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchFrequencyResolution"));
  function_pointers_.SEMFetchLowerOffsetMargin = reinterpret_cast<SEMFetchLowerOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchLowerOffsetMargin"));
  function_pointers_.SEMFetchLowerOffsetMarginArray = reinterpret_cast<SEMFetchLowerOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchLowerOffsetMarginArray"));
  function_pointers_.SEMFetchLowerOffsetPower = reinterpret_cast<SEMFetchLowerOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchLowerOffsetPower"));
  function_pointers_.SEMFetchLowerOffsetPowerArray = reinterpret_cast<SEMFetchLowerOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchLowerOffsetPowerArray"));
  function_pointers_.SEMFetchRelativeMaskTrace = reinterpret_cast<SEMFetchRelativeMaskTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchRelativeMaskTrace"));
  function_pointers_.SEMFetchSpectrum = reinterpret_cast<SEMFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchSpectrum"));
  function_pointers_.SEMFetchTotalCarrierPower = reinterpret_cast<SEMFetchTotalCarrierPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchTotalCarrierPower"));
  function_pointers_.SEMFetchUpperOffsetMargin = reinterpret_cast<SEMFetchUpperOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchUpperOffsetMargin"));
  function_pointers_.SEMFetchUpperOffsetMarginArray = reinterpret_cast<SEMFetchUpperOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchUpperOffsetMarginArray"));
  function_pointers_.SEMFetchUpperOffsetPower = reinterpret_cast<SEMFetchUpperOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchUpperOffsetPower"));
  function_pointers_.SEMFetchUpperOffsetPowerArray = reinterpret_cast<SEMFetchUpperOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SEMFetchUpperOffsetPowerArray"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SetAttributeU8Array"));
  function_pointers_.SpectrumCfgAveraging = reinterpret_cast<SpectrumCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgAveraging"));
  function_pointers_.SpectrumCfgDetector = reinterpret_cast<SpectrumCfgDetectorPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgDetector"));
  function_pointers_.SpectrumCfgFFT = reinterpret_cast<SpectrumCfgFFTPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgFFT"));
  function_pointers_.SpectrumCfgFrequencyStartStop = reinterpret_cast<SpectrumCfgFrequencyStartStopPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgFrequencyStartStop"));
  function_pointers_.SpectrumCfgNoiseCompensationEnabled = reinterpret_cast<SpectrumCfgNoiseCompensationEnabledPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgNoiseCompensationEnabled"));
  function_pointers_.SpectrumCfgPowerUnits = reinterpret_cast<SpectrumCfgPowerUnitsPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgPowerUnits"));
  function_pointers_.SpectrumCfgRBWFilter = reinterpret_cast<SpectrumCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgRBWFilter"));
  function_pointers_.SpectrumCfgSpan = reinterpret_cast<SpectrumCfgSpanPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgSpan"));
  function_pointers_.SpectrumCfgSweepTime = reinterpret_cast<SpectrumCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgSweepTime"));
  function_pointers_.SpectrumCfgVBWFilter = reinterpret_cast<SpectrumCfgVBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumCfgVBWFilter"));
  function_pointers_.SpectrumFetchMeasurement = reinterpret_cast<SpectrumFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumFetchMeasurement"));
  function_pointers_.SpectrumFetchPowerTrace = reinterpret_cast<SpectrumFetchPowerTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumFetchPowerTrace"));
  function_pointers_.SpectrumFetchSpectrum = reinterpret_cast<SpectrumFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumFetchSpectrum"));
  function_pointers_.SpectrumRead = reinterpret_cast<SpectrumReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumRead"));
  function_pointers_.SpectrumValidateNoiseCalibrationData = reinterpret_cast<SpectrumValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpectrumValidateNoiseCalibrationData"));
  function_pointers_.SpurCfgAveraging = reinterpret_cast<SpurCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgAveraging"));
  function_pointers_.SpurCfgFFTWindowType = reinterpret_cast<SpurCfgFFTWindowTypePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgFFTWindowType"));
  function_pointers_.SpurCfgNumberOfRanges = reinterpret_cast<SpurCfgNumberOfRangesPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgNumberOfRanges"));
  function_pointers_.SpurCfgRangeAbsoluteLimit = reinterpret_cast<SpurCfgRangeAbsoluteLimitPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeAbsoluteLimit"));
  function_pointers_.SpurCfgRangeAbsoluteLimitArray = reinterpret_cast<SpurCfgRangeAbsoluteLimitArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeAbsoluteLimitArray"));
  function_pointers_.SpurCfgRangeDetector = reinterpret_cast<SpurCfgRangeDetectorPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeDetector"));
  function_pointers_.SpurCfgRangeDetectorArray = reinterpret_cast<SpurCfgRangeDetectorArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeDetectorArray"));
  function_pointers_.SpurCfgRangeFrequency = reinterpret_cast<SpurCfgRangeFrequencyPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeFrequency"));
  function_pointers_.SpurCfgRangeFrequencyArray = reinterpret_cast<SpurCfgRangeFrequencyArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeFrequencyArray"));
  function_pointers_.SpurCfgRangeNumberOfSpursToReport = reinterpret_cast<SpurCfgRangeNumberOfSpursToReportPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeNumberOfSpursToReport"));
  function_pointers_.SpurCfgRangeNumberOfSpursToReportArray = reinterpret_cast<SpurCfgRangeNumberOfSpursToReportArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeNumberOfSpursToReportArray"));
  function_pointers_.SpurCfgRangePeakCriteria = reinterpret_cast<SpurCfgRangePeakCriteriaPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangePeakCriteria"));
  function_pointers_.SpurCfgRangePeakCriteriaArray = reinterpret_cast<SpurCfgRangePeakCriteriaArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangePeakCriteriaArray"));
  function_pointers_.SpurCfgRangeRBWArray = reinterpret_cast<SpurCfgRangeRBWArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeRBWArray"));
  function_pointers_.SpurCfgRangeRBWFilter = reinterpret_cast<SpurCfgRangeRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeRBWFilter"));
  function_pointers_.SpurCfgRangeRelativeAttenuation = reinterpret_cast<SpurCfgRangeRelativeAttenuationPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeRelativeAttenuation"));
  function_pointers_.SpurCfgRangeRelativeAttenuationArray = reinterpret_cast<SpurCfgRangeRelativeAttenuationArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeRelativeAttenuationArray"));
  function_pointers_.SpurCfgRangeSweepTime = reinterpret_cast<SpurCfgRangeSweepTimePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeSweepTime"));
  function_pointers_.SpurCfgRangeSweepTimeArray = reinterpret_cast<SpurCfgRangeSweepTimeArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeSweepTimeArray"));
  function_pointers_.SpurCfgRangeVBWFilter = reinterpret_cast<SpurCfgRangeVBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeVBWFilter"));
  function_pointers_.SpurCfgRangeVBWFilterArray = reinterpret_cast<SpurCfgRangeVBWFilterArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgRangeVBWFilterArray"));
  function_pointers_.SpurCfgTraceRangeIndex = reinterpret_cast<SpurCfgTraceRangeIndexPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurCfgTraceRangeIndex"));
  function_pointers_.SpurFetchAllSpurs = reinterpret_cast<SpurFetchAllSpursPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchAllSpurs"));
  function_pointers_.SpurFetchMeasurementStatus = reinterpret_cast<SpurFetchMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchMeasurementStatus"));
  function_pointers_.SpurFetchRangeAbsoluteLimitTrace = reinterpret_cast<SpurFetchRangeAbsoluteLimitTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchRangeAbsoluteLimitTrace"));
  function_pointers_.SpurFetchRangeSpectrumTrace = reinterpret_cast<SpurFetchRangeSpectrumTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchRangeSpectrumTrace"));
  function_pointers_.SpurFetchRangeStatus = reinterpret_cast<SpurFetchRangeStatusPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchRangeStatus"));
  function_pointers_.SpurFetchRangeStatusArray = reinterpret_cast<SpurFetchRangeStatusArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchRangeStatusArray"));
  function_pointers_.SpurFetchSpurMeasurement = reinterpret_cast<SpurFetchSpurMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchSpurMeasurement"));
  function_pointers_.SpurFetchSpurMeasurementArray = reinterpret_cast<SpurFetchSpurMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxSpecAn_SpurFetchSpurMeasurementArray"));
  function_pointers_.TXPCfgAveraging = reinterpret_cast<TXPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPCfgAveraging"));
  function_pointers_.TXPCfgMeasurementInterval = reinterpret_cast<TXPCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPCfgMeasurementInterval"));
  function_pointers_.TXPCfgRBWFilter = reinterpret_cast<TXPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPCfgRBWFilter"));
  function_pointers_.TXPCfgThreshold = reinterpret_cast<TXPCfgThresholdPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPCfgThreshold"));
  function_pointers_.TXPCfgVBWFilter = reinterpret_cast<TXPCfgVBWFilterPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPCfgVBWFilter"));
  function_pointers_.TXPFetchMeasurement = reinterpret_cast<TXPFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPFetchMeasurement"));
  function_pointers_.TXPFetchPowerTrace = reinterpret_cast<TXPFetchPowerTracePtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPFetchPowerTrace"));
  function_pointers_.TXPRead = reinterpret_cast<TXPReadPtr>(shared_library_.get_function_pointer("RFmxSpecAn_TXPRead"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_.get_function_pointer("RFmxSpecAn_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_.get_function_pointer("RFmxSpecAn_WaitForMeasurementComplete"));
}

NiRFmxSpecAnLibrary::~NiRFmxSpecAnLibrary()
{
}

::grpc::Status NiRFmxSpecAnLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxSpecAnLibrary::ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.ACPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgCarrierAndOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth, int32 numberOfOffsets, float64 channelSpacing)
{
  if (!function_pointers_.ACPCfgCarrierAndOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgCarrierAndOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgCarrierAndOffsets(instrumentHandle, selectorString, integrationBandwidth, numberOfOffsets, channelSpacing);
#else
  return function_pointers_.ACPCfgCarrierAndOffsets(instrumentHandle, selectorString, integrationBandwidth, numberOfOffsets, channelSpacing);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgCarrierFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency)
{
  if (!function_pointers_.ACPCfgCarrierFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgCarrierFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgCarrierFrequency(instrumentHandle, selectorString, carrierFrequency);
#else
  return function_pointers_.ACPCfgCarrierFrequency(instrumentHandle, selectorString, carrierFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  if (!function_pointers_.ACPCfgCarrierIntegrationBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgCarrierIntegrationBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgCarrierIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#else
  return function_pointers_.ACPCfgCarrierIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgCarrierMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierMode)
{
  if (!function_pointers_.ACPCfgCarrierMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgCarrierMode.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgCarrierMode(instrumentHandle, selectorString, carrierMode);
#else
  return function_pointers_.ACPCfgCarrierMode(instrumentHandle, selectorString, carrierMode);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgCarrierRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  if (!function_pointers_.ACPCfgCarrierRRCFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgCarrierRRCFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgCarrierRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#else
  return function_pointers_.ACPCfgCarrierRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  if (!function_pointers_.ACPCfgFFT) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgFFT.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#else
  return function_pointers_.ACPCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.ACPCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgMeasurementMethod.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#else
  return function_pointers_.ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.ACPCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgNoiseCompensationEnabled.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#else
  return function_pointers_.ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers)
{
  if (!function_pointers_.ACPCfgNumberOfCarriers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgNumberOfCarriers.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
#else
  return function_pointers_.ACPCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgNumberOfOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
#else
  return function_pointers_.ACPCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency, int32 offsetSideband, int32 offsetEnabled)
{
  if (!function_pointers_.ACPCfgOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffset.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffset(instrumentHandle, selectorString, offsetFrequency, offsetSideband, offsetEnabled);
#else
  return function_pointers_.ACPCfgOffset(instrumentHandle, selectorString, offsetFrequency, offsetSideband, offsetEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency[], int32 offsetSideband[], int32 offsetEnabled[], int32 numberOfElements)
{
  if (!function_pointers_.ACPCfgOffsetArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetArray(instrumentHandle, selectorString, offsetFrequency, offsetSideband, offsetEnabled, numberOfElements);
#else
  return function_pointers_.ACPCfgOffsetArray(instrumentHandle, selectorString, offsetFrequency, offsetSideband, offsetEnabled, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition)
{
  if (!function_pointers_.ACPCfgOffsetFrequencyDefinition) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetFrequencyDefinition.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetFrequencyDefinition(instrumentHandle, selectorString, offsetFrequencyDefinition);
#else
  return function_pointers_.ACPCfgOffsetFrequencyDefinition(instrumentHandle, selectorString, offsetFrequencyDefinition);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  if (!function_pointers_.ACPCfgOffsetIntegrationBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetIntegrationBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#else
  return function_pointers_.ACPCfgOffsetIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetIntegrationBandwidthArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth[], int32 numberOfElements)
{
  if (!function_pointers_.ACPCfgOffsetIntegrationBandwidthArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetIntegrationBandwidthArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetIntegrationBandwidthArray(instrumentHandle, selectorString, integrationBandwidth, numberOfElements);
#else
  return function_pointers_.ACPCfgOffsetIntegrationBandwidthArray(instrumentHandle, selectorString, integrationBandwidth, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetPowerReference(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetReferenceCarrier, int32 offsetReferenceSpecific)
{
  if (!function_pointers_.ACPCfgOffsetPowerReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetPowerReference.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetPowerReference(instrumentHandle, selectorString, offsetReferenceCarrier, offsetReferenceSpecific);
#else
  return function_pointers_.ACPCfgOffsetPowerReference(instrumentHandle, selectorString, offsetReferenceCarrier, offsetReferenceSpecific);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetPowerReferenceArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetPowerReferenceCarrier[], int32 offsetPowerReferenceSpecific[], int32 numberOfElements)
{
  if (!function_pointers_.ACPCfgOffsetPowerReferenceArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetPowerReferenceArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetPowerReferenceArray(instrumentHandle, selectorString, offsetPowerReferenceCarrier, offsetPowerReferenceSpecific, numberOfElements);
#else
  return function_pointers_.ACPCfgOffsetPowerReferenceArray(instrumentHandle, selectorString, offsetPowerReferenceCarrier, offsetPowerReferenceSpecific, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  if (!function_pointers_.ACPCfgOffsetRRCFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetRRCFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#else
  return function_pointers_.ACPCfgOffsetRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetRRCFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled[], float64 rrcAlpha[], int32 numberOfElements)
{
  if (!function_pointers_.ACPCfgOffsetRRCFilterArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetRRCFilterArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetRRCFilterArray(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha, numberOfElements);
#else
  return function_pointers_.ACPCfgOffsetRRCFilterArray(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation)
{
  if (!function_pointers_.ACPCfgOffsetRelativeAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetRelativeAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
#else
  return function_pointers_.ACPCfgOffsetRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements)
{
  if (!function_pointers_.ACPCfgOffsetRelativeAttenuationArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgOffsetRelativeAttenuationArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgOffsetRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
#else
  return function_pointers_.ACPCfgOffsetRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  if (!function_pointers_.ACPCfgPowerUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgPowerUnits.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#else
  return function_pointers_.ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.ACPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.ACPCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchAbsolutePowersTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchAbsolutePowersTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* totalRelativePower, float64* carrierOffset, float64* integrationBandwidth)
{
  if (!function_pointers_.ACPFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, totalRelativePower, carrierOffset, integrationBandwidth);
#else
  return function_pointers_.ACPFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, totalRelativePower, carrierOffset, integrationBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchFrequencyResolution(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution)
{
  if (!function_pointers_.ACPFetchFrequencyResolution) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchFrequencyResolution.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchFrequencyResolution(instrumentHandle, selectorString, timeout, frequencyResolution);
#else
  return function_pointers_.ACPFetchFrequencyResolution(instrumentHandle, selectorString, timeout, frequencyResolution);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower)
{
  if (!function_pointers_.ACPFetchOffsetMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchOffsetMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
#else
  return function_pointers_.ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchOffsetMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchOffsetMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchRelativePowersTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchRelativePowersTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower)
{
  if (!function_pointers_.ACPFetchTotalCarrierPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPFetchTotalCarrierPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
#else
  return function_pointers_.ACPFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower, float64* offsetCh0LowerRelativePower, float64* offsetCh0UpperRelativePower, float64* offsetCh1LowerRelativePower, float64* offsetCh1UpperRelativePower)
{
  if (!function_pointers_.ACPRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPRead(instrumentHandle, selectorString, timeout, carrierAbsolutePower, offsetCh0LowerRelativePower, offsetCh0UpperRelativePower, offsetCh1LowerRelativePower, offsetCh1UpperRelativePower);
#else
  return function_pointers_.ACPRead(instrumentHandle, selectorString, timeout, carrierAbsolutePower, offsetCh0LowerRelativePower, offsetCh0UpperRelativePower, offsetCh1LowerRelativePower, offsetCh1UpperRelativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.ACPValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ACPValidateNoiseCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#else
  return function_pointers_.ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgAMToAMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType)
{
  if (!function_pointers_.AMPMCfgAMToAMCurveFit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgAMToAMCurveFit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgAMToAMCurveFit(instrumentHandle, selectorString, amToAMCurveFitOrder, amToAMCurveFitType);
#else
  return function_pointers_.AMPMCfgAMToAMCurveFit(instrumentHandle, selectorString, amToAMCurveFitOrder, amToAMCurveFitType);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgAMToPMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType)
{
  if (!function_pointers_.AMPMCfgAMToPMCurveFit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgAMToPMCurveFit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgAMToPMCurveFit(instrumentHandle, selectorString, amToPMCurveFitOrder, amToPMCurveFitType);
#else
  return function_pointers_.AMPMCfgAMToPMCurveFit(instrumentHandle, selectorString, amToPMCurveFitOrder, amToPMCurveFitType);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.AMPMCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
#else
  return function_pointers_.AMPMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgCompressionPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 compressionPointEnabled, float64 compressionLevel[], int32 arraySize)
{
  if (!function_pointers_.AMPMCfgCompressionPoints) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgCompressionPoints.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgCompressionPoints(instrumentHandle, selectorString, compressionPointEnabled, compressionLevel, arraySize);
#else
  return function_pointers_.AMPMCfgCompressionPoints(instrumentHandle, selectorString, compressionPointEnabled, compressionLevel, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgDUTAverageInputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower)
{
  if (!function_pointers_.AMPMCfgDUTAverageInputPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgDUTAverageInputPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgDUTAverageInputPower(instrumentHandle, selectorString, dutAverageInputPower);
#else
  return function_pointers_.AMPMCfgDUTAverageInputPower(instrumentHandle, selectorString, dutAverageInputPower);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.AMPMCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.AMPMCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgMeasurementSampleRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate)
{
  if (!function_pointers_.AMPMCfgMeasurementSampleRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgMeasurementSampleRate.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgMeasurementSampleRate(instrumentHandle, selectorString, sampleRateMode, sampleRate);
#else
  return function_pointers_.AMPMCfgMeasurementSampleRate(instrumentHandle, selectorString, sampleRateMode, sampleRate);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgReferencePowerType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referencePowerType)
{
  if (!function_pointers_.AMPMCfgReferencePowerType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgReferencePowerType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgReferencePowerType(instrumentHandle, selectorString, referencePowerType);
#else
  return function_pointers_.AMPMCfgReferencePowerType(instrumentHandle, selectorString, referencePowerType);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType)
{
  if (!function_pointers_.AMPMCfgReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgReferenceWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
#else
  return function_pointers_.AMPMCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgSynchronizationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod)
{
  if (!function_pointers_.AMPMCfgSynchronizationMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgSynchronizationMethod.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgSynchronizationMethod(instrumentHandle, selectorString, synchronizationMethod);
#else
  return function_pointers_.AMPMCfgSynchronizationMethod(instrumentHandle, selectorString, synchronizationMethod);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  if (!function_pointers_.AMPMCfgThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMCfgThreshold.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#else
  return function_pointers_.AMPMCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchAMToAMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToAM[], float32 curveFitAMToAM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchAMToAMTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchAMToAMTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchAMToAMTrace(instrumentHandle, selectorString, timeout, referencePowers, measuredAMToAM, curveFitAMToAM, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchAMToAMTrace(instrumentHandle, selectorString, timeout, referencePowers, measuredAMToAM, curveFitAMToAM, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchAMToPMTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToPM[], float32 curveFitAMToPM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchAMToPMTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchAMToPMTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchAMToPMTrace(instrumentHandle, selectorString, timeout, referencePowers, measuredAMToPM, curveFitAMToPM, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchAMToPMTrace(instrumentHandle, selectorString, timeout, referencePowers, measuredAMToPM, curveFitAMToPM, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchCompressionPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inputCompressionPoint[], float64 outputCompressionPoint[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchCompressionPoints) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchCompressionPoints.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchCompressionPoints(instrumentHandle, selectorString, timeout, inputCompressionPoint, outputCompressionPoint, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchCompressionPoints(instrumentHandle, selectorString, timeout, inputCompressionPoint, outputCompressionPoint, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchCurveFitCoefficients(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 amToAMCoefficients[], float32 amToPMCoefficients[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchCurveFitCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchCurveFitCoefficients.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchCurveFitCoefficients(instrumentHandle, selectorString, timeout, amToAMCoefficients, amToPMCoefficients, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchCurveFitCoefficients(instrumentHandle, selectorString, timeout, amToAMCoefficients, amToPMCoefficients, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchCurveFitResidual(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* amToAMResidual, float64* amToPMResidual)
{
  if (!function_pointers_.AMPMFetchCurveFitResidual) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchCurveFitResidual.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchCurveFitResidual(instrumentHandle, selectorString, timeout, amToAMResidual, amToPMResidual);
#else
  return function_pointers_.AMPMFetchCurveFitResidual(instrumentHandle, selectorString, timeout, amToAMResidual, amToPMResidual);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchDUTCharacteristics(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanLinearGain, float64* onedBCompressionPoint, float64* meanRMSEVM)
{
  if (!function_pointers_.AMPMFetchDUTCharacteristics) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchDUTCharacteristics.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchDUTCharacteristics(instrumentHandle, selectorString, timeout, meanLinearGain, onedBCompressionPoint, meanRMSEVM);
#else
  return function_pointers_.AMPMFetchDUTCharacteristics(instrumentHandle, selectorString, timeout, meanLinearGain, onedBCompressionPoint, meanRMSEVM);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* gainErrorRange, float64* phaseErrorRange, float64* meanPhaseError)
{
  if (!function_pointers_.AMPMFetchError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchError.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchError(instrumentHandle, selectorString, timeout, gainErrorRange, phaseErrorRange, meanPhaseError);
#else
  return function_pointers_.AMPMFetchError(instrumentHandle, selectorString, timeout, gainErrorRange, phaseErrorRange, meanPhaseError);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchProcessedMeanAcquiredWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchProcessedMeanAcquiredWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchProcessedReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchProcessedReferenceWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchRelativePhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePhase[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchRelativePhaseTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchRelativePhaseTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchRelativePhaseTrace(instrumentHandle, selectorString, timeout, x0, dx, relativePhase, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchRelativePhaseTrace(instrumentHandle, selectorString, timeout, x0, dx, relativePhase, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AMPMFetchRelativePowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.AMPMFetchRelativePowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMFetchRelativePowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AMPMFetchRelativePowerTrace(instrumentHandle, selectorString, timeout, x0, dx, relativePower, arraySize, actualArraySize);
#else
  return function_pointers_.AMPMFetchRelativePowerTrace(instrumentHandle, selectorString, timeout, x0, dx, relativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AbortMeasurements.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AbortMeasurements(instrumentHandle, selectorString);
#else
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AnalyzeIQ1Waveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
#else
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
#endif
}

int32 NiRFmxSpecAnLibrary::AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeSpectrum1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AnalyzeSpectrum1Waveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
#else
  return function_pointers_.AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
#endif
}

int32 NiRFmxSpecAnLibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AutoLevel.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_AutoLevel(instrumentHandle, selectorString, bandwidth, measurementInterval, referenceLevel);
#else
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, bandwidth, measurementInterval, referenceLevel);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildCarrierString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildCarrierString2.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildCarrierString2(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildCarrierString(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildHarmonicString(char selectorString[], int32 harmonicNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildHarmonicString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildHarmonicString2.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildHarmonicString2(selectorString, harmonicNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildHarmonicString(selectorString, harmonicNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildIntermodString(char selectorString[], int32 intermodNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildIntermodString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildIntermodString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildIntermodString(selectorString, intermodNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildIntermodString(selectorString, intermodNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildListStepString(char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildListStepString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildListStepString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildListStepString(listName, resultName, stepNumber, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildListStepString(listName, resultName, stepNumber, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildListString(char listName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildListString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildListString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildListString(listName, resultName, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildListString(listName, resultName, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildMarkerString(char selectorString[], int32 markerNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildMarkerString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildMarkerString2.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildMarkerString2(selectorString, markerNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildMarkerString(selectorString, markerNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildOffsetString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildOffsetString2.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildOffsetString2(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildRangeSpurString(char signalName[], char resultName[], int32 rangeNumber, int32 spurNumber, int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildRangeSpurString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildRangeSpurString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildRangeSpurString(signalName, resultName, rangeNumber, spurNumber, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildRangeSpurString(signalName, resultName, rangeNumber, spurNumber, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildRangeString(char selectorString[], int32 rangeNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildRangeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildRangeString2.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildRangeString2(selectorString, rangeNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildRangeString(selectorString, rangeNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSegmentString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildSegmentString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildSegmentString(selectorString, segmentNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildSegmentString(selectorString, segmentNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildSignalString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
#else
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::BuildSpurString(char selectorString[], int32 spurNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSpurString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_BuildSpurString2.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_BuildSpurString2(selectorString, spurNumber, selectorStringOutLength, selectorStringOut);
#else
  return function_pointers_.BuildSpurString(selectorString, spurNumber, selectorStringOutLength, selectorStringOut);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.CCDFCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.CCDFCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFCfgNumberOfRecords(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRecords)
{
  if (!function_pointers_.CCDFCfgNumberOfRecords) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFCfgNumberOfRecords.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFCfgNumberOfRecords(instrumentHandle, selectorString, numberOfRecords);
#else
  return function_pointers_.CCDFCfgNumberOfRecords(instrumentHandle, selectorString, numberOfRecords);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  if (!function_pointers_.CCDFCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#else
  return function_pointers_.CCDFCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  if (!function_pointers_.CCDFCfgThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFCfgThreshold.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#else
  return function_pointers_.CCDFCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFFetchBasicPowerProbabilities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* tenPercentPower, float64* onePercentPower, float64* oneTenthPercentPower, float64* oneHundredthPercentPower, float64* oneThousandthPercentPower, float64* oneTenThousandthPercentPower)
{
  if (!function_pointers_.CCDFFetchBasicPowerProbabilities) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFFetchBasicPowerProbabilities.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFFetchBasicPowerProbabilities(instrumentHandle, selectorString, timeout, tenPercentPower, onePercentPower, oneTenthPercentPower, oneHundredthPercentPower, oneThousandthPercentPower, oneTenThousandthPercentPower);
#else
  return function_pointers_.CCDFFetchBasicPowerProbabilities(instrumentHandle, selectorString, timeout, tenPercentPower, onePercentPower, oneTenthPercentPower, oneHundredthPercentPower, oneThousandthPercentPower, oneTenThousandthPercentPower);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFFetchGaussianProbabilitiesTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 gaussianProbabilities[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CCDFFetchGaussianProbabilitiesTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFFetchGaussianProbabilitiesTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFFetchGaussianProbabilitiesTrace(instrumentHandle, selectorString, timeout, x0, dx, gaussianProbabilities, arraySize, actualArraySize);
#else
  return function_pointers_.CCDFFetchGaussianProbabilitiesTrace(instrumentHandle, selectorString, timeout, x0, dx, gaussianProbabilities, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFFetchPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount)
{
  if (!function_pointers_.CCDFFetchPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFFetchPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFFetchPower(instrumentHandle, selectorString, timeout, meanPower, meanPowerPercentile, peakPower, measuredSamplesCount);
#else
  return function_pointers_.CCDFFetchPower(instrumentHandle, selectorString, timeout, meanPower, meanPowerPercentile, peakPower, measuredSamplesCount);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFFetchProbabilitiesTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 probabilities[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CCDFFetchProbabilitiesTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFFetchProbabilitiesTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFFetchProbabilitiesTrace(instrumentHandle, selectorString, timeout, x0, dx, probabilities, arraySize, actualArraySize);
#else
  return function_pointers_.CCDFFetchProbabilitiesTrace(instrumentHandle, selectorString, timeout, x0, dx, probabilities, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::CCDFRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount)
{
  if (!function_pointers_.CCDFRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CCDFRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CCDFRead(instrumentHandle, selectorString, timeout, meanPower, meanPowerPercentile, peakPower, measuredSamplesCount);
#else
  return function_pointers_.CCDFRead(instrumentHandle, selectorString, timeout, meanPower, meanPowerPercentile, peakPower, measuredSamplesCount);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.CHPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgCarrierOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency)
{
  if (!function_pointers_.CHPCfgCarrierOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgCarrierOffset.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgCarrierOffset(instrumentHandle, selectorString, carrierFrequency);
#else
  return function_pointers_.CHPCfgCarrierOffset(instrumentHandle, selectorString, carrierFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  if (!function_pointers_.CHPCfgFFT) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgFFT.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#else
  return function_pointers_.CHPCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  if (!function_pointers_.CHPCfgIntegrationBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgIntegrationBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#else
  return function_pointers_.CHPCfgIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers)
{
  if (!function_pointers_.CHPCfgNumberOfCarriers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgNumberOfCarriers.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
#else
  return function_pointers_.CHPCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.CHPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  if (!function_pointers_.CHPCfgRRCFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgRRCFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#else
  return function_pointers_.CHPCfgRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  if (!function_pointers_.CHPCfgSpan) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgSpan.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgSpan(instrumentHandle, selectorString, span);
#else
  return function_pointers_.CHPCfgSpan(instrumentHandle, selectorString, span);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.CHPCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd, float64* relativePower)
{
  if (!function_pointers_.CHPFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPFetchCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, psd, relativePower);
#else
  return function_pointers_.CHPFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, psd, relativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CHPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower)
{
  if (!function_pointers_.CHPFetchTotalCarrierPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPFetchTotalCarrierPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
#else
  return function_pointers_.CHPFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd)
{
  if (!function_pointers_.CHPRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPRead(instrumentHandle, selectorString, timeout, absolutePower, psd);
#else
  return function_pointers_.CHPRead(instrumentHandle, selectorString, timeout, absolutePower, psd);
#endif
}

int32 NiRFmxSpecAnLibrary::CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.CHPValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CHPValidateNoiseCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#else
  return function_pointers_.CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgDigitalEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
#else
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgExternalAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
#else
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgFrequency(instrumentHandle, selectorString, centerFrequency);
#else
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgFrequencyReference.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
#else
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgIQPowerEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeLevel, iqPowerEdgeSlope, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, enableTrigger);
#else
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeLevel, iqPowerEdgeSlope, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, enableTrigger);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgMechanicalAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
#else
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  if (!function_pointers_.CfgRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgRF.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
#else
  return function_pointers_.CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgRFAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
#else
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgReferenceLevel.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
#else
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
#endif
}

int32 NiRFmxSpecAnLibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CfgSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
#else
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
#endif
}

int32 NiRFmxSpecAnLibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CheckMeasurementStatus.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
#else
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
#endif
}

int32 NiRFmxSpecAnLibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ClearAllNamedResults.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ClearAllNamedResults(instrumentHandle, selectorString);
#else
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ClearNamedResult.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ClearNamedResult(instrumentHandle, selectorString);
#else
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNoiseCalibrationDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ClearNoiseCalibrationDatabase.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
#else
  return function_pointers_.ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CloneSignalConfiguration.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
#else
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
#endif
}

int32 NiRFmxSpecAnLibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_Close.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_Close(instrumentHandle, forceDestroy);
#else
  return function_pointers_.Close(instrumentHandle, forceDestroy);
#endif
}

int32 NiRFmxSpecAnLibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_Commit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_Commit(instrumentHandle, selectorString);
#else
  return function_pointers_.Commit(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::CreateList(niRFmxInstrHandle instrumentHandle, char listName[])
{
  if (!function_pointers_.CreateList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CreateList.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CreateList(instrumentHandle, listName);
#else
  return function_pointers_.CreateList(instrumentHandle, listName);
#endif
}

int32 NiRFmxSpecAnLibrary::CreateListStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex)
{
  if (!function_pointers_.CreateListStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CreateListStep.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CreateListStep(instrumentHandle, selectorString, createdStepIndex);
#else
  return function_pointers_.CreateListStep(instrumentHandle, selectorString, createdStepIndex);
#endif
}

int32 NiRFmxSpecAnLibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CreateSignalConfiguration.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_CreateSignalConfiguration(instrumentHandle, signalName);
#else
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDApplyDigitalPredistortion(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64 measurementTimeout, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr, float64* powerOffset)
{
  if (!function_pointers_.DPDApplyDigitalPredistortion) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDApplyDigitalPredistortion.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDApplyDigitalPredistortion(instrumentHandle, selectorString, x0In, dxIn, waveformIn, arraySizeIn, idleDurationPresent, measurementTimeout, x0Out, dxOut, waveformOut, arraySizeOut, actualArraySize, papr, powerOffset);
#else
  return function_pointers_.DPDApplyDigitalPredistortion(instrumentHandle, selectorString, x0In, dxIn, waveformIn, arraySizeIn, idleDurationPresent, measurementTimeout, x0Out, dxOut, waveformOut, arraySizeOut, actualArraySize, papr, powerOffset);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDApplyPreDPDSignalConditioning(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr)
{
  if (!function_pointers_.DPDApplyPreDPDSignalConditioning) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDApplyPreDPDSignalConditioning.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDApplyPreDPDSignalConditioning(instrumentHandle, selectorString, x0In, dxIn, waveformIn, arraySizeIn, idleDurationPresent, x0Out, dxOut, waveformOut, arraySizeOut, actualArraySize, papr);
#else
  return function_pointers_.DPDApplyPreDPDSignalConditioning(instrumentHandle, selectorString, x0In, dxIn, waveformIn, arraySizeIn, idleDurationPresent, x0Out, dxOut, waveformOut, arraySizeOut, actualArraySize, papr);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgApplyDPDConfigurationInput(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurationInput)
{
  if (!function_pointers_.DPDCfgApplyDPDConfigurationInput) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgApplyDPDConfigurationInput.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgApplyDPDConfigurationInput(instrumentHandle, selectorString, configurationInput);
#else
  return function_pointers_.DPDCfgApplyDPDConfigurationInput(instrumentHandle, selectorString, configurationInput);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgApplyDPDLookupTableCorrectionType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lutCorrectionType)
{
  if (!function_pointers_.DPDCfgApplyDPDLookupTableCorrectionType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgApplyDPDLookupTableCorrectionType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgApplyDPDLookupTableCorrectionType(instrumentHandle, selectorString, lutCorrectionType);
#else
  return function_pointers_.DPDCfgApplyDPDLookupTableCorrectionType(instrumentHandle, selectorString, lutCorrectionType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgApplyDPDMemoryModelCorrectionType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryModelCorrectionType)
{
  if (!function_pointers_.DPDCfgApplyDPDMemoryModelCorrectionType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgApplyDPDMemoryModelCorrectionType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgApplyDPDMemoryModelCorrectionType(instrumentHandle, selectorString, memoryModelCorrectionType);
#else
  return function_pointers_.DPDCfgApplyDPDMemoryModelCorrectionType(instrumentHandle, selectorString, memoryModelCorrectionType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgApplyDPDUserDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle dpdPolynomial[], int32 arraySize)
{
  if (!function_pointers_.DPDCfgApplyDPDUserDPDPolynomial) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgApplyDPDUserDPDPolynomial.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgApplyDPDUserDPDPolynomial(instrumentHandle, selectorString, dpdPolynomial, arraySize);
#else
  return function_pointers_.DPDCfgApplyDPDUserDPDPolynomial(instrumentHandle, selectorString, dpdPolynomial, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgApplyDPDUserLookupTable(niRFmxInstrHandle instrumentHandle, char selectorString[], float32 lutInputPowers[], NIComplexSingle lutComplexGains[], int32 arraySize)
{
  if (!function_pointers_.DPDCfgApplyDPDUserLookupTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgApplyDPDUserLookupTable.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgApplyDPDUserLookupTable(instrumentHandle, selectorString, lutInputPowers, lutComplexGains, arraySize);
#else
  return function_pointers_.DPDCfgApplyDPDUserLookupTable(instrumentHandle, selectorString, lutInputPowers, lutComplexGains, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.DPDCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
#else
  return function_pointers_.DPDCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgDPDModel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dpdModel)
{
  if (!function_pointers_.DPDCfgDPDModel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgDPDModel.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgDPDModel(instrumentHandle, selectorString, dpdModel);
#else
  return function_pointers_.DPDCfgDPDModel(instrumentHandle, selectorString, dpdModel);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgDUTAverageInputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower)
{
  if (!function_pointers_.DPDCfgDUTAverageInputPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgDUTAverageInputPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgDUTAverageInputPower(instrumentHandle, selectorString, dutAverageInputPower);
#else
  return function_pointers_.DPDCfgDUTAverageInputPower(instrumentHandle, selectorString, dutAverageInputPower);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgGeneralizedMemoryPolynomialCrossTerms(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialLeadOrder, int32 memoryPolynomialLagOrder, int32 memoryPolynomialLeadMemoryDepth, int32 memoryPolynomialLagMemoryDepth, int32 memoryPolynomialMaximumLead, int32 memoryPolynomialMaximumLag)
{
  if (!function_pointers_.DPDCfgGeneralizedMemoryPolynomialCrossTerms) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgGeneralizedMemoryPolynomialCrossTerms.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgGeneralizedMemoryPolynomialCrossTerms(instrumentHandle, selectorString, memoryPolynomialLeadOrder, memoryPolynomialLagOrder, memoryPolynomialLeadMemoryDepth, memoryPolynomialLagMemoryDepth, memoryPolynomialMaximumLead, memoryPolynomialMaximumLag);
#else
  return function_pointers_.DPDCfgGeneralizedMemoryPolynomialCrossTerms(instrumentHandle, selectorString, memoryPolynomialLeadOrder, memoryPolynomialLagOrder, memoryPolynomialLeadMemoryDepth, memoryPolynomialLagMemoryDepth, memoryPolynomialMaximumLead, memoryPolynomialMaximumLag);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgIterativeDPDEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 iterativeDPDEnabled)
{
  if (!function_pointers_.DPDCfgIterativeDPDEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgIterativeDPDEnabled.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgIterativeDPDEnabled(instrumentHandle, selectorString, iterativeDPDEnabled);
#else
  return function_pointers_.DPDCfgIterativeDPDEnabled(instrumentHandle, selectorString, iterativeDPDEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgLookupTableAMToAMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType)
{
  if (!function_pointers_.DPDCfgLookupTableAMToAMCurveFit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgLookupTableAMToAMCurveFit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgLookupTableAMToAMCurveFit(instrumentHandle, selectorString, amToAMCurveFitOrder, amToAMCurveFitType);
#else
  return function_pointers_.DPDCfgLookupTableAMToAMCurveFit(instrumentHandle, selectorString, amToAMCurveFitOrder, amToAMCurveFitType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgLookupTableAMToPMCurveFit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType)
{
  if (!function_pointers_.DPDCfgLookupTableAMToPMCurveFit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgLookupTableAMToPMCurveFit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgLookupTableAMToPMCurveFit(instrumentHandle, selectorString, amToPMCurveFitOrder, amToPMCurveFitType);
#else
  return function_pointers_.DPDCfgLookupTableAMToPMCurveFit(instrumentHandle, selectorString, amToPMCurveFitOrder, amToPMCurveFitType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgLookupTableStepSize(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 stepSize)
{
  if (!function_pointers_.DPDCfgLookupTableStepSize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgLookupTableStepSize.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgLookupTableStepSize(instrumentHandle, selectorString, stepSize);
#else
  return function_pointers_.DPDCfgLookupTableStepSize(instrumentHandle, selectorString, stepSize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgLookupTableThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  if (!function_pointers_.DPDCfgLookupTableThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgLookupTableThreshold.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgLookupTableThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#else
  return function_pointers_.DPDCfgLookupTableThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgLookupTableType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lookupTableType)
{
  if (!function_pointers_.DPDCfgLookupTableType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgLookupTableType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgLookupTableType(instrumentHandle, selectorString, lookupTableType);
#else
  return function_pointers_.DPDCfgLookupTableType(instrumentHandle, selectorString, lookupTableType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.DPDCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.DPDCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgMeasurementSampleRate(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate)
{
  if (!function_pointers_.DPDCfgMeasurementSampleRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgMeasurementSampleRate.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgMeasurementSampleRate(instrumentHandle, selectorString, sampleRateMode, sampleRate);
#else
  return function_pointers_.DPDCfgMeasurementSampleRate(instrumentHandle, selectorString, sampleRateMode, sampleRate);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgMemoryPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialOrder, int32 memoryPolynomialMemoryDepth)
{
  if (!function_pointers_.DPDCfgMemoryPolynomial) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgMemoryPolynomial.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgMemoryPolynomial(instrumentHandle, selectorString, memoryPolynomialOrder, memoryPolynomialMemoryDepth);
#else
  return function_pointers_.DPDCfgMemoryPolynomial(instrumentHandle, selectorString, memoryPolynomialOrder, memoryPolynomialMemoryDepth);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgPreviousDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle previousDPDPolynomial[], int32 arraySize)
{
  if (!function_pointers_.DPDCfgPreviousDPDPolynomial) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgPreviousDPDPolynomial.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgPreviousDPDPolynomial(instrumentHandle, selectorString, previousDPDPolynomial, arraySize);
#else
  return function_pointers_.DPDCfgPreviousDPDPolynomial(instrumentHandle, selectorString, previousDPDPolynomial, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType)
{
  if (!function_pointers_.DPDCfgReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgReferenceWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
#else
  return function_pointers_.DPDCfgReferenceWaveform(instrumentHandle, selectorString, x0, dx, referenceWaveform, arraySize, idleDurationPresent, signalType);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDCfgSynchronizationMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod)
{
  if (!function_pointers_.DPDCfgSynchronizationMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDCfgSynchronizationMethod.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDCfgSynchronizationMethod(instrumentHandle, selectorString, synchronizationMethod);
#else
  return function_pointers_.DPDCfgSynchronizationMethod(instrumentHandle, selectorString, synchronizationMethod);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchApplyDPDPreCFRPAPR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preCFRPAPR)
{
  if (!function_pointers_.DPDFetchApplyDPDPreCFRPAPR) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchApplyDPDPreCFRPAPR.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchApplyDPDPreCFRPAPR(instrumentHandle, selectorString, timeout, preCFRPAPR);
#else
  return function_pointers_.DPDFetchApplyDPDPreCFRPAPR(instrumentHandle, selectorString, timeout, preCFRPAPR);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchAverageGain(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageGain)
{
  if (!function_pointers_.DPDFetchAverageGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchAverageGain.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchAverageGain(instrumentHandle, selectorString, timeout, averageGain);
#else
  return function_pointers_.DPDFetchAverageGain(instrumentHandle, selectorString, timeout, averageGain);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchDPDPolynomial(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dpdPolynomial[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DPDFetchDPDPolynomial) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchDPDPolynomial.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchDPDPolynomial(instrumentHandle, selectorString, timeout, dpdPolynomial, arraySize, actualArraySize);
#else
  return function_pointers_.DPDFetchDPDPolynomial(instrumentHandle, selectorString, timeout, dpdPolynomial, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchLookupTable(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 inputPowers[], NIComplexSingle complexGains[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DPDFetchLookupTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchLookupTable.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchLookupTable(instrumentHandle, selectorString, timeout, inputPowers, complexGains, arraySize, actualArraySize);
#else
  return function_pointers_.DPDFetchLookupTable(instrumentHandle, selectorString, timeout, inputPowers, complexGains, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchNMSE(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* nmse)
{
  if (!function_pointers_.DPDFetchNMSE) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchNMSE.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchNMSE(instrumentHandle, selectorString, timeout, nmse);
#else
  return function_pointers_.DPDFetchNMSE(instrumentHandle, selectorString, timeout, nmse);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DPDFetchProcessedMeanAcquiredWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchProcessedMeanAcquiredWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
#else
  return function_pointers_.DPDFetchProcessedMeanAcquiredWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedMeanAcquiredWaveform, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DPDFetchProcessedReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.DPDFetchProcessedReferenceWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DPDFetchProcessedReferenceWaveform.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DPDFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
#else
  return function_pointers_.DPDFetchProcessedReferenceWaveform(instrumentHandle, selectorString, timeout, x0, dx, processedReferenceWaveform, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::DeleteList(niRFmxInstrHandle instrumentHandle, char listName[])
{
  if (!function_pointers_.DeleteList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DeleteList.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DeleteList(instrumentHandle, listName);
#else
  return function_pointers_.DeleteList(instrumentHandle, listName);
#endif
}

int32 NiRFmxSpecAnLibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DeleteSignalConfiguration.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DeleteSignalConfiguration(instrumentHandle, signalName);
#else
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
#endif
}

int32 NiRFmxSpecAnLibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_DisableTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_DisableTrigger(instrumentHandle, selectorString);
#else
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.FCntCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.FCntCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.FCntCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.FCntCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  if (!function_pointers_.FCntCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#else
  return function_pointers_.FCntCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  if (!function_pointers_.FCntCfgThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntCfgThreshold.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#else
  return function_pointers_.FCntCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntFetchAllanDeviation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* allanDeviation)
{
  if (!function_pointers_.FCntFetchAllanDeviation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntFetchAllanDeviation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntFetchAllanDeviation(instrumentHandle, selectorString, timeout, allanDeviation);
#else
  return function_pointers_.FCntFetchAllanDeviation(instrumentHandle, selectorString, timeout, allanDeviation);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntFetchFrequencyTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequencyTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.FCntFetchFrequencyTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntFetchFrequencyTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntFetchFrequencyTrace(instrumentHandle, selectorString, timeout, x0, dx, frequencyTrace, arraySize, actualArraySize);
#else
  return function_pointers_.FCntFetchFrequencyTrace(instrumentHandle, selectorString, timeout, x0, dx, frequencyTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase)
{
  if (!function_pointers_.FCntFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntFetchMeasurement(instrumentHandle, selectorString, timeout, averageRelativeFrequency, averageAbsoluteFrequency, meanPhase);
#else
  return function_pointers_.FCntFetchMeasurement(instrumentHandle, selectorString, timeout, averageRelativeFrequency, averageAbsoluteFrequency, meanPhase);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntFetchPhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.FCntFetchPhaseTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntFetchPhaseTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntFetchPhaseTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseTrace, arraySize, actualArraySize);
#else
  return function_pointers_.FCntFetchPhaseTrace(instrumentHandle, selectorString, timeout, x0, dx, phaseTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 powerTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.FCntFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntFetchPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, powerTrace, arraySize, actualArraySize);
#else
  return function_pointers_.FCntFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, powerTrace, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::FCntRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase)
{
  if (!function_pointers_.FCntRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_FCntRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_FCntRead(instrumentHandle, selectorString, timeout, averageRelativeFrequency, averageAbsoluteFrequency, meanPhase);
#else
  return function_pointers_.FCntRead(instrumentHandle, selectorString, timeout, averageRelativeFrequency, averageAbsoluteFrequency, meanPhase);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAllNamedResultNames.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
#else
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeF32.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeF32Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeF64.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeF64Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI16.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI32.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI32Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI64.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI64Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI8.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeI8Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeNIComplexDoubleArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeNIComplexSingleArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
#else
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeU16.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeU32.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeU32Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeU64Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeU8.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetAttributeU8Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#else
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetError.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#else
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#endif
}

int32 NiRFmxSpecAnLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetErrorString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#else
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgAutoHarmonics(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoHarmonicsSetupEnabled)
{
  if (!function_pointers_.HarmCfgAutoHarmonics) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgAutoHarmonics.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgAutoHarmonics(instrumentHandle, selectorString, autoHarmonicsSetupEnabled);
#else
  return function_pointers_.HarmCfgAutoHarmonics(instrumentHandle, selectorString, autoHarmonicsSetupEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.HarmCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.HarmCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgFundamentalMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.HarmCfgFundamentalMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgFundamentalMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgFundamentalMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.HarmCfgFundamentalMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgFundamentalRBW(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  if (!function_pointers_.HarmCfgFundamentalRBW) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgFundamentalRBW.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgFundamentalRBW(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#else
  return function_pointers_.HarmCfgFundamentalRBW(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgHarmonic(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder, float64 harmonicBandwidth, int32 harmonicEnabled, float64 harmonicMeasurementInterval)
{
  if (!function_pointers_.HarmCfgHarmonic) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgHarmonic.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgHarmonic(instrumentHandle, selectorString, harmonicOrder, harmonicBandwidth, harmonicEnabled, harmonicMeasurementInterval);
#else
  return function_pointers_.HarmCfgHarmonic(instrumentHandle, selectorString, harmonicOrder, harmonicBandwidth, harmonicEnabled, harmonicMeasurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgHarmonicArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder[], float64 harmonicBandwidth[], int32 harmonicEnabled[], float64 harmonicMeasurementInterval[], int32 numberOfElements)
{
  if (!function_pointers_.HarmCfgHarmonicArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgHarmonicArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgHarmonicArray(instrumentHandle, selectorString, harmonicOrder, harmonicBandwidth, harmonicEnabled, harmonicMeasurementInterval, numberOfElements);
#else
  return function_pointers_.HarmCfgHarmonicArray(instrumentHandle, selectorString, harmonicOrder, harmonicBandwidth, harmonicEnabled, harmonicMeasurementInterval, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmCfgNumberOfHarmonics(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfHarmonics)
{
  if (!function_pointers_.HarmCfgNumberOfHarmonics) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmCfgNumberOfHarmonics.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmCfgNumberOfHarmonics(instrumentHandle, selectorString, numberOfHarmonics);
#else
  return function_pointers_.HarmCfgNumberOfHarmonics(instrumentHandle, selectorString, numberOfHarmonics);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmFetchHarmonicMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativePower, float64* averageAbsolutePower, float64* rbw, float64* frequency)
{
  if (!function_pointers_.HarmFetchHarmonicMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmFetchHarmonicMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmFetchHarmonicMeasurement(instrumentHandle, selectorString, timeout, averageRelativePower, averageAbsolutePower, rbw, frequency);
#else
  return function_pointers_.HarmFetchHarmonicMeasurement(instrumentHandle, selectorString, timeout, averageRelativePower, averageAbsolutePower, rbw, frequency);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmFetchHarmonicMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averageRelativePower[], float64 averageAbsolutePower[], float64 rbw[], float64 frequency[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.HarmFetchHarmonicMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmFetchHarmonicMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmFetchHarmonicMeasurementArray(instrumentHandle, selectorString, timeout, averageRelativePower, averageAbsolutePower, rbw, frequency, arraySize, actualArraySize);
#else
  return function_pointers_.HarmFetchHarmonicMeasurementArray(instrumentHandle, selectorString, timeout, averageRelativePower, averageAbsolutePower, rbw, frequency, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmFetchHarmonicPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.HarmFetchHarmonicPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmFetchHarmonicPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmFetchHarmonicPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#else
  return function_pointers_.HarmFetchHarmonicPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmFetchTHD(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower, float64* fundamentalFrequency)
{
  if (!function_pointers_.HarmFetchTHD) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmFetchTHD.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmFetchTHD(instrumentHandle, selectorString, timeout, totalHarmonicDistortion, averageFundamentalPower, fundamentalFrequency);
#else
  return function_pointers_.HarmFetchTHD(instrumentHandle, selectorString, timeout, totalHarmonicDistortion, averageFundamentalPower, fundamentalFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::HarmRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower)
{
  if (!function_pointers_.HarmRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_HarmRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_HarmRead(instrumentHandle, selectorString, timeout, totalHarmonicDistortion, averageFundamentalPower);
#else
  return function_pointers_.HarmRead(instrumentHandle, selectorString, timeout, totalHarmonicDistortion, averageFundamentalPower);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgAutoIntermodsSetup(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoIntermodsSetupEnabled, int32 maximumIntermodOrder)
{
  if (!function_pointers_.IMCfgAutoIntermodsSetup) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgAutoIntermodsSetup.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgAutoIntermodsSetup(instrumentHandle, selectorString, autoIntermodsSetupEnabled, maximumIntermodOrder);
#else
  return function_pointers_.IMCfgAutoIntermodsSetup(instrumentHandle, selectorString, autoIntermodsSetupEnabled, maximumIntermodOrder);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.IMCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.IMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  if (!function_pointers_.IMCfgFFT) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgFFT.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#else
  return function_pointers_.IMCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyDefinition)
{
  if (!function_pointers_.IMCfgFrequencyDefinition) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgFrequencyDefinition.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgFrequencyDefinition(instrumentHandle, selectorString, frequencyDefinition);
#else
  return function_pointers_.IMCfgFrequencyDefinition(instrumentHandle, selectorString, frequencyDefinition);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgFundamentalTones(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 lowerToneFrequency, float64 upperToneFrequency)
{
  if (!function_pointers_.IMCfgFundamentalTones) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgFundamentalTones.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgFundamentalTones(instrumentHandle, selectorString, lowerToneFrequency, upperToneFrequency);
#else
  return function_pointers_.IMCfgFundamentalTones(instrumentHandle, selectorString, lowerToneFrequency, upperToneFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgIntermod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder, float64 lowerIntermodFrequency, float64 upperIntermodFrequency, int32 intermodSide, int32 intermodEnabled)
{
  if (!function_pointers_.IMCfgIntermod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgIntermod.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgIntermod(instrumentHandle, selectorString, intermodOrder, lowerIntermodFrequency, upperIntermodFrequency, intermodSide, intermodEnabled);
#else
  return function_pointers_.IMCfgIntermod(instrumentHandle, selectorString, intermodOrder, lowerIntermodFrequency, upperIntermodFrequency, intermodSide, intermodEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgIntermodArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder[], float64 lowerIntermodFrequency[], float64 upperIntermodFrequency[], int32 intermodSide[], int32 intermodEnabled[], int32 numberOfElements)
{
  if (!function_pointers_.IMCfgIntermodArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgIntermodArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgIntermodArray(instrumentHandle, selectorString, intermodOrder, lowerIntermodFrequency, upperIntermodFrequency, intermodSide, intermodEnabled, numberOfElements);
#else
  return function_pointers_.IMCfgIntermodArray(instrumentHandle, selectorString, intermodOrder, lowerIntermodFrequency, upperIntermodFrequency, intermodSide, intermodEnabled, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.IMCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgMeasurementMethod.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#else
  return function_pointers_.IMCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgNumberOfIntermods(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfIntermods)
{
  if (!function_pointers_.IMCfgNumberOfIntermods) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgNumberOfIntermods.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgNumberOfIntermods(instrumentHandle, selectorString, numberOfIntermods);
#else
  return function_pointers_.IMCfgNumberOfIntermods(instrumentHandle, selectorString, numberOfIntermods);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.IMCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.IMCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::IMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.IMCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.IMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::IMFetchFundamentalMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerTonePower, float64* upperTonePower)
{
  if (!function_pointers_.IMFetchFundamentalMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMFetchFundamentalMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMFetchFundamentalMeasurement(instrumentHandle, selectorString, timeout, lowerTonePower, upperTonePower);
#else
  return function_pointers_.IMFetchFundamentalMeasurement(instrumentHandle, selectorString, timeout, lowerTonePower, upperTonePower);
#endif
}

int32 NiRFmxSpecAnLibrary::IMFetchInterceptPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* worstCaseOutputInterceptPower, float64* lowerOutputInterceptPower, float64* upperOutputInterceptPower)
{
  if (!function_pointers_.IMFetchInterceptPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMFetchInterceptPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMFetchInterceptPower(instrumentHandle, selectorString, timeout, intermodOrder, worstCaseOutputInterceptPower, lowerOutputInterceptPower, upperOutputInterceptPower);
#else
  return function_pointers_.IMFetchInterceptPower(instrumentHandle, selectorString, timeout, intermodOrder, worstCaseOutputInterceptPower, lowerOutputInterceptPower, upperOutputInterceptPower);
#endif
}

int32 NiRFmxSpecAnLibrary::IMFetchInterceptPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 worstCaseOutputInterceptPower[], float64 lowerOutputInterceptPower[], float64 upperOutputInterceptPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.IMFetchInterceptPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMFetchInterceptPowerArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMFetchInterceptPowerArray(instrumentHandle, selectorString, timeout, intermodOrder, worstCaseOutputInterceptPower, lowerOutputInterceptPower, upperOutputInterceptPower, arraySize, actualArraySize);
#else
  return function_pointers_.IMFetchInterceptPowerArray(instrumentHandle, selectorString, timeout, intermodOrder, worstCaseOutputInterceptPower, lowerOutputInterceptPower, upperOutputInterceptPower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::IMFetchIntermodMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* lowerIntermodPower, float64* upperIntermodPower)
{
  if (!function_pointers_.IMFetchIntermodMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMFetchIntermodMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMFetchIntermodMeasurement(instrumentHandle, selectorString, timeout, intermodOrder, lowerIntermodPower, upperIntermodPower);
#else
  return function_pointers_.IMFetchIntermodMeasurement(instrumentHandle, selectorString, timeout, intermodOrder, lowerIntermodPower, upperIntermodPower);
#endif
}

int32 NiRFmxSpecAnLibrary::IMFetchIntermodMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 lowerIntermodPower[], float64 upperIntermodPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.IMFetchIntermodMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMFetchIntermodMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMFetchIntermodMeasurementArray(instrumentHandle, selectorString, timeout, intermodOrder, lowerIntermodPower, upperIntermodPower, arraySize, actualArraySize);
#else
  return function_pointers_.IMFetchIntermodMeasurementArray(instrumentHandle, selectorString, timeout, intermodOrder, lowerIntermodPower, upperIntermodPower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::IMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 spectrumIndex, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.IMFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IMFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IMFetchSpectrum(instrumentHandle, selectorString, timeout, spectrumIndex, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.IMFetchSpectrum(instrumentHandle, selectorString, timeout, spectrumIndex, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::IQCfgAcquisition(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 sampleRate, int32 numberOfRecords, float64 acquisitionTime, float64 pretriggerTime)
{
  if (!function_pointers_.IQCfgAcquisition) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IQCfgAcquisition.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IQCfgAcquisition(instrumentHandle, selectorString, sampleRate, numberOfRecords, acquisitionTime, pretriggerTime);
#else
  return function_pointers_.IQCfgAcquisition(instrumentHandle, selectorString, sampleRate, numberOfRecords, acquisitionTime, pretriggerTime);
#endif
}

int32 NiRFmxSpecAnLibrary::IQCfgBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthAuto, float64 bandwidth)
{
  if (!function_pointers_.IQCfgBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IQCfgBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IQCfgBandwidth(instrumentHandle, selectorString, bandwidthAuto, bandwidth);
#else
  return function_pointers_.IQCfgBandwidth(instrumentHandle, selectorString, bandwidthAuto, bandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::IQFetchData(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, float64* t0, float64* dt, NIComplexSingle data[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.IQFetchData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IQFetchData.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IQFetchData(instrumentHandle, selectorString, timeout, recordToFetch, samplesToRead, t0, dt, data, arraySize, actualArraySize);
#else
  return function_pointers_.IQFetchData(instrumentHandle, selectorString, timeout, recordToFetch, samplesToRead, t0, dt, data, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::IQGetRecordsDone(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* recordsDone)
{
  if (!function_pointers_.IQGetRecordsDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IQGetRecordsDone.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_IQGetRecordsDone(instrumentHandle, selectorString, recordsDone);
#else
  return function_pointers_.IQGetRecordsDone(instrumentHandle, selectorString, recordsDone);
#endif
}

int32 NiRFmxSpecAnLibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_Initialize.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_Initialize(resourceName, optionString, handleOut, isNewSession);
#else
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
#endif
}

int32 NiRFmxSpecAnLibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_InitializeFromNIRFSASession.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_InitializeFromNIRFSASession(nirfsaSession, handleOut);
#else
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
#endif
}

int32 NiRFmxSpecAnLibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_Initiate.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_Initiate(instrumentHandle, selectorString, resultName);
#else
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgNumberOfMarkers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfMarkers)
{
  if (!function_pointers_.MarkerCfgNumberOfMarkers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgNumberOfMarkers.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgNumberOfMarkers(instrumentHandle, selectorString, numberOfMarkers);
#else
  return function_pointers_.MarkerCfgNumberOfMarkers(instrumentHandle, selectorString, numberOfMarkers);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgPeakExcursion(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 peakExcursionEnabled, float64 peakExcursion)
{
  if (!function_pointers_.MarkerCfgPeakExcursion) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgPeakExcursion.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgPeakExcursion(instrumentHandle, selectorString, peakExcursionEnabled, peakExcursion);
#else
  return function_pointers_.MarkerCfgPeakExcursion(instrumentHandle, selectorString, peakExcursionEnabled, peakExcursion);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgReferenceMarker(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceMarker)
{
  if (!function_pointers_.MarkerCfgReferenceMarker) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgReferenceMarker.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgReferenceMarker(instrumentHandle, selectorString, referenceMarker);
#else
  return function_pointers_.MarkerCfgReferenceMarker(instrumentHandle, selectorString, referenceMarker);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 threshold)
{
  if (!function_pointers_.MarkerCfgThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgThreshold.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, threshold);
#else
  return function_pointers_.MarkerCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, threshold);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 trace)
{
  if (!function_pointers_.MarkerCfgTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgTrace(instrumentHandle, selectorString, trace);
#else
  return function_pointers_.MarkerCfgTrace(instrumentHandle, selectorString, trace);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 markerType)
{
  if (!function_pointers_.MarkerCfgType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgType(instrumentHandle, selectorString, markerType);
#else
  return function_pointers_.MarkerCfgType(instrumentHandle, selectorString, markerType);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerCfgXLocation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerXLocation)
{
  if (!function_pointers_.MarkerCfgXLocation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerCfgXLocation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerCfgXLocation(instrumentHandle, selectorString, markerXLocation);
#else
  return function_pointers_.MarkerCfgXLocation(instrumentHandle, selectorString, markerXLocation);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerFetchXY(niRFmxInstrHandle instrumentHandle, char selectorString[], float64* markerXLocation, float64* markerYLocation)
{
  if (!function_pointers_.MarkerFetchXY) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerFetchXY.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerFetchXY(instrumentHandle, selectorString, markerXLocation, markerYLocation);
#else
  return function_pointers_.MarkerFetchXY(instrumentHandle, selectorString, markerXLocation, markerYLocation);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerNextPeak(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nextPeak, int32* nextPeakFound)
{
  if (!function_pointers_.MarkerNextPeak) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerNextPeak.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerNextPeak(instrumentHandle, selectorString, nextPeak, nextPeakFound);
#else
  return function_pointers_.MarkerNextPeak(instrumentHandle, selectorString, nextPeak, nextPeakFound);
#endif
}

int32 NiRFmxSpecAnLibrary::MarkerPeakSearch(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* numberOfPeaks)
{
  if (!function_pointers_.MarkerPeakSearch) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_MarkerPeakSearch.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_MarkerPeakSearch(instrumentHandle, selectorString, numberOfPeaks);
#else
  return function_pointers_.MarkerPeakSearch(instrumentHandle, selectorString, numberOfPeaks);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.NFCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
#else
  return function_pointers_.NFCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgCalibrationLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 calibrationLossCompensationEnabled, float64 calibrationLossFrequency[], float64 calibrationLoss[], float64 calibrationLossTemperature, int32 arraySize)
{
  if (!function_pointers_.NFCfgCalibrationLoss) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgCalibrationLoss.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgCalibrationLoss(instrumentHandle, selectorString, calibrationLossCompensationEnabled, calibrationLossFrequency, calibrationLoss, calibrationLossTemperature, arraySize);
#else
  return function_pointers_.NFCfgCalibrationLoss(instrumentHandle, selectorString, calibrationLossCompensationEnabled, calibrationLossFrequency, calibrationLoss, calibrationLossTemperature, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgColdSourceDUTSParameters(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutsParametersFrequency[], float64 duts21[], float64 duts12[], float64 duts11[], float64 duts22[], int32 arraySize)
{
  if (!function_pointers_.NFCfgColdSourceDUTSParameters) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgColdSourceDUTSParameters.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgColdSourceDUTSParameters(instrumentHandle, selectorString, dutsParametersFrequency, duts21, duts12, duts11, duts22, arraySize);
#else
  return function_pointers_.NFCfgColdSourceDUTSParameters(instrumentHandle, selectorString, dutsParametersFrequency, duts21, duts12, duts11, duts22, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgColdSourceInputTermination(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 terminationVSWR[], float64 terminationVSWRFrequency[], float64 terminationTemperature, int32 arraySize)
{
  if (!function_pointers_.NFCfgColdSourceInputTermination) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgColdSourceInputTermination.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgColdSourceInputTermination(instrumentHandle, selectorString, terminationVSWR, terminationVSWRFrequency, terminationTemperature, arraySize);
#else
  return function_pointers_.NFCfgColdSourceInputTermination(instrumentHandle, selectorString, terminationVSWR, terminationVSWRFrequency, terminationTemperature, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgColdSourceMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 coldSourceMode)
{
  if (!function_pointers_.NFCfgColdSourceMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgColdSourceMode.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgColdSourceMode(instrumentHandle, selectorString, coldSourceMode);
#else
  return function_pointers_.NFCfgColdSourceMode(instrumentHandle, selectorString, coldSourceMode);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgDUTInputLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutInputLossCompensationEnabled, float64 dutInputLossFrequency[], float64 dutInputLoss[], float64 dutInputLossTemperature, int32 arraySize)
{
  if (!function_pointers_.NFCfgDUTInputLoss) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgDUTInputLoss.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgDUTInputLoss(instrumentHandle, selectorString, dutInputLossCompensationEnabled, dutInputLossFrequency, dutInputLoss, dutInputLossTemperature, arraySize);
#else
  return function_pointers_.NFCfgDUTInputLoss(instrumentHandle, selectorString, dutInputLossCompensationEnabled, dutInputLossFrequency, dutInputLoss, dutInputLossTemperature, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgDUTOutputLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutOutputLossCompensationEnabled, float64 dutOutputLossFrequency[], float64 dutOutputLoss[], float64 dutOutputLossTemperature, int32 arraySize)
{
  if (!function_pointers_.NFCfgDUTOutputLoss) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgDUTOutputLoss.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgDUTOutputLoss(instrumentHandle, selectorString, dutOutputLossCompensationEnabled, dutOutputLossFrequency, dutOutputLoss, dutOutputLossTemperature, arraySize);
#else
  return function_pointers_.NFCfgDUTOutputLoss(instrumentHandle, selectorString, dutOutputLossCompensationEnabled, dutOutputLossFrequency, dutOutputLoss, dutOutputLossTemperature, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgFrequencyList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize)
{
  if (!function_pointers_.NFCfgFrequencyList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgFrequencyList.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgFrequencyList(instrumentHandle, selectorString, frequencyList, arraySize);
#else
  return function_pointers_.NFCfgFrequencyList(instrumentHandle, selectorString, frequencyList, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgFrequencyListStartStopPoints(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 numberOfPoints)
{
  if (!function_pointers_.NFCfgFrequencyListStartStopPoints) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgFrequencyList_StartStopPoints.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgFrequencyList_StartStopPoints(instrumentHandle, selectorString, startFrequency, stopFrequency, numberOfPoints);
#else
  return function_pointers_.NFCfgFrequencyListStartStopPoints(instrumentHandle, selectorString, startFrequency, stopFrequency, numberOfPoints);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgFrequencyListStartStopStep(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 stepSize)
{
  if (!function_pointers_.NFCfgFrequencyListStartStopStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgFrequencyList_StartStopStep.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgFrequencyList_StartStopStep(instrumentHandle, selectorString, startFrequency, stopFrequency, stepSize);
#else
  return function_pointers_.NFCfgFrequencyListStartStopStep(instrumentHandle, selectorString, startFrequency, stopFrequency, stepSize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgMeasurementBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth)
{
  if (!function_pointers_.NFCfgMeasurementBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgMeasurementBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgMeasurementBandwidth(instrumentHandle, selectorString, measurementBandwidth);
#else
  return function_pointers_.NFCfgMeasurementBandwidth(instrumentHandle, selectorString, measurementBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.NFCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.NFCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.NFCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgMeasurementMethod.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#else
  return function_pointers_.NFCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgYFactorMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 yFactorMode)
{
  if (!function_pointers_.NFCfgYFactorMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgYFactorMode.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgYFactorMode(instrumentHandle, selectorString, yFactorMode);
#else
  return function_pointers_.NFCfgYFactorMode(instrumentHandle, selectorString, yFactorMode);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgYFactorNoiseSourceENR(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 enrFrequency[], float64 enr[], float64 coldTemperature, float64 offTemperature, int32 arraySize)
{
  if (!function_pointers_.NFCfgYFactorNoiseSourceENR) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgYFactorNoiseSourceENR.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgYFactorNoiseSourceENR(instrumentHandle, selectorString, enrFrequency, enr, coldTemperature, offTemperature, arraySize);
#else
  return function_pointers_.NFCfgYFactorNoiseSourceENR(instrumentHandle, selectorString, enrFrequency, enr, coldTemperature, offTemperature, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgYFactorNoiseSourceLoss(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseSourceLossCompensationEnabled, float64 noiseSourceLossFrequency[], float64 noiseSourceLoss[], float64 noiseSourceLossTemperature, int32 arraySize)
{
  if (!function_pointers_.NFCfgYFactorNoiseSourceLoss) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgYFactorNoiseSourceLoss.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgYFactorNoiseSourceLoss(instrumentHandle, selectorString, noiseSourceLossCompensationEnabled, noiseSourceLossFrequency, noiseSourceLoss, noiseSourceLossTemperature, arraySize);
#else
  return function_pointers_.NFCfgYFactorNoiseSourceLoss(instrumentHandle, selectorString, noiseSourceLossCompensationEnabled, noiseSourceLossFrequency, noiseSourceLoss, noiseSourceLossTemperature, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFCfgYFactorNoiseSourceSettlingTime(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 settlingTime)
{
  if (!function_pointers_.NFCfgYFactorNoiseSourceSettlingTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFCfgYFactorNoiseSourceSettlingTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFCfgYFactorNoiseSourceSettlingTime(instrumentHandle, selectorString, settlingTime);
#else
  return function_pointers_.NFCfgYFactorNoiseSourceSettlingTime(instrumentHandle, selectorString, settlingTime);
#endif
}

int32 NiRFmxSpecAnLibrary::NFClearCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char calibrationSetupID[])
{
  if (!function_pointers_.NFClearCalibrationDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFClearCalibrationDatabase.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFClearCalibrationDatabase(instrumentHandle, calibrationSetupID);
#else
  return function_pointers_.NFClearCalibrationDatabase(instrumentHandle, calibrationSetupID);
#endif
}

int32 NiRFmxSpecAnLibrary::NFFetchAnalyzerNoiseFigure(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 analyzerNoiseFigure[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.NFFetchAnalyzerNoiseFigure) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFFetchAnalyzerNoiseFigure.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFFetchAnalyzerNoiseFigure(instrumentHandle, selectorString, timeout, analyzerNoiseFigure, arraySize, actualArraySize);
#else
  return function_pointers_.NFFetchAnalyzerNoiseFigure(instrumentHandle, selectorString, timeout, analyzerNoiseFigure, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFFetchColdSourcePower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 coldSourcePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.NFFetchColdSourcePower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFFetchColdSourcePower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFFetchColdSourcePower(instrumentHandle, selectorString, timeout, coldSourcePower, arraySize, actualArraySize);
#else
  return function_pointers_.NFFetchColdSourcePower(instrumentHandle, selectorString, timeout, coldSourcePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFFetchDUTNoiseFigureAndGain(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 dutNoiseFigure[], float64 dutNoiseTemperature[], float64 dutGain[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.NFFetchDUTNoiseFigureAndGain) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFFetchDUTNoiseFigureAndGain.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFFetchDUTNoiseFigureAndGain(instrumentHandle, selectorString, timeout, dutNoiseFigure, dutNoiseTemperature, dutGain, arraySize, actualArraySize);
#else
  return function_pointers_.NFFetchDUTNoiseFigureAndGain(instrumentHandle, selectorString, timeout, dutNoiseFigure, dutNoiseTemperature, dutGain, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFFetchYFactorPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 hotPower[], float64 coldPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.NFFetchYFactorPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFFetchYFactorPowers.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFFetchYFactorPowers(instrumentHandle, selectorString, timeout, hotPower, coldPower, arraySize, actualArraySize);
#else
  return function_pointers_.NFFetchYFactorPowers(instrumentHandle, selectorString, timeout, hotPower, coldPower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFFetchYFactors(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 measurementYFactor[], float64 calibrationYFactor[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.NFFetchYFactors) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFFetchYFactors.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFFetchYFactors(instrumentHandle, selectorString, timeout, measurementYFactor, calibrationYFactor, arraySize, actualArraySize);
#else
  return function_pointers_.NFFetchYFactors(instrumentHandle, selectorString, timeout, measurementYFactor, calibrationYFactor, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::NFRecommendReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutMaxGain, float64 dutMaxNoiseFigure, float64* referenceLevel)
{
  if (!function_pointers_.NFRecommendReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFRecommendReferenceLevel.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFRecommendReferenceLevel(instrumentHandle, selectorString, dutMaxGain, dutMaxNoiseFigure, referenceLevel);
#else
  return function_pointers_.NFRecommendReferenceLevel(instrumentHandle, selectorString, dutMaxGain, dutMaxNoiseFigure, referenceLevel);
#endif
}

int32 NiRFmxSpecAnLibrary::NFValidateCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid)
{
  if (!function_pointers_.NFValidateCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_NFValidateCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_NFValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
#else
  return function_pointers_.NFValidateCalibrationData(instrumentHandle, selectorString, calibrationDataValid);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.OBWCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgBandwidthPercentage(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidthPercentage)
{
  if (!function_pointers_.OBWCfgBandwidthPercentage) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgBandwidthPercentage.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgBandwidthPercentage(instrumentHandle, selectorString, bandwidthPercentage);
#else
  return function_pointers_.OBWCfgBandwidthPercentage(instrumentHandle, selectorString, bandwidthPercentage);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  if (!function_pointers_.OBWCfgFFT) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgFFT.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#else
  return function_pointers_.OBWCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  if (!function_pointers_.OBWCfgPowerUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgPowerUnits.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#else
  return function_pointers_.OBWCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.OBWCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  if (!function_pointers_.OBWCfgSpan) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgSpan.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgSpan(instrumentHandle, selectorString, span);
#else
  return function_pointers_.OBWCfgSpan(instrumentHandle, selectorString, span);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.OBWCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency)
{
  if (!function_pointers_.OBWFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, averagePower, frequencyResolution, startFrequency, stopFrequency);
#else
  return function_pointers_.OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, averagePower, frequencyResolution, startFrequency, stopFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWFetchSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OBWFetchSpectrumTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWFetchSpectrumTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWFetchSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.OBWFetchSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::OBWRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency)
{
  if (!function_pointers_.OBWRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_OBWRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_OBWRead(instrumentHandle, selectorString, timeout, occupiedBandwidth, averagePower, frequencyResolution, startFrequency, stopFrequency);
#else
  return function_pointers_.OBWRead(instrumentHandle, selectorString, timeout, occupiedBandwidth, averagePower, frequencyResolution, startFrequency, stopFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgMeasurementBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth)
{
  if (!function_pointers_.PAVTCfgMeasurementBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgMeasurementBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgMeasurementBandwidth(instrumentHandle, selectorString, measurementBandwidth);
#else
  return function_pointers_.PAVTCfgMeasurementBandwidth(instrumentHandle, selectorString, measurementBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurermentOffset, float64 measurermentLength)
{
  if (!function_pointers_.PAVTCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgMeasurementInterval(instrumentHandle, selectorString, measurermentOffset, measurermentLength);
#else
  return function_pointers_.PAVTCfgMeasurementInterval(instrumentHandle, selectorString, measurermentOffset, measurermentLength);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgMeasurementIntervalMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementIntervalMode)
{
  if (!function_pointers_.PAVTCfgMeasurementIntervalMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgMeasurementIntervalMode.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgMeasurementIntervalMode(instrumentHandle, selectorString, measurementIntervalMode);
#else
  return function_pointers_.PAVTCfgMeasurementIntervalMode(instrumentHandle, selectorString, measurementIntervalMode);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgMeasurementLocationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementLocationType)
{
  if (!function_pointers_.PAVTCfgMeasurementLocationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgMeasurementLocationType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgMeasurementLocationType(instrumentHandle, selectorString, measurementLocationType);
#else
  return function_pointers_.PAVTCfgMeasurementLocationType(instrumentHandle, selectorString, measurementLocationType);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgNumberOfSegments(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments)
{
  if (!function_pointers_.PAVTCfgNumberOfSegments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgNumberOfSegments.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgNumberOfSegments(instrumentHandle, selectorString, numberOfSegments);
#else
  return function_pointers_.PAVTCfgNumberOfSegments(instrumentHandle, selectorString, numberOfSegments);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgSegmentMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset, float64 segmentMeasurementLength)
{
  if (!function_pointers_.PAVTCfgSegmentMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgSegmentMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgSegmentMeasurementInterval(instrumentHandle, selectorString, segmentMeasurementOffset, segmentMeasurementLength);
#else
  return function_pointers_.PAVTCfgSegmentMeasurementInterval(instrumentHandle, selectorString, segmentMeasurementOffset, segmentMeasurementLength);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgSegmentMeasurementIntervalArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset[], float64 segmentMeasurementLength[], int32 numberOfElements)
{
  if (!function_pointers_.PAVTCfgSegmentMeasurementIntervalArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgSegmentMeasurementIntervalArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgSegmentMeasurementIntervalArray(instrumentHandle, selectorString, segmentMeasurementOffset, segmentMeasurementLength, numberOfElements);
#else
  return function_pointers_.PAVTCfgSegmentMeasurementIntervalArray(instrumentHandle, selectorString, segmentMeasurementOffset, segmentMeasurementLength, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgSegmentStartTimeList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentStartTime[], int32 numberOfElements)
{
  if (!function_pointers_.PAVTCfgSegmentStartTimeList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgSegmentStartTimeList.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgSegmentStartTimeList(instrumentHandle, selectorString, segmentStartTime, numberOfElements);
#else
  return function_pointers_.PAVTCfgSegmentStartTimeList(instrumentHandle, selectorString, segmentStartTime, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgSegmentStartTimeStep(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments, float64 segment0StartTime, float64 segmentInterval)
{
  if (!function_pointers_.PAVTCfgSegmentStartTimeStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgSegmentStartTimeStep.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgSegmentStartTimeStep(instrumentHandle, selectorString, numberOfSegments, segment0StartTime, segmentInterval);
#else
  return function_pointers_.PAVTCfgSegmentStartTimeStep(instrumentHandle, selectorString, numberOfSegments, segment0StartTime, segmentInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgSegmentType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType)
{
  if (!function_pointers_.PAVTCfgSegmentType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgSegmentType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgSegmentType(instrumentHandle, selectorString, segmentType);
#else
  return function_pointers_.PAVTCfgSegmentType(instrumentHandle, selectorString, segmentType);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTCfgSegmentTypeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType[], int32 numberOfElements)
{
  if (!function_pointers_.PAVTCfgSegmentTypeArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTCfgSegmentTypeArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTCfgSegmentTypeArray(instrumentHandle, selectorString, segmentType, numberOfElements);
#else
  return function_pointers_.PAVTCfgSegmentTypeArray(instrumentHandle, selectorString, segmentType, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTFetchAmplitudeTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 amplitude[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PAVTFetchAmplitudeTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTFetchAmplitudeTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTFetchAmplitudeTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, amplitude, arraySize, actualArraySize);
#else
  return function_pointers_.PAVTFetchAmplitudeTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, amplitude, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTFetchPhaseAndAmplitude(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRelativePhase, float64* meanRelativeAmplitude, float64* meanAbsolutePhase, float64* meanAbsoluteAmplitude)
{
  if (!function_pointers_.PAVTFetchPhaseAndAmplitude) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTFetchPhaseAndAmplitude.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTFetchPhaseAndAmplitude(instrumentHandle, selectorString, timeout, meanRelativePhase, meanRelativeAmplitude, meanAbsolutePhase, meanAbsoluteAmplitude);
#else
  return function_pointers_.PAVTFetchPhaseAndAmplitude(instrumentHandle, selectorString, timeout, meanRelativePhase, meanRelativeAmplitude, meanAbsolutePhase, meanAbsoluteAmplitude);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTFetchPhaseAndAmplitudeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRelativePhase[], float64 meanRelativeAmplitude[], float64 meanAbsolutePhase[], float64 meanAbsoluteAmplitude[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PAVTFetchPhaseAndAmplitudeArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTFetchPhaseAndAmplitudeArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTFetchPhaseAndAmplitudeArray(instrumentHandle, selectorString, timeout, meanRelativePhase, meanRelativeAmplitude, meanAbsolutePhase, meanAbsoluteAmplitude, arraySize, actualArraySize);
#else
  return function_pointers_.PAVTFetchPhaseAndAmplitudeArray(instrumentHandle, selectorString, timeout, meanRelativePhase, meanRelativeAmplitude, meanAbsolutePhase, meanAbsoluteAmplitude, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PAVTFetchPhaseTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 phase[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PAVTFetchPhaseTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PAVTFetchPhaseTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PAVTFetchPhaseTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, phase, arraySize, actualArraySize);
#else
  return function_pointers_.PAVTFetchPhaseTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, phase, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgAutoRange(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 rbwPercentage)
{
  if (!function_pointers_.PhaseNoiseCfgAutoRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgAutoRange.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgAutoRange(instrumentHandle, selectorString, startFrequency, stopFrequency, rbwPercentage);
#else
  return function_pointers_.PhaseNoiseCfgAutoRange(instrumentHandle, selectorString, startFrequency, stopFrequency, rbwPercentage);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgAveragingMultiplier(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingMultiplier)
{
  if (!function_pointers_.PhaseNoiseCfgAveragingMultiplier) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgAveragingMultiplier.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgAveragingMultiplier(instrumentHandle, selectorString, averagingMultiplier);
#else
  return function_pointers_.PhaseNoiseCfgAveragingMultiplier(instrumentHandle, selectorString, averagingMultiplier);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgCancellation(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cancellationEnabled, float64 cancellationThreshold, float32 frequency[], float32 referencePhaseNoise[], int32 arraySize)
{
  if (!function_pointers_.PhaseNoiseCfgCancellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgCancellation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgCancellation(instrumentHandle, selectorString, cancellationEnabled, cancellationThreshold, frequency, referencePhaseNoise, arraySize);
#else
  return function_pointers_.PhaseNoiseCfgCancellation(instrumentHandle, selectorString, cancellationEnabled, cancellationThreshold, frequency, referencePhaseNoise, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgIntegratedNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integratedNoiseRangeDefinition, float64 integratedNoiseStartFrequency[], float64 integratedNoiseStopFrequency[], int32 arraySize)
{
  if (!function_pointers_.PhaseNoiseCfgIntegratedNoise) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgIntegratedNoise.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgIntegratedNoise(instrumentHandle, selectorString, integratedNoiseRangeDefinition, integratedNoiseStartFrequency, integratedNoiseStopFrequency, arraySize);
#else
  return function_pointers_.PhaseNoiseCfgIntegratedNoise(instrumentHandle, selectorString, integratedNoiseRangeDefinition, integratedNoiseStartFrequency, integratedNoiseStopFrequency, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgNumberOfRanges(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges)
{
  if (!function_pointers_.PhaseNoiseCfgNumberOfRanges) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgNumberOfRanges.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgNumberOfRanges(instrumentHandle, selectorString, numberOfRanges);
#else
  return function_pointers_.PhaseNoiseCfgNumberOfRanges(instrumentHandle, selectorString, numberOfRanges);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgRangeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rangeStartFrequency[], float64 rangeStopFrequency[], float64 rangeRBWPercentage[], int32 rangeAveragingCount[], int32 numberOfElements)
{
  if (!function_pointers_.PhaseNoiseCfgRangeArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgRangeArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgRangeArray(instrumentHandle, selectorString, rangeStartFrequency, rangeStopFrequency, rangeRBWPercentage, rangeAveragingCount, numberOfElements);
#else
  return function_pointers_.PhaseNoiseCfgRangeArray(instrumentHandle, selectorString, rangeStartFrequency, rangeStopFrequency, rangeRBWPercentage, rangeAveragingCount, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgRangeDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rangeDefinition)
{
  if (!function_pointers_.PhaseNoiseCfgRangeDefinition) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgRangeDefinition.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgRangeDefinition(instrumentHandle, selectorString, rangeDefinition);
#else
  return function_pointers_.PhaseNoiseCfgRangeDefinition(instrumentHandle, selectorString, rangeDefinition);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgSmoothing(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 smoothingType, float64 smoothingPercentage)
{
  if (!function_pointers_.PhaseNoiseCfgSmoothing) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgSmoothing.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgSmoothing(instrumentHandle, selectorString, smoothingType, smoothingPercentage);
#else
  return function_pointers_.PhaseNoiseCfgSmoothing(instrumentHandle, selectorString, smoothingType, smoothingPercentage);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgSpotNoiseFrequencyList(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize)
{
  if (!function_pointers_.PhaseNoiseCfgSpotNoiseFrequencyList) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgSpotNoiseFrequencyList.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgSpotNoiseFrequencyList(instrumentHandle, selectorString, frequencyList, arraySize);
#else
  return function_pointers_.PhaseNoiseCfgSpotNoiseFrequencyList(instrumentHandle, selectorString, frequencyList, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseCfgSpurRemoval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spurRemovalEnabled, float64 peakExcursion)
{
  if (!function_pointers_.PhaseNoiseCfgSpurRemoval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseCfgSpurRemoval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseCfgSpurRemoval(instrumentHandle, selectorString, spurRemovalEnabled, peakExcursion);
#else
  return function_pointers_.PhaseNoiseCfgSpurRemoval(instrumentHandle, selectorString, spurRemovalEnabled, peakExcursion);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierFrequency, float64* carrierPower)
{
  if (!function_pointers_.PhaseNoiseFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseFetchCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, carrierFrequency, carrierPower);
#else
  return function_pointers_.PhaseNoiseFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, carrierFrequency, carrierPower);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseFetchIntegratedNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 integratedPhaseNoise[], float64 residualPMInRadian[], float64 residualPMInDegree[], float64 residualFM[], float64 jitter[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PhaseNoiseFetchIntegratedNoise) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseFetchIntegratedNoise.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseFetchIntegratedNoise(instrumentHandle, selectorString, timeout, integratedPhaseNoise, residualPMInRadian, residualPMInDegree, residualFM, jitter, arraySize, actualArraySize);
#else
  return function_pointers_.PhaseNoiseFetchIntegratedNoise(instrumentHandle, selectorString, timeout, integratedPhaseNoise, residualPMInRadian, residualPMInDegree, residualFM, jitter, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseFetchMeasuredLogPlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 measuredPhaseNoise[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PhaseNoiseFetchMeasuredLogPlotTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseFetchMeasuredLogPlotTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseFetchMeasuredLogPlotTrace(instrumentHandle, selectorString, timeout, frequency, measuredPhaseNoise, arraySize, actualArraySize);
#else
  return function_pointers_.PhaseNoiseFetchMeasuredLogPlotTrace(instrumentHandle, selectorString, timeout, frequency, measuredPhaseNoise, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseFetchSmoothedLogPlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 smoothedPhaseNoise[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PhaseNoiseFetchSmoothedLogPlotTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseFetchSmoothedLogPlotTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseFetchSmoothedLogPlotTrace(instrumentHandle, selectorString, timeout, frequency, smoothedPhaseNoise, arraySize, actualArraySize);
#else
  return function_pointers_.PhaseNoiseFetchSmoothedLogPlotTrace(instrumentHandle, selectorString, timeout, frequency, smoothedPhaseNoise, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::PhaseNoiseFetchSpotNoise(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spotPhaseNoise[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PhaseNoiseFetchSpotNoise) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_PhaseNoiseFetchSpotNoise.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_PhaseNoiseFetchSpotNoise(instrumentHandle, selectorString, timeout, spotPhaseNoise, arraySize, actualArraySize);
#else
  return function_pointers_.PhaseNoiseFetchSpotNoise(instrumentHandle, selectorString, timeout, spotPhaseNoise, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ResetAttribute.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ResetAttribute(instrumentHandle, selectorString, attributeID);
#else
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
#endif
}

int32 NiRFmxSpecAnLibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_ResetToDefault.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_ResetToDefault(instrumentHandle, selectorString);
#else
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.SEMCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgCarrierChannelBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierChannelBandwidth)
{
  if (!function_pointers_.SEMCfgCarrierChannelBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgCarrierChannelBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgCarrierChannelBandwidth(instrumentHandle, selectorString, carrierChannelBandwidth);
#else
  return function_pointers_.SEMCfgCarrierChannelBandwidth(instrumentHandle, selectorString, carrierChannelBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgCarrierEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierEnabled)
{
  if (!function_pointers_.SEMCfgCarrierEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgCarrierEnabled.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgCarrierEnabled(instrumentHandle, selectorString, carrierEnabled);
#else
  return function_pointers_.SEMCfgCarrierEnabled(instrumentHandle, selectorString, carrierEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgCarrierFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency)
{
  if (!function_pointers_.SEMCfgCarrierFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgCarrierFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgCarrierFrequency(instrumentHandle, selectorString, carrierFrequency);
#else
  return function_pointers_.SEMCfgCarrierFrequency(instrumentHandle, selectorString, carrierFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth)
{
  if (!function_pointers_.SEMCfgCarrierIntegrationBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgCarrierIntegrationBandwidth.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgCarrierIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#else
  return function_pointers_.SEMCfgCarrierIntegrationBandwidth(instrumentHandle, selectorString, integrationBandwidth);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgCarrierRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.SEMCfgCarrierRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgCarrierRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgCarrierRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.SEMCfgCarrierRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgCarrierRRCFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha)
{
  if (!function_pointers_.SEMCfgCarrierRRCFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgCarrierRRCFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgCarrierRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#else
  return function_pointers_.SEMCfgCarrierRRCFilter(instrumentHandle, selectorString, rrcFilterEnabled, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  if (!function_pointers_.SEMCfgFFT) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgFFT.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#else
  return function_pointers_.SEMCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgNumberOfCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers)
{
  if (!function_pointers_.SEMCfgNumberOfCarriers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgNumberOfCarriers.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
#else
  return function_pointers_.SEMCfgNumberOfCarriers(instrumentHandle, selectorString, numberOfCarriers);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  if (!function_pointers_.SEMCfgNumberOfOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgNumberOfOffsets.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
#else
  return function_pointers_.SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop)
{
  if (!function_pointers_.SEMCfgOffsetAbsoluteLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetAbsoluteLimit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop);
#else
  return function_pointers_.SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetAbsoluteLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetAbsoluteLimitArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral)
{
  if (!function_pointers_.SEMCfgOffsetBandwidthIntegral) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetBandwidthIntegral.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, bandwidthIntegral);
#else
  return function_pointers_.SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, bandwidthIntegral);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetEnabled, int32 offsetSideband)
{
  if (!function_pointers_.SEMCfgOffsetFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetEnabled, offsetSideband);
#else
  return function_pointers_.SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetEnabled, offsetSideband);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetEnabled[], int32 offsetSideband[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetFrequencyArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetEnabled, offsetSideband, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetEnabled, offsetSideband, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition)
{
  if (!function_pointers_.SEMCfgOffsetFrequencyDefinition) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetFrequencyDefinition.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetFrequencyDefinition(instrumentHandle, selectorString, offsetFrequencyDefinition);
#else
  return function_pointers_.SEMCfgOffsetFrequencyDefinition(instrumentHandle, selectorString, offsetFrequencyDefinition);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask)
{
  if (!function_pointers_.SEMCfgOffsetLimitFailMask) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetLimitFailMask.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
#else
  return function_pointers_.SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.SEMCfgOffsetRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRBWFilterArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetRBWFilterArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation)
{
  if (!function_pointers_.SEMCfgOffsetRelativeAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetRelativeAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
#else
  return function_pointers_.SEMCfgOffsetRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRelativeAttenuationArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetRelativeAttenuationArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode, float64 relativeLimitStart, float64 relativeLimitStop)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetRelativeLimit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitMode, relativeLimitStart, relativeLimitStop);
#else
  return function_pointers_.SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitMode, relativeLimitStart, relativeLimitStop);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgOffsetRelativeLimitArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitMode, relativeLimitStart, relativeLimitStop, numberOfElements);
#else
  return function_pointers_.SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitMode, relativeLimitStart, relativeLimitStop, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  if (!function_pointers_.SEMCfgPowerUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgPowerUnits.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#else
  return function_pointers_.SEMCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgReferenceType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceType)
{
  if (!function_pointers_.SEMCfgReferenceType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgReferenceType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgReferenceType(instrumentHandle, selectorString, referenceType);
#else
  return function_pointers_.SEMCfgReferenceType(instrumentHandle, selectorString, referenceType);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.SEMCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchAbsoluteMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchAbsoluteMaskTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchAbsoluteMaskTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchAbsoluteMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, absoluteMask, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchAbsoluteMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, absoluteMask, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* totalRelativePower)
{
  if (!function_pointers_.SEMFetchCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchCarrierMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, totalRelativePower);
#else
  return function_pointers_.SEMFetchCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, peakAbsolutePower, peakFrequency, totalRelativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchCompositeMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* compositeMeasurementStatus)
{
  if (!function_pointers_.SEMFetchCompositeMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchCompositeMeasurementStatus.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchCompositeMeasurementStatus(instrumentHandle, selectorString, timeout, compositeMeasurementStatus);
#else
  return function_pointers_.SEMFetchCompositeMeasurementStatus(instrumentHandle, selectorString, timeout, compositeMeasurementStatus);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchFrequencyResolution(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution)
{
  if (!function_pointers_.SEMFetchFrequencyResolution) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchFrequencyResolution.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchFrequencyResolution(instrumentHandle, selectorString, timeout, frequencyResolution);
#else
  return function_pointers_.SEMFetchFrequencyResolution(instrumentHandle, selectorString, timeout, frequencyResolution);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchLowerOffsetMargin.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#else
  return function_pointers_.SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchLowerOffsetMarginArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchLowerOffsetPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#else
  return function_pointers_.SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchLowerOffsetPowerArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchRelativeMaskTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativeMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchRelativeMaskTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchRelativeMaskTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchRelativeMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, relativeMask, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchRelativeMaskTrace(instrumentHandle, selectorString, timeout, x0, dx, relativeMask, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchTotalCarrierPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower)
{
  if (!function_pointers_.SEMFetchTotalCarrierPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchTotalCarrierPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
#else
  return function_pointers_.SEMFetchTotalCarrierPower(instrumentHandle, selectorString, timeout, totalCarrierPower);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchUpperOffsetMargin.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#else
  return function_pointers_.SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchUpperOffsetMarginArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchUpperOffsetPower.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#else
  return function_pointers_.SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower);
#endif
}

int32 NiRFmxSpecAnLibrary::SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SEMFetchUpperOffsetPowerArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#else
  return function_pointers_.SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, totalAbsolutePower, totalRelativePower, peakAbsolutePower, peakFrequency, peakRelativePower, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SelectMeasurements.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
#else
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
#endif
}

int32 NiRFmxSpecAnLibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SendSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SendSoftwareEdgeTrigger(instrumentHandle);
#else
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeF32.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeF32Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeF64.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeF64Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI16.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI32.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI32Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI64.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI64Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI8.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeI8Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeNIComplexDoubleArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeNIComplexSingleArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeString.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeU16.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeU32.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeU32Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeU64Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeU8.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#else
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
#endif
}

int32 NiRFmxSpecAnLibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SetAttributeU8Array.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#else
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.SpectrumCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.SpectrumCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints)
{
  if (!function_pointers_.SpectrumCfgDetector) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgDetector.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
#else
  return function_pointers_.SpectrumCfgDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgFFT(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding)
{
  if (!function_pointers_.SpectrumCfgFFT) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgFFT.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#else
  return function_pointers_.SpectrumCfgFFT(instrumentHandle, selectorString, fftWindow, fftPadding);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgFrequencyStartStop(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency)
{
  if (!function_pointers_.SpectrumCfgFrequencyStartStop) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgFrequencyStartStop.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgFrequencyStartStop(instrumentHandle, selectorString, startFrequency, stopFrequency);
#else
  return function_pointers_.SpectrumCfgFrequencyStartStop(instrumentHandle, selectorString, startFrequency, stopFrequency);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.SpectrumCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgNoiseCompensationEnabled.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#else
  return function_pointers_.SpectrumCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumPowerUnits)
{
  if (!function_pointers_.SpectrumCfgPowerUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgPowerUnits.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgPowerUnits(instrumentHandle, selectorString, spectrumPowerUnits);
#else
  return function_pointers_.SpectrumCfgPowerUnits(instrumentHandle, selectorString, spectrumPowerUnits);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.SpectrumCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.SpectrumCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgSpan(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span)
{
  if (!function_pointers_.SpectrumCfgSpan) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgSpan.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgSpan(instrumentHandle, selectorString, span);
#else
  return function_pointers_.SpectrumCfgSpan(instrumentHandle, selectorString, span);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.SpectrumCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.SpectrumCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumCfgVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio)
{
  if (!function_pointers_.SpectrumCfgVBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumCfgVBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumCfgVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
#else
  return function_pointers_.SpectrumCfgVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakAmplitude, float64* peakFrequency, float64* frequencyResolution)
{
  if (!function_pointers_.SpectrumFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumFetchMeasurement(instrumentHandle, selectorString, timeout, peakAmplitude, peakFrequency, frequencyResolution);
#else
  return function_pointers_.SpectrumFetchMeasurement(instrumentHandle, selectorString, timeout, peakAmplitude, peakFrequency, frequencyResolution);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpectrumFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumFetchPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#else
  return function_pointers_.SpectrumFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpectrumFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumFetchSpectrum.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.SpectrumFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpectrumRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumRead(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#else
  return function_pointers_.SpectrumRead(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpectrumValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.SpectrumValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpectrumValidateNoiseCalibrationData.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpectrumValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#else
  return function_pointers_.SpectrumValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.SpurCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.SpurCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgFFTWindowType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow)
{
  if (!function_pointers_.SpurCfgFFTWindowType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgFFTWindowType.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgFFTWindowType(instrumentHandle, selectorString, fftWindow);
#else
  return function_pointers_.SpurCfgFFTWindowType(instrumentHandle, selectorString, fftWindow);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgNumberOfRanges(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges)
{
  if (!function_pointers_.SpurCfgNumberOfRanges) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgNumberOfRanges.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgNumberOfRanges(instrumentHandle, selectorString, numberOfRanges);
#else
  return function_pointers_.SpurCfgNumberOfRanges(instrumentHandle, selectorString, numberOfRanges);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop)
{
  if (!function_pointers_.SpurCfgRangeAbsoluteLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeAbsoluteLimit.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop);
#else
  return function_pointers_.SpurCfgRangeAbsoluteLimit(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeAbsoluteLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeAbsoluteLimitArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeAbsoluteLimitArray(instrumentHandle, selectorString, absoluteLimitMode, absoluteLimitStart, absoluteLimitStop, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeDetector(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints)
{
  if (!function_pointers_.SpurCfgRangeDetector) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeDetector.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
#else
  return function_pointers_.SpurCfgRangeDetector(instrumentHandle, selectorString, detectorType, detectorPoints);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeDetectorArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType[], int32 detectorPoints[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeDetectorArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeDetectorArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeDetectorArray(instrumentHandle, selectorString, detectorType, detectorPoints, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeDetectorArray(instrumentHandle, selectorString, detectorType, detectorPoints, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 rangeEnabled)
{
  if (!function_pointers_.SpurCfgRangeFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeFrequency.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeFrequency(instrumentHandle, selectorString, startFrequency, stopFrequency, rangeEnabled);
#else
  return function_pointers_.SpurCfgRangeFrequency(instrumentHandle, selectorString, startFrequency, stopFrequency, rangeEnabled);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency[], float64 stopFrequency[], int32 rangeEnabled[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeFrequencyArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeFrequencyArray(instrumentHandle, selectorString, startFrequency, stopFrequency, rangeEnabled, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeFrequencyArray(instrumentHandle, selectorString, startFrequency, stopFrequency, rangeEnabled, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeNumberOfSpursToReport(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport)
{
  if (!function_pointers_.SpurCfgRangeNumberOfSpursToReport) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeNumberOfSpursToReport.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeNumberOfSpursToReport(instrumentHandle, selectorString, numberOfSpursToReport);
#else
  return function_pointers_.SpurCfgRangeNumberOfSpursToReport(instrumentHandle, selectorString, numberOfSpursToReport);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeNumberOfSpursToReportArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeNumberOfSpursToReportArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeNumberOfSpursToReportArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeNumberOfSpursToReportArray(instrumentHandle, selectorString, numberOfSpursToReport, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeNumberOfSpursToReportArray(instrumentHandle, selectorString, numberOfSpursToReport, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangePeakCriteria(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold, float64 excursion)
{
  if (!function_pointers_.SpurCfgRangePeakCriteria) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangePeakCriteria.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangePeakCriteria(instrumentHandle, selectorString, threshold, excursion);
#else
  return function_pointers_.SpurCfgRangePeakCriteria(instrumentHandle, selectorString, threshold, excursion);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangePeakCriteriaArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold[], float64 excursion[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangePeakCriteriaArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangePeakCriteriaArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangePeakCriteriaArray(instrumentHandle, selectorString, threshold, excursion, numberOfElements);
#else
  return function_pointers_.SpurCfgRangePeakCriteriaArray(instrumentHandle, selectorString, threshold, excursion, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeRBWArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeRBWArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeRBWArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeRBWArray(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeRBWArray(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.SpurCfgRangeRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#else
  return function_pointers_.SpurCfgRangeRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeRelativeAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation)
{
  if (!function_pointers_.SpurCfgRangeRelativeAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeRelativeAttenuation.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
#else
  return function_pointers_.SpurCfgRangeRelativeAttenuation(instrumentHandle, selectorString, relativeAttenuation);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeRelativeAttenuationArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeRelativeAttenuationArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeRelativeAttenuationArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeRelativeAttenuationArray(instrumentHandle, selectorString, relativeAttenuation, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.SpurCfgRangeSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeSweepTime.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#else
  return function_pointers_.SpurCfgRangeSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeSweepTimeArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto[], float64 sweepTimeInterval[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeSweepTimeArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeSweepTimeArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeSweepTimeArray(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeSweepTimeArray(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio)
{
  if (!function_pointers_.SpurCfgRangeVBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeVBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
#else
  return function_pointers_.SpurCfgRangeVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgRangeVBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto[], float64 vbw[], float64 vbwToRBWRatio[], int32 numberOfElements)
{
  if (!function_pointers_.SpurCfgRangeVBWFilterArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgRangeVBWFilterArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgRangeVBWFilterArray(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio, numberOfElements);
#else
  return function_pointers_.SpurCfgRangeVBWFilterArray(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio, numberOfElements);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurCfgTraceRangeIndex(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 traceRangeIndex)
{
  if (!function_pointers_.SpurCfgTraceRangeIndex) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurCfgTraceRangeIndex.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurCfgTraceRangeIndex(instrumentHandle, selectorString, traceRangeIndex);
#else
  return function_pointers_.SpurCfgTraceRangeIndex(instrumentHandle, selectorString, traceRangeIndex);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchAllSpurs(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurMargin[], float64 spurAbsoluteLimit[], int32 spurRangeIndex[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpurFetchAllSpurs) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchAllSpurs.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchAllSpurs(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurMargin, spurAbsoluteLimit, spurRangeIndex, arraySize, actualArraySize);
#else
  return function_pointers_.SpurFetchAllSpurs(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurMargin, spurAbsoluteLimit, spurRangeIndex, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  if (!function_pointers_.SpurFetchMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchMeasurementStatus.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
#else
  return function_pointers_.SpurFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchRangeAbsoluteLimitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteLimit[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpurFetchRangeAbsoluteLimitTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchRangeAbsoluteLimitTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchRangeAbsoluteLimitTrace(instrumentHandle, selectorString, timeout, x0, dx, absoluteLimit, arraySize, actualArraySize);
#else
  return function_pointers_.SpurFetchRangeAbsoluteLimitTrace(instrumentHandle, selectorString, timeout, x0, dx, absoluteLimit, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchRangeSpectrumTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rangeSpectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpurFetchRangeSpectrumTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchRangeSpectrumTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchRangeSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, rangeSpectrum, arraySize, actualArraySize);
#else
  return function_pointers_.SpurFetchRangeSpectrumTrace(instrumentHandle, selectorString, timeout, x0, dx, rangeSpectrum, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchRangeStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* rangeStatus, int32* detectedSpurs)
{
  if (!function_pointers_.SpurFetchRangeStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchRangeStatus.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchRangeStatus(instrumentHandle, selectorString, timeout, rangeStatus, detectedSpurs);
#else
  return function_pointers_.SpurFetchRangeStatus(instrumentHandle, selectorString, timeout, rangeStatus, detectedSpurs);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchRangeStatusArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 rangeStatus[], int32 numberOfDetectedSpurs[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpurFetchRangeStatusArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchRangeStatusArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchRangeStatusArray(instrumentHandle, selectorString, timeout, rangeStatus, numberOfDetectedSpurs, arraySize, actualArraySize);
#else
  return function_pointers_.SpurFetchRangeStatusArray(instrumentHandle, selectorString, timeout, rangeStatus, numberOfDetectedSpurs, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchSpurMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spurFrequency, float64* spurAmplitude, float64* spurMargin, float64* spurAbsoluteLimit)
{
  if (!function_pointers_.SpurFetchSpurMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchSpurMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchSpurMeasurement(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurMargin, spurAbsoluteLimit);
#else
  return function_pointers_.SpurFetchSpurMeasurement(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurMargin, spurAbsoluteLimit);
#endif
}

int32 NiRFmxSpecAnLibrary::SpurFetchSpurMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurAbsoluteLimit[], float64 spurMargin[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SpurFetchSpurMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_SpurFetchSpurMeasurementArray.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_SpurFetchSpurMeasurementArray(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurAbsoluteLimit, spurMargin, arraySize, actualArraySize);
#else
  return function_pointers_.SpurFetchSpurMeasurementArray(instrumentHandle, selectorString, timeout, spurFrequency, spurAmplitude, spurAbsoluteLimit, spurMargin, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.TXPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPCfgAveraging.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#else
  return function_pointers_.TXPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval)
{
  if (!function_pointers_.TXPCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPCfgMeasurementInterval.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#else
  return function_pointers_.TXPCfgMeasurementInterval(instrumentHandle, selectorString, measurementInterval);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha)
{
  if (!function_pointers_.TXPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPCfgRBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#else
  return function_pointers_.TXPCfgRBWFilter(instrumentHandle, selectorString, rbw, rbwFilterType, rrcAlpha);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPCfgThreshold(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType)
{
  if (!function_pointers_.TXPCfgThreshold) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPCfgThreshold.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#else
  return function_pointers_.TXPCfgThreshold(instrumentHandle, selectorString, thresholdEnabled, thresholdLevel, thresholdType);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPCfgVBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio)
{
  if (!function_pointers_.TXPCfgVBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPCfgVBWFilter.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPCfgVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
#else
  return function_pointers_.TXPCfgVBWFilter(instrumentHandle, selectorString, vbwAuto, vbw, vbwToRBWRatio);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower)
{
  if (!function_pointers_.TXPFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPFetchMeasurement.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averageMeanPower, peakToAverageRatio, maximumPower, minimumPower);
#else
  return function_pointers_.TXPFetchMeasurement(instrumentHandle, selectorString, timeout, averageMeanPower, peakToAverageRatio, maximumPower, minimumPower);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPFetchPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.TXPFetchPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPFetchPowerTrace.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#else
  return function_pointers_.TXPFetchPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, power, arraySize, actualArraySize);
#endif
}

int32 NiRFmxSpecAnLibrary::TXPRead(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower)
{
  if (!function_pointers_.TXPRead) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_TXPRead.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_TXPRead(instrumentHandle, selectorString, timeout, averageMeanPower, peakToAverageRatio, maximumPower, minimumPower);
#else
  return function_pointers_.TXPRead(instrumentHandle, selectorString, timeout, averageMeanPower, peakToAverageRatio, maximumPower, minimumPower);
#endif
}

int32 NiRFmxSpecAnLibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_WaitForAcquisitionComplete.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_WaitForAcquisitionComplete(instrumentHandle, timeout);
#else
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
#endif
}

int32 NiRFmxSpecAnLibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_WaitForMeasurementComplete.");
  }
#if defined(_MSC_VER)
  return RFmxSpecAn_WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
#else
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
#endif
}

}  // namespace nirfmxspecan_grpc
