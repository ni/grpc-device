//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-RFMXSPECAN
//---------------------------------------------------------------------
#ifndef NIRFMXSPECAN_GRPC_LIBRARY_WRAPPER_H
#define NIRFMXSPECAN_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>
#include <niRFmxSpecAn.h>

namespace nirfmxspecan_grpc {

class NiRFmxSpecAnLibraryInterface {
 public:
  virtual ~NiRFmxSpecAnLibraryInterface() {}

  virtual int32 ACPCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 ACPCfgCarrierAndOffsets(niRFmxInstrHandle instrument, char selectorString[], float64 integrationBandwidth, int32 numberOfOffsets, float64 channelSpacing) = 0;
  virtual int32 ACPCfgCarrierFrequency(niRFmxInstrHandle instrument, char selectorString[], float64 carrierFrequency) = 0;
  virtual int32 ACPCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 integrationBandwidth) = 0;
  virtual int32 ACPCfgCarrierMode(niRFmxInstrHandle instrument, char selectorString[], int32 carrierMode) = 0;
  virtual int32 ACPCfgCarrierRRCFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) = 0;
  virtual int32 ACPCfgFFT(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow, float64 fftPadding) = 0;
  virtual int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrument, char selectorString[], int32 measurementMethod) = 0;
  virtual int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrument, char selectorString[], int32 noiseCompensationEnabled) = 0;
  virtual int32 ACPCfgNumberOfCarriers(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfCarriers) = 0;
  virtual int32 ACPCfgNumberOfOffsets(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfOffsets) = 0;
  virtual int32 ACPCfgOffset(niRFmxInstrHandle instrument, char selectorString[], float64 offsetFrequency, int32 offsetSideband, int32 offsetEnabled) = 0;
  virtual int32 ACPCfgOffsetArray(niRFmxInstrHandle instrument, char selectorString[], float64 offsetFrequency[], int32 offsetSideband[], int32 offsetEnabled[], int32 numberOfElements) = 0;
  virtual int32 ACPCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrument, char selectorString[], int32 offsetFrequencyDefinition) = 0;
  virtual int32 ACPCfgOffsetIntegrationBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 integrationBandwidth) = 0;
  virtual int32 ACPCfgOffsetIntegrationBandwidthArray(niRFmxInstrHandle instrument, char selectorString[], float64 integrationBandwidth[], int32 numberOfElements) = 0;
  virtual int32 ACPCfgOffsetPowerReference(niRFmxInstrHandle instrument, char selectorString[], int32 offsetReferenceCarrier, int32 offsetReferenceSpecific) = 0;
  virtual int32 ACPCfgOffsetPowerReferenceArray(niRFmxInstrHandle instrument, char selectorString[], int32 offsetPowerReferenceCarrier[], int32 offsetPowerReferenceSpecific[], int32 numberOfElements) = 0;
  virtual int32 ACPCfgOffsetRRCFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) = 0;
  virtual int32 ACPCfgOffsetRRCFilterArray(niRFmxInstrHandle instrument, char selectorString[], int32 rrcFilterEnabled[], float64 rrcAlpha[], int32 numberOfElements) = 0;
  virtual int32 ACPCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrument, char selectorString[], float64 relativeAttenuation) = 0;
  virtual int32 ACPCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrument, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements) = 0;
  virtual int32 ACPCfgPowerUnits(niRFmxInstrHandle instrument, char selectorString[], int32 powerUnits) = 0;
  virtual int32 ACPCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 ACPCfgSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ACPFetchCarrierMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* absolutePower, float64* totalRelativePower, float64* carrierOffset, float64* integrationBandwidth) = 0;
  virtual int32 ACPFetchFrequencyResolution(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* frequencyResolution) = 0;
  virtual int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower) = 0;
  virtual int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ACPFetchSpectrum(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ACPFetchTotalCarrierPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalCarrierPower) = 0;
  virtual int32 ACPRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* carrierAbsolutePower, float64* offsetCh0LowerRelativePower, float64* offsetCh0UpperRelativePower, float64* offsetCh1LowerRelativePower, float64* offsetCh1UpperRelativePower) = 0;
  virtual int32 ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrument, char selectorString[], int32* noiseCalibrationDataValid) = 0;
  virtual int32 AMPMCfgAMToAMCurveFit(niRFmxInstrHandle instrument, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType) = 0;
  virtual int32 AMPMCfgAMToPMCurveFit(niRFmxInstrHandle instrument, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType) = 0;
  virtual int32 AMPMCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount) = 0;
  virtual int32 AMPMCfgCompressionPoints(niRFmxInstrHandle instrument, char selectorString[], int32 compressionPointEnabled, float64 compressionLevel[], int32 arraySize) = 0;
  virtual int32 AMPMCfgDUTAverageInputPower(niRFmxInstrHandle instrument, char selectorString[], float64 dutAverageInputPower) = 0;
  virtual int32 AMPMCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 AMPMCfgMeasurementSampleRate(niRFmxInstrHandle instrument, char selectorString[], int32 sampleRateMode, float64 sampleRate) = 0;
  virtual int32 AMPMCfgReferencePowerType(niRFmxInstrHandle instrument, char selectorString[], int32 referencePowerType) = 0;
  virtual int32 AMPMCfgReferenceWaveform(niRFmxInstrHandle instrument, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType) = 0;
  virtual int32 AMPMCfgReferenceWaveformSplit(niRFmxInstrHandle instrument, char selectorString[], float64 x0, float64 dx, float32 i[], float32 q[], int32 arraySize, int32 idleDurationPresent, int32 signalType) = 0;
  virtual int32 AMPMCfgSynchronizationMethod(niRFmxInstrHandle instrument, char selectorString[], int32 synchronizationMethod) = 0;
  virtual int32 AMPMCfgThreshold(niRFmxInstrHandle instrument, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) = 0;
  virtual int32 AMPMFetchAMToAMTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToAM[], float32 curveFitAMToAM[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchAMToPMTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToPM[], float32 curveFitAMToPM[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchCompressionPoints(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 inputCompressionPoint[], float64 outputCompressionPoint[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchCurveFitCoefficients(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 amToAMCoefficients[], float32 amToPMCoefficients[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchCurveFitResidual(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* amToAMResidual, float64* amToPMResidual) = 0;
  virtual int32 AMPMFetchDUTCharacteristics(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* meanLinearGain, float64* onedBCompressionPoint, float64* meanRMSEVM) = 0;
  virtual int32 AMPMFetchError(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* gainErrorRange, float64* phaseErrorRange, float64* meanPhaseError) = 0;
  virtual int32 AMPMFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchProcessedMeanAcquiredWaveformSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchProcessedReferenceWaveform(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchProcessedReferenceWaveformSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchRelativePhaseTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePhase[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AMPMFetchRelativePowerTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 AbortMeasurements(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrument, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved) = 0;
  virtual int32 AnalyzeIQ1WaveformSplit(niRFmxInstrHandle instrument, char selectorString[], char resultName[], float64 x0, float64 dx, float32 i[], float32 q[], int32 arraySize, int32 reset, int64 reserved) = 0;
  virtual int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrument, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved) = 0;
  virtual int32 AutoLevel(niRFmxInstrHandle instrument, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel) = 0;
  virtual int32 BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildHarmonicString(char selectorString[], int32 harmonicNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildIntermodString(char selectorString[], int32 intermodNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildListStepString(char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[]) = 0;
  virtual int32 BuildListString(char listName[], char resultName[], int32 selectorStringLength, char selectorString[]) = 0;
  virtual int32 BuildMarkerString(char selectorString[], int32 markerNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildRangeSpurString(char signalName[], char resultName[], int32 rangeNumber, int32 spurNumber, int32 selectorStringLength, char selectorString[]) = 0;
  virtual int32 BuildRangeString(char selectorString[], int32 rangeNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildSegmentString(char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) = 0;
  virtual int32 BuildSpurString2(char selectorString[], int32 spurNumber, int32 selectorStringOutLength, char selectorStringOut[]) = 0;
  virtual int32 CCDFCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 CCDFCfgNumberOfRecords(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfRecords) = 0;
  virtual int32 CCDFCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) = 0;
  virtual int32 CCDFCfgThreshold(niRFmxInstrHandle instrument, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) = 0;
  virtual int32 CCDFFetchBasicPowerProbabilities(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* tenPercentPower, float64* onePercentPower, float64* oneTenthPercentPower, float64* oneHundredthPercentPower, float64* oneThousandthPercentPower, float64* oneTenThousandthPercentPower) = 0;
  virtual int32 CCDFFetchGaussianProbabilitiesTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 gaussianProbabilities[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 CCDFFetchPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount) = 0;
  virtual int32 CCDFFetchProbabilitiesTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 probabilities[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 CCDFRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount) = 0;
  virtual int32 CHPCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 CHPCfgCarrierOffset(niRFmxInstrHandle instrument, char selectorString[], float64 carrierFrequency) = 0;
  virtual int32 CHPCfgFFT(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow, float64 fftPadding) = 0;
  virtual int32 CHPCfgIntegrationBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 integrationBandwidth) = 0;
  virtual int32 CHPCfgNumberOfCarriers(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfCarriers) = 0;
  virtual int32 CHPCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 CHPCfgRRCFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) = 0;
  virtual int32 CHPCfgSpan(niRFmxInstrHandle instrument, char selectorString[], float64 span) = 0;
  virtual int32 CHPCfgSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 CHPFetchCarrierMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* absolutePower, float64* psd, float64* relativePower) = 0;
  virtual int32 CHPFetchSpectrum(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 CHPFetchTotalCarrierPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalCarrierPower) = 0;
  virtual int32 CHPRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* absolutePower, float64* psd) = 0;
  virtual int32 CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrument, char selectorString[], int32* noiseCalibrationDataValid) = 0;
  virtual int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrument, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger) = 0;
  virtual int32 CfgExternalAttenuation(niRFmxInstrHandle instrument, char selectorString[], float64 externalAttenuation) = 0;
  virtual int32 CfgFrequency(niRFmxInstrHandle instrument, char selectorString[], float64 centerFrequency) = 0;
  virtual int32 CfgFrequencyReference(niRFmxInstrHandle instrument, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) = 0;
  virtual int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrument, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger) = 0;
  virtual int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrument, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) = 0;
  virtual int32 CfgRF(niRFmxInstrHandle instrument, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation) = 0;
  virtual int32 CfgRFAttenuation(niRFmxInstrHandle instrument, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) = 0;
  virtual int32 CfgReferenceLevel(niRFmxInstrHandle instrument, char selectorString[], float64 referenceLevel) = 0;
  virtual int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrument, char selectorString[], float64 triggerDelay, int32 enableTrigger) = 0;
  virtual int32 CheckMeasurementStatus(niRFmxInstrHandle instrument, char selectorString[], int32* isDone) = 0;
  virtual int32 ClearAllNamedResults(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 ClearNamedResult(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 CloneSignalConfiguration(niRFmxInstrHandle instrument, char oldSignalName[], char newSignalName[]) = 0;
  virtual int32 Close(niRFmxInstrHandle instrument, int32 forceDestroy) = 0;
  virtual int32 Commit(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 CreateList(niRFmxInstrHandle instrument, char listName[]) = 0;
  virtual int32 CreateListStep(niRFmxInstrHandle instrument, char selectorString[], int32* createdStepIndex) = 0;
  virtual int32 CreateSignalConfiguration(niRFmxInstrHandle instrument, char signalName[]) = 0;
  virtual int32 DPDApplyDigitalPredistortion(niRFmxInstrHandle instrument, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64 measurementTimeout, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr, float64* powerOffset) = 0;
  virtual int32 DPDApplyDigitalPredistortionSplit(niRFmxInstrHandle instrument, char selectorString[], float64 x0In, float64 dxIn, float32 waveformInI[], float32 waveformInQ[], int32 arraySizeIn, int32 idleDurationPresent, float64 measurementTimeout, float64* x0Out, float64* dxOut, float32 waveformOutI[], float32 waveformOutQ[], int32 arraySizeOut, int32* actualArraySize, float64* papr, float64* powerOffset) = 0;
  virtual int32 DPDApplyPreDPDSignalConditioning(niRFmxInstrHandle instrument, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr) = 0;
  virtual int32 DPDApplyPreDPDSignalConditioningSplit(niRFmxInstrHandle instrument, char selectorString[], float64 x0In, float64 dxIn, float32 waveformInI[], float32 waveformInQ[], int32 arraySizeIn, int32 idleDurationPresent, float64* x0Out, float64* dxOut, float32 waveformOutI[], float32 waveformOutQ[], int32 arraySizeOut, int32* actualArraySize, float64* papr) = 0;
  virtual int32 DPDCfgApplyDPDConfigurationInput(niRFmxInstrHandle instrument, char selectorString[], int32 configurationInput) = 0;
  virtual int32 DPDCfgApplyDPDLookupTableCorrectionType(niRFmxInstrHandle instrument, char selectorString[], int32 lutCorrectionType) = 0;
  virtual int32 DPDCfgApplyDPDMemoryModelCorrectionType(niRFmxInstrHandle instrument, char selectorString[], int32 memoryModelCorrectionType) = 0;
  virtual int32 DPDCfgApplyDPDUserDPDPolynomial(niRFmxInstrHandle instrument, char selectorString[], NIComplexSingle dpdPolynomial[], int32 arraySize) = 0;
  virtual int32 DPDCfgApplyDPDUserDPDPolynomialSplit(niRFmxInstrHandle instrument, char selectorString[], float32 i[], float32 q[], int32 arraySize) = 0;
  virtual int32 DPDCfgApplyDPDUserLookupTable(niRFmxInstrHandle instrument, char selectorString[], float32 lutInputPowers[], NIComplexSingle lutComplexGains[], int32 arraySize) = 0;
  virtual int32 DPDCfgApplyDPDUserLookupTableSplit(niRFmxInstrHandle instrument, char selectorString[], float32 lutInputPowers[], float32 i[], float32 q[], int32 arraySize) = 0;
  virtual int32 DPDCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount) = 0;
  virtual int32 DPDCfgDPDModel(niRFmxInstrHandle instrument, char selectorString[], int32 dpdModel) = 0;
  virtual int32 DPDCfgDUTAverageInputPower(niRFmxInstrHandle instrument, char selectorString[], float64 dutAverageInputPower) = 0;
  virtual int32 DPDCfgGeneralizedMemoryPolynomialCrossTerms(niRFmxInstrHandle instrument, char selectorString[], int32 memoryPolynomialLeadOrder, int32 memoryPolynomialLagOrder, int32 memoryPolynomialLeadMemoryDepth, int32 memoryPolynomialLagMemoryDepth, int32 memoryPolynomialMaximumLead, int32 memoryPolynomialMaximumLag) = 0;
  virtual int32 DPDCfgIterativeDPDEnabled(niRFmxInstrHandle instrument, char selectorString[], int32 iterativeDPDEnabled) = 0;
  virtual int32 DPDCfgLookupTableAMToAMCurveFit(niRFmxInstrHandle instrument, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType) = 0;
  virtual int32 DPDCfgLookupTableAMToPMCurveFit(niRFmxInstrHandle instrument, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType) = 0;
  virtual int32 DPDCfgLookupTableStepSize(niRFmxInstrHandle instrument, char selectorString[], float64 stepSize) = 0;
  virtual int32 DPDCfgLookupTableThreshold(niRFmxInstrHandle instrument, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) = 0;
  virtual int32 DPDCfgLookupTableType(niRFmxInstrHandle instrument, char selectorString[], int32 lookupTableType) = 0;
  virtual int32 DPDCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 DPDCfgMeasurementSampleRate(niRFmxInstrHandle instrument, char selectorString[], int32 sampleRateMode, float64 sampleRate) = 0;
  virtual int32 DPDCfgMemoryPolynomial(niRFmxInstrHandle instrument, char selectorString[], int32 memoryPolynomialOrder, int32 memoryPolynomialMemoryDepth) = 0;
  virtual int32 DPDCfgPreviousDPDPolynomial(niRFmxInstrHandle instrument, char selectorString[], NIComplexSingle previousDPDPolynomial[], int32 arraySize) = 0;
  virtual int32 DPDCfgPreviousDPDPolynomialSplit(niRFmxInstrHandle instrument, char selectorString[], float32 i[], float32 q[], int32 arraySize) = 0;
  virtual int32 DPDCfgReferenceWaveform(niRFmxInstrHandle instrument, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType) = 0;
  virtual int32 DPDCfgReferenceWaveformSplit(niRFmxInstrHandle instrument, char selectorString[], float64 x0, float64 dx, float32 i[], float32 q[], int32 arraySize, int32 idleDurationPresent, int32 signalType) = 0;
  virtual int32 DPDCfgSynchronizationMethod(niRFmxInstrHandle instrument, char selectorString[], int32 synchronizationMethod) = 0;
  virtual int32 DPDFetchApplyDPDPreCFRPAPR(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* preCFRPAPR) = 0;
  virtual int32 DPDFetchAverageGain(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* averageGain) = 0;
  virtual int32 DPDFetchDPDPolynomial(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, NIComplexSingle dpdPolynomial[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchDPDPolynomialSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchLookupTable(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 inputPowers[], NIComplexSingle complexGains[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchLookupTableSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 inputPowers[], float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchNMSE(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* nmse) = 0;
  virtual int32 DPDFetchProcessedMeanAcquiredWaveform(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchProcessedMeanAcquiredWaveformSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchProcessedReferenceWaveform(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DPDFetchProcessedReferenceWaveformSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 DeleteList(niRFmxInstrHandle instrument, char listName[]) = 0;
  virtual int32 DeleteSignalConfiguration(niRFmxInstrHandle instrument, char signalName[]) = 0;
  virtual int32 DisableTrigger(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 FCntCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 FCntCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 FCntCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) = 0;
  virtual int32 FCntCfgThreshold(niRFmxInstrHandle instrument, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) = 0;
  virtual int32 FCntFetchAllanDeviation(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* allanDeviation) = 0;
  virtual int32 FCntFetchFrequencyTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequencyTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 FCntFetchMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase) = 0;
  virtual int32 FCntFetchPhaseTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 FCntFetchPowerTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 powerTrace[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 FCntRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase) = 0;
  virtual int32 GetAllNamedResultNames(niRFmxInstrHandle instrument, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) = 0;
  virtual int32 GetAttributeF32(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float32* attrVal) = 0;
  virtual int32 GetAttributeF32Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeF64(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float64* attrVal) = 0;
  virtual int32 GetAttributeF64Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeI16(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int16* attrVal) = 0;
  virtual int32 GetAttributeI32(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int32* attrVal) = 0;
  virtual int32 GetAttributeI32Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeI64(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int64* attrVal) = 0;
  virtual int32 GetAttributeI64Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeI8(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int8* attrVal) = 0;
  virtual int32 GetAttributeI8Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeString(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) = 0;
  virtual int32 GetAttributeU16(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt16* attrVal) = 0;
  virtual int32 GetAttributeU32(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt32* attrVal) = 0;
  virtual int32 GetAttributeU32Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeU64Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetAttributeU8(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt8* attrVal) = 0;
  virtual int32 GetAttributeU8Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 GetError(niRFmxInstrHandle instrument, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) = 0;
  virtual int32 GetErrorString(niRFmxInstrHandle instrument, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) = 0;
  virtual int32 HarmCfgAutoHarmonics(niRFmxInstrHandle instrument, char selectorString[], int32 autoHarmonicsSetupEnabled) = 0;
  virtual int32 HarmCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 HarmCfgFundamentalMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 HarmCfgFundamentalRBW(niRFmxInstrHandle instrument, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) = 0;
  virtual int32 HarmCfgHarmonic(niRFmxInstrHandle instrument, char selectorString[], int32 harmonicOrder, float64 harmonicBandwidth, int32 harmonicEnabled, float64 harmonicMeasurementInterval) = 0;
  virtual int32 HarmCfgHarmonicArray(niRFmxInstrHandle instrument, char selectorString[], int32 harmonicOrder[], float64 harmonicBandwidth[], int32 harmonicEnabled[], float64 harmonicMeasurementInterval[], int32 numberOfElements) = 0;
  virtual int32 HarmCfgNumberOfHarmonics(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfHarmonics) = 0;
  virtual int32 HarmFetchHarmonicMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* averageRelativePower, float64* averageAbsolutePower, float64* rbw, float64* frequency) = 0;
  virtual int32 HarmFetchHarmonicMeasurementArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 averageRelativePower[], float64 averageAbsolutePower[], float64 rbw[], float64 frequency[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 HarmFetchHarmonicPowerTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 HarmFetchTHD(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower, float64* fundamentalFrequency) = 0;
  virtual int32 HarmRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower) = 0;
  virtual int32 IMCfgAutoIntermodsSetup(niRFmxInstrHandle instrument, char selectorString[], int32 autoIntermodsSetupEnabled, int32 maximumIntermodOrder) = 0;
  virtual int32 IMCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 IMCfgFFT(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow, float64 fftPadding) = 0;
  virtual int32 IMCfgFrequencyDefinition(niRFmxInstrHandle instrument, char selectorString[], int32 frequencyDefinition) = 0;
  virtual int32 IMCfgFundamentalTones(niRFmxInstrHandle instrument, char selectorString[], float64 lowerToneFrequency, float64 upperToneFrequency) = 0;
  virtual int32 IMCfgIntermod(niRFmxInstrHandle instrument, char selectorString[], int32 intermodOrder, float64 lowerIntermodFrequency, float64 upperIntermodFrequency, int32 intermodSide, int32 intermodEnabled) = 0;
  virtual int32 IMCfgIntermodArray(niRFmxInstrHandle instrument, char selectorString[], int32 intermodOrder[], float64 lowerIntermodFrequency[], float64 upperIntermodFrequency[], int32 intermodSide[], int32 intermodEnabled[], int32 numberOfElements) = 0;
  virtual int32 IMCfgMeasurementMethod(niRFmxInstrHandle instrument, char selectorString[], int32 measurementMethod) = 0;
  virtual int32 IMCfgNumberOfIntermods(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfIntermods) = 0;
  virtual int32 IMCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 IMCfgSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 IMFetchFundamentalMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* lowerTonePower, float64* upperTonePower) = 0;
  virtual int32 IMFetchInterceptPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* intermodOrder, float64* worstCaseOutputInterceptPower, float64* lowerOutputInterceptPower, float64* upperOutputInterceptPower) = 0;
  virtual int32 IMFetchInterceptPowerArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 intermodOrder[], float64 worstCaseOutputInterceptPower[], float64 lowerOutputInterceptPower[], float64 upperOutputInterceptPower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 IMFetchIntermodMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* intermodOrder, float64* lowerIntermodPower, float64* upperIntermodPower) = 0;
  virtual int32 IMFetchIntermodMeasurementArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 intermodOrder[], float64 lowerIntermodPower[], float64 upperIntermodPower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 IMFetchSpectrum(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 spectrumIndex, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 IQCfgAcquisition(niRFmxInstrHandle instrument, char selectorString[], float64 sampleRate, int32 numberOfRecords, float64 acquisitionTime, float64 pretriggerTime) = 0;
  virtual int32 IQCfgBandwidth(niRFmxInstrHandle instrument, char selectorString[], int32 bandwidthAuto, float64 bandwidth) = 0;
  virtual int32 IQFetchData(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, float64* t0, float64* dt, NIComplexSingle data[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 IQFetchDataSplit(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, float64* t0, float64* dt, float32 i[], float32 q[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 IQGetRecordsDone(niRFmxInstrHandle instrument, char selectorString[], int32* recordsDone) = 0;
  virtual int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* instrument, int32* isNewSession) = 0;
  virtual int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* instrument) = 0;
  virtual int32 Initiate(niRFmxInstrHandle instrument, char selectorString[], char resultName[]) = 0;
  virtual int32 MarkerCfgNumberOfMarkers(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfMarkers) = 0;
  virtual int32 MarkerCfgPeakExcursion(niRFmxInstrHandle instrument, char selectorString[], int32 peakExcursionEnabled, float64 peakExcursion) = 0;
  virtual int32 MarkerCfgReferenceMarker(niRFmxInstrHandle instrument, char selectorString[], int32 referenceMarker) = 0;
  virtual int32 MarkerCfgThreshold(niRFmxInstrHandle instrument, char selectorString[], int32 thresholdEnabled, float64 threshold) = 0;
  virtual int32 MarkerCfgTrace(niRFmxInstrHandle instrument, char selectorString[], int32 trace) = 0;
  virtual int32 MarkerCfgType(niRFmxInstrHandle instrument, char selectorString[], int32 markerType) = 0;
  virtual int32 MarkerCfgXLocation(niRFmxInstrHandle instrument, char selectorString[], float64 markerXLocation) = 0;
  virtual int32 MarkerFetchXY(niRFmxInstrHandle instrument, char selectorString[], float64* markerXLocation, float64* markerYLocation) = 0;
  virtual int32 MarkerNextPeak(niRFmxInstrHandle instrument, char selectorString[], int32 nextPeak, int32* nextPeakFound) = 0;
  virtual int32 MarkerPeakSearch(niRFmxInstrHandle instrument, char selectorString[], int32* numberOfPeaks) = 0;
  virtual int32 NFCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount) = 0;
  virtual int32 NFCfgCalibrationLoss(niRFmxInstrHandle instrument, char selectorString[], int32 calibrationLossCompensationEnabled, float64 calibrationLossFrequency[], float64 calibrationLoss[], float64 calibrationLossTemperature, int32 arraySize) = 0;
  virtual int32 NFCfgColdSourceDUTSParameters(niRFmxInstrHandle instrument, char selectorString[], float64 dutsParametersFrequency[], float64 duts21[], float64 duts12[], float64 duts11[], float64 duts22[], int32 arraySize) = 0;
  virtual int32 NFCfgColdSourceInputTermination(niRFmxInstrHandle instrument, char selectorString[], float64 terminationVSWR[], float64 terminationVSWRFrequency[], float64 terminationTemperature, int32 arraySize) = 0;
  virtual int32 NFCfgColdSourceMode(niRFmxInstrHandle instrument, char selectorString[], int32 coldSourceMode) = 0;
  virtual int32 NFCfgDUTInputLoss(niRFmxInstrHandle instrument, char selectorString[], int32 dutInputLossCompensationEnabled, float64 dutInputLossFrequency[], float64 dutInputLoss[], float64 dutInputLossTemperature, int32 arraySize) = 0;
  virtual int32 NFCfgDUTOutputLoss(niRFmxInstrHandle instrument, char selectorString[], int32 dutOutputLossCompensationEnabled, float64 dutOutputLossFrequency[], float64 dutOutputLoss[], float64 dutOutputLossTemperature, int32 arraySize) = 0;
  virtual int32 NFCfgFrequencyList(niRFmxInstrHandle instrument, char selectorString[], float64 frequencyList[], int32 arraySize) = 0;
  virtual int32 NFCfgFrequencyListStartStopPoints(niRFmxInstrHandle instrument, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 numberOfPoints) = 0;
  virtual int32 NFCfgFrequencyListStartStopStep(niRFmxInstrHandle instrument, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 stepSize) = 0;
  virtual int32 NFCfgMeasurementBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 measurementBandwidth) = 0;
  virtual int32 NFCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 NFCfgMeasurementMethod(niRFmxInstrHandle instrument, char selectorString[], int32 measurementMethod) = 0;
  virtual int32 NFCfgYFactorMode(niRFmxInstrHandle instrument, char selectorString[], int32 yFactorMode) = 0;
  virtual int32 NFCfgYFactorNoiseSourceENR(niRFmxInstrHandle instrument, char selectorString[], float64 enrFrequency[], float64 enr[], float64 coldTemperature, float64 offTemperature, int32 arraySize) = 0;
  virtual int32 NFCfgYFactorNoiseSourceLoss(niRFmxInstrHandle instrument, char selectorString[], int32 noiseSourceLossCompensationEnabled, float64 noiseSourceLossFrequency[], float64 noiseSourceLoss[], float64 noiseSourceLossTemperature, int32 arraySize) = 0;
  virtual int32 NFCfgYFactorNoiseSourceSettlingTime(niRFmxInstrHandle instrument, char selectorString[], float64 settlingTime) = 0;
  virtual int32 NFClearCalibrationDatabase(niRFmxInstrHandle instrument, char calibrationSetupID[]) = 0;
  virtual int32 NFFetchAnalyzerNoiseFigure(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 analyzerNoiseFigure[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 NFFetchColdSourcePower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 coldSourcePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 NFFetchDUTNoiseFigureAndGain(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 dutNoiseFigure[], float64 dutNoiseTemperature[], float64 dutGain[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 NFFetchYFactorPowers(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 hotPower[], float64 coldPower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 NFFetchYFactors(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 measurementYFactor[], float64 calibrationYFactor[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 NFGetCalibrationSetupId(niRFmxInstrHandle instrument, char selectorString[], char attrVal[], int32 arraySize) = 0;
  virtual int32 NFRecommendReferenceLevel(niRFmxInstrHandle instrument, char selectorString[], float64 dutMaxGain, float64 dutMaxNoiseFigure, float64* referenceLevel) = 0;
  virtual int32 NFSetCalibrationSetupId(niRFmxInstrHandle instrument, char selectorString[], char attrVal[]) = 0;
  virtual int32 NFValidateCalibrationData(niRFmxInstrHandle instrument, char selectorString[], int32* calibrationDataValid) = 0;
  virtual int32 OBWCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 OBWCfgBandwidthPercentage(niRFmxInstrHandle instrument, char selectorString[], float64 bandwidthPercentage) = 0;
  virtual int32 OBWCfgFFT(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow, float64 fftPadding) = 0;
  virtual int32 OBWCfgPowerUnits(niRFmxInstrHandle instrument, char selectorString[], int32 powerUnits) = 0;
  virtual int32 OBWCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 OBWCfgSpan(niRFmxInstrHandle instrument, char selectorString[], float64 span) = 0;
  virtual int32 OBWCfgSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 OBWFetchMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency) = 0;
  virtual int32 OBWFetchSpectrumTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 OBWRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency) = 0;
  virtual int32 PAVTCfgMeasurementBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 measurementBandwidth) = 0;
  virtual int32 PAVTCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurermentOffset, float64 measurermentLength) = 0;
  virtual int32 PAVTCfgMeasurementIntervalMode(niRFmxInstrHandle instrument, char selectorString[], int32 measurementIntervalMode) = 0;
  virtual int32 PAVTCfgMeasurementLocationType(niRFmxInstrHandle instrument, char selectorString[], int32 measurementLocationType) = 0;
  virtual int32 PAVTCfgNumberOfSegments(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfSegments) = 0;
  virtual int32 PAVTCfgSegmentMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 segmentMeasurementOffset, float64 segmentMeasurementLength) = 0;
  virtual int32 PAVTCfgSegmentMeasurementIntervalArray(niRFmxInstrHandle instrument, char selectorString[], float64 segmentMeasurementOffset[], float64 segmentMeasurementLength[], int32 numberOfElements) = 0;
  virtual int32 PAVTCfgSegmentStartTimeList(niRFmxInstrHandle instrument, char selectorString[], float64 segmentStartTime[], int32 numberOfElements) = 0;
  virtual int32 PAVTCfgSegmentStartTimeStep(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfSegments, float64 segment0StartTime, float64 segmentInterval) = 0;
  virtual int32 PAVTCfgSegmentType(niRFmxInstrHandle instrument, char selectorString[], int32 segmentType) = 0;
  virtual int32 PAVTCfgSegmentTypeArray(niRFmxInstrHandle instrument, char selectorString[], int32 segmentType[], int32 numberOfElements) = 0;
  virtual int32 PAVTFetchAmplitudeTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 amplitude[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 PAVTFetchPhaseAndAmplitude(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* meanRelativePhase, float64* meanRelativeAmplitude, float64* meanAbsolutePhase, float64* meanAbsoluteAmplitude) = 0;
  virtual int32 PAVTFetchPhaseAndAmplitudeArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 meanRelativePhase[], float64 meanRelativeAmplitude[], float64 meanAbsolutePhase[], float64 meanAbsoluteAmplitude[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 PAVTFetchPhaseTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 phase[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 PhaseNoiseCfgAutoRange(niRFmxInstrHandle instrument, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 rbwPercentage) = 0;
  virtual int32 PhaseNoiseCfgAveragingMultiplier(niRFmxInstrHandle instrument, char selectorString[], int32 averagingMultiplier) = 0;
  virtual int32 PhaseNoiseCfgCancellation(niRFmxInstrHandle instrument, char selectorString[], int32 cancellationEnabled, float64 cancellationThreshold, float32 frequency[], float32 referencePhaseNoise[], int32 arraySize) = 0;
  virtual int32 PhaseNoiseCfgIntegratedNoise(niRFmxInstrHandle instrument, char selectorString[], int32 integratedNoiseRangeDefinition, float64 integratedNoiseStartFrequency[], float64 integratedNoiseStopFrequency[], int32 arraySize) = 0;
  virtual int32 PhaseNoiseCfgNumberOfRanges(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfRanges) = 0;
  virtual int32 PhaseNoiseCfgRangeArray(niRFmxInstrHandle instrument, char selectorString[], float64 rangeStartFrequency[], float64 rangeStopFrequency[], float64 rangeRBWPercentage[], int32 rangeAveragingCount[], int32 numberOfElements) = 0;
  virtual int32 PhaseNoiseCfgRangeDefinition(niRFmxInstrHandle instrument, char selectorString[], int32 rangeDefinition) = 0;
  virtual int32 PhaseNoiseCfgSmoothing(niRFmxInstrHandle instrument, char selectorString[], int32 smoothingType, float64 smoothingPercentage) = 0;
  virtual int32 PhaseNoiseCfgSpotNoiseFrequencyList(niRFmxInstrHandle instrument, char selectorString[], float64 frequencyList[], int32 arraySize) = 0;
  virtual int32 PhaseNoiseCfgSpurRemoval(niRFmxInstrHandle instrument, char selectorString[], int32 spurRemovalEnabled, float64 peakExcursion) = 0;
  virtual int32 PhaseNoiseFetchCarrierMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* carrierFrequency, float64* carrierPower) = 0;
  virtual int32 PhaseNoiseFetchIntegratedNoise(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 integratedPhaseNoise[], float64 residualPMInRadian[], float64 residualPMInDegree[], float64 residualFM[], float64 jitter[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 PhaseNoiseFetchMeasuredLogPlotTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 frequency[], float32 measuredPhaseNoise[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 PhaseNoiseFetchSmoothedLogPlotTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float32 frequency[], float32 smoothedPhaseNoise[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 PhaseNoiseFetchSpotNoise(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 spotPhaseNoise[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 ResetAttribute(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID) = 0;
  virtual int32 ResetToDefault(niRFmxInstrHandle instrument, char selectorString[]) = 0;
  virtual int32 SEMCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 SEMCfgCarrierChannelBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 carrierChannelBandwidth) = 0;
  virtual int32 SEMCfgCarrierEnabled(niRFmxInstrHandle instrument, char selectorString[], int32 carrierEnabled) = 0;
  virtual int32 SEMCfgCarrierFrequency(niRFmxInstrHandle instrument, char selectorString[], float64 carrierFrequency) = 0;
  virtual int32 SEMCfgCarrierIntegrationBandwidth(niRFmxInstrHandle instrument, char selectorString[], float64 integrationBandwidth) = 0;
  virtual int32 SEMCfgCarrierRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 SEMCfgCarrierRRCFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha) = 0;
  virtual int32 SEMCfgFFT(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow, float64 fftPadding) = 0;
  virtual int32 SEMCfgNumberOfCarriers(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfCarriers) = 0;
  virtual int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfOffsets) = 0;
  virtual int32 SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrument, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop) = 0;
  virtual int32 SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrument, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements) = 0;
  virtual int32 SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrument, char selectorString[], int32 bandwidthIntegral) = 0;
  virtual int32 SEMCfgOffsetFrequency(niRFmxInstrHandle instrument, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetEnabled, int32 offsetSideband) = 0;
  virtual int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrument, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetEnabled[], int32 offsetSideband[], int32 numberOfElements) = 0;
  virtual int32 SEMCfgOffsetFrequencyDefinition(niRFmxInstrHandle instrument, char selectorString[], int32 offsetFrequencyDefinition) = 0;
  virtual int32 SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrument, char selectorString[], int32 limitFailMask) = 0;
  virtual int32 SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements) = 0;
  virtual int32 SEMCfgOffsetRelativeAttenuation(niRFmxInstrHandle instrument, char selectorString[], float64 relativeAttenuation) = 0;
  virtual int32 SEMCfgOffsetRelativeAttenuationArray(niRFmxInstrHandle instrument, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements) = 0;
  virtual int32 SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrument, char selectorString[], int32 relativeLimitMode, float64 relativeLimitStart, float64 relativeLimitStop) = 0;
  virtual int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrument, char selectorString[], int32 relativeLimitMode[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements) = 0;
  virtual int32 SEMCfgPowerUnits(niRFmxInstrHandle instrument, char selectorString[], int32 powerUnits) = 0;
  virtual int32 SEMCfgReferenceType(niRFmxInstrHandle instrument, char selectorString[], int32 referenceType) = 0;
  virtual int32 SEMCfgSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 SEMFetchAbsoluteMaskTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteMask[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SEMFetchCarrierMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* totalRelativePower) = 0;
  virtual int32 SEMFetchCompositeMeasurementStatus(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* compositeMeasurementStatus) = 0;
  virtual int32 SEMFetchFrequencyResolution(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* frequencyResolution) = 0;
  virtual int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) = 0;
  virtual int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower) = 0;
  virtual int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SEMFetchRelativeMaskTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativeMask[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SEMFetchSpectrum(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SEMFetchTotalCarrierPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalCarrierPower) = 0;
  virtual int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) = 0;
  virtual int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower) = 0;
  virtual int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SelectMeasurements(niRFmxInstrHandle instrument, char selectorString[], uInt32 measurements, int32 enableAllTraces) = 0;
  virtual int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrument) = 0;
  virtual int32 SetAttributeF32(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float32 attrVal) = 0;
  virtual int32 SetAttributeF32Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeF64(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float64 attrVal) = 0;
  virtual int32 SetAttributeF64Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeI16(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int16 attrVal) = 0;
  virtual int32 SetAttributeI32(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int32 attrVal) = 0;
  virtual int32 SetAttributeI32Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeI64(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int64 attrVal) = 0;
  virtual int32 SetAttributeI64Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeI8(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int8 attrVal) = 0;
  virtual int32 SetAttributeI8Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeString(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, char attrVal[]) = 0;
  virtual int32 SetAttributeU16(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt16 attrVal) = 0;
  virtual int32 SetAttributeU32(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt32 attrVal) = 0;
  virtual int32 SetAttributeU32Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeU64Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) = 0;
  virtual int32 SetAttributeU8(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt8 attrVal) = 0;
  virtual int32 SetAttributeU8Array(niRFmxInstrHandle instrument, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) = 0;
  virtual int32 SpectrumCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 SpectrumCfgDetector(niRFmxInstrHandle instrument, char selectorString[], int32 detectorType, int32 detectorPoints) = 0;
  virtual int32 SpectrumCfgFFT(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow, float64 fftPadding) = 0;
  virtual int32 SpectrumCfgFrequencyStartStop(niRFmxInstrHandle instrument, char selectorString[], float64 startFrequency, float64 stopFrequency) = 0;
  virtual int32 SpectrumCfgNoiseCompensationEnabled(niRFmxInstrHandle instrument, char selectorString[], int32 noiseCompensationEnabled) = 0;
  virtual int32 SpectrumCfgPowerUnits(niRFmxInstrHandle instrument, char selectorString[], int32 spectrumPowerUnits) = 0;
  virtual int32 SpectrumCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 SpectrumCfgSpan(niRFmxInstrHandle instrument, char selectorString[], float64 span) = 0;
  virtual int32 SpectrumCfgSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 SpectrumCfgVBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio) = 0;
  virtual int32 SpectrumFetchMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* peakAmplitude, float64* peakFrequency, float64* frequencyResolution) = 0;
  virtual int32 SpectrumFetchPowerTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpectrumFetchSpectrum(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpectrumRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpectrumValidateNoiseCalibrationData(niRFmxInstrHandle instrument, char selectorString[], int32* noiseCalibrationDataValid) = 0;
  virtual int32 SpurCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 SpurCfgFFTWindowType(niRFmxInstrHandle instrument, char selectorString[], int32 fftWindow) = 0;
  virtual int32 SpurCfgNumberOfRanges(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfRanges) = 0;
  virtual int32 SpurCfgRangeAbsoluteLimit(niRFmxInstrHandle instrument, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop) = 0;
  virtual int32 SpurCfgRangeAbsoluteLimitArray(niRFmxInstrHandle instrument, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeDetector(niRFmxInstrHandle instrument, char selectorString[], int32 detectorType, int32 detectorPoints) = 0;
  virtual int32 SpurCfgRangeDetectorArray(niRFmxInstrHandle instrument, char selectorString[], int32 detectorType[], int32 detectorPoints[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeFrequency(niRFmxInstrHandle instrument, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 rangeEnabled) = 0;
  virtual int32 SpurCfgRangeFrequencyArray(niRFmxInstrHandle instrument, char selectorString[], float64 startFrequency[], float64 stopFrequency[], int32 rangeEnabled[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeNumberOfSpursToReport(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfSpursToReport) = 0;
  virtual int32 SpurCfgRangeNumberOfSpursToReportArray(niRFmxInstrHandle instrument, char selectorString[], int32 numberOfSpursToReport[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangePeakCriteria(niRFmxInstrHandle instrument, char selectorString[], float64 threshold, float64 excursion) = 0;
  virtual int32 SpurCfgRangePeakCriteriaArray(niRFmxInstrHandle instrument, char selectorString[], float64 threshold[], float64 excursion[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeRBWArray(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeRBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) = 0;
  virtual int32 SpurCfgRangeRelativeAttenuation(niRFmxInstrHandle instrument, char selectorString[], float64 relativeAttenuation) = 0;
  virtual int32 SpurCfgRangeRelativeAttenuationArray(niRFmxInstrHandle instrument, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeSweepTime(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) = 0;
  virtual int32 SpurCfgRangeSweepTimeArray(niRFmxInstrHandle instrument, char selectorString[], int32 sweepTimeAuto[], float64 sweepTimeInterval[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgRangeVBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio) = 0;
  virtual int32 SpurCfgRangeVBWFilterArray(niRFmxInstrHandle instrument, char selectorString[], int32 vbwAuto[], float64 vbw[], float64 vbwToRBWRatio[], int32 numberOfElements) = 0;
  virtual int32 SpurCfgTraceRangeIndex(niRFmxInstrHandle instrument, char selectorString[], int32 traceRangeIndex) = 0;
  virtual int32 SpurFetchAllSpurs(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurMargin[], float64 spurAbsoluteLimit[], int32 spurRangeIndex[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpurFetchMeasurementStatus(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* measurementStatus) = 0;
  virtual int32 SpurFetchRangeAbsoluteLimitTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteLimit[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpurFetchRangeSpectrumTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rangeSpectrum[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpurFetchRangeStatus(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32* rangeStatus, int32* detectedSpurs) = 0;
  virtual int32 SpurFetchRangeStatusArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, int32 rangeStatus[], int32 numberOfDetectedSpurs[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 SpurFetchSpurMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* spurFrequency, float64* spurAmplitude, float64* spurMargin, float64* spurAbsoluteLimit) = 0;
  virtual int32 SpurFetchSpurMeasurementArray(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurAbsoluteLimit[], float64 spurMargin[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 TXPCfgAveraging(niRFmxInstrHandle instrument, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) = 0;
  virtual int32 TXPCfgMeasurementInterval(niRFmxInstrHandle instrument, char selectorString[], float64 measurementInterval) = 0;
  virtual int32 TXPCfgRBWFilter(niRFmxInstrHandle instrument, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha) = 0;
  virtual int32 TXPCfgThreshold(niRFmxInstrHandle instrument, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType) = 0;
  virtual int32 TXPCfgVBWFilter(niRFmxInstrHandle instrument, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio) = 0;
  virtual int32 TXPFetchMeasurement(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower) = 0;
  virtual int32 TXPFetchPowerTrace(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize) = 0;
  virtual int32 TXPRead(niRFmxInstrHandle instrument, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower) = 0;
  virtual int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrument, float64 timeout) = 0;
  virtual int32 WaitForMeasurementComplete(niRFmxInstrHandle instrument, char selectorString[], float64 timeout) = 0;
};

}  // namespace nirfmxspecan_grpc
#endif  // NIRFMXSPECAN_GRPC_LIBRARY_WRAPPER_H
