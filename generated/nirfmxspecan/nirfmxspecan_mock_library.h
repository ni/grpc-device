//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-RFMXSPECAN
//---------------------------------------------------------------------
#ifndef NIRFMXSPECAN_GRPC_MOCK_LIBRARY_H
#define NIRFMXSPECAN_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nirfmxspecan_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiRFmxSpecAnMockLibrary : public nirfmxspecan_grpc::NiRFmxSpecAnLibraryInterface {
 public:
  MOCK_METHOD(int32, ACPCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, ACPCfgCarrierAndOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth, int32 numberOfOffsets, float64 channelSpacing), (override));
  MOCK_METHOD(int32, ACPCfgCarrierFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency), (override));
  MOCK_METHOD(int32, ACPCfgCarrierIntegrationBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth), (override));
  MOCK_METHOD(int32, ACPCfgCarrierMode, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierMode), (override));
  MOCK_METHOD(int32, ACPCfgCarrierRRCFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, ACPCfgDetector, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints), (override));
  MOCK_METHOD(int32, ACPCfgFFT, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding), (override));
  MOCK_METHOD(int32, ACPCfgMeasurementMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod), (override));
  MOCK_METHOD(int32, ACPCfgNoiseCompensationEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled), (override));
  MOCK_METHOD(int32, ACPCfgNumberOfCarriers, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers), (override));
  MOCK_METHOD(int32, ACPCfgNumberOfOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets), (override));
  MOCK_METHOD(int32, ACPCfgOffset, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency, int32 offsetSideband, int32 offsetEnabled), (override));
  MOCK_METHOD(int32, ACPCfgOffsetArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetFrequency[], int32 offsetSideband[], int32 offsetEnabled[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, ACPCfgOffsetFrequencyDefinition, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition), (override));
  MOCK_METHOD(int32, ACPCfgOffsetIntegrationBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth), (override));
  MOCK_METHOD(int32, ACPCfgOffsetIntegrationBandwidthArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, ACPCfgOffsetPowerReference, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetReferenceCarrier, int32 offsetReferenceSpecific), (override));
  MOCK_METHOD(int32, ACPCfgOffsetPowerReferenceArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetPowerReferenceCarrier[], int32 offsetPowerReferenceSpecific[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, ACPCfgOffsetRRCFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, ACPCfgOffsetRRCFilterArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled[], float64 rrcAlpha[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, ACPCfgOffsetRelativeAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation), (override));
  MOCK_METHOD(int32, ACPCfgOffsetRelativeAttenuationArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, ACPCfgPowerUnits, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits), (override));
  MOCK_METHOD(int32, ACPCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, ACPCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, ACPFetchAbsolutePowersTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* totalRelativePower, float64* carrierOffset, float64* integrationBandwidth), (override));
  MOCK_METHOD(int32, ACPFetchFrequencyResolution, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution), (override));
  MOCK_METHOD(int32, ACPFetchOffsetMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower), (override));
  MOCK_METHOD(int32, ACPFetchOffsetMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchRelativePowersTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchTotalCarrierPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower), (override));
  MOCK_METHOD(int32, ACPRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierAbsolutePower, float64* offsetCh0LowerRelativePower, float64* offsetCh0UpperRelativePower, float64* offsetCh1LowerRelativePower, float64* offsetCh1UpperRelativePower), (override));
  MOCK_METHOD(int32, ACPValidateNoiseCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid), (override));
  MOCK_METHOD(int32, AMPMCfgAMToAMCurveFit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType), (override));
  MOCK_METHOD(int32, AMPMCfgAMToPMCurveFit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType), (override));
  MOCK_METHOD(int32, AMPMCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, AMPMCfgCompressionPoints, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 compressionPointEnabled, float64 compressionLevel[], int32 arraySize), (override));
  MOCK_METHOD(int32, AMPMCfgDUTAverageInputPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower), (override));
  MOCK_METHOD(int32, AMPMCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, AMPMCfgMeasurementSampleRate, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate), (override));
  MOCK_METHOD(int32, AMPMCfgReferencePowerType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referencePowerType), (override));
  MOCK_METHOD(int32, AMPMCfgReferenceWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType), (override));
  MOCK_METHOD(int32, AMPMCfgSynchronizationMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod), (override));
  MOCK_METHOD(int32, AMPMCfgThreshold, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType), (override));
  MOCK_METHOD(int32, AMPMFetchAMToAMTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToAM[], float32 curveFitAMToAM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchAMToPMTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 referencePowers[], float32 measuredAMToPM[], float32 curveFitAMToPM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchCompressionPoints, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inputCompressionPoint[], float64 outputCompressionPoint[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchCurveFitCoefficients, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 amToAMCoefficients[], float32 amToPMCoefficients[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchCurveFitResidual, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* amToAMResidual, float64* amToPMResidual), (override));
  MOCK_METHOD(int32, AMPMFetchDUTCharacteristics, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanLinearGain, float64* onedBCompressionPoint, float64* meanRMSEVM), (override));
  MOCK_METHOD(int32, AMPMFetchError, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* gainErrorRange, float64* phaseErrorRange, float64* meanPhaseError), (override));
  MOCK_METHOD(int32, AMPMFetchProcessedMeanAcquiredWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchProcessedReferenceWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchRelativePhaseTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePhase[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AMPMFetchRelativePowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, AbortMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, AnalyzeIQ1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AnalyzeSpectrum1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AutoLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel), (override));
  MOCK_METHOD(int32, BuildCarrierString, (char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildHarmonicString, (char selectorString[], int32 harmonicNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildIntermodString, (char selectorString[], int32 intermodNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildListStepString, (char listName[], char resultName[], int32 stepNumber, int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, BuildListString, (char listName[], char resultName[], int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, BuildMarkerString, (char selectorString[], int32 markerNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildOffsetString, (char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildRangeSpurString, (char signalName[], char resultName[], int32 rangeNumber, int32 spurNumber, int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, BuildRangeString, (char selectorString[], int32 rangeNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildSegmentString, (char selectorString[], int32 segmentNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildSignalString, (char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, BuildSpurString, (char selectorString[], int32 spurNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, CCDFCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, CCDFCfgNumberOfRecords, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRecords), (override));
  MOCK_METHOD(int32, CCDFCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, CCDFCfgThreshold, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType), (override));
  MOCK_METHOD(int32, CCDFFetchBasicPowerProbabilities, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* tenPercentPower, float64* onePercentPower, float64* oneTenthPercentPower, float64* oneHundredthPercentPower, float64* oneThousandthPercentPower, float64* oneTenThousandthPercentPower), (override));
  MOCK_METHOD(int32, CCDFFetchGaussianProbabilitiesTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 gaussianProbabilities[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, CCDFFetchPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount), (override));
  MOCK_METHOD(int32, CCDFFetchProbabilitiesTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 probabilities[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, CCDFRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanPower, float64* meanPowerPercentile, float64* peakPower, int32* measuredSamplesCount), (override));
  MOCK_METHOD(int32, CHPCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, CHPCfgCarrierOffset, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency), (override));
  MOCK_METHOD(int32, CHPCfgDetector, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints), (override));
  MOCK_METHOD(int32, CHPCfgFFT, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding), (override));
  MOCK_METHOD(int32, CHPCfgIntegrationBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth), (override));
  MOCK_METHOD(int32, CHPCfgNumberOfCarriers, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers), (override));
  MOCK_METHOD(int32, CHPCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, CHPCfgRRCFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, CHPCfgSpan, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span), (override));
  MOCK_METHOD(int32, CHPCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, CHPFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd, float64* relativePower), (override));
  MOCK_METHOD(int32, CHPFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, CHPFetchTotalCarrierPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower), (override));
  MOCK_METHOD(int32, CHPRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* psd), (override));
  MOCK_METHOD(int32, CHPValidateNoiseCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid), (override));
  MOCK_METHOD(int32, CfgDigitalEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgExternalAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency), (override));
  MOCK_METHOD(int32, CfgFrequencyReference, (niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency), (override));
  MOCK_METHOD(int32, CfgIQPowerEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], float64 iqPowerEdgeLevel, int32 iqPowerEdgeSlope, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgMechanicalAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue), (override));
  MOCK_METHOD(int32, CfgRF, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgRFAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue), (override));
  MOCK_METHOD(int32, CfgReferenceLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel), (override));
  MOCK_METHOD(int32, CfgSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CheckMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone), (override));
  MOCK_METHOD(int32, ClearAllNamedResults, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, ClearNamedResult, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, ClearNoiseCalibrationDatabase, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CloneSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]), (override));
  MOCK_METHOD(int32, Close, (niRFmxInstrHandle instrumentHandle, int32 forceDestroy), (override));
  MOCK_METHOD(int32, Commit, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CreateList, (niRFmxInstrHandle instrumentHandle, char listName[]), (override));
  MOCK_METHOD(int32, CreateListStep, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex), (override));
  MOCK_METHOD(int32, CreateSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DPDApplyDigitalPredistortion, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64 measurementTimeout, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr, float64* powerOffset), (override));
  MOCK_METHOD(int32, DPDApplyPreDPDSignalConditioning, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0In, float64 dxIn, NIComplexSingle waveformIn[], int32 arraySizeIn, int32 idleDurationPresent, float64* x0Out, float64* dxOut, NIComplexSingle waveformOut[], int32 arraySizeOut, int32* actualArraySize, float64* papr), (override));
  MOCK_METHOD(int32, DPDCfgApplyDPDConfigurationInput, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurationInput), (override));
  MOCK_METHOD(int32, DPDCfgApplyDPDLookupTableCorrectionType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lutCorrectionType), (override));
  MOCK_METHOD(int32, DPDCfgApplyDPDMemoryModelCorrectionType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryModelCorrectionType), (override));
  MOCK_METHOD(int32, DPDCfgApplyDPDUserDPDPolynomial, (niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle dpdPolynomial[], int32 arraySize), (override));
  MOCK_METHOD(int32, DPDCfgApplyDPDUserLookupTable, (niRFmxInstrHandle instrumentHandle, char selectorString[], float32 lutInputPowers[], NIComplexSingle lutComplexGains[], int32 arraySize), (override));
  MOCK_METHOD(int32, DPDCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, DPDCfgDPDModel, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dpdModel), (override));
  MOCK_METHOD(int32, DPDCfgDUTAverageInputPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutAverageInputPower), (override));
  MOCK_METHOD(int32, DPDCfgGeneralizedMemoryPolynomialCrossTerms, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialLeadOrder, int32 memoryPolynomialLagOrder, int32 memoryPolynomialLeadMemoryDepth, int32 memoryPolynomialLagMemoryDepth, int32 memoryPolynomialMaximumLead, int32 memoryPolynomialMaximumLag), (override));
  MOCK_METHOD(int32, DPDCfgIterativeDPDEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 iterativeDPDEnabled), (override));
  MOCK_METHOD(int32, DPDCfgLookupTableAMToAMCurveFit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToAMCurveFitOrder, int32 amToAMCurveFitType), (override));
  MOCK_METHOD(int32, DPDCfgLookupTableAMToPMCurveFit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 amToPMCurveFitOrder, int32 amToPMCurveFitType), (override));
  MOCK_METHOD(int32, DPDCfgLookupTableStepSize, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 stepSize), (override));
  MOCK_METHOD(int32, DPDCfgLookupTableThreshold, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType), (override));
  MOCK_METHOD(int32, DPDCfgLookupTableType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 lookupTableType), (override));
  MOCK_METHOD(int32, DPDCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, DPDCfgMeasurementSampleRate, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sampleRateMode, float64 sampleRate), (override));
  MOCK_METHOD(int32, DPDCfgMemoryPolynomial, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 memoryPolynomialOrder, int32 memoryPolynomialMemoryDepth), (override));
  MOCK_METHOD(int32, DPDCfgPreviousDPDPolynomial, (niRFmxInstrHandle instrumentHandle, char selectorString[], NIComplexSingle previousDPDPolynomial[], int32 arraySize), (override));
  MOCK_METHOD(int32, DPDCfgReferenceWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize, int32 idleDurationPresent, int32 signalType), (override));
  MOCK_METHOD(int32, DPDCfgSynchronizationMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMethod), (override));
  MOCK_METHOD(int32, DPDFetchApplyDPDPreCFRPAPR, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* preCFRPAPR), (override));
  MOCK_METHOD(int32, DPDFetchAverageGain, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageGain), (override));
  MOCK_METHOD(int32, DPDFetchDPDPolynomial, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dpdPolynomial[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DPDFetchLookupTable, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 inputPowers[], NIComplexSingle complexGains[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DPDFetchNMSE, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* nmse), (override));
  MOCK_METHOD(int32, DPDFetchProcessedMeanAcquiredWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedMeanAcquiredWaveform[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DPDFetchProcessedReferenceWaveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle processedReferenceWaveform[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, DeleteList, (niRFmxInstrHandle instrumentHandle, char listName[]), (override));
  MOCK_METHOD(int32, DeleteSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DisableTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, FCntCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, FCntCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, FCntCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, FCntCfgThreshold, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType), (override));
  MOCK_METHOD(int32, FCntFetchAllanDeviation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* allanDeviation), (override));
  MOCK_METHOD(int32, FCntFetchFrequencyTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequencyTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, FCntFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase), (override));
  MOCK_METHOD(int32, FCntFetchPhaseTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 phaseTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, FCntFetchPowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 powerTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, FCntRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativeFrequency, float64* averageAbsoluteFrequency, float64* meanPhase), (override));
  MOCK_METHOD(int32, GetAllNamedResultNames, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists), (override));
  MOCK_METHOD(int32, GetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]), (override));
  MOCK_METHOD(int32, GetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetError, (niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, GetErrorString, (niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, HarmCfgAutoHarmonics, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoHarmonicsSetupEnabled), (override));
  MOCK_METHOD(int32, HarmCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, HarmCfgFundamentalMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, HarmCfgFundamentalRBW, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, HarmCfgHarmonic, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder, float64 harmonicBandwidth, int32 harmonicEnabled, float64 harmonicMeasurementInterval), (override));
  MOCK_METHOD(int32, HarmCfgHarmonicArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 harmonicOrder[], float64 harmonicBandwidth[], int32 harmonicEnabled[], float64 harmonicMeasurementInterval[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, HarmCfgNumberOfHarmonics, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfHarmonics), (override));
  MOCK_METHOD(int32, HarmFetchHarmonicMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageRelativePower, float64* averageAbsolutePower, float64* rbw, float64* frequency), (override));
  MOCK_METHOD(int32, HarmFetchHarmonicMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 averageRelativePower[], float64 averageAbsolutePower[], float64 rbw[], float64 frequency[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, HarmFetchHarmonicPowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, HarmFetchTHD, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower, float64* fundamentalFrequency), (override));
  MOCK_METHOD(int32, HarmRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalHarmonicDistortion, float64* averageFundamentalPower), (override));
  MOCK_METHOD(int32, IMCfgAutoIntermodsSetup, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoIntermodsSetupEnabled, int32 maximumIntermodOrder), (override));
  MOCK_METHOD(int32, IMCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, IMCfgFFT, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding), (override));
  MOCK_METHOD(int32, IMCfgFrequencyDefinition, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 frequencyDefinition), (override));
  MOCK_METHOD(int32, IMCfgFundamentalTones, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 lowerToneFrequency, float64 upperToneFrequency), (override));
  MOCK_METHOD(int32, IMCfgIntermod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder, float64 lowerIntermodFrequency, float64 upperIntermodFrequency, int32 intermodSide, int32 intermodEnabled), (override));
  MOCK_METHOD(int32, IMCfgIntermodArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 intermodOrder[], float64 lowerIntermodFrequency[], float64 upperIntermodFrequency[], int32 intermodSide[], int32 intermodEnabled[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, IMCfgMeasurementMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod), (override));
  MOCK_METHOD(int32, IMCfgNumberOfIntermods, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfIntermods), (override));
  MOCK_METHOD(int32, IMCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, IMCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, IMFetchFundamentalMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerTonePower, float64* upperTonePower), (override));
  MOCK_METHOD(int32, IMFetchInterceptPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* worstCaseOutputInterceptPower, float64* lowerOutputInterceptPower, float64* upperOutputInterceptPower), (override));
  MOCK_METHOD(int32, IMFetchInterceptPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 worstCaseOutputInterceptPower[], float64 lowerOutputInterceptPower[], float64 upperOutputInterceptPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, IMFetchIntermodMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* intermodOrder, float64* lowerIntermodPower, float64* upperIntermodPower), (override));
  MOCK_METHOD(int32, IMFetchIntermodMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 intermodOrder[], float64 lowerIntermodPower[], float64 upperIntermodPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, IMFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 spectrumIndex, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, IQCfgAcquisition, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 sampleRate, int32 numberOfRecords, float64 acquisitionTime, float64 pretriggerTime), (override));
  MOCK_METHOD(int32, IQCfgBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthAuto, float64 bandwidth), (override));
  MOCK_METHOD(int32, IQFetchData, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, float64* t0, float64* dt, NIComplexSingle data[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, IQGetRecordsDone, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* recordsDone), (override));
  MOCK_METHOD(int32, Initialize, (char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession), (override));
  MOCK_METHOD(int32, InitializeFromNIRFSASession, (uInt32 nirfsaSession, niRFmxInstrHandle* handleOut), (override));
  MOCK_METHOD(int32, Initiate, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]), (override));
  MOCK_METHOD(int32, MarkerCfgNumberOfMarkers, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfMarkers), (override));
  MOCK_METHOD(int32, MarkerCfgPeakExcursion, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 peakExcursionEnabled, float64 peakExcursion), (override));
  MOCK_METHOD(int32, MarkerCfgReferenceMarker, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceMarker), (override));
  MOCK_METHOD(int32, MarkerCfgThreshold, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 threshold), (override));
  MOCK_METHOD(int32, MarkerCfgTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 trace), (override));
  MOCK_METHOD(int32, MarkerCfgType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 markerType), (override));
  MOCK_METHOD(int32, MarkerCfgXLocation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 markerXLocation), (override));
  MOCK_METHOD(int32, MarkerFetchXY, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64* markerXLocation, float64* markerYLocation), (override));
  MOCK_METHOD(int32, MarkerNextPeak, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nextPeak, int32* nextPeakFound), (override));
  MOCK_METHOD(int32, MarkerPeakSearch, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* numberOfPeaks), (override));
  MOCK_METHOD(int32, NFCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, NFCfgCalibrationLoss, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 calibrationLossCompensationEnabled, float64 calibrationLossFrequency[], float64 calibrationLoss[], float64 calibrationLossTemperature, int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgColdSourceDUTSParameters, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutsParametersFrequency[], float64 duts21[], float64 duts12[], float64 duts11[], float64 duts22[], int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgColdSourceInputTermination, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 terminationVSWR[], float64 terminationVSWRFrequency[], float64 terminationTemperature, int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgColdSourceMode, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 coldSourceMode), (override));
  MOCK_METHOD(int32, NFCfgDUTInputLoss, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutInputLossCompensationEnabled, float64 dutInputLossFrequency[], float64 dutInputLoss[], float64 dutInputLossTemperature, int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgDUTOutputLoss, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 dutOutputLossCompensationEnabled, float64 dutOutputLossFrequency[], float64 dutOutputLoss[], float64 dutOutputLossTemperature, int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgFrequencyList, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgFrequencyListStartStopPoints, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 numberOfPoints), (override));
  MOCK_METHOD(int32, NFCfgFrequencyListStartStopStep, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 stepSize), (override));
  MOCK_METHOD(int32, NFCfgMeasurementBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth), (override));
  MOCK_METHOD(int32, NFCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, NFCfgMeasurementMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod), (override));
  MOCK_METHOD(int32, NFCfgYFactorMode, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 yFactorMode), (override));
  MOCK_METHOD(int32, NFCfgYFactorNoiseSourceENR, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 enrFrequency[], float64 enr[], float64 coldTemperature, float64 offTemperature, int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgYFactorNoiseSourceLoss, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseSourceLossCompensationEnabled, float64 noiseSourceLossFrequency[], float64 noiseSourceLoss[], float64 noiseSourceLossTemperature, int32 arraySize), (override));
  MOCK_METHOD(int32, NFCfgYFactorNoiseSourceSettlingTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 settlingTime), (override));
  MOCK_METHOD(int32, NFClearCalibrationDatabase, (niRFmxInstrHandle instrumentHandle, char calibrationSetupID[]), (override));
  MOCK_METHOD(int32, NFFetchAnalyzerNoiseFigure, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 analyzerNoiseFigure[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, NFFetchColdSourcePower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 coldSourcePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, NFFetchDUTNoiseFigureAndGain, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 dutNoiseFigure[], float64 dutNoiseTemperature[], float64 dutGain[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, NFFetchYFactorPowers, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 hotPower[], float64 coldPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, NFFetchYFactors, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 measurementYFactor[], float64 calibrationYFactor[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, NFRecommendReferenceLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 dutMaxGain, float64 dutMaxNoiseFigure, float64* referenceLevel), (override));
  MOCK_METHOD(int32, NFValidateCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* calibrationDataValid), (override));
  MOCK_METHOD(int32, OBWCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, OBWCfgBandwidthPercentage, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidthPercentage), (override));
  MOCK_METHOD(int32, OBWCfgFFT, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding), (override));
  MOCK_METHOD(int32, OBWCfgPowerUnits, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits), (override));
  MOCK_METHOD(int32, OBWCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, OBWCfgSpan, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span), (override));
  MOCK_METHOD(int32, OBWCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, OBWFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency), (override));
  MOCK_METHOD(int32, OBWFetchSpectrumTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OBWRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* averagePower, float64* frequencyResolution, float64* startFrequency, float64* stopFrequency), (override));
  MOCK_METHOD(int32, PAVTCfgMeasurementBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementBandwidth), (override));
  MOCK_METHOD(int32, PAVTCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementOffset, float64 measurementLength), (override));
  MOCK_METHOD(int32, PAVTCfgMeasurementIntervalMode, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementIntervalMode), (override));
  MOCK_METHOD(int32, PAVTCfgMeasurementLocationType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementLocationType), (override));
  MOCK_METHOD(int32, PAVTCfgNumberOfSegments, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments), (override));
  MOCK_METHOD(int32, PAVTCfgSegmentMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset, float64 segmentMeasurementLength), (override));
  MOCK_METHOD(int32, PAVTCfgSegmentMeasurementIntervalArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentMeasurementOffset[], float64 segmentMeasurementLength[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, PAVTCfgSegmentStartTimeList, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 segmentStartTime[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, PAVTCfgSegmentStartTimeStep, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSegments, float64 segment0StartTime, float64 segmentInterval), (override));
  MOCK_METHOD(int32, PAVTCfgSegmentType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType), (override));
  MOCK_METHOD(int32, PAVTCfgSegmentTypeArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 segmentType[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, PAVTFetchAmplitudeTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 amplitude[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PAVTFetchPhaseAndAmplitude, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRelativePhase, float64* meanRelativeAmplitude, float64* meanAbsolutePhase, float64* meanAbsoluteAmplitude), (override));
  MOCK_METHOD(int32, PAVTFetchPhaseAndAmplitudeArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRelativePhase[], float64 meanRelativeAmplitude[], float64 meanAbsolutePhase[], float64 meanAbsoluteAmplitude[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PAVTFetchPhaseTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 phase[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgAutoRange, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, float64 rbwPercentage), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgAveragingMultiplier, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingMultiplier), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgCancellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cancellationEnabled, float64 cancellationThreshold, float32 frequency[], float32 referencePhaseNoise[], int32 arraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgIntegratedNoise, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integratedNoiseRangeDefinition, float64 integratedNoiseStartFrequency[], float64 integratedNoiseStopFrequency[], int32 arraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgNumberOfRanges, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgRangeArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rangeStartFrequency[], float64 rangeStopFrequency[], float64 rangeRBWPercentage[], int32 rangeAveragingCount[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgRangeDefinition, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rangeDefinition), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgSmoothing, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 smoothingType, float64 smoothingPercentage), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgSpotNoiseFrequencyList, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 frequencyList[], int32 arraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseCfgSpurRemoval, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spurRemovalEnabled, float64 peakExcursion), (override));
  MOCK_METHOD(int32, PhaseNoiseFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* carrierFrequency, float64* carrierPower), (override));
  MOCK_METHOD(int32, PhaseNoiseFetchIntegratedNoise, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 integratedPhaseNoise[], float64 residualPMInRadian[], float64 residualPMInDegree[], float64 residualFM[], float64 jitter[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseFetchMeasuredLogPlotTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 measuredPhaseNoise[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseFetchSmoothedLogPlotTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float32 frequency[], float32 smoothedPhaseNoise[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PhaseNoiseFetchSpotNoise, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spotPhaseNoise[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ResetAttribute, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID), (override));
  MOCK_METHOD(int32, ResetToDefault, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, SEMCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, SEMCfgCarrierChannelBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierChannelBandwidth), (override));
  MOCK_METHOD(int32, SEMCfgCarrierEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 carrierEnabled), (override));
  MOCK_METHOD(int32, SEMCfgCarrierFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 carrierFrequency), (override));
  MOCK_METHOD(int32, SEMCfgCarrierIntegrationBandwidth, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 integrationBandwidth), (override));
  MOCK_METHOD(int32, SEMCfgCarrierRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, SEMCfgCarrierRRCFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rrcFilterEnabled, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, SEMCfgFFT, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding), (override));
  MOCK_METHOD(int32, SEMCfgNumberOfCarriers, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfCarriers), (override));
  MOCK_METHOD(int32, SEMCfgNumberOfOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets), (override));
  MOCK_METHOD(int32, SEMCfgOffsetAbsoluteLimit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop), (override));
  MOCK_METHOD(int32, SEMCfgOffsetAbsoluteLimitArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetBandwidthIntegral, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 bandwidthIntegral), (override));
  MOCK_METHOD(int32, SEMCfgOffsetFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetEnabled, int32 offsetSideband), (override));
  MOCK_METHOD(int32, SEMCfgOffsetFrequencyArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetEnabled[], int32 offsetSideband[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetFrequencyDefinition, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetFrequencyDefinition), (override));
  MOCK_METHOD(int32, SEMCfgOffsetLimitFailMask, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRBWFilterArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeAttenuationArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeLimit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode, float64 relativeLimitStart, float64 relativeLimitStop), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeLimitArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 relativeLimitMode[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgPowerUnits, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits), (override));
  MOCK_METHOD(int32, SEMCfgReferenceType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 referenceType), (override));
  MOCK_METHOD(int32, SEMCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, SEMFetchAbsoluteMaskTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* peakAbsolutePower, float64* peakFrequency, float64* totalRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchCompositeMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* compositeMeasurementStatus), (override));
  MOCK_METHOD(int32, SEMFetchFrequencyResolution, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* frequencyResolution), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchRelativeMaskTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 relativeMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchTotalCarrierPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalCarrierPower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAbsolutePower, float64* totalRelativePower, float64* peakAbsolutePower, float64* peakFrequency, float64* peakRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 totalAbsolutePower[], float64 totalRelativePower[], float64 peakAbsolutePower[], float64 peakFrequency[], float64 peakRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SelectMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces), (override));
  MOCK_METHOD(int32, SendSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle), (override));
  MOCK_METHOD(int32, SetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]), (override));
  MOCK_METHOD(int32, SetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SpectrumCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, SpectrumCfgDetector, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints), (override));
  MOCK_METHOD(int32, SpectrumCfgFFT, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow, float64 fftPadding), (override));
  MOCK_METHOD(int32, SpectrumCfgFrequencyStartStop, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency), (override));
  MOCK_METHOD(int32, SpectrumCfgNoiseCompensationEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled), (override));
  MOCK_METHOD(int32, SpectrumCfgPowerUnits, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 spectrumPowerUnits), (override));
  MOCK_METHOD(int32, SpectrumCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, SpectrumCfgSpan, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 span), (override));
  MOCK_METHOD(int32, SpectrumCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, SpectrumCfgVBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio), (override));
  MOCK_METHOD(int32, SpectrumFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* peakAmplitude, float64* peakFrequency, float64* frequencyResolution), (override));
  MOCK_METHOD(int32, SpectrumFetchPowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpectrumFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpectrumRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpectrumValidateNoiseCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid), (override));
  MOCK_METHOD(int32, SpurCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, SpurCfgFFTWindowType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindow), (override));
  MOCK_METHOD(int32, SpurCfgNumberOfRanges, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfRanges), (override));
  MOCK_METHOD(int32, SpurCfgRangeAbsoluteLimit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode, float64 absoluteLimitStart, float64 absoluteLimitStop), (override));
  MOCK_METHOD(int32, SpurCfgRangeAbsoluteLimitArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 absoluteLimitMode[], float64 absoluteLimitStart[], float64 absoluteLimitStop[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeDetector, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType, int32 detectorPoints), (override));
  MOCK_METHOD(int32, SpurCfgRangeDetectorArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 detectorType[], int32 detectorPoints[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency, float64 stopFrequency, int32 rangeEnabled), (override));
  MOCK_METHOD(int32, SpurCfgRangeFrequencyArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 startFrequency[], float64 stopFrequency[], int32 rangeEnabled[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeNumberOfSpursToReport, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport), (override));
  MOCK_METHOD(int32, SpurCfgRangeNumberOfSpursToReportArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSpursToReport[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangePeakCriteria, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold, float64 excursion), (override));
  MOCK_METHOD(int32, SpurCfgRangePeakCriteriaArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 threshold[], float64 excursion[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeRBWArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto[], float64 rbw[], int32 rbwFilterType[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, SpurCfgRangeRelativeAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation), (override));
  MOCK_METHOD(int32, SpurCfgRangeRelativeAttenuationArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeAttenuation[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, SpurCfgRangeSweepTimeArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto[], float64 sweepTimeInterval[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgRangeVBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio), (override));
  MOCK_METHOD(int32, SpurCfgRangeVBWFilterArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto[], float64 vbw[], float64 vbwToRBWRatio[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SpurCfgTraceRangeIndex, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 traceRangeIndex), (override));
  MOCK_METHOD(int32, SpurFetchAllSpurs, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurMargin[], float64 spurAbsoluteLimit[], int32 spurRangeIndex[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpurFetchMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus), (override));
  MOCK_METHOD(int32, SpurFetchRangeAbsoluteLimitTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 absoluteLimit[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpurFetchRangeSpectrumTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rangeSpectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpurFetchRangeStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* rangeStatus, int32* detectedSpurs), (override));
  MOCK_METHOD(int32, SpurFetchRangeStatusArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 rangeStatus[], int32 numberOfDetectedSpurs[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SpurFetchSpurMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* spurFrequency, float64* spurAmplitude, float64* spurMargin, float64* spurAbsoluteLimit), (override));
  MOCK_METHOD(int32, SpurFetchSpurMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 spurFrequency[], float64 spurAmplitude[], float64 spurAbsoluteLimit[], float64 spurMargin[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, TXPCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, TXPCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval), (override));
  MOCK_METHOD(int32, TXPCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 rbw, int32 rbwFilterType, float64 rrcAlpha), (override));
  MOCK_METHOD(int32, TXPCfgThreshold, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 thresholdEnabled, float64 thresholdLevel, int32 thresholdType), (override));
  MOCK_METHOD(int32, TXPCfgVBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 vbwAuto, float64 vbw, float64 vbwToRBWRatio), (override));
  MOCK_METHOD(int32, TXPFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower), (override));
  MOCK_METHOD(int32, TXPFetchPowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 power[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, TXPRead, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* averageMeanPower, float64* peakToAverageRatio, float64* maximumPower, float64* minimumPower), (override));
  MOCK_METHOD(int32, WaitForAcquisitionComplete, (niRFmxInstrHandle instrumentHandle, float64 timeout), (override));
  MOCK_METHOD(int32, WaitForMeasurementComplete, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIRFMXSPECAN_GRPC_MOCK_LIBRARY_H
