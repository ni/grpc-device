
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFMXBT Metadata
//---------------------------------------------------------------------
#ifndef NIRFMXBT_GRPC_SERVICE_H
#define NIRFMXBT_GRPC_SERVICE_H

#include <nirfmxbt.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfmxbt_library_interface.h"

namespace nirfmxbt_grpc {

struct NiRFmxBTFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiRFmxBTFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiRFmxBTService final : public NiRFmxBT::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<niRFmxInstrHandle>>;

  NiRFmxBTService(
    NiRFmxBTLibraryInterface* library,
    ResourceRepositorySharedPtr session_repository,
    const NiRFmxBTFeatureToggles& feature_toggles = {});
  virtual ~NiRFmxBTService();
  
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status Initialize(::grpc::ServerContext* context, const InitializeRequest* request, InitializeResponse* response) override;
private:
  NiRFmxBTLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  NiRFmxBTFeatureToggles feature_toggles_;
};

} // namespace nirfmxbt_grpc

#endif  // NIRFMXBT_GRPC_SERVICE_H
