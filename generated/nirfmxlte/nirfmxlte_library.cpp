//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXLTE Metadata
//---------------------------------------------------------------------
#include "nirfmxlte_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxLTE.dll";
#else
static const char* kLibraryName = "libnirfmxlte.so.1";
#endif

namespace nirfmxlte_grpc {

NiRFmxLTELibrary::NiRFmxLTELibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.ACPCfgAveraging = reinterpret_cast<ACPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgAveraging"));
  function_pointers_.ACPCfgConfigurableNumberOfOffsetsEnabled = reinterpret_cast<ACPCfgConfigurableNumberOfOffsetsEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgConfigurableNumberOfOffsetsEnabled"));
  function_pointers_.ACPCfgMeasurementMethod = reinterpret_cast<ACPCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgMeasurementMethod"));
  function_pointers_.ACPCfgNoiseCompensationEnabled = reinterpret_cast<ACPCfgNoiseCompensationEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgNoiseCompensationEnabled"));
  function_pointers_.ACPCfgNumberOfEUTRAOffsets = reinterpret_cast<ACPCfgNumberOfEUTRAOffsetsPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgNumberOfEUTRAOffsets"));
  function_pointers_.ACPCfgNumberOfGSMOffsets = reinterpret_cast<ACPCfgNumberOfGSMOffsetsPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgNumberOfGSMOffsets"));
  function_pointers_.ACPCfgNumberOfUTRAOffsets = reinterpret_cast<ACPCfgNumberOfUTRAOffsetsPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgNumberOfUTRAOffsets"));
  function_pointers_.ACPCfgPowerUnits = reinterpret_cast<ACPCfgPowerUnitsPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgPowerUnits"));
  function_pointers_.ACPCfgRBWFilter = reinterpret_cast<ACPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgRBWFilter"));
  function_pointers_.ACPCfgSweepTime = reinterpret_cast<ACPCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgSweepTime"));
  function_pointers_.ACPCfgUTRAAndEUTRAOffsets = reinterpret_cast<ACPCfgUTRAAndEUTRAOffsetsPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPCfgUTRAAndEUTRAOffsets"));
  function_pointers_.ACPFetchAbsolutePowersTrace = reinterpret_cast<ACPFetchAbsolutePowersTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchAbsolutePowersTrace"));
  function_pointers_.ACPFetchComponentCarrierMeasurement = reinterpret_cast<ACPFetchComponentCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchComponentCarrierMeasurement"));
  function_pointers_.ACPFetchComponentCarrierMeasurementArray = reinterpret_cast<ACPFetchComponentCarrierMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchComponentCarrierMeasurementArray"));
  function_pointers_.ACPFetchOffsetMeasurement = reinterpret_cast<ACPFetchOffsetMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchOffsetMeasurement"));
  function_pointers_.ACPFetchOffsetMeasurementArray = reinterpret_cast<ACPFetchOffsetMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchOffsetMeasurementArray"));
  function_pointers_.ACPFetchRelativePowersTrace = reinterpret_cast<ACPFetchRelativePowersTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchRelativePowersTrace"));
  function_pointers_.ACPFetchSpectrum = reinterpret_cast<ACPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchSpectrum"));
  function_pointers_.ACPFetchSubblockMeasurement = reinterpret_cast<ACPFetchSubblockMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchSubblockMeasurement"));
  function_pointers_.ACPFetchTotalAggregatedPower = reinterpret_cast<ACPFetchTotalAggregatedPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPFetchTotalAggregatedPower"));
  function_pointers_.ACPValidateNoiseCalibrationData = reinterpret_cast<ACPValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxLTE_ACPValidateNoiseCalibrationData"));
  function_pointers_.AbortMeasurements = reinterpret_cast<AbortMeasurementsPtr>(shared_library_.get_function_pointer("RFmxLTE_AbortMeasurements"));
  function_pointers_.AnalyzeIQ1Waveform = reinterpret_cast<AnalyzeIQ1WaveformPtr>(shared_library_.get_function_pointer("RFmxLTE_AnalyzeIQ1Waveform"));
  function_pointers_.AnalyzeSpectrum1Waveform = reinterpret_cast<AnalyzeSpectrum1WaveformPtr>(shared_library_.get_function_pointer("RFmxLTE_AnalyzeSpectrum1Waveform"));
  function_pointers_.AutoLevel = reinterpret_cast<AutoLevelPtr>(shared_library_.get_function_pointer("RFmxLTE_AutoLevel"));
  function_pointers_.BuildCarrierString = reinterpret_cast<BuildCarrierStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildCarrierString"));
  function_pointers_.BuildClusterString = reinterpret_cast<BuildClusterStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildClusterString"));
  function_pointers_.BuildOffsetString = reinterpret_cast<BuildOffsetStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildOffsetString"));
  function_pointers_.BuildPDSCHString = reinterpret_cast<BuildPDSCHStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildPDSCHString"));
  function_pointers_.BuildSignalString = reinterpret_cast<BuildSignalStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildSignalString"));
  function_pointers_.BuildSubblockString = reinterpret_cast<BuildSubblockStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildSubblockString"));
  function_pointers_.BuildSubframeString = reinterpret_cast<BuildSubframeStringPtr>(shared_library_.get_function_pointer("RFmxLTE_BuildSubframeString"));
  function_pointers_.CHPCfgAveraging = reinterpret_cast<CHPCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPCfgAveraging"));
  function_pointers_.CHPCfgIntegrationBandwidthType = reinterpret_cast<CHPCfgIntegrationBandwidthTypePtr>(shared_library_.get_function_pointer("RFmxLTE_CHPCfgIntegrationBandwidthType"));
  function_pointers_.CHPCfgRBWFilter = reinterpret_cast<CHPCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPCfgRBWFilter"));
  function_pointers_.CHPCfgSweepTime = reinterpret_cast<CHPCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxLTE_CHPCfgSweepTime"));
  function_pointers_.CHPFetchComponentCarrierMeasurement = reinterpret_cast<CHPFetchComponentCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPFetchComponentCarrierMeasurement"));
  function_pointers_.CHPFetchComponentCarrierMeasurementArray = reinterpret_cast<CHPFetchComponentCarrierMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPFetchComponentCarrierMeasurementArray"));
  function_pointers_.CHPFetchSpectrum = reinterpret_cast<CHPFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPFetchSpectrum"));
  function_pointers_.CHPFetchSubblockMeasurement = reinterpret_cast<CHPFetchSubblockMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPFetchSubblockMeasurement"));
  function_pointers_.CHPFetchTotalAggregatedPower = reinterpret_cast<CHPFetchTotalAggregatedPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPFetchTotalAggregatedPower"));
  function_pointers_.CHPValidateNoiseCalibrationData = reinterpret_cast<CHPValidateNoiseCalibrationDataPtr>(shared_library_.get_function_pointer("RFmxLTE_CHPValidateNoiseCalibrationData"));
  function_pointers_.CfgAutoDMRSDetectionEnabled = reinterpret_cast<CfgAutoDMRSDetectionEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgAutoDMRSDetectionEnabled"));
  function_pointers_.CfgAutoNPUSCHChannelDetectionEnabled = reinterpret_cast<CfgAutoNPUSCHChannelDetectionEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgAutoNPUSCHChannelDetectionEnabled"));
  function_pointers_.CfgAutoResourceBlockDetectionEnabled = reinterpret_cast<CfgAutoResourceBlockDetectionEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgAutoResourceBlockDetectionEnabled"));
  function_pointers_.CfgBand = reinterpret_cast<CfgBandPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgBand"));
  function_pointers_.CfgCellSpecificRatio = reinterpret_cast<CfgCellSpecificRatioPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgCellSpecificRatio"));
  function_pointers_.CfgComponentCarrier = reinterpret_cast<CfgComponentCarrierPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgComponentCarrier"));
  function_pointers_.CfgComponentCarrierArray = reinterpret_cast<CfgComponentCarrierArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgComponentCarrierArray"));
  function_pointers_.CfgComponentCarrierSpacing = reinterpret_cast<CfgComponentCarrierSpacingPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgComponentCarrierSpacing"));
  function_pointers_.CfgDigitalEdgeTrigger = reinterpret_cast<CfgDigitalEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDigitalEdgeTrigger"));
  function_pointers_.CfgDownlinkAutoCellIDDetectionEnabled = reinterpret_cast<CfgDownlinkAutoCellIDDetectionEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkAutoCellIDDetectionEnabled"));
  function_pointers_.CfgDownlinkAutoChannelDetection = reinterpret_cast<CfgDownlinkAutoChannelDetectionPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkAutoChannelDetection"));
  function_pointers_.CfgDownlinkChannelConfigurationMode = reinterpret_cast<CfgDownlinkChannelConfigurationModePtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkChannelConfigurationMode"));
  function_pointers_.CfgDownlinkNumberOfSubframes = reinterpret_cast<CfgDownlinkNumberOfSubframesPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkNumberOfSubframes"));
  function_pointers_.CfgDownlinkSynchronizationSignal = reinterpret_cast<CfgDownlinkSynchronizationSignalPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkSynchronizationSignal"));
  function_pointers_.CfgDownlinkTestModel = reinterpret_cast<CfgDownlinkTestModelPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkTestModel"));
  function_pointers_.CfgDownlinkTestModelArray = reinterpret_cast<CfgDownlinkTestModelArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDownlinkTestModelArray"));
  function_pointers_.CfgDuplexScheme = reinterpret_cast<CfgDuplexSchemePtr>(shared_library_.get_function_pointer("RFmxLTE_CfgDuplexScheme"));
  function_pointers_.CfgEMTCAnalysisEnabled = reinterpret_cast<CfgEMTCAnalysisEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgEMTCAnalysisEnabled"));
  function_pointers_.CfgExternalAttenuation = reinterpret_cast<CfgExternalAttenuationPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgExternalAttenuation"));
  function_pointers_.CfgFrequency = reinterpret_cast<CfgFrequencyPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgFrequency"));
  function_pointers_.CfgFrequencyEARFCN = reinterpret_cast<CfgFrequencyEARFCNPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgFrequencyEARFCN"));
  function_pointers_.CfgFrequencyReference = reinterpret_cast<CfgFrequencyReferencePtr>(shared_library_.get_function_pointer("RFmxLTE_CfgFrequencyReference"));
  function_pointers_.CfgIQPowerEdgeTrigger = reinterpret_cast<CfgIQPowerEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgIQPowerEdgeTrigger"));
  function_pointers_.CfgLinkDirection = reinterpret_cast<CfgLinkDirectionPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgLinkDirection"));
  function_pointers_.CfgMechanicalAttenuation = reinterpret_cast<CfgMechanicalAttenuationPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgMechanicalAttenuation"));
  function_pointers_.CfgNBIoTComponentCarrier = reinterpret_cast<CfgNBIoTComponentCarrierPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNBIoTComponentCarrier"));
  function_pointers_.CfgNPUSCHDMRS = reinterpret_cast<CfgNPUSCHDMRSPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNPUSCHDMRS"));
  function_pointers_.CfgNPUSCHFormat = reinterpret_cast<CfgNPUSCHFormatPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNPUSCHFormat"));
  function_pointers_.CfgNPUSCHStartingSlot = reinterpret_cast<CfgNPUSCHStartingSlotPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNPUSCHStartingSlot"));
  function_pointers_.CfgNPUSCHTones = reinterpret_cast<CfgNPUSCHTonesPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNPUSCHTones"));
  function_pointers_.CfgNumberOfComponentCarriers = reinterpret_cast<CfgNumberOfComponentCarriersPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNumberOfComponentCarriers"));
  function_pointers_.CfgNumberOfDUTAntennas = reinterpret_cast<CfgNumberOfDUTAntennasPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNumberOfDUTAntennas"));
  function_pointers_.CfgNumberOfPDSCHChannels = reinterpret_cast<CfgNumberOfPDSCHChannelsPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNumberOfPDSCHChannels"));
  function_pointers_.CfgNumberOfPUSCHResourceBlockClusters = reinterpret_cast<CfgNumberOfPUSCHResourceBlockClustersPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNumberOfPUSCHResourceBlockClusters"));
  function_pointers_.CfgNumberOfSubblocks = reinterpret_cast<CfgNumberOfSubblocksPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgNumberOfSubblocks"));
  function_pointers_.CfgPBCH = reinterpret_cast<CfgPBCHPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPBCH"));
  function_pointers_.CfgPCFICH = reinterpret_cast<CfgPCFICHPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPCFICH"));
  function_pointers_.CfgPDCCH = reinterpret_cast<CfgPDCCHPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPDCCH"));
  function_pointers_.CfgPDSCH = reinterpret_cast<CfgPDSCHPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPDSCH"));
  function_pointers_.CfgPHICH = reinterpret_cast<CfgPHICHPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPHICH"));
  function_pointers_.CfgPSSCHModulationType = reinterpret_cast<CfgPSSCHModulationTypePtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPSSCHModulationType"));
  function_pointers_.CfgPSSCHResourceBlocks = reinterpret_cast<CfgPSSCHResourceBlocksPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPSSCHResourceBlocks"));
  function_pointers_.CfgPUSCHModulationType = reinterpret_cast<CfgPUSCHModulationTypePtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPUSCHModulationType"));
  function_pointers_.CfgPUSCHResourceBlocks = reinterpret_cast<CfgPUSCHResourceBlocksPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgPUSCHResourceBlocks"));
  function_pointers_.CfgRF = reinterpret_cast<CfgRFPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgRF"));
  function_pointers_.CfgRFAttenuation = reinterpret_cast<CfgRFAttenuationPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgRFAttenuation"));
  function_pointers_.CfgReferenceLevel = reinterpret_cast<CfgReferenceLevelPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgReferenceLevel"));
  function_pointers_.CfgSoftwareEdgeTrigger = reinterpret_cast<CfgSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgSoftwareEdgeTrigger"));
  function_pointers_.CfgTransmitAntennaToAnalyze = reinterpret_cast<CfgTransmitAntennaToAnalyzePtr>(shared_library_.get_function_pointer("RFmxLTE_CfgTransmitAntennaToAnalyze"));
  function_pointers_.CfgeNodeBCategory = reinterpret_cast<CfgeNodeBCategoryPtr>(shared_library_.get_function_pointer("RFmxLTE_CfgeNodeBCategory"));
  function_pointers_.CheckMeasurementStatus = reinterpret_cast<CheckMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxLTE_CheckMeasurementStatus"));
  function_pointers_.ClearAllNamedResults = reinterpret_cast<ClearAllNamedResultsPtr>(shared_library_.get_function_pointer("RFmxLTE_ClearAllNamedResults"));
  function_pointers_.ClearNamedResult = reinterpret_cast<ClearNamedResultPtr>(shared_library_.get_function_pointer("RFmxLTE_ClearNamedResult"));
  function_pointers_.ClearNoiseCalibrationDatabase = reinterpret_cast<ClearNoiseCalibrationDatabasePtr>(shared_library_.get_function_pointer("RFmxLTE_ClearNoiseCalibrationDatabase"));
  function_pointers_.CloneSignalConfiguration = reinterpret_cast<CloneSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxLTE_CloneSignalConfiguration"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("RFmxLTE_Close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("RFmxLTE_Commit"));
  function_pointers_.CreateSignalConfiguration = reinterpret_cast<CreateSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxLTE_CreateSignalConfiguration"));
  function_pointers_.DeleteSignalConfiguration = reinterpret_cast<DeleteSignalConfigurationPtr>(shared_library_.get_function_pointer("RFmxLTE_DeleteSignalConfiguration"));
  function_pointers_.DisableTrigger = reinterpret_cast<DisableTriggerPtr>(shared_library_.get_function_pointer("RFmxLTE_DisableTrigger"));
  function_pointers_.GetAllNamedResultNames = reinterpret_cast<GetAllNamedResultNamesPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAllNamedResultNames"));
  function_pointers_.GetAttributeF32 = reinterpret_cast<GetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeF32"));
  function_pointers_.GetAttributeF32Array = reinterpret_cast<GetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeF32Array"));
  function_pointers_.GetAttributeF64 = reinterpret_cast<GetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeF64"));
  function_pointers_.GetAttributeF64Array = reinterpret_cast<GetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeF64Array"));
  function_pointers_.GetAttributeI16 = reinterpret_cast<GetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI16"));
  function_pointers_.GetAttributeI32 = reinterpret_cast<GetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI32"));
  function_pointers_.GetAttributeI32Array = reinterpret_cast<GetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI32Array"));
  function_pointers_.GetAttributeI64 = reinterpret_cast<GetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI64"));
  function_pointers_.GetAttributeI64Array = reinterpret_cast<GetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI64Array"));
  function_pointers_.GetAttributeI8 = reinterpret_cast<GetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI8"));
  function_pointers_.GetAttributeI8Array = reinterpret_cast<GetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeI8Array"));
  function_pointers_.GetAttributeNIComplexDoubleArray = reinterpret_cast<GetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeNIComplexDoubleArray"));
  function_pointers_.GetAttributeNIComplexSingleArray = reinterpret_cast<GetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeNIComplexSingleArray"));
  function_pointers_.GetAttributeString = reinterpret_cast<GetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeString"));
  function_pointers_.GetAttributeU16 = reinterpret_cast<GetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeU16"));
  function_pointers_.GetAttributeU32 = reinterpret_cast<GetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeU32"));
  function_pointers_.GetAttributeU32Array = reinterpret_cast<GetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeU32Array"));
  function_pointers_.GetAttributeU64Array = reinterpret_cast<GetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeU64Array"));
  function_pointers_.GetAttributeU8 = reinterpret_cast<GetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeU8"));
  function_pointers_.GetAttributeU8Array = reinterpret_cast<GetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_GetAttributeU8Array"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxLTE_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxLTE_GetErrorString"));
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("RFmxLTE_Initialize"));
  function_pointers_.InitializeFromNIRFSASession = reinterpret_cast<InitializeFromNIRFSASessionPtr>(shared_library_.get_function_pointer("RFmxLTE_InitializeFromNIRFSASession"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("RFmxLTE_Initiate"));
  function_pointers_.ModAccCfgAveraging = reinterpret_cast<ModAccCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgAveraging"));
  function_pointers_.ModAccCfgCommonClockSourceEnabled = reinterpret_cast<ModAccCfgCommonClockSourceEnabledPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgCommonClockSourceEnabled"));
  function_pointers_.ModAccCfgEVMUnit = reinterpret_cast<ModAccCfgEVMUnitPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgEVMUnit"));
  function_pointers_.ModAccCfgFFTWindowOffset = reinterpret_cast<ModAccCfgFFTWindowOffsetPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgFFTWindowOffset"));
  function_pointers_.ModAccCfgFFTWindowPosition = reinterpret_cast<ModAccCfgFFTWindowPositionPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgFFTWindowPosition"));
  function_pointers_.ModAccCfgInBandEmissionMaskType = reinterpret_cast<ModAccCfgInBandEmissionMaskTypePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgInBandEmissionMaskType"));
  function_pointers_.ModAccCfgSynchronizationModeAndInterval = reinterpret_cast<ModAccCfgSynchronizationModeAndIntervalPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccCfgSynchronizationModeAndInterval"));
  function_pointers_.ModAccFetchCSRSConstellation = reinterpret_cast<ModAccFetchCSRSConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCSRSConstellation"));
  function_pointers_.ModAccFetchCSRSEVM = reinterpret_cast<ModAccFetchCSRSEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCSRSEVM"));
  function_pointers_.ModAccFetchCSRSEVMArray = reinterpret_cast<ModAccFetchCSRSEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCSRSEVMArray"));
  function_pointers_.ModAccFetchCompositeEVM = reinterpret_cast<ModAccFetchCompositeEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCompositeEVM"));
  function_pointers_.ModAccFetchCompositeEVMArray = reinterpret_cast<ModAccFetchCompositeEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCompositeEVMArray"));
  function_pointers_.ModAccFetchCompositeMagnitudeAndPhaseError = reinterpret_cast<ModAccFetchCompositeMagnitudeAndPhaseErrorPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseError"));
  function_pointers_.ModAccFetchCompositeMagnitudeAndPhaseErrorArray = reinterpret_cast<ModAccFetchCompositeMagnitudeAndPhaseErrorArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseErrorArray"));
  function_pointers_.ModAccFetchDownlinkDetectedCellID = reinterpret_cast<ModAccFetchDownlinkDetectedCellIDPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkDetectedCellID"));
  function_pointers_.ModAccFetchDownlinkDetectedCellIDArray = reinterpret_cast<ModAccFetchDownlinkDetectedCellIDArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkDetectedCellIDArray"));
  function_pointers_.ModAccFetchDownlinkPBCHConstellation = reinterpret_cast<ModAccFetchDownlinkPBCHConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkPBCHConstellation"));
  function_pointers_.ModAccFetchDownlinkPCFICHConstellation = reinterpret_cast<ModAccFetchDownlinkPCFICHConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkPCFICHConstellation"));
  function_pointers_.ModAccFetchDownlinkPDCCHConstellation = reinterpret_cast<ModAccFetchDownlinkPDCCHConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkPDCCHConstellation"));
  function_pointers_.ModAccFetchDownlinkPHICHConstellation = reinterpret_cast<ModAccFetchDownlinkPHICHConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkPHICHConstellation"));
  function_pointers_.ModAccFetchDownlinkTransmitPower = reinterpret_cast<ModAccFetchDownlinkTransmitPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkTransmitPower"));
  function_pointers_.ModAccFetchDownlinkTransmitPowerArray = reinterpret_cast<ModAccFetchDownlinkTransmitPowerArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchDownlinkTransmitPowerArray"));
  function_pointers_.ModAccFetchEVMHighPerSymbolTrace = reinterpret_cast<ModAccFetchEVMHighPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchEVMHighPerSymbolTrace"));
  function_pointers_.ModAccFetchEVMLowPerSymbolTrace = reinterpret_cast<ModAccFetchEVMLowPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchEVMLowPerSymbolTrace"));
  function_pointers_.ModAccFetchEVMPerSlotTrace = reinterpret_cast<ModAccFetchEVMPerSlotTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchEVMPerSlotTrace"));
  function_pointers_.ModAccFetchEVMPerSubcarrierTrace = reinterpret_cast<ModAccFetchEVMPerSubcarrierTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchEVMPerSubcarrierTrace"));
  function_pointers_.ModAccFetchEVMPerSymbolTrace = reinterpret_cast<ModAccFetchEVMPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchEVMPerSymbolTrace"));
  function_pointers_.ModAccFetchIQImpairments = reinterpret_cast<ModAccFetchIQImpairmentsPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchIQImpairments"));
  function_pointers_.ModAccFetchIQImpairmentsArray = reinterpret_cast<ModAccFetchIQImpairmentsArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchIQImpairmentsArray"));
  function_pointers_.ModAccFetchInBandEmissionMargin = reinterpret_cast<ModAccFetchInBandEmissionMarginPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchInBandEmissionMargin"));
  function_pointers_.ModAccFetchInBandEmissionMarginArray = reinterpret_cast<ModAccFetchInBandEmissionMarginArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchInBandEmissionMarginArray"));
  function_pointers_.ModAccFetchInBandEmissionTrace = reinterpret_cast<ModAccFetchInBandEmissionTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchInBandEmissionTrace"));
  function_pointers_.ModAccFetchMaximumEVMPerSlotTrace = reinterpret_cast<ModAccFetchMaximumEVMPerSlotTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchMaximumEVMPerSlotTrace"));
  function_pointers_.ModAccFetchMaximumEVMPerSubcarrierTrace = reinterpret_cast<ModAccFetchMaximumEVMPerSubcarrierTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchMaximumEVMPerSubcarrierTrace"));
  function_pointers_.ModAccFetchMaximumEVMPerSymbolTrace = reinterpret_cast<ModAccFetchMaximumEVMPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchMaximumEVMPerSymbolTrace"));
  function_pointers_.ModAccFetchMaximumMagnitudeErrorPerSymbolTrace = reinterpret_cast<ModAccFetchMaximumMagnitudeErrorPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchMaximumMagnitudeErrorPerSymbolTrace"));
  function_pointers_.ModAccFetchMaximumPhaseErrorPerSymbolTrace = reinterpret_cast<ModAccFetchMaximumPhaseErrorPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchMaximumPhaseErrorPerSymbolTrace"));
  function_pointers_.ModAccFetchNPUSCHConstellationTrace = reinterpret_cast<ModAccFetchNPUSCHConstellationTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchNPUSCHConstellationTrace"));
  function_pointers_.ModAccFetchNPUSCHDMRSEVM = reinterpret_cast<ModAccFetchNPUSCHDMRSEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchNPUSCHDMRSEVM"));
  function_pointers_.ModAccFetchNPUSCHDataEVM = reinterpret_cast<ModAccFetchNPUSCHDataEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchNPUSCHDataEVM"));
  function_pointers_.ModAccFetchNPUSCHSymbolPower = reinterpret_cast<ModAccFetchNPUSCHSymbolPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchNPUSCHSymbolPower"));
  function_pointers_.ModAccFetchPDSCH1024QAMConstellation = reinterpret_cast<ModAccFetchPDSCH1024QAMConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCH1024QAMConstellation"));
  function_pointers_.ModAccFetchPDSCH1024QAMEVM = reinterpret_cast<ModAccFetchPDSCH1024QAMEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCH1024QAMEVM"));
  function_pointers_.ModAccFetchPDSCH1024QAMEVMArray = reinterpret_cast<ModAccFetchPDSCH1024QAMEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCH1024QAMEVMArray"));
  function_pointers_.ModAccFetchPDSCH16QAMConstellation = reinterpret_cast<ModAccFetchPDSCH16QAMConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCH16QAMConstellation"));
  function_pointers_.ModAccFetchPDSCH256QAMConstellation = reinterpret_cast<ModAccFetchPDSCH256QAMConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCH256QAMConstellation"));
  function_pointers_.ModAccFetchPDSCH64QAMConstellation = reinterpret_cast<ModAccFetchPDSCH64QAMConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCH64QAMConstellation"));
  function_pointers_.ModAccFetchPDSCHEVM = reinterpret_cast<ModAccFetchPDSCHEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCHEVM"));
  function_pointers_.ModAccFetchPDSCHEVMArray = reinterpret_cast<ModAccFetchPDSCHEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCHEVMArray"));
  function_pointers_.ModAccFetchPDSCHQPSKConstellation = reinterpret_cast<ModAccFetchPDSCHQPSKConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPDSCHQPSKConstellation"));
  function_pointers_.ModAccFetchPSSCHConstellationTrace = reinterpret_cast<ModAccFetchPSSCHConstellationTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHConstellationTrace"));
  function_pointers_.ModAccFetchPSSCHDMRSEVM = reinterpret_cast<ModAccFetchPSSCHDMRSEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHDMRSEVM"));
  function_pointers_.ModAccFetchPSSCHDMRSEVMArray = reinterpret_cast<ModAccFetchPSSCHDMRSEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHDMRSEVMArray"));
  function_pointers_.ModAccFetchPSSCHDataEVM = reinterpret_cast<ModAccFetchPSSCHDataEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHDataEVM"));
  function_pointers_.ModAccFetchPSSCHDataEVMArray = reinterpret_cast<ModAccFetchPSSCHDataEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHDataEVMArray"));
  function_pointers_.ModAccFetchPSSCHSymbolPower = reinterpret_cast<ModAccFetchPSSCHSymbolPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHSymbolPower"));
  function_pointers_.ModAccFetchPSSCHSymbolPowerArray = reinterpret_cast<ModAccFetchPSSCHSymbolPowerArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPSSCHSymbolPowerArray"));
  function_pointers_.ModAccFetchPUSCHConstellationTrace = reinterpret_cast<ModAccFetchPUSCHConstellationTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHConstellationTrace"));
  function_pointers_.ModAccFetchPUSCHDMRSEVM = reinterpret_cast<ModAccFetchPUSCHDMRSEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHDMRSEVM"));
  function_pointers_.ModAccFetchPUSCHDMRSEVMArray = reinterpret_cast<ModAccFetchPUSCHDMRSEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHDMRSEVMArray"));
  function_pointers_.ModAccFetchPUSCHDataEVM = reinterpret_cast<ModAccFetchPUSCHDataEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHDataEVM"));
  function_pointers_.ModAccFetchPUSCHDataEVMArray = reinterpret_cast<ModAccFetchPUSCHDataEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHDataEVMArray"));
  function_pointers_.ModAccFetchPUSCHDemodulatedBits = reinterpret_cast<ModAccFetchPUSCHDemodulatedBitsPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHDemodulatedBits"));
  function_pointers_.ModAccFetchPUSCHSymbolPower = reinterpret_cast<ModAccFetchPUSCHSymbolPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHSymbolPower"));
  function_pointers_.ModAccFetchPUSCHSymbolPowerArray = reinterpret_cast<ModAccFetchPUSCHSymbolPowerArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchPUSCHSymbolPowerArray"));
  function_pointers_.ModAccFetchRMSMagnitudeErrorPerSymbolTrace = reinterpret_cast<ModAccFetchRMSMagnitudeErrorPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchRMSMagnitudeErrorPerSymbolTrace"));
  function_pointers_.ModAccFetchRMSPhaseErrorPerSymbolTrace = reinterpret_cast<ModAccFetchRMSPhaseErrorPerSymbolTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchRMSPhaseErrorPerSymbolTrace"));
  function_pointers_.ModAccFetchSRSConstellation = reinterpret_cast<ModAccFetchSRSConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSRSConstellation"));
  function_pointers_.ModAccFetchSRSEVM = reinterpret_cast<ModAccFetchSRSEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSRSEVM"));
  function_pointers_.ModAccFetchSRSEVMArray = reinterpret_cast<ModAccFetchSRSEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSRSEVMArray"));
  function_pointers_.ModAccFetchSpectralFlatness = reinterpret_cast<ModAccFetchSpectralFlatnessPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSpectralFlatness"));
  function_pointers_.ModAccFetchSpectralFlatnessArray = reinterpret_cast<ModAccFetchSpectralFlatnessArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSpectralFlatnessArray"));
  function_pointers_.ModAccFetchSpectralFlatnessTrace = reinterpret_cast<ModAccFetchSpectralFlatnessTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSpectralFlatnessTrace"));
  function_pointers_.ModAccFetchSubblockIQImpairments = reinterpret_cast<ModAccFetchSubblockIQImpairmentsPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSubblockIQImpairments"));
  function_pointers_.ModAccFetchSubblockInBandEmissionMargin = reinterpret_cast<ModAccFetchSubblockInBandEmissionMarginPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSubblockInBandEmissionMargin"));
  function_pointers_.ModAccFetchSubblockInBandEmissionTrace = reinterpret_cast<ModAccFetchSubblockInBandEmissionTracePtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSubblockInBandEmissionTrace"));
  function_pointers_.ModAccFetchSynchronizationSignalConstellation = reinterpret_cast<ModAccFetchSynchronizationSignalConstellationPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSynchronizationSignalConstellation"));
  function_pointers_.ModAccFetchSynchronizationSignalEVM = reinterpret_cast<ModAccFetchSynchronizationSignalEVMPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSynchronizationSignalEVM"));
  function_pointers_.ModAccFetchSynchronizationSignalEVMArray = reinterpret_cast<ModAccFetchSynchronizationSignalEVMArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_ModAccFetchSynchronizationSignalEVMArray"));
  function_pointers_.OBWCfgAveraging = reinterpret_cast<OBWCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxLTE_OBWCfgAveraging"));
  function_pointers_.OBWCfgRBWFilter = reinterpret_cast<OBWCfgRBWFilterPtr>(shared_library_.get_function_pointer("RFmxLTE_OBWCfgRBWFilter"));
  function_pointers_.OBWCfgSweepTime = reinterpret_cast<OBWCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxLTE_OBWCfgSweepTime"));
  function_pointers_.OBWFetchMeasurement = reinterpret_cast<OBWFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_OBWFetchMeasurement"));
  function_pointers_.OBWFetchSpectrum = reinterpret_cast<OBWFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxLTE_OBWFetchSpectrum"));
  function_pointers_.PVTCfgAveraging = reinterpret_cast<PVTCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxLTE_PVTCfgAveraging"));
  function_pointers_.PVTCfgMeasurementMethod = reinterpret_cast<PVTCfgMeasurementMethodPtr>(shared_library_.get_function_pointer("RFmxLTE_PVTCfgMeasurementMethod"));
  function_pointers_.PVTCfgOFFPowerExclusionPeriods = reinterpret_cast<PVTCfgOFFPowerExclusionPeriodsPtr>(shared_library_.get_function_pointer("RFmxLTE_PVTCfgOFFPowerExclusionPeriods"));
  function_pointers_.PVTFetchMeasurement = reinterpret_cast<PVTFetchMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_PVTFetchMeasurement"));
  function_pointers_.PVTFetchMeasurementArray = reinterpret_cast<PVTFetchMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_PVTFetchMeasurementArray"));
  function_pointers_.PVTFetchSignalPowerTrace = reinterpret_cast<PVTFetchSignalPowerTracePtr>(shared_library_.get_function_pointer("RFmxLTE_PVTFetchSignalPowerTrace"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("RFmxLTE_ResetAttribute"));
  function_pointers_.ResetToDefault = reinterpret_cast<ResetToDefaultPtr>(shared_library_.get_function_pointer("RFmxLTE_ResetToDefault"));
  function_pointers_.SEMCfgAveraging = reinterpret_cast<SEMCfgAveragingPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgAveraging"));
  function_pointers_.SEMCfgComponentCarrierMaximumOutputPower = reinterpret_cast<SEMCfgComponentCarrierMaximumOutputPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgComponentCarrierMaximumOutputPower"));
  function_pointers_.SEMCfgComponentCarrierMaximumOutputPowerArray = reinterpret_cast<SEMCfgComponentCarrierMaximumOutputPowerArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgComponentCarrierMaximumOutputPowerArray"));
  function_pointers_.SEMCfgDownlinkMask = reinterpret_cast<SEMCfgDownlinkMaskPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgDownlinkMask"));
  function_pointers_.SEMCfgNumberOfOffsets = reinterpret_cast<SEMCfgNumberOfOffsetsPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgNumberOfOffsets"));
  function_pointers_.SEMCfgOffsetAbsoluteLimit = reinterpret_cast<SEMCfgOffsetAbsoluteLimitPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetAbsoluteLimit"));
  function_pointers_.SEMCfgOffsetAbsoluteLimitArray = reinterpret_cast<SEMCfgOffsetAbsoluteLimitArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetAbsoluteLimitArray"));
  function_pointers_.SEMCfgOffsetBandwidthIntegral = reinterpret_cast<SEMCfgOffsetBandwidthIntegralPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetBandwidthIntegral"));
  function_pointers_.SEMCfgOffsetBandwidthIntegralArray = reinterpret_cast<SEMCfgOffsetBandwidthIntegralArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetBandwidthIntegralArray"));
  function_pointers_.SEMCfgOffsetFrequency = reinterpret_cast<SEMCfgOffsetFrequencyPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetFrequency"));
  function_pointers_.SEMCfgOffsetFrequencyArray = reinterpret_cast<SEMCfgOffsetFrequencyArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetFrequencyArray"));
  function_pointers_.SEMCfgOffsetLimitFailMask = reinterpret_cast<SEMCfgOffsetLimitFailMaskPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetLimitFailMask"));
  function_pointers_.SEMCfgOffsetLimitFailMaskArray = reinterpret_cast<SEMCfgOffsetLimitFailMaskArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetLimitFailMaskArray"));
  function_pointers_.SEMCfgOffsetRBWFilter = reinterpret_cast<SEMCfgOffsetRBWFilterPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetRBWFilter"));
  function_pointers_.SEMCfgOffsetRBWFilterArray = reinterpret_cast<SEMCfgOffsetRBWFilterArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetRBWFilterArray"));
  function_pointers_.SEMCfgOffsetRelativeLimit = reinterpret_cast<SEMCfgOffsetRelativeLimitPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetRelativeLimit"));
  function_pointers_.SEMCfgOffsetRelativeLimitArray = reinterpret_cast<SEMCfgOffsetRelativeLimitArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgOffsetRelativeLimitArray"));
  function_pointers_.SEMCfgSweepTime = reinterpret_cast<SEMCfgSweepTimePtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgSweepTime"));
  function_pointers_.SEMCfgUplinkMaskType = reinterpret_cast<SEMCfgUplinkMaskTypePtr>(shared_library_.get_function_pointer("RFmxLTE_SEMCfgUplinkMaskType"));
  function_pointers_.SEMFetchComponentCarrierMeasurement = reinterpret_cast<SEMFetchComponentCarrierMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchComponentCarrierMeasurement"));
  function_pointers_.SEMFetchComponentCarrierMeasurementArray = reinterpret_cast<SEMFetchComponentCarrierMeasurementArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchComponentCarrierMeasurementArray"));
  function_pointers_.SEMFetchLowerOffsetMargin = reinterpret_cast<SEMFetchLowerOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchLowerOffsetMargin"));
  function_pointers_.SEMFetchLowerOffsetMarginArray = reinterpret_cast<SEMFetchLowerOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchLowerOffsetMarginArray"));
  function_pointers_.SEMFetchLowerOffsetPower = reinterpret_cast<SEMFetchLowerOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchLowerOffsetPower"));
  function_pointers_.SEMFetchLowerOffsetPowerArray = reinterpret_cast<SEMFetchLowerOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchLowerOffsetPowerArray"));
  function_pointers_.SEMFetchMeasurementStatus = reinterpret_cast<SEMFetchMeasurementStatusPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchMeasurementStatus"));
  function_pointers_.SEMFetchSpectrum = reinterpret_cast<SEMFetchSpectrumPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchSpectrum"));
  function_pointers_.SEMFetchSubblockMeasurement = reinterpret_cast<SEMFetchSubblockMeasurementPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchSubblockMeasurement"));
  function_pointers_.SEMFetchTotalAggregatedPower = reinterpret_cast<SEMFetchTotalAggregatedPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchTotalAggregatedPower"));
  function_pointers_.SEMFetchUpperOffsetMargin = reinterpret_cast<SEMFetchUpperOffsetMarginPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchUpperOffsetMargin"));
  function_pointers_.SEMFetchUpperOffsetMarginArray = reinterpret_cast<SEMFetchUpperOffsetMarginArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchUpperOffsetMarginArray"));
  function_pointers_.SEMFetchUpperOffsetPower = reinterpret_cast<SEMFetchUpperOffsetPowerPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchUpperOffsetPower"));
  function_pointers_.SEMFetchUpperOffsetPowerArray = reinterpret_cast<SEMFetchUpperOffsetPowerArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SEMFetchUpperOffsetPowerArray"));
  function_pointers_.SelectMeasurements = reinterpret_cast<SelectMeasurementsPtr>(shared_library_.get_function_pointer("RFmxLTE_SelectMeasurements"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("RFmxLTE_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeF32 = reinterpret_cast<SetAttributeF32Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeF32"));
  function_pointers_.SetAttributeF32Array = reinterpret_cast<SetAttributeF32ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeF32Array"));
  function_pointers_.SetAttributeF64 = reinterpret_cast<SetAttributeF64Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeF64"));
  function_pointers_.SetAttributeF64Array = reinterpret_cast<SetAttributeF64ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeF64Array"));
  function_pointers_.SetAttributeI16 = reinterpret_cast<SetAttributeI16Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI16"));
  function_pointers_.SetAttributeI32 = reinterpret_cast<SetAttributeI32Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI32"));
  function_pointers_.SetAttributeI32Array = reinterpret_cast<SetAttributeI32ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI32Array"));
  function_pointers_.SetAttributeI64 = reinterpret_cast<SetAttributeI64Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI64"));
  function_pointers_.SetAttributeI64Array = reinterpret_cast<SetAttributeI64ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI64Array"));
  function_pointers_.SetAttributeI8 = reinterpret_cast<SetAttributeI8Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI8"));
  function_pointers_.SetAttributeI8Array = reinterpret_cast<SetAttributeI8ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeI8Array"));
  function_pointers_.SetAttributeNIComplexDoubleArray = reinterpret_cast<SetAttributeNIComplexDoubleArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeNIComplexDoubleArray"));
  function_pointers_.SetAttributeNIComplexSingleArray = reinterpret_cast<SetAttributeNIComplexSingleArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeNIComplexSingleArray"));
  function_pointers_.SetAttributeString = reinterpret_cast<SetAttributeStringPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeString"));
  function_pointers_.SetAttributeU16 = reinterpret_cast<SetAttributeU16Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeU16"));
  function_pointers_.SetAttributeU32 = reinterpret_cast<SetAttributeU32Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeU32"));
  function_pointers_.SetAttributeU32Array = reinterpret_cast<SetAttributeU32ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeU32Array"));
  function_pointers_.SetAttributeU64Array = reinterpret_cast<SetAttributeU64ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeU64Array"));
  function_pointers_.SetAttributeU8 = reinterpret_cast<SetAttributeU8Ptr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeU8"));
  function_pointers_.SetAttributeU8Array = reinterpret_cast<SetAttributeU8ArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SetAttributeU8Array"));
  function_pointers_.SlotPhaseCfgSynchronizationModeAndInterval = reinterpret_cast<SlotPhaseCfgSynchronizationModeAndIntervalPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPhaseCfgSynchronizationModeAndInterval"));
  function_pointers_.SlotPhaseFetchMaximumPhaseDiscontinuity = reinterpret_cast<SlotPhaseFetchMaximumPhaseDiscontinuityPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuity"));
  function_pointers_.SlotPhaseFetchMaximumPhaseDiscontinuityArray = reinterpret_cast<SlotPhaseFetchMaximumPhaseDiscontinuityArrayPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuityArray"));
  function_pointers_.SlotPhaseFetchPhaseDiscontinuities = reinterpret_cast<SlotPhaseFetchPhaseDiscontinuitiesPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPhaseFetchPhaseDiscontinuities"));
  function_pointers_.SlotPhaseFetchSamplePhaseError = reinterpret_cast<SlotPhaseFetchSamplePhaseErrorPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPhaseFetchSamplePhaseError"));
  function_pointers_.SlotPhaseFetchSamplePhaseErrorLinearFitTrace = reinterpret_cast<SlotPhaseFetchSamplePhaseErrorLinearFitTracePtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPhaseFetchSamplePhaseErrorLinearFitTrace"));
  function_pointers_.SlotPowerCfgMeasurementInterval = reinterpret_cast<SlotPowerCfgMeasurementIntervalPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPowerCfgMeasurementInterval"));
  function_pointers_.SlotPowerFetchPowers = reinterpret_cast<SlotPowerFetchPowersPtr>(shared_library_.get_function_pointer("RFmxLTE_SlotPowerFetchPowers"));
  function_pointers_.WaitForAcquisitionComplete = reinterpret_cast<WaitForAcquisitionCompletePtr>(shared_library_.get_function_pointer("RFmxLTE_WaitForAcquisitionComplete"));
  function_pointers_.WaitForMeasurementComplete = reinterpret_cast<WaitForMeasurementCompletePtr>(shared_library_.get_function_pointer("RFmxLTE_WaitForMeasurementComplete"));
}

NiRFmxLTELibrary::~NiRFmxLTELibrary()
{
}

::grpc::Status NiRFmxLTELibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxLTELibrary::ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.ACPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgAveraging.");
  }
  return function_pointers_.ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxLTELibrary::ACPCfgConfigurableNumberOfOffsetsEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurableNumberOfOffsetsEnabled)
{
  if (!function_pointers_.ACPCfgConfigurableNumberOfOffsetsEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgConfigurableNumberOfOffsetsEnabled.");
  }
  return function_pointers_.ACPCfgConfigurableNumberOfOffsetsEnabled(instrumentHandle, selectorString, configurableNumberOfOffsetsEnabled);
}

int32 NiRFmxLTELibrary::ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.ACPCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgMeasurementMethod.");
  }
  return function_pointers_.ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 NiRFmxLTELibrary::ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  if (!function_pointers_.ACPCfgNoiseCompensationEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgNoiseCompensationEnabled.");
  }
  return function_pointers_.ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 NiRFmxLTELibrary::ACPCfgNumberOfEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfEUTRAOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfEUTRAOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgNumberOfEUTRAOffsets.");
  }
  return function_pointers_.ACPCfgNumberOfEUTRAOffsets(instrumentHandle, selectorString, numberOfEUTRAOffsets);
}

int32 NiRFmxLTELibrary::ACPCfgNumberOfGSMOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfGSMOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfGSMOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgNumberOfGSMOffsets.");
  }
  return function_pointers_.ACPCfgNumberOfGSMOffsets(instrumentHandle, selectorString, numberOfGSMOffsets);
}

int32 NiRFmxLTELibrary::ACPCfgNumberOfUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets)
{
  if (!function_pointers_.ACPCfgNumberOfUTRAOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgNumberOfUTRAOffsets.");
  }
  return function_pointers_.ACPCfgNumberOfUTRAOffsets(instrumentHandle, selectorString, numberOfUTRAOffsets);
}

int32 NiRFmxLTELibrary::ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  if (!function_pointers_.ACPCfgPowerUnits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgPowerUnits.");
  }
  return function_pointers_.ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
}

int32 NiRFmxLTELibrary::ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.ACPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgRBWFilter.");
  }
  return function_pointers_.ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 NiRFmxLTELibrary::ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.ACPCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgSweepTime.");
  }
  return function_pointers_.ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 NiRFmxLTELibrary::ACPCfgUTRAAndEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets, int32 numberOfEUTRAOffsets)
{
  if (!function_pointers_.ACPCfgUTRAAndEUTRAOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPCfgUTRAAndEUTRAOffsets.");
  }
  return function_pointers_.ACPCfgUTRAAndEUTRAOffsets(instrumentHandle, selectorString, numberOfUTRAOffsets, numberOfEUTRAOffsets);
}

int32 NiRFmxLTELibrary::ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchAbsolutePowersTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchAbsolutePowersTrace.");
  }
  return function_pointers_.ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ACPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  if (!function_pointers_.ACPFetchComponentCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchComponentCarrierMeasurement.");
  }
  return function_pointers_.ACPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
}

int32 NiRFmxLTELibrary::ACPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchComponentCarrierMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchComponentCarrierMeasurementArray.");
  }
  return function_pointers_.ACPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower)
{
  if (!function_pointers_.ACPFetchOffsetMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchOffsetMeasurement.");
  }
  return function_pointers_.ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
}

int32 NiRFmxLTELibrary::ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchOffsetMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchOffsetMeasurementArray.");
  }
  return function_pointers_.ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchRelativePowersTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchRelativePowersTrace.");
  }
  return function_pointers_.ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ACPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchSpectrum.");
  }
  return function_pointers_.ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ACPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  if (!function_pointers_.ACPFetchSubblockMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchSubblockMeasurement.");
  }
  return function_pointers_.ACPFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
}

int32 NiRFmxLTELibrary::ACPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  if (!function_pointers_.ACPFetchTotalAggregatedPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPFetchTotalAggregatedPower.");
  }
  return function_pointers_.ACPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
}

int32 NiRFmxLTELibrary::ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.ACPValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ACPValidateNoiseCalibrationData.");
  }
  return function_pointers_.ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 NiRFmxLTELibrary::AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.AbortMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_AbortMeasurements.");
  }
  return function_pointers_.AbortMeasurements(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeIQ1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_AnalyzeIQ1Waveform.");
  }
  return function_pointers_.AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 NiRFmxLTELibrary::AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  if (!function_pointers_.AnalyzeSpectrum1Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_AnalyzeSpectrum1Waveform.");
  }
  return function_pointers_.AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
}

int32 NiRFmxLTELibrary::AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel)
{
  if (!function_pointers_.AutoLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_AutoLevel.");
  }
  return function_pointers_.AutoLevel(instrumentHandle, selectorString, measurementInterval, referenceLevel);
}

int32 NiRFmxLTELibrary::BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildCarrierString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildCarrierString.");
  }
  return function_pointers_.BuildCarrierString(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxLTELibrary::BuildClusterString(char selectorString[], int32 clusterNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildClusterString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildClusterString.");
  }
  return function_pointers_.BuildClusterString(selectorString, clusterNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxLTELibrary::BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildOffsetString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildOffsetString.");
  }
  return function_pointers_.BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxLTELibrary::BuildPDSCHString(char selectorString[], int32 pdschNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildPDSCHString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildPDSCHString.");
  }
  return function_pointers_.BuildPDSCHString(selectorString, pdschNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxLTELibrary::BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  if (!function_pointers_.BuildSignalString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildSignalString.");
  }
  return function_pointers_.BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 NiRFmxLTELibrary::BuildSubblockString(char selectorString[], int32 subblockNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSubblockString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildSubblockString.");
  }
  return function_pointers_.BuildSubblockString(selectorString, subblockNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxLTELibrary::BuildSubframeString(char selectorString[], int32 subframeNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  if (!function_pointers_.BuildSubframeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_BuildSubframeString.");
  }
  return function_pointers_.BuildSubframeString(selectorString, subframeNumber, selectorStringOutLength, selectorStringOut);
}

int32 NiRFmxLTELibrary::CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.CHPCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPCfgAveraging.");
  }
  return function_pointers_.CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxLTELibrary::CHPCfgIntegrationBandwidthType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integrationBandwidthType)
{
  if (!function_pointers_.CHPCfgIntegrationBandwidthType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPCfgIntegrationBandwidthType.");
  }
  return function_pointers_.CHPCfgIntegrationBandwidthType(instrumentHandle, selectorString, integrationBandwidthType);
}

int32 NiRFmxLTELibrary::CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.CHPCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPCfgRBWFilter.");
  }
  return function_pointers_.CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 NiRFmxLTELibrary::CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.CHPCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPCfgSweepTime.");
  }
  return function_pointers_.CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 NiRFmxLTELibrary::CHPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  if (!function_pointers_.CHPFetchComponentCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPFetchComponentCarrierMeasurement.");
  }
  return function_pointers_.CHPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
}

int32 NiRFmxLTELibrary::CHPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CHPFetchComponentCarrierMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPFetchComponentCarrierMeasurementArray.");
  }
  return function_pointers_.CHPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.CHPFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPFetchSpectrum.");
  }
  return function_pointers_.CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::CHPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  if (!function_pointers_.CHPFetchSubblockMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPFetchSubblockMeasurement.");
  }
  return function_pointers_.CHPFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
}

int32 NiRFmxLTELibrary::CHPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  if (!function_pointers_.CHPFetchTotalAggregatedPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPFetchTotalAggregatedPower.");
  }
  return function_pointers_.CHPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
}

int32 NiRFmxLTELibrary::CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  if (!function_pointers_.CHPValidateNoiseCalibrationData) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CHPValidateNoiseCalibrationData.");
  }
  return function_pointers_.CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 NiRFmxLTELibrary::CfgAutoDMRSDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoDMRSDetectionEnabled)
{
  if (!function_pointers_.CfgAutoDMRSDetectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgAutoDMRSDetectionEnabled.");
  }
  return function_pointers_.CfgAutoDMRSDetectionEnabled(instrumentHandle, selectorString, autoDMRSDetectionEnabled);
}

int32 NiRFmxLTELibrary::CfgAutoNPUSCHChannelDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoNPUSCHChannelDetectionEnabled)
{
  if (!function_pointers_.CfgAutoNPUSCHChannelDetectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgAutoNPUSCHChannelDetectionEnabled.");
  }
  return function_pointers_.CfgAutoNPUSCHChannelDetectionEnabled(instrumentHandle, selectorString, autoNPUSCHChannelDetectionEnabled);
}

int32 NiRFmxLTELibrary::CfgAutoResourceBlockDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoResourceBlockDetectionEnabled)
{
  if (!function_pointers_.CfgAutoResourceBlockDetectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgAutoResourceBlockDetectionEnabled.");
  }
  return function_pointers_.CfgAutoResourceBlockDetectionEnabled(instrumentHandle, selectorString, autoResourceBlockDetectionEnabled);
}

int32 NiRFmxLTELibrary::CfgBand(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 band)
{
  if (!function_pointers_.CfgBand) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgBand.");
  }
  return function_pointers_.CfgBand(instrumentHandle, selectorString, band);
}

int32 NiRFmxLTELibrary::CfgCellSpecificRatio(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cellSpecificRatio)
{
  if (!function_pointers_.CfgCellSpecificRatio) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgCellSpecificRatio.");
  }
  return function_pointers_.CfgCellSpecificRatio(instrumentHandle, selectorString, cellSpecificRatio);
}

int32 NiRFmxLTELibrary::CfgComponentCarrier(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth, float64 componentCarrierFrequency, int32 cellID)
{
  if (!function_pointers_.CfgComponentCarrier) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgComponentCarrier.");
  }
  return function_pointers_.CfgComponentCarrier(instrumentHandle, selectorString, componentCarrierBandwidth, componentCarrierFrequency, cellID);
}

int32 NiRFmxLTELibrary::CfgComponentCarrierArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth[], float64 componentCarrierFrequency[], int32 cellID[], int32 numberOfElements)
{
  if (!function_pointers_.CfgComponentCarrierArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgComponentCarrierArray.");
  }
  return function_pointers_.CfgComponentCarrierArray(instrumentHandle, selectorString, componentCarrierBandwidth, componentCarrierFrequency, cellID, numberOfElements);
}

int32 NiRFmxLTELibrary::CfgComponentCarrierSpacing(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 componentCarrierSpacingType, int32 componentCarrierAtCenterFrequency)
{
  if (!function_pointers_.CfgComponentCarrierSpacing) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgComponentCarrierSpacing.");
  }
  return function_pointers_.CfgComponentCarrierSpacing(instrumentHandle, selectorString, componentCarrierSpacingType, componentCarrierAtCenterFrequency);
}

int32 NiRFmxLTELibrary::CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgDigitalEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDigitalEdgeTrigger.");
  }
  return function_pointers_.CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 NiRFmxLTELibrary::CfgDownlinkAutoCellIDDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoCellIDDetectionEnabled)
{
  if (!function_pointers_.CfgDownlinkAutoCellIDDetectionEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkAutoCellIDDetectionEnabled.");
  }
  return function_pointers_.CfgDownlinkAutoCellIDDetectionEnabled(instrumentHandle, selectorString, autoCellIDDetectionEnabled);
}

int32 NiRFmxLTELibrary::CfgDownlinkAutoChannelDetection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoPDSCHChannelDetectionEnabled, int32 autoControlChannelPowerDetectionEnabled, int32 autoPCFICHCFIDetectionEnabled, int32 reserved)
{
  if (!function_pointers_.CfgDownlinkAutoChannelDetection) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkAutoChannelDetection.");
  }
  return function_pointers_.CfgDownlinkAutoChannelDetection(instrumentHandle, selectorString, autoPDSCHChannelDetectionEnabled, autoControlChannelPowerDetectionEnabled, autoPCFICHCFIDetectionEnabled, reserved);
}

int32 NiRFmxLTELibrary::CfgDownlinkChannelConfigurationMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelConfigurationMode)
{
  if (!function_pointers_.CfgDownlinkChannelConfigurationMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkChannelConfigurationMode.");
  }
  return function_pointers_.CfgDownlinkChannelConfigurationMode(instrumentHandle, selectorString, channelConfigurationMode);
}

int32 NiRFmxLTELibrary::CfgDownlinkNumberOfSubframes(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubframes)
{
  if (!function_pointers_.CfgDownlinkNumberOfSubframes) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkNumberOfSubframes.");
  }
  return function_pointers_.CfgDownlinkNumberOfSubframes(instrumentHandle, selectorString, numberOfSubframes);
}

int32 NiRFmxLTELibrary::CfgDownlinkSynchronizationSignal(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pssPower, float64 sssPower)
{
  if (!function_pointers_.CfgDownlinkSynchronizationSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkSynchronizationSignal.");
  }
  return function_pointers_.CfgDownlinkSynchronizationSignal(instrumentHandle, selectorString, pssPower, sssPower);
}

int32 NiRFmxLTELibrary::CfgDownlinkTestModel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel)
{
  if (!function_pointers_.CfgDownlinkTestModel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkTestModel.");
  }
  return function_pointers_.CfgDownlinkTestModel(instrumentHandle, selectorString, downlinkTestModel);
}

int32 NiRFmxLTELibrary::CfgDownlinkTestModelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel[], int32 numberOfElements)
{
  if (!function_pointers_.CfgDownlinkTestModelArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDownlinkTestModelArray.");
  }
  return function_pointers_.CfgDownlinkTestModelArray(instrumentHandle, selectorString, downlinkTestModel, numberOfElements);
}

int32 NiRFmxLTELibrary::CfgDuplexScheme(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 duplexScheme, int32 uplinkDownlinkConfiguration)
{
  if (!function_pointers_.CfgDuplexScheme) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgDuplexScheme.");
  }
  return function_pointers_.CfgDuplexScheme(instrumentHandle, selectorString, duplexScheme, uplinkDownlinkConfiguration);
}

int32 NiRFmxLTELibrary::CfgEMTCAnalysisEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 emtcAnalysisEnabled)
{
  if (!function_pointers_.CfgEMTCAnalysisEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgEMTCAnalysisEnabled.");
  }
  return function_pointers_.CfgEMTCAnalysisEnabled(instrumentHandle, selectorString, emtcAnalysisEnabled);
}

int32 NiRFmxLTELibrary::CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  if (!function_pointers_.CfgExternalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgExternalAttenuation.");
  }
  return function_pointers_.CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 NiRFmxLTELibrary::CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  if (!function_pointers_.CfgFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgFrequency.");
  }
  return function_pointers_.CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 NiRFmxLTELibrary::CfgFrequencyEARFCN(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 band, int32 earfcn)
{
  if (!function_pointers_.CfgFrequencyEARFCN) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgFrequencyEARFCN.");
  }
  return function_pointers_.CfgFrequencyEARFCN(instrumentHandle, selectorString, linkDirection, band, earfcn);
}

int32 NiRFmxLTELibrary::CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  if (!function_pointers_.CfgFrequencyReference) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgFrequencyReference.");
  }
  return function_pointers_.CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 NiRFmxLTELibrary::CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  if (!function_pointers_.CfgIQPowerEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgIQPowerEdgeTrigger.");
  }
  return function_pointers_.CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
}

int32 NiRFmxLTELibrary::CfgLinkDirection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection)
{
  if (!function_pointers_.CfgLinkDirection) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgLinkDirection.");
  }
  return function_pointers_.CfgLinkDirection(instrumentHandle, selectorString, linkDirection);
}

int32 NiRFmxLTELibrary::CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  if (!function_pointers_.CfgMechanicalAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgMechanicalAttenuation.");
  }
  return function_pointers_.CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 NiRFmxLTELibrary::CfgNBIoTComponentCarrier(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nCellID, int32 uplinkSubcarrierSpacing)
{
  if (!function_pointers_.CfgNBIoTComponentCarrier) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNBIoTComponentCarrier.");
  }
  return function_pointers_.CfgNBIoTComponentCarrier(instrumentHandle, selectorString, nCellID, uplinkSubcarrierSpacing);
}

int32 NiRFmxLTELibrary::CfgNPUSCHDMRS(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 npuschdmrsBaseSequenceMode, int32 npuschdmrsBaseSequenceIndex, int32 npuschdmrsCyclicShift, int32 npuschdmrsGroupHoppingEnabled, int32 npuschdmrsDeltaSS)
{
  if (!function_pointers_.CfgNPUSCHDMRS) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNPUSCHDMRS.");
  }
  return function_pointers_.CfgNPUSCHDMRS(instrumentHandle, selectorString, npuschdmrsBaseSequenceMode, npuschdmrsBaseSequenceIndex, npuschdmrsCyclicShift, npuschdmrsGroupHoppingEnabled, npuschdmrsDeltaSS);
}

int32 NiRFmxLTELibrary::CfgNPUSCHFormat(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 format)
{
  if (!function_pointers_.CfgNPUSCHFormat) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNPUSCHFormat.");
  }
  return function_pointers_.CfgNPUSCHFormat(instrumentHandle, selectorString, format);
}

int32 NiRFmxLTELibrary::CfgNPUSCHStartingSlot(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 startingSlot)
{
  if (!function_pointers_.CfgNPUSCHStartingSlot) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNPUSCHStartingSlot.");
  }
  return function_pointers_.CfgNPUSCHStartingSlot(instrumentHandle, selectorString, startingSlot);
}

int32 NiRFmxLTELibrary::CfgNPUSCHTones(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 toneOffset, int32 numberOfTones, int32 modulationType)
{
  if (!function_pointers_.CfgNPUSCHTones) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNPUSCHTones.");
  }
  return function_pointers_.CfgNPUSCHTones(instrumentHandle, selectorString, toneOffset, numberOfTones, modulationType);
}

int32 NiRFmxLTELibrary::CfgNumberOfComponentCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfComponentCarriers)
{
  if (!function_pointers_.CfgNumberOfComponentCarriers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNumberOfComponentCarriers.");
  }
  return function_pointers_.CfgNumberOfComponentCarriers(instrumentHandle, selectorString, numberOfComponentCarriers);
}

int32 NiRFmxLTELibrary::CfgNumberOfDUTAntennas(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfDUTAntennas)
{
  if (!function_pointers_.CfgNumberOfDUTAntennas) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNumberOfDUTAntennas.");
  }
  return function_pointers_.CfgNumberOfDUTAntennas(instrumentHandle, selectorString, numberOfDUTAntennas);
}

int32 NiRFmxLTELibrary::CfgNumberOfPDSCHChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfPDSCHChannels)
{
  if (!function_pointers_.CfgNumberOfPDSCHChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNumberOfPDSCHChannels.");
  }
  return function_pointers_.CfgNumberOfPDSCHChannels(instrumentHandle, selectorString, numberOfPDSCHChannels);
}

int32 NiRFmxLTELibrary::CfgNumberOfPUSCHResourceBlockClusters(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfResourceBlockClusters)
{
  if (!function_pointers_.CfgNumberOfPUSCHResourceBlockClusters) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNumberOfPUSCHResourceBlockClusters.");
  }
  return function_pointers_.CfgNumberOfPUSCHResourceBlockClusters(instrumentHandle, selectorString, numberOfResourceBlockClusters);
}

int32 NiRFmxLTELibrary::CfgNumberOfSubblocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubblocks)
{
  if (!function_pointers_.CfgNumberOfSubblocks) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgNumberOfSubblocks.");
  }
  return function_pointers_.CfgNumberOfSubblocks(instrumentHandle, selectorString, numberOfSubblocks);
}

int32 NiRFmxLTELibrary::CfgPBCH(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pbchPower)
{
  if (!function_pointers_.CfgPBCH) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPBCH.");
  }
  return function_pointers_.CfgPBCH(instrumentHandle, selectorString, pbchPower);
}

int32 NiRFmxLTELibrary::CfgPCFICH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cfi, float64 power)
{
  if (!function_pointers_.CfgPCFICH) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPCFICH.");
  }
  return function_pointers_.CfgPCFICH(instrumentHandle, selectorString, cfi, power);
}

int32 NiRFmxLTELibrary::CfgPDCCH(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pdcchPower)
{
  if (!function_pointers_.CfgPDCCH) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPDCCH.");
  }
  return function_pointers_.CfgPDCCH(instrumentHandle, selectorString, pdcchPower);
}

int32 NiRFmxLTELibrary::CfgPDSCH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cw0ModulationType, char resourceBlockAllocation[], float64 power)
{
  if (!function_pointers_.CfgPDSCH) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPDSCH.");
  }
  return function_pointers_.CfgPDSCH(instrumentHandle, selectorString, cw0ModulationType, resourceBlockAllocation, power);
}

int32 NiRFmxLTELibrary::CfgPHICH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resource, int32 duration, float64 power)
{
  if (!function_pointers_.CfgPHICH) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPHICH.");
  }
  return function_pointers_.CfgPHICH(instrumentHandle, selectorString, resource, duration, power);
}

int32 NiRFmxLTELibrary::CfgPSSCHModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType)
{
  if (!function_pointers_.CfgPSSCHModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPSSCHModulationType.");
  }
  return function_pointers_.CfgPSSCHModulationType(instrumentHandle, selectorString, modulationType);
}

int32 NiRFmxLTELibrary::CfgPSSCHResourceBlocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks)
{
  if (!function_pointers_.CfgPSSCHResourceBlocks) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPSSCHResourceBlocks.");
  }
  return function_pointers_.CfgPSSCHResourceBlocks(instrumentHandle, selectorString, resourceBlockOffset, numberOfResourceBlocks);
}

int32 NiRFmxLTELibrary::CfgPUSCHModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType)
{
  if (!function_pointers_.CfgPUSCHModulationType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPUSCHModulationType.");
  }
  return function_pointers_.CfgPUSCHModulationType(instrumentHandle, selectorString, modulationType);
}

int32 NiRFmxLTELibrary::CfgPUSCHResourceBlocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks)
{
  if (!function_pointers_.CfgPUSCHResourceBlocks) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgPUSCHResourceBlocks.");
  }
  return function_pointers_.CfgPUSCHResourceBlocks(instrumentHandle, selectorString, resourceBlockOffset, numberOfResourceBlocks);
}

int32 NiRFmxLTELibrary::CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  if (!function_pointers_.CfgRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgRF.");
  }
  return function_pointers_.CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
}

int32 NiRFmxLTELibrary::CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  if (!function_pointers_.CfgRFAttenuation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgRFAttenuation.");
  }
  return function_pointers_.CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 NiRFmxLTELibrary::CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  if (!function_pointers_.CfgReferenceLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgReferenceLevel.");
  }
  return function_pointers_.CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 NiRFmxLTELibrary::CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  if (!function_pointers_.CfgSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgSoftwareEdgeTrigger.");
  }
  return function_pointers_.CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 NiRFmxLTELibrary::CfgTransmitAntennaToAnalyze(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 transmitAntennaToAnalyze)
{
  if (!function_pointers_.CfgTransmitAntennaToAnalyze) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgTransmitAntennaToAnalyze.");
  }
  return function_pointers_.CfgTransmitAntennaToAnalyze(instrumentHandle, selectorString, transmitAntennaToAnalyze);
}

int32 NiRFmxLTELibrary::CfgeNodeBCategory(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 eNodeBCategory)
{
  if (!function_pointers_.CfgeNodeBCategory) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CfgeNodeBCategory.");
  }
  return function_pointers_.CfgeNodeBCategory(instrumentHandle, selectorString, eNodeBCategory);
}

int32 NiRFmxLTELibrary::CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  if (!function_pointers_.CheckMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CheckMeasurementStatus.");
  }
  return function_pointers_.CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 NiRFmxLTELibrary::ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearAllNamedResults) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ClearAllNamedResults.");
  }
  return function_pointers_.ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNamedResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ClearNamedResult.");
  }
  return function_pointers_.ClearNamedResult(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ClearNoiseCalibrationDatabase) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ClearNoiseCalibrationDatabase.");
  }
  return function_pointers_.ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  if (!function_pointers_.CloneSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CloneSignalConfiguration.");
  }
  return function_pointers_.CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 NiRFmxLTELibrary::Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_Close.");
  }
  return function_pointers_.Close(instrumentHandle, forceDestroy);
}

int32 NiRFmxLTELibrary::Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_Commit.");
  }
  return function_pointers_.Commit(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.CreateSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_CreateSignalConfiguration.");
  }
  return function_pointers_.CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxLTELibrary::DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  if (!function_pointers_.DeleteSignalConfiguration) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_DeleteSignalConfiguration.");
  }
  return function_pointers_.DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 NiRFmxLTELibrary::DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.DisableTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_DisableTrigger.");
  }
  return function_pointers_.DisableTrigger(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  if (!function_pointers_.GetAllNamedResultNames) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAllNamedResultNames.");
  }
  return function_pointers_.GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 NiRFmxLTELibrary::GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  if (!function_pointers_.GetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeF32.");
  }
  return function_pointers_.GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeF32Array.");
  }
  return function_pointers_.GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  if (!function_pointers_.GetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeF64.");
  }
  return function_pointers_.GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeF64Array.");
  }
  return function_pointers_.GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  if (!function_pointers_.GetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI16.");
  }
  return function_pointers_.GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  if (!function_pointers_.GetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI32.");
  }
  return function_pointers_.GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI32Array.");
  }
  return function_pointers_.GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  if (!function_pointers_.GetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI64.");
  }
  return function_pointers_.GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI64Array.");
  }
  return function_pointers_.GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  if (!function_pointers_.GetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI8.");
  }
  return function_pointers_.GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeI8Array.");
  }
  return function_pointers_.GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  if (!function_pointers_.GetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeString.");
  }
  return function_pointers_.GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  if (!function_pointers_.GetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeU16.");
  }
  return function_pointers_.GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  if (!function_pointers_.GetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeU32.");
  }
  return function_pointers_.GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeU32Array.");
  }
  return function_pointers_.GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeU64Array.");
  }
  return function_pointers_.GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  if (!function_pointers_.GetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeU8.");
  }
  return function_pointers_.GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.GetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetAttributeU8Array.");
  }
  return function_pointers_.GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxLTELibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxLTELibrary::Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_Initialize.");
  }
  return function_pointers_.Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 NiRFmxLTELibrary::InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  if (!function_pointers_.InitializeFromNIRFSASession) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_InitializeFromNIRFSASession.");
  }
  return function_pointers_.InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 NiRFmxLTELibrary::Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_Initiate.");
  }
  return function_pointers_.Initiate(instrumentHandle, selectorString, resultName);
}

int32 NiRFmxLTELibrary::ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  if (!function_pointers_.ModAccCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgAveraging.");
  }
  return function_pointers_.ModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 NiRFmxLTELibrary::ModAccCfgCommonClockSourceEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled)
{
  if (!function_pointers_.ModAccCfgCommonClockSourceEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgCommonClockSourceEnabled.");
  }
  return function_pointers_.ModAccCfgCommonClockSourceEnabled(instrumentHandle, selectorString, commonClockSourceEnabled);
}

int32 NiRFmxLTELibrary::ModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit)
{
  if (!function_pointers_.ModAccCfgEVMUnit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgEVMUnit.");
  }
  return function_pointers_.ModAccCfgEVMUnit(instrumentHandle, selectorString, evmUnit);
}

int32 NiRFmxLTELibrary::ModAccCfgFFTWindowOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fftWindowOffset)
{
  if (!function_pointers_.ModAccCfgFFTWindowOffset) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgFFTWindowOffset.");
  }
  return function_pointers_.ModAccCfgFFTWindowOffset(instrumentHandle, selectorString, fftWindowOffset);
}

int32 NiRFmxLTELibrary::ModAccCfgFFTWindowPosition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindowType, float64 fftWindowOffset, float64 fftWindowLength)
{
  if (!function_pointers_.ModAccCfgFFTWindowPosition) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgFFTWindowPosition.");
  }
  return function_pointers_.ModAccCfgFFTWindowPosition(instrumentHandle, selectorString, fftWindowType, fftWindowOffset, fftWindowLength);
}

int32 NiRFmxLTELibrary::ModAccCfgInBandEmissionMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 inBandEmissionMaskType)
{
  if (!function_pointers_.ModAccCfgInBandEmissionMaskType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgInBandEmissionMaskType.");
  }
  return function_pointers_.ModAccCfgInBandEmissionMaskType(instrumentHandle, selectorString, inBandEmissionMaskType);
}

int32 NiRFmxLTELibrary::ModAccCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength)
{
  if (!function_pointers_.ModAccCfgSynchronizationModeAndInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccCfgSynchronizationModeAndInterval.");
  }
  return function_pointers_.ModAccCfgSynchronizationModeAndInterval(instrumentHandle, selectorString, synchronizationMode, measurementOffset, measurementLength);
}

int32 NiRFmxLTELibrary::ModAccFetchCSRSConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle csrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchCSRSConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCSRSConstellation.");
  }
  return function_pointers_.ModAccFetchCSRSConstellation(instrumentHandle, selectorString, timeout, csrsConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchCSRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCSRSEVM)
{
  if (!function_pointers_.ModAccFetchCSRSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCSRSEVM.");
  }
  return function_pointers_.ModAccFetchCSRSEVM(instrumentHandle, selectorString, timeout, meanRMSCSRSEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchCSRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCSRSEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchCSRSEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCSRSEVMArray.");
  }
  return function_pointers_.ModAccFetchCSRSEVMArray(instrumentHandle, selectorString, timeout, meanRMSCSRSEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchCompositeEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeEVM, float64* maximumPeakCompositeEVM, float64* meanFrequencyError, int32* peakCompositeEVMSymbolIndex, int32* peakCompositeEVMSubcarrierIndex, int32* peakCompositeEVMSlotIndex)
{
  if (!function_pointers_.ModAccFetchCompositeEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCompositeEVM.");
  }
  return function_pointers_.ModAccFetchCompositeEVM(instrumentHandle, selectorString, timeout, meanRMSCompositeEVM, maximumPeakCompositeEVM, meanFrequencyError, peakCompositeEVMSymbolIndex, peakCompositeEVMSubcarrierIndex, peakCompositeEVMSlotIndex);
}

int32 NiRFmxLTELibrary::ModAccFetchCompositeEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeEVM[], float64 maximumPeakCompositeEVM[], float64 meanFrequencyError[], int32 peakCompositeEVMSymbolIndex[], int32 peakCompositeEVMSubcarrierIndex[], int32 peakCompositeEVMSlotIndex[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchCompositeEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCompositeEVMArray.");
  }
  return function_pointers_.ModAccFetchCompositeEVMArray(instrumentHandle, selectorString, timeout, meanRMSCompositeEVM, maximumPeakCompositeEVM, meanFrequencyError, peakCompositeEVMSymbolIndex, peakCompositeEVMSubcarrierIndex, peakCompositeEVMSlotIndex, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchCompositeMagnitudeAndPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeMagnitudeError, float64* maxPeakCompositeMagnitudeError, float64* meanRMSCompositePhaseError, float64* maxPeakCompositePhaseError)
{
  if (!function_pointers_.ModAccFetchCompositeMagnitudeAndPhaseError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseError.");
  }
  return function_pointers_.ModAccFetchCompositeMagnitudeAndPhaseError(instrumentHandle, selectorString, timeout, meanRMSCompositeMagnitudeError, maxPeakCompositeMagnitudeError, meanRMSCompositePhaseError, maxPeakCompositePhaseError);
}

int32 NiRFmxLTELibrary::ModAccFetchCompositeMagnitudeAndPhaseErrorArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeMagnitudeError[], float64 maximumPeakCompositeMagnitudeError[], float64 meanRMSCompositePhaseError[], float64 maximumPeakCompositePhaseError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchCompositeMagnitudeAndPhaseErrorArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseErrorArray.");
  }
  return function_pointers_.ModAccFetchCompositeMagnitudeAndPhaseErrorArray(instrumentHandle, selectorString, timeout, meanRMSCompositeMagnitudeError, maximumPeakCompositeMagnitudeError, meanRMSCompositePhaseError, maximumPeakCompositePhaseError, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkDetectedCellID(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedCellID)
{
  if (!function_pointers_.ModAccFetchDownlinkDetectedCellID) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkDetectedCellID.");
  }
  return function_pointers_.ModAccFetchDownlinkDetectedCellID(instrumentHandle, selectorString, timeout, detectedCellID);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkDetectedCellIDArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedCellID[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDownlinkDetectedCellIDArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkDetectedCellIDArray.");
  }
  return function_pointers_.ModAccFetchDownlinkDetectedCellIDArray(instrumentHandle, selectorString, timeout, detectedCellID, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkPBCHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDownlinkPBCHConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkPBCHConstellation.");
  }
  return function_pointers_.ModAccFetchDownlinkPBCHConstellation(instrumentHandle, selectorString, timeout, pbchConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkPCFICHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pcfichConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDownlinkPCFICHConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkPCFICHConstellation.");
  }
  return function_pointers_.ModAccFetchDownlinkPCFICHConstellation(instrumentHandle, selectorString, timeout, pcfichConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkPDCCHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdcchConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDownlinkPDCCHConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkPDCCHConstellation.");
  }
  return function_pointers_.ModAccFetchDownlinkPDCCHConstellation(instrumentHandle, selectorString, timeout, pdcchConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkPHICHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle phichConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDownlinkPHICHConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkPHICHConstellation.");
  }
  return function_pointers_.ModAccFetchDownlinkPHICHConstellation(instrumentHandle, selectorString, timeout, phichConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkTransmitPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rsTransmitPower, float64* ofdmSymbolTransmitPower, float64* reserved1, float64* reserved2)
{
  if (!function_pointers_.ModAccFetchDownlinkTransmitPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkTransmitPower.");
  }
  return function_pointers_.ModAccFetchDownlinkTransmitPower(instrumentHandle, selectorString, timeout, rsTransmitPower, ofdmSymbolTransmitPower, reserved1, reserved2);
}

int32 NiRFmxLTELibrary::ModAccFetchDownlinkTransmitPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 rsTransmitPower[], float64 ofdmSymbolTransmitPower[], float64 reserved1[], float64 reserved2[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchDownlinkTransmitPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchDownlinkTransmitPowerArray.");
  }
  return function_pointers_.ModAccFetchDownlinkTransmitPowerArray(instrumentHandle, selectorString, timeout, rsTransmitPower, ofdmSymbolTransmitPower, reserved1, reserved2, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchEVMHighPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmHighPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchEVMHighPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchEVMHighPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchEVMHighPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, evmHighPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchEVMLowPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmLowPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchEVMLowPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchEVMLowPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchEVMLowPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, evmLowPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchEVMPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSlot[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchEVMPerSlotTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchEVMPerSlotTrace.");
  }
  return function_pointers_.ModAccFetchEVMPerSlotTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSlot, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 meanRMSEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchEVMPerSubcarrierTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchEVMPerSubcarrierTrace.");
  }
  return function_pointers_.ModAccFetchEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, x0, dx, meanRMSEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchEVMPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchEVMPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQOriginOffset, float64* meanIQGainImbalance, float64* meanIQQuadratureError)
{
  if (!function_pointers_.ModAccFetchIQImpairments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchIQImpairments.");
  }
  return function_pointers_.ModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, meanIQOriginOffset, meanIQGainImbalance, meanIQQuadratureError);
}

int32 NiRFmxLTELibrary::ModAccFetchIQImpairmentsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanIQOriginOffset[], float64 meanIQGainImbalance[], float64 meanIQQuadratureError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchIQImpairmentsArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchIQImpairmentsArray.");
  }
  return function_pointers_.ModAccFetchIQImpairmentsArray(instrumentHandle, selectorString, timeout, meanIQOriginOffset, meanIQGainImbalance, meanIQQuadratureError, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchInBandEmissionMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* inBandEmissionMargin)
{
  if (!function_pointers_.ModAccFetchInBandEmissionMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchInBandEmissionMargin.");
  }
  return function_pointers_.ModAccFetchInBandEmissionMargin(instrumentHandle, selectorString, timeout, inBandEmissionMargin);
}

int32 NiRFmxLTELibrary::ModAccFetchInBandEmissionMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inBandEmissionMargin[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchInBandEmissionMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchInBandEmissionMarginArray.");
  }
  return function_pointers_.ModAccFetchInBandEmissionMarginArray(instrumentHandle, selectorString, timeout, inBandEmissionMargin, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 inBandEmission[], float32 inBandEmissionMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchInBandEmissionTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchInBandEmissionTrace.");
  }
  return function_pointers_.ModAccFetchInBandEmissionTrace(instrumentHandle, selectorString, timeout, x0, dx, inBandEmission, inBandEmissionMask, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchMaximumEVMPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSlot[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchMaximumEVMPerSlotTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchMaximumEVMPerSlotTrace.");
  }
  return function_pointers_.ModAccFetchMaximumEVMPerSlotTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumEVMPerSlot, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchMaximumEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchMaximumEVMPerSubcarrierTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchMaximumEVMPerSubcarrierTrace.");
  }
  return function_pointers_.ModAccFetchMaximumEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchMaximumEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchMaximumEVMPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchMaximumEVMPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchMaximumEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumEVMPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchMaximumMagnitudeErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchMaximumMagnitudeErrorPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchMaximumMagnitudeErrorPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchMaximumMagnitudeErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumMagnitudeErrorPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchMaximumPhaseErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchMaximumPhaseErrorPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchMaximumPhaseErrorPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchMaximumPhaseErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumPhaseErrorPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchNPUSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize)
{
  if (!function_pointers_.ModAccFetchNPUSCHConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchNPUSCHConstellationTrace.");
  }
  return function_pointers_.ModAccFetchNPUSCHConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, dataConstellationArraySize, dataConstellationActualArraySize, dmrsConstellation, dmrsConstellationArraySize, dmrsConstellationActualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchNPUSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDMRSEVM, float64* npuschMaximumPeakDMRSEVM)
{
  if (!function_pointers_.ModAccFetchNPUSCHDMRSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchNPUSCHDMRSEVM.");
  }
  return function_pointers_.ModAccFetchNPUSCHDMRSEVM(instrumentHandle, selectorString, timeout, npuschMeanRMSDMRSEVM, npuschMaximumPeakDMRSEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchNPUSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDataEVM, float64* npuschMaximumPeakDataEVM)
{
  if (!function_pointers_.ModAccFetchNPUSCHDataEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchNPUSCHDataEVM.");
  }
  return function_pointers_.ModAccFetchNPUSCHDataEVM(instrumentHandle, selectorString, timeout, npuschMeanRMSDataEVM, npuschMaximumPeakDataEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchNPUSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanDataPower, float64* npuschMeanDMRSPower)
{
  if (!function_pointers_.ModAccFetchNPUSCHSymbolPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchNPUSCHSymbolPower.");
  }
  return function_pointers_.ModAccFetchNPUSCHSymbolPower(instrumentHandle, selectorString, timeout, npuschMeanDataPower, npuschMeanDMRSPower);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCH1024QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam1024Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH1024QAMConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCH1024QAMConstellation.");
  }
  return function_pointers_.ModAccFetchPDSCH1024QAMConstellation(instrumentHandle, selectorString, timeout, qam1024Constellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCH1024QAMEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMS1024QAMEVM)
{
  if (!function_pointers_.ModAccFetchPDSCH1024QAMEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCH1024QAMEVM.");
  }
  return function_pointers_.ModAccFetchPDSCH1024QAMEVM(instrumentHandle, selectorString, timeout, meanRMS1024QAMEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCH1024QAMEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMS1024QAMEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH1024QAMEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCH1024QAMEVMArray.");
  }
  return function_pointers_.ModAccFetchPDSCH1024QAMEVMArray(instrumentHandle, selectorString, timeout, meanRMS1024QAMEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCH16QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam16Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH16QAMConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCH16QAMConstellation.");
  }
  return function_pointers_.ModAccFetchPDSCH16QAMConstellation(instrumentHandle, selectorString, timeout, qam16Constellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCH256QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam256Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH256QAMConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCH256QAMConstellation.");
  }
  return function_pointers_.ModAccFetchPDSCH256QAMConstellation(instrumentHandle, selectorString, timeout, qam256Constellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCH64QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam64Constellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCH64QAMConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCH64QAMConstellation.");
  }
  return function_pointers_.ModAccFetchPDSCH64QAMConstellation(instrumentHandle, selectorString, timeout, qam64Constellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCHEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* meanRMSQPSKEVM, float64* meanRMS16QAMEVM, float64* meanRMS64QAMEVM, float64* meanRMS256QAMEVM)
{
  if (!function_pointers_.ModAccFetchPDSCHEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCHEVM.");
  }
  return function_pointers_.ModAccFetchPDSCHEVM(instrumentHandle, selectorString, timeout, meanRMSEVM, meanRMSQPSKEVM, meanRMS16QAMEVM, meanRMS64QAMEVM, meanRMS256QAMEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCHEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSEVM[], float64 meanRMSQPSKEVM[], float64 meanRMS16QAMEVM[], float64 meanRMS64QAMEVM[], float64 meanRMS256QAMEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCHEVMArray.");
  }
  return function_pointers_.ModAccFetchPDSCHEVMArray(instrumentHandle, selectorString, timeout, meanRMSEVM, meanRMSQPSKEVM, meanRMS16QAMEVM, meanRMS64QAMEVM, meanRMS256QAMEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPDSCHQPSKConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qpskConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPDSCHQPSKConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPDSCHQPSKConstellation.");
  }
  return function_pointers_.ModAccFetchPDSCHQPSKConstellation(instrumentHandle, selectorString, timeout, qpskConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSCHConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHConstellationTrace.");
  }
  return function_pointers_.ModAccFetchPSSCHConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, dataConstellationArraySize, dataConstellationActualArraySize, dmrsConstellation, dmrsConstellationArraySize, dmrsConstellationActualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDMRSEVM, float64* psschMaximumPeakDMRSEVM)
{
  if (!function_pointers_.ModAccFetchPSSCHDMRSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHDMRSEVM.");
  }
  return function_pointers_.ModAccFetchPSSCHDMRSEVM(instrumentHandle, selectorString, timeout, psschMeanRMSDMRSEVM, psschMaximumPeakDMRSEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHDMRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDMRSEVM[], float64 psschMaximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSCHDMRSEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHDMRSEVMArray.");
  }
  return function_pointers_.ModAccFetchPSSCHDMRSEVMArray(instrumentHandle, selectorString, timeout, psschMeanRMSDMRSEVM, psschMaximumPeakDMRSEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDataEVM, float64* psschMaximumPeakDataEVM)
{
  if (!function_pointers_.ModAccFetchPSSCHDataEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHDataEVM.");
  }
  return function_pointers_.ModAccFetchPSSCHDataEVM(instrumentHandle, selectorString, timeout, psschMeanRMSDataEVM, psschMaximumPeakDataEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHDataEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDataEVM[], float64 psschMaximumPeakDataEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSCHDataEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHDataEVMArray.");
  }
  return function_pointers_.ModAccFetchPSSCHDataEVMArray(instrumentHandle, selectorString, timeout, psschMeanRMSDataEVM, psschMaximumPeakDataEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanDataPower, float64* psschMeanDMRSPower)
{
  if (!function_pointers_.ModAccFetchPSSCHSymbolPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHSymbolPower.");
  }
  return function_pointers_.ModAccFetchPSSCHSymbolPower(instrumentHandle, selectorString, timeout, psschMeanDataPower, psschMeanDMRSPower);
}

int32 NiRFmxLTELibrary::ModAccFetchPSSCHSymbolPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanDataPower[], float64 psschMeanDMRSPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPSSCHSymbolPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPSSCHSymbolPowerArray.");
  }
  return function_pointers_.ModAccFetchPSSCHSymbolPowerArray(instrumentHandle, selectorString, timeout, psschMeanDataPower, psschMeanDMRSPower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHConstellationTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHConstellationTrace.");
  }
  return function_pointers_.ModAccFetchPUSCHConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, dataConstellationArraySize, dataConstellationActualArraySize, dmrsConstellation, dmrsConstellationArraySize, dmrsConstellationActualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDMRSEVM, float64* maximumPeakDMRSEVM)
{
  if (!function_pointers_.ModAccFetchPUSCHDMRSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHDMRSEVM.");
  }
  return function_pointers_.ModAccFetchPUSCHDMRSEVM(instrumentHandle, selectorString, timeout, meanRMSDMRSEVM, maximumPeakDMRSEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHDMRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDMRSEVM[], float64 maximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHDMRSEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHDMRSEVMArray.");
  }
  return function_pointers_.ModAccFetchPUSCHDMRSEVMArray(instrumentHandle, selectorString, timeout, meanRMSDMRSEVM, maximumPeakDMRSEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDataEVM, float64* maximumPeakDataEVM)
{
  if (!function_pointers_.ModAccFetchPUSCHDataEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHDataEVM.");
  }
  return function_pointers_.ModAccFetchPUSCHDataEVM(instrumentHandle, selectorString, timeout, meanRMSDataEVM, maximumPeakDataEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHDataEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDataEVM[], float64 maximumPeakDataEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHDataEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHDataEVMArray.");
  }
  return function_pointers_.ModAccFetchPUSCHDataEVMArray(instrumentHandle, selectorString, timeout, meanRMSDataEVM, maximumPeakDataEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHDemodulatedBits) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHDemodulatedBits.");
  }
  return function_pointers_.ModAccFetchPUSCHDemodulatedBits(instrumentHandle, selectorString, timeout, bits, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* puschMeanDataPower, float64* puschMeanDMRSPower)
{
  if (!function_pointers_.ModAccFetchPUSCHSymbolPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHSymbolPower.");
  }
  return function_pointers_.ModAccFetchPUSCHSymbolPower(instrumentHandle, selectorString, timeout, puschMeanDataPower, puschMeanDMRSPower);
}

int32 NiRFmxLTELibrary::ModAccFetchPUSCHSymbolPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 puschMeanDataPower[], float64 puschMeanDMRSPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchPUSCHSymbolPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchPUSCHSymbolPowerArray.");
  }
  return function_pointers_.ModAccFetchPUSCHSymbolPowerArray(instrumentHandle, selectorString, timeout, puschMeanDataPower, puschMeanDMRSPower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchRMSMagnitudeErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSMagnitudeErrorPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchRMSMagnitudeErrorPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchRMSMagnitudeErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsMagnitudeErrorPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchRMSPhaseErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchRMSPhaseErrorPerSymbolTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchRMSPhaseErrorPerSymbolTrace.");
  }
  return function_pointers_.ModAccFetchRMSPhaseErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsPhaseErrorPerSymbol, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSRSConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle srsConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSRSConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSRSConstellation.");
  }
  return function_pointers_.ModAccFetchSRSConstellation(instrumentHandle, selectorString, timeout, srsConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSSRSEVM, float64* meanSRSPower)
{
  if (!function_pointers_.ModAccFetchSRSEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSRSEVM.");
  }
  return function_pointers_.ModAccFetchSRSEVM(instrumentHandle, selectorString, timeout, meanRMSSRSEVM, meanSRSPower);
}

int32 NiRFmxLTELibrary::ModAccFetchSRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSSRSEVM[], float64 meanSRSPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSRSEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSRSEVMArray.");
  }
  return function_pointers_.ModAccFetchSRSEVMArray(instrumentHandle, selectorString, timeout, meanRMSSRSEVM, meanSRSPower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSpectralFlatness(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* range1MaximumToRange1Minimum, float64* range2MaximumToRange2Minimum, float64* range1MaximumToRange2Minimum, float64* range2MaximumToRange1Minimum)
{
  if (!function_pointers_.ModAccFetchSpectralFlatness) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSpectralFlatness.");
  }
  return function_pointers_.ModAccFetchSpectralFlatness(instrumentHandle, selectorString, timeout, range1MaximumToRange1Minimum, range2MaximumToRange2Minimum, range1MaximumToRange2Minimum, range2MaximumToRange1Minimum);
}

int32 NiRFmxLTELibrary::ModAccFetchSpectralFlatnessArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 range1MaximumToRange1Minimum[], float64 range2MaximumToRange2Minimum[], float64 range1MaximumToRange2Minimum[], float64 range2MaximumToRange1Minimum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSpectralFlatnessArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSpectralFlatnessArray.");
  }
  return function_pointers_.ModAccFetchSpectralFlatnessArray(instrumentHandle, selectorString, timeout, range1MaximumToRange1Minimum, range2MaximumToRange2Minimum, range1MaximumToRange2Minimum, range2MaximumToRange1Minimum, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSpectralFlatnessTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatness[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSpectralFlatnessTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSpectralFlatnessTrace.");
  }
  return function_pointers_.ModAccFetchSpectralFlatnessTrace(instrumentHandle, selectorString, timeout, x0, dx, spectralFlatness, spectralFlatnessLowerMask, spectralFlatnessUpperMask, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSubblockIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockMeanIQOriginOffset, float64* subblockMeanIQGainImbalance, float64* subblockMeanIQQuadratureError)
{
  if (!function_pointers_.ModAccFetchSubblockIQImpairments) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSubblockIQImpairments.");
  }
  return function_pointers_.ModAccFetchSubblockIQImpairments(instrumentHandle, selectorString, timeout, subblockMeanIQOriginOffset, subblockMeanIQGainImbalance, subblockMeanIQQuadratureError);
}

int32 NiRFmxLTELibrary::ModAccFetchSubblockInBandEmissionMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockInBandEmissionMargin)
{
  if (!function_pointers_.ModAccFetchSubblockInBandEmissionMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSubblockInBandEmissionMargin.");
  }
  return function_pointers_.ModAccFetchSubblockInBandEmissionMargin(instrumentHandle, selectorString, timeout, subblockInBandEmissionMargin);
}

int32 NiRFmxLTELibrary::ModAccFetchSubblockInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subblockInBandEmission[], float64 subblockInBandEmissionMask[], float64 subblockInBandEmissionRBIndices[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSubblockInBandEmissionTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSubblockInBandEmissionTrace.");
  }
  return function_pointers_.ModAccFetchSubblockInBandEmissionTrace(instrumentHandle, selectorString, timeout, subblockInBandEmission, subblockInBandEmissionMask, subblockInBandEmissionRBIndices, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSynchronizationSignalConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle sssConstellation[], NIComplexSingle pssConstellation[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSynchronizationSignalConstellation) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSynchronizationSignalConstellation.");
  }
  return function_pointers_.ModAccFetchSynchronizationSignalConstellation(instrumentHandle, selectorString, timeout, sssConstellation, pssConstellation, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ModAccFetchSynchronizationSignalEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSPSSEVM, float64* meanRMSSSSEVM)
{
  if (!function_pointers_.ModAccFetchSynchronizationSignalEVM) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSynchronizationSignalEVM.");
  }
  return function_pointers_.ModAccFetchSynchronizationSignalEVM(instrumentHandle, selectorString, timeout, meanRMSPSSEVM, meanRMSSSSEVM);
}

int32 NiRFmxLTELibrary::ModAccFetchSynchronizationSignalEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSPSSEVM[], float64 meanRMSSSSEVM[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchSynchronizationSignalEVMArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ModAccFetchSynchronizationSignalEVMArray.");
  }
  return function_pointers_.ModAccFetchSynchronizationSignalEVMArray(instrumentHandle, selectorString, timeout, meanRMSPSSEVM, meanRMSSSSEVM, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.OBWCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_OBWCfgAveraging.");
  }
  return function_pointers_.OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxLTELibrary::OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  if (!function_pointers_.OBWCfgRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_OBWCfgRBWFilter.");
  }
  return function_pointers_.OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 NiRFmxLTELibrary::OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.OBWCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_OBWCfgSweepTime.");
  }
  return function_pointers_.OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 NiRFmxLTELibrary::OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency)
{
  if (!function_pointers_.OBWFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_OBWFetchMeasurement.");
  }
  return function_pointers_.OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, absolutePower, startFrequency, stopFrequency);
}

int32 NiRFmxLTELibrary::OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.OBWFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_OBWFetchSpectrum.");
  }
  return function_pointers_.OBWFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.PVTCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_PVTCfgAveraging.");
  }
  return function_pointers_.PVTCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxLTELibrary::PVTCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  if (!function_pointers_.PVTCfgMeasurementMethod) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_PVTCfgMeasurementMethod.");
  }
  return function_pointers_.PVTCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 NiRFmxLTELibrary::PVTCfgOFFPowerExclusionPeriods(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offPowerExclusionBefore, float64 offPowerExclusionAfter)
{
  if (!function_pointers_.PVTCfgOFFPowerExclusionPeriods) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_PVTCfgOFFPowerExclusionPeriods.");
  }
  return function_pointers_.PVTCfgOFFPowerExclusionPeriods(instrumentHandle, selectorString, offPowerExclusionBefore, offPowerExclusionAfter);
}

int32 NiRFmxLTELibrary::PVTFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* meanAbsoluteOFFPowerBefore, float64* meanAbsoluteOFFPowerAfter, float64* meanAbsoluteONPower, float64* burstWidth)
{
  if (!function_pointers_.PVTFetchMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_PVTFetchMeasurement.");
  }
  return function_pointers_.PVTFetchMeasurement(instrumentHandle, selectorString, timeout, measurementStatus, meanAbsoluteOFFPowerBefore, meanAbsoluteOFFPowerAfter, meanAbsoluteONPower, burstWidth);
}

int32 NiRFmxLTELibrary::PVTFetchMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 meanAbsoluteOFFPowerBefore[], float64 meanAbsoluteOFFPowerAfter[], float64 meanAbsoluteONPower[], float64 burstWidth[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_PVTFetchMeasurementArray.");
  }
  return function_pointers_.PVTFetchMeasurementArray(instrumentHandle, selectorString, timeout, measurementStatus, meanAbsoluteOFFPowerBefore, meanAbsoluteOFFPowerAfter, meanAbsoluteONPower, burstWidth, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::PVTFetchSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.PVTFetchSignalPowerTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_PVTFetchSignalPowerTrace.");
  }
  return function_pointers_.PVTFetchSignalPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, signalPower, absoluteLimit, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ResetAttribute.");
  }
  return function_pointers_.ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 NiRFmxLTELibrary::ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  if (!function_pointers_.ResetToDefault) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_ResetToDefault.");
  }
  return function_pointers_.ResetToDefault(instrumentHandle, selectorString);
}

int32 NiRFmxLTELibrary::SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  if (!function_pointers_.SEMCfgAveraging) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgAveraging.");
  }
  return function_pointers_.SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 NiRFmxLTELibrary::SEMCfgComponentCarrierMaximumOutputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower)
{
  if (!function_pointers_.SEMCfgComponentCarrierMaximumOutputPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgComponentCarrierMaximumOutputPower.");
  }
  return function_pointers_.SEMCfgComponentCarrierMaximumOutputPower(instrumentHandle, selectorString, componentCarrierMaximumOutputPower);
}

int32 NiRFmxLTELibrary::SEMCfgComponentCarrierMaximumOutputPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgComponentCarrierMaximumOutputPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgComponentCarrierMaximumOutputPowerArray.");
  }
  return function_pointers_.SEMCfgComponentCarrierMaximumOutputPowerArray(instrumentHandle, selectorString, componentCarrierMaximumOutputPower, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgDownlinkMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkMaskType, float64 deltaFMaximum, float64 aggregatedMaximumPower)
{
  if (!function_pointers_.SEMCfgDownlinkMask) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgDownlinkMask.");
  }
  return function_pointers_.SEMCfgDownlinkMask(instrumentHandle, selectorString, downlinkMaskType, deltaFMaximum, aggregatedMaximumPower);
}

int32 NiRFmxLTELibrary::SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  if (!function_pointers_.SEMCfgNumberOfOffsets) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgNumberOfOffsets.");
  }
  return function_pointers_.SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart, float64 offsetAbsoluteLimitStop)
{
  if (!function_pointers_.SEMCfgOffsetAbsoluteLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetAbsoluteLimit.");
  }
  return function_pointers_.SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, offsetAbsoluteLimitStart, offsetAbsoluteLimitStop);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart[], float64 offsetAbsoluteLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetAbsoluteLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetAbsoluteLimitArray.");
  }
  return function_pointers_.SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, offsetAbsoluteLimitStart, offsetAbsoluteLimitStop, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral)
{
  if (!function_pointers_.SEMCfgOffsetBandwidthIntegral) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetBandwidthIntegral.");
  }
  return function_pointers_.SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, offsetBandwidthIntegral);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetBandwidthIntegralArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetBandwidthIntegralArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetBandwidthIntegralArray.");
  }
  return function_pointers_.SEMCfgOffsetBandwidthIntegralArray(instrumentHandle, selectorString, offsetBandwidthIntegral, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetSideband)
{
  if (!function_pointers_.SEMCfgOffsetFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetFrequency.");
  }
  return function_pointers_.SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetFrequencyArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetFrequencyArray.");
  }
  return function_pointers_.SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask)
{
  if (!function_pointers_.SEMCfgOffsetLimitFailMask) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetLimitFailMask.");
  }
  return function_pointers_.SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetLimitFailMaskArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetLimitFailMaskArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetLimitFailMaskArray.");
  }
  return function_pointers_.SEMCfgOffsetLimitFailMaskArray(instrumentHandle, selectorString, limitFailMask, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW, int32 offsetRBWFilterType)
{
  if (!function_pointers_.SEMCfgOffsetRBWFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetRBWFilter.");
  }
  return function_pointers_.SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW[], int32 offsetRBWFilterType[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRBWFilterArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetRBWFilterArray.");
  }
  return function_pointers_.SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart, float64 relativeLimitStop)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetRelativeLimit.");
  }
  return function_pointers_.SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop);
}

int32 NiRFmxLTELibrary::SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  if (!function_pointers_.SEMCfgOffsetRelativeLimitArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgOffsetRelativeLimitArray.");
  }
  return function_pointers_.SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop, numberOfElements);
}

int32 NiRFmxLTELibrary::SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  if (!function_pointers_.SEMCfgSweepTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgSweepTime.");
  }
  return function_pointers_.SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 NiRFmxLTELibrary::SEMCfgUplinkMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkMaskType)
{
  if (!function_pointers_.SEMCfgUplinkMaskType) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMCfgUplinkMaskType.");
  }
  return function_pointers_.SEMCfgUplinkMaskType(instrumentHandle, selectorString, uplinkMaskType);
}

int32 NiRFmxLTELibrary::SEMFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower)
{
  if (!function_pointers_.SEMFetchComponentCarrierMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchComponentCarrierMeasurement.");
  }
  return function_pointers_.SEMFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower);
}

int32 NiRFmxLTELibrary::SEMFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchComponentCarrierMeasurementArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchComponentCarrierMeasurementArray.");
  }
  return function_pointers_.SEMFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchLowerOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchLowerOffsetMargin.");
  }
  return function_pointers_.SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 NiRFmxLTELibrary::SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchLowerOffsetMarginArray.");
  }
  return function_pointers_.SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower)
{
  if (!function_pointers_.SEMFetchLowerOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchLowerOffsetPower.");
  }
  return function_pointers_.SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower);
}

int32 NiRFmxLTELibrary::SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchLowerOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchLowerOffsetPowerArray.");
  }
  return function_pointers_.SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  if (!function_pointers_.SEMFetchMeasurementStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchMeasurementStatus.");
  }
  return function_pointers_.SEMFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 NiRFmxLTELibrary::SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchSpectrum) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchSpectrum.");
  }
  return function_pointers_.SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, compositeMask, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SEMFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  if (!function_pointers_.SEMFetchSubblockMeasurement) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchSubblockMeasurement.");
  }
  return function_pointers_.SEMFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
}

int32 NiRFmxLTELibrary::SEMFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  if (!function_pointers_.SEMFetchTotalAggregatedPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchTotalAggregatedPower.");
  }
  return function_pointers_.SEMFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
}

int32 NiRFmxLTELibrary::SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  if (!function_pointers_.SEMFetchUpperOffsetMargin) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchUpperOffsetMargin.");
  }
  return function_pointers_.SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 NiRFmxLTELibrary::SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetMarginArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchUpperOffsetMarginArray.");
  }
  return function_pointers_.SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower)
{
  if (!function_pointers_.SEMFetchUpperOffsetPower) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchUpperOffsetPower.");
  }
  return function_pointers_.SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower);
}

int32 NiRFmxLTELibrary::SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SEMFetchUpperOffsetPowerArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SEMFetchUpperOffsetPowerArray.");
  }
  return function_pointers_.SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  if (!function_pointers_.SelectMeasurements) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SelectMeasurements.");
  }
  return function_pointers_.SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 NiRFmxLTELibrary::SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SendSoftwareEdgeTrigger.");
  }
  return function_pointers_.SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 NiRFmxLTELibrary::SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  if (!function_pointers_.SetAttributeF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeF32.");
  }
  return function_pointers_.SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeF32Array.");
  }
  return function_pointers_.SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  if (!function_pointers_.SetAttributeF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeF64.");
  }
  return function_pointers_.SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeF64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeF64Array.");
  }
  return function_pointers_.SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  if (!function_pointers_.SetAttributeI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI16.");
  }
  return function_pointers_.SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  if (!function_pointers_.SetAttributeI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI32.");
  }
  return function_pointers_.SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI32Array.");
  }
  return function_pointers_.SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  if (!function_pointers_.SetAttributeI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI64.");
  }
  return function_pointers_.SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI64Array.");
  }
  return function_pointers_.SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  if (!function_pointers_.SetAttributeI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI8.");
  }
  return function_pointers_.SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeI8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeI8Array.");
  }
  return function_pointers_.SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexDoubleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeNIComplexDoubleArray.");
  }
  return function_pointers_.SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeNIComplexSingleArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeNIComplexSingleArray.");
  }
  return function_pointers_.SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  if (!function_pointers_.SetAttributeString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeString.");
  }
  return function_pointers_.SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  if (!function_pointers_.SetAttributeU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeU16.");
  }
  return function_pointers_.SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  if (!function_pointers_.SetAttributeU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeU32.");
  }
  return function_pointers_.SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU32Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeU32Array.");
  }
  return function_pointers_.SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU64Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeU64Array.");
  }
  return function_pointers_.SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  if (!function_pointers_.SetAttributeU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeU8.");
  }
  return function_pointers_.SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 NiRFmxLTELibrary::SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  if (!function_pointers_.SetAttributeU8Array) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SetAttributeU8Array.");
  }
  return function_pointers_.SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 NiRFmxLTELibrary::SlotPhaseCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength)
{
  if (!function_pointers_.SlotPhaseCfgSynchronizationModeAndInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPhaseCfgSynchronizationModeAndInterval.");
  }
  return function_pointers_.SlotPhaseCfgSynchronizationModeAndInterval(instrumentHandle, selectorString, synchronizationMode, measurementOffset, measurementLength);
}

int32 NiRFmxLTELibrary::SlotPhaseFetchMaximumPhaseDiscontinuity(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPhaseDiscontinuity)
{
  if (!function_pointers_.SlotPhaseFetchMaximumPhaseDiscontinuity) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuity.");
  }
  return function_pointers_.SlotPhaseFetchMaximumPhaseDiscontinuity(instrumentHandle, selectorString, timeout, maximumPhaseDiscontinuity);
}

int32 NiRFmxLTELibrary::SlotPhaseFetchMaximumPhaseDiscontinuityArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 maximumPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SlotPhaseFetchMaximumPhaseDiscontinuityArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuityArray.");
  }
  return function_pointers_.SlotPhaseFetchMaximumPhaseDiscontinuityArray(instrumentHandle, selectorString, timeout, maximumPhaseDiscontinuity, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SlotPhaseFetchPhaseDiscontinuities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SlotPhaseFetchPhaseDiscontinuities) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPhaseFetchPhaseDiscontinuities.");
  }
  return function_pointers_.SlotPhaseFetchPhaseDiscontinuities(instrumentHandle, selectorString, timeout, slotPhaseDiscontinuity, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SlotPhaseFetchSamplePhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseError[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SlotPhaseFetchSamplePhaseError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPhaseFetchSamplePhaseError.");
  }
  return function_pointers_.SlotPhaseFetchSamplePhaseError(instrumentHandle, selectorString, timeout, x0, dx, samplePhaseError, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SlotPhaseFetchSamplePhaseErrorLinearFitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseErrorLinearFit[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SlotPhaseFetchSamplePhaseErrorLinearFitTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPhaseFetchSamplePhaseErrorLinearFitTrace.");
  }
  return function_pointers_.SlotPhaseFetchSamplePhaseErrorLinearFitTrace(instrumentHandle, selectorString, timeout, x0, dx, samplePhaseErrorLinearFit, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::SlotPowerCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 measurementLength)
{
  if (!function_pointers_.SlotPowerCfgMeasurementInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPowerCfgMeasurementInterval.");
  }
  return function_pointers_.SlotPowerCfgMeasurementInterval(instrumentHandle, selectorString, measurementOffset, measurementLength);
}

int32 NiRFmxLTELibrary::SlotPowerFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subframePower[], float64 subframePowerDelta[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.SlotPowerFetchPowers) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_SlotPowerFetchPowers.");
  }
  return function_pointers_.SlotPowerFetchPowers(instrumentHandle, selectorString, timeout, subframePower, subframePowerDelta, arraySize, actualArraySize);
}

int32 NiRFmxLTELibrary::WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  if (!function_pointers_.WaitForAcquisitionComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_WaitForAcquisitionComplete.");
  }
  return function_pointers_.WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 NiRFmxLTELibrary::WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  if (!function_pointers_.WaitForMeasurementComplete) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxLTE_WaitForMeasurementComplete.");
  }
  return function_pointers_.WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxlte_grpc
