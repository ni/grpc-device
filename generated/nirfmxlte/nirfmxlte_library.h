//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-RFMXLTE
//---------------------------------------------------------------------
#ifndef NIRFMXLTE_GRPC_LIBRARY_H
#define NIRFMXLTE_GRPC_LIBRARY_H

#include "nirfmxlte_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxlte_grpc {

class NiRFmxLTELibrary : public nirfmxlte_grpc::NiRFmxLTELibraryInterface {
 public:
  NiRFmxLTELibrary();
  explicit NiRFmxLTELibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxLTELibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 ACPCfgConfigurableNumberOfOffsetsEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurableNumberOfOffsetsEnabled) override;
  int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod) override;
  int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled) override;
  int32 ACPCfgNumberOfEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfEUTRAOffsets) override;
  int32 ACPCfgNumberOfGSMOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfGSMOffsets) override;
  int32 ACPCfgNumberOfUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets) override;
  int32 ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits) override;
  int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 ACPCfgUTRAAndEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets, int32 numberOfEUTRAOffsets) override;
  int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower) override;
  int32 ACPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower) override;
  int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 ACPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency) override;
  int32 ACPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower) override;
  int32 ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid) override;
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel) override;
  int32 BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildClusterString(char selectorString[], int32 clusterNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildPDSCHString(char selectorString[], int32 pdschNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) override;
  int32 BuildSubblockString(char selectorString[], int32 subblockNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 BuildSubframeString(char selectorString[], int32 subframeNumber, int32 selectorStringOutLength, char selectorStringOut[]) override;
  int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 CHPCfgIntegrationBandwidthType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integrationBandwidthType) override;
  int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 CHPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower) override;
  int32 CHPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 CHPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency) override;
  int32 CHPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower) override;
  int32 CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid) override;
  int32 CfgAutoDMRSDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoDMRSDetectionEnabled) override;
  int32 CfgAutoNPUSCHChannelDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoNPUSCHChannelDetectionEnabled) override;
  int32 CfgAutoResourceBlockDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoResourceBlockDetectionEnabled) override;
  int32 CfgBand(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 band) override;
  int32 CfgCellSpecificRatio(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cellSpecificRatio) override;
  int32 CfgComponentCarrier(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth, float64 componentCarrierFrequency, int32 cellID) override;
  int32 CfgComponentCarrierArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth[], float64 componentCarrierFrequency[], int32 cellID[], int32 numberOfElements) override;
  int32 CfgComponentCarrierSpacing(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 componentCarrierSpacingType, int32 componentCarrierAtCenterFrequency) override;
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger) override;
  int32 CfgDownlinkAutoCellIDDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoCellIDDetectionEnabled) override;
  int32 CfgDownlinkAutoChannelDetection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoPDSCHChannelDetectionEnabled, int32 autoControlChannelPowerDetectionEnabled, int32 autoPCFICHCFIDetectionEnabled, int32 reserved) override;
  int32 CfgDownlinkChannelConfigurationMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelConfigurationMode) override;
  int32 CfgDownlinkNumberOfSubframes(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubframes) override;
  int32 CfgDownlinkSynchronizationSignal(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pssPower, float64 sssPower) override;
  int32 CfgDownlinkTestModel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel) override;
  int32 CfgDownlinkTestModelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel[], int32 numberOfElements) override;
  int32 CfgDuplexScheme(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 duplexScheme, int32 uplinkDownlinkConfiguration) override;
  int32 CfgEMTCAnalysisEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 emtcAnalysisEnabled) override;
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation) override;
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency) override;
  int32 CfgFrequencyEARFCN(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 band, int32 earfcn) override;
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) override;
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger) override;
  int32 CfgLinkDirection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection) override;
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) override;
  int32 CfgNBIoTComponentCarrier(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nCellID, int32 uplinkSubcarrierSpacing) override;
  int32 CfgNPUSCHDMRS(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 npuschdmrsBaseSequenceMode, int32 npuschdmrsBaseSequenceIndex, int32 npuschdmrsCyclicShift, int32 npuschdmrsGroupHoppingEnabled, int32 npuschdmrsDeltaSS) override;
  int32 CfgNPUSCHFormat(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 format) override;
  int32 CfgNPUSCHStartingSlot(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 startingSlot) override;
  int32 CfgNPUSCHTones(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 toneOffset, int32 numberOfTones, int32 modulationType) override;
  int32 CfgNumberOfComponentCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfComponentCarriers) override;
  int32 CfgNumberOfDUTAntennas(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfDUTAntennas) override;
  int32 CfgNumberOfPDSCHChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfPDSCHChannels) override;
  int32 CfgNumberOfPUSCHResourceBlockClusters(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfResourceBlockClusters) override;
  int32 CfgNumberOfSubblocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubblocks) override;
  int32 CfgPBCH(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pbchPower) override;
  int32 CfgPCFICH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cfi, float64 power) override;
  int32 CfgPDCCH(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pdcchPower) override;
  int32 CfgPDSCH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cw0ModulationType, char resourceBlockAllocation[], float64 power) override;
  int32 CfgPHICH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resource, int32 duration, float64 power) override;
  int32 CfgPSSCHModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType) override;
  int32 CfgPSSCHResourceBlocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks) override;
  int32 CfgPUSCHModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType) override;
  int32 CfgPUSCHResourceBlocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks) override;
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation) override;
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) override;
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel) override;
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger) override;
  int32 CfgTransmitAntennaToAnalyze(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 transmitAntennaToAnalyze) override;
  int32 CfgeNodeBCategory(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 eNodeBCategory) override;
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone) override;
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]) override;
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) override;
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) override;
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal) override;
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal) override;
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal) override;
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal) override;
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal) override;
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal) override;
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) override;
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal) override;
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal) override;
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal) override;
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) override;
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut) override;
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]) override;
  int32 ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount) override;
  int32 ModAccCfgCommonClockSourceEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled) override;
  int32 ModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit) override;
  int32 ModAccCfgFFTWindowOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fftWindowOffset) override;
  int32 ModAccCfgFFTWindowPosition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindowType, float64 fftWindowOffset, float64 fftWindowLength) override;
  int32 ModAccCfgInBandEmissionMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 inBandEmissionMaskType) override;
  int32 ModAccCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength) override;
  int32 ModAccFetchCSRSConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle csrsConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchCSRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCSRSEVM) override;
  int32 ModAccFetchCSRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCSRSEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchCompositeEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeEVM, float64* maximumPeakCompositeEVM, float64* meanFrequencyError, int32* peakCompositeEVMSymbolIndex, int32* peakCompositeEVMSubcarrierIndex, int32* peakCompositeEVMSlotIndex) override;
  int32 ModAccFetchCompositeEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeEVM[], float64 maximumPeakCompositeEVM[], float64 meanFrequencyError[], int32 peakCompositeEVMSymbolIndex[], int32 peakCompositeEVMSubcarrierIndex[], int32 peakCompositeEVMSlotIndex[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchCompositeMagnitudeAndPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeMagnitudeError, float64* maxPeakCompositeMagnitudeError, float64* meanRMSCompositePhaseError, float64* maxPeakCompositePhaseError) override;
  int32 ModAccFetchCompositeMagnitudeAndPhaseErrorArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeMagnitudeError[], float64 maximumPeakCompositeMagnitudeError[], float64 meanRMSCompositePhaseError[], float64 maximumPeakCompositePhaseError[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDownlinkDetectedCellID(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedCellID) override;
  int32 ModAccFetchDownlinkDetectedCellIDArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedCellID[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDownlinkPBCHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDownlinkPCFICHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pcfichConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDownlinkPDCCHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdcchConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDownlinkPHICHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle phichConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchDownlinkTransmitPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rsTransmitPower, float64* ofdmSymbolTransmitPower, float64* reserved1, float64* reserved2) override;
  int32 ModAccFetchDownlinkTransmitPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 rsTransmitPower[], float64 ofdmSymbolTransmitPower[], float64 reserved1[], float64 reserved2[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchEVMHighPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmHighPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchEVMLowPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmLowPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchEVMPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSlot[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 meanRMSEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQOriginOffset, float64* meanIQGainImbalance, float64* meanIQQuadratureError) override;
  int32 ModAccFetchIQImpairmentsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanIQOriginOffset[], float64 meanIQGainImbalance[], float64 meanIQQuadratureError[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchInBandEmissionMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* inBandEmissionMargin) override;
  int32 ModAccFetchInBandEmissionMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inBandEmissionMargin[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 inBandEmission[], float32 inBandEmissionMask[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchMaximumEVMPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSlot[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchMaximumEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchMaximumEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchMaximumFrequencyErrorPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumFrequencyErrorPerSlot[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchMaximumMagnitudeErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchMaximumPhaseErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchNPUSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize) override;
  int32 ModAccFetchNPUSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDMRSEVM, float64* npuschMaximumPeakDMRSEVM) override;
  int32 ModAccFetchNPUSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDataEVM, float64* npuschMaximumPeakDataEVM) override;
  int32 ModAccFetchNPUSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanDataPower, float64* npuschMeanDMRSPower) override;
  int32 ModAccFetchPDSCH1024QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam1024Constellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPDSCH1024QAMEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMS1024QAMEVM) override;
  int32 ModAccFetchPDSCH1024QAMEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMS1024QAMEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPDSCH16QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam16Constellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPDSCH256QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam256Constellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPDSCH64QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam64Constellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPDSCHEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* meanRMSQPSKEVM, float64* meanRMS16QAMEVM, float64* meanRMS64QAMEVM, float64* meanRMS256QAMEVM) override;
  int32 ModAccFetchPDSCHEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSEVM[], float64 meanRMSQPSKEVM[], float64 meanRMS16QAMEVM[], float64 meanRMS64QAMEVM[], float64 meanRMS256QAMEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPDSCHQPSKConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qpskConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPSSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize) override;
  int32 ModAccFetchPSSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDMRSEVM, float64* psschMaximumPeakDMRSEVM) override;
  int32 ModAccFetchPSSCHDMRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDMRSEVM[], float64 psschMaximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPSSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDataEVM, float64* psschMaximumPeakDataEVM) override;
  int32 ModAccFetchPSSCHDataEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDataEVM[], float64 psschMaximumPeakDataEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPSSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanDataPower, float64* psschMeanDMRSPower) override;
  int32 ModAccFetchPSSCHSymbolPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanDataPower[], float64 psschMeanDMRSPower[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPUSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize) override;
  int32 ModAccFetchPUSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDMRSEVM, float64* maximumPeakDMRSEVM) override;
  int32 ModAccFetchPUSCHDMRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDMRSEVM[], float64 maximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPUSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDataEVM, float64* maximumPeakDataEVM) override;
  int32 ModAccFetchPUSCHDataEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDataEVM[], float64 maximumPeakDataEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPUSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchPUSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* puschMeanDataPower, float64* puschMeanDMRSPower) override;
  int32 ModAccFetchPUSCHSymbolPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 puschMeanDataPower[], float64 puschMeanDMRSPower[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchRMSMagnitudeErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchRMSPhaseErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSRSConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle srsConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSSRSEVM, float64* meanSRSPower) override;
  int32 ModAccFetchSRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSSRSEVM[], float64 meanSRSPower[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSpectralFlatness(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* range1MaximumToRange1Minimum, float64* range2MaximumToRange2Minimum, float64* range1MaximumToRange2Minimum, float64* range2MaximumToRange1Minimum) override;
  int32 ModAccFetchSpectralFlatnessArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 range1MaximumToRange1Minimum[], float64 range2MaximumToRange2Minimum[], float64 range1MaximumToRange2Minimum[], float64 range2MaximumToRange1Minimum[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSpectralFlatnessTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatness[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSubblockIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockMeanIQOriginOffset, float64* subblockMeanIQGainImbalance, float64* subblockMeanIQQuadratureError) override;
  int32 ModAccFetchSubblockInBandEmissionMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockInBandEmissionMargin) override;
  int32 ModAccFetchSubblockInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subblockInBandEmission[], float64 subblockInBandEmissionMask[], float64 subblockInBandEmissionRBIndices[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSynchronizationSignalConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle sssConstellation[], NIComplexSingle pssConstellation[], int32 arraySize, int32* actualArraySize) override;
  int32 ModAccFetchSynchronizationSignalEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSPSSEVM, float64* meanRMSSSSEVM) override;
  int32 ModAccFetchSynchronizationSignalEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSPSSEVM[], float64 meanRMSSSSEVM[], int32 arraySize, int32* actualArraySize) override;
  int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType) override;
  int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency) override;
  int32 OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize) override;
  int32 PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 PVTCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod) override;
  int32 PVTCfgOFFPowerExclusionPeriods(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offPowerExclusionBefore, float64 offPowerExclusionAfter) override;
  int32 PVTFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* meanAbsoluteOFFPowerBefore, float64* meanAbsoluteOFFPowerAfter, float64* meanAbsoluteONPower, float64* burstWidth) override;
  int32 PVTFetchMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 meanAbsoluteOFFPowerBefore[], float64 meanAbsoluteOFFPowerAfter[], float64 meanAbsoluteONPower[], float64 burstWidth[], int32 arraySize, int32* actualArraySize) override;
  int32 PVTFetchSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize) override;
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID) override;
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType) override;
  int32 SEMCfgComponentCarrierMaximumOutputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower) override;
  int32 SEMCfgComponentCarrierMaximumOutputPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower[], int32 numberOfElements) override;
  int32 SEMCfgDownlinkMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkMaskType, float64 deltaFMaximum, float64 aggregatedMaximumPower) override;
  int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets) override;
  int32 SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart, float64 offsetAbsoluteLimitStop) override;
  int32 SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart[], float64 offsetAbsoluteLimitStop[], int32 numberOfElements) override;
  int32 SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral) override;
  int32 SEMCfgOffsetBandwidthIntegralArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral[], int32 numberOfElements) override;
  int32 SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetSideband) override;
  int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements) override;
  int32 SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask) override;
  int32 SEMCfgOffsetLimitFailMaskArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask[], int32 numberOfElements) override;
  int32 SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW, int32 offsetRBWFilterType) override;
  int32 SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW[], int32 offsetRBWFilterType[], int32 numberOfElements) override;
  int32 SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart, float64 relativeLimitStop) override;
  int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements) override;
  int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval) override;
  int32 SEMCfgUplinkMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkMaskType) override;
  int32 SEMFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower) override;
  int32 SEMFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) override;
  int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower) override;
  int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus) override;
  int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency) override;
  int32 SEMFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower) override;
  int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower) override;
  int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize) override;
  int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower) override;
  int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize) override;
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces) override;
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle) override;
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal) override;
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) override;
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal) override;
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal) override;
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal) override;
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) override;
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal) override;
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal) override;
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) override;
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]) override;
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal) override;
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal) override;
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) override;
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) override;
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal) override;
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) override;
  int32 SlotPhaseCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength) override;
  int32 SlotPhaseFetchMaximumPhaseDiscontinuity(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPhaseDiscontinuity) override;
  int32 SlotPhaseFetchMaximumPhaseDiscontinuityArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 maximumPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPhaseFetchPhaseDiscontinuities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPhaseFetchSamplePhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseError[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPhaseFetchSamplePhaseErrorLinearFitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseErrorLinearFit[], int32 arraySize, int32* actualArraySize) override;
  int32 SlotPowerCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 measurementLength) override;
  int32 SlotPowerFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subframePower[], float64 subframePowerDelta[], int32 arraySize, int32* actualArraySize) override;
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout) override;
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) override;

 private:
  using ACPCfgAveragingPtr = decltype(&RFmxLTE_ACPCfgAveraging);
  using ACPCfgConfigurableNumberOfOffsetsEnabledPtr = decltype(&RFmxLTE_ACPCfgConfigurableNumberOfOffsetsEnabled);
  using ACPCfgMeasurementMethodPtr = decltype(&RFmxLTE_ACPCfgMeasurementMethod);
  using ACPCfgNoiseCompensationEnabledPtr = decltype(&RFmxLTE_ACPCfgNoiseCompensationEnabled);
  using ACPCfgNumberOfEUTRAOffsetsPtr = decltype(&RFmxLTE_ACPCfgNumberOfEUTRAOffsets);
  using ACPCfgNumberOfGSMOffsetsPtr = decltype(&RFmxLTE_ACPCfgNumberOfGSMOffsets);
  using ACPCfgNumberOfUTRAOffsetsPtr = decltype(&RFmxLTE_ACPCfgNumberOfUTRAOffsets);
  using ACPCfgPowerUnitsPtr = decltype(&RFmxLTE_ACPCfgPowerUnits);
  using ACPCfgRBWFilterPtr = decltype(&RFmxLTE_ACPCfgRBWFilter);
  using ACPCfgSweepTimePtr = decltype(&RFmxLTE_ACPCfgSweepTime);
  using ACPCfgUTRAAndEUTRAOffsetsPtr = decltype(&RFmxLTE_ACPCfgUTRAAndEUTRAOffsets);
  using ACPFetchAbsolutePowersTracePtr = decltype(&RFmxLTE_ACPFetchAbsolutePowersTrace);
  using ACPFetchComponentCarrierMeasurementPtr = decltype(&RFmxLTE_ACPFetchComponentCarrierMeasurement);
  using ACPFetchComponentCarrierMeasurementArrayPtr = decltype(&RFmxLTE_ACPFetchComponentCarrierMeasurementArray);
  using ACPFetchOffsetMeasurementPtr = decltype(&RFmxLTE_ACPFetchOffsetMeasurement);
  using ACPFetchOffsetMeasurementArrayPtr = decltype(&RFmxLTE_ACPFetchOffsetMeasurementArray);
  using ACPFetchRelativePowersTracePtr = decltype(&RFmxLTE_ACPFetchRelativePowersTrace);
  using ACPFetchSpectrumPtr = decltype(&RFmxLTE_ACPFetchSpectrum);
  using ACPFetchSubblockMeasurementPtr = decltype(&RFmxLTE_ACPFetchSubblockMeasurement);
  using ACPFetchTotalAggregatedPowerPtr = decltype(&RFmxLTE_ACPFetchTotalAggregatedPower);
  using ACPValidateNoiseCalibrationDataPtr = decltype(&RFmxLTE_ACPValidateNoiseCalibrationData);
  using AbortMeasurementsPtr = decltype(&RFmxLTE_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxLTE_AnalyzeIQ1Waveform);
  using AnalyzeSpectrum1WaveformPtr = decltype(&RFmxLTE_AnalyzeSpectrum1Waveform);
  using AutoLevelPtr = decltype(&RFmxLTE_AutoLevel);
  using BuildCarrierStringPtr = decltype(&RFmxLTE_BuildCarrierString);
  using BuildClusterStringPtr = decltype(&RFmxLTE_BuildClusterString);
  using BuildOffsetStringPtr = decltype(&RFmxLTE_BuildOffsetString);
  using BuildPDSCHStringPtr = decltype(&RFmxLTE_BuildPDSCHString);
  using BuildSignalStringPtr = decltype(&RFmxLTE_BuildSignalString);
  using BuildSubblockStringPtr = decltype(&RFmxLTE_BuildSubblockString);
  using BuildSubframeStringPtr = decltype(&RFmxLTE_BuildSubframeString);
  using CHPCfgAveragingPtr = decltype(&RFmxLTE_CHPCfgAveraging);
  using CHPCfgIntegrationBandwidthTypePtr = decltype(&RFmxLTE_CHPCfgIntegrationBandwidthType);
  using CHPCfgRBWFilterPtr = decltype(&RFmxLTE_CHPCfgRBWFilter);
  using CHPCfgSweepTimePtr = decltype(&RFmxLTE_CHPCfgSweepTime);
  using CHPFetchComponentCarrierMeasurementPtr = decltype(&RFmxLTE_CHPFetchComponentCarrierMeasurement);
  using CHPFetchComponentCarrierMeasurementArrayPtr = decltype(&RFmxLTE_CHPFetchComponentCarrierMeasurementArray);
  using CHPFetchSpectrumPtr = decltype(&RFmxLTE_CHPFetchSpectrum);
  using CHPFetchSubblockMeasurementPtr = decltype(&RFmxLTE_CHPFetchSubblockMeasurement);
  using CHPFetchTotalAggregatedPowerPtr = decltype(&RFmxLTE_CHPFetchTotalAggregatedPower);
  using CHPValidateNoiseCalibrationDataPtr = decltype(&RFmxLTE_CHPValidateNoiseCalibrationData);
  using CfgAutoDMRSDetectionEnabledPtr = decltype(&RFmxLTE_CfgAutoDMRSDetectionEnabled);
  using CfgAutoNPUSCHChannelDetectionEnabledPtr = decltype(&RFmxLTE_CfgAutoNPUSCHChannelDetectionEnabled);
  using CfgAutoResourceBlockDetectionEnabledPtr = decltype(&RFmxLTE_CfgAutoResourceBlockDetectionEnabled);
  using CfgBandPtr = decltype(&RFmxLTE_CfgBand);
  using CfgCellSpecificRatioPtr = decltype(&RFmxLTE_CfgCellSpecificRatio);
  using CfgComponentCarrierPtr = decltype(&RFmxLTE_CfgComponentCarrier);
  using CfgComponentCarrierArrayPtr = decltype(&RFmxLTE_CfgComponentCarrierArray);
  using CfgComponentCarrierSpacingPtr = decltype(&RFmxLTE_CfgComponentCarrierSpacing);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxLTE_CfgDigitalEdgeTrigger);
  using CfgDownlinkAutoCellIDDetectionEnabledPtr = decltype(&RFmxLTE_CfgDownlinkAutoCellIDDetectionEnabled);
  using CfgDownlinkAutoChannelDetectionPtr = decltype(&RFmxLTE_CfgDownlinkAutoChannelDetection);
  using CfgDownlinkChannelConfigurationModePtr = decltype(&RFmxLTE_CfgDownlinkChannelConfigurationMode);
  using CfgDownlinkNumberOfSubframesPtr = decltype(&RFmxLTE_CfgDownlinkNumberOfSubframes);
  using CfgDownlinkSynchronizationSignalPtr = decltype(&RFmxLTE_CfgDownlinkSynchronizationSignal);
  using CfgDownlinkTestModelPtr = decltype(&RFmxLTE_CfgDownlinkTestModel);
  using CfgDownlinkTestModelArrayPtr = decltype(&RFmxLTE_CfgDownlinkTestModelArray);
  using CfgDuplexSchemePtr = decltype(&RFmxLTE_CfgDuplexScheme);
  using CfgEMTCAnalysisEnabledPtr = decltype(&RFmxLTE_CfgEMTCAnalysisEnabled);
  using CfgExternalAttenuationPtr = decltype(&RFmxLTE_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxLTE_CfgFrequency);
  using CfgFrequencyEARFCNPtr = decltype(&RFmxLTE_CfgFrequencyEARFCN);
  using CfgFrequencyReferencePtr = decltype(&RFmxLTE_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxLTE_CfgIQPowerEdgeTrigger);
  using CfgLinkDirectionPtr = decltype(&RFmxLTE_CfgLinkDirection);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxLTE_CfgMechanicalAttenuation);
  using CfgNBIoTComponentCarrierPtr = decltype(&RFmxLTE_CfgNBIoTComponentCarrier);
  using CfgNPUSCHDMRSPtr = decltype(&RFmxLTE_CfgNPUSCHDMRS);
  using CfgNPUSCHFormatPtr = decltype(&RFmxLTE_CfgNPUSCHFormat);
  using CfgNPUSCHStartingSlotPtr = decltype(&RFmxLTE_CfgNPUSCHStartingSlot);
  using CfgNPUSCHTonesPtr = decltype(&RFmxLTE_CfgNPUSCHTones);
  using CfgNumberOfComponentCarriersPtr = decltype(&RFmxLTE_CfgNumberOfComponentCarriers);
  using CfgNumberOfDUTAntennasPtr = decltype(&RFmxLTE_CfgNumberOfDUTAntennas);
  using CfgNumberOfPDSCHChannelsPtr = decltype(&RFmxLTE_CfgNumberOfPDSCHChannels);
  using CfgNumberOfPUSCHResourceBlockClustersPtr = decltype(&RFmxLTE_CfgNumberOfPUSCHResourceBlockClusters);
  using CfgNumberOfSubblocksPtr = decltype(&RFmxLTE_CfgNumberOfSubblocks);
  using CfgPBCHPtr = decltype(&RFmxLTE_CfgPBCH);
  using CfgPCFICHPtr = decltype(&RFmxLTE_CfgPCFICH);
  using CfgPDCCHPtr = decltype(&RFmxLTE_CfgPDCCH);
  using CfgPDSCHPtr = decltype(&RFmxLTE_CfgPDSCH);
  using CfgPHICHPtr = decltype(&RFmxLTE_CfgPHICH);
  using CfgPSSCHModulationTypePtr = decltype(&RFmxLTE_CfgPSSCHModulationType);
  using CfgPSSCHResourceBlocksPtr = decltype(&RFmxLTE_CfgPSSCHResourceBlocks);
  using CfgPUSCHModulationTypePtr = decltype(&RFmxLTE_CfgPUSCHModulationType);
  using CfgPUSCHResourceBlocksPtr = decltype(&RFmxLTE_CfgPUSCHResourceBlocks);
  using CfgRFPtr = decltype(&RFmxLTE_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxLTE_CfgRFAttenuation);
  using CfgReferenceLevelPtr = decltype(&RFmxLTE_CfgReferenceLevel);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxLTE_CfgSoftwareEdgeTrigger);
  using CfgTransmitAntennaToAnalyzePtr = decltype(&RFmxLTE_CfgTransmitAntennaToAnalyze);
  using CfgeNodeBCategoryPtr = decltype(&RFmxLTE_CfgeNodeBCategory);
  using CheckMeasurementStatusPtr = decltype(&RFmxLTE_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxLTE_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxLTE_ClearNamedResult);
  using ClearNoiseCalibrationDatabasePtr = decltype(&RFmxLTE_ClearNoiseCalibrationDatabase);
  using CloneSignalConfigurationPtr = decltype(&RFmxLTE_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxLTE_Close);
  using CommitPtr = decltype(&RFmxLTE_Commit);
  using CreateSignalConfigurationPtr = decltype(&RFmxLTE_CreateSignalConfiguration);
  using DeleteSignalConfigurationPtr = decltype(&RFmxLTE_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxLTE_DisableTrigger);
  using GetAllNamedResultNamesPtr = decltype(&RFmxLTE_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxLTE_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxLTE_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxLTE_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxLTE_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxLTE_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxLTE_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxLTE_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxLTE_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxLTE_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxLTE_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxLTE_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxLTE_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxLTE_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxLTE_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxLTE_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxLTE_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxLTE_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxLTE_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxLTE_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxLTE_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxLTE_GetError);
  using GetErrorStringPtr = decltype(&RFmxLTE_GetErrorString);
  using InitializePtr = decltype(&RFmxLTE_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxLTE_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxLTE_Initiate);
  using ModAccCfgAveragingPtr = decltype(&RFmxLTE_ModAccCfgAveraging);
  using ModAccCfgCommonClockSourceEnabledPtr = decltype(&RFmxLTE_ModAccCfgCommonClockSourceEnabled);
  using ModAccCfgEVMUnitPtr = decltype(&RFmxLTE_ModAccCfgEVMUnit);
  using ModAccCfgFFTWindowOffsetPtr = decltype(&RFmxLTE_ModAccCfgFFTWindowOffset);
  using ModAccCfgFFTWindowPositionPtr = decltype(&RFmxLTE_ModAccCfgFFTWindowPosition);
  using ModAccCfgInBandEmissionMaskTypePtr = decltype(&RFmxLTE_ModAccCfgInBandEmissionMaskType);
  using ModAccCfgSynchronizationModeAndIntervalPtr = decltype(&RFmxLTE_ModAccCfgSynchronizationModeAndInterval);
  using ModAccFetchCSRSConstellationPtr = decltype(&RFmxLTE_ModAccFetchCSRSConstellation);
  using ModAccFetchCSRSEVMPtr = decltype(&RFmxLTE_ModAccFetchCSRSEVM);
  using ModAccFetchCSRSEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchCSRSEVMArray);
  using ModAccFetchCompositeEVMPtr = decltype(&RFmxLTE_ModAccFetchCompositeEVM);
  using ModAccFetchCompositeEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchCompositeEVMArray);
  using ModAccFetchCompositeMagnitudeAndPhaseErrorPtr = decltype(&RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseError);
  using ModAccFetchCompositeMagnitudeAndPhaseErrorArrayPtr = decltype(&RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseErrorArray);
  using ModAccFetchDownlinkDetectedCellIDPtr = decltype(&RFmxLTE_ModAccFetchDownlinkDetectedCellID);
  using ModAccFetchDownlinkDetectedCellIDArrayPtr = decltype(&RFmxLTE_ModAccFetchDownlinkDetectedCellIDArray);
  using ModAccFetchDownlinkPBCHConstellationPtr = decltype(&RFmxLTE_ModAccFetchDownlinkPBCHConstellation);
  using ModAccFetchDownlinkPCFICHConstellationPtr = decltype(&RFmxLTE_ModAccFetchDownlinkPCFICHConstellation);
  using ModAccFetchDownlinkPDCCHConstellationPtr = decltype(&RFmxLTE_ModAccFetchDownlinkPDCCHConstellation);
  using ModAccFetchDownlinkPHICHConstellationPtr = decltype(&RFmxLTE_ModAccFetchDownlinkPHICHConstellation);
  using ModAccFetchDownlinkTransmitPowerPtr = decltype(&RFmxLTE_ModAccFetchDownlinkTransmitPower);
  using ModAccFetchDownlinkTransmitPowerArrayPtr = decltype(&RFmxLTE_ModAccFetchDownlinkTransmitPowerArray);
  using ModAccFetchEVMHighPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchEVMHighPerSymbolTrace);
  using ModAccFetchEVMLowPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchEVMLowPerSymbolTrace);
  using ModAccFetchEVMPerSlotTracePtr = decltype(&RFmxLTE_ModAccFetchEVMPerSlotTrace);
  using ModAccFetchEVMPerSubcarrierTracePtr = decltype(&RFmxLTE_ModAccFetchEVMPerSubcarrierTrace);
  using ModAccFetchEVMPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchEVMPerSymbolTrace);
  using ModAccFetchIQImpairmentsPtr = decltype(&RFmxLTE_ModAccFetchIQImpairments);
  using ModAccFetchIQImpairmentsArrayPtr = decltype(&RFmxLTE_ModAccFetchIQImpairmentsArray);
  using ModAccFetchInBandEmissionMarginPtr = decltype(&RFmxLTE_ModAccFetchInBandEmissionMargin);
  using ModAccFetchInBandEmissionMarginArrayPtr = decltype(&RFmxLTE_ModAccFetchInBandEmissionMarginArray);
  using ModAccFetchInBandEmissionTracePtr = decltype(&RFmxLTE_ModAccFetchInBandEmissionTrace);
  using ModAccFetchMaximumEVMPerSlotTracePtr = decltype(&RFmxLTE_ModAccFetchMaximumEVMPerSlotTrace);
  using ModAccFetchMaximumEVMPerSubcarrierTracePtr = decltype(&RFmxLTE_ModAccFetchMaximumEVMPerSubcarrierTrace);
  using ModAccFetchMaximumEVMPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchMaximumEVMPerSymbolTrace);
  using ModAccFetchMaximumFrequencyErrorPerSlotTracePtr = decltype(&RFmxLTE_ModAccFetchMaximumFrequencyErrorPerSlotTrace);
  using ModAccFetchMaximumMagnitudeErrorPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchMaximumMagnitudeErrorPerSymbolTrace);
  using ModAccFetchMaximumPhaseErrorPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchMaximumPhaseErrorPerSymbolTrace);
  using ModAccFetchNPUSCHConstellationTracePtr = decltype(&RFmxLTE_ModAccFetchNPUSCHConstellationTrace);
  using ModAccFetchNPUSCHDMRSEVMPtr = decltype(&RFmxLTE_ModAccFetchNPUSCHDMRSEVM);
  using ModAccFetchNPUSCHDataEVMPtr = decltype(&RFmxLTE_ModAccFetchNPUSCHDataEVM);
  using ModAccFetchNPUSCHSymbolPowerPtr = decltype(&RFmxLTE_ModAccFetchNPUSCHSymbolPower);
  using ModAccFetchPDSCH1024QAMConstellationPtr = decltype(&RFmxLTE_ModAccFetchPDSCH1024QAMConstellation);
  using ModAccFetchPDSCH1024QAMEVMPtr = decltype(&RFmxLTE_ModAccFetchPDSCH1024QAMEVM);
  using ModAccFetchPDSCH1024QAMEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchPDSCH1024QAMEVMArray);
  using ModAccFetchPDSCH16QAMConstellationPtr = decltype(&RFmxLTE_ModAccFetchPDSCH16QAMConstellation);
  using ModAccFetchPDSCH256QAMConstellationPtr = decltype(&RFmxLTE_ModAccFetchPDSCH256QAMConstellation);
  using ModAccFetchPDSCH64QAMConstellationPtr = decltype(&RFmxLTE_ModAccFetchPDSCH64QAMConstellation);
  using ModAccFetchPDSCHEVMPtr = decltype(&RFmxLTE_ModAccFetchPDSCHEVM);
  using ModAccFetchPDSCHEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchPDSCHEVMArray);
  using ModAccFetchPDSCHQPSKConstellationPtr = decltype(&RFmxLTE_ModAccFetchPDSCHQPSKConstellation);
  using ModAccFetchPSSCHConstellationTracePtr = decltype(&RFmxLTE_ModAccFetchPSSCHConstellationTrace);
  using ModAccFetchPSSCHDMRSEVMPtr = decltype(&RFmxLTE_ModAccFetchPSSCHDMRSEVM);
  using ModAccFetchPSSCHDMRSEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchPSSCHDMRSEVMArray);
  using ModAccFetchPSSCHDataEVMPtr = decltype(&RFmxLTE_ModAccFetchPSSCHDataEVM);
  using ModAccFetchPSSCHDataEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchPSSCHDataEVMArray);
  using ModAccFetchPSSCHSymbolPowerPtr = decltype(&RFmxLTE_ModAccFetchPSSCHSymbolPower);
  using ModAccFetchPSSCHSymbolPowerArrayPtr = decltype(&RFmxLTE_ModAccFetchPSSCHSymbolPowerArray);
  using ModAccFetchPUSCHConstellationTracePtr = decltype(&RFmxLTE_ModAccFetchPUSCHConstellationTrace);
  using ModAccFetchPUSCHDMRSEVMPtr = decltype(&RFmxLTE_ModAccFetchPUSCHDMRSEVM);
  using ModAccFetchPUSCHDMRSEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchPUSCHDMRSEVMArray);
  using ModAccFetchPUSCHDataEVMPtr = decltype(&RFmxLTE_ModAccFetchPUSCHDataEVM);
  using ModAccFetchPUSCHDataEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchPUSCHDataEVMArray);
  using ModAccFetchPUSCHDemodulatedBitsPtr = decltype(&RFmxLTE_ModAccFetchPUSCHDemodulatedBits);
  using ModAccFetchPUSCHSymbolPowerPtr = decltype(&RFmxLTE_ModAccFetchPUSCHSymbolPower);
  using ModAccFetchPUSCHSymbolPowerArrayPtr = decltype(&RFmxLTE_ModAccFetchPUSCHSymbolPowerArray);
  using ModAccFetchRMSMagnitudeErrorPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchRMSMagnitudeErrorPerSymbolTrace);
  using ModAccFetchRMSPhaseErrorPerSymbolTracePtr = decltype(&RFmxLTE_ModAccFetchRMSPhaseErrorPerSymbolTrace);
  using ModAccFetchSRSConstellationPtr = decltype(&RFmxLTE_ModAccFetchSRSConstellation);
  using ModAccFetchSRSEVMPtr = decltype(&RFmxLTE_ModAccFetchSRSEVM);
  using ModAccFetchSRSEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchSRSEVMArray);
  using ModAccFetchSpectralFlatnessPtr = decltype(&RFmxLTE_ModAccFetchSpectralFlatness);
  using ModAccFetchSpectralFlatnessArrayPtr = decltype(&RFmxLTE_ModAccFetchSpectralFlatnessArray);
  using ModAccFetchSpectralFlatnessTracePtr = decltype(&RFmxLTE_ModAccFetchSpectralFlatnessTrace);
  using ModAccFetchSubblockIQImpairmentsPtr = decltype(&RFmxLTE_ModAccFetchSubblockIQImpairments);
  using ModAccFetchSubblockInBandEmissionMarginPtr = decltype(&RFmxLTE_ModAccFetchSubblockInBandEmissionMargin);
  using ModAccFetchSubblockInBandEmissionTracePtr = decltype(&RFmxLTE_ModAccFetchSubblockInBandEmissionTrace);
  using ModAccFetchSynchronizationSignalConstellationPtr = decltype(&RFmxLTE_ModAccFetchSynchronizationSignalConstellation);
  using ModAccFetchSynchronizationSignalEVMPtr = decltype(&RFmxLTE_ModAccFetchSynchronizationSignalEVM);
  using ModAccFetchSynchronizationSignalEVMArrayPtr = decltype(&RFmxLTE_ModAccFetchSynchronizationSignalEVMArray);
  using OBWCfgAveragingPtr = decltype(&RFmxLTE_OBWCfgAveraging);
  using OBWCfgRBWFilterPtr = decltype(&RFmxLTE_OBWCfgRBWFilter);
  using OBWCfgSweepTimePtr = decltype(&RFmxLTE_OBWCfgSweepTime);
  using OBWFetchMeasurementPtr = decltype(&RFmxLTE_OBWFetchMeasurement);
  using OBWFetchSpectrumPtr = decltype(&RFmxLTE_OBWFetchSpectrum);
  using PVTCfgAveragingPtr = decltype(&RFmxLTE_PVTCfgAveraging);
  using PVTCfgMeasurementMethodPtr = decltype(&RFmxLTE_PVTCfgMeasurementMethod);
  using PVTCfgOFFPowerExclusionPeriodsPtr = decltype(&RFmxLTE_PVTCfgOFFPowerExclusionPeriods);
  using PVTFetchMeasurementPtr = decltype(&RFmxLTE_PVTFetchMeasurement);
  using PVTFetchMeasurementArrayPtr = decltype(&RFmxLTE_PVTFetchMeasurementArray);
  using PVTFetchSignalPowerTracePtr = decltype(&RFmxLTE_PVTFetchSignalPowerTrace);
  using ResetAttributePtr = decltype(&RFmxLTE_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxLTE_ResetToDefault);
  using SEMCfgAveragingPtr = decltype(&RFmxLTE_SEMCfgAveraging);
  using SEMCfgComponentCarrierMaximumOutputPowerPtr = decltype(&RFmxLTE_SEMCfgComponentCarrierMaximumOutputPower);
  using SEMCfgComponentCarrierMaximumOutputPowerArrayPtr = decltype(&RFmxLTE_SEMCfgComponentCarrierMaximumOutputPowerArray);
  using SEMCfgDownlinkMaskPtr = decltype(&RFmxLTE_SEMCfgDownlinkMask);
  using SEMCfgNumberOfOffsetsPtr = decltype(&RFmxLTE_SEMCfgNumberOfOffsets);
  using SEMCfgOffsetAbsoluteLimitPtr = decltype(&RFmxLTE_SEMCfgOffsetAbsoluteLimit);
  using SEMCfgOffsetAbsoluteLimitArrayPtr = decltype(&RFmxLTE_SEMCfgOffsetAbsoluteLimitArray);
  using SEMCfgOffsetBandwidthIntegralPtr = decltype(&RFmxLTE_SEMCfgOffsetBandwidthIntegral);
  using SEMCfgOffsetBandwidthIntegralArrayPtr = decltype(&RFmxLTE_SEMCfgOffsetBandwidthIntegralArray);
  using SEMCfgOffsetFrequencyPtr = decltype(&RFmxLTE_SEMCfgOffsetFrequency);
  using SEMCfgOffsetFrequencyArrayPtr = decltype(&RFmxLTE_SEMCfgOffsetFrequencyArray);
  using SEMCfgOffsetLimitFailMaskPtr = decltype(&RFmxLTE_SEMCfgOffsetLimitFailMask);
  using SEMCfgOffsetLimitFailMaskArrayPtr = decltype(&RFmxLTE_SEMCfgOffsetLimitFailMaskArray);
  using SEMCfgOffsetRBWFilterPtr = decltype(&RFmxLTE_SEMCfgOffsetRBWFilter);
  using SEMCfgOffsetRBWFilterArrayPtr = decltype(&RFmxLTE_SEMCfgOffsetRBWFilterArray);
  using SEMCfgOffsetRelativeLimitPtr = decltype(&RFmxLTE_SEMCfgOffsetRelativeLimit);
  using SEMCfgOffsetRelativeLimitArrayPtr = decltype(&RFmxLTE_SEMCfgOffsetRelativeLimitArray);
  using SEMCfgSweepTimePtr = decltype(&RFmxLTE_SEMCfgSweepTime);
  using SEMCfgUplinkMaskTypePtr = decltype(&RFmxLTE_SEMCfgUplinkMaskType);
  using SEMFetchComponentCarrierMeasurementPtr = decltype(&RFmxLTE_SEMFetchComponentCarrierMeasurement);
  using SEMFetchComponentCarrierMeasurementArrayPtr = decltype(&RFmxLTE_SEMFetchComponentCarrierMeasurementArray);
  using SEMFetchLowerOffsetMarginPtr = decltype(&RFmxLTE_SEMFetchLowerOffsetMargin);
  using SEMFetchLowerOffsetMarginArrayPtr = decltype(&RFmxLTE_SEMFetchLowerOffsetMarginArray);
  using SEMFetchLowerOffsetPowerPtr = decltype(&RFmxLTE_SEMFetchLowerOffsetPower);
  using SEMFetchLowerOffsetPowerArrayPtr = decltype(&RFmxLTE_SEMFetchLowerOffsetPowerArray);
  using SEMFetchMeasurementStatusPtr = decltype(&RFmxLTE_SEMFetchMeasurementStatus);
  using SEMFetchSpectrumPtr = decltype(&RFmxLTE_SEMFetchSpectrum);
  using SEMFetchSubblockMeasurementPtr = decltype(&RFmxLTE_SEMFetchSubblockMeasurement);
  using SEMFetchTotalAggregatedPowerPtr = decltype(&RFmxLTE_SEMFetchTotalAggregatedPower);
  using SEMFetchUpperOffsetMarginPtr = decltype(&RFmxLTE_SEMFetchUpperOffsetMargin);
  using SEMFetchUpperOffsetMarginArrayPtr = decltype(&RFmxLTE_SEMFetchUpperOffsetMarginArray);
  using SEMFetchUpperOffsetPowerPtr = decltype(&RFmxLTE_SEMFetchUpperOffsetPower);
  using SEMFetchUpperOffsetPowerArrayPtr = decltype(&RFmxLTE_SEMFetchUpperOffsetPowerArray);
  using SelectMeasurementsPtr = decltype(&RFmxLTE_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxLTE_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxLTE_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxLTE_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxLTE_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxLTE_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxLTE_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxLTE_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxLTE_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxLTE_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxLTE_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxLTE_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxLTE_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxLTE_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxLTE_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxLTE_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxLTE_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxLTE_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxLTE_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxLTE_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxLTE_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxLTE_SetAttributeU8Array);
  using SlotPhaseCfgSynchronizationModeAndIntervalPtr = decltype(&RFmxLTE_SlotPhaseCfgSynchronizationModeAndInterval);
  using SlotPhaseFetchMaximumPhaseDiscontinuityPtr = decltype(&RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuity);
  using SlotPhaseFetchMaximumPhaseDiscontinuityArrayPtr = decltype(&RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuityArray);
  using SlotPhaseFetchPhaseDiscontinuitiesPtr = decltype(&RFmxLTE_SlotPhaseFetchPhaseDiscontinuities);
  using SlotPhaseFetchSamplePhaseErrorPtr = decltype(&RFmxLTE_SlotPhaseFetchSamplePhaseError);
  using SlotPhaseFetchSamplePhaseErrorLinearFitTracePtr = decltype(&RFmxLTE_SlotPhaseFetchSamplePhaseErrorLinearFitTrace);
  using SlotPowerCfgMeasurementIntervalPtr = decltype(&RFmxLTE_SlotPowerCfgMeasurementInterval);
  using SlotPowerFetchPowersPtr = decltype(&RFmxLTE_SlotPowerFetchPowers);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxLTE_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxLTE_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    ACPCfgAveragingPtr ACPCfgAveraging;
    ACPCfgConfigurableNumberOfOffsetsEnabledPtr ACPCfgConfigurableNumberOfOffsetsEnabled;
    ACPCfgMeasurementMethodPtr ACPCfgMeasurementMethod;
    ACPCfgNoiseCompensationEnabledPtr ACPCfgNoiseCompensationEnabled;
    ACPCfgNumberOfEUTRAOffsetsPtr ACPCfgNumberOfEUTRAOffsets;
    ACPCfgNumberOfGSMOffsetsPtr ACPCfgNumberOfGSMOffsets;
    ACPCfgNumberOfUTRAOffsetsPtr ACPCfgNumberOfUTRAOffsets;
    ACPCfgPowerUnitsPtr ACPCfgPowerUnits;
    ACPCfgRBWFilterPtr ACPCfgRBWFilter;
    ACPCfgSweepTimePtr ACPCfgSweepTime;
    ACPCfgUTRAAndEUTRAOffsetsPtr ACPCfgUTRAAndEUTRAOffsets;
    ACPFetchAbsolutePowersTracePtr ACPFetchAbsolutePowersTrace;
    ACPFetchComponentCarrierMeasurementPtr ACPFetchComponentCarrierMeasurement;
    ACPFetchComponentCarrierMeasurementArrayPtr ACPFetchComponentCarrierMeasurementArray;
    ACPFetchOffsetMeasurementPtr ACPFetchOffsetMeasurement;
    ACPFetchOffsetMeasurementArrayPtr ACPFetchOffsetMeasurementArray;
    ACPFetchRelativePowersTracePtr ACPFetchRelativePowersTrace;
    ACPFetchSpectrumPtr ACPFetchSpectrum;
    ACPFetchSubblockMeasurementPtr ACPFetchSubblockMeasurement;
    ACPFetchTotalAggregatedPowerPtr ACPFetchTotalAggregatedPower;
    ACPValidateNoiseCalibrationDataPtr ACPValidateNoiseCalibrationData;
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AnalyzeSpectrum1WaveformPtr AnalyzeSpectrum1Waveform;
    AutoLevelPtr AutoLevel;
    BuildCarrierStringPtr BuildCarrierString;
    BuildClusterStringPtr BuildClusterString;
    BuildOffsetStringPtr BuildOffsetString;
    BuildPDSCHStringPtr BuildPDSCHString;
    BuildSignalStringPtr BuildSignalString;
    BuildSubblockStringPtr BuildSubblockString;
    BuildSubframeStringPtr BuildSubframeString;
    CHPCfgAveragingPtr CHPCfgAveraging;
    CHPCfgIntegrationBandwidthTypePtr CHPCfgIntegrationBandwidthType;
    CHPCfgRBWFilterPtr CHPCfgRBWFilter;
    CHPCfgSweepTimePtr CHPCfgSweepTime;
    CHPFetchComponentCarrierMeasurementPtr CHPFetchComponentCarrierMeasurement;
    CHPFetchComponentCarrierMeasurementArrayPtr CHPFetchComponentCarrierMeasurementArray;
    CHPFetchSpectrumPtr CHPFetchSpectrum;
    CHPFetchSubblockMeasurementPtr CHPFetchSubblockMeasurement;
    CHPFetchTotalAggregatedPowerPtr CHPFetchTotalAggregatedPower;
    CHPValidateNoiseCalibrationDataPtr CHPValidateNoiseCalibrationData;
    CfgAutoDMRSDetectionEnabledPtr CfgAutoDMRSDetectionEnabled;
    CfgAutoNPUSCHChannelDetectionEnabledPtr CfgAutoNPUSCHChannelDetectionEnabled;
    CfgAutoResourceBlockDetectionEnabledPtr CfgAutoResourceBlockDetectionEnabled;
    CfgBandPtr CfgBand;
    CfgCellSpecificRatioPtr CfgCellSpecificRatio;
    CfgComponentCarrierPtr CfgComponentCarrier;
    CfgComponentCarrierArrayPtr CfgComponentCarrierArray;
    CfgComponentCarrierSpacingPtr CfgComponentCarrierSpacing;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgDownlinkAutoCellIDDetectionEnabledPtr CfgDownlinkAutoCellIDDetectionEnabled;
    CfgDownlinkAutoChannelDetectionPtr CfgDownlinkAutoChannelDetection;
    CfgDownlinkChannelConfigurationModePtr CfgDownlinkChannelConfigurationMode;
    CfgDownlinkNumberOfSubframesPtr CfgDownlinkNumberOfSubframes;
    CfgDownlinkSynchronizationSignalPtr CfgDownlinkSynchronizationSignal;
    CfgDownlinkTestModelPtr CfgDownlinkTestModel;
    CfgDownlinkTestModelArrayPtr CfgDownlinkTestModelArray;
    CfgDuplexSchemePtr CfgDuplexScheme;
    CfgEMTCAnalysisEnabledPtr CfgEMTCAnalysisEnabled;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyEARFCNPtr CfgFrequencyEARFCN;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgLinkDirectionPtr CfgLinkDirection;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgNBIoTComponentCarrierPtr CfgNBIoTComponentCarrier;
    CfgNPUSCHDMRSPtr CfgNPUSCHDMRS;
    CfgNPUSCHFormatPtr CfgNPUSCHFormat;
    CfgNPUSCHStartingSlotPtr CfgNPUSCHStartingSlot;
    CfgNPUSCHTonesPtr CfgNPUSCHTones;
    CfgNumberOfComponentCarriersPtr CfgNumberOfComponentCarriers;
    CfgNumberOfDUTAntennasPtr CfgNumberOfDUTAntennas;
    CfgNumberOfPDSCHChannelsPtr CfgNumberOfPDSCHChannels;
    CfgNumberOfPUSCHResourceBlockClustersPtr CfgNumberOfPUSCHResourceBlockClusters;
    CfgNumberOfSubblocksPtr CfgNumberOfSubblocks;
    CfgPBCHPtr CfgPBCH;
    CfgPCFICHPtr CfgPCFICH;
    CfgPDCCHPtr CfgPDCCH;
    CfgPDSCHPtr CfgPDSCH;
    CfgPHICHPtr CfgPHICH;
    CfgPSSCHModulationTypePtr CfgPSSCHModulationType;
    CfgPSSCHResourceBlocksPtr CfgPSSCHResourceBlocks;
    CfgPUSCHModulationTypePtr CfgPUSCHModulationType;
    CfgPUSCHResourceBlocksPtr CfgPUSCHResourceBlocks;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CfgTransmitAntennaToAnalyzePtr CfgTransmitAntennaToAnalyze;
    CfgeNodeBCategoryPtr CfgeNodeBCategory;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    ClearNoiseCalibrationDatabasePtr ClearNoiseCalibrationDatabase;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    ModAccCfgAveragingPtr ModAccCfgAveraging;
    ModAccCfgCommonClockSourceEnabledPtr ModAccCfgCommonClockSourceEnabled;
    ModAccCfgEVMUnitPtr ModAccCfgEVMUnit;
    ModAccCfgFFTWindowOffsetPtr ModAccCfgFFTWindowOffset;
    ModAccCfgFFTWindowPositionPtr ModAccCfgFFTWindowPosition;
    ModAccCfgInBandEmissionMaskTypePtr ModAccCfgInBandEmissionMaskType;
    ModAccCfgSynchronizationModeAndIntervalPtr ModAccCfgSynchronizationModeAndInterval;
    ModAccFetchCSRSConstellationPtr ModAccFetchCSRSConstellation;
    ModAccFetchCSRSEVMPtr ModAccFetchCSRSEVM;
    ModAccFetchCSRSEVMArrayPtr ModAccFetchCSRSEVMArray;
    ModAccFetchCompositeEVMPtr ModAccFetchCompositeEVM;
    ModAccFetchCompositeEVMArrayPtr ModAccFetchCompositeEVMArray;
    ModAccFetchCompositeMagnitudeAndPhaseErrorPtr ModAccFetchCompositeMagnitudeAndPhaseError;
    ModAccFetchCompositeMagnitudeAndPhaseErrorArrayPtr ModAccFetchCompositeMagnitudeAndPhaseErrorArray;
    ModAccFetchDownlinkDetectedCellIDPtr ModAccFetchDownlinkDetectedCellID;
    ModAccFetchDownlinkDetectedCellIDArrayPtr ModAccFetchDownlinkDetectedCellIDArray;
    ModAccFetchDownlinkPBCHConstellationPtr ModAccFetchDownlinkPBCHConstellation;
    ModAccFetchDownlinkPCFICHConstellationPtr ModAccFetchDownlinkPCFICHConstellation;
    ModAccFetchDownlinkPDCCHConstellationPtr ModAccFetchDownlinkPDCCHConstellation;
    ModAccFetchDownlinkPHICHConstellationPtr ModAccFetchDownlinkPHICHConstellation;
    ModAccFetchDownlinkTransmitPowerPtr ModAccFetchDownlinkTransmitPower;
    ModAccFetchDownlinkTransmitPowerArrayPtr ModAccFetchDownlinkTransmitPowerArray;
    ModAccFetchEVMHighPerSymbolTracePtr ModAccFetchEVMHighPerSymbolTrace;
    ModAccFetchEVMLowPerSymbolTracePtr ModAccFetchEVMLowPerSymbolTrace;
    ModAccFetchEVMPerSlotTracePtr ModAccFetchEVMPerSlotTrace;
    ModAccFetchEVMPerSubcarrierTracePtr ModAccFetchEVMPerSubcarrierTrace;
    ModAccFetchEVMPerSymbolTracePtr ModAccFetchEVMPerSymbolTrace;
    ModAccFetchIQImpairmentsPtr ModAccFetchIQImpairments;
    ModAccFetchIQImpairmentsArrayPtr ModAccFetchIQImpairmentsArray;
    ModAccFetchInBandEmissionMarginPtr ModAccFetchInBandEmissionMargin;
    ModAccFetchInBandEmissionMarginArrayPtr ModAccFetchInBandEmissionMarginArray;
    ModAccFetchInBandEmissionTracePtr ModAccFetchInBandEmissionTrace;
    ModAccFetchMaximumEVMPerSlotTracePtr ModAccFetchMaximumEVMPerSlotTrace;
    ModAccFetchMaximumEVMPerSubcarrierTracePtr ModAccFetchMaximumEVMPerSubcarrierTrace;
    ModAccFetchMaximumEVMPerSymbolTracePtr ModAccFetchMaximumEVMPerSymbolTrace;
    ModAccFetchMaximumFrequencyErrorPerSlotTracePtr ModAccFetchMaximumFrequencyErrorPerSlotTrace;
    ModAccFetchMaximumMagnitudeErrorPerSymbolTracePtr ModAccFetchMaximumMagnitudeErrorPerSymbolTrace;
    ModAccFetchMaximumPhaseErrorPerSymbolTracePtr ModAccFetchMaximumPhaseErrorPerSymbolTrace;
    ModAccFetchNPUSCHConstellationTracePtr ModAccFetchNPUSCHConstellationTrace;
    ModAccFetchNPUSCHDMRSEVMPtr ModAccFetchNPUSCHDMRSEVM;
    ModAccFetchNPUSCHDataEVMPtr ModAccFetchNPUSCHDataEVM;
    ModAccFetchNPUSCHSymbolPowerPtr ModAccFetchNPUSCHSymbolPower;
    ModAccFetchPDSCH1024QAMConstellationPtr ModAccFetchPDSCH1024QAMConstellation;
    ModAccFetchPDSCH1024QAMEVMPtr ModAccFetchPDSCH1024QAMEVM;
    ModAccFetchPDSCH1024QAMEVMArrayPtr ModAccFetchPDSCH1024QAMEVMArray;
    ModAccFetchPDSCH16QAMConstellationPtr ModAccFetchPDSCH16QAMConstellation;
    ModAccFetchPDSCH256QAMConstellationPtr ModAccFetchPDSCH256QAMConstellation;
    ModAccFetchPDSCH64QAMConstellationPtr ModAccFetchPDSCH64QAMConstellation;
    ModAccFetchPDSCHEVMPtr ModAccFetchPDSCHEVM;
    ModAccFetchPDSCHEVMArrayPtr ModAccFetchPDSCHEVMArray;
    ModAccFetchPDSCHQPSKConstellationPtr ModAccFetchPDSCHQPSKConstellation;
    ModAccFetchPSSCHConstellationTracePtr ModAccFetchPSSCHConstellationTrace;
    ModAccFetchPSSCHDMRSEVMPtr ModAccFetchPSSCHDMRSEVM;
    ModAccFetchPSSCHDMRSEVMArrayPtr ModAccFetchPSSCHDMRSEVMArray;
    ModAccFetchPSSCHDataEVMPtr ModAccFetchPSSCHDataEVM;
    ModAccFetchPSSCHDataEVMArrayPtr ModAccFetchPSSCHDataEVMArray;
    ModAccFetchPSSCHSymbolPowerPtr ModAccFetchPSSCHSymbolPower;
    ModAccFetchPSSCHSymbolPowerArrayPtr ModAccFetchPSSCHSymbolPowerArray;
    ModAccFetchPUSCHConstellationTracePtr ModAccFetchPUSCHConstellationTrace;
    ModAccFetchPUSCHDMRSEVMPtr ModAccFetchPUSCHDMRSEVM;
    ModAccFetchPUSCHDMRSEVMArrayPtr ModAccFetchPUSCHDMRSEVMArray;
    ModAccFetchPUSCHDataEVMPtr ModAccFetchPUSCHDataEVM;
    ModAccFetchPUSCHDataEVMArrayPtr ModAccFetchPUSCHDataEVMArray;
    ModAccFetchPUSCHDemodulatedBitsPtr ModAccFetchPUSCHDemodulatedBits;
    ModAccFetchPUSCHSymbolPowerPtr ModAccFetchPUSCHSymbolPower;
    ModAccFetchPUSCHSymbolPowerArrayPtr ModAccFetchPUSCHSymbolPowerArray;
    ModAccFetchRMSMagnitudeErrorPerSymbolTracePtr ModAccFetchRMSMagnitudeErrorPerSymbolTrace;
    ModAccFetchRMSPhaseErrorPerSymbolTracePtr ModAccFetchRMSPhaseErrorPerSymbolTrace;
    ModAccFetchSRSConstellationPtr ModAccFetchSRSConstellation;
    ModAccFetchSRSEVMPtr ModAccFetchSRSEVM;
    ModAccFetchSRSEVMArrayPtr ModAccFetchSRSEVMArray;
    ModAccFetchSpectralFlatnessPtr ModAccFetchSpectralFlatness;
    ModAccFetchSpectralFlatnessArrayPtr ModAccFetchSpectralFlatnessArray;
    ModAccFetchSpectralFlatnessTracePtr ModAccFetchSpectralFlatnessTrace;
    ModAccFetchSubblockIQImpairmentsPtr ModAccFetchSubblockIQImpairments;
    ModAccFetchSubblockInBandEmissionMarginPtr ModAccFetchSubblockInBandEmissionMargin;
    ModAccFetchSubblockInBandEmissionTracePtr ModAccFetchSubblockInBandEmissionTrace;
    ModAccFetchSynchronizationSignalConstellationPtr ModAccFetchSynchronizationSignalConstellation;
    ModAccFetchSynchronizationSignalEVMPtr ModAccFetchSynchronizationSignalEVM;
    ModAccFetchSynchronizationSignalEVMArrayPtr ModAccFetchSynchronizationSignalEVMArray;
    OBWCfgAveragingPtr OBWCfgAveraging;
    OBWCfgRBWFilterPtr OBWCfgRBWFilter;
    OBWCfgSweepTimePtr OBWCfgSweepTime;
    OBWFetchMeasurementPtr OBWFetchMeasurement;
    OBWFetchSpectrumPtr OBWFetchSpectrum;
    PVTCfgAveragingPtr PVTCfgAveraging;
    PVTCfgMeasurementMethodPtr PVTCfgMeasurementMethod;
    PVTCfgOFFPowerExclusionPeriodsPtr PVTCfgOFFPowerExclusionPeriods;
    PVTFetchMeasurementPtr PVTFetchMeasurement;
    PVTFetchMeasurementArrayPtr PVTFetchMeasurementArray;
    PVTFetchSignalPowerTracePtr PVTFetchSignalPowerTrace;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SEMCfgAveragingPtr SEMCfgAveraging;
    SEMCfgComponentCarrierMaximumOutputPowerPtr SEMCfgComponentCarrierMaximumOutputPower;
    SEMCfgComponentCarrierMaximumOutputPowerArrayPtr SEMCfgComponentCarrierMaximumOutputPowerArray;
    SEMCfgDownlinkMaskPtr SEMCfgDownlinkMask;
    SEMCfgNumberOfOffsetsPtr SEMCfgNumberOfOffsets;
    SEMCfgOffsetAbsoluteLimitPtr SEMCfgOffsetAbsoluteLimit;
    SEMCfgOffsetAbsoluteLimitArrayPtr SEMCfgOffsetAbsoluteLimitArray;
    SEMCfgOffsetBandwidthIntegralPtr SEMCfgOffsetBandwidthIntegral;
    SEMCfgOffsetBandwidthIntegralArrayPtr SEMCfgOffsetBandwidthIntegralArray;
    SEMCfgOffsetFrequencyPtr SEMCfgOffsetFrequency;
    SEMCfgOffsetFrequencyArrayPtr SEMCfgOffsetFrequencyArray;
    SEMCfgOffsetLimitFailMaskPtr SEMCfgOffsetLimitFailMask;
    SEMCfgOffsetLimitFailMaskArrayPtr SEMCfgOffsetLimitFailMaskArray;
    SEMCfgOffsetRBWFilterPtr SEMCfgOffsetRBWFilter;
    SEMCfgOffsetRBWFilterArrayPtr SEMCfgOffsetRBWFilterArray;
    SEMCfgOffsetRelativeLimitPtr SEMCfgOffsetRelativeLimit;
    SEMCfgOffsetRelativeLimitArrayPtr SEMCfgOffsetRelativeLimitArray;
    SEMCfgSweepTimePtr SEMCfgSweepTime;
    SEMCfgUplinkMaskTypePtr SEMCfgUplinkMaskType;
    SEMFetchComponentCarrierMeasurementPtr SEMFetchComponentCarrierMeasurement;
    SEMFetchComponentCarrierMeasurementArrayPtr SEMFetchComponentCarrierMeasurementArray;
    SEMFetchLowerOffsetMarginPtr SEMFetchLowerOffsetMargin;
    SEMFetchLowerOffsetMarginArrayPtr SEMFetchLowerOffsetMarginArray;
    SEMFetchLowerOffsetPowerPtr SEMFetchLowerOffsetPower;
    SEMFetchLowerOffsetPowerArrayPtr SEMFetchLowerOffsetPowerArray;
    SEMFetchMeasurementStatusPtr SEMFetchMeasurementStatus;
    SEMFetchSpectrumPtr SEMFetchSpectrum;
    SEMFetchSubblockMeasurementPtr SEMFetchSubblockMeasurement;
    SEMFetchTotalAggregatedPowerPtr SEMFetchTotalAggregatedPower;
    SEMFetchUpperOffsetMarginPtr SEMFetchUpperOffsetMargin;
    SEMFetchUpperOffsetMarginArrayPtr SEMFetchUpperOffsetMarginArray;
    SEMFetchUpperOffsetPowerPtr SEMFetchUpperOffsetPower;
    SEMFetchUpperOffsetPowerArrayPtr SEMFetchUpperOffsetPowerArray;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    SlotPhaseCfgSynchronizationModeAndIntervalPtr SlotPhaseCfgSynchronizationModeAndInterval;
    SlotPhaseFetchMaximumPhaseDiscontinuityPtr SlotPhaseFetchMaximumPhaseDiscontinuity;
    SlotPhaseFetchMaximumPhaseDiscontinuityArrayPtr SlotPhaseFetchMaximumPhaseDiscontinuityArray;
    SlotPhaseFetchPhaseDiscontinuitiesPtr SlotPhaseFetchPhaseDiscontinuities;
    SlotPhaseFetchSamplePhaseErrorPtr SlotPhaseFetchSamplePhaseError;
    SlotPhaseFetchSamplePhaseErrorLinearFitTracePtr SlotPhaseFetchSamplePhaseErrorLinearFitTrace;
    SlotPowerCfgMeasurementIntervalPtr SlotPowerCfgMeasurementInterval;
    SlotPowerFetchPowersPtr SlotPowerFetchPowers;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxlte_grpc

#endif  // NIRFMXLTE_GRPC_LIBRARY_H
