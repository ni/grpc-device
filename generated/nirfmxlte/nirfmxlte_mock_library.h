//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-RFMXLTE
//---------------------------------------------------------------------
#ifndef NIRFMXLTE_GRPC_MOCK_LIBRARY_H
#define NIRFMXLTE_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nirfmxlte_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiRFmxLTEMockLibrary : public nirfmxlte_grpc::NiRFmxLTELibraryInterface {
 public:
  MOCK_METHOD(int32, ACPCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, ACPCfgConfigurableNumberOfOffsetsEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurableNumberOfOffsetsEnabled), (override));
  MOCK_METHOD(int32, ACPCfgMeasurementMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod), (override));
  MOCK_METHOD(int32, ACPCfgNoiseCompensationEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled), (override));
  MOCK_METHOD(int32, ACPCfgNumberOfEUTRAOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfEUTRAOffsets), (override));
  MOCK_METHOD(int32, ACPCfgNumberOfGSMOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfGSMOffsets), (override));
  MOCK_METHOD(int32, ACPCfgNumberOfUTRAOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets), (override));
  MOCK_METHOD(int32, ACPCfgPowerUnits, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits), (override));
  MOCK_METHOD(int32, ACPCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, ACPCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, ACPCfgUTRAAndEUTRAOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets, int32 numberOfEUTRAOffsets), (override));
  MOCK_METHOD(int32, ACPFetchAbsolutePowersTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchComponentCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower), (override));
  MOCK_METHOD(int32, ACPFetchComponentCarrierMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchOffsetMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower), (override));
  MOCK_METHOD(int32, ACPFetchOffsetMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchRelativePowersTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ACPFetchSubblockMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency), (override));
  MOCK_METHOD(int32, ACPFetchTotalAggregatedPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower), (override));
  MOCK_METHOD(int32, ACPValidateNoiseCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid), (override));
  MOCK_METHOD(int32, AbortMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, AnalyzeIQ1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AnalyzeSpectrum1Waveform, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved), (override));
  MOCK_METHOD(int32, AutoLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel), (override));
  MOCK_METHOD(int32, BuildCarrierString, (char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildClusterString, (char selectorString[], int32 clusterNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildOffsetString, (char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildPDSCHString, (char selectorString[], int32 pdschNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildSignalString, (char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]), (override));
  MOCK_METHOD(int32, BuildSubblockString, (char selectorString[], int32 subblockNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, BuildSubframeString, (char selectorString[], int32 subframeNumber, int32 selectorStringOutLength, char selectorStringOut[]), (override));
  MOCK_METHOD(int32, CHPCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, CHPCfgIntegrationBandwidthType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integrationBandwidthType), (override));
  MOCK_METHOD(int32, CHPCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, CHPCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, CHPFetchComponentCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower), (override));
  MOCK_METHOD(int32, CHPFetchComponentCarrierMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, CHPFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, CHPFetchSubblockMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency), (override));
  MOCK_METHOD(int32, CHPFetchTotalAggregatedPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower), (override));
  MOCK_METHOD(int32, CHPValidateNoiseCalibrationData, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid), (override));
  MOCK_METHOD(int32, CfgAutoDMRSDetectionEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoDMRSDetectionEnabled), (override));
  MOCK_METHOD(int32, CfgAutoNPUSCHChannelDetectionEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoNPUSCHChannelDetectionEnabled), (override));
  MOCK_METHOD(int32, CfgAutoResourceBlockDetectionEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoResourceBlockDetectionEnabled), (override));
  MOCK_METHOD(int32, CfgBand, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 band), (override));
  MOCK_METHOD(int32, CfgCellSpecificRatio, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cellSpecificRatio), (override));
  MOCK_METHOD(int32, CfgComponentCarrier, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth, float64 componentCarrierFrequency, int32 cellID), (override));
  MOCK_METHOD(int32, CfgComponentCarrierArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth[], float64 componentCarrierFrequency[], int32 cellID[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, CfgComponentCarrierSpacing, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 componentCarrierSpacingType, int32 componentCarrierAtCenterFrequency), (override));
  MOCK_METHOD(int32, CfgDigitalEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgDownlinkAutoCellIDDetectionEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoCellIDDetectionEnabled), (override));
  MOCK_METHOD(int32, CfgDownlinkAutoChannelDetection, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoPDSCHChannelDetectionEnabled, int32 autoControlChannelPowerDetectionEnabled, int32 autoPCFICHCFIDetectionEnabled, int32 reserved), (override));
  MOCK_METHOD(int32, CfgDownlinkChannelConfigurationMode, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelConfigurationMode), (override));
  MOCK_METHOD(int32, CfgDownlinkNumberOfSubframes, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubframes), (override));
  MOCK_METHOD(int32, CfgDownlinkSynchronizationSignal, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pssPower, float64 sssPower), (override));
  MOCK_METHOD(int32, CfgDownlinkTestModel, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel), (override));
  MOCK_METHOD(int32, CfgDownlinkTestModelArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, CfgDuplexScheme, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 duplexScheme, int32 uplinkDownlinkConfiguration), (override));
  MOCK_METHOD(int32, CfgEMTCAnalysisEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 emtcAnalysisEnabled), (override));
  MOCK_METHOD(int32, CfgExternalAttenuation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency), (override));
  MOCK_METHOD(int32, CfgFrequencyEARFCN, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 band, int32 earfcn), (override));
  MOCK_METHOD(int32, CfgFrequencyReference, (niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency), (override));
  MOCK_METHOD(int32, CfgIQPowerEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgLinkDirection, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection), (override));
  MOCK_METHOD(int32, CfgMechanicalAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue), (override));
  MOCK_METHOD(int32, CfgNBIoTComponentCarrier, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nCellID, int32 uplinkSubcarrierSpacing), (override));
  MOCK_METHOD(int32, CfgNPUSCHDMRS, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 npuschdmrsBaseSequenceMode, int32 npuschdmrsBaseSequenceIndex, int32 npuschdmrsCyclicShift, int32 npuschdmrsGroupHoppingEnabled, int32 npuschdmrsDeltaSS), (override));
  MOCK_METHOD(int32, CfgNPUSCHFormat, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 format), (override));
  MOCK_METHOD(int32, CfgNPUSCHStartingSlot, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 startingSlot), (override));
  MOCK_METHOD(int32, CfgNPUSCHTones, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 toneOffset, int32 numberOfTones, int32 modulationType), (override));
  MOCK_METHOD(int32, CfgNumberOfComponentCarriers, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfComponentCarriers), (override));
  MOCK_METHOD(int32, CfgNumberOfDUTAntennas, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfDUTAntennas), (override));
  MOCK_METHOD(int32, CfgNumberOfPDSCHChannels, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfPDSCHChannels), (override));
  MOCK_METHOD(int32, CfgNumberOfPUSCHResourceBlockClusters, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfResourceBlockClusters), (override));
  MOCK_METHOD(int32, CfgNumberOfSubblocks, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubblocks), (override));
  MOCK_METHOD(int32, CfgPBCH, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pbchPower), (override));
  MOCK_METHOD(int32, CfgPCFICH, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cfi, float64 power), (override));
  MOCK_METHOD(int32, CfgPDCCH, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pdcchPower), (override));
  MOCK_METHOD(int32, CfgPDSCH, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cw0ModulationType, char resourceBlockAllocation[], float64 power), (override));
  MOCK_METHOD(int32, CfgPHICH, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resource, int32 duration, float64 power), (override));
  MOCK_METHOD(int32, CfgPSSCHModulationType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType), (override));
  MOCK_METHOD(int32, CfgPSSCHResourceBlocks, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks), (override));
  MOCK_METHOD(int32, CfgPUSCHModulationType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType), (override));
  MOCK_METHOD(int32, CfgPUSCHResourceBlocks, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks), (override));
  MOCK_METHOD(int32, CfgRF, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation), (override));
  MOCK_METHOD(int32, CfgRFAttenuation, (niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue), (override));
  MOCK_METHOD(int32, CfgReferenceLevel, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel), (override));
  MOCK_METHOD(int32, CfgSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger), (override));
  MOCK_METHOD(int32, CfgTransmitAntennaToAnalyze, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 transmitAntennaToAnalyze), (override));
  MOCK_METHOD(int32, CfgeNodeBCategory, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 eNodeBCategory), (override));
  MOCK_METHOD(int32, CheckMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone), (override));
  MOCK_METHOD(int32, ClearAllNamedResults, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, ClearNamedResult, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, ClearNoiseCalibrationDatabase, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CloneSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]), (override));
  MOCK_METHOD(int32, Close, (niRFmxInstrHandle instrumentHandle, int32 forceDestroy), (override));
  MOCK_METHOD(int32, Commit, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, CreateList, (niRFmxInstrHandle instrumentHandle, char listName[]), (override));
  MOCK_METHOD(int32, CreateListStep, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32* createdStepIndex), (override));
  MOCK_METHOD(int32, CreateSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DeleteList, (niRFmxInstrHandle instrumentHandle, char listName[]), (override));
  MOCK_METHOD(int32, DeleteSignalConfiguration, (niRFmxInstrHandle instrumentHandle, char signalName[]), (override));
  MOCK_METHOD(int32, DisableTrigger, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, GetAllNamedResultNames, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists), (override));
  MOCK_METHOD(int32, GetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]), (override));
  MOCK_METHOD(int32, GetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal), (override));
  MOCK_METHOD(int32, GetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, GetError, (niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, GetErrorString, (niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]), (override));
  MOCK_METHOD(int32, Initialize, (char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession), (override));
  MOCK_METHOD(int32, InitializeFromNIRFSASession, (uInt32 nirfsaSession, niRFmxInstrHandle* handleOut), (override));
  MOCK_METHOD(int32, Initiate, (niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]), (override));
  MOCK_METHOD(int32, ModAccCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount), (override));
  MOCK_METHOD(int32, ModAccCfgCommonClockSourceEnabled, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled), (override));
  MOCK_METHOD(int32, ModAccCfgEVMUnit, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit), (override));
  MOCK_METHOD(int32, ModAccCfgFFTWindowOffset, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fftWindowOffset), (override));
  MOCK_METHOD(int32, ModAccCfgFFTWindowPosition, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindowType, float64 fftWindowOffset, float64 fftWindowLength), (override));
  MOCK_METHOD(int32, ModAccCfgInBandEmissionMaskType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 inBandEmissionMaskType), (override));
  MOCK_METHOD(int32, ModAccCfgSynchronizationModeAndInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength), (override));
  MOCK_METHOD(int32, ModAccFetchCSRSConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle csrsConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchCSRSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCSRSEVM), (override));
  MOCK_METHOD(int32, ModAccFetchCSRSEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCSRSEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchCompositeEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeEVM, float64* maximumPeakCompositeEVM, float64* meanFrequencyError, int32* peakCompositeEVMSymbolIndex, int32* peakCompositeEVMSubcarrierIndex, int32* peakCompositeEVMSlotIndex), (override));
  MOCK_METHOD(int32, ModAccFetchCompositeEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeEVM[], float64 maximumPeakCompositeEVM[], float64 meanFrequencyError[], int32 peakCompositeEVMSymbolIndex[], int32 peakCompositeEVMSubcarrierIndex[], int32 peakCompositeEVMSlotIndex[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchCompositeMagnitudeAndPhaseError, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeMagnitudeError, float64* maxPeakCompositeMagnitudeError, float64* meanRMSCompositePhaseError, float64* maxPeakCompositePhaseError), (override));
  MOCK_METHOD(int32, ModAccFetchCompositeMagnitudeAndPhaseErrorArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeMagnitudeError[], float64 maximumPeakCompositeMagnitudeError[], float64 meanRMSCompositePhaseError[], float64 maximumPeakCompositePhaseError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkDetectedCellID, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedCellID), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkDetectedCellIDArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedCellID[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkPBCHConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkPCFICHConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pcfichConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkPDCCHConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdcchConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkPHICHConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle phichConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkTransmitPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rsTransmitPower, float64* ofdmSymbolTransmitPower, float64* reserved1, float64* reserved2), (override));
  MOCK_METHOD(int32, ModAccFetchDownlinkTransmitPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 rsTransmitPower[], float64 ofdmSymbolTransmitPower[], float64 reserved1[], float64 reserved2[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchEVMHighPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmHighPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchEVMLowPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmLowPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchEVMPerSlotTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSlot[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchEVMPerSubcarrierTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 meanRMSEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchEVMPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchIQImpairments, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQOriginOffset, float64* meanIQGainImbalance, float64* meanIQQuadratureError), (override));
  MOCK_METHOD(int32, ModAccFetchIQImpairmentsArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanIQOriginOffset[], float64 meanIQGainImbalance[], float64 meanIQQuadratureError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchInBandEmissionMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* inBandEmissionMargin), (override));
  MOCK_METHOD(int32, ModAccFetchInBandEmissionMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inBandEmissionMargin[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchInBandEmissionTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 inBandEmission[], float32 inBandEmissionMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchMaximumEVMPerSlotTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSlot[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchMaximumEVMPerSubcarrierTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchMaximumEVMPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchMaximumFrequencyErrorPerSlotTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumFrequencyErrorPerSlot[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchMaximumMagnitudeErrorPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchMaximumPhaseErrorPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchNPUSCHConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchNPUSCHDMRSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDMRSEVM, float64* npuschMaximumPeakDMRSEVM), (override));
  MOCK_METHOD(int32, ModAccFetchNPUSCHDataEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDataEVM, float64* npuschMaximumPeakDataEVM), (override));
  MOCK_METHOD(int32, ModAccFetchNPUSCHSymbolPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanDataPower, float64* npuschMeanDMRSPower), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCH1024QAMConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam1024Constellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCH1024QAMEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMS1024QAMEVM), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCH1024QAMEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMS1024QAMEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCH16QAMConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam16Constellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCH256QAMConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam256Constellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCH64QAMConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam64Constellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCHEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* meanRMSQPSKEVM, float64* meanRMS16QAMEVM, float64* meanRMS64QAMEVM, float64* meanRMS256QAMEVM), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCHEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSEVM[], float64 meanRMSQPSKEVM[], float64 meanRMS16QAMEVM[], float64 meanRMS64QAMEVM[], float64 meanRMS256QAMEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPDSCHQPSKConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qpskConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHDMRSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDMRSEVM, float64* psschMaximumPeakDMRSEVM), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHDMRSEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDMRSEVM[], float64 psschMaximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHDataEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDataEVM, float64* psschMaximumPeakDataEVM), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHDataEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDataEVM[], float64 psschMaximumPeakDataEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHSymbolPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanDataPower, float64* psschMeanDMRSPower), (override));
  MOCK_METHOD(int32, ModAccFetchPSSCHSymbolPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanDataPower[], float64 psschMeanDMRSPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHConstellationTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHDMRSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDMRSEVM, float64* maximumPeakDMRSEVM), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHDMRSEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDMRSEVM[], float64 maximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHDataEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDataEVM, float64* maximumPeakDataEVM), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHDataEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDataEVM[], float64 maximumPeakDataEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHDemodulatedBits, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHSymbolPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* puschMeanDataPower, float64* puschMeanDMRSPower), (override));
  MOCK_METHOD(int32, ModAccFetchPUSCHSymbolPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 puschMeanDataPower[], float64 puschMeanDMRSPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchRMSMagnitudeErrorPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchRMSPhaseErrorPerSymbolTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSRSConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle srsConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSRSEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSSRSEVM, float64* meanSRSPower), (override));
  MOCK_METHOD(int32, ModAccFetchSRSEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSSRSEVM[], float64 meanSRSPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSpectralFlatness, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* range1MaximumToRange1Minimum, float64* range2MaximumToRange2Minimum, float64* range1MaximumToRange2Minimum, float64* range2MaximumToRange1Minimum), (override));
  MOCK_METHOD(int32, ModAccFetchSpectralFlatnessArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 range1MaximumToRange1Minimum[], float64 range2MaximumToRange2Minimum[], float64 range1MaximumToRange2Minimum[], float64 range2MaximumToRange1Minimum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSpectralFlatnessTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatness[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSubblockIQImpairments, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockMeanIQOriginOffset, float64* subblockMeanIQGainImbalance, float64* subblockMeanIQQuadratureError), (override));
  MOCK_METHOD(int32, ModAccFetchSubblockInBandEmissionMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockInBandEmissionMargin), (override));
  MOCK_METHOD(int32, ModAccFetchSubblockInBandEmissionTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subblockInBandEmission[], float64 subblockInBandEmissionMask[], float64 subblockInBandEmissionRBIndices[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSynchronizationSignalConstellation, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle sssConstellation[], NIComplexSingle pssConstellation[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ModAccFetchSynchronizationSignalEVM, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSPSSEVM, float64* meanRMSSSSEVM), (override));
  MOCK_METHOD(int32, ModAccFetchSynchronizationSignalEVMArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSPSSEVM[], float64 meanRMSSSSEVM[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, OBWCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, OBWCfgRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType), (override));
  MOCK_METHOD(int32, OBWCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, OBWFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency), (override));
  MOCK_METHOD(int32, OBWFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PVTCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, PVTCfgMeasurementMethod, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod), (override));
  MOCK_METHOD(int32, PVTCfgOFFPowerExclusionPeriods, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offPowerExclusionBefore, float64 offPowerExclusionAfter), (override));
  MOCK_METHOD(int32, PVTFetchMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* meanAbsoluteOFFPowerBefore, float64* meanAbsoluteOFFPowerAfter, float64* meanAbsoluteONPower, float64* burstWidth), (override));
  MOCK_METHOD(int32, PVTFetchMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 meanAbsoluteOFFPowerBefore[], float64 meanAbsoluteOFFPowerAfter[], float64 meanAbsoluteONPower[], float64 burstWidth[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, PVTFetchSignalPowerTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, ResetAttribute, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID), (override));
  MOCK_METHOD(int32, ResetToDefault, (niRFmxInstrHandle instrumentHandle, char selectorString[]), (override));
  MOCK_METHOD(int32, SEMCfgAveraging, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType), (override));
  MOCK_METHOD(int32, SEMCfgComponentCarrierMaximumOutputPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower), (override));
  MOCK_METHOD(int32, SEMCfgComponentCarrierMaximumOutputPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgDownlinkMask, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkMaskType, float64 deltaFMaximum, float64 aggregatedMaximumPower), (override));
  MOCK_METHOD(int32, SEMCfgNumberOfOffsets, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets), (override));
  MOCK_METHOD(int32, SEMCfgOffsetAbsoluteLimit, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart, float64 offsetAbsoluteLimitStop), (override));
  MOCK_METHOD(int32, SEMCfgOffsetAbsoluteLimitArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart[], float64 offsetAbsoluteLimitStop[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetBandwidthIntegral, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral), (override));
  MOCK_METHOD(int32, SEMCfgOffsetBandwidthIntegralArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetFrequency, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetSideband), (override));
  MOCK_METHOD(int32, SEMCfgOffsetFrequencyArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetLimitFailMask, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask), (override));
  MOCK_METHOD(int32, SEMCfgOffsetLimitFailMaskArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRBWFilter, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW, int32 offsetRBWFilterType), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRBWFilterArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW[], int32 offsetRBWFilterType[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeLimit, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart, float64 relativeLimitStop), (override));
  MOCK_METHOD(int32, SEMCfgOffsetRelativeLimitArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements), (override));
  MOCK_METHOD(int32, SEMCfgSweepTime, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval), (override));
  MOCK_METHOD(int32, SEMCfgUplinkMaskType, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkMaskType), (override));
  MOCK_METHOD(int32, SEMFetchComponentCarrierMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower), (override));
  MOCK_METHOD(int32, SEMFetchComponentCarrierMeasurementArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower), (override));
  MOCK_METHOD(int32, SEMFetchLowerOffsetPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchMeasurementStatus, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus), (override));
  MOCK_METHOD(int32, SEMFetchSpectrum, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchSubblockMeasurement, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency), (override));
  MOCK_METHOD(int32, SEMFetchTotalAggregatedPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetMargin, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetMarginArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetPower, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower), (override));
  MOCK_METHOD(int32, SEMFetchUpperOffsetPowerArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SelectMeasurements, (niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces), (override));
  MOCK_METHOD(int32, SendSoftwareEdgeTrigger, (niRFmxInstrHandle instrumentHandle), (override));
  MOCK_METHOD(int32, SetAttributeF32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeF64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeF64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI64, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeI8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeI8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexDoubleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeNIComplexSingleArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeString, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]), (override));
  MOCK_METHOD(int32, SetAttributeU16, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU32Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU64Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SetAttributeU8, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal), (override));
  MOCK_METHOD(int32, SetAttributeU8Array, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize), (override));
  MOCK_METHOD(int32, SlotPhaseCfgSynchronizationModeAndInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength), (override));
  MOCK_METHOD(int32, SlotPhaseFetchMaximumPhaseDiscontinuity, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPhaseDiscontinuity), (override));
  MOCK_METHOD(int32, SlotPhaseFetchMaximumPhaseDiscontinuityArray, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 maximumPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SlotPhaseFetchPhaseDiscontinuities, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SlotPhaseFetchSamplePhaseError, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseError[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SlotPhaseFetchSamplePhaseErrorLinearFitTrace, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseErrorLinearFit[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, SlotPowerCfgMeasurementInterval, (niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 measurementLength), (override));
  MOCK_METHOD(int32, SlotPowerFetchPowers, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subframePower[], float64 subframePowerDelta[], int32 arraySize, int32* actualArraySize), (override));
  MOCK_METHOD(int32, WaitForAcquisitionComplete, (niRFmxInstrHandle instrumentHandle, float64 timeout), (override));
  MOCK_METHOD(int32, WaitForMeasurementComplete, (niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIRFMXLTE_GRPC_MOCK_LIBRARY_H
