
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFMXLTE Metadata
//---------------------------------------------------------------------
#ifndef NIRFMXLTE_GRPC_SERVICE_H
#define NIRFMXLTE_GRPC_SERVICE_H

#include <nirfmxlte.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfmxlte_library_interface.h"

namespace nirfmxlte_grpc {

struct NiRFmxLTEFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiRFmxLTEFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiRFmxLTEService final : public NiRFmxLTE::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<niRFmxInstrHandle>>;

  NiRFmxLTEService(
    NiRFmxLTELibraryInterface* library,
    ResourceRepositorySharedPtr session_repository,
    const NiRFmxLTEFeatureToggles& feature_toggles = {});
  virtual ~NiRFmxLTEService();
  
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status Initialize(::grpc::ServerContext* context, const InitializeRequest* request, InitializeResponse* response) override;
private:
  NiRFmxLTELibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  NiRFmxLTEFeatureToggles feature_toggles_;
};

} // namespace nirfmxlte_grpc

#endif  // NIRFMXLTE_GRPC_SERVICE_H
