//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-RFMXLTE Metadata
//---------------------------------------------------------------------
#include "nirfmxlte_library.h"

namespace nirfmxlte_grpc {

int32 ACPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxLTE_ACPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 ACPCfgConfigurableNumberOfOffsetsEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 configurableNumberOfOffsetsEnabled)
{
  return RFmxLTE_ACPCfgConfigurableNumberOfOffsetsEnabled(instrumentHandle, selectorString, configurableNumberOfOffsetsEnabled);
}

int32 ACPCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  return RFmxLTE_ACPCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 ACPCfgNoiseCompensationEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 noiseCompensationEnabled)
{
  return RFmxLTE_ACPCfgNoiseCompensationEnabled(instrumentHandle, selectorString, noiseCompensationEnabled);
}

int32 ACPCfgNumberOfEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfEUTRAOffsets)
{
  return RFmxLTE_ACPCfgNumberOfEUTRAOffsets(instrumentHandle, selectorString, numberOfEUTRAOffsets);
}

int32 ACPCfgNumberOfGSMOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfGSMOffsets)
{
  return RFmxLTE_ACPCfgNumberOfGSMOffsets(instrumentHandle, selectorString, numberOfGSMOffsets);
}

int32 ACPCfgNumberOfUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets)
{
  return RFmxLTE_ACPCfgNumberOfUTRAOffsets(instrumentHandle, selectorString, numberOfUTRAOffsets);
}

int32 ACPCfgPowerUnits(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 powerUnits)
{
  return RFmxLTE_ACPCfgPowerUnits(instrumentHandle, selectorString, powerUnits);
}

int32 ACPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxLTE_ACPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 ACPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxLTE_ACPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 ACPCfgUTRAAndEUTRAOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfUTRAOffsets, int32 numberOfEUTRAOffsets)
{
  return RFmxLTE_ACPCfgUTRAAndEUTRAOffsets(instrumentHandle, selectorString, numberOfUTRAOffsets, numberOfEUTRAOffsets);
}

int32 ACPFetchAbsolutePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 absolutePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ACPFetchAbsolutePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, absolutePowersTrace, arraySize, actualArraySize);
}

int32 ACPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  return RFmxLTE_ACPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
}

int32 ACPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ACPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
}

int32 ACPFetchOffsetMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* lowerRelativePower, float64* upperRelativePower, float64* lowerAbsolutePower, float64* upperAbsolutePower)
{
  return RFmxLTE_ACPFetchOffsetMeasurement(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower);
}

int32 ACPFetchOffsetMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 lowerRelativePower[], float64 upperRelativePower[], float64 lowerAbsolutePower[], float64 upperAbsolutePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ACPFetchOffsetMeasurementArray(instrumentHandle, selectorString, timeout, lowerRelativePower, upperRelativePower, lowerAbsolutePower, upperAbsolutePower, arraySize, actualArraySize);
}

int32 ACPFetchRelativePowersTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 traceIndex, float64* x0, float64* dx, float32 relativePowersTrace[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ACPFetchRelativePowersTrace(instrumentHandle, selectorString, timeout, traceIndex, x0, dx, relativePowersTrace, arraySize, actualArraySize);
}

int32 ACPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ACPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 ACPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  return RFmxLTE_ACPFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
}

int32 ACPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  return RFmxLTE_ACPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
}

int32 ACPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  return RFmxLTE_ACPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_AbortMeasurements(instrumentHandle, selectorString);
}

int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved)
{
  return RFmxLTE_AnalyzeIQ1Waveform(instrumentHandle, selectorString, resultName, x0, dx, iq, arraySize, reset, reserved);
}

int32 AnalyzeSpectrum1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 spectrum[], int32 arraySize, int32 reset, int64 reserved)
{
  return RFmxLTE_AnalyzeSpectrum1Waveform(instrumentHandle, selectorString, resultName, x0, dx, spectrum, arraySize, reset, reserved);
}

int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 measurementInterval, float64* referenceLevel)
{
  return RFmxLTE_AutoLevel(instrumentHandle, selectorString, measurementInterval, referenceLevel);
}

int32 BuildCarrierString(char selectorString[], int32 carrierNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxLTE_BuildCarrierString(selectorString, carrierNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildClusterString(char selectorString[], int32 clusterNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxLTE_BuildClusterString(selectorString, clusterNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildOffsetString(char selectorString[], int32 offsetNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxLTE_BuildOffsetString(selectorString, offsetNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildPDSCHString(char selectorString[], int32 pdschNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxLTE_BuildPDSCHString(selectorString, pdschNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[])
{
  return RFmxLTE_BuildSignalString(signalName, resultName, selectorStringLength, selectorString);
}

int32 BuildSubblockString(char selectorString[], int32 subblockNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxLTE_BuildSubblockString(selectorString, subblockNumber, selectorStringOutLength, selectorStringOut);
}

int32 BuildSubframeString(char selectorString[], int32 subframeNumber, int32 selectorStringOutLength, char selectorStringOut[])
{
  return RFmxLTE_BuildSubframeString(selectorString, subframeNumber, selectorStringOutLength, selectorStringOut);
}

int32 CHPCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxLTE_CHPCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 CHPCfgIntegrationBandwidthType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 integrationBandwidthType)
{
  return RFmxLTE_CHPCfgIntegrationBandwidthType(instrumentHandle, selectorString, integrationBandwidthType);
}

int32 CHPCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxLTE_CHPCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 CHPCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxLTE_CHPCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 CHPFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absolutePower, float64* relativePower)
{
  return RFmxLTE_CHPFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absolutePower, relativePower);
}

int32 CHPFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absolutePower[], float64 relativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_CHPFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absolutePower, relativePower, arraySize, actualArraySize);
}

int32 CHPFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_CHPFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 CHPFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  return RFmxLTE_CHPFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
}

int32 CHPFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  return RFmxLTE_CHPFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
}

int32 CHPValidateNoiseCalibrationData(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* noiseCalibrationDataValid)
{
  return RFmxLTE_CHPValidateNoiseCalibrationData(instrumentHandle, selectorString, noiseCalibrationDataValid);
}

int32 CfgAutoDMRSDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoDMRSDetectionEnabled)
{
  return RFmxLTE_CfgAutoDMRSDetectionEnabled(instrumentHandle, selectorString, autoDMRSDetectionEnabled);
}

int32 CfgAutoNPUSCHChannelDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoNPUSCHChannelDetectionEnabled)
{
  return RFmxLTE_CfgAutoNPUSCHChannelDetectionEnabled(instrumentHandle, selectorString, autoNPUSCHChannelDetectionEnabled);
}

int32 CfgAutoResourceBlockDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoResourceBlockDetectionEnabled)
{
  return RFmxLTE_CfgAutoResourceBlockDetectionEnabled(instrumentHandle, selectorString, autoResourceBlockDetectionEnabled);
}

int32 CfgBand(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 band)
{
  return RFmxLTE_CfgBand(instrumentHandle, selectorString, band);
}

int32 CfgCellSpecificRatio(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cellSpecificRatio)
{
  return RFmxLTE_CfgCellSpecificRatio(instrumentHandle, selectorString, cellSpecificRatio);
}

int32 CfgComponentCarrier(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth, float64 componentCarrierFrequency, int32 cellID)
{
  return RFmxLTE_CfgComponentCarrier(instrumentHandle, selectorString, componentCarrierBandwidth, componentCarrierFrequency, cellID);
}

int32 CfgComponentCarrierArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierBandwidth[], float64 componentCarrierFrequency[], int32 cellID[], int32 numberOfElements)
{
  return RFmxLTE_CfgComponentCarrierArray(instrumentHandle, selectorString, componentCarrierBandwidth, componentCarrierFrequency, cellID, numberOfElements);
}

int32 CfgComponentCarrierSpacing(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 componentCarrierSpacingType, int32 componentCarrierAtCenterFrequency)
{
  return RFmxLTE_CfgComponentCarrierSpacing(instrumentHandle, selectorString, componentCarrierSpacingType, componentCarrierAtCenterFrequency);
}

int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger)
{
  return RFmxLTE_CfgDigitalEdgeTrigger(instrumentHandle, selectorString, digitalEdgeSource, digitalEdge, triggerDelay, enableTrigger);
}

int32 CfgDownlinkAutoCellIDDetectionEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoCellIDDetectionEnabled)
{
  return RFmxLTE_CfgDownlinkAutoCellIDDetectionEnabled(instrumentHandle, selectorString, autoCellIDDetectionEnabled);
}

int32 CfgDownlinkAutoChannelDetection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 autoPDSCHChannelDetectionEnabled, int32 autoControlChannelPowerDetectionEnabled, int32 autoPCFICHCFIDetectionEnabled, int32 reserved)
{
  return RFmxLTE_CfgDownlinkAutoChannelDetection(instrumentHandle, selectorString, autoPDSCHChannelDetectionEnabled, autoControlChannelPowerDetectionEnabled, autoPCFICHCFIDetectionEnabled, reserved);
}

int32 CfgDownlinkChannelConfigurationMode(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 channelConfigurationMode)
{
  return RFmxLTE_CfgDownlinkChannelConfigurationMode(instrumentHandle, selectorString, channelConfigurationMode);
}

int32 CfgDownlinkNumberOfSubframes(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubframes)
{
  return RFmxLTE_CfgDownlinkNumberOfSubframes(instrumentHandle, selectorString, numberOfSubframes);
}

int32 CfgDownlinkSynchronizationSignal(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pssPower, float64 sssPower)
{
  return RFmxLTE_CfgDownlinkSynchronizationSignal(instrumentHandle, selectorString, pssPower, sssPower);
}

int32 CfgDownlinkTestModel(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel)
{
  return RFmxLTE_CfgDownlinkTestModel(instrumentHandle, selectorString, downlinkTestModel);
}

int32 CfgDownlinkTestModelArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkTestModel[], int32 numberOfElements)
{
  return RFmxLTE_CfgDownlinkTestModelArray(instrumentHandle, selectorString, downlinkTestModel, numberOfElements);
}

int32 CfgDuplexScheme(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 duplexScheme, int32 uplinkDownlinkConfiguration)
{
  return RFmxLTE_CfgDuplexScheme(instrumentHandle, selectorString, duplexScheme, uplinkDownlinkConfiguration);
}

int32 CfgEMTCAnalysisEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 emtcAnalysisEnabled)
{
  return RFmxLTE_CfgEMTCAnalysisEnabled(instrumentHandle, selectorString, emtcAnalysisEnabled);
}

int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation)
{
  return RFmxLTE_CfgExternalAttenuation(instrumentHandle, selectorString, externalAttenuation);
}

int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency)
{
  return RFmxLTE_CfgFrequency(instrumentHandle, selectorString, centerFrequency);
}

int32 CfgFrequencyEARFCN(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection, int32 band, int32 earfcn)
{
  return RFmxLTE_CfgFrequencyEARFCN(instrumentHandle, selectorString, linkDirection, band, earfcn);
}

int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency)
{
  return RFmxLTE_CfgFrequencyReference(instrumentHandle, channelName, frequencyReferenceSource, frequencyReferenceFrequency);
}

int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger)
{
  return RFmxLTE_CfgIQPowerEdgeTrigger(instrumentHandle, selectorString, iqPowerEdgeSource, iqPowerEdgeSlope, iqPowerEdgeLevel, triggerDelay, triggerMinQuietTimeMode, triggerMinQuietTimeDuration, iqPowerEdgeLevelType, enableTrigger);
}

int32 CfgLinkDirection(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 linkDirection)
{
  return RFmxLTE_CfgLinkDirection(instrumentHandle, selectorString, linkDirection);
}

int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue)
{
  return RFmxLTE_CfgMechanicalAttenuation(instrumentHandle, channelName, mechanicalAttenuationAuto, mechanicalAttenuationValue);
}

int32 CfgNBIoTComponentCarrier(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 nCellID, int32 uplinkSubcarrierSpacing)
{
  return RFmxLTE_CfgNBIoTComponentCarrier(instrumentHandle, selectorString, nCellID, uplinkSubcarrierSpacing);
}

int32 CfgNPUSCHDMRS(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 npuschdmrsBaseSequenceMode, int32 npuschdmrsBaseSequenceIndex, int32 npuschdmrsCyclicShift, int32 npuschdmrsGroupHoppingEnabled, int32 npuschdmrsDeltaSS)
{
  return RFmxLTE_CfgNPUSCHDMRS(instrumentHandle, selectorString, npuschdmrsBaseSequenceMode, npuschdmrsBaseSequenceIndex, npuschdmrsCyclicShift, npuschdmrsGroupHoppingEnabled, npuschdmrsDeltaSS);
}

int32 CfgNPUSCHFormat(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 format)
{
  return RFmxLTE_CfgNPUSCHFormat(instrumentHandle, selectorString, format);
}

int32 CfgNPUSCHStartingSlot(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 startingSlot)
{
  return RFmxLTE_CfgNPUSCHStartingSlot(instrumentHandle, selectorString, startingSlot);
}

int32 CfgNPUSCHTones(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 toneOffset, int32 numberOfTones, int32 modulationType)
{
  return RFmxLTE_CfgNPUSCHTones(instrumentHandle, selectorString, toneOffset, numberOfTones, modulationType);
}

int32 CfgNumberOfComponentCarriers(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfComponentCarriers)
{
  return RFmxLTE_CfgNumberOfComponentCarriers(instrumentHandle, selectorString, numberOfComponentCarriers);
}

int32 CfgNumberOfDUTAntennas(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfDUTAntennas)
{
  return RFmxLTE_CfgNumberOfDUTAntennas(instrumentHandle, selectorString, numberOfDUTAntennas);
}

int32 CfgNumberOfPDSCHChannels(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfPDSCHChannels)
{
  return RFmxLTE_CfgNumberOfPDSCHChannels(instrumentHandle, selectorString, numberOfPDSCHChannels);
}

int32 CfgNumberOfPUSCHResourceBlockClusters(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfResourceBlockClusters)
{
  return RFmxLTE_CfgNumberOfPUSCHResourceBlockClusters(instrumentHandle, selectorString, numberOfResourceBlockClusters);
}

int32 CfgNumberOfSubblocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfSubblocks)
{
  return RFmxLTE_CfgNumberOfSubblocks(instrumentHandle, selectorString, numberOfSubblocks);
}

int32 CfgPBCH(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pbchPower)
{
  return RFmxLTE_CfgPBCH(instrumentHandle, selectorString, pbchPower);
}

int32 CfgPCFICH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cfi, float64 power)
{
  return RFmxLTE_CfgPCFICH(instrumentHandle, selectorString, cfi, power);
}

int32 CfgPDCCH(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 pdcchPower)
{
  return RFmxLTE_CfgPDCCH(instrumentHandle, selectorString, pdcchPower);
}

int32 CfgPDSCH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 cw0ModulationType, char resourceBlockAllocation[], float64 power)
{
  return RFmxLTE_CfgPDSCH(instrumentHandle, selectorString, cw0ModulationType, resourceBlockAllocation, power);
}

int32 CfgPHICH(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resource, int32 duration, float64 power)
{
  return RFmxLTE_CfgPHICH(instrumentHandle, selectorString, resource, duration, power);
}

int32 CfgPSSCHModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType)
{
  return RFmxLTE_CfgPSSCHModulationType(instrumentHandle, selectorString, modulationType);
}

int32 CfgPSSCHResourceBlocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks)
{
  return RFmxLTE_CfgPSSCHResourceBlocks(instrumentHandle, selectorString, resourceBlockOffset, numberOfResourceBlocks);
}

int32 CfgPUSCHModulationType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 modulationType)
{
  return RFmxLTE_CfgPUSCHModulationType(instrumentHandle, selectorString, modulationType);
}

int32 CfgPUSCHResourceBlocks(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 resourceBlockOffset, int32 numberOfResourceBlocks)
{
  return RFmxLTE_CfgPUSCHResourceBlocks(instrumentHandle, selectorString, resourceBlockOffset, numberOfResourceBlocks);
}

int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation)
{
  return RFmxLTE_CfgRF(instrumentHandle, selectorString, centerFrequency, referenceLevel, externalAttenuation);
}

int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue)
{
  return RFmxLTE_CfgRFAttenuation(instrumentHandle, channelName, rfAttenuationAuto, rfAttenuationValue);
}

int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel)
{
  return RFmxLTE_CfgReferenceLevel(instrumentHandle, selectorString, referenceLevel);
}

int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger)
{
  return RFmxLTE_CfgSoftwareEdgeTrigger(instrumentHandle, selectorString, triggerDelay, enableTrigger);
}

int32 CfgTransmitAntennaToAnalyze(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 transmitAntennaToAnalyze)
{
  return RFmxLTE_CfgTransmitAntennaToAnalyze(instrumentHandle, selectorString, transmitAntennaToAnalyze);
}

int32 CfgeNodeBCategory(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 eNodeBCategory)
{
  return RFmxLTE_CfgeNodeBCategory(instrumentHandle, selectorString, eNodeBCategory);
}

int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone)
{
  return RFmxLTE_CheckMeasurementStatus(instrumentHandle, selectorString, isDone);
}

int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_ClearAllNamedResults(instrumentHandle, selectorString);
}

int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_ClearNamedResult(instrumentHandle, selectorString);
}

int32 ClearNoiseCalibrationDatabase(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_ClearNoiseCalibrationDatabase(instrumentHandle, selectorString);
}

int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[])
{
  return RFmxLTE_CloneSignalConfiguration(instrumentHandle, oldSignalName, newSignalName);
}

int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy)
{
  return RFmxLTE_Close(instrumentHandle, forceDestroy);
}

int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_Commit(instrumentHandle, selectorString);
}

int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  return RFmxLTE_CreateSignalConfiguration(instrumentHandle, signalName);
}

int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[])
{
  return RFmxLTE_DeleteSignalConfiguration(instrumentHandle, signalName);
}

int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_DisableTrigger(instrumentHandle, selectorString);
}

int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists)
{
  return RFmxLTE_GetAllNamedResultNames(instrumentHandle, selectorString, resultNames, resultNamesBufferSize, actualResultNamesSize, defaultResultExists);
}

int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal)
{
  return RFmxLTE_GetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal)
{
  return RFmxLTE_GetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal)
{
  return RFmxLTE_GetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal)
{
  return RFmxLTE_GetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal)
{
  return RFmxLTE_GetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal)
{
  return RFmxLTE_GetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[])
{
  return RFmxLTE_GetAttributeString(instrumentHandle, selectorString, attributeID, arraySize, attrVal);
}

int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal)
{
  return RFmxLTE_GetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal)
{
  return RFmxLTE_GetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal)
{
  return RFmxLTE_GetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_GetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize, actualArraySize);
}

int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxLTE_GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  return RFmxLTE_GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession)
{
  return RFmxLTE_Initialize(resourceName, optionString, handleOut, isNewSession);
}

int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut)
{
  return RFmxLTE_InitializeFromNIRFSASession(nirfsaSession, handleOut);
}

int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[])
{
  return RFmxLTE_Initiate(instrumentHandle, selectorString, resultName);
}

int32 ModAccCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount)
{
  return RFmxLTE_ModAccCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount);
}

int32 ModAccCfgCommonClockSourceEnabled(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 commonClockSourceEnabled)
{
  return RFmxLTE_ModAccCfgCommonClockSourceEnabled(instrumentHandle, selectorString, commonClockSourceEnabled);
}

int32 ModAccCfgEVMUnit(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 evmUnit)
{
  return RFmxLTE_ModAccCfgEVMUnit(instrumentHandle, selectorString, evmUnit);
}

int32 ModAccCfgFFTWindowOffset(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 fftWindowOffset)
{
  return RFmxLTE_ModAccCfgFFTWindowOffset(instrumentHandle, selectorString, fftWindowOffset);
}

int32 ModAccCfgFFTWindowPosition(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 fftWindowType, float64 fftWindowOffset, float64 fftWindowLength)
{
  return RFmxLTE_ModAccCfgFFTWindowPosition(instrumentHandle, selectorString, fftWindowType, fftWindowOffset, fftWindowLength);
}

int32 ModAccCfgInBandEmissionMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 inBandEmissionMaskType)
{
  return RFmxLTE_ModAccCfgInBandEmissionMaskType(instrumentHandle, selectorString, inBandEmissionMaskType);
}

int32 ModAccCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength)
{
  return RFmxLTE_ModAccCfgSynchronizationModeAndInterval(instrumentHandle, selectorString, synchronizationMode, measurementOffset, measurementLength);
}

int32 ModAccFetchCSRSConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle csrsConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchCSRSConstellation(instrumentHandle, selectorString, timeout, csrsConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchCSRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCSRSEVM)
{
  return RFmxLTE_ModAccFetchCSRSEVM(instrumentHandle, selectorString, timeout, meanRMSCSRSEVM);
}

int32 ModAccFetchCSRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCSRSEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchCSRSEVMArray(instrumentHandle, selectorString, timeout, meanRMSCSRSEVM, arraySize, actualArraySize);
}

int32 ModAccFetchCompositeEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeEVM, float64* maximumPeakCompositeEVM, float64* meanFrequencyError, int32* peakCompositeEVMSymbolIndex, int32* peakCompositeEVMSubcarrierIndex, int32* peakCompositeEVMSlotIndex)
{
  return RFmxLTE_ModAccFetchCompositeEVM(instrumentHandle, selectorString, timeout, meanRMSCompositeEVM, maximumPeakCompositeEVM, meanFrequencyError, peakCompositeEVMSymbolIndex, peakCompositeEVMSubcarrierIndex, peakCompositeEVMSlotIndex);
}

int32 ModAccFetchCompositeEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeEVM[], float64 maximumPeakCompositeEVM[], float64 meanFrequencyError[], int32 peakCompositeEVMSymbolIndex[], int32 peakCompositeEVMSubcarrierIndex[], int32 peakCompositeEVMSlotIndex[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchCompositeEVMArray(instrumentHandle, selectorString, timeout, meanRMSCompositeEVM, maximumPeakCompositeEVM, meanFrequencyError, peakCompositeEVMSymbolIndex, peakCompositeEVMSubcarrierIndex, peakCompositeEVMSlotIndex, arraySize, actualArraySize);
}

int32 ModAccFetchCompositeMagnitudeAndPhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSCompositeMagnitudeError, float64* maxPeakCompositeMagnitudeError, float64* meanRMSCompositePhaseError, float64* maxPeakCompositePhaseError)
{
  return RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseError(instrumentHandle, selectorString, timeout, meanRMSCompositeMagnitudeError, maxPeakCompositeMagnitudeError, meanRMSCompositePhaseError, maxPeakCompositePhaseError);
}

int32 ModAccFetchCompositeMagnitudeAndPhaseErrorArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSCompositeMagnitudeError[], float64 maximumPeakCompositeMagnitudeError[], float64 meanRMSCompositePhaseError[], float64 maximumPeakCompositePhaseError[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchCompositeMagnitudeAndPhaseErrorArray(instrumentHandle, selectorString, timeout, meanRMSCompositeMagnitudeError, maximumPeakCompositeMagnitudeError, meanRMSCompositePhaseError, maximumPeakCompositePhaseError, arraySize, actualArraySize);
}

int32 ModAccFetchDownlinkDetectedCellID(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* detectedCellID)
{
  return RFmxLTE_ModAccFetchDownlinkDetectedCellID(instrumentHandle, selectorString, timeout, detectedCellID);
}

int32 ModAccFetchDownlinkDetectedCellIDArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 detectedCellID[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchDownlinkDetectedCellIDArray(instrumentHandle, selectorString, timeout, detectedCellID, arraySize, actualArraySize);
}

int32 ModAccFetchDownlinkPBCHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pbchConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchDownlinkPBCHConstellation(instrumentHandle, selectorString, timeout, pbchConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchDownlinkPCFICHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pcfichConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchDownlinkPCFICHConstellation(instrumentHandle, selectorString, timeout, pcfichConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchDownlinkPDCCHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle pdcchConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchDownlinkPDCCHConstellation(instrumentHandle, selectorString, timeout, pdcchConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchDownlinkPHICHConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle phichConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchDownlinkPHICHConstellation(instrumentHandle, selectorString, timeout, phichConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchDownlinkTransmitPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* rsTransmitPower, float64* ofdmSymbolTransmitPower, float64* reserved1, float64* reserved2)
{
  return RFmxLTE_ModAccFetchDownlinkTransmitPower(instrumentHandle, selectorString, timeout, rsTransmitPower, ofdmSymbolTransmitPower, reserved1, reserved2);
}

int32 ModAccFetchDownlinkTransmitPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 rsTransmitPower[], float64 ofdmSymbolTransmitPower[], float64 reserved1[], float64 reserved2[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchDownlinkTransmitPowerArray(instrumentHandle, selectorString, timeout, rsTransmitPower, ofdmSymbolTransmitPower, reserved1, reserved2, arraySize, actualArraySize);
}

int32 ModAccFetchEVMHighPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmHighPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchEVMHighPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, evmHighPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchEVMLowPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 evmLowPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchEVMLowPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, evmLowPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchEVMPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSlot[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchEVMPerSlotTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSlot, arraySize, actualArraySize);
}

int32 ModAccFetchEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 meanRMSEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, x0, dx, meanRMSEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 ModAccFetchEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsevmPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsevmPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanIQOriginOffset, float64* meanIQGainImbalance, float64* meanIQQuadratureError)
{
  return RFmxLTE_ModAccFetchIQImpairments(instrumentHandle, selectorString, timeout, meanIQOriginOffset, meanIQGainImbalance, meanIQQuadratureError);
}

int32 ModAccFetchIQImpairmentsArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanIQOriginOffset[], float64 meanIQGainImbalance[], float64 meanIQQuadratureError[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchIQImpairmentsArray(instrumentHandle, selectorString, timeout, meanIQOriginOffset, meanIQGainImbalance, meanIQQuadratureError, arraySize, actualArraySize);
}

int32 ModAccFetchInBandEmissionMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* inBandEmissionMargin)
{
  return RFmxLTE_ModAccFetchInBandEmissionMargin(instrumentHandle, selectorString, timeout, inBandEmissionMargin);
}

int32 ModAccFetchInBandEmissionMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 inBandEmissionMargin[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchInBandEmissionMarginArray(instrumentHandle, selectorString, timeout, inBandEmissionMargin, arraySize, actualArraySize);
}

int32 ModAccFetchInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 inBandEmission[], float32 inBandEmissionMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchInBandEmissionTrace(instrumentHandle, selectorString, timeout, x0, dx, inBandEmission, inBandEmissionMask, arraySize, actualArraySize);
}

int32 ModAccFetchMaximumEVMPerSlotTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSlot[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchMaximumEVMPerSlotTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumEVMPerSlot, arraySize, actualArraySize);
}

int32 ModAccFetchMaximumEVMPerSubcarrierTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSubcarrier[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchMaximumEVMPerSubcarrierTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumEVMPerSubcarrier, arraySize, actualArraySize);
}

int32 ModAccFetchMaximumEVMPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumEVMPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchMaximumEVMPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumEVMPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchMaximumMagnitudeErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchMaximumMagnitudeErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumMagnitudeErrorPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchMaximumPhaseErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 maximumPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchMaximumPhaseErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, maximumPhaseErrorPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchNPUSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize)
{
  return RFmxLTE_ModAccFetchNPUSCHConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, dataConstellationArraySize, dataConstellationActualArraySize, dmrsConstellation, dmrsConstellationArraySize, dmrsConstellationActualArraySize);
}

int32 ModAccFetchNPUSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDMRSEVM, float64* npuschMaximumPeakDMRSEVM)
{
  return RFmxLTE_ModAccFetchNPUSCHDMRSEVM(instrumentHandle, selectorString, timeout, npuschMeanRMSDMRSEVM, npuschMaximumPeakDMRSEVM);
}

int32 ModAccFetchNPUSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanRMSDataEVM, float64* npuschMaximumPeakDataEVM)
{
  return RFmxLTE_ModAccFetchNPUSCHDataEVM(instrumentHandle, selectorString, timeout, npuschMeanRMSDataEVM, npuschMaximumPeakDataEVM);
}

int32 ModAccFetchNPUSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* npuschMeanDataPower, float64* npuschMeanDMRSPower)
{
  return RFmxLTE_ModAccFetchNPUSCHSymbolPower(instrumentHandle, selectorString, timeout, npuschMeanDataPower, npuschMeanDMRSPower);
}

int32 ModAccFetchPDSCH1024QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam1024Constellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCH1024QAMConstellation(instrumentHandle, selectorString, timeout, qam1024Constellation, arraySize, actualArraySize);
}

int32 ModAccFetchPDSCH1024QAMEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMS1024QAMEVM)
{
  return RFmxLTE_ModAccFetchPDSCH1024QAMEVM(instrumentHandle, selectorString, timeout, meanRMS1024QAMEVM);
}

int32 ModAccFetchPDSCH1024QAMEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMS1024QAMEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCH1024QAMEVMArray(instrumentHandle, selectorString, timeout, meanRMS1024QAMEVM, arraySize, actualArraySize);
}

int32 ModAccFetchPDSCH16QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam16Constellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCH16QAMConstellation(instrumentHandle, selectorString, timeout, qam16Constellation, arraySize, actualArraySize);
}

int32 ModAccFetchPDSCH256QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam256Constellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCH256QAMConstellation(instrumentHandle, selectorString, timeout, qam256Constellation, arraySize, actualArraySize);
}

int32 ModAccFetchPDSCH64QAMConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qam64Constellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCH64QAMConstellation(instrumentHandle, selectorString, timeout, qam64Constellation, arraySize, actualArraySize);
}

int32 ModAccFetchPDSCHEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSEVM, float64* meanRMSQPSKEVM, float64* meanRMS16QAMEVM, float64* meanRMS64QAMEVM, float64* meanRMS256QAMEVM)
{
  return RFmxLTE_ModAccFetchPDSCHEVM(instrumentHandle, selectorString, timeout, meanRMSEVM, meanRMSQPSKEVM, meanRMS16QAMEVM, meanRMS64QAMEVM, meanRMS256QAMEVM);
}

int32 ModAccFetchPDSCHEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSEVM[], float64 meanRMSQPSKEVM[], float64 meanRMS16QAMEVM[], float64 meanRMS64QAMEVM[], float64 meanRMS256QAMEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCHEVMArray(instrumentHandle, selectorString, timeout, meanRMSEVM, meanRMSQPSKEVM, meanRMS16QAMEVM, meanRMS64QAMEVM, meanRMS256QAMEVM, arraySize, actualArraySize);
}

int32 ModAccFetchPDSCHQPSKConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle qpskConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPDSCHQPSKConstellation(instrumentHandle, selectorString, timeout, qpskConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchPSSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize)
{
  return RFmxLTE_ModAccFetchPSSCHConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, dataConstellationArraySize, dataConstellationActualArraySize, dmrsConstellation, dmrsConstellationArraySize, dmrsConstellationActualArraySize);
}

int32 ModAccFetchPSSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDMRSEVM, float64* psschMaximumPeakDMRSEVM)
{
  return RFmxLTE_ModAccFetchPSSCHDMRSEVM(instrumentHandle, selectorString, timeout, psschMeanRMSDMRSEVM, psschMaximumPeakDMRSEVM);
}

int32 ModAccFetchPSSCHDMRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDMRSEVM[], float64 psschMaximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPSSCHDMRSEVMArray(instrumentHandle, selectorString, timeout, psschMeanRMSDMRSEVM, psschMaximumPeakDMRSEVM, arraySize, actualArraySize);
}

int32 ModAccFetchPSSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanRMSDataEVM, float64* psschMaximumPeakDataEVM)
{
  return RFmxLTE_ModAccFetchPSSCHDataEVM(instrumentHandle, selectorString, timeout, psschMeanRMSDataEVM, psschMaximumPeakDataEVM);
}

int32 ModAccFetchPSSCHDataEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanRMSDataEVM[], float64 psschMaximumPeakDataEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPSSCHDataEVMArray(instrumentHandle, selectorString, timeout, psschMeanRMSDataEVM, psschMaximumPeakDataEVM, arraySize, actualArraySize);
}

int32 ModAccFetchPSSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* psschMeanDataPower, float64* psschMeanDMRSPower)
{
  return RFmxLTE_ModAccFetchPSSCHSymbolPower(instrumentHandle, selectorString, timeout, psschMeanDataPower, psschMeanDMRSPower);
}

int32 ModAccFetchPSSCHSymbolPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 psschMeanDataPower[], float64 psschMeanDMRSPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPSSCHSymbolPowerArray(instrumentHandle, selectorString, timeout, psschMeanDataPower, psschMeanDMRSPower, arraySize, actualArraySize);
}

int32 ModAccFetchPUSCHConstellationTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle dataConstellation[], int32 dataConstellationArraySize, int32* dataConstellationActualArraySize, NIComplexSingle dmrsConstellation[], int32 dmrsConstellationArraySize, int32* dmrsConstellationActualArraySize)
{
  return RFmxLTE_ModAccFetchPUSCHConstellationTrace(instrumentHandle, selectorString, timeout, dataConstellation, dataConstellationArraySize, dataConstellationActualArraySize, dmrsConstellation, dmrsConstellationArraySize, dmrsConstellationActualArraySize);
}

int32 ModAccFetchPUSCHDMRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDMRSEVM, float64* maximumPeakDMRSEVM)
{
  return RFmxLTE_ModAccFetchPUSCHDMRSEVM(instrumentHandle, selectorString, timeout, meanRMSDMRSEVM, maximumPeakDMRSEVM);
}

int32 ModAccFetchPUSCHDMRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDMRSEVM[], float64 maximumPeakDMRSEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPUSCHDMRSEVMArray(instrumentHandle, selectorString, timeout, meanRMSDMRSEVM, maximumPeakDMRSEVM, arraySize, actualArraySize);
}

int32 ModAccFetchPUSCHDataEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSDataEVM, float64* maximumPeakDataEVM)
{
  return RFmxLTE_ModAccFetchPUSCHDataEVM(instrumentHandle, selectorString, timeout, meanRMSDataEVM, maximumPeakDataEVM);
}

int32 ModAccFetchPUSCHDataEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSDataEVM[], float64 maximumPeakDataEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPUSCHDataEVMArray(instrumentHandle, selectorString, timeout, meanRMSDataEVM, maximumPeakDataEVM, arraySize, actualArraySize);
}

int32 ModAccFetchPUSCHDemodulatedBits(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int8 bits[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPUSCHDemodulatedBits(instrumentHandle, selectorString, timeout, bits, arraySize, actualArraySize);
}

int32 ModAccFetchPUSCHSymbolPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* puschMeanDataPower, float64* puschMeanDMRSPower)
{
  return RFmxLTE_ModAccFetchPUSCHSymbolPower(instrumentHandle, selectorString, timeout, puschMeanDataPower, puschMeanDMRSPower);
}

int32 ModAccFetchPUSCHSymbolPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 puschMeanDataPower[], float64 puschMeanDMRSPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchPUSCHSymbolPowerArray(instrumentHandle, selectorString, timeout, puschMeanDataPower, puschMeanDMRSPower, arraySize, actualArraySize);
}

int32 ModAccFetchRMSMagnitudeErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsMagnitudeErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchRMSMagnitudeErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsMagnitudeErrorPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchRMSPhaseErrorPerSymbolTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 rmsPhaseErrorPerSymbol[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchRMSPhaseErrorPerSymbolTrace(instrumentHandle, selectorString, timeout, x0, dx, rmsPhaseErrorPerSymbol, arraySize, actualArraySize);
}

int32 ModAccFetchSRSConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle srsConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSRSConstellation(instrumentHandle, selectorString, timeout, srsConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchSRSEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSSRSEVM, float64* meanSRSPower)
{
  return RFmxLTE_ModAccFetchSRSEVM(instrumentHandle, selectorString, timeout, meanRMSSRSEVM, meanSRSPower);
}

int32 ModAccFetchSRSEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSSRSEVM[], float64 meanSRSPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSRSEVMArray(instrumentHandle, selectorString, timeout, meanRMSSRSEVM, meanSRSPower, arraySize, actualArraySize);
}

int32 ModAccFetchSpectralFlatness(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* range1MaximumToRange1Minimum, float64* range2MaximumToRange2Minimum, float64* range1MaximumToRange2Minimum, float64* range2MaximumToRange1Minimum)
{
  return RFmxLTE_ModAccFetchSpectralFlatness(instrumentHandle, selectorString, timeout, range1MaximumToRange1Minimum, range2MaximumToRange2Minimum, range1MaximumToRange2Minimum, range2MaximumToRange1Minimum);
}

int32 ModAccFetchSpectralFlatnessArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 range1MaximumToRange1Minimum[], float64 range2MaximumToRange2Minimum[], float64 range1MaximumToRange2Minimum[], float64 range2MaximumToRange1Minimum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSpectralFlatnessArray(instrumentHandle, selectorString, timeout, range1MaximumToRange1Minimum, range2MaximumToRange2Minimum, range1MaximumToRange2Minimum, range2MaximumToRange1Minimum, arraySize, actualArraySize);
}

int32 ModAccFetchSpectralFlatnessTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectralFlatness[], float32 spectralFlatnessLowerMask[], float32 spectralFlatnessUpperMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSpectralFlatnessTrace(instrumentHandle, selectorString, timeout, x0, dx, spectralFlatness, spectralFlatnessLowerMask, spectralFlatnessUpperMask, arraySize, actualArraySize);
}

int32 ModAccFetchSubblockIQImpairments(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockMeanIQOriginOffset, float64* subblockMeanIQGainImbalance, float64* subblockMeanIQQuadratureError)
{
  return RFmxLTE_ModAccFetchSubblockIQImpairments(instrumentHandle, selectorString, timeout, subblockMeanIQOriginOffset, subblockMeanIQGainImbalance, subblockMeanIQQuadratureError);
}

int32 ModAccFetchSubblockInBandEmissionMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockInBandEmissionMargin)
{
  return RFmxLTE_ModAccFetchSubblockInBandEmissionMargin(instrumentHandle, selectorString, timeout, subblockInBandEmissionMargin);
}

int32 ModAccFetchSubblockInBandEmissionTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subblockInBandEmission[], float64 subblockInBandEmissionMask[], float64 subblockInBandEmissionRBIndices[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSubblockInBandEmissionTrace(instrumentHandle, selectorString, timeout, subblockInBandEmission, subblockInBandEmissionMask, subblockInBandEmissionRBIndices, arraySize, actualArraySize);
}

int32 ModAccFetchSynchronizationSignalConstellation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, NIComplexSingle sssConstellation[], NIComplexSingle pssConstellation[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSynchronizationSignalConstellation(instrumentHandle, selectorString, timeout, sssConstellation, pssConstellation, arraySize, actualArraySize);
}

int32 ModAccFetchSynchronizationSignalEVM(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* meanRMSPSSEVM, float64* meanRMSSSSEVM)
{
  return RFmxLTE_ModAccFetchSynchronizationSignalEVM(instrumentHandle, selectorString, timeout, meanRMSPSSEVM, meanRMSSSSEVM);
}

int32 ModAccFetchSynchronizationSignalEVMArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 meanRMSPSSEVM[], float64 meanRMSSSSEVM[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_ModAccFetchSynchronizationSignalEVMArray(instrumentHandle, selectorString, timeout, meanRMSPSSEVM, meanRMSSSSEVM, arraySize, actualArraySize);
}

int32 OBWCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxLTE_OBWCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 OBWCfgRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 rbwAuto, float64 rbw, int32 rbwFilterType)
{
  return RFmxLTE_OBWCfgRBWFilter(instrumentHandle, selectorString, rbwAuto, rbw, rbwFilterType);
}

int32 OBWCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxLTE_OBWCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 OBWFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* occupiedBandwidth, float64* absolutePower, float64* startFrequency, float64* stopFrequency)
{
  return RFmxLTE_OBWFetchMeasurement(instrumentHandle, selectorString, timeout, occupiedBandwidth, absolutePower, startFrequency, stopFrequency);
}

int32 OBWFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_OBWFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, arraySize, actualArraySize);
}

int32 PVTCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxLTE_PVTCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 PVTCfgMeasurementMethod(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementMethod)
{
  return RFmxLTE_PVTCfgMeasurementMethod(instrumentHandle, selectorString, measurementMethod);
}

int32 PVTCfgOFFPowerExclusionPeriods(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offPowerExclusionBefore, float64 offPowerExclusionAfter)
{
  return RFmxLTE_PVTCfgOFFPowerExclusionPeriods(instrumentHandle, selectorString, offPowerExclusionBefore, offPowerExclusionAfter);
}

int32 PVTFetchMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* meanAbsoluteOFFPowerBefore, float64* meanAbsoluteOFFPowerAfter, float64* meanAbsoluteONPower, float64* burstWidth)
{
  return RFmxLTE_PVTFetchMeasurement(instrumentHandle, selectorString, timeout, measurementStatus, meanAbsoluteOFFPowerBefore, meanAbsoluteOFFPowerAfter, meanAbsoluteONPower, burstWidth);
}

int32 PVTFetchMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 meanAbsoluteOFFPowerBefore[], float64 meanAbsoluteOFFPowerAfter[], float64 meanAbsoluteONPower[], float64 burstWidth[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_PVTFetchMeasurementArray(instrumentHandle, selectorString, timeout, measurementStatus, meanAbsoluteOFFPowerBefore, meanAbsoluteOFFPowerAfter, meanAbsoluteONPower, burstWidth, arraySize, actualArraySize);
}

int32 PVTFetchSignalPowerTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 signalPower[], float32 absoluteLimit[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_PVTFetchSignalPowerTrace(instrumentHandle, selectorString, timeout, x0, dx, signalPower, absoluteLimit, arraySize, actualArraySize);
}

int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID)
{
  return RFmxLTE_ResetAttribute(instrumentHandle, selectorString, attributeID);
}

int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[])
{
  return RFmxLTE_ResetToDefault(instrumentHandle, selectorString);
}

int32 SEMCfgAveraging(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 averagingEnabled, int32 averagingCount, int32 averagingType)
{
  return RFmxLTE_SEMCfgAveraging(instrumentHandle, selectorString, averagingEnabled, averagingCount, averagingType);
}

int32 SEMCfgComponentCarrierMaximumOutputPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower)
{
  return RFmxLTE_SEMCfgComponentCarrierMaximumOutputPower(instrumentHandle, selectorString, componentCarrierMaximumOutputPower);
}

int32 SEMCfgComponentCarrierMaximumOutputPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 componentCarrierMaximumOutputPower[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgComponentCarrierMaximumOutputPowerArray(instrumentHandle, selectorString, componentCarrierMaximumOutputPower, numberOfElements);
}

int32 SEMCfgDownlinkMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 downlinkMaskType, float64 deltaFMaximum, float64 aggregatedMaximumPower)
{
  return RFmxLTE_SEMCfgDownlinkMask(instrumentHandle, selectorString, downlinkMaskType, deltaFMaximum, aggregatedMaximumPower);
}

int32 SEMCfgNumberOfOffsets(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 numberOfOffsets)
{
  return RFmxLTE_SEMCfgNumberOfOffsets(instrumentHandle, selectorString, numberOfOffsets);
}

int32 SEMCfgOffsetAbsoluteLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart, float64 offsetAbsoluteLimitStop)
{
  return RFmxLTE_SEMCfgOffsetAbsoluteLimit(instrumentHandle, selectorString, offsetAbsoluteLimitStart, offsetAbsoluteLimitStop);
}

int32 SEMCfgOffsetAbsoluteLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetAbsoluteLimitStart[], float64 offsetAbsoluteLimitStop[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgOffsetAbsoluteLimitArray(instrumentHandle, selectorString, offsetAbsoluteLimitStart, offsetAbsoluteLimitStop, numberOfElements);
}

int32 SEMCfgOffsetBandwidthIntegral(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral)
{
  return RFmxLTE_SEMCfgOffsetBandwidthIntegral(instrumentHandle, selectorString, offsetBandwidthIntegral);
}

int32 SEMCfgOffsetBandwidthIntegralArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 offsetBandwidthIntegral[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgOffsetBandwidthIntegralArray(instrumentHandle, selectorString, offsetBandwidthIntegral, numberOfElements);
}

int32 SEMCfgOffsetFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency, float64 offsetStopFrequency, int32 offsetSideband)
{
  return RFmxLTE_SEMCfgOffsetFrequency(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband);
}

int32 SEMCfgOffsetFrequencyArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetStartFrequency[], float64 offsetStopFrequency[], int32 offsetSideband[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgOffsetFrequencyArray(instrumentHandle, selectorString, offsetStartFrequency, offsetStopFrequency, offsetSideband, numberOfElements);
}

int32 SEMCfgOffsetLimitFailMask(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask)
{
  return RFmxLTE_SEMCfgOffsetLimitFailMask(instrumentHandle, selectorString, limitFailMask);
}

int32 SEMCfgOffsetLimitFailMaskArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 limitFailMask[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgOffsetLimitFailMaskArray(instrumentHandle, selectorString, limitFailMask, numberOfElements);
}

int32 SEMCfgOffsetRBWFilter(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW, int32 offsetRBWFilterType)
{
  return RFmxLTE_SEMCfgOffsetRBWFilter(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType);
}

int32 SEMCfgOffsetRBWFilterArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 offsetRBW[], int32 offsetRBWFilterType[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgOffsetRBWFilterArray(instrumentHandle, selectorString, offsetRBW, offsetRBWFilterType, numberOfElements);
}

int32 SEMCfgOffsetRelativeLimit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart, float64 relativeLimitStop)
{
  return RFmxLTE_SEMCfgOffsetRelativeLimit(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop);
}

int32 SEMCfgOffsetRelativeLimitArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 relativeLimitStart[], float64 relativeLimitStop[], int32 numberOfElements)
{
  return RFmxLTE_SEMCfgOffsetRelativeLimitArray(instrumentHandle, selectorString, relativeLimitStart, relativeLimitStop, numberOfElements);
}

int32 SEMCfgSweepTime(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 sweepTimeAuto, float64 sweepTimeInterval)
{
  return RFmxLTE_SEMCfgSweepTime(instrumentHandle, selectorString, sweepTimeAuto, sweepTimeInterval);
}

int32 SEMCfgUplinkMaskType(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 uplinkMaskType)
{
  return RFmxLTE_SEMCfgUplinkMaskType(instrumentHandle, selectorString, uplinkMaskType);
}

int32 SEMFetchComponentCarrierMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower)
{
  return RFmxLTE_SEMFetchComponentCarrierMeasurement(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower);
}

int32 SEMFetchComponentCarrierMeasurementArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SEMFetchComponentCarrierMeasurementArray(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, arraySize, actualArraySize);
}

int32 SEMFetchLowerOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  return RFmxLTE_SEMFetchLowerOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 SEMFetchLowerOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SEMFetchLowerOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchLowerOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower)
{
  return RFmxLTE_SEMFetchLowerOffsetPower(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower);
}

int32 SEMFetchLowerOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SEMFetchLowerOffsetPowerArray(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower, arraySize, actualArraySize);
}

int32 SEMFetchMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus)
{
  return RFmxLTE_SEMFetchMeasurementStatus(instrumentHandle, selectorString, timeout, measurementStatus);
}

int32 SEMFetchSpectrum(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 spectrum[], float32 compositeMask[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SEMFetchSpectrum(instrumentHandle, selectorString, timeout, x0, dx, spectrum, compositeMask, arraySize, actualArraySize);
}

int32 SEMFetchSubblockMeasurement(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* subblockPower, float64* integrationBandwidth, float64* frequency)
{
  return RFmxLTE_SEMFetchSubblockMeasurement(instrumentHandle, selectorString, timeout, subblockPower, integrationBandwidth, frequency);
}

int32 SEMFetchTotalAggregatedPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* totalAggregatedPower)
{
  return RFmxLTE_SEMFetchTotalAggregatedPower(instrumentHandle, selectorString, timeout, totalAggregatedPower);
}

int32 SEMFetchUpperOffsetMargin(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32* measurementStatus, float64* margin, float64* marginFrequency, float64* marginAbsolutePower, float64* marginRelativePower)
{
  return RFmxLTE_SEMFetchUpperOffsetMargin(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower);
}

int32 SEMFetchUpperOffsetMarginArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 measurementStatus[], float64 margin[], float64 marginFrequency[], float64 marginAbsolutePower[], float64 marginRelativePower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SEMFetchUpperOffsetMarginArray(instrumentHandle, selectorString, timeout, measurementStatus, margin, marginFrequency, marginAbsolutePower, marginRelativePower, arraySize, actualArraySize);
}

int32 SEMFetchUpperOffsetPower(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* absoluteIntegratedPower, float64* relativeIntegratedPower, float64* absolutePeakPower, float64* peakFrequency, float64* relativePeakPower)
{
  return RFmxLTE_SEMFetchUpperOffsetPower(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower);
}

int32 SEMFetchUpperOffsetPowerArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 absoluteIntegratedPower[], float64 relativeIntegratedPower[], float64 absolutePeakPower[], float64 peakFrequency[], float64 relativePeakPower[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SEMFetchUpperOffsetPowerArray(instrumentHandle, selectorString, timeout, absoluteIntegratedPower, relativeIntegratedPower, absolutePeakPower, peakFrequency, relativePeakPower, arraySize, actualArraySize);
}

int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces)
{
  return RFmxLTE_SelectMeasurements(instrumentHandle, selectorString, measurements, enableAllTraces);
}

int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle)
{
  return RFmxLTE_SendSoftwareEdgeTrigger(instrumentHandle);
}

int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal)
{
  return RFmxLTE_SetAttributeF32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeF32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal)
{
  return RFmxLTE_SetAttributeF64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeF64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal)
{
  return RFmxLTE_SetAttributeI16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal)
{
  return RFmxLTE_SetAttributeI32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeI32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal)
{
  return RFmxLTE_SetAttributeI64(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeI64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal)
{
  return RFmxLTE_SetAttributeI8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeI8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeNIComplexDoubleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeNIComplexSingleArray(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[])
{
  return RFmxLTE_SetAttributeString(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal)
{
  return RFmxLTE_SetAttributeU16(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal)
{
  return RFmxLTE_SetAttributeU32(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeU32Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeU64Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal)
{
  return RFmxLTE_SetAttributeU8(instrumentHandle, selectorString, attributeID, attrVal);
}

int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize)
{
  return RFmxLTE_SetAttributeU8Array(instrumentHandle, selectorString, attributeID, attrVal, arraySize);
}

int32 SlotPhaseCfgSynchronizationModeAndInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 synchronizationMode, int32 measurementOffset, int32 measurementLength)
{
  return RFmxLTE_SlotPhaseCfgSynchronizationModeAndInterval(instrumentHandle, selectorString, synchronizationMode, measurementOffset, measurementLength);
}

int32 SlotPhaseFetchMaximumPhaseDiscontinuity(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* maximumPhaseDiscontinuity)
{
  return RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuity(instrumentHandle, selectorString, timeout, maximumPhaseDiscontinuity);
}

int32 SlotPhaseFetchMaximumPhaseDiscontinuityArray(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 maximumPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SlotPhaseFetchMaximumPhaseDiscontinuityArray(instrumentHandle, selectorString, timeout, maximumPhaseDiscontinuity, arraySize, actualArraySize);
}

int32 SlotPhaseFetchPhaseDiscontinuities(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 slotPhaseDiscontinuity[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SlotPhaseFetchPhaseDiscontinuities(instrumentHandle, selectorString, timeout, slotPhaseDiscontinuity, arraySize, actualArraySize);
}

int32 SlotPhaseFetchSamplePhaseError(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseError[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SlotPhaseFetchSamplePhaseError(instrumentHandle, selectorString, timeout, x0, dx, samplePhaseError, arraySize, actualArraySize);
}

int32 SlotPhaseFetchSamplePhaseErrorLinearFitTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 samplePhaseErrorLinearFit[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SlotPhaseFetchSamplePhaseErrorLinearFitTrace(instrumentHandle, selectorString, timeout, x0, dx, samplePhaseErrorLinearFit, arraySize, actualArraySize);
}

int32 SlotPowerCfgMeasurementInterval(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 measurementOffset, int32 measurementLength)
{
  return RFmxLTE_SlotPowerCfgMeasurementInterval(instrumentHandle, selectorString, measurementOffset, measurementLength);
}

int32 SlotPowerFetchPowers(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64 subframePower[], float64 subframePowerDelta[], int32 arraySize, int32* actualArraySize)
{
  return RFmxLTE_SlotPowerFetchPowers(instrumentHandle, selectorString, timeout, subframePower, subframePowerDelta, arraySize, actualArraySize);
}

int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout)
{
  return RFmxLTE_WaitForAcquisitionComplete(instrumentHandle, timeout);
}

int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout)
{
  return RFmxLTE_WaitForMeasurementComplete(instrumentHandle, selectorString, timeout);
}

}  // namespace nirfmxlte_grpc
