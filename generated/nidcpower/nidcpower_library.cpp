//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-DCPower Metadata
//---------------------------------------------------------------------
#include "nidcpower_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nidcpower_64.dll";
#else
static const char* kLibraryName = "libnidcpower.so";
#endif

namespace nidcpower_grpc {

NiDCPowerLibrary::NiDCPowerLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AbortWithChannels = reinterpret_cast<AbortWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_AbortWithChannels"));
  function_pointers_.CommitWithChannels = reinterpret_cast<CommitWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_CommitWithChannels"));
  function_pointers_.ConfigureDigitalEdgeMeasureTriggerWithChannels = reinterpret_cast<ConfigureDigitalEdgeMeasureTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeMeasureTriggerWithChannels"));
  function_pointers_.ConfigureDigitalEdgePulseTriggerWithChannels = reinterpret_cast<ConfigureDigitalEdgePulseTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgePulseTriggerWithChannels"));
  function_pointers_.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels = reinterpret_cast<ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels"));
  function_pointers_.ConfigureDigitalEdgeShutdownTriggerWithChannels = reinterpret_cast<ConfigureDigitalEdgeShutdownTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeShutdownTriggerWithChannels"));
  function_pointers_.ConfigureDigitalEdgeSourceTriggerWithChannels = reinterpret_cast<ConfigureDigitalEdgeSourceTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeSourceTriggerWithChannels"));
  function_pointers_.ConfigureDigitalEdgeStartTriggerWithChannels = reinterpret_cast<ConfigureDigitalEdgeStartTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeStartTriggerWithChannels"));
  function_pointers_.ConfigureOvp = reinterpret_cast<ConfigureOvpPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureOVP"));
  function_pointers_.ConfigureSoftwareEdgeMeasureTriggerWithChannels = reinterpret_cast<ConfigureSoftwareEdgeMeasureTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeMeasureTriggerWithChannels"));
  function_pointers_.ConfigureSoftwareEdgePulseTriggerWithChannels = reinterpret_cast<ConfigureSoftwareEdgePulseTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgePulseTriggerWithChannels"));
  function_pointers_.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels = reinterpret_cast<ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels"));
  function_pointers_.ConfigureSoftwareEdgeShutdownTriggerWithChannels = reinterpret_cast<ConfigureSoftwareEdgeShutdownTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeShutdownTriggerWithChannels"));
  function_pointers_.ConfigureSoftwareEdgeSourceTriggerWithChannels = reinterpret_cast<ConfigureSoftwareEdgeSourceTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeSourceTriggerWithChannels"));
  function_pointers_.ConfigureSoftwareEdgeStartTriggerWithChannels = reinterpret_cast<ConfigureSoftwareEdgeStartTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeStartTriggerWithChannels"));
  function_pointers_.ConfigureSourceModeWithChannels = reinterpret_cast<ConfigureSourceModeWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSourceModeWithChannels"));
  function_pointers_.CreateAdvancedSequenceCommitStepWithChannels = reinterpret_cast<CreateAdvancedSequenceCommitStepWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_CreateAdvancedSequenceCommitStepWithChannels"));
  function_pointers_.CreateAdvancedSequenceStepWithChannels = reinterpret_cast<CreateAdvancedSequenceStepWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_CreateAdvancedSequenceStepWithChannels"));
  function_pointers_.CreateAdvancedSequenceWithChannels = reinterpret_cast<CreateAdvancedSequenceWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_CreateAdvancedSequenceWithChannels"));
  function_pointers_.CreateAdvancedSequence = reinterpret_cast<CreateAdvancedSequencePtr>(shared_library_.get_function_pointer("niDCPower_CreateAdvancedSequence"));
  function_pointers_.DeleteAdvancedSequenceWithChannels = reinterpret_cast<DeleteAdvancedSequenceWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_DeleteAdvancedSequenceWithChannels"));
  function_pointers_.DisablePulseTriggerWithChannels = reinterpret_cast<DisablePulseTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_DisablePulseTriggerWithChannels"));
  function_pointers_.DisableSequenceAdvanceTriggerWithChannels = reinterpret_cast<DisableSequenceAdvanceTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_DisableSequenceAdvanceTriggerWithChannels"));
  function_pointers_.DisableShutdownTriggerWithChannels = reinterpret_cast<DisableShutdownTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_DisableShutdownTriggerWithChannels"));
  function_pointers_.DisableSourceTriggerWithChannels = reinterpret_cast<DisableSourceTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_DisableSourceTriggerWithChannels"));
  function_pointers_.DisableStartTriggerWithChannels = reinterpret_cast<DisableStartTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_DisableStartTriggerWithChannels"));
  function_pointers_.ErrorQuery = reinterpret_cast<ErrorQueryPtr>(shared_library_.get_function_pointer("niDCPower_error_query"));
  function_pointers_.ExportSignalWithChannels = reinterpret_cast<ExportSignalWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ExportSignalWithChannels"));
  function_pointers_.InitializeWithIndependentChannels = reinterpret_cast<InitializeWithIndependentChannelsPtr>(shared_library_.get_function_pointer("niDCPower_InitializeWithIndependentChannels"));
  function_pointers_.InitiateWithChannels = reinterpret_cast<InitiateWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_InitiateWithChannels"));
  function_pointers_.InvalidateAllAttributes = reinterpret_cast<InvalidateAllAttributesPtr>(shared_library_.get_function_pointer("niDCPower_InvalidateAllAttributes"));
  function_pointers_.ResetWithChannels = reinterpret_cast<ResetWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_ResetWithChannels"));
  function_pointers_.SendSoftwareEdgeTriggerWithChannels = reinterpret_cast<SendSoftwareEdgeTriggerWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_SendSoftwareEdgeTriggerWithChannels"));
  function_pointers_.WaitForEventWithChannels = reinterpret_cast<WaitForEventWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_WaitForEventWithChannels"));
  function_pointers_.Abort = reinterpret_cast<AbortPtr>(shared_library_.get_function_pointer("niDCPower_Abort"));
  function_pointers_.CalSelfCalibrate = reinterpret_cast<CalSelfCalibratePtr>(shared_library_.get_function_pointer("niDCPower_CalSelfCalibrate"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niDCPower_ClearError"));
  function_pointers_.ClearInterchangeWarnings = reinterpret_cast<ClearInterchangeWarningsPtr>(shared_library_.get_function_pointer("niDCPower_ClearInterchangeWarnings"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niDCPower_close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niDCPower_Commit"));
  function_pointers_.ConfigureApertureTime = reinterpret_cast<ConfigureApertureTimePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureApertureTime"));
  function_pointers_.ConfigureAutoZero = reinterpret_cast<ConfigureAutoZeroPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureAutoZero"));
  function_pointers_.ConfigureCurrentLevel = reinterpret_cast<ConfigureCurrentLevelPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureCurrentLevel"));
  function_pointers_.ConfigureCurrentLevelRange = reinterpret_cast<ConfigureCurrentLevelRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureCurrentLevelRange"));
  function_pointers_.ConfigureCurrentLimit = reinterpret_cast<ConfigureCurrentLimitPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureCurrentLimit"));
  function_pointers_.ConfigureCurrentLimitRange = reinterpret_cast<ConfigureCurrentLimitRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureCurrentLimitRange"));
  function_pointers_.ConfigureDigitalEdgeMeasureTrigger = reinterpret_cast<ConfigureDigitalEdgeMeasureTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeMeasureTrigger"));
  function_pointers_.ConfigureDigitalEdgePulseTrigger = reinterpret_cast<ConfigureDigitalEdgePulseTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgePulseTrigger"));
  function_pointers_.ConfigureDigitalEdgeSequenceAdvanceTrigger = reinterpret_cast<ConfigureDigitalEdgeSequenceAdvanceTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger"));
  function_pointers_.ConfigureDigitalEdgeSourceTrigger = reinterpret_cast<ConfigureDigitalEdgeSourceTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeSourceTrigger"));
  function_pointers_.ConfigureDigitalEdgeStartTrigger = reinterpret_cast<ConfigureDigitalEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureDigitalEdgeStartTrigger"));
  function_pointers_.ConfigureOutputEnabled = reinterpret_cast<ConfigureOutputEnabledPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureOutputEnabled"));
  function_pointers_.ConfigureOutputFunction = reinterpret_cast<ConfigureOutputFunctionPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureOutputFunction"));
  function_pointers_.ConfigureOutputResistance = reinterpret_cast<ConfigureOutputResistancePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureOutputResistance"));
  function_pointers_.ConfigurePowerLineFrequency = reinterpret_cast<ConfigurePowerLineFrequencyPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePowerLineFrequency"));
  function_pointers_.ConfigurePulseBiasCurrentLevel = reinterpret_cast<ConfigurePulseBiasCurrentLevelPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseBiasCurrentLevel"));
  function_pointers_.ConfigurePulseBiasCurrentLimit = reinterpret_cast<ConfigurePulseBiasCurrentLimitPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseBiasCurrentLimit"));
  function_pointers_.ConfigurePulseBiasVoltageLevel = reinterpret_cast<ConfigurePulseBiasVoltageLevelPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseBiasVoltageLevel"));
  function_pointers_.ConfigurePulseBiasVoltageLimit = reinterpret_cast<ConfigurePulseBiasVoltageLimitPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseBiasVoltageLimit"));
  function_pointers_.ConfigurePulseCurrentLevel = reinterpret_cast<ConfigurePulseCurrentLevelPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseCurrentLevel"));
  function_pointers_.ConfigurePulseCurrentLevelRange = reinterpret_cast<ConfigurePulseCurrentLevelRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseCurrentLevelRange"));
  function_pointers_.ConfigurePulseCurrentLimit = reinterpret_cast<ConfigurePulseCurrentLimitPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseCurrentLimit"));
  function_pointers_.ConfigurePulseCurrentLimitRange = reinterpret_cast<ConfigurePulseCurrentLimitRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseCurrentLimitRange"));
  function_pointers_.ConfigurePulseVoltageLevel = reinterpret_cast<ConfigurePulseVoltageLevelPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseVoltageLevel"));
  function_pointers_.ConfigurePulseVoltageLevelRange = reinterpret_cast<ConfigurePulseVoltageLevelRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseVoltageLevelRange"));
  function_pointers_.ConfigurePulseVoltageLimit = reinterpret_cast<ConfigurePulseVoltageLimitPtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseVoltageLimit"));
  function_pointers_.ConfigurePulseVoltageLimitRange = reinterpret_cast<ConfigurePulseVoltageLimitRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigurePulseVoltageLimitRange"));
  function_pointers_.ConfigureSense = reinterpret_cast<ConfigureSensePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSense"));
  function_pointers_.ConfigureSoftwareEdgeMeasureTrigger = reinterpret_cast<ConfigureSoftwareEdgeMeasureTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeMeasureTrigger"));
  function_pointers_.ConfigureSoftwareEdgePulseTrigger = reinterpret_cast<ConfigureSoftwareEdgePulseTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgePulseTrigger"));
  function_pointers_.ConfigureSoftwareEdgeSequenceAdvanceTrigger = reinterpret_cast<ConfigureSoftwareEdgeSequenceAdvanceTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger"));
  function_pointers_.ConfigureSoftwareEdgeSourceTrigger = reinterpret_cast<ConfigureSoftwareEdgeSourceTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeSourceTrigger"));
  function_pointers_.ConfigureSoftwareEdgeStartTrigger = reinterpret_cast<ConfigureSoftwareEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSoftwareEdgeStartTrigger"));
  function_pointers_.ConfigureSourceMode = reinterpret_cast<ConfigureSourceModePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureSourceMode"));
  function_pointers_.ConfigureVoltageLevel = reinterpret_cast<ConfigureVoltageLevelPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureVoltageLevel"));
  function_pointers_.ConfigureVoltageLevelRange = reinterpret_cast<ConfigureVoltageLevelRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureVoltageLevelRange"));
  function_pointers_.ConfigureVoltageLimit = reinterpret_cast<ConfigureVoltageLimitPtr>(shared_library_.get_function_pointer("niDCPower_ConfigureVoltageLimit"));
  function_pointers_.ConfigureVoltageLimitRange = reinterpret_cast<ConfigureVoltageLimitRangePtr>(shared_library_.get_function_pointer("niDCPower_ConfigureVoltageLimitRange"));
  function_pointers_.CreateAdvancedSequenceStep = reinterpret_cast<CreateAdvancedSequenceStepPtr>(shared_library_.get_function_pointer("niDCPower_CreateAdvancedSequenceStep"));
  function_pointers_.DeleteAdvancedSequence = reinterpret_cast<DeleteAdvancedSequencePtr>(shared_library_.get_function_pointer("niDCPower_DeleteAdvancedSequence"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niDCPower_Disable"));
  function_pointers_.DisablePulseTrigger = reinterpret_cast<DisablePulseTriggerPtr>(shared_library_.get_function_pointer("niDCPower_DisablePulseTrigger"));
  function_pointers_.DisableSequenceAdvanceTrigger = reinterpret_cast<DisableSequenceAdvanceTriggerPtr>(shared_library_.get_function_pointer("niDCPower_DisableSequenceAdvanceTrigger"));
  function_pointers_.DisableSourceTrigger = reinterpret_cast<DisableSourceTriggerPtr>(shared_library_.get_function_pointer("niDCPower_DisableSourceTrigger"));
  function_pointers_.DisableStartTrigger = reinterpret_cast<DisableStartTriggerPtr>(shared_library_.get_function_pointer("niDCPower_DisableStartTrigger"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_.get_function_pointer("niDCPower_error_message"));
  function_pointers_.ExportAttributeConfigurationBuffer = reinterpret_cast<ExportAttributeConfigurationBufferPtr>(shared_library_.get_function_pointer("niDCPower_ExportAttributeConfigurationBuffer"));
  function_pointers_.ExportAttributeConfigurationFile = reinterpret_cast<ExportAttributeConfigurationFilePtr>(shared_library_.get_function_pointer("niDCPower_ExportAttributeConfigurationFile"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_.get_function_pointer("niDCPower_ExportSignal"));
  function_pointers_.FetchMultiple = reinterpret_cast<FetchMultiplePtr>(shared_library_.get_function_pointer("niDCPower_FetchMultiple"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDCPower_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDCPower_GetAttributeViInt32"));
  function_pointers_.GetAttributeViInt64 = reinterpret_cast<GetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niDCPower_GetAttributeViInt64"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDCPower_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niDCPower_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niDCPower_GetAttributeViString"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niDCPower_GetChannelName"));
  function_pointers_.GetChannelNameFromString = reinterpret_cast<GetChannelNameFromStringPtr>(shared_library_.get_function_pointer("niDCPower_GetChannelNameFromString"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niDCPower_GetError"));
  function_pointers_.GetExtCalLastDateAndTime = reinterpret_cast<GetExtCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niDCPower_GetExtCalLastDateAndTime"));
  function_pointers_.GetExtCalLastTemp = reinterpret_cast<GetExtCalLastTempPtr>(shared_library_.get_function_pointer("niDCPower_GetExtCalLastTemp"));
  function_pointers_.GetExtCalRecommendedInterval = reinterpret_cast<GetExtCalRecommendedIntervalPtr>(shared_library_.get_function_pointer("niDCPower_GetExtCalRecommendedInterval"));
  function_pointers_.GetNextCoercionRecord = reinterpret_cast<GetNextCoercionRecordPtr>(shared_library_.get_function_pointer("niDCPower_GetNextCoercionRecord"));
  function_pointers_.GetNextInterchangeWarning = reinterpret_cast<GetNextInterchangeWarningPtr>(shared_library_.get_function_pointer("niDCPower_GetNextInterchangeWarning"));
  function_pointers_.GetSelfCalLastDateAndTime = reinterpret_cast<GetSelfCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niDCPower_GetSelfCalLastDateAndTime"));
  function_pointers_.GetSelfCalLastTemp = reinterpret_cast<GetSelfCalLastTempPtr>(shared_library_.get_function_pointer("niDCPower_GetSelfCalLastTemp"));
  function_pointers_.ImportAttributeConfigurationBuffer = reinterpret_cast<ImportAttributeConfigurationBufferPtr>(shared_library_.get_function_pointer("niDCPower_ImportAttributeConfigurationBuffer"));
  function_pointers_.ImportAttributeConfigurationFile = reinterpret_cast<ImportAttributeConfigurationFilePtr>(shared_library_.get_function_pointer("niDCPower_ImportAttributeConfigurationFile"));
  function_pointers_.InitializeWithChannels = reinterpret_cast<InitializeWithChannelsPtr>(shared_library_.get_function_pointer("niDCPower_InitializeWithChannels"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("niDCPower_Initiate"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niDCPower_LockSession"));
  function_pointers_.Measure = reinterpret_cast<MeasurePtr>(shared_library_.get_function_pointer("niDCPower_Measure"));
  function_pointers_.MeasureMultiple = reinterpret_cast<MeasureMultiplePtr>(shared_library_.get_function_pointer("niDCPower_MeasureMultiple"));
  function_pointers_.ParseChannelCount = reinterpret_cast<ParseChannelCountPtr>(shared_library_.get_function_pointer("niDCPower_ParseChannelCount"));
  function_pointers_.QueryInCompliance = reinterpret_cast<QueryInCompliancePtr>(shared_library_.get_function_pointer("niDCPower_QueryInCompliance"));
  function_pointers_.QueryMaxCurrentLimit = reinterpret_cast<QueryMaxCurrentLimitPtr>(shared_library_.get_function_pointer("niDCPower_QueryMaxCurrentLimit"));
  function_pointers_.QueryMaxVoltageLevel = reinterpret_cast<QueryMaxVoltageLevelPtr>(shared_library_.get_function_pointer("niDCPower_QueryMaxVoltageLevel"));
  function_pointers_.QueryMinCurrentLimit = reinterpret_cast<QueryMinCurrentLimitPtr>(shared_library_.get_function_pointer("niDCPower_QueryMinCurrentLimit"));
  function_pointers_.QueryOutputState = reinterpret_cast<QueryOutputStatePtr>(shared_library_.get_function_pointer("niDCPower_QueryOutputState"));
  function_pointers_.ReadCurrentTemperature = reinterpret_cast<ReadCurrentTemperaturePtr>(shared_library_.get_function_pointer("niDCPower_ReadCurrentTemperature"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niDCPower_reset"));
  function_pointers_.ResetDevice = reinterpret_cast<ResetDevicePtr>(shared_library_.get_function_pointer("niDCPower_ResetDevice"));
  function_pointers_.ResetInterchangeCheck = reinterpret_cast<ResetInterchangeCheckPtr>(shared_library_.get_function_pointer("niDCPower_ResetInterchangeCheck"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niDCPower_ResetWithDefaults"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niDCPower_revision_query"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niDCPower_self_test"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("niDCPower_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niDCPower_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niDCPower_SetAttributeViInt32"));
  function_pointers_.SetAttributeViInt64 = reinterpret_cast<SetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niDCPower_SetAttributeViInt64"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niDCPower_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niDCPower_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niDCPower_SetAttributeViString"));
  function_pointers_.SetSequence = reinterpret_cast<SetSequencePtr>(shared_library_.get_function_pointer("niDCPower_SetSequence"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niDCPower_UnlockSession"));
  function_pointers_.WaitForEvent = reinterpret_cast<WaitForEventPtr>(shared_library_.get_function_pointer("niDCPower_WaitForEvent"));
}

NiDCPowerLibrary::~NiDCPowerLibrary()
{
}

::grpc::Status NiDCPowerLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiDCPowerLibrary::AbortWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.AbortWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_AbortWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_AbortWithChannels(vi, channelName);
#else
  return function_pointers_.AbortWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::CommitWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.CommitWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CommitWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_CommitWithChannels(vi, channelName);
#else
  return function_pointers_.CommitWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeMeasureTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeMeasureTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeMeasureTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeMeasureTriggerWithChannels(vi, channelName, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeMeasureTriggerWithChannels(vi, channelName, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgePulseTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgePulseTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgePulseTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgePulseTriggerWithChannels(vi, channelName, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgePulseTriggerWithChannels(vi, channelName, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(vi, channelName, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(vi, channelName, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeShutdownTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeShutdownTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeShutdownTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeShutdownTriggerWithChannels(vi, channelName, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeShutdownTriggerWithChannels(vi, channelName, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeSourceTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeSourceTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeSourceTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeSourceTriggerWithChannels(vi, channelName, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeSourceTriggerWithChannels(vi, channelName, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeStartTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeStartTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeStartTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeStartTriggerWithChannels(vi, channelName, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeStartTriggerWithChannels(vi, channelName, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureOvp(ViSession vi, ViConstString channelName, ViBoolean enabled, ViReal64 limit)
{
  if (!function_pointers_.ConfigureOvp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureOVP.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureOVP(vi, channelName, enabled, limit);
#else
  return function_pointers_.ConfigureOvp(vi, channelName, enabled, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeMeasureTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ConfigureSoftwareEdgeMeasureTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeMeasureTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeMeasureTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.ConfigureSoftwareEdgeMeasureTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgePulseTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ConfigureSoftwareEdgePulseTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgePulseTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgePulseTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.ConfigureSoftwareEdgePulseTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeShutdownTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ConfigureSoftwareEdgeShutdownTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeShutdownTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeShutdownTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.ConfigureSoftwareEdgeShutdownTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeSourceTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ConfigureSoftwareEdgeSourceTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeSourceTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeSourceTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.ConfigureSoftwareEdgeSourceTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeStartTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ConfigureSoftwareEdgeStartTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeStartTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeStartTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.ConfigureSoftwareEdgeStartTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSourceModeWithChannels(ViSession vi, ViConstString channelName, ViInt32 sourceMode)
{
  if (!function_pointers_.ConfigureSourceModeWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSourceModeWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSourceModeWithChannels(vi, channelName, sourceMode);
#else
  return function_pointers_.ConfigureSourceModeWithChannels(vi, channelName, sourceMode);
#endif
}

ViStatus NiDCPowerLibrary::CreateAdvancedSequenceCommitStepWithChannels(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep)
{
  if (!function_pointers_.CreateAdvancedSequenceCommitStepWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CreateAdvancedSequenceCommitStepWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_CreateAdvancedSequenceCommitStepWithChannels(vi, channelName, setAsActiveStep);
#else
  return function_pointers_.CreateAdvancedSequenceCommitStepWithChannels(vi, channelName, setAsActiveStep);
#endif
}

ViStatus NiDCPowerLibrary::CreateAdvancedSequenceStepWithChannels(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep)
{
  if (!function_pointers_.CreateAdvancedSequenceStepWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CreateAdvancedSequenceStepWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_CreateAdvancedSequenceStepWithChannels(vi, channelName, setAsActiveStep);
#else
  return function_pointers_.CreateAdvancedSequenceStepWithChannels(vi, channelName, setAsActiveStep);
#endif
}

ViStatus NiDCPowerLibrary::CreateAdvancedSequenceWithChannels(ViSession vi, ViConstString channelName, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence)
{
  if (!function_pointers_.CreateAdvancedSequenceWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CreateAdvancedSequenceWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_CreateAdvancedSequenceWithChannels(vi, channelName, sequenceName, attributeIdCount, attributeIds, setAsActiveSequence);
#else
  return function_pointers_.CreateAdvancedSequenceWithChannels(vi, channelName, sequenceName, attributeIdCount, attributeIds, setAsActiveSequence);
#endif
}

ViStatus NiDCPowerLibrary::CreateAdvancedSequence(ViSession vi, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence)
{
  if (!function_pointers_.CreateAdvancedSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CreateAdvancedSequence.");
  }
#if defined(_MSC_VER)
  return niDCPower_CreateAdvancedSequence(vi, sequenceName, attributeIdCount, attributeIds, setAsActiveSequence);
#else
  return function_pointers_.CreateAdvancedSequence(vi, sequenceName, attributeIdCount, attributeIds, setAsActiveSequence);
#endif
}

ViStatus NiDCPowerLibrary::DeleteAdvancedSequenceWithChannels(ViSession vi, ViConstString channelName, ViConstString sequenceName)
{
  if (!function_pointers_.DeleteAdvancedSequenceWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DeleteAdvancedSequenceWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_DeleteAdvancedSequenceWithChannels(vi, channelName, sequenceName);
#else
  return function_pointers_.DeleteAdvancedSequenceWithChannels(vi, channelName, sequenceName);
#endif
}

ViStatus NiDCPowerLibrary::DisablePulseTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisablePulseTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisablePulseTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisablePulseTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.DisablePulseTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::DisableSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableSequenceAdvanceTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableSequenceAdvanceTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableSequenceAdvanceTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.DisableSequenceAdvanceTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::DisableShutdownTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableShutdownTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableShutdownTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableShutdownTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.DisableShutdownTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::DisableSourceTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableSourceTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableSourceTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableSourceTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.DisableSourceTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::DisableStartTriggerWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableStartTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableStartTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableStartTriggerWithChannels(vi, channelName);
#else
  return function_pointers_.DisableStartTriggerWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_error_query.");
  }
#if defined(_MSC_VER)
  return niDCPower_error_query(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorQuery(vi, errorCode, errorMessage);
#endif
}

ViStatus NiDCPowerLibrary::ExportSignalWithChannels(ViSession vi, ViConstString channelName, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  if (!function_pointers_.ExportSignalWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ExportSignalWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ExportSignalWithChannels(vi, channelName, signal, signalIdentifier, outputTerminal);
#else
  return function_pointers_.ExportSignalWithChannels(vi, channelName, signal, signalIdentifier, outputTerminal);
#endif
}

ViStatus NiDCPowerLibrary::InitializeWithIndependentChannels(ViRsrc resourceName, ViBoolean reset, ViConstString optionString, ViSession* vi)
{
  if (!function_pointers_.InitializeWithIndependentChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_InitializeWithIndependentChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_InitializeWithIndependentChannels(resourceName, reset, optionString, vi);
#else
  return function_pointers_.InitializeWithIndependentChannels(resourceName, reset, optionString, vi);
#endif
}

ViStatus NiDCPowerLibrary::InitiateWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.InitiateWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_InitiateWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_InitiateWithChannels(vi, channelName);
#else
  return function_pointers_.InitiateWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::InvalidateAllAttributes(ViSession vi)
{
  if (!function_pointers_.InvalidateAllAttributes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_InvalidateAllAttributes.");
  }
#if defined(_MSC_VER)
  return niDCPower_InvalidateAllAttributes(vi);
#else
  return function_pointers_.InvalidateAllAttributes(vi);
#endif
}

ViStatus NiDCPowerLibrary::ResetWithChannels(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ResetWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ResetWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_ResetWithChannels(vi, channelName);
#else
  return function_pointers_.ResetWithChannels(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::SendSoftwareEdgeTriggerWithChannels(ViSession vi, ViConstString channelName, ViInt32 trigger)
{
  if (!function_pointers_.SendSoftwareEdgeTriggerWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SendSoftwareEdgeTriggerWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_SendSoftwareEdgeTriggerWithChannels(vi, channelName, trigger);
#else
  return function_pointers_.SendSoftwareEdgeTriggerWithChannels(vi, channelName, trigger);
#endif
}

ViStatus NiDCPowerLibrary::WaitForEventWithChannels(ViSession vi, ViConstString channelName, ViInt32 eventId, ViReal64 timeout)
{
  if (!function_pointers_.WaitForEventWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_WaitForEventWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_WaitForEventWithChannels(vi, channelName, eventId, timeout);
#else
  return function_pointers_.WaitForEventWithChannels(vi, channelName, eventId, timeout);
#endif
}

ViStatus NiDCPowerLibrary::Abort(ViSession vi)
{
  if (!function_pointers_.Abort) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_Abort.");
  }
#if defined(_MSC_VER)
  return niDCPower_Abort(vi);
#else
  return function_pointers_.Abort(vi);
#endif
}

ViStatus NiDCPowerLibrary::CalSelfCalibrate(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.CalSelfCalibrate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CalSelfCalibrate.");
  }
#if defined(_MSC_VER)
  return niDCPower_CalSelfCalibrate(vi, channelName);
#else
  return function_pointers_.CalSelfCalibrate(vi, channelName);
#endif
}

ViStatus NiDCPowerLibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ClearError.");
  }
#if defined(_MSC_VER)
  return niDCPower_ClearError(vi);
#else
  return function_pointers_.ClearError(vi);
#endif
}

ViStatus NiDCPowerLibrary::ClearInterchangeWarnings(ViSession vi)
{
  if (!function_pointers_.ClearInterchangeWarnings) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ClearInterchangeWarnings.");
  }
#if defined(_MSC_VER)
  return niDCPower_ClearInterchangeWarnings(vi);
#else
  return function_pointers_.ClearInterchangeWarnings(vi);
#endif
}

ViStatus NiDCPowerLibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_close.");
  }
#if defined(_MSC_VER)
  return niDCPower_close(vi);
#else
  return function_pointers_.Close(vi);
#endif
}

ViStatus NiDCPowerLibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_Commit.");
  }
#if defined(_MSC_VER)
  return niDCPower_Commit(vi);
#else
  return function_pointers_.Commit(vi);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureApertureTime(ViSession vi, ViConstString channelName, ViReal64 apertureTime, ViInt32 units)
{
  if (!function_pointers_.ConfigureApertureTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureApertureTime.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureApertureTime(vi, channelName, apertureTime, units);
#else
  return function_pointers_.ConfigureApertureTime(vi, channelName, apertureTime, units);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureAutoZero(ViSession vi, ViConstString channelName, ViInt32 autoZero)
{
  if (!function_pointers_.ConfigureAutoZero) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureAutoZero.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureAutoZero(vi, channelName, autoZero);
#else
  return function_pointers_.ConfigureAutoZero(vi, channelName, autoZero);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level)
{
  if (!function_pointers_.ConfigureCurrentLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureCurrentLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureCurrentLevel(vi, channelName, level);
#else
  return function_pointers_.ConfigureCurrentLevel(vi, channelName, level);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureCurrentLevelRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigureCurrentLevelRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureCurrentLevelRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureCurrentLevelRange(vi, channelName, range);
#else
  return function_pointers_.ConfigureCurrentLevelRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureCurrentLimit(ViSession vi, ViConstString channelName, ViInt32 behavior, ViReal64 limit)
{
  if (!function_pointers_.ConfigureCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureCurrentLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureCurrentLimit(vi, channelName, behavior, limit);
#else
  return function_pointers_.ConfigureCurrentLimit(vi, channelName, behavior, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureCurrentLimitRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigureCurrentLimitRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureCurrentLimitRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureCurrentLimitRange(vi, channelName, range);
#else
  return function_pointers_.ConfigureCurrentLimitRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeMeasureTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeMeasureTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeMeasureTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeMeasureTrigger(vi, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeMeasureTrigger(vi, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgePulseTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgePulseTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgePulseTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgePulseTrigger(vi, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgePulseTrigger(vi, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeSequenceAdvanceTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeSequenceAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger(vi, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeSequenceAdvanceTrigger(vi, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeSourceTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeSourceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeSourceTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeSourceTrigger(vi, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeSourceTrigger(vi, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureDigitalEdgeStartTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureDigitalEdgeStartTrigger(vi, inputTerminal, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeStartTrigger(vi, inputTerminal, edge);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureOutputEnabled(ViSession vi, ViConstString channelName, ViBoolean enabled)
{
  if (!function_pointers_.ConfigureOutputEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureOutputEnabled.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureOutputEnabled(vi, channelName, enabled);
#else
  return function_pointers_.ConfigureOutputEnabled(vi, channelName, enabled);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureOutputFunction(ViSession vi, ViConstString channelName, ViInt32 function)
{
  if (!function_pointers_.ConfigureOutputFunction) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureOutputFunction.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureOutputFunction(vi, channelName, function);
#else
  return function_pointers_.ConfigureOutputFunction(vi, channelName, function);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureOutputResistance(ViSession vi, ViConstString channelName, ViReal64 resistance)
{
  if (!function_pointers_.ConfigureOutputResistance) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureOutputResistance.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureOutputResistance(vi, channelName, resistance);
#else
  return function_pointers_.ConfigureOutputResistance(vi, channelName, resistance);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePowerLineFrequency(ViSession vi, ViReal64 powerlineFrequency)
{
  if (!function_pointers_.ConfigurePowerLineFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePowerLineFrequency.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePowerLineFrequency(vi, powerlineFrequency);
#else
  return function_pointers_.ConfigurePowerLineFrequency(vi, powerlineFrequency);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseBiasCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level)
{
  if (!function_pointers_.ConfigurePulseBiasCurrentLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseBiasCurrentLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseBiasCurrentLevel(vi, channelName, level);
#else
  return function_pointers_.ConfigurePulseBiasCurrentLevel(vi, channelName, level);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseBiasCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 limit)
{
  if (!function_pointers_.ConfigurePulseBiasCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseBiasCurrentLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseBiasCurrentLimit(vi, channelName, limit);
#else
  return function_pointers_.ConfigurePulseBiasCurrentLimit(vi, channelName, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseBiasVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level)
{
  if (!function_pointers_.ConfigurePulseBiasVoltageLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseBiasVoltageLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseBiasVoltageLevel(vi, channelName, level);
#else
  return function_pointers_.ConfigurePulseBiasVoltageLevel(vi, channelName, level);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseBiasVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit)
{
  if (!function_pointers_.ConfigurePulseBiasVoltageLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseBiasVoltageLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseBiasVoltageLimit(vi, channelName, limit);
#else
  return function_pointers_.ConfigurePulseBiasVoltageLimit(vi, channelName, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level)
{
  if (!function_pointers_.ConfigurePulseCurrentLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseCurrentLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseCurrentLevel(vi, channelName, level);
#else
  return function_pointers_.ConfigurePulseCurrentLevel(vi, channelName, level);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseCurrentLevelRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigurePulseCurrentLevelRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseCurrentLevelRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseCurrentLevelRange(vi, channelName, range);
#else
  return function_pointers_.ConfigurePulseCurrentLevelRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 limit)
{
  if (!function_pointers_.ConfigurePulseCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseCurrentLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseCurrentLimit(vi, channelName, limit);
#else
  return function_pointers_.ConfigurePulseCurrentLimit(vi, channelName, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseCurrentLimitRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigurePulseCurrentLimitRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseCurrentLimitRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseCurrentLimitRange(vi, channelName, range);
#else
  return function_pointers_.ConfigurePulseCurrentLimitRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level)
{
  if (!function_pointers_.ConfigurePulseVoltageLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseVoltageLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseVoltageLevel(vi, channelName, level);
#else
  return function_pointers_.ConfigurePulseVoltageLevel(vi, channelName, level);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseVoltageLevelRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigurePulseVoltageLevelRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseVoltageLevelRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseVoltageLevelRange(vi, channelName, range);
#else
  return function_pointers_.ConfigurePulseVoltageLevelRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit)
{
  if (!function_pointers_.ConfigurePulseVoltageLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseVoltageLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseVoltageLimit(vi, channelName, limit);
#else
  return function_pointers_.ConfigurePulseVoltageLimit(vi, channelName, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigurePulseVoltageLimitRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigurePulseVoltageLimitRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigurePulseVoltageLimitRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigurePulseVoltageLimitRange(vi, channelName, range);
#else
  return function_pointers_.ConfigurePulseVoltageLimitRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSense(ViSession vi, ViConstString channelName, ViInt32 sense)
{
  if (!function_pointers_.ConfigureSense) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSense.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSense(vi, channelName, sense);
#else
  return function_pointers_.ConfigureSense(vi, channelName, sense);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeMeasureTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeMeasureTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeMeasureTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeMeasureTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareEdgeMeasureTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgePulseTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgePulseTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgePulseTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgePulseTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareEdgePulseTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeSequenceAdvanceTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeSequenceAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareEdgeSequenceAdvanceTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeSourceTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeSourceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeSourceTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeSourceTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareEdgeSourceTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSoftwareEdgeStartTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSoftwareEdgeStartTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSoftwareEdgeStartTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareEdgeStartTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureSourceMode(ViSession vi, ViInt32 sourceMode)
{
  if (!function_pointers_.ConfigureSourceMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureSourceMode.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureSourceMode(vi, sourceMode);
#else
  return function_pointers_.ConfigureSourceMode(vi, sourceMode);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level)
{
  if (!function_pointers_.ConfigureVoltageLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureVoltageLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureVoltageLevel(vi, channelName, level);
#else
  return function_pointers_.ConfigureVoltageLevel(vi, channelName, level);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureVoltageLevelRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigureVoltageLevelRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureVoltageLevelRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureVoltageLevelRange(vi, channelName, range);
#else
  return function_pointers_.ConfigureVoltageLevelRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit)
{
  if (!function_pointers_.ConfigureVoltageLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureVoltageLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureVoltageLimit(vi, channelName, limit);
#else
  return function_pointers_.ConfigureVoltageLimit(vi, channelName, limit);
#endif
}

ViStatus NiDCPowerLibrary::ConfigureVoltageLimitRange(ViSession vi, ViConstString channelName, ViReal64 range)
{
  if (!function_pointers_.ConfigureVoltageLimitRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ConfigureVoltageLimitRange.");
  }
#if defined(_MSC_VER)
  return niDCPower_ConfigureVoltageLimitRange(vi, channelName, range);
#else
  return function_pointers_.ConfigureVoltageLimitRange(vi, channelName, range);
#endif
}

ViStatus NiDCPowerLibrary::CreateAdvancedSequenceStep(ViSession vi, ViBoolean setAsActiveStep)
{
  if (!function_pointers_.CreateAdvancedSequenceStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_CreateAdvancedSequenceStep.");
  }
#if defined(_MSC_VER)
  return niDCPower_CreateAdvancedSequenceStep(vi, setAsActiveStep);
#else
  return function_pointers_.CreateAdvancedSequenceStep(vi, setAsActiveStep);
#endif
}

ViStatus NiDCPowerLibrary::DeleteAdvancedSequence(ViSession vi, ViConstString sequenceName)
{
  if (!function_pointers_.DeleteAdvancedSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DeleteAdvancedSequence.");
  }
#if defined(_MSC_VER)
  return niDCPower_DeleteAdvancedSequence(vi, sequenceName);
#else
  return function_pointers_.DeleteAdvancedSequence(vi, sequenceName);
#endif
}

ViStatus NiDCPowerLibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_Disable.");
  }
#if defined(_MSC_VER)
  return niDCPower_Disable(vi);
#else
  return function_pointers_.Disable(vi);
#endif
}

ViStatus NiDCPowerLibrary::DisablePulseTrigger(ViSession vi)
{
  if (!function_pointers_.DisablePulseTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisablePulseTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisablePulseTrigger(vi);
#else
  return function_pointers_.DisablePulseTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::DisableSequenceAdvanceTrigger(ViSession vi)
{
  if (!function_pointers_.DisableSequenceAdvanceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableSequenceAdvanceTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableSequenceAdvanceTrigger(vi);
#else
  return function_pointers_.DisableSequenceAdvanceTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::DisableSourceTrigger(ViSession vi)
{
  if (!function_pointers_.DisableSourceTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableSourceTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableSourceTrigger(vi);
#else
  return function_pointers_.DisableSourceTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::DisableStartTrigger(ViSession vi)
{
  if (!function_pointers_.DisableStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_DisableStartTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_DisableStartTrigger(vi);
#else
  return function_pointers_.DisableStartTrigger(vi);
#endif
}

ViStatus NiDCPowerLibrary::ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_error_message.");
  }
#if defined(_MSC_VER)
  return niDCPower_error_message(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorMessage(vi, errorCode, errorMessage);
#endif
}

ViStatus NiDCPowerLibrary::ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViAddr configuration[])
{
  if (!function_pointers_.ExportAttributeConfigurationBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ExportAttributeConfigurationBuffer.");
  }
#if defined(_MSC_VER)
  return niDCPower_ExportAttributeConfigurationBuffer(vi, size, configuration);
#else
  return function_pointers_.ExportAttributeConfigurationBuffer(vi, size, configuration);
#endif
}

ViStatus NiDCPowerLibrary::ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.ExportAttributeConfigurationFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ExportAttributeConfigurationFile.");
  }
#if defined(_MSC_VER)
  return niDCPower_ExportAttributeConfigurationFile(vi, filePath);
#else
  return function_pointers_.ExportAttributeConfigurationFile(vi, filePath);
#endif
}

ViStatus NiDCPowerLibrary::ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ExportSignal.");
  }
#if defined(_MSC_VER)
  return niDCPower_ExportSignal(vi, signal, signalIdentifier, outputTerminal);
#else
  return function_pointers_.ExportSignal(vi, signal, signalIdentifier, outputTerminal);
#endif
}

ViStatus NiDCPowerLibrary::FetchMultiple(ViSession vi, ViConstString channelName, ViReal64 timeout, ViInt32 count, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[], ViBoolean inCompliance[], ViInt32* actualCount)
{
  if (!function_pointers_.FetchMultiple) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_FetchMultiple.");
  }
#if defined(_MSC_VER)
  return niDCPower_FetchMultiple(vi, channelName, timeout, count, voltageMeasurements, currentMeasurements, inCompliance, actualCount);
#else
  return function_pointers_.FetchMultiple(vi, channelName, timeout, count, voltageMeasurements, currentMeasurements, inCompliance, actualCount);
#endif
}

ViStatus NiDCPowerLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetAttributeViString(vi, channelName, attributeId, bufferSize, attributeValue);
#else
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, bufferSize, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelName[])
{
  if (!function_pointers_.GetChannelName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetChannelName.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetChannelName(vi, index, bufferSize, channelName);
#else
  return function_pointers_.GetChannelName(vi, index, bufferSize, channelName);
#endif
}

ViStatus NiDCPowerLibrary::GetChannelNameFromString(ViSession vi, ViConstString index, ViInt32 bufferSize, ViChar channelName[])
{
  if (!function_pointers_.GetChannelNameFromString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetChannelNameFromString.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetChannelNameFromString(vi, index, bufferSize, channelName);
#else
  return function_pointers_.GetChannelNameFromString(vi, index, bufferSize, channelName);
#endif
}

ViStatus NiDCPowerLibrary::GetError(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetError.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetError(vi, code, bufferSize, description);
#else
  return function_pointers_.GetError(vi, code, bufferSize, description);
#endif
}

ViStatus NiDCPowerLibrary::GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetExtCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetExtCalLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
#else
  return function_pointers_.GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
#endif
}

ViStatus NiDCPowerLibrary::GetExtCalLastTemp(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.GetExtCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetExtCalLastTemp.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetExtCalLastTemp(vi, temperature);
#else
  return function_pointers_.GetExtCalLastTemp(vi, temperature);
#endif
}

ViStatus NiDCPowerLibrary::GetExtCalRecommendedInterval(ViSession vi, ViInt32* months)
{
  if (!function_pointers_.GetExtCalRecommendedInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetExtCalRecommendedInterval.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetExtCalRecommendedInterval(vi, months);
#else
  return function_pointers_.GetExtCalRecommendedInterval(vi, months);
#endif
}

ViStatus NiDCPowerLibrary::GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[])
{
  if (!function_pointers_.GetNextCoercionRecord) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetNextCoercionRecord.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetNextCoercionRecord(vi, bufferSize, coercionRecord);
#else
  return function_pointers_.GetNextCoercionRecord(vi, bufferSize, coercionRecord);
#endif
}

ViStatus NiDCPowerLibrary::GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[])
{
  if (!function_pointers_.GetNextInterchangeWarning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetNextInterchangeWarning.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
#else
  return function_pointers_.GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
#endif
}

ViStatus NiDCPowerLibrary::GetSelfCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetSelfCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetSelfCalLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetSelfCalLastDateAndTime(vi, year, month, day, hour, minute);
#else
  return function_pointers_.GetSelfCalLastDateAndTime(vi, year, month, day, hour, minute);
#endif
}

ViStatus NiDCPowerLibrary::GetSelfCalLastTemp(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.GetSelfCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_GetSelfCalLastTemp.");
  }
#if defined(_MSC_VER)
  return niDCPower_GetSelfCalLastTemp(vi, temperature);
#else
  return function_pointers_.GetSelfCalLastTemp(vi, temperature);
#endif
}

ViStatus NiDCPowerLibrary::ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViAddr configuration[])
{
  if (!function_pointers_.ImportAttributeConfigurationBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ImportAttributeConfigurationBuffer.");
  }
#if defined(_MSC_VER)
  return niDCPower_ImportAttributeConfigurationBuffer(vi, size, configuration);
#else
  return function_pointers_.ImportAttributeConfigurationBuffer(vi, size, configuration);
#endif
}

ViStatus NiDCPowerLibrary::ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.ImportAttributeConfigurationFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ImportAttributeConfigurationFile.");
  }
#if defined(_MSC_VER)
  return niDCPower_ImportAttributeConfigurationFile(vi, filePath);
#else
  return function_pointers_.ImportAttributeConfigurationFile(vi, filePath);
#endif
}

ViStatus NiDCPowerLibrary::InitializeWithChannels(ViRsrc resourceName, ViConstString channels, ViBoolean reset, ViConstString optionString, ViSession* vi)
{
  if (!function_pointers_.InitializeWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_InitializeWithChannels.");
  }
#if defined(_MSC_VER)
  return niDCPower_InitializeWithChannels(resourceName, channels, reset, optionString, vi);
#else
  return function_pointers_.InitializeWithChannels(resourceName, channels, reset, optionString, vi);
#endif
}

ViStatus NiDCPowerLibrary::Initiate(ViSession vi)
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_Initiate.");
  }
#if defined(_MSC_VER)
  return niDCPower_Initiate(vi);
#else
  return function_pointers_.Initiate(vi);
#endif
}

ViStatus NiDCPowerLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_LockSession.");
  }
#if defined(_MSC_VER)
  return niDCPower_LockSession(vi, callerHasLock);
#else
  return function_pointers_.LockSession(vi, callerHasLock);
#endif
}

ViStatus NiDCPowerLibrary::Measure(ViSession vi, ViConstString channelName, ViInt32 measurementType, ViReal64* measurement)
{
  if (!function_pointers_.Measure) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_Measure.");
  }
#if defined(_MSC_VER)
  return niDCPower_Measure(vi, channelName, measurementType, measurement);
#else
  return function_pointers_.Measure(vi, channelName, measurementType, measurement);
#endif
}

ViStatus NiDCPowerLibrary::MeasureMultiple(ViSession vi, ViConstString channelName, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[])
{
  if (!function_pointers_.MeasureMultiple) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_MeasureMultiple.");
  }
#if defined(_MSC_VER)
  return niDCPower_MeasureMultiple(vi, channelName, voltageMeasurements, currentMeasurements);
#else
  return function_pointers_.MeasureMultiple(vi, channelName, voltageMeasurements, currentMeasurements);
#endif
}

ViStatus NiDCPowerLibrary::ParseChannelCount(ViSession vi, ViConstString channelsString, ViUInt32* numberOfChannels)
{
  if (!function_pointers_.ParseChannelCount) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ParseChannelCount.");
  }
  return function_pointers_.ParseChannelCount(vi, channelsString, numberOfChannels);
}

ViStatus NiDCPowerLibrary::QueryInCompliance(ViSession vi, ViConstString channelName, ViBoolean* inCompliance)
{
  if (!function_pointers_.QueryInCompliance) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_QueryInCompliance.");
  }
#if defined(_MSC_VER)
  return niDCPower_QueryInCompliance(vi, channelName, inCompliance);
#else
  return function_pointers_.QueryInCompliance(vi, channelName, inCompliance);
#endif
}

ViStatus NiDCPowerLibrary::QueryMaxCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* maxCurrentLimit)
{
  if (!function_pointers_.QueryMaxCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_QueryMaxCurrentLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_QueryMaxCurrentLimit(vi, channelName, voltageLevel, maxCurrentLimit);
#else
  return function_pointers_.QueryMaxCurrentLimit(vi, channelName, voltageLevel, maxCurrentLimit);
#endif
}

ViStatus NiDCPowerLibrary::QueryMaxVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 currentLimit, ViReal64* maxVoltageLevel)
{
  if (!function_pointers_.QueryMaxVoltageLevel) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_QueryMaxVoltageLevel.");
  }
#if defined(_MSC_VER)
  return niDCPower_QueryMaxVoltageLevel(vi, channelName, currentLimit, maxVoltageLevel);
#else
  return function_pointers_.QueryMaxVoltageLevel(vi, channelName, currentLimit, maxVoltageLevel);
#endif
}

ViStatus NiDCPowerLibrary::QueryMinCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* minCurrentLimit)
{
  if (!function_pointers_.QueryMinCurrentLimit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_QueryMinCurrentLimit.");
  }
#if defined(_MSC_VER)
  return niDCPower_QueryMinCurrentLimit(vi, channelName, voltageLevel, minCurrentLimit);
#else
  return function_pointers_.QueryMinCurrentLimit(vi, channelName, voltageLevel, minCurrentLimit);
#endif
}

ViStatus NiDCPowerLibrary::QueryOutputState(ViSession vi, ViConstString channelName, ViInt32 outputState, ViBoolean* inState)
{
  if (!function_pointers_.QueryOutputState) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_QueryOutputState.");
  }
#if defined(_MSC_VER)
  return niDCPower_QueryOutputState(vi, channelName, outputState, inState);
#else
  return function_pointers_.QueryOutputState(vi, channelName, outputState, inState);
#endif
}

ViStatus NiDCPowerLibrary::ReadCurrentTemperature(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.ReadCurrentTemperature) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ReadCurrentTemperature.");
  }
#if defined(_MSC_VER)
  return niDCPower_ReadCurrentTemperature(vi, temperature);
#else
  return function_pointers_.ReadCurrentTemperature(vi, temperature);
#endif
}

ViStatus NiDCPowerLibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_reset.");
  }
#if defined(_MSC_VER)
  return niDCPower_reset(vi);
#else
  return function_pointers_.Reset(vi);
#endif
}

ViStatus NiDCPowerLibrary::ResetDevice(ViSession vi)
{
  if (!function_pointers_.ResetDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ResetDevice.");
  }
#if defined(_MSC_VER)
  return niDCPower_ResetDevice(vi);
#else
  return function_pointers_.ResetDevice(vi);
#endif
}

ViStatus NiDCPowerLibrary::ResetInterchangeCheck(ViSession vi)
{
  if (!function_pointers_.ResetInterchangeCheck) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ResetInterchangeCheck.");
  }
#if defined(_MSC_VER)
  return niDCPower_ResetInterchangeCheck(vi);
#else
  return function_pointers_.ResetInterchangeCheck(vi);
#endif
}

ViStatus NiDCPowerLibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_ResetWithDefaults.");
  }
#if defined(_MSC_VER)
  return niDCPower_ResetWithDefaults(vi);
#else
  return function_pointers_.ResetWithDefaults(vi);
#endif
}

ViStatus NiDCPowerLibrary::RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_revision_query.");
  }
#if defined(_MSC_VER)
  return niDCPower_revision_query(vi, instrumentDriverRevision, firmwareRevision);
#else
  return function_pointers_.RevisionQuery(vi, instrumentDriverRevision, firmwareRevision);
#endif
}

ViStatus NiDCPowerLibrary::SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_self_test.");
  }
#if defined(_MSC_VER)
  return niDCPower_self_test(vi, selfTestResult, selfTestMessage);
#else
  return function_pointers_.SelfTest(vi, selfTestResult, selfTestMessage);
#endif
}

ViStatus NiDCPowerLibrary::SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SendSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return niDCPower_SendSoftwareEdgeTrigger(vi, trigger);
#else
  return function_pointers_.SendSoftwareEdgeTrigger(vi, trigger);
#endif
}

ViStatus NiDCPowerLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetAttributeViString(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiDCPowerLibrary::SetSequence(ViSession vi, ViConstString channelName, ViReal64 values[], ViReal64 sourceDelays[], ViUInt32 size)
{
  if (!function_pointers_.SetSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_SetSequence.");
  }
#if defined(_MSC_VER)
  return niDCPower_SetSequence(vi, channelName, values, sourceDelays, size);
#else
  return function_pointers_.SetSequence(vi, channelName, values, sourceDelays, size);
#endif
}

ViStatus NiDCPowerLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_UnlockSession.");
  }
#if defined(_MSC_VER)
  return niDCPower_UnlockSession(vi, callerHasLock);
#else
  return function_pointers_.UnlockSession(vi, callerHasLock);
#endif
}

ViStatus NiDCPowerLibrary::WaitForEvent(ViSession vi, ViInt32 eventId, ViReal64 timeout)
{
  if (!function_pointers_.WaitForEvent) {
    throw nidevice_grpc::LibraryLoadException("Could not find niDCPower_WaitForEvent.");
  }
#if defined(_MSC_VER)
  return niDCPower_WaitForEvent(vi, eventId, timeout);
#else
  return function_pointers_.WaitForEvent(vi, eventId, timeout);
#endif
}

}  // namespace nidcpower_grpc
