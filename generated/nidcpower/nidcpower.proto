
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Proto file for the NI-DCPower Metadata
//---------------------------------------------------------------------
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ni.grpc.dcpower";
option java_outer_classname = "NiDCPower";
option csharp_namespace = "NationalInstruments.Grpc.DCPower";

package nidcpower_grpc;

import "session.proto";

service NiDCPower {
  rpc AbortWithChannels(AbortWithChannelsRequest) returns (AbortWithChannelsResponse);
  rpc CommitWithChannels(CommitWithChannelsRequest) returns (CommitWithChannelsResponse);
  rpc ConfigureDigitalEdgeMeasureTriggerWithChannels(ConfigureDigitalEdgeMeasureTriggerWithChannelsRequest) returns (ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse);
  rpc ConfigureDigitalEdgePulseTriggerWithChannels(ConfigureDigitalEdgePulseTriggerWithChannelsRequest) returns (ConfigureDigitalEdgePulseTriggerWithChannelsResponse);
  rpc ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsRequest) returns (ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse);
  rpc ConfigureDigitalEdgeShutdownTriggerWithChannels(ConfigureDigitalEdgeShutdownTriggerWithChannelsRequest) returns (ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse);
  rpc ConfigureDigitalEdgeSourceTriggerWithChannels(ConfigureDigitalEdgeSourceTriggerWithChannelsRequest) returns (ConfigureDigitalEdgeSourceTriggerWithChannelsResponse);
  rpc ConfigureDigitalEdgeStartTriggerWithChannels(ConfigureDigitalEdgeStartTriggerWithChannelsRequest) returns (ConfigureDigitalEdgeStartTriggerWithChannelsResponse);
  rpc ConfigureOvp(ConfigureOvpRequest) returns (ConfigureOvpResponse);
  rpc ConfigureSoftwareEdgeMeasureTriggerWithChannels(ConfigureSoftwareEdgeMeasureTriggerWithChannelsRequest) returns (ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse);
  rpc ConfigureSoftwareEdgePulseTriggerWithChannels(ConfigureSoftwareEdgePulseTriggerWithChannelsRequest) returns (ConfigureSoftwareEdgePulseTriggerWithChannelsResponse);
  rpc ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsRequest) returns (ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse);
  rpc ConfigureSoftwareEdgeShutdownTriggerWithChannels(ConfigureSoftwareEdgeShutdownTriggerWithChannelsRequest) returns (ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse);
  rpc ConfigureSoftwareEdgeSourceTriggerWithChannels(ConfigureSoftwareEdgeSourceTriggerWithChannelsRequest) returns (ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse);
  rpc ConfigureSoftwareEdgeStartTriggerWithChannels(ConfigureSoftwareEdgeStartTriggerWithChannelsRequest) returns (ConfigureSoftwareEdgeStartTriggerWithChannelsResponse);
  rpc ConfigureSourceModeWithChannels(ConfigureSourceModeWithChannelsRequest) returns (ConfigureSourceModeWithChannelsResponse);
  rpc CreateAdvancedSequenceCommitStepWithChannels(CreateAdvancedSequenceCommitStepWithChannelsRequest) returns (CreateAdvancedSequenceCommitStepWithChannelsResponse);
  rpc CreateAdvancedSequenceStepWithChannels(CreateAdvancedSequenceStepWithChannelsRequest) returns (CreateAdvancedSequenceStepWithChannelsResponse);
  rpc CreateAdvancedSequenceWithChannels(CreateAdvancedSequenceWithChannelsRequest) returns (CreateAdvancedSequenceWithChannelsResponse);
  rpc CreateAdvancedSequence(CreateAdvancedSequenceRequest) returns (CreateAdvancedSequenceResponse);
  rpc DeleteAdvancedSequenceWithChannels(DeleteAdvancedSequenceWithChannelsRequest) returns (DeleteAdvancedSequenceWithChannelsResponse);
  rpc DisablePulseTriggerWithChannels(DisablePulseTriggerWithChannelsRequest) returns (DisablePulseTriggerWithChannelsResponse);
  rpc DisableSequenceAdvanceTriggerWithChannels(DisableSequenceAdvanceTriggerWithChannelsRequest) returns (DisableSequenceAdvanceTriggerWithChannelsResponse);
  rpc DisableShutdownTriggerWithChannels(DisableShutdownTriggerWithChannelsRequest) returns (DisableShutdownTriggerWithChannelsResponse);
  rpc DisableSourceTriggerWithChannels(DisableSourceTriggerWithChannelsRequest) returns (DisableSourceTriggerWithChannelsResponse);
  rpc DisableStartTriggerWithChannels(DisableStartTriggerWithChannelsRequest) returns (DisableStartTriggerWithChannelsResponse);
  rpc ErrorQuery(ErrorQueryRequest) returns (ErrorQueryResponse);
  rpc ExportSignalWithChannels(ExportSignalWithChannelsRequest) returns (ExportSignalWithChannelsResponse);
  rpc InitializeWithIndependentChannels(InitializeWithIndependentChannelsRequest) returns (InitializeWithIndependentChannelsResponse);
  rpc InitiateWithChannels(InitiateWithChannelsRequest) returns (InitiateWithChannelsResponse);
  rpc InvalidateAllAttributes(InvalidateAllAttributesRequest) returns (InvalidateAllAttributesResponse);
  rpc ResetWithChannels(ResetWithChannelsRequest) returns (ResetWithChannelsResponse);
  rpc SendSoftwareEdgeTriggerWithChannels(SendSoftwareEdgeTriggerWithChannelsRequest) returns (SendSoftwareEdgeTriggerWithChannelsResponse);
  rpc WaitForEventWithChannels(WaitForEventWithChannelsRequest) returns (WaitForEventWithChannelsResponse);
  rpc Abort(AbortRequest) returns (AbortResponse);
  rpc CalSelfCalibrate(CalSelfCalibrateRequest) returns (CalSelfCalibrateResponse);
  rpc ClearError(ClearErrorRequest) returns (ClearErrorResponse);
  rpc ClearInterchangeWarnings(ClearInterchangeWarningsRequest) returns (ClearInterchangeWarningsResponse);
  rpc Close(CloseRequest) returns (CloseResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);
  rpc ConfigureApertureTime(ConfigureApertureTimeRequest) returns (ConfigureApertureTimeResponse);
  rpc ConfigureAutoZero(ConfigureAutoZeroRequest) returns (ConfigureAutoZeroResponse);
  rpc ConfigureCurrentLevel(ConfigureCurrentLevelRequest) returns (ConfigureCurrentLevelResponse);
  rpc ConfigureCurrentLevelRange(ConfigureCurrentLevelRangeRequest) returns (ConfigureCurrentLevelRangeResponse);
  rpc ConfigureCurrentLimit(ConfigureCurrentLimitRequest) returns (ConfigureCurrentLimitResponse);
  rpc ConfigureCurrentLimitRange(ConfigureCurrentLimitRangeRequest) returns (ConfigureCurrentLimitRangeResponse);
  rpc ConfigureDigitalEdgeMeasureTrigger(ConfigureDigitalEdgeMeasureTriggerRequest) returns (ConfigureDigitalEdgeMeasureTriggerResponse);
  rpc ConfigureDigitalEdgePulseTrigger(ConfigureDigitalEdgePulseTriggerRequest) returns (ConfigureDigitalEdgePulseTriggerResponse);
  rpc ConfigureDigitalEdgeSequenceAdvanceTrigger(ConfigureDigitalEdgeSequenceAdvanceTriggerRequest) returns (ConfigureDigitalEdgeSequenceAdvanceTriggerResponse);
  rpc ConfigureDigitalEdgeSourceTrigger(ConfigureDigitalEdgeSourceTriggerRequest) returns (ConfigureDigitalEdgeSourceTriggerResponse);
  rpc ConfigureDigitalEdgeStartTrigger(ConfigureDigitalEdgeStartTriggerRequest) returns (ConfigureDigitalEdgeStartTriggerResponse);
  rpc ConfigureOutputEnabled(ConfigureOutputEnabledRequest) returns (ConfigureOutputEnabledResponse);
  rpc ConfigureOutputFunction(ConfigureOutputFunctionRequest) returns (ConfigureOutputFunctionResponse);
  rpc ConfigureOutputResistance(ConfigureOutputResistanceRequest) returns (ConfigureOutputResistanceResponse);
  rpc ConfigurePowerLineFrequency(ConfigurePowerLineFrequencyRequest) returns (ConfigurePowerLineFrequencyResponse);
  rpc ConfigurePulseBiasCurrentLevel(ConfigurePulseBiasCurrentLevelRequest) returns (ConfigurePulseBiasCurrentLevelResponse);
  rpc ConfigurePulseBiasCurrentLimit(ConfigurePulseBiasCurrentLimitRequest) returns (ConfigurePulseBiasCurrentLimitResponse);
  rpc ConfigurePulseBiasVoltageLevel(ConfigurePulseBiasVoltageLevelRequest) returns (ConfigurePulseBiasVoltageLevelResponse);
  rpc ConfigurePulseBiasVoltageLimit(ConfigurePulseBiasVoltageLimitRequest) returns (ConfigurePulseBiasVoltageLimitResponse);
  rpc ConfigurePulseCurrentLevel(ConfigurePulseCurrentLevelRequest) returns (ConfigurePulseCurrentLevelResponse);
  rpc ConfigurePulseCurrentLevelRange(ConfigurePulseCurrentLevelRangeRequest) returns (ConfigurePulseCurrentLevelRangeResponse);
  rpc ConfigurePulseCurrentLimit(ConfigurePulseCurrentLimitRequest) returns (ConfigurePulseCurrentLimitResponse);
  rpc ConfigurePulseCurrentLimitRange(ConfigurePulseCurrentLimitRangeRequest) returns (ConfigurePulseCurrentLimitRangeResponse);
  rpc ConfigurePulseVoltageLevel(ConfigurePulseVoltageLevelRequest) returns (ConfigurePulseVoltageLevelResponse);
  rpc ConfigurePulseVoltageLevelRange(ConfigurePulseVoltageLevelRangeRequest) returns (ConfigurePulseVoltageLevelRangeResponse);
  rpc ConfigurePulseVoltageLimit(ConfigurePulseVoltageLimitRequest) returns (ConfigurePulseVoltageLimitResponse);
  rpc ConfigurePulseVoltageLimitRange(ConfigurePulseVoltageLimitRangeRequest) returns (ConfigurePulseVoltageLimitRangeResponse);
  rpc ConfigureSense(ConfigureSenseRequest) returns (ConfigureSenseResponse);
  rpc ConfigureSoftwareEdgeMeasureTrigger(ConfigureSoftwareEdgeMeasureTriggerRequest) returns (ConfigureSoftwareEdgeMeasureTriggerResponse);
  rpc ConfigureSoftwareEdgePulseTrigger(ConfigureSoftwareEdgePulseTriggerRequest) returns (ConfigureSoftwareEdgePulseTriggerResponse);
  rpc ConfigureSoftwareEdgeSequenceAdvanceTrigger(ConfigureSoftwareEdgeSequenceAdvanceTriggerRequest) returns (ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse);
  rpc ConfigureSoftwareEdgeSourceTrigger(ConfigureSoftwareEdgeSourceTriggerRequest) returns (ConfigureSoftwareEdgeSourceTriggerResponse);
  rpc ConfigureSoftwareEdgeStartTrigger(ConfigureSoftwareEdgeStartTriggerRequest) returns (ConfigureSoftwareEdgeStartTriggerResponse);
  rpc ConfigureSourceMode(ConfigureSourceModeRequest) returns (ConfigureSourceModeResponse);
  rpc ConfigureVoltageLevel(ConfigureVoltageLevelRequest) returns (ConfigureVoltageLevelResponse);
  rpc ConfigureVoltageLevelRange(ConfigureVoltageLevelRangeRequest) returns (ConfigureVoltageLevelRangeResponse);
  rpc ConfigureVoltageLimit(ConfigureVoltageLimitRequest) returns (ConfigureVoltageLimitResponse);
  rpc ConfigureVoltageLimitRange(ConfigureVoltageLimitRangeRequest) returns (ConfigureVoltageLimitRangeResponse);
  rpc CreateAdvancedSequenceStep(CreateAdvancedSequenceStepRequest) returns (CreateAdvancedSequenceStepResponse);
  rpc DeleteAdvancedSequence(DeleteAdvancedSequenceRequest) returns (DeleteAdvancedSequenceResponse);
  rpc Disable(DisableRequest) returns (DisableResponse);
  rpc DisablePulseTrigger(DisablePulseTriggerRequest) returns (DisablePulseTriggerResponse);
  rpc DisableSequenceAdvanceTrigger(DisableSequenceAdvanceTriggerRequest) returns (DisableSequenceAdvanceTriggerResponse);
  rpc DisableSourceTrigger(DisableSourceTriggerRequest) returns (DisableSourceTriggerResponse);
  rpc DisableStartTrigger(DisableStartTriggerRequest) returns (DisableStartTriggerResponse);
  rpc ErrorMessage(ErrorMessageRequest) returns (ErrorMessageResponse);
  rpc ExportAttributeConfigurationBuffer(ExportAttributeConfigurationBufferRequest) returns (ExportAttributeConfigurationBufferResponse);
  rpc ExportAttributeConfigurationFile(ExportAttributeConfigurationFileRequest) returns (ExportAttributeConfigurationFileResponse);
  rpc ExportSignal(ExportSignalRequest) returns (ExportSignalResponse);
  rpc FetchMultiple(FetchMultipleRequest) returns (FetchMultipleResponse);
  rpc GetAttributeViBoolean(GetAttributeViBooleanRequest) returns (GetAttributeViBooleanResponse);
  rpc GetAttributeViInt32(GetAttributeViInt32Request) returns (GetAttributeViInt32Response);
  rpc GetAttributeViInt64(GetAttributeViInt64Request) returns (GetAttributeViInt64Response);
  rpc GetAttributeViReal64(GetAttributeViReal64Request) returns (GetAttributeViReal64Response);
  rpc GetAttributeViSession(GetAttributeViSessionRequest) returns (GetAttributeViSessionResponse);
  rpc GetAttributeViString(GetAttributeViStringRequest) returns (GetAttributeViStringResponse);
  rpc GetChannelName(GetChannelNameRequest) returns (GetChannelNameResponse);
  rpc GetChannelNameFromString(GetChannelNameFromStringRequest) returns (GetChannelNameFromStringResponse);
  rpc GetError(GetErrorRequest) returns (GetErrorResponse);
  rpc GetExtCalLastDateAndTime(GetExtCalLastDateAndTimeRequest) returns (GetExtCalLastDateAndTimeResponse);
  rpc GetExtCalLastTemp(GetExtCalLastTempRequest) returns (GetExtCalLastTempResponse);
  rpc GetExtCalRecommendedInterval(GetExtCalRecommendedIntervalRequest) returns (GetExtCalRecommendedIntervalResponse);
  rpc GetNextCoercionRecord(GetNextCoercionRecordRequest) returns (GetNextCoercionRecordResponse);
  rpc GetNextInterchangeWarning(GetNextInterchangeWarningRequest) returns (GetNextInterchangeWarningResponse);
  rpc GetSelfCalLastDateAndTime(GetSelfCalLastDateAndTimeRequest) returns (GetSelfCalLastDateAndTimeResponse);
  rpc GetSelfCalLastTemp(GetSelfCalLastTempRequest) returns (GetSelfCalLastTempResponse);
  rpc ImportAttributeConfigurationBuffer(ImportAttributeConfigurationBufferRequest) returns (ImportAttributeConfigurationBufferResponse);
  rpc ImportAttributeConfigurationFile(ImportAttributeConfigurationFileRequest) returns (ImportAttributeConfigurationFileResponse);
  rpc InitializeWithChannels(InitializeWithChannelsRequest) returns (InitializeWithChannelsResponse);
  rpc Initiate(InitiateRequest) returns (InitiateResponse);
  rpc Measure(MeasureRequest) returns (MeasureResponse);
  rpc MeasureMultiple(MeasureMultipleRequest) returns (MeasureMultipleResponse);
  rpc QueryInCompliance(QueryInComplianceRequest) returns (QueryInComplianceResponse);
  rpc QueryMaxCurrentLimit(QueryMaxCurrentLimitRequest) returns (QueryMaxCurrentLimitResponse);
  rpc QueryMaxVoltageLevel(QueryMaxVoltageLevelRequest) returns (QueryMaxVoltageLevelResponse);
  rpc QueryMinCurrentLimit(QueryMinCurrentLimitRequest) returns (QueryMinCurrentLimitResponse);
  rpc QueryOutputState(QueryOutputStateRequest) returns (QueryOutputStateResponse);
  rpc ReadCurrentTemperature(ReadCurrentTemperatureRequest) returns (ReadCurrentTemperatureResponse);
  rpc Reset(ResetRequest) returns (ResetResponse);
  rpc ResetDevice(ResetDeviceRequest) returns (ResetDeviceResponse);
  rpc ResetInterchangeCheck(ResetInterchangeCheckRequest) returns (ResetInterchangeCheckResponse);
  rpc ResetWithDefaults(ResetWithDefaultsRequest) returns (ResetWithDefaultsResponse);
  rpc RevisionQuery(RevisionQueryRequest) returns (RevisionQueryResponse);
  rpc SelfTest(SelfTestRequest) returns (SelfTestResponse);
  rpc SendSoftwareEdgeTrigger(SendSoftwareEdgeTriggerRequest) returns (SendSoftwareEdgeTriggerResponse);
  rpc SetAttributeViBoolean(SetAttributeViBooleanRequest) returns (SetAttributeViBooleanResponse);
  rpc SetAttributeViInt32(SetAttributeViInt32Request) returns (SetAttributeViInt32Response);
  rpc SetAttributeViInt64(SetAttributeViInt64Request) returns (SetAttributeViInt64Response);
  rpc SetAttributeViReal64(SetAttributeViReal64Request) returns (SetAttributeViReal64Response);
  rpc SetAttributeViSession(SetAttributeViSessionRequest) returns (SetAttributeViSessionResponse);
  rpc SetAttributeViString(SetAttributeViStringRequest) returns (SetAttributeViStringResponse);
  rpc SetSequence(SetSequenceRequest) returns (SetSequenceResponse);
  rpc WaitForEvent(WaitForEventRequest) returns (WaitForEventResponse);
}

enum NiDCPowerAttribute {
  NIDCPOWER_ATTRIBUTE_UNSPECIFIED = 0;
  NIDCPOWER_ATTRIBUTE_RANGE_CHECK = 1050002;
  NIDCPOWER_ATTRIBUTE_QUERY_INSTRUMENT_STATUS = 1050003;
  NIDCPOWER_ATTRIBUTE_CACHE = 1050004;
  NIDCPOWER_ATTRIBUTE_SIMULATE = 1050005;
  NIDCPOWER_ATTRIBUTE_RECORD_COERCIONS = 1050006;
  NIDCPOWER_ATTRIBUTE_DRIVER_SETUP = 1050007;
  NIDCPOWER_ATTRIBUTE_INTERCHANGE_CHECK = 1050021;
  NIDCPOWER_ATTRIBUTE_CHANNEL_COUNT = 1050203;
  NIDCPOWER_ATTRIBUTE_SPECIFIC_DRIVER_PREFIX = 1050302;
  NIDCPOWER_ATTRIBUTE_IO_RESOURCE_DESCRIPTOR = 1050304;
  NIDCPOWER_ATTRIBUTE_LOGICAL_NAME = 1050305;
  NIDCPOWER_ATTRIBUTE_SUPPORTED_INSTRUMENT_MODELS = 1050327;
  NIDCPOWER_ATTRIBUTE_GROUP_CAPABILITIES = 1050401;
  NIDCPOWER_ATTRIBUTE_INSTRUMENT_FIRMWARE_REVISION = 1050510;
  NIDCPOWER_ATTRIBUTE_INSTRUMENT_MANUFACTURER = 1050511;
  NIDCPOWER_ATTRIBUTE_INSTRUMENT_MODEL = 1050512;
  NIDCPOWER_ATTRIBUTE_SPECIFIC_DRIVER_VENDOR = 1050513;
  NIDCPOWER_ATTRIBUTE_SPECIFIC_DRIVER_DESCRIPTION = 1050514;
  NIDCPOWER_ATTRIBUTE_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION = 1050515;
  NIDCPOWER_ATTRIBUTE_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION = 1050516;
  NIDCPOWER_ATTRIBUTE_SPECIFIC_DRIVER_REVISION = 1050551;
  NIDCPOWER_ATTRIBUTE_POWER_SOURCE = 1150000;
  NIDCPOWER_ATTRIBUTE_POWER_SOURCE_IN_USE = 1150001;
  NIDCPOWER_ATTRIBUTE_AUXILIARY_POWER_SOURCE_AVAILABLE = 1150002;
  NIDCPOWER_ATTRIBUTE_SAMPLES_TO_AVERAGE = 1150003;
  NIDCPOWER_ATTRIBUTE_CURRENT_LIMIT_RANGE = 1150004;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LEVEL_RANGE = 1150005;
  NIDCPOWER_ATTRIBUTE_RESET_AVERAGE_BEFORE_MEASUREMENT = 1150006;
  NIDCPOWER_ATTRIBUTE_OVERRANGING_ENABLED = 1150007;
  NIDCPOWER_ATTRIBUTE_OUTPUT_FUNCTION = 1150008;
  NIDCPOWER_ATTRIBUTE_CURRENT_LEVEL = 1150009;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LIMIT = 1150010;
  NIDCPOWER_ATTRIBUTE_CURRENT_LEVEL_RANGE = 1150011;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LIMIT_RANGE = 1150012;
  NIDCPOWER_ATTRIBUTE_SENSE = 1150013;
  NIDCPOWER_ATTRIBUTE_OUTPUT_CAPACITANCE = 1150014;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LEVEL_AUTORANGE = 1150015;
  NIDCPOWER_ATTRIBUTE_CURRENT_LIMIT_AUTORANGE = 1150016;
  NIDCPOWER_ATTRIBUTE_CURRENT_LEVEL_AUTORANGE = 1150017;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LIMIT_AUTORANGE = 1150018;
  NIDCPOWER_ATTRIBUTE_POWER_LINE_FREQUENCY = 1150020;
  NIDCPOWER_ATTRIBUTE_START_TRIGGER_TYPE = 1150021;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_START_TRIGGER_EDGE = 1150022;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_START_TRIGGER_INPUT_TERMINAL = 1150023;
  NIDCPOWER_ATTRIBUTE_EXPORTED_START_TRIGGER_OUTPUT_TERMINAL = 1150024;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_LOOP_COUNT = 1150025;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ADVANCE_TRIGGER_TYPE = 1150026;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_SEQUENCE_ADVANCE_TRIGGER_EDGE = 1150027;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_SEQUENCE_ADVANCE_TRIGGER_INPUT_TERMINAL = 1150028;
  NIDCPOWER_ATTRIBUTE_EXPORTED_SEQUENCE_ADVANCE_TRIGGER_OUTPUT_TERMINAL = 1150029;
  NIDCPOWER_ATTRIBUTE_SOURCE_TRIGGER_TYPE = 1150030;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_SOURCE_TRIGGER_EDGE = 1150031;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_SOURCE_TRIGGER_INPUT_TERMINAL = 1150032;
  NIDCPOWER_ATTRIBUTE_EXPORTED_SOURCE_TRIGGER_OUTPUT_TERMINAL = 1150033;
  NIDCPOWER_ATTRIBUTE_MEASURE_TRIGGER_TYPE = 1150034;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_MEASURE_TRIGGER_EDGE = 1150035;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_MEASURE_TRIGGER_INPUT_TERMINAL = 1150036;
  NIDCPOWER_ATTRIBUTE_EXPORTED_MEASURE_TRIGGER_OUTPUT_TERMINAL = 1150037;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ITERATION_COMPLETE_EVENT_PULSE_POLARITY = 1150038;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ITERATION_COMPLETE_EVENT_PULSE_WIDTH = 1150039;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ITERATION_COMPLETE_EVENT_OUTPUT_TERMINAL = 1150040;
  NIDCPOWER_ATTRIBUTE_SOURCE_COMPLETE_EVENT_PULSE_POLARITY = 1150041;
  NIDCPOWER_ATTRIBUTE_SOURCE_COMPLETE_EVENT_PULSE_WIDTH = 1150042;
  NIDCPOWER_ATTRIBUTE_SOURCE_COMPLETE_EVENT_OUTPUT_TERMINAL = 1150043;
  NIDCPOWER_ATTRIBUTE_MEASURE_COMPLETE_EVENT_PULSE_POLARITY = 1150044;
  NIDCPOWER_ATTRIBUTE_MEASURE_COMPLETE_EVENT_PULSE_WIDTH = 1150045;
  NIDCPOWER_ATTRIBUTE_MEASURE_COMPLETE_EVENT_DELAY = 1150046;
  NIDCPOWER_ATTRIBUTE_MEASURE_COMPLETE_EVENT_OUTPUT_TERMINAL = 1150047;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ENGINE_DONE_EVENT_PULSE_POLARITY = 1150048;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ENGINE_DONE_EVENT_PULSE_WIDTH = 1150049;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_ENGINE_DONE_EVENT_OUTPUT_TERMINAL = 1150050;
  NIDCPOWER_ATTRIBUTE_SOURCE_DELAY = 1150051;
  NIDCPOWER_ATTRIBUTE_SOURCE_MODE = 1150054;
  NIDCPOWER_ATTRIBUTE_AUTO_ZERO = 1150055;
  NIDCPOWER_ATTRIBUTE_FETCH_BACKLOG = 1150056;
  NIDCPOWER_ATTRIBUTE_MEASURE_WHEN = 1150057;
  NIDCPOWER_ATTRIBUTE_APERTURE_TIME = 1150058;
  NIDCPOWER_ATTRIBUTE_APERTURE_TIME_UNITS = 1150059;
  NIDCPOWER_ATTRIBUTE_OUTPUT_CONNECTED = 1150060;
  NIDCPOWER_ATTRIBUTE_OUTPUT_RESISTANCE = 1150061;
  NIDCPOWER_ATTRIBUTE_TRANSIENT_RESPONSE = 1150062;
  NIDCPOWER_ATTRIBUTE_MEASURE_RECORD_LENGTH = 1150063;
  NIDCPOWER_ATTRIBUTE_MEASURE_RECORD_LENGTH_IS_FINITE = 1150064;
  NIDCPOWER_ATTRIBUTE_MEASURE_RECORD_DELTA_TIME = 1150065;
  NIDCPOWER_ATTRIBUTE_DC_NOISE_REJECTION = 1150066;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_GAIN_BANDWIDTH = 1150067;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_COMPENSATION_FREQUENCY = 1150068;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_POLE_ZERO_RATIO = 1150069;
  NIDCPOWER_ATTRIBUTE_CURRENT_GAIN_BANDWIDTH = 1150070;
  NIDCPOWER_ATTRIBUTE_CURRENT_COMPENSATION_FREQUENCY = 1150071;
  NIDCPOWER_ATTRIBUTE_CURRENT_POLE_ZERO_RATIO = 1150072;
  NIDCPOWER_ATTRIBUTE_SELF_CALIBRATION_PERSISTENCE = 1150073;
  NIDCPOWER_ATTRIBUTE_ACTIVE_ADVANCED_SEQUENCE = 1150074;
  NIDCPOWER_ATTRIBUTE_ACTIVE_ADVANCED_SEQUENCE_STEP = 1150075;
  NIDCPOWER_ATTRIBUTE_MEASURE_BUFFER_SIZE = 1150077;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_LOOP_COUNT_IS_FINITE = 1150078;
  NIDCPOWER_ATTRIBUTE_PULSE_VOLTAGE_LEVEL = 1150080;
  NIDCPOWER_ATTRIBUTE_PULSE_CURRENT_LIMIT = 1150081;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_VOLTAGE_LEVEL = 1150082;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_CURRENT_LIMIT = 1150083;
  NIDCPOWER_ATTRIBUTE_PULSE_VOLTAGE_LEVEL_RANGE = 1150084;
  NIDCPOWER_ATTRIBUTE_PULSE_CURRENT_LIMIT_RANGE = 1150085;
  NIDCPOWER_ATTRIBUTE_PULSE_CURRENT_LEVEL = 1150086;
  NIDCPOWER_ATTRIBUTE_PULSE_VOLTAGE_LIMIT = 1150087;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_CURRENT_LEVEL = 1150088;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_VOLTAGE_LIMIT = 1150089;
  NIDCPOWER_ATTRIBUTE_PULSE_CURRENT_LEVEL_RANGE = 1150090;
  NIDCPOWER_ATTRIBUTE_PULSE_VOLTAGE_LIMIT_RANGE = 1150091;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_DELAY = 1150092;
  NIDCPOWER_ATTRIBUTE_PULSE_ON_TIME = 1150093;
  NIDCPOWER_ATTRIBUTE_PULSE_OFF_TIME = 1150094;
  NIDCPOWER_ATTRIBUTE_PULSE_TRIGGER_TYPE = 1150095;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_PULSE_TRIGGER_EDGE = 1150096;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_PULSE_TRIGGER_INPUT_TERMINAL = 1150097;
  NIDCPOWER_ATTRIBUTE_EXPORTED_PULSE_TRIGGER_OUTPUT_TERMINAL = 1150098;
  NIDCPOWER_ATTRIBUTE_PULSE_COMPLETE_EVENT_OUTPUT_TERMINAL = 1150099;
  NIDCPOWER_ATTRIBUTE_PULSE_COMPLETE_EVENT_PULSE_POLARITY = 1150100;
  NIDCPOWER_ATTRIBUTE_PULSE_COMPLETE_EVENT_PULSE_WIDTH = 1150101;
  NIDCPOWER_ATTRIBUTE_READY_FOR_PULSE_TRIGGER_EVENT_OUTPUT_TERMINAL = 1150102;
  NIDCPOWER_ATTRIBUTE_READY_FOR_PULSE_TRIGGER_EVENT_PULSE_POLARITY = 1150103;
  NIDCPOWER_ATTRIBUTE_READY_FOR_PULSE_TRIGGER_EVENT_PULSE_WIDTH = 1150104;
  NIDCPOWER_ATTRIBUTE_INTERLOCK_INPUT_OPEN = 1150105;
  NIDCPOWER_ATTRIBUTE_SERIAL_NUMBER = 1150152;
  NIDCPOWER_ATTRIBUTE_COMPLIANCE_LIMIT_SYMMETRY = 1150184;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LIMIT_HIGH = 1150185;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LIMIT_LOW = 1150186;
  NIDCPOWER_ATTRIBUTE_CURRENT_LIMIT_HIGH = 1150187;
  NIDCPOWER_ATTRIBUTE_CURRENT_LIMIT_LOW = 1150188;
  NIDCPOWER_ATTRIBUTE_PULSE_VOLTAGE_LIMIT_HIGH = 1150189;
  NIDCPOWER_ATTRIBUTE_PULSE_VOLTAGE_LIMIT_LOW = 1150190;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_VOLTAGE_LIMIT_HIGH = 1150191;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_VOLTAGE_LIMIT_LOW = 1150192;
  NIDCPOWER_ATTRIBUTE_PULSE_CURRENT_LIMIT_HIGH = 1150193;
  NIDCPOWER_ATTRIBUTE_PULSE_CURRENT_LIMIT_LOW = 1150194;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_CURRENT_LIMIT_HIGH = 1150195;
  NIDCPOWER_ATTRIBUTE_PULSE_BIAS_CURRENT_LIMIT_LOW = 1150196;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_STEP_DELTA_TIME = 1150198;
  NIDCPOWER_ATTRIBUTE_SEQUENCE_STEP_DELTA_TIME_ENABLED = 1150199;
  NIDCPOWER_ATTRIBUTE_ACTUAL_POWER_ALLOCATION = 1150205;
  NIDCPOWER_ATTRIBUTE_REQUESTED_POWER_ALLOCATION = 1150206;
  NIDCPOWER_ATTRIBUTE_POWER_ALLOCATION_MODE = 1150207;
  NIDCPOWER_ATTRIBUTE_AUTORANGE = 1150244;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_BEHAVIOR = 1150245;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_APERTURE_TIME_MODE = 1150246;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_MINIMUM_APERTURE_TIME = 1150247;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_MINIMUM_APERTURE_TIME_UNITS = 1150248;
  NIDCPOWER_ATTRIBUTE_MERGED_CHANNELS = 1150249;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_MINIMUM_CURRENT_RANGE = 1150255;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_MINIMUM_VOLTAGE_RANGE = 1150256;
  NIDCPOWER_ATTRIBUTE_AUTORANGE_THRESHOLD_MODE = 1150257;
  NIDCPOWER_ATTRIBUTE_SHUTDOWN_TRIGGER_TYPE = 1150275;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_SHUTDOWN_TRIGGER_EDGE = 1150276;
  NIDCPOWER_ATTRIBUTE_DIGITAL_EDGE_SHUTDOWN_TRIGGER_INPUT_TERMINAL = 1150277;
  NIDCPOWER_ATTRIBUTE_VOLTAGE_LEVEL = 1250001;
  NIDCPOWER_ATTRIBUTE_OVP_ENABLED = 1250002;
  NIDCPOWER_ATTRIBUTE_OVP_LIMIT = 1250003;
  NIDCPOWER_ATTRIBUTE_CURRENT_LIMIT_BEHAVIOR = 1250004;
  NIDCPOWER_ATTRIBUTE_CURRENT_LIMIT = 1250005;
  NIDCPOWER_ATTRIBUTE_OUTPUT_ENABLED = 1250006;
}

enum ApertureTimeUnits {
  APERTURE_TIME_UNITS_UNSPECIFIED = 0;
  APERTURE_TIME_UNITS_NIDCPOWER_VAL_SECONDS = 1028;
  APERTURE_TIME_UNITS_NIDCPOWER_VAL_POWER_LINE_CYCLES = 1029;
}

enum AutoZero {
  AUTO_ZERO_NIDCPOWER_VAL_OFF = 0;
  AUTO_ZERO_NIDCPOWER_VAL_ON = 1;
  AUTO_ZERO_NIDCPOWER_VAL_ONCE = 1024;
}

enum PowerLineFrequencies {
  POWER_LINE_FREQUENCIES_UNSPECIFIED = 0;
  POWER_LINE_FREQUENCIES_NIDCPOWER_VAL_50_HERTZ = 50;
  POWER_LINE_FREQUENCIES_NIDCPOWER_VAL_60_HERTZ = 60;
}

enum CurrentLimitBehavior {
  CURRENT_LIMIT_BEHAVIOR_NIDCPOWER_VAL_CURRENT_REGULATE = 0;
  CURRENT_LIMIT_BEHAVIOR_NIDCPOWER_VAL_CURRENT_TRIP = 1;
}

enum DigitalEdge {
  DIGITAL_EDGE_UNSPECIFIED = 0;
  DIGITAL_EDGE_NIDCPOWER_VAL_RISING = 1016;
  DIGITAL_EDGE_NIDCPOWER_VAL_FALLING = 1017;
}

enum ExportSignal {
  EXPORT_SIGNAL_UNSPECIFIED = 0;
  EXPORT_SIGNAL_NIDCPOWER_VAL_SOURCE_COMPLETE_EVENT = 1030;
  EXPORT_SIGNAL_NIDCPOWER_VAL_MEASURE_COMPLETE_EVENT = 1031;
  EXPORT_SIGNAL_NIDCPOWER_VAL_SEQUENCE_ITERATION_COMPLETE_EVENT = 1032;
  EXPORT_SIGNAL_NIDCPOWER_VAL_SEQUENCE_ENGINE_DONE_EVENT = 1033;
  EXPORT_SIGNAL_NIDCPOWER_VAL_PULSE_COMPLETE_EVENT = 1051;
  EXPORT_SIGNAL_NIDCPOWER_VAL_READY_FOR_PULSE_TRIGGER_EVENT = 1052;
  EXPORT_SIGNAL_NIDCPOWER_VAL_START_TRIGGER = 1034;
  EXPORT_SIGNAL_NIDCPOWER_VAL_SOURCE_TRIGGER = 1035;
  EXPORT_SIGNAL_NIDCPOWER_VAL_MEASURE_TRIGGER = 1036;
  EXPORT_SIGNAL_NIDCPOWER_VAL_SEQUENCE_ADVANCE_TRIGGER = 1037;
  EXPORT_SIGNAL_NIDCPOWER_VAL_PULSE_TRIGGER = 1053;
  EXPORT_SIGNAL_NIDCPOWER_VAL_SHUTDOWN_TRIGGER = 1118;
}

enum MeasurementTypes {
  MEASUREMENT_TYPES_NIDCPOWER_VAL_MEASURE_CURRENT = 0;
  MEASUREMENT_TYPES_NIDCPOWER_VAL_MEASURE_VOLTAGE = 1;
}

enum OutputFunction {
  OUTPUT_FUNCTION_UNSPECIFIED = 0;
  OUTPUT_FUNCTION_NIDCPOWER_VAL_DC_VOLTAGE = 1006;
  OUTPUT_FUNCTION_NIDCPOWER_VAL_DC_CURRENT = 1007;
  OUTPUT_FUNCTION_NIDCPOWER_VAL_PULSE_VOLTAGE = 1049;
  OUTPUT_FUNCTION_NIDCPOWER_VAL_PULSE_CURRENT = 1050;
}

enum OutputStates {
  OUTPUT_STATES_NIDCPOWER_VAL_OUTPUT_CONSTANT_VOLTAGE = 0;
  OUTPUT_STATES_NIDCPOWER_VAL_OUTPUT_CONSTANT_CURRENT = 1;
  OUTPUT_STATES_NIDCPOWER_VAL_OUTPUT_OVER_VOLTAGE = 2;
  OUTPUT_STATES_NIDCPOWER_VAL_OUTPUT_OVER_CURRENT = 3;
  OUTPUT_STATES_NIDCPOWER_VAL_OUTPUT_UNREGULATED = 4;
}

enum Sense {
  SENSE_UNSPECIFIED = 0;
  SENSE_NIDCPOWER_VAL_LOCAL = 1008;
  SENSE_NIDCPOWER_VAL_REMOTE = 1009;
}

enum SourceMode {
  SOURCE_MODE_UNSPECIFIED = 0;
  SOURCE_MODE_NIDCPOWER_VAL_SINGLE_POINT = 1020;
  SOURCE_MODE_NIDCPOWER_VAL_SEQUENCE = 1021;
}

enum NiDCPowerInt32AttributeValues {
  option allow_alias = true;
  NIDCPOWER_INT32_UNSPECIFIED = 0;
  NIDCPOWER_INT32_APERTURE_TIME_UNITS_VAL_SECONDS = 1028;
  NIDCPOWER_INT32_APERTURE_TIME_UNITS_VAL_POWER_LINE_CYCLES = 1029;
  NIDCPOWER_INT32_AUTO_ZERO_VAL_OFF = 0;
  NIDCPOWER_INT32_AUTO_ZERO_VAL_ON = 1;
  NIDCPOWER_INT32_AUTO_ZERO_VAL_ONCE = 1024;
  NIDCPOWER_INT32_AUTORANGE_APERTURE_TIME_MODE_VAL_APERTURE_TIME_AUTO = 1110;
  NIDCPOWER_INT32_AUTORANGE_APERTURE_TIME_MODE_VAL_APERTURE_TIME_CUSTOM = 1111;
  NIDCPOWER_INT32_AUTORANGE_BEHAVIOR_VAL_RANGE_UP_TO_LIMIT_THEN_DOWN = 1107;
  NIDCPOWER_INT32_AUTORANGE_BEHAVIOR_VAL_RANGE_UP = 1108;
  NIDCPOWER_INT32_AUTORANGE_BEHAVIOR_VAL_RANGE_UP_AND_DOWN = 1109;
  NIDCPOWER_INT32_AUTORANGE_THRESHOLD_MODE_VAL_THRESHOLD_MODE_NORMAL = 1112;
  NIDCPOWER_INT32_AUTORANGE_THRESHOLD_MODE_VAL_THRESHOLD_MODE_FAST_STEP = 1113;
  NIDCPOWER_INT32_AUTORANGE_THRESHOLD_MODE_VAL_THRESHOLD_MODE_HIGH_HYSTERESIS = 1114;
  NIDCPOWER_INT32_AUTORANGE_THRESHOLD_MODE_VAL_THRESHOLD_MODE_MEDIUM_HYSTERESIS = 1115;
  NIDCPOWER_INT32_AUTORANGE_THRESHOLD_MODE_VAL_THRESHOLD_MODE_HOLD = 1116;
  NIDCPOWER_INT32_COMPLIANCE_LIMIT_SYMMETRY_VAL_SYMMETRIC = 0;
  NIDCPOWER_INT32_COMPLIANCE_LIMIT_SYMMETRY_VAL_ASYMMETRIC = 1;
  NIDCPOWER_INT32_CURRENT_LIMIT_BEHAVIOR_VAL_CURRENT_REGULATE = 0;
  NIDCPOWER_INT32_CURRENT_LIMIT_BEHAVIOR_VAL_CURRENT_TRIP = 1;
  NIDCPOWER_INT32_DC_NOISE_REJECTION_VAL_DC_NOISE_REJECTION_SECOND_ORDER = 1043;
  NIDCPOWER_INT32_DC_NOISE_REJECTION_VAL_DC_NOISE_REJECTION_NORMAL = 1044;
  NIDCPOWER_INT32_DIGITAL_EDGE_VAL_RISING = 1016;
  NIDCPOWER_INT32_DIGITAL_EDGE_VAL_FALLING = 1017;
  NIDCPOWER_INT32_MEASURE_WHEN_VAL_AUTOMATICALLY_AFTER_SOURCE_COMPLETE = 1025;
  NIDCPOWER_INT32_MEASURE_WHEN_VAL_ON_DEMAND = 1026;
  NIDCPOWER_INT32_MEASURE_WHEN_VAL_ON_MEASURE_TRIGGER = 1027;
  NIDCPOWER_INT32_OUTPUT_CAPACITANCE_VAL_LOW = 1010;
  NIDCPOWER_INT32_OUTPUT_CAPACITANCE_VAL_HIGH = 1011;
  NIDCPOWER_INT32_OUTPUT_FUNCTION_VAL_DC_VOLTAGE = 1006;
  NIDCPOWER_INT32_OUTPUT_FUNCTION_VAL_DC_CURRENT = 1007;
  NIDCPOWER_INT32_OUTPUT_FUNCTION_VAL_PULSE_VOLTAGE = 1049;
  NIDCPOWER_INT32_OUTPUT_FUNCTION_VAL_PULSE_CURRENT = 1050;
  NIDCPOWER_INT32_POLARITY_VAL_ACTIVE_HIGH = 1018;
  NIDCPOWER_INT32_POLARITY_VAL_ACTIVE_LOW = 1019;
  NIDCPOWER_INT32_POWER_ALLOCATION_MODE_VAL_DISABLED = 1058;
  NIDCPOWER_INT32_POWER_ALLOCATION_MODE_VAL_AUTOMATIC = 1059;
  NIDCPOWER_INT32_POWER_ALLOCATION_MODE_VAL_MANUAL = 1060;
  NIDCPOWER_INT32_POWER_SOURCE_VAL_INTERNAL = 1003;
  NIDCPOWER_INT32_POWER_SOURCE_VAL_AUXILIARY = 1004;
  NIDCPOWER_INT32_POWER_SOURCE_VAL_AUTOMATIC = 1005;
  NIDCPOWER_INT32_POWER_SOURCE_IN_USE_VAL_INTERNAL = 1003;
  NIDCPOWER_INT32_POWER_SOURCE_IN_USE_VAL_AUXILIARY = 1004;
  NIDCPOWER_INT32_SELF_CALIBRATION_PERSISTENCE_VAL_KEEP_IN_MEMORY = 1045;
  NIDCPOWER_INT32_SELF_CALIBRATION_PERSISTENCE_VAL_WRITE_TO_EEPROM = 1046;
  NIDCPOWER_INT32_SENSE_VAL_LOCAL = 1008;
  NIDCPOWER_INT32_SENSE_VAL_REMOTE = 1009;
  NIDCPOWER_INT32_SOURCE_MODE_VAL_SINGLE_POINT = 1020;
  NIDCPOWER_INT32_SOURCE_MODE_VAL_SEQUENCE = 1021;
  NIDCPOWER_INT32_TRANSIENT_RESPONSE_VAL_NORMAL = 1038;
  NIDCPOWER_INT32_TRANSIENT_RESPONSE_VAL_FAST = 1039;
  NIDCPOWER_INT32_TRANSIENT_RESPONSE_VAL_SLOW = 1041;
  NIDCPOWER_INT32_TRANSIENT_RESPONSE_VAL_CUSTOM = 1042;
  NIDCPOWER_INT32_TRIGGER_TYPE_VAL_NONE = 1012;
  NIDCPOWER_INT32_TRIGGER_TYPE_VAL_DIGITAL_EDGE = 1014;
  NIDCPOWER_INT32_TRIGGER_TYPE_VAL_SOFTWARE_EDGE = 1015;
}

enum NiDCPowerReal64AttributeValues {
  NIDCPOWER_REAL64_UNSPECIFIED = 0;
  NIDCPOWER_REAL64_POWER_LINE_FREQUENCIES_VAL_50_HERTZ = 50;
  NIDCPOWER_REAL64_POWER_LINE_FREQUENCIES_VAL_60_HERTZ = 60;
}

message AbortWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message AbortWithChannelsResponse {
  int32 status = 1;
}

message CommitWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message CommitWithChannelsResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeMeasureTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string input_terminal = 3;
  oneof edge_enum {
    DigitalEdge edge = 4;
    sint32 edge_raw = 5;
  }
}

message ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgePulseTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string input_terminal = 3;
  oneof edge_enum {
    DigitalEdge edge = 4;
    sint32 edge_raw = 5;
  }
}

message ConfigureDigitalEdgePulseTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string input_terminal = 3;
  oneof edge_enum {
    DigitalEdge edge = 4;
    sint32 edge_raw = 5;
  }
}

message ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeShutdownTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string input_terminal = 3;
  oneof edge_enum {
    DigitalEdge edge = 4;
    sint32 edge_raw = 5;
  }
}

message ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeSourceTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string input_terminal = 3;
  oneof edge_enum {
    DigitalEdge edge = 4;
    sint32 edge_raw = 5;
  }
}

message ConfigureDigitalEdgeSourceTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeStartTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string input_terminal = 3;
  oneof edge_enum {
    DigitalEdge edge = 4;
    sint32 edge_raw = 5;
  }
}

message ConfigureDigitalEdgeStartTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureOvpRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  bool enabled = 3;
  double limit = 4;
}

message ConfigureOvpResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeMeasureTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgePulseTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ConfigureSoftwareEdgePulseTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeShutdownTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeSourceTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeStartTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ConfigureSoftwareEdgeStartTriggerWithChannelsResponse {
  int32 status = 1;
}

message ConfigureSourceModeWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof source_mode_enum {
    SourceMode source_mode = 3;
    sint32 source_mode_raw = 4;
  }
}

message ConfigureSourceModeWithChannelsResponse {
  int32 status = 1;
}

message CreateAdvancedSequenceCommitStepWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  bool set_as_active_step = 3;
}

message CreateAdvancedSequenceCommitStepWithChannelsResponse {
  int32 status = 1;
}

message CreateAdvancedSequenceStepWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  bool set_as_active_step = 3;
}

message CreateAdvancedSequenceStepWithChannelsResponse {
  int32 status = 1;
}

message CreateAdvancedSequenceWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string sequence_name = 3;
  repeated sint32 attribute_ids = 4;
  bool set_as_active_sequence = 5;
}

message CreateAdvancedSequenceWithChannelsResponse {
  int32 status = 1;
}

message CreateAdvancedSequenceRequest {
  nidevice_grpc.Session vi = 1;
  string sequence_name = 2;
  repeated sint32 attribute_ids = 3;
  bool set_as_active_sequence = 4;
}

message CreateAdvancedSequenceResponse {
  int32 status = 1;
}

message DeleteAdvancedSequenceWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  string sequence_name = 3;
}

message DeleteAdvancedSequenceWithChannelsResponse {
  int32 status = 1;
}

message DisablePulseTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message DisablePulseTriggerWithChannelsResponse {
  int32 status = 1;
}

message DisableSequenceAdvanceTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message DisableSequenceAdvanceTriggerWithChannelsResponse {
  int32 status = 1;
}

message DisableShutdownTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message DisableShutdownTriggerWithChannelsResponse {
  int32 status = 1;
}

message DisableSourceTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message DisableSourceTriggerWithChannelsResponse {
  int32 status = 1;
}

message DisableStartTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message DisableStartTriggerWithChannelsResponse {
  int32 status = 1;
}

message ErrorQueryRequest {
  nidevice_grpc.Session vi = 1;
  string error_message = 2;
}

message ErrorQueryResponse {
  int32 status = 1;
  sint32 error_code = 2;
}

message ExportSignalWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof signal_enum {
    ExportSignal signal = 3;
    sint32 signal_raw = 4;
  }
  string signal_identifier = 5;
  string output_terminal = 6;
}

message ExportSignalWithChannelsResponse {
  int32 status = 1;
}

message InitializeWithIndependentChannelsRequest {
  string session_name = 1;
  string resource_name = 2;
  bool reset = 3;
  string option_string = 4;
}

message InitializeWithIndependentChannelsResponse {
  int32 status = 1;
  nidevice_grpc.Session vi = 2;
}

message InitiateWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message InitiateWithChannelsResponse {
  int32 status = 1;
}

message InvalidateAllAttributesRequest {
  nidevice_grpc.Session vi = 1;
}

message InvalidateAllAttributesResponse {
  int32 status = 1;
}

message ResetWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message ResetWithChannelsResponse {
  int32 status = 1;
}

message SendSoftwareEdgeTriggerWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof trigger_enum {
    ExportSignal trigger = 3;
    sint32 trigger_raw = 4;
  }
}

message SendSoftwareEdgeTriggerWithChannelsResponse {
  int32 status = 1;
}

message WaitForEventWithChannelsRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof event_id_enum {
    ExportSignal event_id = 3;
    sint32 event_id_raw = 4;
  }
  double timeout = 5;
}

message WaitForEventWithChannelsResponse {
  int32 status = 1;
}

message AbortRequest {
  nidevice_grpc.Session vi = 1;
}

message AbortResponse {
  int32 status = 1;
}

message CalSelfCalibrateRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message CalSelfCalibrateResponse {
  int32 status = 1;
}

message ClearErrorRequest {
  nidevice_grpc.Session vi = 1;
}

message ClearErrorResponse {
  int32 status = 1;
}

message ClearInterchangeWarningsRequest {
  nidevice_grpc.Session vi = 1;
}

message ClearInterchangeWarningsResponse {
  int32 status = 1;
}

message CloseRequest {
  nidevice_grpc.Session vi = 1;
}

message CloseResponse {
  int32 status = 1;
}

message CommitRequest {
  nidevice_grpc.Session vi = 1;
}

message CommitResponse {
  int32 status = 1;
}

message ConfigureApertureTimeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double aperture_time = 3;
  oneof units_enum {
    ApertureTimeUnits units = 4;
    sint32 units_raw = 5;
  }
}

message ConfigureApertureTimeResponse {
  int32 status = 1;
}

message ConfigureAutoZeroRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof auto_zero_enum {
    AutoZero auto_zero = 3;
    sint32 auto_zero_raw = 4;
  }
}

message ConfigureAutoZeroResponse {
  int32 status = 1;
}

message ConfigureCurrentLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double level = 3;
}

message ConfigureCurrentLevelResponse {
  int32 status = 1;
}

message ConfigureCurrentLevelRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigureCurrentLevelRangeResponse {
  int32 status = 1;
}

message ConfigureCurrentLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof behavior_enum {
    CurrentLimitBehavior behavior = 3;
    sint32 behavior_raw = 4;
  }
  double limit = 5;
}

message ConfigureCurrentLimitResponse {
  int32 status = 1;
}

message ConfigureCurrentLimitRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigureCurrentLimitRangeResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeMeasureTriggerRequest {
  nidevice_grpc.Session vi = 1;
  string input_terminal = 2;
  oneof edge_enum {
    DigitalEdge edge = 3;
    sint32 edge_raw = 4;
  }
}

message ConfigureDigitalEdgeMeasureTriggerResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgePulseTriggerRequest {
  nidevice_grpc.Session vi = 1;
  string input_terminal = 2;
  oneof edge_enum {
    DigitalEdge edge = 3;
    sint32 edge_raw = 4;
  }
}

message ConfigureDigitalEdgePulseTriggerResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeSequenceAdvanceTriggerRequest {
  nidevice_grpc.Session vi = 1;
  string input_terminal = 2;
  oneof edge_enum {
    DigitalEdge edge = 3;
    sint32 edge_raw = 4;
  }
}

message ConfigureDigitalEdgeSequenceAdvanceTriggerResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeSourceTriggerRequest {
  nidevice_grpc.Session vi = 1;
  string input_terminal = 2;
  oneof edge_enum {
    DigitalEdge edge = 3;
    sint32 edge_raw = 4;
  }
}

message ConfigureDigitalEdgeSourceTriggerResponse {
  int32 status = 1;
}

message ConfigureDigitalEdgeStartTriggerRequest {
  nidevice_grpc.Session vi = 1;
  string input_terminal = 2;
  oneof edge_enum {
    DigitalEdge edge = 3;
    sint32 edge_raw = 4;
  }
}

message ConfigureDigitalEdgeStartTriggerResponse {
  int32 status = 1;
}

message ConfigureOutputEnabledRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  bool enabled = 3;
}

message ConfigureOutputEnabledResponse {
  int32 status = 1;
}

message ConfigureOutputFunctionRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof function_enum {
    OutputFunction function = 3;
    sint32 function_raw = 4;
  }
}

message ConfigureOutputFunctionResponse {
  int32 status = 1;
}

message ConfigureOutputResistanceRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double resistance = 3;
}

message ConfigureOutputResistanceResponse {
  int32 status = 1;
}

message ConfigurePowerLineFrequencyRequest {
  nidevice_grpc.Session vi = 1;
  oneof powerline_frequency_enum {
    PowerLineFrequencies powerline_frequency = 2;
    double powerline_frequency_raw = 3;
  }
}

message ConfigurePowerLineFrequencyResponse {
  int32 status = 1;
}

message ConfigurePulseBiasCurrentLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double level = 3;
}

message ConfigurePulseBiasCurrentLevelResponse {
  int32 status = 1;
}

message ConfigurePulseBiasCurrentLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double limit = 3;
}

message ConfigurePulseBiasCurrentLimitResponse {
  int32 status = 1;
}

message ConfigurePulseBiasVoltageLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double level = 3;
}

message ConfigurePulseBiasVoltageLevelResponse {
  int32 status = 1;
}

message ConfigurePulseBiasVoltageLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double limit = 3;
}

message ConfigurePulseBiasVoltageLimitResponse {
  int32 status = 1;
}

message ConfigurePulseCurrentLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double level = 3;
}

message ConfigurePulseCurrentLevelResponse {
  int32 status = 1;
}

message ConfigurePulseCurrentLevelRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigurePulseCurrentLevelRangeResponse {
  int32 status = 1;
}

message ConfigurePulseCurrentLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double limit = 3;
}

message ConfigurePulseCurrentLimitResponse {
  int32 status = 1;
}

message ConfigurePulseCurrentLimitRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigurePulseCurrentLimitRangeResponse {
  int32 status = 1;
}

message ConfigurePulseVoltageLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double level = 3;
}

message ConfigurePulseVoltageLevelResponse {
  int32 status = 1;
}

message ConfigurePulseVoltageLevelRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigurePulseVoltageLevelRangeResponse {
  int32 status = 1;
}

message ConfigurePulseVoltageLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double limit = 3;
}

message ConfigurePulseVoltageLimitResponse {
  int32 status = 1;
}

message ConfigurePulseVoltageLimitRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigurePulseVoltageLimitRangeResponse {
  int32 status = 1;
}

message ConfigureSenseRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof sense_enum {
    Sense sense = 3;
    sint32 sense_raw = 4;
  }
}

message ConfigureSenseResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeMeasureTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message ConfigureSoftwareEdgeMeasureTriggerResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgePulseTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message ConfigureSoftwareEdgePulseTriggerResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeSequenceAdvanceTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeSourceTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message ConfigureSoftwareEdgeSourceTriggerResponse {
  int32 status = 1;
}

message ConfigureSoftwareEdgeStartTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message ConfigureSoftwareEdgeStartTriggerResponse {
  int32 status = 1;
}

message ConfigureSourceModeRequest {
  nidevice_grpc.Session vi = 1;
  oneof source_mode_enum {
    SourceMode source_mode = 2;
    sint32 source_mode_raw = 3;
  }
}

message ConfigureSourceModeResponse {
  int32 status = 1;
}

message ConfigureVoltageLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double level = 3;
}

message ConfigureVoltageLevelResponse {
  int32 status = 1;
}

message ConfigureVoltageLevelRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigureVoltageLevelRangeResponse {
  int32 status = 1;
}

message ConfigureVoltageLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double limit = 3;
}

message ConfigureVoltageLimitResponse {
  int32 status = 1;
}

message ConfigureVoltageLimitRangeRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double range = 3;
}

message ConfigureVoltageLimitRangeResponse {
  int32 status = 1;
}

message CreateAdvancedSequenceStepRequest {
  nidevice_grpc.Session vi = 1;
  bool set_as_active_step = 2;
}

message CreateAdvancedSequenceStepResponse {
  int32 status = 1;
}

message DeleteAdvancedSequenceRequest {
  nidevice_grpc.Session vi = 1;
  string sequence_name = 2;
}

message DeleteAdvancedSequenceResponse {
  int32 status = 1;
}

message DisableRequest {
  nidevice_grpc.Session vi = 1;
}

message DisableResponse {
  int32 status = 1;
}

message DisablePulseTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message DisablePulseTriggerResponse {
  int32 status = 1;
}

message DisableSequenceAdvanceTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message DisableSequenceAdvanceTriggerResponse {
  int32 status = 1;
}

message DisableSourceTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message DisableSourceTriggerResponse {
  int32 status = 1;
}

message DisableStartTriggerRequest {
  nidevice_grpc.Session vi = 1;
}

message DisableStartTriggerResponse {
  int32 status = 1;
}

message ErrorMessageRequest {
  nidevice_grpc.Session vi = 1;
  sint32 error_code = 2;
}

message ErrorMessageResponse {
  int32 status = 1;
  string error_message = 2;
}

message ExportAttributeConfigurationBufferRequest {
  nidevice_grpc.Session vi = 1;
}

message ExportAttributeConfigurationBufferResponse {
  int32 status = 1;
  repeated fixed64 configuration = 2;
}

message ExportAttributeConfigurationFileRequest {
  nidevice_grpc.Session vi = 1;
  string file_path = 2;
}

message ExportAttributeConfigurationFileResponse {
  int32 status = 1;
}

message ExportSignalRequest {
  nidevice_grpc.Session vi = 1;
  oneof signal_enum {
    ExportSignal signal = 2;
    sint32 signal_raw = 3;
  }
  string signal_identifier = 4;
  string output_terminal = 5;
}

message ExportSignalResponse {
  int32 status = 1;
}

message FetchMultipleRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double timeout = 3;
  sint32 count = 4;
}

message FetchMultipleResponse {
  int32 status = 1;
  repeated double voltage_measurements = 2;
  repeated double current_measurements = 3;
  repeated bool in_compliance = 4;
  sint32 actual_count = 5;
}

message GetAttributeViBooleanRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
}

message GetAttributeViBooleanResponse {
  int32 status = 1;
  bool attribute_value = 2;
}

message GetAttributeViInt32Request {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
}

message GetAttributeViInt32Response {
  int32 status = 1;
  sint32 attribute_value = 2;
}

message GetAttributeViInt64Request {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
}

message GetAttributeViInt64Response {
  int32 status = 1;
  int64 attribute_value = 2;
}

message GetAttributeViReal64Request {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
}

message GetAttributeViReal64Response {
  int32 status = 1;
  double attribute_value = 2;
}

message GetAttributeViSessionRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
}

message GetAttributeViSessionResponse {
  int32 status = 1;
  nidevice_grpc.Session attribute_value = 2;
}

message GetAttributeViStringRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
}

message GetAttributeViStringResponse {
  int32 status = 1;
  string attribute_value = 2;
}

message GetChannelNameRequest {
  nidevice_grpc.Session vi = 1;
  sint32 index = 2;
}

message GetChannelNameResponse {
  int32 status = 1;
  string channel_name = 2;
}

message GetChannelNameFromStringRequest {
  nidevice_grpc.Session vi = 1;
  string index = 2;
}

message GetChannelNameFromStringResponse {
  int32 status = 1;
  string channel_name = 2;
}

message GetErrorRequest {
  nidevice_grpc.Session vi = 1;
}

message GetErrorResponse {
  int32 status = 1;
  sint32 code = 2;
  string description = 3;
}

message GetExtCalLastDateAndTimeRequest {
  nidevice_grpc.Session vi = 1;
}

message GetExtCalLastDateAndTimeResponse {
  int32 status = 1;
  sint32 year = 2;
  sint32 month = 3;
  sint32 day = 4;
  sint32 hour = 5;
  sint32 minute = 6;
}

message GetExtCalLastTempRequest {
  nidevice_grpc.Session vi = 1;
}

message GetExtCalLastTempResponse {
  int32 status = 1;
  double temperature = 2;
}

message GetExtCalRecommendedIntervalRequest {
  nidevice_grpc.Session vi = 1;
}

message GetExtCalRecommendedIntervalResponse {
  int32 status = 1;
  sint32 months = 2;
}

message GetNextCoercionRecordRequest {
  nidevice_grpc.Session vi = 1;
}

message GetNextCoercionRecordResponse {
  int32 status = 1;
  string coercion_record = 2;
}

message GetNextInterchangeWarningRequest {
  nidevice_grpc.Session vi = 1;
}

message GetNextInterchangeWarningResponse {
  int32 status = 1;
  string interchange_warning = 2;
}

message GetSelfCalLastDateAndTimeRequest {
  nidevice_grpc.Session vi = 1;
}

message GetSelfCalLastDateAndTimeResponse {
  int32 status = 1;
  sint32 year = 2;
  sint32 month = 3;
  sint32 day = 4;
  sint32 hour = 5;
  sint32 minute = 6;
}

message GetSelfCalLastTempRequest {
  nidevice_grpc.Session vi = 1;
}

message GetSelfCalLastTempResponse {
  int32 status = 1;
  double temperature = 2;
}

message ImportAttributeConfigurationBufferRequest {
  nidevice_grpc.Session vi = 1;
  repeated fixed64 configuration = 2;
}

message ImportAttributeConfigurationBufferResponse {
  int32 status = 1;
}

message ImportAttributeConfigurationFileRequest {
  nidevice_grpc.Session vi = 1;
  string file_path = 2;
}

message ImportAttributeConfigurationFileResponse {
  int32 status = 1;
}

message InitializeWithChannelsRequest {
  string session_name = 1;
  string resource_name = 2;
  string channels = 3;
  bool reset = 4;
  string option_string = 5;
}

message InitializeWithChannelsResponse {
  int32 status = 1;
  nidevice_grpc.Session vi = 2;
}

message InitiateRequest {
  nidevice_grpc.Session vi = 1;
}

message InitiateResponse {
  int32 status = 1;
}

message MeasureRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof measurement_type_enum {
    MeasurementTypes measurement_type = 3;
    sint32 measurement_type_raw = 4;
  }
}

message MeasureResponse {
  int32 status = 1;
  double measurement = 2;
}

message MeasureMultipleRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message MeasureMultipleResponse {
  int32 status = 1;
  repeated double voltage_measurements = 2;
  repeated double current_measurements = 3;
}

message QueryInComplianceRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
}

message QueryInComplianceResponse {
  int32 status = 1;
  bool in_compliance = 2;
}

message QueryMaxCurrentLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double voltage_level = 3;
}

message QueryMaxCurrentLimitResponse {
  int32 status = 1;
  double max_current_limit = 2;
}

message QueryMaxVoltageLevelRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double current_limit = 3;
}

message QueryMaxVoltageLevelResponse {
  int32 status = 1;
  double max_voltage_level = 2;
}

message QueryMinCurrentLimitRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  double voltage_level = 3;
}

message QueryMinCurrentLimitResponse {
  int32 status = 1;
  double min_current_limit = 2;
}

message QueryOutputStateRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  oneof output_state_enum {
    OutputStates output_state = 3;
    sint32 output_state_raw = 4;
  }
}

message QueryOutputStateResponse {
  int32 status = 1;
  bool in_state = 2;
}

message ReadCurrentTemperatureRequest {
  nidevice_grpc.Session vi = 1;
}

message ReadCurrentTemperatureResponse {
  int32 status = 1;
  double temperature = 2;
}

message ResetRequest {
  nidevice_grpc.Session vi = 1;
}

message ResetResponse {
  int32 status = 1;
}

message ResetDeviceRequest {
  nidevice_grpc.Session vi = 1;
}

message ResetDeviceResponse {
  int32 status = 1;
}

message ResetInterchangeCheckRequest {
  nidevice_grpc.Session vi = 1;
}

message ResetInterchangeCheckResponse {
  int32 status = 1;
}

message ResetWithDefaultsRequest {
  nidevice_grpc.Session vi = 1;
}

message ResetWithDefaultsResponse {
  int32 status = 1;
}

message RevisionQueryRequest {
  nidevice_grpc.Session vi = 1;
}

message RevisionQueryResponse {
  int32 status = 1;
  string instrument_driver_revision = 2;
  string firmware_revision = 3;
}

message SelfTestRequest {
  nidevice_grpc.Session vi = 1;
}

message SelfTestResponse {
  int32 status = 1;
  sint32 self_test_result = 2;
  string self_test_message = 3;
}

message SendSoftwareEdgeTriggerRequest {
  nidevice_grpc.Session vi = 1;
  oneof trigger_enum {
    ExportSignal trigger = 2;
    sint32 trigger_raw = 3;
  }
}

message SendSoftwareEdgeTriggerResponse {
  int32 status = 1;
}

message SetAttributeViBooleanRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
  bool attribute_value = 4;
}

message SetAttributeViBooleanResponse {
  int32 status = 1;
}

message SetAttributeViInt32Request {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
  oneof attribute_value_enum {
    NiDCPowerInt32AttributeValues attribute_value = 4;
    sint32 attribute_value_raw = 5;
  }
}

message SetAttributeViInt32Response {
  int32 status = 1;
}

message SetAttributeViInt64Request {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
  int64 attribute_value_raw = 4;
}

message SetAttributeViInt64Response {
  int32 status = 1;
}

message SetAttributeViReal64Request {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
  oneof attribute_value_enum {
    NiDCPowerReal64AttributeValues attribute_value = 4;
    double attribute_value_raw = 5;
  }
}

message SetAttributeViReal64Response {
  int32 status = 1;
}

message SetAttributeViSessionRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
  nidevice_grpc.Session attribute_value = 4;
}

message SetAttributeViSessionResponse {
  int32 status = 1;
}

message SetAttributeViStringRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  NiDCPowerAttribute attribute_id = 3;
  string attribute_value_raw = 4;
}

message SetAttributeViStringResponse {
  int32 status = 1;
}

message SetSequenceRequest {
  nidevice_grpc.Session vi = 1;
  string channel_name = 2;
  repeated double values = 3;
  repeated double source_delays = 4;
}

message SetSequenceResponse {
  int32 status = 1;
}

message WaitForEventRequest {
  nidevice_grpc.Session vi = 1;
  oneof event_id_enum {
    ExportSignal event_id = 2;
    sint32 event_id_raw = 3;
  }
  double timeout = 4;
}

message WaitForEventResponse {
  int32 status = 1;
}

