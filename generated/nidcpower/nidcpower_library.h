//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DCPower
//---------------------------------------------------------------------
#ifndef NIDCPOWER_GRPC_LIBRARY_H
#define NIDCPOWER_GRPC_LIBRARY_H

#include "nidcpower_library_interface.h"

#include <server/shared_library.h>

namespace nidcpower_grpc {

class NiDCPowerLibrary : public nidcpower_grpc::NiDCPowerLibraryInterface {
 public:
  NiDCPowerLibrary();
  virtual ~NiDCPowerLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  ViStatus AbortWithChannels(ViSession vi, ViConstString channelName);
  ViStatus CommitWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureDigitalEdgeMeasureTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgePulseTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeShutdownTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeSourceTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeStartTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureOvp(ViSession vi, ViConstString channelName, ViBoolean enabled, ViReal64 limit);
  ViStatus ConfigureSoftwareEdgeMeasureTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureSoftwareEdgePulseTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureSoftwareEdgeShutdownTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureSoftwareEdgeSourceTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureSoftwareEdgeStartTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ConfigureSourceModeWithChannels(ViSession vi, ViConstString channelName, ViInt32 sourceMode);
  ViStatus CreateAdvancedSequenceCommitStepWithChannels(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep);
  ViStatus CreateAdvancedSequenceStepWithChannels(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep);
  ViStatus CreateAdvancedSequenceWithChannels(ViSession vi, ViConstString channelName, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence);
  ViStatus CreateAdvancedSequence(ViSession vi, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence);
  ViStatus DeleteAdvancedSequenceWithChannels(ViSession vi, ViConstString channelName, ViConstString sequenceName);
  ViStatus DisablePulseTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus DisableSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus DisableShutdownTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus DisableSourceTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus DisableStartTriggerWithChannels(ViSession vi, ViConstString channelName);
  ViStatus ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256]);
  ViStatus ExportSignalWithChannels(ViSession vi, ViConstString channelName, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal);
  ViStatus InitializeWithIndependentChannels(ViRsrc resourceName, ViBoolean reset, ViConstString optionString, ViSession* vi);
  ViStatus InitiateWithChannels(ViSession vi, ViConstString channelName);
  ViStatus InvalidateAllAttributes(ViSession vi);
  ViStatus ResetWithChannels(ViSession vi, ViConstString channelName);
  ViStatus SendSoftwareEdgeTriggerWithChannels(ViSession vi, ViConstString channelName, ViInt32 trigger);
  ViStatus WaitForEventWithChannels(ViSession vi, ViConstString channelName, ViInt32 eventId, ViReal64 timeout);
  ViStatus Abort(ViSession vi);
  ViStatus CalAdjustCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 requestedOutputs[], ViReal64 measuredOutputs[]);
  ViStatus CalAdjustCurrentMeasurement(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 reportedOutputs[], ViReal64 measuredOutputs[]);
  ViStatus CalAdjustInternalReference(ViSession vi, ViInt32 internalReference, ViReal64 adjustedInternalReference);
  ViStatus CalAdjustOutputResistance(ViSession vi, ViConstString channelName, ViUInt32 numberOfMeasurements, ViReal64 requestedOutputs[], ViReal64 measuredOutputs[]);
  ViStatus CalAdjustResidualCurrentOffset(ViSession vi, ViConstString channelName);
  ViStatus CalAdjustResidualVoltageOffset(ViSession vi, ViConstString channelName);
  ViStatus CalAdjustVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 requestedOutputs[], ViReal64 measuredOutputs[]);
  ViStatus CalAdjustVoltageMeasurement(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 reportedOutputs[], ViReal64 measuredOutputs[]);
  ViStatus CalSelfCalibrate(ViSession vi, ViConstString channelName);
  ViStatus ChangeExtCalPassword(ViSession vi, ViConstString oldPassword, ViConstString newPassword);
  ViStatus ClearError(ViSession vi);
  ViStatus ClearInterchangeWarnings(ViSession vi);
  ViStatus Close(ViSession vi);
  ViStatus CloseExtCal(ViSession vi, ViInt32 action);
  ViStatus Commit(ViSession vi);
  ViStatus ConfigureApertureTime(ViSession vi, ViConstString channelName, ViReal64 apertureTime, ViInt32 units);
  ViStatus ConfigureAutoZero(ViSession vi, ViConstString channelName, ViInt32 autoZero);
  ViStatus ConfigureCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level);
  ViStatus ConfigureCurrentLevelRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigureCurrentLimit(ViSession vi, ViConstString channelName, ViInt32 behavior, ViReal64 limit);
  ViStatus ConfigureCurrentLimitRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigureDigitalEdgeMeasureTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgePulseTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeSequenceAdvanceTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeSourceTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  ViStatus ConfigureOutputEnabled(ViSession vi, ViConstString channelName, ViBoolean enabled);
  ViStatus ConfigureOutputFunction(ViSession vi, ViConstString channelName, ViInt32 function);
  ViStatus ConfigureOutputResistance(ViSession vi, ViConstString channelName, ViReal64 resistance);
  ViStatus ConfigurePowerLineFrequency(ViSession vi, ViReal64 powerlineFrequency);
  ViStatus ConfigurePulseBiasCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level);
  ViStatus ConfigurePulseBiasCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 limit);
  ViStatus ConfigurePulseBiasVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level);
  ViStatus ConfigurePulseBiasVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit);
  ViStatus ConfigurePulseCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level);
  ViStatus ConfigurePulseCurrentLevelRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigurePulseCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 limit);
  ViStatus ConfigurePulseCurrentLimitRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigurePulseVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level);
  ViStatus ConfigurePulseVoltageLevelRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigurePulseVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit);
  ViStatus ConfigurePulseVoltageLimitRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigureSense(ViSession vi, ViConstString channelName, ViInt32 sense);
  ViStatus ConfigureSoftwareEdgeMeasureTrigger(ViSession vi);
  ViStatus ConfigureSoftwareEdgePulseTrigger(ViSession vi);
  ViStatus ConfigureSoftwareEdgeSequenceAdvanceTrigger(ViSession vi);
  ViStatus ConfigureSoftwareEdgeSourceTrigger(ViSession vi);
  ViStatus ConfigureSoftwareEdgeStartTrigger(ViSession vi);
  ViStatus ConfigureSourceMode(ViSession vi, ViInt32 sourceMode);
  ViStatus ConfigureVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level);
  ViStatus ConfigureVoltageLevelRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConfigureVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit);
  ViStatus ConfigureVoltageLimitRange(ViSession vi, ViConstString channelName, ViReal64 range);
  ViStatus ConnectInternalReference(ViSession vi, ViInt32 internalReference);
  ViStatus CreateAdvancedSequenceStep(ViSession vi, ViBoolean setAsActiveStep);
  ViStatus DeleteAdvancedSequence(ViSession vi, ViConstString sequenceName);
  ViStatus Disable(ViSession vi);
  ViStatus DisablePulseTrigger(ViSession vi);
  ViStatus DisableSequenceAdvanceTrigger(ViSession vi);
  ViStatus DisableSourceTrigger(ViSession vi);
  ViStatus DisableStartTrigger(ViSession vi);
  ViStatus ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  ViStatus ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViAddr configuration[]);
  ViStatus ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath);
  ViStatus ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal);
  ViStatus FetchMultiple(ViSession vi, ViConstString channelName, ViReal64 timeout, ViInt32 count, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[], ViBoolean inCompliance[], ViInt32* actualCount);
  ViStatus GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue);
  ViStatus GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue);
  ViStatus GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* attributeValue);
  ViStatus GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue);
  ViStatus GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue);
  ViStatus GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[]);
  ViStatus GetCalUserDefinedInfo(ViSession vi, ViChar info[256]);
  ViStatus GetCalUserDefinedInfoMaxSize(ViSession vi, ViInt32* infoSize);
  ViStatus GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelName[]);
  ViStatus GetChannelNameFromString(ViSession vi, ViConstString index, ViInt32 bufferSize, ViChar channelName[]);
  ViStatus GetError(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[]);
  ViStatus GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute);
  ViStatus GetExtCalLastTemp(ViSession vi, ViReal64* temperature);
  ViStatus GetExtCalRecommendedInterval(ViSession vi, ViInt32* months);
  ViStatus GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[]);
  ViStatus GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[]);
  ViStatus GetSelfCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute);
  ViStatus GetSelfCalLastTemp(ViSession vi, ViReal64* temperature);
  ViStatus ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViAddr configuration[]);
  ViStatus ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath);
  ViStatus InitExtCal(ViRsrc resourceName, ViConstString password, ViSession* vi);
  ViStatus InitializeWithChannels(ViRsrc resourceName, ViConstString channels, ViBoolean reset, ViConstString optionString, ViSession* vi);
  ViStatus Initiate(ViSession vi);
  ViStatus LockSession(ViSession vi, ViBoolean* callerHasLock);
  ViStatus Measure(ViSession vi, ViConstString channelName, ViInt32 measurementType, ViReal64* measurement);
  ViStatus MeasureMultiple(ViSession vi, ViConstString channelName, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[]);
  ViStatus ParseChannelCount(ViSession vi, ViConstString channelsString, ViUInt32* numberOfChannels);
  ViStatus QueryInCompliance(ViSession vi, ViConstString channelName, ViBoolean* inCompliance);
  ViStatus QueryMaxCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* maxCurrentLimit);
  ViStatus QueryMaxVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 currentLimit, ViReal64* maxVoltageLevel);
  ViStatus QueryMinCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* minCurrentLimit);
  ViStatus QueryOutputState(ViSession vi, ViConstString channelName, ViInt32 outputState, ViBoolean* inState);
  ViStatus ReadCurrentTemperature(ViSession vi, ViReal64* temperature);
  ViStatus Reset(ViSession vi);
  ViStatus ResetDevice(ViSession vi);
  ViStatus ResetInterchangeCheck(ViSession vi);
  ViStatus ResetWithDefaults(ViSession vi);
  ViStatus RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256]);
  ViStatus SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256]);
  ViStatus SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger);
  ViStatus SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue);
  ViStatus SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue);
  ViStatus SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue);
  ViStatus SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue);
  ViStatus SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue);
  ViStatus SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue);
  ViStatus SetCalUserDefinedInfo(ViSession vi, ViConstString info);
  ViStatus SetSequence(ViSession vi, ViConstString channelName, ViReal64 values[], ViReal64 sourceDelays[], ViUInt32 size);
  ViStatus UnlockSession(ViSession vi, ViBoolean* callerHasLock);
  ViStatus WaitForEvent(ViSession vi, ViInt32 eventId, ViReal64 timeout);

 private:
  using AbortWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using CommitWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureDigitalEdgeMeasureTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgePulseTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeShutdownTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeSourceTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeStartTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureOvpPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViBoolean enabled, ViReal64 limit);
  using ConfigureSoftwareEdgeMeasureTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureSoftwareEdgePulseTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureSoftwareEdgeShutdownTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureSoftwareEdgeSourceTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureSoftwareEdgeStartTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ConfigureSourceModeWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 sourceMode);
  using CreateAdvancedSequenceCommitStepWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep);
  using CreateAdvancedSequenceStepWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep);
  using CreateAdvancedSequenceWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence);
  using CreateAdvancedSequencePtr = ViStatus (*)(ViSession vi, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence);
  using DeleteAdvancedSequenceWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViConstString sequenceName);
  using DisablePulseTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using DisableSequenceAdvanceTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using DisableShutdownTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using DisableSourceTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using DisableStartTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ErrorQueryPtr = ViStatus (*)(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256]);
  using ExportSignalWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal);
  using InitializeWithIndependentChannelsPtr = ViStatus (*)(ViRsrc resourceName, ViBoolean reset, ViConstString optionString, ViSession* vi);
  using InitiateWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using InvalidateAllAttributesPtr = ViStatus (*)(ViSession vi);
  using ResetWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using SendSoftwareEdgeTriggerWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 trigger);
  using WaitForEventWithChannelsPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 eventId, ViReal64 timeout);
  using AbortPtr = ViStatus (*)(ViSession vi);
  using CalAdjustCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 requestedOutputs[], ViReal64 measuredOutputs[]);
  using CalAdjustCurrentMeasurementPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 reportedOutputs[], ViReal64 measuredOutputs[]);
  using CalAdjustInternalReferencePtr = ViStatus (*)(ViSession vi, ViInt32 internalReference, ViReal64 adjustedInternalReference);
  using CalAdjustOutputResistancePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViUInt32 numberOfMeasurements, ViReal64 requestedOutputs[], ViReal64 measuredOutputs[]);
  using CalAdjustResidualCurrentOffsetPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using CalAdjustResidualVoltageOffsetPtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using CalAdjustVoltageLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 requestedOutputs[], ViReal64 measuredOutputs[]);
  using CalAdjustVoltageMeasurementPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range, ViUInt32 numberOfMeasurements, ViReal64 reportedOutputs[], ViReal64 measuredOutputs[]);
  using CalSelfCalibratePtr = ViStatus (*)(ViSession vi, ViConstString channelName);
  using ChangeExtCalPasswordPtr = ViStatus (*)(ViSession vi, ViConstString oldPassword, ViConstString newPassword);
  using ClearErrorPtr = ViStatus (*)(ViSession vi);
  using ClearInterchangeWarningsPtr = ViStatus (*)(ViSession vi);
  using ClosePtr = ViStatus (*)(ViSession vi);
  using CloseExtCalPtr = ViStatus (*)(ViSession vi, ViInt32 action);
  using CommitPtr = ViStatus (*)(ViSession vi);
  using ConfigureApertureTimePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 apertureTime, ViInt32 units);
  using ConfigureAutoZeroPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 autoZero);
  using ConfigureCurrentLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 level);
  using ConfigureCurrentLevelRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigureCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 behavior, ViReal64 limit);
  using ConfigureCurrentLimitRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigureDigitalEdgeMeasureTriggerPtr = ViStatus (*)(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgePulseTriggerPtr = ViStatus (*)(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeSequenceAdvanceTriggerPtr = ViStatus (*)(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeSourceTriggerPtr = ViStatus (*)(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureDigitalEdgeStartTriggerPtr = ViStatus (*)(ViSession vi, ViConstString inputTerminal, ViInt32 edge);
  using ConfigureOutputEnabledPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViBoolean enabled);
  using ConfigureOutputFunctionPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 function);
  using ConfigureOutputResistancePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 resistance);
  using ConfigurePowerLineFrequencyPtr = ViStatus (*)(ViSession vi, ViReal64 powerlineFrequency);
  using ConfigurePulseBiasCurrentLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 level);
  using ConfigurePulseBiasCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 limit);
  using ConfigurePulseBiasVoltageLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 level);
  using ConfigurePulseBiasVoltageLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 limit);
  using ConfigurePulseCurrentLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 level);
  using ConfigurePulseCurrentLevelRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigurePulseCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 limit);
  using ConfigurePulseCurrentLimitRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigurePulseVoltageLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 level);
  using ConfigurePulseVoltageLevelRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigurePulseVoltageLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 limit);
  using ConfigurePulseVoltageLimitRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigureSensePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 sense);
  using ConfigureSoftwareEdgeMeasureTriggerPtr = ViStatus (*)(ViSession vi);
  using ConfigureSoftwareEdgePulseTriggerPtr = ViStatus (*)(ViSession vi);
  using ConfigureSoftwareEdgeSequenceAdvanceTriggerPtr = ViStatus (*)(ViSession vi);
  using ConfigureSoftwareEdgeSourceTriggerPtr = ViStatus (*)(ViSession vi);
  using ConfigureSoftwareEdgeStartTriggerPtr = ViStatus (*)(ViSession vi);
  using ConfigureSourceModePtr = ViStatus (*)(ViSession vi, ViInt32 sourceMode);
  using ConfigureVoltageLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 level);
  using ConfigureVoltageLevelRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConfigureVoltageLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 limit);
  using ConfigureVoltageLimitRangePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 range);
  using ConnectInternalReferencePtr = ViStatus (*)(ViSession vi, ViInt32 internalReference);
  using CreateAdvancedSequenceStepPtr = ViStatus (*)(ViSession vi, ViBoolean setAsActiveStep);
  using DeleteAdvancedSequencePtr = ViStatus (*)(ViSession vi, ViConstString sequenceName);
  using DisablePtr = ViStatus (*)(ViSession vi);
  using DisablePulseTriggerPtr = ViStatus (*)(ViSession vi);
  using DisableSequenceAdvanceTriggerPtr = ViStatus (*)(ViSession vi);
  using DisableSourceTriggerPtr = ViStatus (*)(ViSession vi);
  using DisableStartTriggerPtr = ViStatus (*)(ViSession vi);
  using ErrorMessagePtr = ViStatus (*)(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  using ExportAttributeConfigurationBufferPtr = ViStatus (*)(ViSession vi, ViInt32 size, ViAddr configuration[]);
  using ExportAttributeConfigurationFilePtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using ExportSignalPtr = ViStatus (*)(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal);
  using FetchMultiplePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 timeout, ViInt32 count, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[], ViBoolean inCompliance[], ViInt32* actualCount);
  using GetAttributeViBooleanPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue);
  using GetAttributeViInt32Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue);
  using GetAttributeViInt64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* attributeValue);
  using GetAttributeViReal64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue);
  using GetAttributeViSessionPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue);
  using GetAttributeViStringPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[]);
  using GetCalUserDefinedInfoPtr = ViStatus (*)(ViSession vi, ViChar info[256]);
  using GetCalUserDefinedInfoMaxSizePtr = ViStatus (*)(ViSession vi, ViInt32* infoSize);
  using GetChannelNamePtr = ViStatus (*)(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelName[]);
  using GetChannelNameFromStringPtr = ViStatus (*)(ViSession vi, ViConstString index, ViInt32 bufferSize, ViChar channelName[]);
  using GetErrorPtr = ViStatus (*)(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[]);
  using GetExtCalLastDateAndTimePtr = ViStatus (*)(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute);
  using GetExtCalLastTempPtr = ViStatus (*)(ViSession vi, ViReal64* temperature);
  using GetExtCalRecommendedIntervalPtr = ViStatus (*)(ViSession vi, ViInt32* months);
  using GetNextCoercionRecordPtr = ViStatus (*)(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[]);
  using GetNextInterchangeWarningPtr = ViStatus (*)(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[]);
  using GetSelfCalLastDateAndTimePtr = ViStatus (*)(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute);
  using GetSelfCalLastTempPtr = ViStatus (*)(ViSession vi, ViReal64* temperature);
  using ImportAttributeConfigurationBufferPtr = ViStatus (*)(ViSession vi, ViInt32 size, ViAddr configuration[]);
  using ImportAttributeConfigurationFilePtr = ViStatus (*)(ViSession vi, ViConstString filePath);
  using InitExtCalPtr = ViStatus (*)(ViRsrc resourceName, ViConstString password, ViSession* vi);
  using InitializeWithChannelsPtr = ViStatus (*)(ViRsrc resourceName, ViConstString channels, ViBoolean reset, ViConstString optionString, ViSession* vi);
  using InitiatePtr = ViStatus (*)(ViSession vi);
  using LockSessionPtr = ViStatus (*)(ViSession vi, ViBoolean* callerHasLock);
  using MeasurePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 measurementType, ViReal64* measurement);
  using MeasureMultiplePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[]);
  using ParseChannelCountPtr = ViStatus (*)(ViSession vi, ViConstString channelsString, ViUInt32* numberOfChannels);
  using QueryInCompliancePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViBoolean* inCompliance);
  using QueryMaxCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* maxCurrentLimit);
  using QueryMaxVoltageLevelPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 currentLimit, ViReal64* maxVoltageLevel);
  using QueryMinCurrentLimitPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* minCurrentLimit);
  using QueryOutputStatePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViInt32 outputState, ViBoolean* inState);
  using ReadCurrentTemperaturePtr = ViStatus (*)(ViSession vi, ViReal64* temperature);
  using ResetPtr = ViStatus (*)(ViSession vi);
  using ResetDevicePtr = ViStatus (*)(ViSession vi);
  using ResetInterchangeCheckPtr = ViStatus (*)(ViSession vi);
  using ResetWithDefaultsPtr = ViStatus (*)(ViSession vi);
  using RevisionQueryPtr = ViStatus (*)(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256]);
  using SelfTestPtr = ViStatus (*)(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256]);
  using SendSoftwareEdgeTriggerPtr = ViStatus (*)(ViSession vi, ViInt32 trigger);
  using SetAttributeViBooleanPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue);
  using SetAttributeViInt32Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue);
  using SetAttributeViInt64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue);
  using SetAttributeViReal64Ptr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue);
  using SetAttributeViSessionPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue);
  using SetAttributeViStringPtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue);
  using SetCalUserDefinedInfoPtr = ViStatus (*)(ViSession vi, ViConstString info);
  using SetSequencePtr = ViStatus (*)(ViSession vi, ViConstString channelName, ViReal64 values[], ViReal64 sourceDelays[], ViUInt32 size);
  using UnlockSessionPtr = ViStatus (*)(ViSession vi, ViBoolean* callerHasLock);
  using WaitForEventPtr = ViStatus (*)(ViSession vi, ViInt32 eventId, ViReal64 timeout);

  typedef struct FunctionPointers {
    AbortWithChannelsPtr AbortWithChannels;
    CommitWithChannelsPtr CommitWithChannels;
    ConfigureDigitalEdgeMeasureTriggerWithChannelsPtr ConfigureDigitalEdgeMeasureTriggerWithChannels;
    ConfigureDigitalEdgePulseTriggerWithChannelsPtr ConfigureDigitalEdgePulseTriggerWithChannels;
    ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsPtr ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels;
    ConfigureDigitalEdgeShutdownTriggerWithChannelsPtr ConfigureDigitalEdgeShutdownTriggerWithChannels;
    ConfigureDigitalEdgeSourceTriggerWithChannelsPtr ConfigureDigitalEdgeSourceTriggerWithChannels;
    ConfigureDigitalEdgeStartTriggerWithChannelsPtr ConfigureDigitalEdgeStartTriggerWithChannels;
    ConfigureOvpPtr ConfigureOvp;
    ConfigureSoftwareEdgeMeasureTriggerWithChannelsPtr ConfigureSoftwareEdgeMeasureTriggerWithChannels;
    ConfigureSoftwareEdgePulseTriggerWithChannelsPtr ConfigureSoftwareEdgePulseTriggerWithChannels;
    ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsPtr ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels;
    ConfigureSoftwareEdgeShutdownTriggerWithChannelsPtr ConfigureSoftwareEdgeShutdownTriggerWithChannels;
    ConfigureSoftwareEdgeSourceTriggerWithChannelsPtr ConfigureSoftwareEdgeSourceTriggerWithChannels;
    ConfigureSoftwareEdgeStartTriggerWithChannelsPtr ConfigureSoftwareEdgeStartTriggerWithChannels;
    ConfigureSourceModeWithChannelsPtr ConfigureSourceModeWithChannels;
    CreateAdvancedSequenceCommitStepWithChannelsPtr CreateAdvancedSequenceCommitStepWithChannels;
    CreateAdvancedSequenceStepWithChannelsPtr CreateAdvancedSequenceStepWithChannels;
    CreateAdvancedSequenceWithChannelsPtr CreateAdvancedSequenceWithChannels;
    CreateAdvancedSequencePtr CreateAdvancedSequence;
    DeleteAdvancedSequenceWithChannelsPtr DeleteAdvancedSequenceWithChannels;
    DisablePulseTriggerWithChannelsPtr DisablePulseTriggerWithChannels;
    DisableSequenceAdvanceTriggerWithChannelsPtr DisableSequenceAdvanceTriggerWithChannels;
    DisableShutdownTriggerWithChannelsPtr DisableShutdownTriggerWithChannels;
    DisableSourceTriggerWithChannelsPtr DisableSourceTriggerWithChannels;
    DisableStartTriggerWithChannelsPtr DisableStartTriggerWithChannels;
    ErrorQueryPtr ErrorQuery;
    ExportSignalWithChannelsPtr ExportSignalWithChannels;
    InitializeWithIndependentChannelsPtr InitializeWithIndependentChannels;
    InitiateWithChannelsPtr InitiateWithChannels;
    InvalidateAllAttributesPtr InvalidateAllAttributes;
    ResetWithChannelsPtr ResetWithChannels;
    SendSoftwareEdgeTriggerWithChannelsPtr SendSoftwareEdgeTriggerWithChannels;
    WaitForEventWithChannelsPtr WaitForEventWithChannels;
    AbortPtr Abort;
    CalAdjustCurrentLimitPtr CalAdjustCurrentLimit;
    CalAdjustCurrentMeasurementPtr CalAdjustCurrentMeasurement;
    CalAdjustInternalReferencePtr CalAdjustInternalReference;
    CalAdjustOutputResistancePtr CalAdjustOutputResistance;
    CalAdjustResidualCurrentOffsetPtr CalAdjustResidualCurrentOffset;
    CalAdjustResidualVoltageOffsetPtr CalAdjustResidualVoltageOffset;
    CalAdjustVoltageLevelPtr CalAdjustVoltageLevel;
    CalAdjustVoltageMeasurementPtr CalAdjustVoltageMeasurement;
    CalSelfCalibratePtr CalSelfCalibrate;
    ChangeExtCalPasswordPtr ChangeExtCalPassword;
    ClearErrorPtr ClearError;
    ClearInterchangeWarningsPtr ClearInterchangeWarnings;
    ClosePtr Close;
    CloseExtCalPtr CloseExtCal;
    CommitPtr Commit;
    ConfigureApertureTimePtr ConfigureApertureTime;
    ConfigureAutoZeroPtr ConfigureAutoZero;
    ConfigureCurrentLevelPtr ConfigureCurrentLevel;
    ConfigureCurrentLevelRangePtr ConfigureCurrentLevelRange;
    ConfigureCurrentLimitPtr ConfigureCurrentLimit;
    ConfigureCurrentLimitRangePtr ConfigureCurrentLimitRange;
    ConfigureDigitalEdgeMeasureTriggerPtr ConfigureDigitalEdgeMeasureTrigger;
    ConfigureDigitalEdgePulseTriggerPtr ConfigureDigitalEdgePulseTrigger;
    ConfigureDigitalEdgeSequenceAdvanceTriggerPtr ConfigureDigitalEdgeSequenceAdvanceTrigger;
    ConfigureDigitalEdgeSourceTriggerPtr ConfigureDigitalEdgeSourceTrigger;
    ConfigureDigitalEdgeStartTriggerPtr ConfigureDigitalEdgeStartTrigger;
    ConfigureOutputEnabledPtr ConfigureOutputEnabled;
    ConfigureOutputFunctionPtr ConfigureOutputFunction;
    ConfigureOutputResistancePtr ConfigureOutputResistance;
    ConfigurePowerLineFrequencyPtr ConfigurePowerLineFrequency;
    ConfigurePulseBiasCurrentLevelPtr ConfigurePulseBiasCurrentLevel;
    ConfigurePulseBiasCurrentLimitPtr ConfigurePulseBiasCurrentLimit;
    ConfigurePulseBiasVoltageLevelPtr ConfigurePulseBiasVoltageLevel;
    ConfigurePulseBiasVoltageLimitPtr ConfigurePulseBiasVoltageLimit;
    ConfigurePulseCurrentLevelPtr ConfigurePulseCurrentLevel;
    ConfigurePulseCurrentLevelRangePtr ConfigurePulseCurrentLevelRange;
    ConfigurePulseCurrentLimitPtr ConfigurePulseCurrentLimit;
    ConfigurePulseCurrentLimitRangePtr ConfigurePulseCurrentLimitRange;
    ConfigurePulseVoltageLevelPtr ConfigurePulseVoltageLevel;
    ConfigurePulseVoltageLevelRangePtr ConfigurePulseVoltageLevelRange;
    ConfigurePulseVoltageLimitPtr ConfigurePulseVoltageLimit;
    ConfigurePulseVoltageLimitRangePtr ConfigurePulseVoltageLimitRange;
    ConfigureSensePtr ConfigureSense;
    ConfigureSoftwareEdgeMeasureTriggerPtr ConfigureSoftwareEdgeMeasureTrigger;
    ConfigureSoftwareEdgePulseTriggerPtr ConfigureSoftwareEdgePulseTrigger;
    ConfigureSoftwareEdgeSequenceAdvanceTriggerPtr ConfigureSoftwareEdgeSequenceAdvanceTrigger;
    ConfigureSoftwareEdgeSourceTriggerPtr ConfigureSoftwareEdgeSourceTrigger;
    ConfigureSoftwareEdgeStartTriggerPtr ConfigureSoftwareEdgeStartTrigger;
    ConfigureSourceModePtr ConfigureSourceMode;
    ConfigureVoltageLevelPtr ConfigureVoltageLevel;
    ConfigureVoltageLevelRangePtr ConfigureVoltageLevelRange;
    ConfigureVoltageLimitPtr ConfigureVoltageLimit;
    ConfigureVoltageLimitRangePtr ConfigureVoltageLimitRange;
    ConnectInternalReferencePtr ConnectInternalReference;
    CreateAdvancedSequenceStepPtr CreateAdvancedSequenceStep;
    DeleteAdvancedSequencePtr DeleteAdvancedSequence;
    DisablePtr Disable;
    DisablePulseTriggerPtr DisablePulseTrigger;
    DisableSequenceAdvanceTriggerPtr DisableSequenceAdvanceTrigger;
    DisableSourceTriggerPtr DisableSourceTrigger;
    DisableStartTriggerPtr DisableStartTrigger;
    ErrorMessagePtr ErrorMessage;
    ExportAttributeConfigurationBufferPtr ExportAttributeConfigurationBuffer;
    ExportAttributeConfigurationFilePtr ExportAttributeConfigurationFile;
    ExportSignalPtr ExportSignal;
    FetchMultiplePtr FetchMultiple;
    GetAttributeViBooleanPtr GetAttributeViBoolean;
    GetAttributeViInt32Ptr GetAttributeViInt32;
    GetAttributeViInt64Ptr GetAttributeViInt64;
    GetAttributeViReal64Ptr GetAttributeViReal64;
    GetAttributeViSessionPtr GetAttributeViSession;
    GetAttributeViStringPtr GetAttributeViString;
    GetCalUserDefinedInfoPtr GetCalUserDefinedInfo;
    GetCalUserDefinedInfoMaxSizePtr GetCalUserDefinedInfoMaxSize;
    GetChannelNamePtr GetChannelName;
    GetChannelNameFromStringPtr GetChannelNameFromString;
    GetErrorPtr GetError;
    GetExtCalLastDateAndTimePtr GetExtCalLastDateAndTime;
    GetExtCalLastTempPtr GetExtCalLastTemp;
    GetExtCalRecommendedIntervalPtr GetExtCalRecommendedInterval;
    GetNextCoercionRecordPtr GetNextCoercionRecord;
    GetNextInterchangeWarningPtr GetNextInterchangeWarning;
    GetSelfCalLastDateAndTimePtr GetSelfCalLastDateAndTime;
    GetSelfCalLastTempPtr GetSelfCalLastTemp;
    ImportAttributeConfigurationBufferPtr ImportAttributeConfigurationBuffer;
    ImportAttributeConfigurationFilePtr ImportAttributeConfigurationFile;
    InitExtCalPtr InitExtCal;
    InitializeWithChannelsPtr InitializeWithChannels;
    InitiatePtr Initiate;
    LockSessionPtr LockSession;
    MeasurePtr Measure;
    MeasureMultiplePtr MeasureMultiple;
    ParseChannelCountPtr ParseChannelCount;
    QueryInCompliancePtr QueryInCompliance;
    QueryMaxCurrentLimitPtr QueryMaxCurrentLimit;
    QueryMaxVoltageLevelPtr QueryMaxVoltageLevel;
    QueryMinCurrentLimitPtr QueryMinCurrentLimit;
    QueryOutputStatePtr QueryOutputState;
    ReadCurrentTemperaturePtr ReadCurrentTemperature;
    ResetPtr Reset;
    ResetDevicePtr ResetDevice;
    ResetInterchangeCheckPtr ResetInterchangeCheck;
    ResetWithDefaultsPtr ResetWithDefaults;
    RevisionQueryPtr RevisionQuery;
    SelfTestPtr SelfTest;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeViBooleanPtr SetAttributeViBoolean;
    SetAttributeViInt32Ptr SetAttributeViInt32;
    SetAttributeViInt64Ptr SetAttributeViInt64;
    SetAttributeViReal64Ptr SetAttributeViReal64;
    SetAttributeViSessionPtr SetAttributeViSession;
    SetAttributeViStringPtr SetAttributeViString;
    SetCalUserDefinedInfoPtr SetCalUserDefinedInfo;
    SetSequencePtr SetSequence;
    UnlockSessionPtr UnlockSession;
    WaitForEventPtr WaitForEvent;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidcpower_grpc

#endif  // NIDCPOWER_GRPC_LIBRARY_H
