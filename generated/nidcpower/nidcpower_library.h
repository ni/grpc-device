//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DCPower
//---------------------------------------------------------------------
#ifndef NIDCPOWER_GRPC_LIBRARY_H
#define NIDCPOWER_GRPC_LIBRARY_H

#include "nidcpower_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nidcpower_grpc {

class NiDCPowerLibrary : public nidcpower_grpc::NiDCPowerLibraryInterface {
 public:
  NiDCPowerLibrary();
  explicit NiDCPowerLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiDCPowerLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  ViStatus Abort(ViSession vi) override;
  ViStatus AbortWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus CalSelfCalibrate(ViSession vi, ViConstString channelName) override;
  ViStatus ClearError(ViSession vi) override;
  ViStatus ClearInterchangeWarnings(ViSession vi) override;
  ViStatus ClearLatchedOutputCutoffState(ViSession vi, ViConstString channelName, ViInt32 outputCutoffReason) override;
  ViStatus Close(ViSession vi) override;
  ViStatus Commit(ViSession vi) override;
  ViStatus CommitWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureApertureTime(ViSession vi, ViConstString channelName, ViReal64 apertureTime, ViInt32 units) override;
  ViStatus ConfigureAutoZero(ViSession vi, ViConstString channelName, ViInt32 autoZero) override;
  ViStatus ConfigureCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level) override;
  ViStatus ConfigureCurrentLevelRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigureCurrentLimit(ViSession vi, ViConstString channelName, ViInt32 behavior, ViReal64 limit) override;
  ViStatus ConfigureCurrentLimitRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigureDigitalEdgeMeasureTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeMeasureTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgePulseTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgePulseTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeSequenceAdvanceTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeShutdownTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeSourceTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeSourceTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureDigitalEdgeStartTriggerWithChannels(ViSession vi, ViConstString channelName, ViConstString inputTerminal, ViInt32 edge) override;
  ViStatus ConfigureLCRCustomCableCompensation(ViSession vi, ViConstString channelName, ViInt32 customCableCompensationDataSize, ViInt8 customCableCompensationData[]) override;
  ViStatus ConfigureOutputEnabled(ViSession vi, ViConstString channelName, ViBoolean enabled) override;
  ViStatus ConfigureOutputFunction(ViSession vi, ViConstString channelName, ViInt32 function) override;
  ViStatus ConfigureOutputResistance(ViSession vi, ViConstString channelName, ViReal64 resistance) override;
  ViStatus ConfigureOvp(ViSession vi, ViConstString channelName, ViBoolean enabled, ViReal64 limit) override;
  ViStatus ConfigurePowerLineFrequency(ViSession vi, ViReal64 powerlineFrequency) override;
  ViStatus ConfigurePulseBiasCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level) override;
  ViStatus ConfigurePulseBiasCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 limit) override;
  ViStatus ConfigurePulseBiasVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level) override;
  ViStatus ConfigurePulseBiasVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit) override;
  ViStatus ConfigurePulseCurrentLevel(ViSession vi, ViConstString channelName, ViReal64 level) override;
  ViStatus ConfigurePulseCurrentLevelRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigurePulseCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 limit) override;
  ViStatus ConfigurePulseCurrentLimitRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigurePulseVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level) override;
  ViStatus ConfigurePulseVoltageLevelRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigurePulseVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit) override;
  ViStatus ConfigurePulseVoltageLimitRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigureSense(ViSession vi, ViConstString channelName, ViInt32 sense) override;
  ViStatus ConfigureSoftwareEdgeMeasureTrigger(ViSession vi) override;
  ViStatus ConfigureSoftwareEdgeMeasureTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureSoftwareEdgePulseTrigger(ViSession vi) override;
  ViStatus ConfigureSoftwareEdgePulseTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureSoftwareEdgeSequenceAdvanceTrigger(ViSession vi) override;
  ViStatus ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureSoftwareEdgeShutdownTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureSoftwareEdgeSourceTrigger(ViSession vi) override;
  ViStatus ConfigureSoftwareEdgeSourceTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureSoftwareEdgeStartTrigger(ViSession vi) override;
  ViStatus ConfigureSoftwareEdgeStartTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ConfigureSourceMode(ViSession vi, ViInt32 sourceMode) override;
  ViStatus ConfigureSourceModeWithChannels(ViSession vi, ViConstString channelName, ViInt32 sourceMode) override;
  ViStatus ConfigureVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 level) override;
  ViStatus ConfigureVoltageLevelRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus ConfigureVoltageLimit(ViSession vi, ViConstString channelName, ViReal64 limit) override;
  ViStatus ConfigureVoltageLimitRange(ViSession vi, ViConstString channelName, ViReal64 range) override;
  ViStatus CreateAdvancedSequence(ViSession vi, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence) override;
  ViStatus CreateAdvancedSequenceCommitStepWithChannels(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep) override;
  ViStatus CreateAdvancedSequenceStep(ViSession vi, ViBoolean setAsActiveStep) override;
  ViStatus CreateAdvancedSequenceStepWithChannels(ViSession vi, ViConstString channelName, ViBoolean setAsActiveStep) override;
  ViStatus CreateAdvancedSequenceWithChannels(ViSession vi, ViConstString channelName, ViConstString sequenceName, ViInt32 attributeIdCount, ViInt32 attributeIds[], ViBoolean setAsActiveSequence) override;
  ViStatus DeleteAdvancedSequence(ViSession vi, ViConstString sequenceName) override;
  ViStatus DeleteAdvancedSequenceWithChannels(ViSession vi, ViConstString channelName, ViConstString sequenceName) override;
  ViStatus Disable(ViSession vi) override;
  ViStatus DisablePulseTrigger(ViSession vi) override;
  ViStatus DisablePulseTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus DisableSequenceAdvanceTrigger(ViSession vi) override;
  ViStatus DisableSequenceAdvanceTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus DisableShutdownTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus DisableSourceTrigger(ViSession vi) override;
  ViStatus DisableSourceTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus DisableStartTrigger(ViSession vi) override;
  ViStatus DisableStartTriggerWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]) override;
  ViStatus ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256]) override;
  ViStatus ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViInt8 configuration[]) override;
  ViStatus ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath) override;
  ViStatus ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal) override;
  ViStatus ExportSignalWithChannels(ViSession vi, ViConstString channelName, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal) override;
  ViStatus FetchMultiple(ViSession vi, ViConstString channelName, ViReal64 timeout, ViInt32 count, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[], ViBoolean inCompliance[], ViInt32* actualCount) override;
  ViStatus FetchMultipleLCR(ViSession vi, ViConstString channelName, ViReal64 timeout, ViInt32 count, NILCRMeasurement_struct measurements[], ViInt32* actualCount) override;
  ViStatus GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue) override;
  ViStatus GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue) override;
  ViStatus GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* attributeValue) override;
  ViStatus GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue) override;
  ViStatus GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue) override;
  ViStatus GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[]) override;
  ViStatus GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelName[]) override;
  ViStatus GetChannelNameFromString(ViSession vi, ViConstString index, ViInt32 bufferSize, ViChar channelName[]) override;
  ViStatus GetError(ViSession vi, ViStatus* code, ViInt32 bufferSize, ViChar description[]) override;
  ViStatus GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute) override;
  ViStatus GetExtCalLastTemp(ViSession vi, ViReal64* temperature) override;
  ViStatus GetExtCalRecommendedInterval(ViSession vi, ViInt32* months) override;
  ViStatus GetLCRCompensationLastDateAndTime(ViSession vi, ViConstString channelName, ViInt32 compensationType, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute) override;
  ViStatus GetLCRCustomCableCompensationData(ViSession vi, ViConstString channelName, ViInt32 customCableCompensationDataSize, ViInt8 customCableCompensationData[]) override;
  ViStatus GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[]) override;
  ViStatus GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[]) override;
  ViStatus GetSelfCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute) override;
  ViStatus GetSelfCalLastTemp(ViSession vi, ViReal64* temperature) override;
  ViStatus ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViInt8 configuration[]) override;
  ViStatus ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath) override;
  ViStatus InitializeWithChannels(ViRsrc resourceName, ViConstString channels, ViBoolean reset, ViConstString optionString, ViSession* vi) override;
  ViStatus InitializeWithIndependentChannels(ViRsrc resourceName, ViBoolean reset, ViConstString optionString, ViSession* vi) override;
  ViStatus Initiate(ViSession vi) override;
  ViStatus InitiateWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus InvalidateAllAttributes(ViSession vi) override;
  ViStatus LockSession(ViSession vi, ViBoolean* callerHasLock) override;
  ViStatus Measure(ViSession vi, ViConstString channelName, ViInt32 measurementType, ViReal64* measurement) override;
  ViStatus MeasureMultiple(ViSession vi, ViConstString channelName, ViReal64 voltageMeasurements[], ViReal64 currentMeasurements[]) override;
  ViStatus MeasureMultipleLCR(ViSession vi, ViConstString channelName, NILCRMeasurement_struct measurements[]) override;
  ViStatus ParseChannelCount(ViSession vi, ViConstString channelsString, ViUInt32* numberOfChannels) override;
  ViStatus PerformLCRLoadCompensation(ViSession vi, ViConstString channelName, ViInt32 numCompensationSpots, NILCRLoadCompensationSpot_struct compensationSpots[]) override;
  ViStatus PerformLCROpenCompensation(ViSession vi, ViConstString channelName, ViInt32 numFrequencies, ViReal64 additionalFrequencies[]) override;
  ViStatus PerformLCROpenCustomCableCompensation(ViSession vi, ViConstString channelName) override;
  ViStatus PerformLCRShortCompensation(ViSession vi, ViConstString channelName, ViInt32 numFrequencies, ViReal64 additionalFrequencies[]) override;
  ViStatus PerformLCRShortCustomCableCompensation(ViSession vi, ViConstString channelName) override;
  ViStatus QueryInCompliance(ViSession vi, ViConstString channelName, ViBoolean* inCompliance) override;
  ViStatus QueryLatchedOutputCutoffState(ViSession vi, ViConstString channelName, ViInt32 outputCutoffReason, ViBoolean* outputCutoffState) override;
  ViStatus QueryMaxCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* maxCurrentLimit) override;
  ViStatus QueryMaxVoltageLevel(ViSession vi, ViConstString channelName, ViReal64 currentLimit, ViReal64* maxVoltageLevel) override;
  ViStatus QueryMinCurrentLimit(ViSession vi, ViConstString channelName, ViReal64 voltageLevel, ViReal64* minCurrentLimit) override;
  ViStatus QueryOutputState(ViSession vi, ViConstString channelName, ViInt32 outputState, ViBoolean* inState) override;
  ViStatus ReadCurrentTemperature(ViSession vi, ViReal64* temperature) override;
  ViStatus Reset(ViSession vi) override;
  ViStatus ResetDevice(ViSession vi) override;
  ViStatus ResetInterchangeCheck(ViSession vi) override;
  ViStatus ResetWithChannels(ViSession vi, ViConstString channelName) override;
  ViStatus ResetWithDefaults(ViSession vi) override;
  ViStatus RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256]) override;
  ViStatus SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256]) override;
  ViStatus SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger) override;
  ViStatus SendSoftwareEdgeTriggerWithChannels(ViSession vi, ViConstString channelName, ViInt32 trigger) override;
  ViStatus SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue) override;
  ViStatus SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue) override;
  ViStatus SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue) override;
  ViStatus SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue) override;
  ViStatus SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue) override;
  ViStatus SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue) override;
  ViStatus SetSequence(ViSession vi, ViConstString channelName, ViReal64 values[], ViReal64 sourceDelays[], ViUInt32 size) override;
  ViStatus UnlockSession(ViSession vi, ViBoolean* callerHasLock) override;
  ViStatus WaitForEvent(ViSession vi, ViInt32 eventId, ViReal64 timeout) override;
  ViStatus WaitForEventWithChannels(ViSession vi, ViConstString channelName, ViInt32 eventId, ViReal64 timeout) override;
  ViStatus SetRuntimeEnvironment(ViConstString environment, ViConstString environmentVersion, ViConstString reserved1, ViConstString reserved2) override;
  bool is_runtime_environment_set() const; // needed to test that we properly call SetRuntimeEnvironment

 private:
  using AbortPtr = decltype(&niDCPower_Abort);
  using AbortWithChannelsPtr = decltype(&niDCPower_AbortWithChannels);
  using CalSelfCalibratePtr = decltype(&niDCPower_CalSelfCalibrate);
  using ClearErrorPtr = decltype(&niDCPower_ClearError);
  using ClearInterchangeWarningsPtr = decltype(&niDCPower_ClearInterchangeWarnings);
  using ClearLatchedOutputCutoffStatePtr = decltype(&niDCPower_ClearLatchedOutputCutoffState);
  using ClosePtr = decltype(&niDCPower_close);
  using CommitPtr = decltype(&niDCPower_Commit);
  using CommitWithChannelsPtr = decltype(&niDCPower_CommitWithChannels);
  using ConfigureApertureTimePtr = decltype(&niDCPower_ConfigureApertureTime);
  using ConfigureAutoZeroPtr = decltype(&niDCPower_ConfigureAutoZero);
  using ConfigureCurrentLevelPtr = decltype(&niDCPower_ConfigureCurrentLevel);
  using ConfigureCurrentLevelRangePtr = decltype(&niDCPower_ConfigureCurrentLevelRange);
  using ConfigureCurrentLimitPtr = decltype(&niDCPower_ConfigureCurrentLimit);
  using ConfigureCurrentLimitRangePtr = decltype(&niDCPower_ConfigureCurrentLimitRange);
  using ConfigureDigitalEdgeMeasureTriggerPtr = decltype(&niDCPower_ConfigureDigitalEdgeMeasureTrigger);
  using ConfigureDigitalEdgeMeasureTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureDigitalEdgeMeasureTriggerWithChannels);
  using ConfigureDigitalEdgePulseTriggerPtr = decltype(&niDCPower_ConfigureDigitalEdgePulseTrigger);
  using ConfigureDigitalEdgePulseTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureDigitalEdgePulseTriggerWithChannels);
  using ConfigureDigitalEdgeSequenceAdvanceTriggerPtr = decltype(&niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger);
  using ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels);
  using ConfigureDigitalEdgeShutdownTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureDigitalEdgeShutdownTriggerWithChannels);
  using ConfigureDigitalEdgeSourceTriggerPtr = decltype(&niDCPower_ConfigureDigitalEdgeSourceTrigger);
  using ConfigureDigitalEdgeSourceTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureDigitalEdgeSourceTriggerWithChannels);
  using ConfigureDigitalEdgeStartTriggerPtr = decltype(&niDCPower_ConfigureDigitalEdgeStartTrigger);
  using ConfigureDigitalEdgeStartTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureDigitalEdgeStartTriggerWithChannels);
  using ConfigureLCRCustomCableCompensationPtr = decltype(&niDCPower_ConfigureLCRCustomCableCompensation);
  using ConfigureOutputEnabledPtr = decltype(&niDCPower_ConfigureOutputEnabled);
  using ConfigureOutputFunctionPtr = decltype(&niDCPower_ConfigureOutputFunction);
  using ConfigureOutputResistancePtr = decltype(&niDCPower_ConfigureOutputResistance);
  using ConfigureOvpPtr = decltype(&niDCPower_ConfigureOVP);
  using ConfigurePowerLineFrequencyPtr = decltype(&niDCPower_ConfigurePowerLineFrequency);
  using ConfigurePulseBiasCurrentLevelPtr = decltype(&niDCPower_ConfigurePulseBiasCurrentLevel);
  using ConfigurePulseBiasCurrentLimitPtr = decltype(&niDCPower_ConfigurePulseBiasCurrentLimit);
  using ConfigurePulseBiasVoltageLevelPtr = decltype(&niDCPower_ConfigurePulseBiasVoltageLevel);
  using ConfigurePulseBiasVoltageLimitPtr = decltype(&niDCPower_ConfigurePulseBiasVoltageLimit);
  using ConfigurePulseCurrentLevelPtr = decltype(&niDCPower_ConfigurePulseCurrentLevel);
  using ConfigurePulseCurrentLevelRangePtr = decltype(&niDCPower_ConfigurePulseCurrentLevelRange);
  using ConfigurePulseCurrentLimitPtr = decltype(&niDCPower_ConfigurePulseCurrentLimit);
  using ConfigurePulseCurrentLimitRangePtr = decltype(&niDCPower_ConfigurePulseCurrentLimitRange);
  using ConfigurePulseVoltageLevelPtr = decltype(&niDCPower_ConfigurePulseVoltageLevel);
  using ConfigurePulseVoltageLevelRangePtr = decltype(&niDCPower_ConfigurePulseVoltageLevelRange);
  using ConfigurePulseVoltageLimitPtr = decltype(&niDCPower_ConfigurePulseVoltageLimit);
  using ConfigurePulseVoltageLimitRangePtr = decltype(&niDCPower_ConfigurePulseVoltageLimitRange);
  using ConfigureSensePtr = decltype(&niDCPower_ConfigureSense);
  using ConfigureSoftwareEdgeMeasureTriggerPtr = decltype(&niDCPower_ConfigureSoftwareEdgeMeasureTrigger);
  using ConfigureSoftwareEdgeMeasureTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureSoftwareEdgeMeasureTriggerWithChannels);
  using ConfigureSoftwareEdgePulseTriggerPtr = decltype(&niDCPower_ConfigureSoftwareEdgePulseTrigger);
  using ConfigureSoftwareEdgePulseTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureSoftwareEdgePulseTriggerWithChannels);
  using ConfigureSoftwareEdgeSequenceAdvanceTriggerPtr = decltype(&niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger);
  using ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels);
  using ConfigureSoftwareEdgeShutdownTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureSoftwareEdgeShutdownTriggerWithChannels);
  using ConfigureSoftwareEdgeSourceTriggerPtr = decltype(&niDCPower_ConfigureSoftwareEdgeSourceTrigger);
  using ConfigureSoftwareEdgeSourceTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureSoftwareEdgeSourceTriggerWithChannels);
  using ConfigureSoftwareEdgeStartTriggerPtr = decltype(&niDCPower_ConfigureSoftwareEdgeStartTrigger);
  using ConfigureSoftwareEdgeStartTriggerWithChannelsPtr = decltype(&niDCPower_ConfigureSoftwareEdgeStartTriggerWithChannels);
  using ConfigureSourceModePtr = decltype(&niDCPower_ConfigureSourceMode);
  using ConfigureSourceModeWithChannelsPtr = decltype(&niDCPower_ConfigureSourceModeWithChannels);
  using ConfigureVoltageLevelPtr = decltype(&niDCPower_ConfigureVoltageLevel);
  using ConfigureVoltageLevelRangePtr = decltype(&niDCPower_ConfigureVoltageLevelRange);
  using ConfigureVoltageLimitPtr = decltype(&niDCPower_ConfigureVoltageLimit);
  using ConfigureVoltageLimitRangePtr = decltype(&niDCPower_ConfigureVoltageLimitRange);
  using CreateAdvancedSequencePtr = decltype(&niDCPower_CreateAdvancedSequence);
  using CreateAdvancedSequenceCommitStepWithChannelsPtr = decltype(&niDCPower_CreateAdvancedSequenceCommitStepWithChannels);
  using CreateAdvancedSequenceStepPtr = decltype(&niDCPower_CreateAdvancedSequenceStep);
  using CreateAdvancedSequenceStepWithChannelsPtr = decltype(&niDCPower_CreateAdvancedSequenceStepWithChannels);
  using CreateAdvancedSequenceWithChannelsPtr = decltype(&niDCPower_CreateAdvancedSequenceWithChannels);
  using DeleteAdvancedSequencePtr = decltype(&niDCPower_DeleteAdvancedSequence);
  using DeleteAdvancedSequenceWithChannelsPtr = decltype(&niDCPower_DeleteAdvancedSequenceWithChannels);
  using DisablePtr = decltype(&niDCPower_Disable);
  using DisablePulseTriggerPtr = decltype(&niDCPower_DisablePulseTrigger);
  using DisablePulseTriggerWithChannelsPtr = decltype(&niDCPower_DisablePulseTriggerWithChannels);
  using DisableSequenceAdvanceTriggerPtr = decltype(&niDCPower_DisableSequenceAdvanceTrigger);
  using DisableSequenceAdvanceTriggerWithChannelsPtr = decltype(&niDCPower_DisableSequenceAdvanceTriggerWithChannels);
  using DisableShutdownTriggerWithChannelsPtr = decltype(&niDCPower_DisableShutdownTriggerWithChannels);
  using DisableSourceTriggerPtr = decltype(&niDCPower_DisableSourceTrigger);
  using DisableSourceTriggerWithChannelsPtr = decltype(&niDCPower_DisableSourceTriggerWithChannels);
  using DisableStartTriggerPtr = decltype(&niDCPower_DisableStartTrigger);
  using DisableStartTriggerWithChannelsPtr = decltype(&niDCPower_DisableStartTriggerWithChannels);
  using ErrorMessagePtr = decltype(&niDCPower_error_message);
  using ErrorQueryPtr = decltype(&niDCPower_error_query);
  using ExportAttributeConfigurationBufferPtr = decltype(&niDCPower_ExportAttributeConfigurationBuffer);
  using ExportAttributeConfigurationFilePtr = decltype(&niDCPower_ExportAttributeConfigurationFile);
  using ExportSignalPtr = decltype(&niDCPower_ExportSignal);
  using ExportSignalWithChannelsPtr = decltype(&niDCPower_ExportSignalWithChannels);
  using FetchMultiplePtr = decltype(&niDCPower_FetchMultiple);
  using FetchMultipleLCRPtr = decltype(&niDCPower_FetchMultipleLCR);
  using GetAttributeViBooleanPtr = decltype(&niDCPower_GetAttributeViBoolean);
  using GetAttributeViInt32Ptr = decltype(&niDCPower_GetAttributeViInt32);
  using GetAttributeViInt64Ptr = decltype(&niDCPower_GetAttributeViInt64);
  using GetAttributeViReal64Ptr = decltype(&niDCPower_GetAttributeViReal64);
  using GetAttributeViSessionPtr = decltype(&niDCPower_GetAttributeViSession);
  using GetAttributeViStringPtr = decltype(&niDCPower_GetAttributeViString);
  using GetChannelNamePtr = decltype(&niDCPower_GetChannelName);
  using GetChannelNameFromStringPtr = decltype(&niDCPower_GetChannelNameFromString);
  using GetErrorPtr = decltype(&niDCPower_GetError);
  using GetExtCalLastDateAndTimePtr = decltype(&niDCPower_GetExtCalLastDateAndTime);
  using GetExtCalLastTempPtr = decltype(&niDCPower_GetExtCalLastTemp);
  using GetExtCalRecommendedIntervalPtr = decltype(&niDCPower_GetExtCalRecommendedInterval);
  using GetLCRCompensationLastDateAndTimePtr = decltype(&niDCPower_GetLCRCompensationLastDateAndTime);
  using GetLCRCustomCableCompensationDataPtr = decltype(&niDCPower_GetLCRCustomCableCompensationData);
  using GetNextCoercionRecordPtr = decltype(&niDCPower_GetNextCoercionRecord);
  using GetNextInterchangeWarningPtr = decltype(&niDCPower_GetNextInterchangeWarning);
  using GetSelfCalLastDateAndTimePtr = decltype(&niDCPower_GetSelfCalLastDateAndTime);
  using GetSelfCalLastTempPtr = decltype(&niDCPower_GetSelfCalLastTemp);
  using ImportAttributeConfigurationBufferPtr = decltype(&niDCPower_ImportAttributeConfigurationBuffer);
  using ImportAttributeConfigurationFilePtr = decltype(&niDCPower_ImportAttributeConfigurationFile);
  using InitializeWithChannelsPtr = decltype(&niDCPower_InitializeWithChannels);
  using InitializeWithIndependentChannelsPtr = decltype(&niDCPower_InitializeWithIndependentChannels);
  using InitiatePtr = decltype(&niDCPower_Initiate);
  using InitiateWithChannelsPtr = decltype(&niDCPower_InitiateWithChannels);
  using InvalidateAllAttributesPtr = decltype(&niDCPower_InvalidateAllAttributes);
  using LockSessionPtr = ViStatus (*)(ViSession vi, ViBoolean* callerHasLock);
  using MeasurePtr = decltype(&niDCPower_Measure);
  using MeasureMultiplePtr = decltype(&niDCPower_MeasureMultiple);
  using MeasureMultipleLCRPtr = decltype(&niDCPower_MeasureMultipleLCR);
  using ParseChannelCountPtr = ViStatus (*)(ViSession vi, ViConstString channelsString, ViUInt32* numberOfChannels);
  using PerformLCRLoadCompensationPtr = decltype(&niDCPower_PerformLCRLoadCompensation);
  using PerformLCROpenCompensationPtr = decltype(&niDCPower_PerformLCROpenCompensation);
  using PerformLCROpenCustomCableCompensationPtr = decltype(&niDCPower_PerformLCROpenCustomCableCompensation);
  using PerformLCRShortCompensationPtr = decltype(&niDCPower_PerformLCRShortCompensation);
  using PerformLCRShortCustomCableCompensationPtr = decltype(&niDCPower_PerformLCRShortCustomCableCompensation);
  using QueryInCompliancePtr = decltype(&niDCPower_QueryInCompliance);
  using QueryLatchedOutputCutoffStatePtr = decltype(&niDCPower_QueryLatchedOutputCutoffState);
  using QueryMaxCurrentLimitPtr = decltype(&niDCPower_QueryMaxCurrentLimit);
  using QueryMaxVoltageLevelPtr = decltype(&niDCPower_QueryMaxVoltageLevel);
  using QueryMinCurrentLimitPtr = decltype(&niDCPower_QueryMinCurrentLimit);
  using QueryOutputStatePtr = decltype(&niDCPower_QueryOutputState);
  using ReadCurrentTemperaturePtr = decltype(&niDCPower_ReadCurrentTemperature);
  using ResetPtr = decltype(&niDCPower_reset);
  using ResetDevicePtr = decltype(&niDCPower_ResetDevice);
  using ResetInterchangeCheckPtr = decltype(&niDCPower_ResetInterchangeCheck);
  using ResetWithChannelsPtr = decltype(&niDCPower_ResetWithChannels);
  using ResetWithDefaultsPtr = decltype(&niDCPower_ResetWithDefaults);
  using RevisionQueryPtr = decltype(&niDCPower_revision_query);
  using SelfTestPtr = decltype(&niDCPower_self_test);
  using SendSoftwareEdgeTriggerPtr = decltype(&niDCPower_SendSoftwareEdgeTrigger);
  using SendSoftwareEdgeTriggerWithChannelsPtr = decltype(&niDCPower_SendSoftwareEdgeTriggerWithChannels);
  using SetAttributeViBooleanPtr = decltype(&niDCPower_SetAttributeViBoolean);
  using SetAttributeViInt32Ptr = decltype(&niDCPower_SetAttributeViInt32);
  using SetAttributeViInt64Ptr = decltype(&niDCPower_SetAttributeViInt64);
  using SetAttributeViReal64Ptr = decltype(&niDCPower_SetAttributeViReal64);
  using SetAttributeViSessionPtr = decltype(&niDCPower_SetAttributeViSession);
  using SetAttributeViStringPtr = decltype(&niDCPower_SetAttributeViString);
  using SetSequencePtr = decltype(&niDCPower_SetSequence);
  using UnlockSessionPtr = ViStatus (*)(ViSession vi, ViBoolean* callerHasLock);
  using WaitForEventPtr = decltype(&niDCPower_WaitForEvent);
  using WaitForEventWithChannelsPtr = decltype(&niDCPower_WaitForEventWithChannels);
  using SetRuntimeEnvironmentPtr = ViStatus (*)(ViConstString environment, ViConstString environmentVersion, ViConstString reserved1, ViConstString reserved2);

  typedef struct FunctionPointers {
    AbortPtr Abort;
    AbortWithChannelsPtr AbortWithChannels;
    CalSelfCalibratePtr CalSelfCalibrate;
    ClearErrorPtr ClearError;
    ClearInterchangeWarningsPtr ClearInterchangeWarnings;
    ClearLatchedOutputCutoffStatePtr ClearLatchedOutputCutoffState;
    ClosePtr Close;
    CommitPtr Commit;
    CommitWithChannelsPtr CommitWithChannels;
    ConfigureApertureTimePtr ConfigureApertureTime;
    ConfigureAutoZeroPtr ConfigureAutoZero;
    ConfigureCurrentLevelPtr ConfigureCurrentLevel;
    ConfigureCurrentLevelRangePtr ConfigureCurrentLevelRange;
    ConfigureCurrentLimitPtr ConfigureCurrentLimit;
    ConfigureCurrentLimitRangePtr ConfigureCurrentLimitRange;
    ConfigureDigitalEdgeMeasureTriggerPtr ConfigureDigitalEdgeMeasureTrigger;
    ConfigureDigitalEdgeMeasureTriggerWithChannelsPtr ConfigureDigitalEdgeMeasureTriggerWithChannels;
    ConfigureDigitalEdgePulseTriggerPtr ConfigureDigitalEdgePulseTrigger;
    ConfigureDigitalEdgePulseTriggerWithChannelsPtr ConfigureDigitalEdgePulseTriggerWithChannels;
    ConfigureDigitalEdgeSequenceAdvanceTriggerPtr ConfigureDigitalEdgeSequenceAdvanceTrigger;
    ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsPtr ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels;
    ConfigureDigitalEdgeShutdownTriggerWithChannelsPtr ConfigureDigitalEdgeShutdownTriggerWithChannels;
    ConfigureDigitalEdgeSourceTriggerPtr ConfigureDigitalEdgeSourceTrigger;
    ConfigureDigitalEdgeSourceTriggerWithChannelsPtr ConfigureDigitalEdgeSourceTriggerWithChannels;
    ConfigureDigitalEdgeStartTriggerPtr ConfigureDigitalEdgeStartTrigger;
    ConfigureDigitalEdgeStartTriggerWithChannelsPtr ConfigureDigitalEdgeStartTriggerWithChannels;
    ConfigureLCRCustomCableCompensationPtr ConfigureLCRCustomCableCompensation;
    ConfigureOutputEnabledPtr ConfigureOutputEnabled;
    ConfigureOutputFunctionPtr ConfigureOutputFunction;
    ConfigureOutputResistancePtr ConfigureOutputResistance;
    ConfigureOvpPtr ConfigureOvp;
    ConfigurePowerLineFrequencyPtr ConfigurePowerLineFrequency;
    ConfigurePulseBiasCurrentLevelPtr ConfigurePulseBiasCurrentLevel;
    ConfigurePulseBiasCurrentLimitPtr ConfigurePulseBiasCurrentLimit;
    ConfigurePulseBiasVoltageLevelPtr ConfigurePulseBiasVoltageLevel;
    ConfigurePulseBiasVoltageLimitPtr ConfigurePulseBiasVoltageLimit;
    ConfigurePulseCurrentLevelPtr ConfigurePulseCurrentLevel;
    ConfigurePulseCurrentLevelRangePtr ConfigurePulseCurrentLevelRange;
    ConfigurePulseCurrentLimitPtr ConfigurePulseCurrentLimit;
    ConfigurePulseCurrentLimitRangePtr ConfigurePulseCurrentLimitRange;
    ConfigurePulseVoltageLevelPtr ConfigurePulseVoltageLevel;
    ConfigurePulseVoltageLevelRangePtr ConfigurePulseVoltageLevelRange;
    ConfigurePulseVoltageLimitPtr ConfigurePulseVoltageLimit;
    ConfigurePulseVoltageLimitRangePtr ConfigurePulseVoltageLimitRange;
    ConfigureSensePtr ConfigureSense;
    ConfigureSoftwareEdgeMeasureTriggerPtr ConfigureSoftwareEdgeMeasureTrigger;
    ConfigureSoftwareEdgeMeasureTriggerWithChannelsPtr ConfigureSoftwareEdgeMeasureTriggerWithChannels;
    ConfigureSoftwareEdgePulseTriggerPtr ConfigureSoftwareEdgePulseTrigger;
    ConfigureSoftwareEdgePulseTriggerWithChannelsPtr ConfigureSoftwareEdgePulseTriggerWithChannels;
    ConfigureSoftwareEdgeSequenceAdvanceTriggerPtr ConfigureSoftwareEdgeSequenceAdvanceTrigger;
    ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsPtr ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels;
    ConfigureSoftwareEdgeShutdownTriggerWithChannelsPtr ConfigureSoftwareEdgeShutdownTriggerWithChannels;
    ConfigureSoftwareEdgeSourceTriggerPtr ConfigureSoftwareEdgeSourceTrigger;
    ConfigureSoftwareEdgeSourceTriggerWithChannelsPtr ConfigureSoftwareEdgeSourceTriggerWithChannels;
    ConfigureSoftwareEdgeStartTriggerPtr ConfigureSoftwareEdgeStartTrigger;
    ConfigureSoftwareEdgeStartTriggerWithChannelsPtr ConfigureSoftwareEdgeStartTriggerWithChannels;
    ConfigureSourceModePtr ConfigureSourceMode;
    ConfigureSourceModeWithChannelsPtr ConfigureSourceModeWithChannels;
    ConfigureVoltageLevelPtr ConfigureVoltageLevel;
    ConfigureVoltageLevelRangePtr ConfigureVoltageLevelRange;
    ConfigureVoltageLimitPtr ConfigureVoltageLimit;
    ConfigureVoltageLimitRangePtr ConfigureVoltageLimitRange;
    CreateAdvancedSequencePtr CreateAdvancedSequence;
    CreateAdvancedSequenceCommitStepWithChannelsPtr CreateAdvancedSequenceCommitStepWithChannels;
    CreateAdvancedSequenceStepPtr CreateAdvancedSequenceStep;
    CreateAdvancedSequenceStepWithChannelsPtr CreateAdvancedSequenceStepWithChannels;
    CreateAdvancedSequenceWithChannelsPtr CreateAdvancedSequenceWithChannels;
    DeleteAdvancedSequencePtr DeleteAdvancedSequence;
    DeleteAdvancedSequenceWithChannelsPtr DeleteAdvancedSequenceWithChannels;
    DisablePtr Disable;
    DisablePulseTriggerPtr DisablePulseTrigger;
    DisablePulseTriggerWithChannelsPtr DisablePulseTriggerWithChannels;
    DisableSequenceAdvanceTriggerPtr DisableSequenceAdvanceTrigger;
    DisableSequenceAdvanceTriggerWithChannelsPtr DisableSequenceAdvanceTriggerWithChannels;
    DisableShutdownTriggerWithChannelsPtr DisableShutdownTriggerWithChannels;
    DisableSourceTriggerPtr DisableSourceTrigger;
    DisableSourceTriggerWithChannelsPtr DisableSourceTriggerWithChannels;
    DisableStartTriggerPtr DisableStartTrigger;
    DisableStartTriggerWithChannelsPtr DisableStartTriggerWithChannels;
    ErrorMessagePtr ErrorMessage;
    ErrorQueryPtr ErrorQuery;
    ExportAttributeConfigurationBufferPtr ExportAttributeConfigurationBuffer;
    ExportAttributeConfigurationFilePtr ExportAttributeConfigurationFile;
    ExportSignalPtr ExportSignal;
    ExportSignalWithChannelsPtr ExportSignalWithChannels;
    FetchMultiplePtr FetchMultiple;
    FetchMultipleLCRPtr FetchMultipleLCR;
    GetAttributeViBooleanPtr GetAttributeViBoolean;
    GetAttributeViInt32Ptr GetAttributeViInt32;
    GetAttributeViInt64Ptr GetAttributeViInt64;
    GetAttributeViReal64Ptr GetAttributeViReal64;
    GetAttributeViSessionPtr GetAttributeViSession;
    GetAttributeViStringPtr GetAttributeViString;
    GetChannelNamePtr GetChannelName;
    GetChannelNameFromStringPtr GetChannelNameFromString;
    GetErrorPtr GetError;
    GetExtCalLastDateAndTimePtr GetExtCalLastDateAndTime;
    GetExtCalLastTempPtr GetExtCalLastTemp;
    GetExtCalRecommendedIntervalPtr GetExtCalRecommendedInterval;
    GetLCRCompensationLastDateAndTimePtr GetLCRCompensationLastDateAndTime;
    GetLCRCustomCableCompensationDataPtr GetLCRCustomCableCompensationData;
    GetNextCoercionRecordPtr GetNextCoercionRecord;
    GetNextInterchangeWarningPtr GetNextInterchangeWarning;
    GetSelfCalLastDateAndTimePtr GetSelfCalLastDateAndTime;
    GetSelfCalLastTempPtr GetSelfCalLastTemp;
    ImportAttributeConfigurationBufferPtr ImportAttributeConfigurationBuffer;
    ImportAttributeConfigurationFilePtr ImportAttributeConfigurationFile;
    InitializeWithChannelsPtr InitializeWithChannels;
    InitializeWithIndependentChannelsPtr InitializeWithIndependentChannels;
    InitiatePtr Initiate;
    InitiateWithChannelsPtr InitiateWithChannels;
    InvalidateAllAttributesPtr InvalidateAllAttributes;
    LockSessionPtr LockSession;
    MeasurePtr Measure;
    MeasureMultiplePtr MeasureMultiple;
    MeasureMultipleLCRPtr MeasureMultipleLCR;
    ParseChannelCountPtr ParseChannelCount;
    PerformLCRLoadCompensationPtr PerformLCRLoadCompensation;
    PerformLCROpenCompensationPtr PerformLCROpenCompensation;
    PerformLCROpenCustomCableCompensationPtr PerformLCROpenCustomCableCompensation;
    PerformLCRShortCompensationPtr PerformLCRShortCompensation;
    PerformLCRShortCustomCableCompensationPtr PerformLCRShortCustomCableCompensation;
    QueryInCompliancePtr QueryInCompliance;
    QueryLatchedOutputCutoffStatePtr QueryLatchedOutputCutoffState;
    QueryMaxCurrentLimitPtr QueryMaxCurrentLimit;
    QueryMaxVoltageLevelPtr QueryMaxVoltageLevel;
    QueryMinCurrentLimitPtr QueryMinCurrentLimit;
    QueryOutputStatePtr QueryOutputState;
    ReadCurrentTemperaturePtr ReadCurrentTemperature;
    ResetPtr Reset;
    ResetDevicePtr ResetDevice;
    ResetInterchangeCheckPtr ResetInterchangeCheck;
    ResetWithChannelsPtr ResetWithChannels;
    ResetWithDefaultsPtr ResetWithDefaults;
    RevisionQueryPtr RevisionQuery;
    SelfTestPtr SelfTest;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SendSoftwareEdgeTriggerWithChannelsPtr SendSoftwareEdgeTriggerWithChannels;
    SetAttributeViBooleanPtr SetAttributeViBoolean;
    SetAttributeViInt32Ptr SetAttributeViInt32;
    SetAttributeViInt64Ptr SetAttributeViInt64;
    SetAttributeViReal64Ptr SetAttributeViReal64;
    SetAttributeViSessionPtr SetAttributeViSession;
    SetAttributeViStringPtr SetAttributeViString;
    SetSequencePtr SetSequence;
    UnlockSessionPtr UnlockSession;
    WaitForEventPtr WaitForEvent;
    WaitForEventWithChannelsPtr WaitForEventWithChannels;
    SetRuntimeEnvironmentPtr SetRuntimeEnvironment;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
  bool runtime_environment_set_; // needed to test that we properly call SetRuntimeEnvironment
};

}  // namespace nidcpower_grpc

#endif  // NIDCPOWER_GRPC_LIBRARY_H
