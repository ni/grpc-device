
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-DCPower.
//---------------------------------------------------------------------
#include "nidcpower_client.h"

#include <grpcpp/grpcpp.h>

#include <nidcpower.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nidcpower_grpc::experimental::client {

AbortResponse
abort(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AbortRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AbortResponse{};

  raise_if_error(
      stub->Abort(&context, request, &response),
      context);

  return response;
}

AbortWithChannelsResponse
abort_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = AbortWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = AbortWithChannelsResponse{};

  raise_if_error(
      stub->AbortWithChannels(&context, request, &response),
      context);

  return response;
}

CalSelfCalibrateResponse
cal_self_calibrate(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = CalSelfCalibrateRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = CalSelfCalibrateResponse{};

  raise_if_error(
      stub->CalSelfCalibrate(&context, request, &response),
      context);

  return response;
}

ClearErrorResponse
clear_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ClearErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ClearErrorResponse{};

  raise_if_error(
      stub->ClearError(&context, request, &response),
      context);

  return response;
}

ClearInterchangeWarningsResponse
clear_interchange_warnings(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ClearInterchangeWarningsRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ClearInterchangeWarningsResponse{};

  raise_if_error(
      stub->ClearInterchangeWarnings(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

CommitResponse
commit(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CommitRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CommitResponse{};

  raise_if_error(
      stub->Commit(&context, request, &response),
      context);

  return response;
}

CommitWithChannelsResponse
commit_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = CommitWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = CommitWithChannelsResponse{};

  raise_if_error(
      stub->CommitWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureApertureTimeResponse
configure_aperture_time(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& aperture_time, const simple_variant<ApertureTimeUnits, pb::int32>& units)
{
  ::grpc::ClientContext context;

  auto request = ConfigureApertureTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_aperture_time(aperture_time);
  const auto units_ptr = units.get_if<ApertureTimeUnits>();
  const auto units_raw_ptr = units.get_if<pb::int32>();
  if (units_ptr) {
    request.set_units(*units_ptr);
  }
  else if (units_raw_ptr) {
    request.set_units_raw(*units_raw_ptr);
  }

  auto response = ConfigureApertureTimeResponse{};

  raise_if_error(
      stub->ConfigureApertureTime(&context, request, &response),
      context);

  return response;
}

ConfigureAutoZeroResponse
configure_auto_zero(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<AutoZero, pb::int32>& auto_zero)
{
  ::grpc::ClientContext context;

  auto request = ConfigureAutoZeroRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto auto_zero_ptr = auto_zero.get_if<AutoZero>();
  const auto auto_zero_raw_ptr = auto_zero.get_if<pb::int32>();
  if (auto_zero_ptr) {
    request.set_auto_zero(*auto_zero_ptr);
  }
  else if (auto_zero_raw_ptr) {
    request.set_auto_zero_raw(*auto_zero_raw_ptr);
  }

  auto response = ConfigureAutoZeroResponse{};

  raise_if_error(
      stub->ConfigureAutoZero(&context, request, &response),
      context);

  return response;
}

ConfigureCurrentLevelResponse
configure_current_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& level)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCurrentLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_level(level);

  auto response = ConfigureCurrentLevelResponse{};

  raise_if_error(
      stub->ConfigureCurrentLevel(&context, request, &response),
      context);

  return response;
}

ConfigureCurrentLevelRangeResponse
configure_current_level_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCurrentLevelRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigureCurrentLevelRangeResponse{};

  raise_if_error(
      stub->ConfigureCurrentLevelRange(&context, request, &response),
      context);

  return response;
}

ConfigureCurrentLimitResponse
configure_current_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<CurrentLimitBehavior, pb::int32>& behavior, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCurrentLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto behavior_ptr = behavior.get_if<CurrentLimitBehavior>();
  const auto behavior_raw_ptr = behavior.get_if<pb::int32>();
  if (behavior_ptr) {
    request.set_behavior(*behavior_ptr);
  }
  else if (behavior_raw_ptr) {
    request.set_behavior_raw(*behavior_raw_ptr);
  }
  request.set_limit(limit);

  auto response = ConfigureCurrentLimitResponse{};

  raise_if_error(
      stub->ConfigureCurrentLimit(&context, request, &response),
      context);

  return response;
}

ConfigureCurrentLimitRangeResponse
configure_current_limit_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCurrentLimitRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigureCurrentLimitRangeResponse{};

  raise_if_error(
      stub->ConfigureCurrentLimitRange(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeMeasureTriggerResponse
configure_digital_edge_measure_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeMeasureTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeMeasureTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeMeasureTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse
configure_digital_edge_measure_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeMeasureTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeMeasureTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgePulseTriggerResponse
configure_digital_edge_pulse_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgePulseTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgePulseTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgePulseTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgePulseTriggerWithChannelsResponse
configure_digital_edge_pulse_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgePulseTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgePulseTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgePulseTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeSequenceAdvanceTriggerResponse
configure_digital_edge_sequence_advance_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeSequenceAdvanceTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeSequenceAdvanceTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeSequenceAdvanceTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse
configure_digital_edge_sequence_advance_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse
configure_digital_edge_shutdown_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeShutdownTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeShutdownTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeSourceTriggerResponse
configure_digital_edge_source_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeSourceTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeSourceTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeSourceTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeSourceTriggerWithChannelsResponse
configure_digital_edge_source_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeSourceTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeSourceTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeSourceTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeStartTriggerResponse
configure_digital_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeStartTriggerWithChannelsResponse
configure_digital_edge_start_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& input_terminal, const simple_variant<DigitalEdge, pb::int32>& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeStartTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_input_terminal(input_terminal);
  const auto edge_ptr = edge.get_if<DigitalEdge>();
  const auto edge_raw_ptr = edge.get_if<pb::int32>();
  if (edge_ptr) {
    request.set_edge(*edge_ptr);
  }
  else if (edge_raw_ptr) {
    request.set_edge_raw(*edge_raw_ptr);
  }

  auto response = ConfigureDigitalEdgeStartTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeStartTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureLCRCompensationResponse
configure_lcr_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& compensation_data)
{
  ::grpc::ClientContext context;

  auto request = ConfigureLCRCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_compensation_data(compensation_data);

  auto response = ConfigureLCRCompensationResponse{};

  raise_if_error(
      stub->ConfigureLCRCompensation(&context, request, &response),
      context);

  return response;
}

ConfigureLCRCustomCableCompensationResponse
configure_lcr_custom_cable_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& custom_cable_compensation_data)
{
  ::grpc::ClientContext context;

  auto request = ConfigureLCRCustomCableCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_custom_cable_compensation_data(custom_cable_compensation_data);

  auto response = ConfigureLCRCustomCableCompensationResponse{};

  raise_if_error(
      stub->ConfigureLCRCustomCableCompensation(&context, request, &response),
      context);

  return response;
}

ConfigureOutputEnabledResponse
configure_output_enabled(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const bool& enabled)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputEnabledRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_enabled(enabled);

  auto response = ConfigureOutputEnabledResponse{};

  raise_if_error(
      stub->ConfigureOutputEnabled(&context, request, &response),
      context);

  return response;
}

ConfigureOutputFunctionResponse
configure_output_function(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<OutputFunction, pb::int32>& function)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputFunctionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto function_ptr = function.get_if<OutputFunction>();
  const auto function_raw_ptr = function.get_if<pb::int32>();
  if (function_ptr) {
    request.set_function(*function_ptr);
  }
  else if (function_raw_ptr) {
    request.set_function_raw(*function_raw_ptr);
  }

  auto response = ConfigureOutputFunctionResponse{};

  raise_if_error(
      stub->ConfigureOutputFunction(&context, request, &response),
      context);

  return response;
}

ConfigureOutputRangeResponse
configure_output_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::int32& range_type, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range_type(range_type);
  request.set_range(range);

  auto response = ConfigureOutputRangeResponse{};

  raise_if_error(
      stub->ConfigureOutputRange(&context, request, &response),
      context);

  return response;
}

ConfigureOutputResistanceResponse
configure_output_resistance(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& resistance)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputResistanceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_resistance(resistance);

  auto response = ConfigureOutputResistanceResponse{};

  raise_if_error(
      stub->ConfigureOutputResistance(&context, request, &response),
      context);

  return response;
}

ConfigureOvpResponse
configure_ovp(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const bool& enabled, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOvpRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_enabled(enabled);
  request.set_limit(limit);

  auto response = ConfigureOvpResponse{};

  raise_if_error(
      stub->ConfigureOvp(&context, request, &response),
      context);

  return response;
}

ConfigurePowerLineFrequencyResponse
configure_power_line_frequency(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<PowerLineFrequencies, double>& powerline_frequency)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePowerLineFrequencyRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto powerline_frequency_ptr = powerline_frequency.get_if<PowerLineFrequencies>();
  const auto powerline_frequency_raw_ptr = powerline_frequency.get_if<double>();
  if (powerline_frequency_ptr) {
    request.set_powerline_frequency(*powerline_frequency_ptr);
  }
  else if (powerline_frequency_raw_ptr) {
    request.set_powerline_frequency_raw(*powerline_frequency_raw_ptr);
  }

  auto response = ConfigurePowerLineFrequencyResponse{};

  raise_if_error(
      stub->ConfigurePowerLineFrequency(&context, request, &response),
      context);

  return response;
}

ConfigurePulseBiasCurrentLevelResponse
configure_pulse_bias_current_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& level)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseBiasCurrentLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_level(level);

  auto response = ConfigurePulseBiasCurrentLevelResponse{};

  raise_if_error(
      stub->ConfigurePulseBiasCurrentLevel(&context, request, &response),
      context);

  return response;
}

ConfigurePulseBiasCurrentLimitResponse
configure_pulse_bias_current_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseBiasCurrentLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_limit(limit);

  auto response = ConfigurePulseBiasCurrentLimitResponse{};

  raise_if_error(
      stub->ConfigurePulseBiasCurrentLimit(&context, request, &response),
      context);

  return response;
}

ConfigurePulseBiasVoltageLevelResponse
configure_pulse_bias_voltage_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& level)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseBiasVoltageLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_level(level);

  auto response = ConfigurePulseBiasVoltageLevelResponse{};

  raise_if_error(
      stub->ConfigurePulseBiasVoltageLevel(&context, request, &response),
      context);

  return response;
}

ConfigurePulseBiasVoltageLimitResponse
configure_pulse_bias_voltage_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseBiasVoltageLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_limit(limit);

  auto response = ConfigurePulseBiasVoltageLimitResponse{};

  raise_if_error(
      stub->ConfigurePulseBiasVoltageLimit(&context, request, &response),
      context);

  return response;
}

ConfigurePulseCurrentLevelResponse
configure_pulse_current_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& level)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseCurrentLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_level(level);

  auto response = ConfigurePulseCurrentLevelResponse{};

  raise_if_error(
      stub->ConfigurePulseCurrentLevel(&context, request, &response),
      context);

  return response;
}

ConfigurePulseCurrentLevelRangeResponse
configure_pulse_current_level_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseCurrentLevelRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigurePulseCurrentLevelRangeResponse{};

  raise_if_error(
      stub->ConfigurePulseCurrentLevelRange(&context, request, &response),
      context);

  return response;
}

ConfigurePulseCurrentLimitResponse
configure_pulse_current_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseCurrentLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_limit(limit);

  auto response = ConfigurePulseCurrentLimitResponse{};

  raise_if_error(
      stub->ConfigurePulseCurrentLimit(&context, request, &response),
      context);

  return response;
}

ConfigurePulseCurrentLimitRangeResponse
configure_pulse_current_limit_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseCurrentLimitRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigurePulseCurrentLimitRangeResponse{};

  raise_if_error(
      stub->ConfigurePulseCurrentLimitRange(&context, request, &response),
      context);

  return response;
}

ConfigurePulseVoltageLevelResponse
configure_pulse_voltage_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& level)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseVoltageLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_level(level);

  auto response = ConfigurePulseVoltageLevelResponse{};

  raise_if_error(
      stub->ConfigurePulseVoltageLevel(&context, request, &response),
      context);

  return response;
}

ConfigurePulseVoltageLevelRangeResponse
configure_pulse_voltage_level_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseVoltageLevelRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigurePulseVoltageLevelRangeResponse{};

  raise_if_error(
      stub->ConfigurePulseVoltageLevelRange(&context, request, &response),
      context);

  return response;
}

ConfigurePulseVoltageLimitResponse
configure_pulse_voltage_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseVoltageLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_limit(limit);

  auto response = ConfigurePulseVoltageLimitResponse{};

  raise_if_error(
      stub->ConfigurePulseVoltageLimit(&context, request, &response),
      context);

  return response;
}

ConfigurePulseVoltageLimitRangeResponse
configure_pulse_voltage_limit_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigurePulseVoltageLimitRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigurePulseVoltageLimitRangeResponse{};

  raise_if_error(
      stub->ConfigurePulseVoltageLimitRange(&context, request, &response),
      context);

  return response;
}

ConfigureSenseResponse
configure_sense(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<Sense, pb::int32>& sense)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSenseRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto sense_ptr = sense.get_if<Sense>();
  const auto sense_raw_ptr = sense.get_if<pb::int32>();
  if (sense_ptr) {
    request.set_sense(*sense_ptr);
  }
  else if (sense_raw_ptr) {
    request.set_sense_raw(*sense_raw_ptr);
  }

  auto response = ConfigureSenseResponse{};

  raise_if_error(
      stub->ConfigureSense(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeMeasureTriggerResponse
configure_software_edge_measure_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeMeasureTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgeMeasureTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeMeasureTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse
configure_software_edge_measure_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeMeasureTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeMeasureTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgePulseTriggerResponse
configure_software_edge_pulse_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgePulseTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgePulseTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgePulseTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgePulseTriggerWithChannelsResponse
configure_software_edge_pulse_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgePulseTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ConfigureSoftwareEdgePulseTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgePulseTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse
configure_software_edge_sequence_advance_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeSequenceAdvanceTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeSequenceAdvanceTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse
configure_software_edge_sequence_advance_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse
configure_software_edge_shutdown_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeShutdownTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeShutdownTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeSourceTriggerResponse
configure_software_edge_source_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeSourceTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgeSourceTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeSourceTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse
configure_software_edge_source_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeSourceTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeSourceTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeStartTriggerResponse
configure_software_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgeStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeStartTriggerWithChannelsResponse
configure_software_edge_start_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeStartTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ConfigureSoftwareEdgeStartTriggerWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeStartTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureSourceModeResponse
configure_source_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<SourceMode, pb::int32>& source_mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSourceModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto source_mode_ptr = source_mode.get_if<SourceMode>();
  const auto source_mode_raw_ptr = source_mode.get_if<pb::int32>();
  if (source_mode_ptr) {
    request.set_source_mode(*source_mode_ptr);
  }
  else if (source_mode_raw_ptr) {
    request.set_source_mode_raw(*source_mode_raw_ptr);
  }

  auto response = ConfigureSourceModeResponse{};

  raise_if_error(
      stub->ConfigureSourceMode(&context, request, &response),
      context);

  return response;
}

ConfigureSourceModeWithChannelsResponse
configure_source_mode_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<SourceMode, pb::int32>& source_mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSourceModeWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto source_mode_ptr = source_mode.get_if<SourceMode>();
  const auto source_mode_raw_ptr = source_mode.get_if<pb::int32>();
  if (source_mode_ptr) {
    request.set_source_mode(*source_mode_ptr);
  }
  else if (source_mode_raw_ptr) {
    request.set_source_mode_raw(*source_mode_raw_ptr);
  }

  auto response = ConfigureSourceModeWithChannelsResponse{};

  raise_if_error(
      stub->ConfigureSourceModeWithChannels(&context, request, &response),
      context);

  return response;
}

ConfigureVoltageLevelResponse
configure_voltage_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& level)
{
  ::grpc::ClientContext context;

  auto request = ConfigureVoltageLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_level(level);

  auto response = ConfigureVoltageLevelResponse{};

  raise_if_error(
      stub->ConfigureVoltageLevel(&context, request, &response),
      context);

  return response;
}

ConfigureVoltageLevelRangeResponse
configure_voltage_level_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigureVoltageLevelRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigureVoltageLevelRangeResponse{};

  raise_if_error(
      stub->ConfigureVoltageLevelRange(&context, request, &response),
      context);

  return response;
}

ConfigureVoltageLimitResponse
configure_voltage_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& limit)
{
  ::grpc::ClientContext context;

  auto request = ConfigureVoltageLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_limit(limit);

  auto response = ConfigureVoltageLimitResponse{};

  raise_if_error(
      stub->ConfigureVoltageLimit(&context, request, &response),
      context);

  return response;
}

ConfigureVoltageLimitRangeResponse
configure_voltage_limit_range(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& range)
{
  ::grpc::ClientContext context;

  auto request = ConfigureVoltageLimitRangeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_range(range);

  auto response = ConfigureVoltageLimitRangeResponse{};

  raise_if_error(
      stub->ConfigureVoltageLimitRange(&context, request, &response),
      context);

  return response;
}

CreateAdvancedSequenceResponse
create_advanced_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& sequence_name, const std::vector<pb::int32>& attribute_ids, const bool& set_as_active_sequence)
{
  ::grpc::ClientContext context;

  auto request = CreateAdvancedSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_sequence_name(sequence_name);
  copy_array(attribute_ids, request.mutable_attribute_ids());
  request.set_set_as_active_sequence(set_as_active_sequence);

  auto response = CreateAdvancedSequenceResponse{};

  raise_if_error(
      stub->CreateAdvancedSequence(&context, request, &response),
      context);

  return response;
}

CreateAdvancedSequenceCommitStepWithChannelsResponse
create_advanced_sequence_commit_step_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const bool& set_as_active_step)
{
  ::grpc::ClientContext context;

  auto request = CreateAdvancedSequenceCommitStepWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_set_as_active_step(set_as_active_step);

  auto response = CreateAdvancedSequenceCommitStepWithChannelsResponse{};

  raise_if_error(
      stub->CreateAdvancedSequenceCommitStepWithChannels(&context, request, &response),
      context);

  return response;
}

CreateAdvancedSequenceStepResponse
create_advanced_sequence_step(const StubPtr& stub, const nidevice_grpc::Session& vi, const bool& set_as_active_step)
{
  ::grpc::ClientContext context;

  auto request = CreateAdvancedSequenceStepRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_set_as_active_step(set_as_active_step);

  auto response = CreateAdvancedSequenceStepResponse{};

  raise_if_error(
      stub->CreateAdvancedSequenceStep(&context, request, &response),
      context);

  return response;
}

CreateAdvancedSequenceStepWithChannelsResponse
create_advanced_sequence_step_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const bool& set_as_active_step)
{
  ::grpc::ClientContext context;

  auto request = CreateAdvancedSequenceStepWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_set_as_active_step(set_as_active_step);

  auto response = CreateAdvancedSequenceStepWithChannelsResponse{};

  raise_if_error(
      stub->CreateAdvancedSequenceStepWithChannels(&context, request, &response),
      context);

  return response;
}

CreateAdvancedSequenceWithChannelsResponse
create_advanced_sequence_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& sequence_name, const std::vector<pb::int32>& attribute_ids, const bool& set_as_active_sequence)
{
  ::grpc::ClientContext context;

  auto request = CreateAdvancedSequenceWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_sequence_name(sequence_name);
  copy_array(attribute_ids, request.mutable_attribute_ids());
  request.set_set_as_active_sequence(set_as_active_sequence);

  auto response = CreateAdvancedSequenceWithChannelsResponse{};

  raise_if_error(
      stub->CreateAdvancedSequenceWithChannels(&context, request, &response),
      context);

  return response;
}

DeleteAdvancedSequenceResponse
delete_advanced_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& sequence_name)
{
  ::grpc::ClientContext context;

  auto request = DeleteAdvancedSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_sequence_name(sequence_name);

  auto response = DeleteAdvancedSequenceResponse{};

  raise_if_error(
      stub->DeleteAdvancedSequence(&context, request, &response),
      context);

  return response;
}

DeleteAdvancedSequenceWithChannelsResponse
delete_advanced_sequence_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const pb::string& sequence_name)
{
  ::grpc::ClientContext context;

  auto request = DeleteAdvancedSequenceWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_sequence_name(sequence_name);

  auto response = DeleteAdvancedSequenceWithChannelsResponse{};

  raise_if_error(
      stub->DeleteAdvancedSequenceWithChannels(&context, request, &response),
      context);

  return response;
}

DisableResponse
disable(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableResponse{};

  raise_if_error(
      stub->Disable(&context, request, &response),
      context);

  return response;
}

DisablePulseTriggerResponse
disable_pulse_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisablePulseTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisablePulseTriggerResponse{};

  raise_if_error(
      stub->DisablePulseTrigger(&context, request, &response),
      context);

  return response;
}

DisablePulseTriggerWithChannelsResponse
disable_pulse_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisablePulseTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisablePulseTriggerWithChannelsResponse{};

  raise_if_error(
      stub->DisablePulseTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

DisableSequenceAdvanceTriggerResponse
disable_sequence_advance_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableSequenceAdvanceTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableSequenceAdvanceTriggerResponse{};

  raise_if_error(
      stub->DisableSequenceAdvanceTrigger(&context, request, &response),
      context);

  return response;
}

DisableSequenceAdvanceTriggerWithChannelsResponse
disable_sequence_advance_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableSequenceAdvanceTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableSequenceAdvanceTriggerWithChannelsResponse{};

  raise_if_error(
      stub->DisableSequenceAdvanceTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

DisableShutdownTriggerWithChannelsResponse
disable_shutdown_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableShutdownTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableShutdownTriggerWithChannelsResponse{};

  raise_if_error(
      stub->DisableShutdownTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

DisableSourceTriggerResponse
disable_source_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableSourceTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableSourceTriggerResponse{};

  raise_if_error(
      stub->DisableSourceTrigger(&context, request, &response),
      context);

  return response;
}

DisableSourceTriggerWithChannelsResponse
disable_source_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableSourceTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableSourceTriggerWithChannelsResponse{};

  raise_if_error(
      stub->DisableSourceTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

DisableStartTriggerResponse
disable_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableStartTriggerResponse{};

  raise_if_error(
      stub->DisableStartTrigger(&context, request, &response),
      context);

  return response;
}

DisableStartTriggerWithChannelsResponse
disable_start_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableStartTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableStartTriggerWithChannelsResponse{};

  raise_if_error(
      stub->DisableStartTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

ErrorMessageResponse
error_message(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = ErrorMessageRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);

  auto response = ErrorMessageResponse{};

  raise_if_error(
      stub->ErrorMessage(&context, request, &response),
      context);

  return response;
}

ErrorQueryResponse
error_query(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ErrorQueryRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ErrorQueryResponse{};

  raise_if_error(
      stub->ErrorQuery(&context, request, &response),
      context);

  return response;
}

ExportAttributeConfigurationBufferResponse
export_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ExportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationBuffer(&context, request, &response),
      context);

  return response;
}

ExportAttributeConfigurationFileResponse
export_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ExportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationFile(&context, request, &response),
      context);

  return response;
}

ExportSignalResponse
export_signal(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<ExportSignal, pb::int32>& signal, const pb::string& signal_identifier, const pb::string& output_terminal)
{
  ::grpc::ClientContext context;

  auto request = ExportSignalRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto signal_ptr = signal.get_if<ExportSignal>();
  const auto signal_raw_ptr = signal.get_if<pb::int32>();
  if (signal_ptr) {
    request.set_signal(*signal_ptr);
  }
  else if (signal_raw_ptr) {
    request.set_signal_raw(*signal_raw_ptr);
  }
  request.set_signal_identifier(signal_identifier);
  request.set_output_terminal(output_terminal);

  auto response = ExportSignalResponse{};

  raise_if_error(
      stub->ExportSignal(&context, request, &response),
      context);

  return response;
}

ExportSignalWithChannelsResponse
export_signal_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<ExportSignal, pb::int32>& signal, const pb::string& signal_identifier, const pb::string& output_terminal)
{
  ::grpc::ClientContext context;

  auto request = ExportSignalWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto signal_ptr = signal.get_if<ExportSignal>();
  const auto signal_raw_ptr = signal.get_if<pb::int32>();
  if (signal_ptr) {
    request.set_signal(*signal_ptr);
  }
  else if (signal_raw_ptr) {
    request.set_signal_raw(*signal_raw_ptr);
  }
  request.set_signal_identifier(signal_identifier);
  request.set_output_terminal(output_terminal);

  auto response = ExportSignalWithChannelsResponse{};

  raise_if_error(
      stub->ExportSignalWithChannels(&context, request, &response),
      context);

  return response;
}

FetchMultipleResponse
fetch_multiple(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& timeout, const pb::int32& count)
{
  ::grpc::ClientContext context;

  auto request = FetchMultipleRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_timeout(timeout);
  request.set_count(count);

  auto response = FetchMultipleResponse{};

  raise_if_error(
      stub->FetchMultiple(&context, request, &response),
      context);

  return response;
}

FetchMultipleLCRResponse
fetch_multiple_lcr(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& timeout, const pb::int32& count)
{
  ::grpc::ClientContext context;

  auto request = FetchMultipleLCRRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_timeout(timeout);
  request.set_count(count);

  auto response = FetchMultipleLCRResponse{};

  raise_if_error(
      stub->FetchMultipleLCR(&context, request, &response),
      context);

  return response;
}

GetAttributeViBooleanResponse
get_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViBooleanResponse{};

  raise_if_error(
      stub->GetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt32Response
get_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt32Response{};

  raise_if_error(
      stub->GetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt64Response
get_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt64Response{};

  raise_if_error(
      stub->GetAttributeViInt64(&context, request, &response),
      context);

  return response;
}

GetAttributeViReal64Response
get_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViReal64Response{};

  raise_if_error(
      stub->GetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

GetAttributeViSessionResponse
get_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViSessionResponse{};

  raise_if_error(
      stub->GetAttributeViSession(&context, request, &response),
      context);

  return response;
}

GetAttributeViStringResponse
get_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViStringResponse{};

  raise_if_error(
      stub->GetAttributeViString(&context, request, &response),
      context);

  return response;
}

GetChannelNameResponse
get_channel_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& index)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_index(index);

  auto response = GetChannelNameResponse{};

  raise_if_error(
      stub->GetChannelName(&context, request, &response),
      context);

  return response;
}

GetChannelNameFromStringResponse
get_channel_name_from_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& index)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameFromStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_index(index);

  auto response = GetChannelNameFromStringResponse{};

  raise_if_error(
      stub->GetChannelNameFromString(&context, request, &response),
      context);

  return response;
}

GetErrorResponse
get_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetErrorResponse{};

  raise_if_error(
      stub->GetError(&context, request, &response),
      context);

  return response;
}

GetExtCalLastDateAndTimeResponse
get_ext_cal_last_date_and_time(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalLastDateAndTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalLastDateAndTimeResponse{};

  raise_if_error(
      stub->GetExtCalLastDateAndTime(&context, request, &response),
      context);

  return response;
}

GetExtCalLastTempResponse
get_ext_cal_last_temp(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalLastTempRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalLastTempResponse{};

  raise_if_error(
      stub->GetExtCalLastTemp(&context, request, &response),
      context);

  return response;
}

GetExtCalRecommendedIntervalResponse
get_ext_cal_recommended_interval(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalRecommendedIntervalRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalRecommendedIntervalResponse{};

  raise_if_error(
      stub->GetExtCalRecommendedInterval(&context, request, &response),
      context);

  return response;
}

GetLCRCompensationDataResponse
get_lcr_compensation_data(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = GetLCRCompensationDataRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = GetLCRCompensationDataResponse{};

  raise_if_error(
      stub->GetLCRCompensationData(&context, request, &response),
      context);

  return response;
}

GetLCRCompensationLastDateAndTimeResponse
get_lcr_compensation_last_date_and_time(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<LCRCompensationType, pb::int32>& compensation_type)
{
  ::grpc::ClientContext context;

  auto request = GetLCRCompensationLastDateAndTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto compensation_type_ptr = compensation_type.get_if<LCRCompensationType>();
  const auto compensation_type_raw_ptr = compensation_type.get_if<pb::int32>();
  if (compensation_type_ptr) {
    request.set_compensation_type(*compensation_type_ptr);
  }
  else if (compensation_type_raw_ptr) {
    request.set_compensation_type_raw(*compensation_type_raw_ptr);
  }

  auto response = GetLCRCompensationLastDateAndTimeResponse{};

  raise_if_error(
      stub->GetLCRCompensationLastDateAndTime(&context, request, &response),
      context);

  return response;
}

GetLCRCustomCableCompensationDataResponse
get_lcr_custom_cable_compensation_data(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = GetLCRCustomCableCompensationDataRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = GetLCRCustomCableCompensationDataResponse{};

  raise_if_error(
      stub->GetLCRCustomCableCompensationData(&context, request, &response),
      context);

  return response;
}

GetNextCoercionRecordResponse
get_next_coercion_record(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetNextCoercionRecordRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetNextCoercionRecordResponse{};

  raise_if_error(
      stub->GetNextCoercionRecord(&context, request, &response),
      context);

  return response;
}

GetNextInterchangeWarningResponse
get_next_interchange_warning(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetNextInterchangeWarningRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetNextInterchangeWarningResponse{};

  raise_if_error(
      stub->GetNextInterchangeWarning(&context, request, &response),
      context);

  return response;
}

GetSelfCalLastDateAndTimeResponse
get_self_cal_last_date_and_time(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalLastDateAndTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetSelfCalLastDateAndTimeResponse{};

  raise_if_error(
      stub->GetSelfCalLastDateAndTime(&context, request, &response),
      context);

  return response;
}

GetSelfCalLastTempResponse
get_self_cal_last_temp(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalLastTempRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetSelfCalLastTempResponse{};

  raise_if_error(
      stub->GetSelfCalLastTemp(&context, request, &response),
      context);

  return response;
}

ImportAttributeConfigurationBufferResponse
import_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& configuration)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_configuration(configuration);

  auto response = ImportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationBuffer(&context, request, &response),
      context);

  return response;
}

ImportAttributeConfigurationFileResponse
import_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ImportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationFile(&context, request, &response),
      context);

  return response;
}

InitializeWithChannelsResponse
initialize_with_channels(const StubPtr& stub, const pb::string& resource_name, const pb::string& channels, const bool& reset, const pb::string& option_string)
{
  ::grpc::ClientContext context;

  auto request = InitializeWithChannelsRequest{};
  request.set_resource_name(resource_name);
  request.set_channels(channels);
  request.set_reset(reset);
  request.set_option_string(option_string);

  auto response = InitializeWithChannelsResponse{};

  raise_if_error(
      stub->InitializeWithChannels(&context, request, &response),
      context);

  return response;
}

InitializeWithIndependentChannelsResponse
initialize_with_independent_channels(const StubPtr& stub, const pb::string& resource_name, const bool& reset, const pb::string& option_string)
{
  ::grpc::ClientContext context;

  auto request = InitializeWithIndependentChannelsRequest{};
  request.set_resource_name(resource_name);
  request.set_reset(reset);
  request.set_option_string(option_string);

  auto response = InitializeWithIndependentChannelsResponse{};

  raise_if_error(
      stub->InitializeWithIndependentChannels(&context, request, &response),
      context);

  return response;
}

InitiateResponse
initiate(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = InitiateRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = InitiateResponse{};

  raise_if_error(
      stub->Initiate(&context, request, &response),
      context);

  return response;
}

InitiateWithChannelsResponse
initiate_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = InitiateWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = InitiateWithChannelsResponse{};

  raise_if_error(
      stub->InitiateWithChannels(&context, request, &response),
      context);

  return response;
}

InvalidateAllAttributesResponse
invalidate_all_attributes(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = InvalidateAllAttributesRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = InvalidateAllAttributesResponse{};

  raise_if_error(
      stub->InvalidateAllAttributes(&context, request, &response),
      context);

  return response;
}

MeasureResponse
measure(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<MeasurementTypes, pb::int32>& measurement_type)
{
  ::grpc::ClientContext context;

  auto request = MeasureRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto measurement_type_ptr = measurement_type.get_if<MeasurementTypes>();
  const auto measurement_type_raw_ptr = measurement_type.get_if<pb::int32>();
  if (measurement_type_ptr) {
    request.set_measurement_type(*measurement_type_ptr);
  }
  else if (measurement_type_raw_ptr) {
    request.set_measurement_type_raw(*measurement_type_raw_ptr);
  }

  auto response = MeasureResponse{};

  raise_if_error(
      stub->Measure(&context, request, &response),
      context);

  return response;
}

MeasureMultipleResponse
measure_multiple(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = MeasureMultipleRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = MeasureMultipleResponse{};

  raise_if_error(
      stub->MeasureMultiple(&context, request, &response),
      context);

  return response;
}

MeasureMultipleLCRResponse
measure_multiple_lcr(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = MeasureMultipleLCRRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = MeasureMultipleLCRResponse{};

  raise_if_error(
      stub->MeasureMultipleLCR(&context, request, &response),
      context);

  return response;
}

PerformLCRLoadCompensationResponse
perform_lcr_load_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const std::vector<NILCRLoadCompensationSpot>& compensation_spots)
{
  ::grpc::ClientContext context;

  auto request = PerformLCRLoadCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(compensation_spots, request.mutable_compensation_spots());

  auto response = PerformLCRLoadCompensationResponse{};

  raise_if_error(
      stub->PerformLCRLoadCompensation(&context, request, &response),
      context);

  return response;
}

PerformLCROpenCompensationResponse
perform_lcr_open_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const std::vector<double>& additional_frequencies)
{
  ::grpc::ClientContext context;

  auto request = PerformLCROpenCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(additional_frequencies, request.mutable_additional_frequencies());

  auto response = PerformLCROpenCompensationResponse{};

  raise_if_error(
      stub->PerformLCROpenCompensation(&context, request, &response),
      context);

  return response;
}

PerformLCROpenCustomCableCompensationResponse
perform_lcr_open_custom_cable_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = PerformLCROpenCustomCableCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = PerformLCROpenCustomCableCompensationResponse{};

  raise_if_error(
      stub->PerformLCROpenCustomCableCompensation(&context, request, &response),
      context);

  return response;
}

PerformLCRShortCompensationResponse
perform_lcr_short_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const std::vector<double>& additional_frequencies)
{
  ::grpc::ClientContext context;

  auto request = PerformLCRShortCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(additional_frequencies, request.mutable_additional_frequencies());

  auto response = PerformLCRShortCompensationResponse{};

  raise_if_error(
      stub->PerformLCRShortCompensation(&context, request, &response),
      context);

  return response;
}

PerformLCRShortCustomCableCompensationResponse
perform_lcr_short_custom_cable_compensation(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = PerformLCRShortCustomCableCompensationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = PerformLCRShortCustomCableCompensationResponse{};

  raise_if_error(
      stub->PerformLCRShortCustomCableCompensation(&context, request, &response),
      context);

  return response;
}

QueryInComplianceResponse
query_in_compliance(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = QueryInComplianceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = QueryInComplianceResponse{};

  raise_if_error(
      stub->QueryInCompliance(&context, request, &response),
      context);

  return response;
}

QueryMaxCurrentLimitResponse
query_max_current_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& voltage_level)
{
  ::grpc::ClientContext context;

  auto request = QueryMaxCurrentLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_voltage_level(voltage_level);

  auto response = QueryMaxCurrentLimitResponse{};

  raise_if_error(
      stub->QueryMaxCurrentLimit(&context, request, &response),
      context);

  return response;
}

QueryMaxVoltageLevelResponse
query_max_voltage_level(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& current_limit)
{
  ::grpc::ClientContext context;

  auto request = QueryMaxVoltageLevelRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_current_limit(current_limit);

  auto response = QueryMaxVoltageLevelResponse{};

  raise_if_error(
      stub->QueryMaxVoltageLevel(&context, request, &response),
      context);

  return response;
}

QueryMinCurrentLimitResponse
query_min_current_limit(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const double& voltage_level)
{
  ::grpc::ClientContext context;

  auto request = QueryMinCurrentLimitRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_voltage_level(voltage_level);

  auto response = QueryMinCurrentLimitResponse{};

  raise_if_error(
      stub->QueryMinCurrentLimit(&context, request, &response),
      context);

  return response;
}

QueryOutputStateResponse
query_output_state(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<OutputStates, pb::int32>& output_state)
{
  ::grpc::ClientContext context;

  auto request = QueryOutputStateRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto output_state_ptr = output_state.get_if<OutputStates>();
  const auto output_state_raw_ptr = output_state.get_if<pb::int32>();
  if (output_state_ptr) {
    request.set_output_state(*output_state_ptr);
  }
  else if (output_state_raw_ptr) {
    request.set_output_state_raw(*output_state_raw_ptr);
  }

  auto response = QueryOutputStateResponse{};

  raise_if_error(
      stub->QueryOutputState(&context, request, &response),
      context);

  return response;
}

ReadCurrentTemperatureResponse
read_current_temperature(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ReadCurrentTemperatureRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ReadCurrentTemperatureResponse{};

  raise_if_error(
      stub->ReadCurrentTemperature(&context, request, &response),
      context);

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response),
      context);

  return response;
}

ResetDeviceResponse
reset_device(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetDeviceRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetDeviceResponse{};

  raise_if_error(
      stub->ResetDevice(&context, request, &response),
      context);

  return response;
}

ResetInterchangeCheckResponse
reset_interchange_check(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetInterchangeCheckRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetInterchangeCheckResponse{};

  raise_if_error(
      stub->ResetInterchangeCheck(&context, request, &response),
      context);

  return response;
}

ResetWithChannelsResponse
reset_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ResetWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ResetWithChannelsResponse{};

  raise_if_error(
      stub->ResetWithChannels(&context, request, &response),
      context);

  return response;
}

ResetWithDefaultsResponse
reset_with_defaults(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetWithDefaultsRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetWithDefaultsResponse{};

  raise_if_error(
      stub->ResetWithDefaults(&context, request, &response),
      context);

  return response;
}

RevisionQueryResponse
revision_query(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = RevisionQueryRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = RevisionQueryResponse{};

  raise_if_error(
      stub->RevisionQuery(&context, request, &response),
      context);

  return response;
}

SelfTestResponse
self_test(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfTestRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfTestResponse{};

  raise_if_error(
      stub->SelfTest(&context, request, &response),
      context);

  return response;
}

SendSoftwareEdgeTriggerResponse
send_software_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<SendSoftwareEdgeTriggerType, pb::int32>& trigger)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto trigger_ptr = trigger.get_if<SendSoftwareEdgeTriggerType>();
  const auto trigger_raw_ptr = trigger.get_if<pb::int32>();
  if (trigger_ptr) {
    request.set_trigger(*trigger_ptr);
  }
  else if (trigger_raw_ptr) {
    request.set_trigger_raw(*trigger_raw_ptr);
  }

  auto response = SendSoftwareEdgeTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeTrigger(&context, request, &response),
      context);

  return response;
}

SendSoftwareEdgeTriggerWithChannelsResponse
send_software_edge_trigger_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<SendSoftwareEdgeTriggerType, pb::int32>& trigger)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeTriggerWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto trigger_ptr = trigger.get_if<SendSoftwareEdgeTriggerType>();
  const auto trigger_raw_ptr = trigger.get_if<pb::int32>();
  if (trigger_ptr) {
    request.set_trigger(*trigger_ptr);
  }
  else if (trigger_raw_ptr) {
    request.set_trigger_raw(*trigger_raw_ptr);
  }

  auto response = SendSoftwareEdgeTriggerWithChannelsResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeTriggerWithChannels(&context, request, &response),
      context);

  return response;
}

SetAttributeViBooleanResponse
set_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id, const bool& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value(attribute_value);

  auto response = SetAttributeViBooleanResponse{};

  raise_if_error(
      stub->SetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt32Response
set_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id, const simple_variant<NiDCPowerInt32AttributeValues, pb::int32>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiDCPowerInt32AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<pb::int32>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViInt32Response{};

  raise_if_error(
      stub->SetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt64Response
set_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id, const pb::int64& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value_raw(attribute_value);

  auto response = SetAttributeViInt64Response{};

  raise_if_error(
      stub->SetAttributeViInt64(&context, request, &response),
      context);

  return response;
}

SetAttributeViReal64Response
set_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id, const simple_variant<NiDCPowerReal64AttributeValues, double>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiDCPowerReal64AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<double>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViReal64Response{};

  raise_if_error(
      stub->SetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

SetAttributeViSessionResponse
set_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id, const nidevice_grpc::Session& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.mutable_attribute_value()->CopyFrom(attribute_value);

  auto response = SetAttributeViSessionResponse{};

  raise_if_error(
      stub->SetAttributeViSession(&context, request, &response),
      context);

  return response;
}

SetAttributeViStringResponse
set_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDCPowerAttribute& attribute_id, const pb::string& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value_raw(attribute_value);

  auto response = SetAttributeViStringResponse{};

  raise_if_error(
      stub->SetAttributeViString(&context, request, &response),
      context);

  return response;
}

SetSequenceResponse
set_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const std::vector<double>& values, const std::vector<double>& source_delays)
{
  ::grpc::ClientContext context;

  auto request = SetSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(values, request.mutable_values());
  copy_array(source_delays, request.mutable_source_delays());

  auto response = SetSequenceResponse{};

  raise_if_error(
      stub->SetSequence(&context, request, &response),
      context);

  return response;
}

WaitForEventResponse
wait_for_event(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Event, pb::int32>& event_id, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitForEventRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto event_id_ptr = event_id.get_if<Event>();
  const auto event_id_raw_ptr = event_id.get_if<pb::int32>();
  if (event_id_ptr) {
    request.set_event_id(*event_id_ptr);
  }
  else if (event_id_raw_ptr) {
    request.set_event_id_raw(*event_id_raw_ptr);
  }
  request.set_timeout(timeout);

  auto response = WaitForEventResponse{};

  raise_if_error(
      stub->WaitForEvent(&context, request, &response),
      context);

  return response;
}

WaitForEventWithChannelsResponse
wait_for_event_with_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const simple_variant<Event, pb::int32>& event_id, const double& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitForEventWithChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto event_id_ptr = event_id.get_if<Event>();
  const auto event_id_raw_ptr = event_id.get_if<pb::int32>();
  if (event_id_ptr) {
    request.set_event_id(*event_id_ptr);
  }
  else if (event_id_raw_ptr) {
    request.set_event_id_raw(*event_id_raw_ptr);
  }
  request.set_timeout(timeout);

  auto response = WaitForEventWithChannelsResponse{};

  raise_if_error(
      stub->WaitForEventWithChannels(&context, request, &response),
      context);

  return response;
}


} // namespace nidcpower_grpc::experimental::client
