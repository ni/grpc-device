
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-VISA Library.
//---------------------------------------------------------------------
#ifndef NIVISA_GRPC_CLIENT_H
#define NIVISA_GRPC_CLIENT_H

#include <grpcpp/grpcpp.h>

#include <nivisa.grpc.pb.h>
#include <tests/utilities/client_helpers.h>

#include <memory>
#include <vector>

namespace nivisa_grpc::experimental::client {

namespace pb = ::google::protobuf;
using StubPtr = std::unique_ptr<NiVISA::Stub>;
using namespace nidevice_grpc::experimental::client;


AssertIntrSignalResponse assert_intr_signal(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AssertInterruptSignalMode, pb::int32>& mode, const pb::uint32& status_id);
AssertTriggerResponse assert_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<TriggerProtocol, pb::uint32>& protocol);
AssertUtilSignalResponse assert_util_signal(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AssertUtilSignalMode, pb::uint32>& mode);
ClearResponse clear(const StubPtr& stub, const nidevice_grpc::Session& vi);
CloseResponse close(const StubPtr& stub, const SessionOrObjectData& object_handle);
DisableEventResponse disable_event(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<EventType, ViEventType>& event_type, const simple_variant<EventMechanism, pb::uint32>& event_mechanism);
DiscardEventsResponse discard_events(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<EventType, ViEventType>& event_type, const simple_variant<EventMechanism, pb::uint32>& event_mechanism);
EnableEventResponse enable_event(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<EventType, ViEventType>& event_type, const simple_variant<EventMechanism, pb::uint32>& event_mechanism, const ViEventFilter& filter_context);
FindRsrcResponse find_rsrc(const StubPtr& stub, const std::string& expression);
FlushResponse flush(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<BufferMask, pb::uint32>& mask);
GetAttributeResponse get_attribute(const StubPtr& stub, const SessionOrObjectData& object_handle, const NiVISAAttribute& attribute_name);
GpibCommandResponse gpib_command(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::vector<ViByte>& buffer);
GpibControlATNResponse gpib_control_atn(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<GpibControlAtnMode, pb::uint32>& mode);
GpibControlRENResponse gpib_control_ren(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<GpibControlRenMode, pb::uint32>& mode);
GpibPassControlResponse gpib_pass_control(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint32& primary_address, const pb::uint32& secondary_address);
GpibSendIFCResponse gpib_send_ifc(const StubPtr& stub, const nidevice_grpc::Session& vi);
In16ExResponse in16_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset);
In32ExResponse in32_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset);
In64ExResponse in64_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset);
In8ExResponse in8_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset);
LockResponse lock(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<LockState, ViAccessMode>& lock_type, const pb::uint32& timeout, const ViConstKeyId& requested_key);
MapAddressExResponse map_address_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const ViBusSize& map_size, const bool& owner_access, const pb::uint64& suggested_address);
MapTriggerResponse map_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<TriggerLine, pb::int32>& trigger_source, const simple_variant<TriggerLine, pb::int32>& trigger_destination, const pb::uint32& mode);
MemAllocResponse mem_alloc(const StubPtr& stub, const nidevice_grpc::Session& vi, const ViBusSize& size);
MemAllocExResponse mem_alloc_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const ViBusSize& size);
MemFreeExResponse mem_free_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const ViBusAddress64& offset);
MoveIn16ExResponse move_in16_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const ViBusSize& count);
MoveIn32ExResponse move_in32_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const ViBusSize& count);
MoveIn64ExResponse move_in64_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const ViBusSize& count);
MoveIn8ExResponse move_in8_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const ViBusSize& count);
MoveOut16ExResponse move_out16_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const std::vector<pb::uint32>& buffer);
MoveOut32ExResponse move_out32_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const std::vector<pb::uint32>& buffer);
MoveOut64ExResponse move_out64_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const std::vector<pb::uint64>& buffer);
MoveOut8ExResponse move_out8_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const std::string& buffer);
OpenResponse open(const StubPtr& stub, const ViConstRsrc& instrument_descriptor, const simple_variant<LockState, ViAccessMode>& access_mode, const pb::uint32& open_timeout);
Out16ExResponse out16_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const pb::uint32& value);
Out32ExResponse out32_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const pb::uint32& value);
Out64ExResponse out64_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const pb::uint64& value);
Out8ExResponse out8_ex(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<AddressSpace, pb::uint32>& address_space, const ViBusAddress64& offset, const pb::uint32& value);
ParseRsrcExResponse parse_rsrc_ex(const StubPtr& stub, const ViConstRsrc& resource_name);
Peek16Response peek16(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address);
Peek32Response peek32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address);
Peek64Response peek64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address);
Peek8Response peek8(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address);
Poke16Response poke16(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address, const pb::uint32& value);
Poke32Response poke32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address, const pb::uint32& value);
Poke64Response poke64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address, const pb::uint64& value);
Poke8Response poke8(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint64& address, const pb::uint32& value);
PxiReserveTriggersResponse pxi_reserve_triggers(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::vector<pb::int32>& trig_buses, const std::vector<pb::int32>& trig_lines);
ReadResponse read(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint32& count);
ReadAsyncResponse read_async(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint32& count);
ReadSTBResponse read_stb(const StubPtr& stub, const nidevice_grpc::Session& vi);
SetAttributeResponse set_attribute(const StubPtr& stub, const SessionOrObjectData& object_handle, const NiVISAAttribute& attribute_name, const AttributeValueData& attribute_value);
SetBufResponse set_buf(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<BufferMask, pb::uint32>& mask, const pb::uint32& buffer_size);
StatusDescResponse status_desc(const StubPtr& stub, const ViObject& object_handle, const pb::int32& status_value);
TerminateResponse terminate(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::uint32& degree, const ViJobId& job_identifier);
UnlockResponse unlock(const StubPtr& stub, const nidevice_grpc::Session& vi);
UnmapAddressResponse unmap_address(const StubPtr& stub, const nidevice_grpc::Session& vi);
UnmapTriggerResponse unmap_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<TriggerLine, pb::int32>& trigger_source, const simple_variant<TriggerLine, pb::int32>& trigger_destination);
UsbControlInResponse usb_control_in(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& bm_request_type, const pb::int32& b_request, const pb::uint32& w_value, const pb::uint32& w_index, const pb::uint32& w_length);
UsbControlOutResponse usb_control_out(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& bm_request_type, const pb::int32& b_request, const pb::uint32& w_value, const pb::uint32& w_index, const std::vector<ViByte>& buffer);
VxiCommandQueryResponse vxi_command_query(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<VxiCmdType, pb::uint32>& mode, const pb::uint32& command);
WaitOnEventResponse wait_on_event(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<EventType, ViEventType>& in_event_type, const pb::uint32& timeout);
WriteResponse write(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::vector<ViByte>& buffer);
WriteAsyncResponse write_async(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::vector<ViByte>& write_buffer);

} // namespace nivisa_grpc::experimental::client

#endif /* NIVISA_GRPC_CLIENT_H */
