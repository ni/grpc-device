
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-FGEN.
//---------------------------------------------------------------------
#include "nifgen_client.h"

#include <grpcpp/grpcpp.h>

#include <nifgen.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nifgen_grpc::experimental::client {

AbortGenerationResponse
abort_generation(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AbortGenerationRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AbortGenerationResponse{};

  raise_if_error(
      stub->AbortGeneration(&context, request, &response),
      context);

  return response;
}

AdjustSampleClockRelativeDelayResponse
adjust_sample_clock_relative_delay(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& adjustment_time)
{
  ::grpc::ClientContext context;

  auto request = AdjustSampleClockRelativeDelayRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_adjustment_time(adjustment_time);

  auto response = AdjustSampleClockRelativeDelayResponse{};

  raise_if_error(
      stub->AdjustSampleClockRelativeDelay(&context, request, &response),
      context);

  return response;
}

AllocateNamedWaveformResponse
allocate_named_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name, const pb::int32& waveform_size)
{
  ::grpc::ClientContext context;

  auto request = AllocateNamedWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);
  request.set_waveform_size(waveform_size);

  auto response = AllocateNamedWaveformResponse{};

  raise_if_error(
      stub->AllocateNamedWaveform(&context, request, &response),
      context);

  return response;
}

AllocateWaveformResponse
allocate_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& waveform_size)
{
  ::grpc::ClientContext context;

  auto request = AllocateWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_size(waveform_size);

  auto response = AllocateWaveformResponse{};

  raise_if_error(
      stub->AllocateWaveform(&context, request, &response),
      context);

  return response;
}

CheckAttributeViBooleanResponse
check_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const bool& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value(attribute_value);

  auto response = CheckAttributeViBooleanResponse{};

  raise_if_error(
      stub->CheckAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

CheckAttributeViInt32Response
check_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const simple_variant<NiFgenInt32AttributeValues, pb::int32>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiFgenInt32AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<pb::int32>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = CheckAttributeViInt32Response{};

  raise_if_error(
      stub->CheckAttributeViInt32(&context, request, &response),
      context);

  return response;
}

CheckAttributeViInt64Response
check_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const pb::int64& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value_raw(attribute_value);

  auto response = CheckAttributeViInt64Response{};

  raise_if_error(
      stub->CheckAttributeViInt64(&context, request, &response),
      context);

  return response;
}

CheckAttributeViReal64Response
check_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const simple_variant<NiFgenReal64AttributeValues, double>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiFgenReal64AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<double>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = CheckAttributeViReal64Response{};

  raise_if_error(
      stub->CheckAttributeViReal64(&context, request, &response),
      context);

  return response;
}

CheckAttributeViSessionResponse
check_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const nidevice_grpc::Session& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.mutable_attribute_value()->CopyFrom(attribute_value);

  auto response = CheckAttributeViSessionResponse{};

  raise_if_error(
      stub->CheckAttributeViSession(&context, request, &response),
      context);

  return response;
}

CheckAttributeViStringResponse
check_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const simple_variant<NiFgenStringAttributeValuesMapped, std::string>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = CheckAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiFgenStringAttributeValuesMapped>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<std::string>();
  if (attribute_value_ptr) {
    request.set_attribute_value_mapped(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = CheckAttributeViStringResponse{};

  raise_if_error(
      stub->CheckAttributeViString(&context, request, &response),
      context);

  return response;
}

ClearArbMemoryResponse
clear_arb_memory(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ClearArbMemoryRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ClearArbMemoryResponse{};

  raise_if_error(
      stub->ClearArbMemory(&context, request, &response),
      context);

  return response;
}

ClearArbSequenceResponse
clear_arb_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<SequenceHandle, pb::int32>& sequence_handle)
{
  ::grpc::ClientContext context;

  auto request = ClearArbSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto sequence_handle_ptr = sequence_handle.get_if<SequenceHandle>();
  const auto sequence_handle_raw_ptr = sequence_handle.get_if<pb::int32>();
  if (sequence_handle_ptr) {
    request.set_sequence_handle(*sequence_handle_ptr);
  }
  else if (sequence_handle_raw_ptr) {
    request.set_sequence_handle_raw(*sequence_handle_raw_ptr);
  }

  auto response = ClearArbSequenceResponse{};

  raise_if_error(
      stub->ClearArbSequence(&context, request, &response),
      context);

  return response;
}

ClearArbWaveformResponse
clear_arb_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<WaveformHandle, pb::int32>& waveform_handle)
{
  ::grpc::ClientContext context;

  auto request = ClearArbWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto waveform_handle_ptr = waveform_handle.get_if<WaveformHandle>();
  const auto waveform_handle_raw_ptr = waveform_handle.get_if<pb::int32>();
  if (waveform_handle_ptr) {
    request.set_waveform_handle(*waveform_handle_ptr);
  }
  else if (waveform_handle_raw_ptr) {
    request.set_waveform_handle_raw(*waveform_handle_raw_ptr);
  }

  auto response = ClearArbWaveformResponse{};

  raise_if_error(
      stub->ClearArbWaveform(&context, request, &response),
      context);

  return response;
}

ClearErrorResponse
clear_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ClearErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ClearErrorResponse{};

  raise_if_error(
      stub->ClearError(&context, request, &response),
      context);

  return response;
}

ClearFreqListResponse
clear_freq_list(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<FrequencyListOptions, pb::int32>& frequency_list_handle)
{
  ::grpc::ClientContext context;

  auto request = ClearFreqListRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto frequency_list_handle_ptr = frequency_list_handle.get_if<FrequencyListOptions>();
  const auto frequency_list_handle_raw_ptr = frequency_list_handle.get_if<pb::int32>();
  if (frequency_list_handle_ptr) {
    request.set_frequency_list_handle(*frequency_list_handle_ptr);
  }
  else if (frequency_list_handle_raw_ptr) {
    request.set_frequency_list_handle_raw(*frequency_list_handle_raw_ptr);
  }

  auto response = ClearFreqListResponse{};

  raise_if_error(
      stub->ClearFreqList(&context, request, &response),
      context);

  return response;
}

ClearInterchangeWarningsResponse
clear_interchange_warnings(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ClearInterchangeWarningsRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ClearInterchangeWarningsResponse{};

  raise_if_error(
      stub->ClearInterchangeWarnings(&context, request, &response),
      context);

  return response;
}

ClearUserStandardWaveformResponse
clear_user_standard_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = ClearUserStandardWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = ClearUserStandardWaveformResponse{};

  raise_if_error(
      stub->ClearUserStandardWaveform(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

CommitResponse
commit(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CommitRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CommitResponse{};

  raise_if_error(
      stub->Commit(&context, request, &response),
      context);

  return response;
}

ConfigureAmplitudeResponse
configure_amplitude(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const double& amplitude)
{
  ::grpc::ClientContext context;

  auto request = ConfigureAmplitudeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_amplitude(amplitude);

  auto response = ConfigureAmplitudeResponse{};

  raise_if_error(
      stub->ConfigureAmplitude(&context, request, &response),
      context);

  return response;
}

ConfigureArbSequenceResponse
configure_arb_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& sequence_handle, const double& gain, const double& offset)
{
  ::grpc::ClientContext context;

  auto request = ConfigureArbSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_sequence_handle(sequence_handle);
  request.set_gain(gain);
  request.set_offset(offset);

  auto response = ConfigureArbSequenceResponse{};

  raise_if_error(
      stub->ConfigureArbSequence(&context, request, &response),
      context);

  return response;
}

ConfigureArbWaveformResponse
configure_arb_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& waveform_handle, const double& gain, const double& offset)
{
  ::grpc::ClientContext context;

  auto request = ConfigureArbWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_handle(waveform_handle);
  request.set_gain(gain);
  request.set_offset(offset);

  auto response = ConfigureArbWaveformResponse{};

  raise_if_error(
      stub->ConfigureArbWaveform(&context, request, &response),
      context);

  return response;
}

ConfigureChannelsResponse
configure_channels(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channels)
{
  ::grpc::ClientContext context;

  auto request = ConfigureChannelsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channels(channels);

  auto response = ConfigureChannelsResponse{};

  raise_if_error(
      stub->ConfigureChannels(&context, request, &response),
      context);

  return response;
}

ConfigureClockModeResponse
configure_clock_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<ClockMode, pb::int32>& clock_mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureClockModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto clock_mode_ptr = clock_mode.get_if<ClockMode>();
  const auto clock_mode_raw_ptr = clock_mode.get_if<pb::int32>();
  if (clock_mode_ptr) {
    request.set_clock_mode(*clock_mode_ptr);
  }
  else if (clock_mode_raw_ptr) {
    request.set_clock_mode_raw(*clock_mode_raw_ptr);
  }

  auto response = ConfigureClockModeResponse{};

  raise_if_error(
      stub->ConfigureClockMode(&context, request, &response),
      context);

  return response;
}

ConfigureCustomFIRFilterCoefficientsResponse
configure_custom_fir_filter_coefficients(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::vector<double>& coefficients_array)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCustomFIRFilterCoefficientsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(coefficients_array, request.mutable_coefficients_array());

  auto response = ConfigureCustomFIRFilterCoefficientsResponse{};

  raise_if_error(
      stub->ConfigureCustomFIRFilterCoefficients(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeScriptTriggerResponse
configure_digital_edge_script_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& trigger_id, const std::string& source, const pb::int32& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeScriptTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_id(trigger_id);
  request.set_source(source);
  request.set_edge(edge);

  auto response = ConfigureDigitalEdgeScriptTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeScriptTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalEdgeStartTriggerResponse
configure_digital_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& source, const pb::int32& edge)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalEdgeStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_source(source);
  request.set_edge(edge);

  auto response = ConfigureDigitalEdgeStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalEdgeStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureDigitalLevelScriptTriggerResponse
configure_digital_level_script_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& trigger_id, const std::string& source, const simple_variant<TriggerWhen, pb::int32>& trigger_when)
{
  ::grpc::ClientContext context;

  auto request = ConfigureDigitalLevelScriptTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_id(trigger_id);
  request.set_source(source);
  const auto trigger_when_ptr = trigger_when.get_if<TriggerWhen>();
  const auto trigger_when_raw_ptr = trigger_when.get_if<pb::int32>();
  if (trigger_when_ptr) {
    request.set_trigger_when(*trigger_when_ptr);
  }
  else if (trigger_when_raw_ptr) {
    request.set_trigger_when_raw(*trigger_when_raw_ptr);
  }

  auto response = ConfigureDigitalLevelScriptTriggerResponse{};

  raise_if_error(
      stub->ConfigureDigitalLevelScriptTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureFreqListResponse
configure_freq_list(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& frequency_list_handle, const double& amplitude, const double& dc_offset, const double& start_phase)
{
  ::grpc::ClientContext context;

  auto request = ConfigureFreqListRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_frequency_list_handle(frequency_list_handle);
  request.set_amplitude(amplitude);
  request.set_dc_offset(dc_offset);
  request.set_start_phase(start_phase);

  auto response = ConfigureFreqListResponse{};

  raise_if_error(
      stub->ConfigureFreqList(&context, request, &response),
      context);

  return response;
}

ConfigureFrequencyResponse
configure_frequency(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const double& frequency)
{
  ::grpc::ClientContext context;

  auto request = ConfigureFrequencyRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_frequency(frequency);

  auto response = ConfigureFrequencyResponse{};

  raise_if_error(
      stub->ConfigureFrequency(&context, request, &response),
      context);

  return response;
}

ConfigureOperationModeResponse
configure_operation_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& operation_mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOperationModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_operation_mode(operation_mode);

  auto response = ConfigureOperationModeResponse{};

  raise_if_error(
      stub->ConfigureOperationMode(&context, request, &response),
      context);

  return response;
}

ConfigureOutputEnabledResponse
configure_output_enabled(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const bool& enabled)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputEnabledRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_enabled(enabled);

  auto response = ConfigureOutputEnabledResponse{};

  raise_if_error(
      stub->ConfigureOutputEnabled(&context, request, &response),
      context);

  return response;
}

ConfigureOutputImpedanceResponse
configure_output_impedance(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const double& impedance)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputImpedanceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_impedance(impedance);

  auto response = ConfigureOutputImpedanceResponse{};

  raise_if_error(
      stub->ConfigureOutputImpedance(&context, request, &response),
      context);

  return response;
}

ConfigureOutputModeResponse
configure_output_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<OutputMode, pb::int32>& output_mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureOutputModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto output_mode_ptr = output_mode.get_if<OutputMode>();
  const auto output_mode_raw_ptr = output_mode.get_if<pb::int32>();
  if (output_mode_ptr) {
    request.set_output_mode(*output_mode_ptr);
  }
  else if (output_mode_raw_ptr) {
    request.set_output_mode_raw(*output_mode_raw_ptr);
  }

  auto response = ConfigureOutputModeResponse{};

  raise_if_error(
      stub->ConfigureOutputMode(&context, request, &response),
      context);

  return response;
}

ConfigureP2PEndpointFullnessStartTriggerResponse
configure_p2p_endpoint_fullness_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& p2p_endpoint_fullness_level)
{
  ::grpc::ClientContext context;

  auto request = ConfigureP2PEndpointFullnessStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_p2p_endpoint_fullness_level(p2p_endpoint_fullness_level);

  auto response = ConfigureP2PEndpointFullnessStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureP2PEndpointFullnessStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureReferenceClockResponse
configure_reference_clock(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& reference_clock_source, const double& reference_clock_frequency)
{
  ::grpc::ClientContext context;

  auto request = ConfigureReferenceClockRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_reference_clock_source(reference_clock_source);
  request.set_reference_clock_frequency(reference_clock_frequency);

  auto response = ConfigureReferenceClockResponse{};

  raise_if_error(
      stub->ConfigureReferenceClock(&context, request, &response),
      context);

  return response;
}

ConfigureSampleClockSourceResponse
configure_sample_clock_source(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& sample_clock_source)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSampleClockSourceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_sample_clock_source(sample_clock_source);

  auto response = ConfigureSampleClockSourceResponse{};

  raise_if_error(
      stub->ConfigureSampleClockSource(&context, request, &response),
      context);

  return response;
}

ConfigureSampleRateResponse
configure_sample_rate(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& sample_rate)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSampleRateRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_sample_rate(sample_rate);

  auto response = ConfigureSampleRateResponse{};

  raise_if_error(
      stub->ConfigureSampleRate(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeScriptTriggerResponse
configure_software_edge_script_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& trigger_id)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeScriptTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_id(trigger_id);

  auto response = ConfigureSoftwareEdgeScriptTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeScriptTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureSoftwareEdgeStartTriggerResponse
configure_software_edge_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSoftwareEdgeStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ConfigureSoftwareEdgeStartTriggerResponse{};

  raise_if_error(
      stub->ConfigureSoftwareEdgeStartTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureStandardWaveformResponse
configure_standard_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const simple_variant<Waveform, pb::int32>& waveform, const double& amplitude, const double& dc_offset, const double& frequency, const double& start_phase)
{
  ::grpc::ClientContext context;

  auto request = ConfigureStandardWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto waveform_ptr = waveform.get_if<Waveform>();
  const auto waveform_raw_ptr = waveform.get_if<pb::int32>();
  if (waveform_ptr) {
    request.set_waveform(*waveform_ptr);
  }
  else if (waveform_raw_ptr) {
    request.set_waveform_raw(*waveform_raw_ptr);
  }
  request.set_amplitude(amplitude);
  request.set_dc_offset(dc_offset);
  request.set_frequency(frequency);
  request.set_start_phase(start_phase);

  auto response = ConfigureStandardWaveformResponse{};

  raise_if_error(
      stub->ConfigureStandardWaveform(&context, request, &response),
      context);

  return response;
}

ConfigureSynchronizationResponse
configure_synchronization(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& synchronization_source)
{
  ::grpc::ClientContext context;

  auto request = ConfigureSynchronizationRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_synchronization_source(synchronization_source);

  auto response = ConfigureSynchronizationResponse{};

  raise_if_error(
      stub->ConfigureSynchronization(&context, request, &response),
      context);

  return response;
}

ConfigureTriggerModeResponse
configure_trigger_mode(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const simple_variant<TriggerMode, pb::int32>& trigger_mode)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerModeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto trigger_mode_ptr = trigger_mode.get_if<TriggerMode>();
  const auto trigger_mode_raw_ptr = trigger_mode.get_if<pb::int32>();
  if (trigger_mode_ptr) {
    request.set_trigger_mode(*trigger_mode_ptr);
  }
  else if (trigger_mode_raw_ptr) {
    request.set_trigger_mode_raw(*trigger_mode_raw_ptr);
  }

  auto response = ConfigureTriggerModeResponse{};

  raise_if_error(
      stub->ConfigureTriggerMode(&context, request, &response),
      context);

  return response;
}

CreateAdvancedArbSequenceResponse
create_advanced_arb_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::vector<pb::int32>& waveform_handles_array, const std::vector<pb::int32>& loop_counts_array, const std::vector<pb::int32>& sample_counts_array, const std::vector<pb::int32>& marker_location_array)
{
  ::grpc::ClientContext context;

  auto request = CreateAdvancedArbSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  copy_array(waveform_handles_array, request.mutable_waveform_handles_array());
  copy_array(loop_counts_array, request.mutable_loop_counts_array());
  copy_array(sample_counts_array, request.mutable_sample_counts_array());
  copy_array(marker_location_array, request.mutable_marker_location_array());

  auto response = CreateAdvancedArbSequenceResponse{};

  raise_if_error(
      stub->CreateAdvancedArbSequence(&context, request, &response),
      context);

  return response;
}

CreateArbSequenceResponse
create_arb_sequence(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::vector<pb::int32>& waveform_handles_array, const std::vector<pb::int32>& loop_counts_array)
{
  ::grpc::ClientContext context;

  auto request = CreateArbSequenceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  copy_array(waveform_handles_array, request.mutable_waveform_handles_array());
  copy_array(loop_counts_array, request.mutable_loop_counts_array());

  auto response = CreateArbSequenceResponse{};

  raise_if_error(
      stub->CreateArbSequence(&context, request, &response),
      context);

  return response;
}

CreateFreqListResponse
create_freq_list(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Waveform, pb::int32>& waveform, const std::vector<double>& frequency_array, const std::vector<double>& duration_array)
{
  ::grpc::ClientContext context;

  auto request = CreateFreqListRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto waveform_ptr = waveform.get_if<Waveform>();
  const auto waveform_raw_ptr = waveform.get_if<pb::int32>();
  if (waveform_ptr) {
    request.set_waveform(*waveform_ptr);
  }
  else if (waveform_raw_ptr) {
    request.set_waveform_raw(*waveform_raw_ptr);
  }
  copy_array(frequency_array, request.mutable_frequency_array());
  copy_array(duration_array, request.mutable_duration_array());

  auto response = CreateFreqListResponse{};

  raise_if_error(
      stub->CreateFreqList(&context, request, &response),
      context);

  return response;
}

CreateWaveformComplexF64Response
create_waveform_complex_f64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::vector<nidevice_grpc::NIComplexNumber>& waveform_data_array)
{
  ::grpc::ClientContext context;

  auto request = CreateWaveformComplexF64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(waveform_data_array, request.mutable_waveform_data_array());

  auto response = CreateWaveformComplexF64Response{};

  raise_if_error(
      stub->CreateWaveformComplexF64(&context, request, &response),
      context);

  return response;
}

CreateWaveformF64Response
create_waveform_f64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::vector<double>& waveform_data_array)
{
  ::grpc::ClientContext context;

  auto request = CreateWaveformF64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(waveform_data_array, request.mutable_waveform_data_array());

  auto response = CreateWaveformF64Response{};

  raise_if_error(
      stub->CreateWaveformF64(&context, request, &response),
      context);

  return response;
}

CreateWaveformFromFileF64Response
create_waveform_from_file_f64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& file_name, const simple_variant<ByteOrder, pb::int32>& byte_order)
{
  ::grpc::ClientContext context;

  auto request = CreateWaveformFromFileF64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_file_name(file_name);
  const auto byte_order_ptr = byte_order.get_if<ByteOrder>();
  const auto byte_order_raw_ptr = byte_order.get_if<pb::int32>();
  if (byte_order_ptr) {
    request.set_byte_order(*byte_order_ptr);
  }
  else if (byte_order_raw_ptr) {
    request.set_byte_order_raw(*byte_order_raw_ptr);
  }

  auto response = CreateWaveformFromFileF64Response{};

  raise_if_error(
      stub->CreateWaveformFromFileF64(&context, request, &response),
      context);

  return response;
}

CreateWaveformFromFileHWSResponse
create_waveform_from_file_hws(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& file_name, const bool& use_rate_from_waveform, const bool& use_gain_and_offset_from_waveform)
{
  ::grpc::ClientContext context;

  auto request = CreateWaveformFromFileHWSRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_file_name(file_name);
  request.set_use_rate_from_waveform(use_rate_from_waveform);
  request.set_use_gain_and_offset_from_waveform(use_gain_and_offset_from_waveform);

  auto response = CreateWaveformFromFileHWSResponse{};

  raise_if_error(
      stub->CreateWaveformFromFileHWS(&context, request, &response),
      context);

  return response;
}

CreateWaveformFromFileI16Response
create_waveform_from_file_i16(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& file_name, const simple_variant<ByteOrder, pb::int32>& byte_order)
{
  ::grpc::ClientContext context;

  auto request = CreateWaveformFromFileI16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_file_name(file_name);
  const auto byte_order_ptr = byte_order.get_if<ByteOrder>();
  const auto byte_order_raw_ptr = byte_order.get_if<pb::int32>();
  if (byte_order_ptr) {
    request.set_byte_order(*byte_order_ptr);
  }
  else if (byte_order_raw_ptr) {
    request.set_byte_order_raw(*byte_order_raw_ptr);
  }

  auto response = CreateWaveformFromFileI16Response{};

  raise_if_error(
      stub->CreateWaveformFromFileI16(&context, request, &response),
      context);

  return response;
}

CreateWaveformI16Response
create_waveform_i16(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::vector<pb::int32>& waveform_data_array)
{
  ::grpc::ClientContext context;

  auto request = CreateWaveformI16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(waveform_data_array, request.mutable_waveform_data_array());

  auto response = CreateWaveformI16Response{};

  raise_if_error(
      stub->CreateWaveformI16(&context, request, &response),
      context);

  return response;
}

DefineUserStandardWaveformResponse
define_user_standard_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::vector<double>& waveform_data_array)
{
  ::grpc::ClientContext context;

  auto request = DefineUserStandardWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(waveform_data_array, request.mutable_waveform_data_array());

  auto response = DefineUserStandardWaveformResponse{};

  raise_if_error(
      stub->DefineUserStandardWaveform(&context, request, &response),
      context);

  return response;
}

DeleteNamedWaveformResponse
delete_named_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name)
{
  ::grpc::ClientContext context;

  auto request = DeleteNamedWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);

  auto response = DeleteNamedWaveformResponse{};

  raise_if_error(
      stub->DeleteNamedWaveform(&context, request, &response),
      context);

  return response;
}

DeleteScriptResponse
delete_script(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& script_name)
{
  ::grpc::ClientContext context;

  auto request = DeleteScriptRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_script_name(script_name);

  auto response = DeleteScriptResponse{};

  raise_if_error(
      stub->DeleteScript(&context, request, &response),
      context);

  return response;
}

DisableResponse
disable(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableResponse{};

  raise_if_error(
      stub->Disable(&context, request, &response),
      context);

  return response;
}

DisableAnalogFilterResponse
disable_analog_filter(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableAnalogFilterRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableAnalogFilterResponse{};

  raise_if_error(
      stub->DisableAnalogFilter(&context, request, &response),
      context);

  return response;
}

DisableDigitalFilterResponse
disable_digital_filter(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableDigitalFilterRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableDigitalFilterResponse{};

  raise_if_error(
      stub->DisableDigitalFilter(&context, request, &response),
      context);

  return response;
}

DisableDigitalPatterningResponse
disable_digital_patterning(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = DisableDigitalPatterningRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = DisableDigitalPatterningResponse{};

  raise_if_error(
      stub->DisableDigitalPatterning(&context, request, &response),
      context);

  return response;
}

DisableScriptTriggerResponse
disable_script_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& trigger_id)
{
  ::grpc::ClientContext context;

  auto request = DisableScriptTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_id(trigger_id);

  auto response = DisableScriptTriggerResponse{};

  raise_if_error(
      stub->DisableScriptTrigger(&context, request, &response),
      context);

  return response;
}

DisableStartTriggerResponse
disable_start_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableStartTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableStartTriggerResponse{};

  raise_if_error(
      stub->DisableStartTrigger(&context, request, &response),
      context);

  return response;
}

EnableAnalogFilterResponse
enable_analog_filter(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const double& filter_correction_frequency)
{
  ::grpc::ClientContext context;

  auto request = EnableAnalogFilterRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_filter_correction_frequency(filter_correction_frequency);

  auto response = EnableAnalogFilterResponse{};

  raise_if_error(
      stub->EnableAnalogFilter(&context, request, &response),
      context);

  return response;
}

EnableDigitalFilterResponse
enable_digital_filter(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = EnableDigitalFilterRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = EnableDigitalFilterResponse{};

  raise_if_error(
      stub->EnableDigitalFilter(&context, request, &response),
      context);

  return response;
}

EnableDigitalPatterningResponse
enable_digital_patterning(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = EnableDigitalPatterningRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = EnableDigitalPatterningResponse{};

  raise_if_error(
      stub->EnableDigitalPatterning(&context, request, &response),
      context);

  return response;
}

ErrorHandlerResponse
error_handler(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = ErrorHandlerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);

  auto response = ErrorHandlerResponse{};

  raise_if_error(
      stub->ErrorHandler(&context, request, &response),
      context);

  return response;
}

ErrorMessageResponse
error_message(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = ErrorMessageRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);

  auto response = ErrorMessageResponse{};

  raise_if_error(
      stub->ErrorMessage(&context, request, &response),
      context);

  return response;
}

ErrorQueryResponse
error_query(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ErrorQueryRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ErrorQueryResponse{};

  raise_if_error(
      stub->ErrorQuery(&context, request, &response),
      context);

  return response;
}

ExportAttributeConfigurationBufferResponse
export_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ExportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationBuffer(&context, request, &response),
      context);

  return response;
}

ExportAttributeConfigurationFileResponse
export_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ExportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationFile(&context, request, &response),
      context);

  return response;
}

ExportSignalResponse
export_signal(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Signal, pb::int32>& signal, const std::string& signal_identifier, const std::string& output_terminal)
{
  ::grpc::ClientContext context;

  auto request = ExportSignalRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto signal_ptr = signal.get_if<Signal>();
  const auto signal_raw_ptr = signal.get_if<pb::int32>();
  if (signal_ptr) {
    request.set_signal(*signal_ptr);
  }
  else if (signal_raw_ptr) {
    request.set_signal_raw(*signal_raw_ptr);
  }
  request.set_signal_identifier(signal_identifier);
  request.set_output_terminal(output_terminal);

  auto response = ExportSignalResponse{};

  raise_if_error(
      stub->ExportSignal(&context, request, &response),
      context);

  return response;
}

GetAttributeViBooleanResponse
get_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViBooleanResponse{};

  raise_if_error(
      stub->GetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt32Response
get_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt32Response{};

  raise_if_error(
      stub->GetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt64Response
get_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt64Response{};

  raise_if_error(
      stub->GetAttributeViInt64(&context, request, &response),
      context);

  return response;
}

GetAttributeViReal64Response
get_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViReal64Response{};

  raise_if_error(
      stub->GetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

GetAttributeViSessionResponse
get_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViSessionResponse{};

  raise_if_error(
      stub->GetAttributeViSession(&context, request, &response),
      context);

  return response;
}

GetAttributeViStringResponse
get_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViStringResponse{};

  raise_if_error(
      stub->GetAttributeViString(&context, request, &response),
      context);

  return response;
}

GetChannelNameResponse
get_channel_name(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& index)
{
  ::grpc::ClientContext context;

  auto request = GetChannelNameRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_index(index);

  auto response = GetChannelNameResponse{};

  raise_if_error(
      stub->GetChannelName(&context, request, &response),
      context);

  return response;
}

GetErrorResponse
get_error(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetErrorRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetErrorResponse{};

  raise_if_error(
      stub->GetError(&context, request, &response),
      context);

  return response;
}

GetExtCalLastDateAndTimeResponse
get_ext_cal_last_date_and_time(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalLastDateAndTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalLastDateAndTimeResponse{};

  raise_if_error(
      stub->GetExtCalLastDateAndTime(&context, request, &response),
      context);

  return response;
}

GetExtCalLastTempResponse
get_ext_cal_last_temp(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalLastTempRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalLastTempResponse{};

  raise_if_error(
      stub->GetExtCalLastTemp(&context, request, &response),
      context);

  return response;
}

GetExtCalRecommendedIntervalResponse
get_ext_cal_recommended_interval(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalRecommendedIntervalRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalRecommendedIntervalResponse{};

  raise_if_error(
      stub->GetExtCalRecommendedInterval(&context, request, &response),
      context);

  return response;
}

GetFIRFilterCoefficientsResponse
get_fir_filter_coefficients(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name)
{
  ::grpc::ClientContext context;

  auto request = GetFIRFilterCoefficientsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);

  auto response = GetFIRFilterCoefficientsResponse{};

  raise_if_error(
      stub->GetFIRFilterCoefficients(&context, request, &response),
      context);

  return response;
}

GetHardwareStateResponse
get_hardware_state(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetHardwareStateRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetHardwareStateResponse{};

  raise_if_error(
      stub->GetHardwareState(&context, request, &response),
      context);

  return response;
}

GetNextCoercionRecordResponse
get_next_coercion_record(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetNextCoercionRecordRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetNextCoercionRecordResponse{};

  raise_if_error(
      stub->GetNextCoercionRecord(&context, request, &response),
      context);

  return response;
}

GetNextInterchangeWarningResponse
get_next_interchange_warning(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetNextInterchangeWarningRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetNextInterchangeWarningResponse{};

  raise_if_error(
      stub->GetNextInterchangeWarning(&context, request, &response),
      context);

  return response;
}

GetSelfCalLastDateAndTimeResponse
get_self_cal_last_date_and_time(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalLastDateAndTimeRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetSelfCalLastDateAndTimeResponse{};

  raise_if_error(
      stub->GetSelfCalLastDateAndTime(&context, request, &response),
      context);

  return response;
}

GetSelfCalLastTempResponse
get_self_cal_last_temp(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalLastTempRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetSelfCalLastTempResponse{};

  raise_if_error(
      stub->GetSelfCalLastTemp(&context, request, &response),
      context);

  return response;
}

GetSelfCalSupportedResponse
get_self_cal_supported(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalSupportedRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetSelfCalSupportedResponse{};

  raise_if_error(
      stub->GetSelfCalSupported(&context, request, &response),
      context);

  return response;
}

GetStreamEndpointHandleResponse
get_stream_endpoint_handle(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& stream_endpoint)
{
  ::grpc::ClientContext context;

  auto request = GetStreamEndpointHandleRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_stream_endpoint(stream_endpoint);

  auto response = GetStreamEndpointHandleResponse{};

  raise_if_error(
      stub->GetStreamEndpointHandle(&context, request, &response),
      context);

  return response;
}

ImportAttributeConfigurationBufferResponse
import_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& configuration)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_configuration(configuration);

  auto response = ImportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationBuffer(&context, request, &response),
      context);

  return response;
}

ImportAttributeConfigurationFileResponse
import_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ImportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationFile(&context, request, &response),
      context);

  return response;
}

InitResponse
init(const StubPtr& stub, const std::string& resource_name, const bool& id_query, const bool& reset_device, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitResponse{};

  raise_if_error(
      stub->Init(&context, request, &response),
      context);

  return response;
}

InitWithOptionsResponse
init_with_options(const StubPtr& stub, const std::string& resource_name, const bool& id_query, const bool& reset_device, const std::string& option_string, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitWithOptionsRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);
  request.set_option_string(option_string);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitWithOptionsResponse{};

  raise_if_error(
      stub->InitWithOptions(&context, request, &response),
      context);

  return response;
}

InitializeWithChannelsResponse
initialize_with_channels(const StubPtr& stub, const std::string& resource_name, const std::string& channel_name, const bool& reset_device, const std::string& option_string, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = InitializeWithChannelsRequest{};
  request.set_resource_name(resource_name);
  request.set_channel_name(channel_name);
  request.set_reset_device(reset_device);
  request.set_option_string(option_string);
  request.set_initialization_behavior(initialization_behavior);

  auto response = InitializeWithChannelsResponse{};

  raise_if_error(
      stub->InitializeWithChannels(&context, request, &response),
      context);

  return response;
}

InitiateGenerationResponse
initiate_generation(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = InitiateGenerationRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = InitiateGenerationResponse{};

  raise_if_error(
      stub->InitiateGeneration(&context, request, &response),
      context);

  return response;
}

InvalidateAllAttributesResponse
invalidate_all_attributes(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = InvalidateAllAttributesRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = InvalidateAllAttributesResponse{};

  raise_if_error(
      stub->InvalidateAllAttributes(&context, request, &response),
      context);

  return response;
}

IsDoneResponse
is_done(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = IsDoneRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = IsDoneResponse{};

  raise_if_error(
      stub->IsDone(&context, request, &response),
      context);

  return response;
}

ManualEnableP2PStreamResponse
manual_enable_p2p_stream(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& endpoint_name)
{
  ::grpc::ClientContext context;

  auto request = ManualEnableP2PStreamRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_endpoint_name(endpoint_name);

  auto response = ManualEnableP2PStreamResponse{};

  raise_if_error(
      stub->ManualEnableP2PStream(&context, request, &response),
      context);

  return response;
}

QueryArbSeqCapabilitiesResponse
query_arb_seq_capabilities(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = QueryArbSeqCapabilitiesRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = QueryArbSeqCapabilitiesResponse{};

  raise_if_error(
      stub->QueryArbSeqCapabilities(&context, request, &response),
      context);

  return response;
}

QueryArbWfmCapabilitiesResponse
query_arb_wfm_capabilities(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = QueryArbWfmCapabilitiesRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = QueryArbWfmCapabilitiesResponse{};

  raise_if_error(
      stub->QueryArbWfmCapabilities(&context, request, &response),
      context);

  return response;
}

QueryFreqListCapabilitiesResponse
query_freq_list_capabilities(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = QueryFreqListCapabilitiesRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = QueryFreqListCapabilitiesResponse{};

  raise_if_error(
      stub->QueryFreqListCapabilities(&context, request, &response),
      context);

  return response;
}

ReadCurrentTemperatureResponse
read_current_temperature(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ReadCurrentTemperatureRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ReadCurrentTemperatureResponse{};

  raise_if_error(
      stub->ReadCurrentTemperature(&context, request, &response),
      context);

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response),
      context);

  return response;
}

ResetAttributeResponse
reset_attribute(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = ResetAttributeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = ResetAttributeResponse{};

  raise_if_error(
      stub->ResetAttribute(&context, request, &response),
      context);

  return response;
}

ResetDeviceResponse
reset_device(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetDeviceRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetDeviceResponse{};

  raise_if_error(
      stub->ResetDevice(&context, request, &response),
      context);

  return response;
}

ResetInterchangeCheckResponse
reset_interchange_check(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetInterchangeCheckRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetInterchangeCheckResponse{};

  raise_if_error(
      stub->ResetInterchangeCheck(&context, request, &response),
      context);

  return response;
}

ResetWithDefaultsResponse
reset_with_defaults(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetWithDefaultsRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetWithDefaultsResponse{};

  raise_if_error(
      stub->ResetWithDefaults(&context, request, &response),
      context);

  return response;
}

RevisionQueryResponse
revision_query(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = RevisionQueryRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = RevisionQueryResponse{};

  raise_if_error(
      stub->RevisionQuery(&context, request, &response),
      context);

  return response;
}

RouteSignalOutResponse
route_signal_out(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const simple_variant<RouteSignalFrom, pb::int32>& route_signal_from, const simple_variant<RouteSignalTo, pb::int32>& route_signal_to)
{
  ::grpc::ClientContext context;

  auto request = RouteSignalOutRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  const auto route_signal_from_ptr = route_signal_from.get_if<RouteSignalFrom>();
  const auto route_signal_from_raw_ptr = route_signal_from.get_if<pb::int32>();
  if (route_signal_from_ptr) {
    request.set_route_signal_from(*route_signal_from_ptr);
  }
  else if (route_signal_from_raw_ptr) {
    request.set_route_signal_from_raw(*route_signal_from_raw_ptr);
  }
  const auto route_signal_to_ptr = route_signal_to.get_if<RouteSignalTo>();
  const auto route_signal_to_raw_ptr = route_signal_to.get_if<pb::int32>();
  if (route_signal_to_ptr) {
    request.set_route_signal_to(*route_signal_to_ptr);
  }
  else if (route_signal_to_raw_ptr) {
    request.set_route_signal_to_raw(*route_signal_to_raw_ptr);
  }

  auto response = RouteSignalOutResponse{};

  raise_if_error(
      stub->RouteSignalOut(&context, request, &response),
      context);

  return response;
}

SelfCalResponse
self_cal(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfCalRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfCalResponse{};

  raise_if_error(
      stub->SelfCal(&context, request, &response),
      context);

  return response;
}

SelfTestResponse
self_test(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfTestRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfTestResponse{};

  raise_if_error(
      stub->SelfTest(&context, request, &response),
      context);

  return response;
}

SendSoftwareEdgeTriggerResponse
send_software_edge_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Trigger, pb::int32>& trigger, const std::string& trigger_id)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareEdgeTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto trigger_ptr = trigger.get_if<Trigger>();
  const auto trigger_raw_ptr = trigger.get_if<pb::int32>();
  if (trigger_ptr) {
    request.set_trigger(*trigger_ptr);
  }
  else if (trigger_raw_ptr) {
    request.set_trigger_raw(*trigger_raw_ptr);
  }
  request.set_trigger_id(trigger_id);

  auto response = SendSoftwareEdgeTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareEdgeTrigger(&context, request, &response),
      context);

  return response;
}

SetAttributeViBooleanResponse
set_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const bool& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value(attribute_value);

  auto response = SetAttributeViBooleanResponse{};

  raise_if_error(
      stub->SetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt32Response
set_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const simple_variant<NiFgenInt32AttributeValues, pb::int32>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiFgenInt32AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<pb::int32>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViInt32Response{};

  raise_if_error(
      stub->SetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt64Response
set_attribute_vi_int64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const pb::int64& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value_raw(attribute_value);

  auto response = SetAttributeViInt64Response{};

  raise_if_error(
      stub->SetAttributeViInt64(&context, request, &response),
      context);

  return response;
}

SetAttributeViReal64Response
set_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const simple_variant<NiFgenReal64AttributeValues, double>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiFgenReal64AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<double>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViReal64Response{};

  raise_if_error(
      stub->SetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

SetAttributeViSessionResponse
set_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const nidevice_grpc::Session& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.mutable_attribute_value()->CopyFrom(attribute_value);

  auto response = SetAttributeViSessionResponse{};

  raise_if_error(
      stub->SetAttributeViSession(&context, request, &response),
      context);

  return response;
}

SetAttributeViStringResponse
set_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const NiFgenAttribute& attribute_id, const simple_variant<NiFgenStringAttributeValuesMapped, std::string>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiFgenStringAttributeValuesMapped>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<std::string>();
  if (attribute_value_ptr) {
    request.set_attribute_value_mapped(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViStringResponse{};

  raise_if_error(
      stub->SetAttributeViString(&context, request, &response),
      context);

  return response;
}

SetNamedWaveformNextWritePositionResponse
set_named_waveform_next_write_position(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name, const simple_variant<RelativeTo, pb::int32>& relative_to, const pb::int32& offset)
{
  ::grpc::ClientContext context;

  auto request = SetNamedWaveformNextWritePositionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);
  const auto relative_to_ptr = relative_to.get_if<RelativeTo>();
  const auto relative_to_raw_ptr = relative_to.get_if<pb::int32>();
  if (relative_to_ptr) {
    request.set_relative_to(*relative_to_ptr);
  }
  else if (relative_to_raw_ptr) {
    request.set_relative_to_raw(*relative_to_raw_ptr);
  }
  request.set_offset(offset);

  auto response = SetNamedWaveformNextWritePositionResponse{};

  raise_if_error(
      stub->SetNamedWaveformNextWritePosition(&context, request, &response),
      context);

  return response;
}

SetWaveformNextWritePositionResponse
set_waveform_next_write_position(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& waveform_handle, const simple_variant<RelativeTo, pb::int32>& relative_to, const pb::int32& offset)
{
  ::grpc::ClientContext context;

  auto request = SetWaveformNextWritePositionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_handle(waveform_handle);
  const auto relative_to_ptr = relative_to.get_if<RelativeTo>();
  const auto relative_to_raw_ptr = relative_to.get_if<pb::int32>();
  if (relative_to_ptr) {
    request.set_relative_to(*relative_to_ptr);
  }
  else if (relative_to_raw_ptr) {
    request.set_relative_to_raw(*relative_to_raw_ptr);
  }
  request.set_offset(offset);

  auto response = SetWaveformNextWritePositionResponse{};

  raise_if_error(
      stub->SetWaveformNextWritePosition(&context, request, &response),
      context);

  return response;
}

WaitUntilDoneResponse
wait_until_done(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& max_time)
{
  ::grpc::ClientContext context;

  auto request = WaitUntilDoneRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_max_time(max_time);

  auto response = WaitUntilDoneResponse{};

  raise_if_error(
      stub->WaitUntilDone(&context, request, &response),
      context);

  return response;
}

WriteBinary16WaveformResponse
write_binary16_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& waveform_handle, const std::vector<pb::int32>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteBinary16WaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_handle(waveform_handle);
  copy_array(data, request.mutable_data());

  auto response = WriteBinary16WaveformResponse{};

  raise_if_error(
      stub->WriteBinary16Waveform(&context, request, &response),
      context);

  return response;
}

WriteComplexBinary16WaveformResponse
write_complex_binary16_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& waveform_handle, const std::vector<nidevice_grpc::NIComplexI16>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteComplexBinary16WaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_handle(waveform_handle);
  copy_array(data, request.mutable_data());

  auto response = WriteComplexBinary16WaveformResponse{};

  raise_if_error(
      stub->WriteComplexBinary16Waveform(&context, request, &response),
      context);

  return response;
}

WriteNamedWaveformComplexF64Response
write_named_waveform_complex_f64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name, const std::vector<nidevice_grpc::NIComplexNumber>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteNamedWaveformComplexF64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);
  copy_array(data, request.mutable_data());

  auto response = WriteNamedWaveformComplexF64Response{};

  raise_if_error(
      stub->WriteNamedWaveformComplexF64(&context, request, &response),
      context);

  return response;
}

WriteNamedWaveformComplexI16Response
write_named_waveform_complex_i16(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name, const std::vector<nidevice_grpc::NIComplexI16>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteNamedWaveformComplexI16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);
  copy_array(data, request.mutable_data());

  auto response = WriteNamedWaveformComplexI16Response{};

  raise_if_error(
      stub->WriteNamedWaveformComplexI16(&context, request, &response),
      context);

  return response;
}

WriteNamedWaveformF64Response
write_named_waveform_f64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name, const std::vector<double>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteNamedWaveformF64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);
  copy_array(data, request.mutable_data());

  auto response = WriteNamedWaveformF64Response{};

  raise_if_error(
      stub->WriteNamedWaveformF64(&context, request, &response),
      context);

  return response;
}

WriteNamedWaveformI16Response
write_named_waveform_i16(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& waveform_name, const std::vector<pb::int32>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteNamedWaveformI16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_name(waveform_name);
  copy_array(data, request.mutable_data());

  auto response = WriteNamedWaveformI16Response{};

  raise_if_error(
      stub->WriteNamedWaveformI16(&context, request, &response),
      context);

  return response;
}

WriteP2PEndpointI16Response
write_p2p_endpoint_i16(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& endpoint_name, const std::vector<pb::int32>& endpoint_data)
{
  ::grpc::ClientContext context;

  auto request = WriteP2PEndpointI16Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_endpoint_name(endpoint_name);
  copy_array(endpoint_data, request.mutable_endpoint_data());

  auto response = WriteP2PEndpointI16Response{};

  raise_if_error(
      stub->WriteP2PEndpointI16(&context, request, &response),
      context);

  return response;
}

WriteScriptResponse
write_script(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::string& script)
{
  ::grpc::ClientContext context;

  auto request = WriteScriptRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_script(script);

  auto response = WriteScriptResponse{};

  raise_if_error(
      stub->WriteScript(&context, request, &response),
      context);

  return response;
}

WriteWaveformResponse
write_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const pb::int32& waveform_handle, const std::vector<double>& data)
{
  ::grpc::ClientContext context;

  auto request = WriteWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_waveform_handle(waveform_handle);
  copy_array(data, request.mutable_data());

  auto response = WriteWaveformResponse{};

  raise_if_error(
      stub->WriteWaveform(&context, request, &response),
      context);

  return response;
}

WriteWaveformComplexF64Response
write_waveform_complex_f64(const StubPtr& stub, const nidevice_grpc::Session& vi, const std::string& channel_name, const std::vector<nidevice_grpc::NIComplexNumber>& data, const pb::int32& waveform_handle)
{
  ::grpc::ClientContext context;

  auto request = WriteWaveformComplexF64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  copy_array(data, request.mutable_data());
  request.set_waveform_handle(waveform_handle);

  auto response = WriteWaveformComplexF64Response{};

  raise_if_error(
      stub->WriteWaveformComplexF64(&context, request, &response),
      context);

  return response;
}


} // namespace nifgen_grpc::experimental::client
