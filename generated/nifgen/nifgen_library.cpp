//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-FGEN Metadata
//---------------------------------------------------------------------
#include "nifgen_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niFgen_64.dll";
#else
static const char* kLibraryName = "libnifgen.so";
#endif

namespace nifgen_grpc {

NiFgenLibrary::NiFgenLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AbortGeneration = reinterpret_cast<AbortGenerationPtr>(shared_library_.get_function_pointer("niFgen_AbortGeneration"));
  function_pointers_.AdjustSampleClockRelativeDelay = reinterpret_cast<AdjustSampleClockRelativeDelayPtr>(shared_library_.get_function_pointer("niFgen_AdjustSampleClockRelativeDelay"));
  function_pointers_.AllocateNamedWaveform = reinterpret_cast<AllocateNamedWaveformPtr>(shared_library_.get_function_pointer("niFgen_AllocateNamedWaveform"));
  function_pointers_.AllocateWaveform = reinterpret_cast<AllocateWaveformPtr>(shared_library_.get_function_pointer("niFgen_AllocateWaveform"));
  function_pointers_.CheckAttributeViBoolean = reinterpret_cast<CheckAttributeViBooleanPtr>(shared_library_.get_function_pointer("niFgen_CheckAttributeViBoolean"));
  function_pointers_.CheckAttributeViInt32 = reinterpret_cast<CheckAttributeViInt32Ptr>(shared_library_.get_function_pointer("niFgen_CheckAttributeViInt32"));
  function_pointers_.CheckAttributeViInt64 = reinterpret_cast<CheckAttributeViInt64Ptr>(shared_library_.get_function_pointer("niFgen_CheckAttributeViInt64"));
  function_pointers_.CheckAttributeViReal64 = reinterpret_cast<CheckAttributeViReal64Ptr>(shared_library_.get_function_pointer("niFgen_CheckAttributeViReal64"));
  function_pointers_.CheckAttributeViSession = reinterpret_cast<CheckAttributeViSessionPtr>(shared_library_.get_function_pointer("niFgen_CheckAttributeViSession"));
  function_pointers_.CheckAttributeViString = reinterpret_cast<CheckAttributeViStringPtr>(shared_library_.get_function_pointer("niFgen_CheckAttributeViString"));
  function_pointers_.ClearArbMemory = reinterpret_cast<ClearArbMemoryPtr>(shared_library_.get_function_pointer("niFgen_ClearArbMemory"));
  function_pointers_.ClearArbSequence = reinterpret_cast<ClearArbSequencePtr>(shared_library_.get_function_pointer("niFgen_ClearArbSequence"));
  function_pointers_.ClearArbWaveform = reinterpret_cast<ClearArbWaveformPtr>(shared_library_.get_function_pointer("niFgen_ClearArbWaveform"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niFgen_ClearError"));
  function_pointers_.ClearFreqList = reinterpret_cast<ClearFreqListPtr>(shared_library_.get_function_pointer("niFgen_ClearFreqList"));
  function_pointers_.ClearInterchangeWarnings = reinterpret_cast<ClearInterchangeWarningsPtr>(shared_library_.get_function_pointer("niFgen_ClearInterchangeWarnings"));
  function_pointers_.ClearUserStandardWaveform = reinterpret_cast<ClearUserStandardWaveformPtr>(shared_library_.get_function_pointer("niFgen_ClearUserStandardWaveform"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niFgen_close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niFgen_Commit"));
  function_pointers_.ConfigureAmplitude = reinterpret_cast<ConfigureAmplitudePtr>(shared_library_.get_function_pointer("niFgen_ConfigureAmplitude"));
  function_pointers_.ConfigureArbSequence = reinterpret_cast<ConfigureArbSequencePtr>(shared_library_.get_function_pointer("niFgen_ConfigureArbSequence"));
  function_pointers_.ConfigureArbWaveform = reinterpret_cast<ConfigureArbWaveformPtr>(shared_library_.get_function_pointer("niFgen_ConfigureArbWaveform"));
  function_pointers_.ConfigureChannels = reinterpret_cast<ConfigureChannelsPtr>(shared_library_.get_function_pointer("niFgen_ConfigureChannels"));
  function_pointers_.ConfigureClockMode = reinterpret_cast<ConfigureClockModePtr>(shared_library_.get_function_pointer("niFgen_ConfigureClockMode"));
  function_pointers_.ConfigureCustomFIRFilterCoefficients = reinterpret_cast<ConfigureCustomFIRFilterCoefficientsPtr>(shared_library_.get_function_pointer("niFgen_ConfigureCustomFIRFilterCoefficients"));
  function_pointers_.ConfigureDigitalEdgeScriptTrigger = reinterpret_cast<ConfigureDigitalEdgeScriptTriggerPtr>(shared_library_.get_function_pointer("niFgen_ConfigureDigitalEdgeScriptTrigger"));
  function_pointers_.ConfigureDigitalEdgeStartTrigger = reinterpret_cast<ConfigureDigitalEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niFgen_ConfigureDigitalEdgeStartTrigger"));
  function_pointers_.ConfigureDigitalLevelScriptTrigger = reinterpret_cast<ConfigureDigitalLevelScriptTriggerPtr>(shared_library_.get_function_pointer("niFgen_ConfigureDigitalLevelScriptTrigger"));
  function_pointers_.ConfigureFreqList = reinterpret_cast<ConfigureFreqListPtr>(shared_library_.get_function_pointer("niFgen_ConfigureFreqList"));
  function_pointers_.ConfigureFrequency = reinterpret_cast<ConfigureFrequencyPtr>(shared_library_.get_function_pointer("niFgen_ConfigureFrequency"));
  function_pointers_.ConfigureOperationMode = reinterpret_cast<ConfigureOperationModePtr>(shared_library_.get_function_pointer("niFgen_ConfigureOperationMode"));
  function_pointers_.ConfigureOutputEnabled = reinterpret_cast<ConfigureOutputEnabledPtr>(shared_library_.get_function_pointer("niFgen_ConfigureOutputEnabled"));
  function_pointers_.ConfigureOutputImpedance = reinterpret_cast<ConfigureOutputImpedancePtr>(shared_library_.get_function_pointer("niFgen_ConfigureOutputImpedance"));
  function_pointers_.ConfigureOutputMode = reinterpret_cast<ConfigureOutputModePtr>(shared_library_.get_function_pointer("niFgen_ConfigureOutputMode"));
  function_pointers_.ConfigureP2PEndpointFullnessStartTrigger = reinterpret_cast<ConfigureP2PEndpointFullnessStartTriggerPtr>(shared_library_.get_function_pointer("niFgen_ConfigureP2PEndpointFullnessStartTrigger"));
  function_pointers_.ConfigureReferenceClock = reinterpret_cast<ConfigureReferenceClockPtr>(shared_library_.get_function_pointer("niFgen_ConfigureReferenceClock"));
  function_pointers_.ConfigureSampleClockSource = reinterpret_cast<ConfigureSampleClockSourcePtr>(shared_library_.get_function_pointer("niFgen_ConfigureSampleClockSource"));
  function_pointers_.ConfigureSampleRate = reinterpret_cast<ConfigureSampleRatePtr>(shared_library_.get_function_pointer("niFgen_ConfigureSampleRate"));
  function_pointers_.ConfigureSoftwareEdgeScriptTrigger = reinterpret_cast<ConfigureSoftwareEdgeScriptTriggerPtr>(shared_library_.get_function_pointer("niFgen_ConfigureSoftwareEdgeScriptTrigger"));
  function_pointers_.ConfigureSoftwareEdgeStartTrigger = reinterpret_cast<ConfigureSoftwareEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niFgen_ConfigureSoftwareEdgeStartTrigger"));
  function_pointers_.ConfigureStandardWaveform = reinterpret_cast<ConfigureStandardWaveformPtr>(shared_library_.get_function_pointer("niFgen_ConfigureStandardWaveform"));
  function_pointers_.ConfigureSynchronization = reinterpret_cast<ConfigureSynchronizationPtr>(shared_library_.get_function_pointer("niFgen_ConfigureSynchronization"));
  function_pointers_.ConfigureTriggerMode = reinterpret_cast<ConfigureTriggerModePtr>(shared_library_.get_function_pointer("niFgen_ConfigureTriggerMode"));
  function_pointers_.CreateAdvancedArbSequence = reinterpret_cast<CreateAdvancedArbSequencePtr>(shared_library_.get_function_pointer("niFgen_CreateAdvancedArbSequence"));
  function_pointers_.CreateArbSequence = reinterpret_cast<CreateArbSequencePtr>(shared_library_.get_function_pointer("niFgen_CreateArbSequence"));
  function_pointers_.CreateFreqList = reinterpret_cast<CreateFreqListPtr>(shared_library_.get_function_pointer("niFgen_CreateFreqList"));
  function_pointers_.CreateWaveformComplexF64 = reinterpret_cast<CreateWaveformComplexF64Ptr>(shared_library_.get_function_pointer("niFgen_CreateWaveformComplexF64"));
  function_pointers_.CreateWaveformF64 = reinterpret_cast<CreateWaveformF64Ptr>(shared_library_.get_function_pointer("niFgen_CreateWaveformF64"));
  function_pointers_.CreateWaveformFromFileF64 = reinterpret_cast<CreateWaveformFromFileF64Ptr>(shared_library_.get_function_pointer("niFgen_CreateWaveformFromFileF64"));
  function_pointers_.CreateWaveformFromFileHWS = reinterpret_cast<CreateWaveformFromFileHWSPtr>(shared_library_.get_function_pointer("niFgen_CreateWaveformFromFileHWS"));
  function_pointers_.CreateWaveformFromFileI16 = reinterpret_cast<CreateWaveformFromFileI16Ptr>(shared_library_.get_function_pointer("niFgen_CreateWaveformFromFileI16"));
  function_pointers_.CreateWaveformI16 = reinterpret_cast<CreateWaveformI16Ptr>(shared_library_.get_function_pointer("niFgen_CreateWaveformI16"));
  function_pointers_.DefineUserStandardWaveform = reinterpret_cast<DefineUserStandardWaveformPtr>(shared_library_.get_function_pointer("niFgen_DefineUserStandardWaveform"));
  function_pointers_.DeleteNamedWaveform = reinterpret_cast<DeleteNamedWaveformPtr>(shared_library_.get_function_pointer("niFgen_DeleteNamedWaveform"));
  function_pointers_.DeleteScript = reinterpret_cast<DeleteScriptPtr>(shared_library_.get_function_pointer("niFgen_DeleteScript"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niFgen_Disable"));
  function_pointers_.DisableAnalogFilter = reinterpret_cast<DisableAnalogFilterPtr>(shared_library_.get_function_pointer("niFgen_DisableAnalogFilter"));
  function_pointers_.DisableDigitalFilter = reinterpret_cast<DisableDigitalFilterPtr>(shared_library_.get_function_pointer("niFgen_DisableDigitalFilter"));
  function_pointers_.DisableDigitalPatterning = reinterpret_cast<DisableDigitalPatterningPtr>(shared_library_.get_function_pointer("niFgen_DisableDigitalPatterning"));
  function_pointers_.DisableScriptTrigger = reinterpret_cast<DisableScriptTriggerPtr>(shared_library_.get_function_pointer("niFgen_DisableScriptTrigger"));
  function_pointers_.DisableStartTrigger = reinterpret_cast<DisableStartTriggerPtr>(shared_library_.get_function_pointer("niFgen_DisableStartTrigger"));
  function_pointers_.EnableAnalogFilter = reinterpret_cast<EnableAnalogFilterPtr>(shared_library_.get_function_pointer("niFgen_EnableAnalogFilter"));
  function_pointers_.EnableDigitalFilter = reinterpret_cast<EnableDigitalFilterPtr>(shared_library_.get_function_pointer("niFgen_EnableDigitalFilter"));
  function_pointers_.EnableDigitalPatterning = reinterpret_cast<EnableDigitalPatterningPtr>(shared_library_.get_function_pointer("niFgen_EnableDigitalPatterning"));
  function_pointers_.ErrorHandler = reinterpret_cast<ErrorHandlerPtr>(shared_library_.get_function_pointer("niFgen_ErrorHandler"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_.get_function_pointer("niFgen_error_message"));
  function_pointers_.ErrorQuery = reinterpret_cast<ErrorQueryPtr>(shared_library_.get_function_pointer("niFgen_error_query"));
  function_pointers_.ExportAttributeConfigurationBuffer = reinterpret_cast<ExportAttributeConfigurationBufferPtr>(shared_library_.get_function_pointer("niFgen_ExportAttributeConfigurationBuffer"));
  function_pointers_.ExportAttributeConfigurationFile = reinterpret_cast<ExportAttributeConfigurationFilePtr>(shared_library_.get_function_pointer("niFgen_ExportAttributeConfigurationFile"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_.get_function_pointer("niFgen_ExportSignal"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niFgen_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niFgen_GetAttributeViInt32"));
  function_pointers_.GetAttributeViInt64 = reinterpret_cast<GetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niFgen_GetAttributeViInt64"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niFgen_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niFgen_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niFgen_GetAttributeViString"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niFgen_GetChannelName"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niFgen_GetError"));
  function_pointers_.GetExtCalLastDateAndTime = reinterpret_cast<GetExtCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niFgen_GetExtCalLastDateAndTime"));
  function_pointers_.GetExtCalLastTemp = reinterpret_cast<GetExtCalLastTempPtr>(shared_library_.get_function_pointer("niFgen_GetExtCalLastTemp"));
  function_pointers_.GetExtCalRecommendedInterval = reinterpret_cast<GetExtCalRecommendedIntervalPtr>(shared_library_.get_function_pointer("niFgen_GetExtCalRecommendedInterval"));
  function_pointers_.GetFIRFilterCoefficients = reinterpret_cast<GetFIRFilterCoefficientsPtr>(shared_library_.get_function_pointer("niFgen_GetFIRFilterCoefficients"));
  function_pointers_.GetHardwareState = reinterpret_cast<GetHardwareStatePtr>(shared_library_.get_function_pointer("niFgen_GetHardwareState"));
  function_pointers_.GetNextCoercionRecord = reinterpret_cast<GetNextCoercionRecordPtr>(shared_library_.get_function_pointer("niFgen_GetNextCoercionRecord"));
  function_pointers_.GetNextInterchangeWarning = reinterpret_cast<GetNextInterchangeWarningPtr>(shared_library_.get_function_pointer("niFgen_GetNextInterchangeWarning"));
  function_pointers_.GetSelfCalLastDateAndTime = reinterpret_cast<GetSelfCalLastDateAndTimePtr>(shared_library_.get_function_pointer("niFgen_GetSelfCalLastDateAndTime"));
  function_pointers_.GetSelfCalLastTemp = reinterpret_cast<GetSelfCalLastTempPtr>(shared_library_.get_function_pointer("niFgen_GetSelfCalLastTemp"));
  function_pointers_.GetSelfCalSupported = reinterpret_cast<GetSelfCalSupportedPtr>(shared_library_.get_function_pointer("niFgen_GetSelfCalSupported"));
  function_pointers_.GetStreamEndpointHandle = reinterpret_cast<GetStreamEndpointHandlePtr>(shared_library_.get_function_pointer("niFgen_GetStreamEndpointHandle"));
  function_pointers_.ImportAttributeConfigurationBuffer = reinterpret_cast<ImportAttributeConfigurationBufferPtr>(shared_library_.get_function_pointer("niFgen_ImportAttributeConfigurationBuffer"));
  function_pointers_.ImportAttributeConfigurationFile = reinterpret_cast<ImportAttributeConfigurationFilePtr>(shared_library_.get_function_pointer("niFgen_ImportAttributeConfigurationFile"));
  function_pointers_.Init = reinterpret_cast<InitPtr>(shared_library_.get_function_pointer("niFgen_init"));
  function_pointers_.InitWithOptions = reinterpret_cast<InitWithOptionsPtr>(shared_library_.get_function_pointer("niFgen_InitWithOptions"));
  function_pointers_.InitializeWithChannels = reinterpret_cast<InitializeWithChannelsPtr>(shared_library_.get_function_pointer("niFgen_InitializeWithChannels"));
  function_pointers_.InitiateGeneration = reinterpret_cast<InitiateGenerationPtr>(shared_library_.get_function_pointer("niFgen_InitiateGeneration"));
  function_pointers_.InvalidateAllAttributes = reinterpret_cast<InvalidateAllAttributesPtr>(shared_library_.get_function_pointer("niFgen_InvalidateAllAttributes"));
  function_pointers_.IsDone = reinterpret_cast<IsDonePtr>(shared_library_.get_function_pointer("niFgen_IsDone"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niFgen_LockSession"));
  function_pointers_.ManualEnableP2PStream = reinterpret_cast<ManualEnableP2PStreamPtr>(shared_library_.get_function_pointer("niFgen_ManualEnableP2PStream"));
  function_pointers_.QueryArbSeqCapabilities = reinterpret_cast<QueryArbSeqCapabilitiesPtr>(shared_library_.get_function_pointer("niFgen_QueryArbSeqCapabilities"));
  function_pointers_.QueryArbWfmCapabilities = reinterpret_cast<QueryArbWfmCapabilitiesPtr>(shared_library_.get_function_pointer("niFgen_QueryArbWfmCapabilities"));
  function_pointers_.QueryFreqListCapabilities = reinterpret_cast<QueryFreqListCapabilitiesPtr>(shared_library_.get_function_pointer("niFgen_QueryFreqListCapabilities"));
  function_pointers_.ReadCurrentTemperature = reinterpret_cast<ReadCurrentTemperaturePtr>(shared_library_.get_function_pointer("niFgen_ReadCurrentTemperature"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niFgen_reset"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("niFgen_ResetAttribute"));
  function_pointers_.ResetDevice = reinterpret_cast<ResetDevicePtr>(shared_library_.get_function_pointer("niFgen_ResetDevice"));
  function_pointers_.ResetInterchangeCheck = reinterpret_cast<ResetInterchangeCheckPtr>(shared_library_.get_function_pointer("niFgen_ResetInterchangeCheck"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niFgen_ResetWithDefaults"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niFgen_revision_query"));
  function_pointers_.RouteSignalOut = reinterpret_cast<RouteSignalOutPtr>(shared_library_.get_function_pointer("niFgen_RouteSignalOut"));
  function_pointers_.SelfCal = reinterpret_cast<SelfCalPtr>(shared_library_.get_function_pointer("niFgen_SelfCal"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niFgen_self_test"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("niFgen_SendSoftwareEdgeTrigger"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niFgen_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niFgen_SetAttributeViInt32"));
  function_pointers_.SetAttributeViInt64 = reinterpret_cast<SetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niFgen_SetAttributeViInt64"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niFgen_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niFgen_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niFgen_SetAttributeViString"));
  function_pointers_.SetNamedWaveformNextWritePosition = reinterpret_cast<SetNamedWaveformNextWritePositionPtr>(shared_library_.get_function_pointer("niFgen_SetNamedWaveformNextWritePosition"));
  function_pointers_.SetWaveformNextWritePosition = reinterpret_cast<SetWaveformNextWritePositionPtr>(shared_library_.get_function_pointer("niFgen_SetWaveformNextWritePosition"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niFgen_UnlockSession"));
  function_pointers_.WaitUntilDone = reinterpret_cast<WaitUntilDonePtr>(shared_library_.get_function_pointer("niFgen_WaitUntilDone"));
  function_pointers_.WriteBinary16Waveform = reinterpret_cast<WriteBinary16WaveformPtr>(shared_library_.get_function_pointer("niFgen_WriteBinary16Waveform"));
  function_pointers_.WriteComplexBinary16Waveform = reinterpret_cast<WriteComplexBinary16WaveformPtr>(shared_library_.get_function_pointer("niFgen_WriteComplexBinary16Waveform"));
  function_pointers_.WriteNamedWaveformComplexF64 = reinterpret_cast<WriteNamedWaveformComplexF64Ptr>(shared_library_.get_function_pointer("niFgen_WriteNamedWaveformComplexF64"));
  function_pointers_.WriteNamedWaveformComplexI16 = reinterpret_cast<WriteNamedWaveformComplexI16Ptr>(shared_library_.get_function_pointer("niFgen_WriteNamedWaveformComplexI16"));
  function_pointers_.WriteNamedWaveformF64 = reinterpret_cast<WriteNamedWaveformF64Ptr>(shared_library_.get_function_pointer("niFgen_WriteNamedWaveformF64"));
  function_pointers_.WriteNamedWaveformI16 = reinterpret_cast<WriteNamedWaveformI16Ptr>(shared_library_.get_function_pointer("niFgen_WriteNamedWaveformI16"));
  function_pointers_.WriteP2PEndpointI16 = reinterpret_cast<WriteP2PEndpointI16Ptr>(shared_library_.get_function_pointer("niFgen_WriteP2PEndpointI16"));
  function_pointers_.WriteScript = reinterpret_cast<WriteScriptPtr>(shared_library_.get_function_pointer("niFgen_WriteScript"));
  function_pointers_.WriteWaveform = reinterpret_cast<WriteWaveformPtr>(shared_library_.get_function_pointer("niFgen_WriteWaveform"));
  function_pointers_.WriteWaveformComplexF64 = reinterpret_cast<WriteWaveformComplexF64Ptr>(shared_library_.get_function_pointer("niFgen_WriteWaveformComplexF64"));
}

NiFgenLibrary::~NiFgenLibrary()
{
}

::grpc::Status NiFgenLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiFgenLibrary::AbortGeneration(ViSession vi)
{
  if (!function_pointers_.AbortGeneration) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_AbortGeneration.");
  }
#if defined(_MSC_VER)
  return niFgen_AbortGeneration(vi);
#else
  return function_pointers_.AbortGeneration(vi);
#endif
}

ViStatus NiFgenLibrary::AdjustSampleClockRelativeDelay(ViSession vi, ViReal64 adjustmentTime)
{
  if (!function_pointers_.AdjustSampleClockRelativeDelay) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_AdjustSampleClockRelativeDelay.");
  }
#if defined(_MSC_VER)
  return niFgen_AdjustSampleClockRelativeDelay(vi, adjustmentTime);
#else
  return function_pointers_.AdjustSampleClockRelativeDelay(vi, adjustmentTime);
#endif
}

ViStatus NiFgenLibrary::AllocateNamedWaveform(ViSession vi, ViConstString channelName, ViConstString waveformName, ViInt32 waveformSize)
{
  if (!function_pointers_.AllocateNamedWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_AllocateNamedWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_AllocateNamedWaveform(vi, channelName, waveformName, waveformSize);
#else
  return function_pointers_.AllocateNamedWaveform(vi, channelName, waveformName, waveformSize);
#endif
}

ViStatus NiFgenLibrary::AllocateWaveform(ViSession vi, ViConstString channelName, ViInt32 waveformSize, ViInt32* waveformHandle)
{
  if (!function_pointers_.AllocateWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_AllocateWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_AllocateWaveform(vi, channelName, waveformSize, waveformHandle);
#else
  return function_pointers_.AllocateWaveform(vi, channelName, waveformSize, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::CheckAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.CheckAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CheckAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niFgen_CheckAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::CheckAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.CheckAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CheckAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niFgen_CheckAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::CheckAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue)
{
  if (!function_pointers_.CheckAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CheckAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niFgen_CheckAttributeViInt64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViInt64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::CheckAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.CheckAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CheckAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niFgen_CheckAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::CheckAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.CheckAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CheckAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niFgen_CheckAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::CheckAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue)
{
  if (!function_pointers_.CheckAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CheckAttributeViString.");
  }
#if defined(_MSC_VER)
  return niFgen_CheckAttributeViString(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.CheckAttributeViString(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::ClearArbMemory(ViSession vi)
{
  if (!function_pointers_.ClearArbMemory) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearArbMemory.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearArbMemory(vi);
#else
  return function_pointers_.ClearArbMemory(vi);
#endif
}

ViStatus NiFgenLibrary::ClearArbSequence(ViSession vi, ViInt32 sequenceHandle)
{
  if (!function_pointers_.ClearArbSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearArbSequence.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearArbSequence(vi, sequenceHandle);
#else
  return function_pointers_.ClearArbSequence(vi, sequenceHandle);
#endif
}

ViStatus NiFgenLibrary::ClearArbWaveform(ViSession vi, ViInt32 waveformHandle)
{
  if (!function_pointers_.ClearArbWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearArbWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearArbWaveform(vi, waveformHandle);
#else
  return function_pointers_.ClearArbWaveform(vi, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearError.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearError(vi);
#else
  return function_pointers_.ClearError(vi);
#endif
}

ViStatus NiFgenLibrary::ClearFreqList(ViSession vi, ViInt32 frequencyListHandle)
{
  if (!function_pointers_.ClearFreqList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearFreqList.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearFreqList(vi, frequencyListHandle);
#else
  return function_pointers_.ClearFreqList(vi, frequencyListHandle);
#endif
}

ViStatus NiFgenLibrary::ClearInterchangeWarnings(ViSession vi)
{
  if (!function_pointers_.ClearInterchangeWarnings) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearInterchangeWarnings.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearInterchangeWarnings(vi);
#else
  return function_pointers_.ClearInterchangeWarnings(vi);
#endif
}

ViStatus NiFgenLibrary::ClearUserStandardWaveform(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.ClearUserStandardWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ClearUserStandardWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_ClearUserStandardWaveform(vi, channelName);
#else
  return function_pointers_.ClearUserStandardWaveform(vi, channelName);
#endif
}

ViStatus NiFgenLibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_close.");
  }
#if defined(_MSC_VER)
  return niFgen_close(vi);
#else
  return function_pointers_.Close(vi);
#endif
}

ViStatus NiFgenLibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_Commit.");
  }
#if defined(_MSC_VER)
  return niFgen_Commit(vi);
#else
  return function_pointers_.Commit(vi);
#endif
}

ViStatus NiFgenLibrary::ConfigureAmplitude(ViSession vi, ViConstString channelName, ViReal64 amplitude)
{
  if (!function_pointers_.ConfigureAmplitude) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureAmplitude.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureAmplitude(vi, channelName, amplitude);
#else
  return function_pointers_.ConfigureAmplitude(vi, channelName, amplitude);
#endif
}

ViStatus NiFgenLibrary::ConfigureArbSequence(ViSession vi, ViConstString channelName, ViInt32 sequenceHandle, ViReal64 gain, ViReal64 offset)
{
  if (!function_pointers_.ConfigureArbSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureArbSequence.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureArbSequence(vi, channelName, sequenceHandle, gain, offset);
#else
  return function_pointers_.ConfigureArbSequence(vi, channelName, sequenceHandle, gain, offset);
#endif
}

ViStatus NiFgenLibrary::ConfigureArbWaveform(ViSession vi, ViConstString channelName, ViInt32 waveformHandle, ViReal64 gain, ViReal64 offset)
{
  if (!function_pointers_.ConfigureArbWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureArbWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureArbWaveform(vi, channelName, waveformHandle, gain, offset);
#else
  return function_pointers_.ConfigureArbWaveform(vi, channelName, waveformHandle, gain, offset);
#endif
}

ViStatus NiFgenLibrary::ConfigureChannels(ViSession vi, ViConstString channels)
{
  if (!function_pointers_.ConfigureChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureChannels.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureChannels(vi, channels);
#else
  return function_pointers_.ConfigureChannels(vi, channels);
#endif
}

ViStatus NiFgenLibrary::ConfigureClockMode(ViSession vi, ViInt32 clockMode)
{
  if (!function_pointers_.ConfigureClockMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureClockMode.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureClockMode(vi, clockMode);
#else
  return function_pointers_.ConfigureClockMode(vi, clockMode);
#endif
}

ViStatus NiFgenLibrary::ConfigureCustomFIRFilterCoefficients(ViSession vi, ViConstString channelName, ViInt32 numberOfCoefficients, ViReal64 coefficientsArray[])
{
  if (!function_pointers_.ConfigureCustomFIRFilterCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureCustomFIRFilterCoefficients.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureCustomFIRFilterCoefficients(vi, channelName, numberOfCoefficients, coefficientsArray);
#else
  return function_pointers_.ConfigureCustomFIRFilterCoefficients(vi, channelName, numberOfCoefficients, coefficientsArray);
#endif
}

ViStatus NiFgenLibrary::ConfigureDigitalEdgeScriptTrigger(ViSession vi, ViConstString triggerId, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureDigitalEdgeScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureDigitalEdgeScriptTrigger(vi, triggerId, source, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeScriptTrigger(vi, triggerId, source, edge);
#endif
}

ViStatus NiFgenLibrary::ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureDigitalEdgeStartTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureDigitalEdgeStartTrigger(vi, source, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeStartTrigger(vi, source, edge);
#endif
}

ViStatus NiFgenLibrary::ConfigureDigitalLevelScriptTrigger(ViSession vi, ViConstString triggerId, ViConstString source, ViInt32 triggerWhen)
{
  if (!function_pointers_.ConfigureDigitalLevelScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureDigitalLevelScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureDigitalLevelScriptTrigger(vi, triggerId, source, triggerWhen);
#else
  return function_pointers_.ConfigureDigitalLevelScriptTrigger(vi, triggerId, source, triggerWhen);
#endif
}

ViStatus NiFgenLibrary::ConfigureFreqList(ViSession vi, ViConstString channelName, ViInt32 frequencyListHandle, ViReal64 amplitude, ViReal64 dcOffset, ViReal64 startPhase)
{
  if (!function_pointers_.ConfigureFreqList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureFreqList.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureFreqList(vi, channelName, frequencyListHandle, amplitude, dcOffset, startPhase);
#else
  return function_pointers_.ConfigureFreqList(vi, channelName, frequencyListHandle, amplitude, dcOffset, startPhase);
#endif
}

ViStatus NiFgenLibrary::ConfigureFrequency(ViSession vi, ViConstString channelName, ViReal64 frequency)
{
  if (!function_pointers_.ConfigureFrequency) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureFrequency.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureFrequency(vi, channelName, frequency);
#else
  return function_pointers_.ConfigureFrequency(vi, channelName, frequency);
#endif
}

ViStatus NiFgenLibrary::ConfigureOperationMode(ViSession vi, ViConstString channelName, ViInt32 operationMode)
{
  if (!function_pointers_.ConfigureOperationMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureOperationMode.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureOperationMode(vi, channelName, operationMode);
#else
  return function_pointers_.ConfigureOperationMode(vi, channelName, operationMode);
#endif
}

ViStatus NiFgenLibrary::ConfigureOutputEnabled(ViSession vi, ViConstString channelName, ViBoolean enabled)
{
  if (!function_pointers_.ConfigureOutputEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureOutputEnabled.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureOutputEnabled(vi, channelName, enabled);
#else
  return function_pointers_.ConfigureOutputEnabled(vi, channelName, enabled);
#endif
}

ViStatus NiFgenLibrary::ConfigureOutputImpedance(ViSession vi, ViConstString channelName, ViReal64 impedance)
{
  if (!function_pointers_.ConfigureOutputImpedance) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureOutputImpedance.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureOutputImpedance(vi, channelName, impedance);
#else
  return function_pointers_.ConfigureOutputImpedance(vi, channelName, impedance);
#endif
}

ViStatus NiFgenLibrary::ConfigureOutputMode(ViSession vi, ViInt32 outputMode)
{
  if (!function_pointers_.ConfigureOutputMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureOutputMode.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureOutputMode(vi, outputMode);
#else
  return function_pointers_.ConfigureOutputMode(vi, outputMode);
#endif
}

ViStatus NiFgenLibrary::ConfigureP2PEndpointFullnessStartTrigger(ViSession vi, ViInt32 p2pEndpointFullnessLevel)
{
  if (!function_pointers_.ConfigureP2PEndpointFullnessStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureP2PEndpointFullnessStartTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureP2PEndpointFullnessStartTrigger(vi, p2pEndpointFullnessLevel);
#else
  return function_pointers_.ConfigureP2PEndpointFullnessStartTrigger(vi, p2pEndpointFullnessLevel);
#endif
}

ViStatus NiFgenLibrary::ConfigureReferenceClock(ViSession vi, ViConstString referenceClockSource, ViReal64 referenceClockFrequency)
{
  if (!function_pointers_.ConfigureReferenceClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureReferenceClock.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureReferenceClock(vi, referenceClockSource, referenceClockFrequency);
#else
  return function_pointers_.ConfigureReferenceClock(vi, referenceClockSource, referenceClockFrequency);
#endif
}

ViStatus NiFgenLibrary::ConfigureSampleClockSource(ViSession vi, ViConstString sampleClockSource)
{
  if (!function_pointers_.ConfigureSampleClockSource) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureSampleClockSource.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureSampleClockSource(vi, sampleClockSource);
#else
  return function_pointers_.ConfigureSampleClockSource(vi, sampleClockSource);
#endif
}

ViStatus NiFgenLibrary::ConfigureSampleRate(ViSession vi, ViReal64 sampleRate)
{
  if (!function_pointers_.ConfigureSampleRate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureSampleRate.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureSampleRate(vi, sampleRate);
#else
  return function_pointers_.ConfigureSampleRate(vi, sampleRate);
#endif
}

ViStatus NiFgenLibrary::ConfigureSoftwareEdgeScriptTrigger(ViSession vi, ViConstString triggerId)
{
  if (!function_pointers_.ConfigureSoftwareEdgeScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureSoftwareEdgeScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureSoftwareEdgeScriptTrigger(vi, triggerId);
#else
  return function_pointers_.ConfigureSoftwareEdgeScriptTrigger(vi, triggerId);
#endif
}

ViStatus NiFgenLibrary::ConfigureSoftwareEdgeStartTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureSoftwareEdgeStartTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureSoftwareEdgeStartTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareEdgeStartTrigger(vi);
#endif
}

ViStatus NiFgenLibrary::ConfigureStandardWaveform(ViSession vi, ViConstString channelName, ViInt32 waveform, ViReal64 amplitude, ViReal64 dcOffset, ViReal64 frequency, ViReal64 startPhase)
{
  if (!function_pointers_.ConfigureStandardWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureStandardWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureStandardWaveform(vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase);
#else
  return function_pointers_.ConfigureStandardWaveform(vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase);
#endif
}

ViStatus NiFgenLibrary::ConfigureSynchronization(ViSession vi, ViConstString channelName, ViInt32 synchronizationSource)
{
  if (!function_pointers_.ConfigureSynchronization) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureSynchronization.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureSynchronization(vi, channelName, synchronizationSource);
#else
  return function_pointers_.ConfigureSynchronization(vi, channelName, synchronizationSource);
#endif
}

ViStatus NiFgenLibrary::ConfigureTriggerMode(ViSession vi, ViConstString channelName, ViInt32 triggerMode)
{
  if (!function_pointers_.ConfigureTriggerMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ConfigureTriggerMode.");
  }
#if defined(_MSC_VER)
  return niFgen_ConfigureTriggerMode(vi, channelName, triggerMode);
#else
  return function_pointers_.ConfigureTriggerMode(vi, channelName, triggerMode);
#endif
}

ViStatus NiFgenLibrary::CreateAdvancedArbSequence(ViSession vi, ViInt32 sequenceLength, ViInt32 waveformHandlesArray[], ViInt32 loopCountsArray[], ViInt32 sampleCountsArray[], ViInt32 markerLocationArray[], ViInt32 coercedMarkersArray[], ViInt32* sequenceHandle)
{
  if (!function_pointers_.CreateAdvancedArbSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateAdvancedArbSequence.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateAdvancedArbSequence(vi, sequenceLength, waveformHandlesArray, loopCountsArray, sampleCountsArray, markerLocationArray, coercedMarkersArray, sequenceHandle);
#else
  return function_pointers_.CreateAdvancedArbSequence(vi, sequenceLength, waveformHandlesArray, loopCountsArray, sampleCountsArray, markerLocationArray, coercedMarkersArray, sequenceHandle);
#endif
}

ViStatus NiFgenLibrary::CreateArbSequence(ViSession vi, ViInt32 sequenceLength, ViInt32 waveformHandlesArray[], ViInt32 loopCountsArray[], ViInt32* sequenceHandle)
{
  if (!function_pointers_.CreateArbSequence) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateArbSequence.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateArbSequence(vi, sequenceLength, waveformHandlesArray, loopCountsArray, sequenceHandle);
#else
  return function_pointers_.CreateArbSequence(vi, sequenceLength, waveformHandlesArray, loopCountsArray, sequenceHandle);
#endif
}

ViStatus NiFgenLibrary::CreateFreqList(ViSession vi, ViInt32 waveform, ViInt32 frequencyListLength, ViReal64 frequencyArray[], ViReal64 durationArray[], ViInt32* frequencyListHandle)
{
  if (!function_pointers_.CreateFreqList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateFreqList.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateFreqList(vi, waveform, frequencyListLength, frequencyArray, durationArray, frequencyListHandle);
#else
  return function_pointers_.CreateFreqList(vi, waveform, frequencyListLength, frequencyArray, durationArray, frequencyListHandle);
#endif
}

ViStatus NiFgenLibrary::CreateWaveformComplexF64(ViSession vi, ViConstString channelName, ViInt32 numberOfSamples, NIComplexNumber_struct waveformDataArray[], ViInt32* waveformHandle)
{
  if (!function_pointers_.CreateWaveformComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateWaveformComplexF64.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateWaveformComplexF64(vi, channelName, numberOfSamples, waveformDataArray, waveformHandle);
#else
  return function_pointers_.CreateWaveformComplexF64(vi, channelName, numberOfSamples, waveformDataArray, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::CreateWaveformF64(ViSession vi, ViConstString channelName, ViInt32 waveformSize, ViReal64 waveformDataArray[], ViInt32* waveformHandle)
{
  if (!function_pointers_.CreateWaveformF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateWaveformF64.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateWaveformF64(vi, channelName, waveformSize, waveformDataArray, waveformHandle);
#else
  return function_pointers_.CreateWaveformF64(vi, channelName, waveformSize, waveformDataArray, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::CreateWaveformFromFileF64(ViSession vi, ViConstString channelName, ViConstString fileName, ViInt32 byteOrder, ViInt32* waveformHandle)
{
  if (!function_pointers_.CreateWaveformFromFileF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateWaveformFromFileF64.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateWaveformFromFileF64(vi, channelName, fileName, byteOrder, waveformHandle);
#else
  return function_pointers_.CreateWaveformFromFileF64(vi, channelName, fileName, byteOrder, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::CreateWaveformFromFileHWS(ViSession vi, ViConstString channelName, ViConstString fileName, ViBoolean useRateFromWaveform, ViBoolean useGainAndOffsetFromWaveform, ViInt32* waveformHandle)
{
  if (!function_pointers_.CreateWaveformFromFileHWS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateWaveformFromFileHWS.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateWaveformFromFileHWS(vi, channelName, fileName, useRateFromWaveform, useGainAndOffsetFromWaveform, waveformHandle);
#else
  return function_pointers_.CreateWaveformFromFileHWS(vi, channelName, fileName, useRateFromWaveform, useGainAndOffsetFromWaveform, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::CreateWaveformFromFileI16(ViSession vi, ViConstString channelName, ViConstString fileName, ViInt32 byteOrder, ViInt32* waveformHandle)
{
  if (!function_pointers_.CreateWaveformFromFileI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateWaveformFromFileI16.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateWaveformFromFileI16(vi, channelName, fileName, byteOrder, waveformHandle);
#else
  return function_pointers_.CreateWaveformFromFileI16(vi, channelName, fileName, byteOrder, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::CreateWaveformI16(ViSession vi, ViConstString channelName, ViInt32 waveformSize, ViInt16 waveformDataArray[], ViInt32* waveformHandle)
{
  if (!function_pointers_.CreateWaveformI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_CreateWaveformI16.");
  }
#if defined(_MSC_VER)
  return niFgen_CreateWaveformI16(vi, channelName, waveformSize, waveformDataArray, waveformHandle);
#else
  return function_pointers_.CreateWaveformI16(vi, channelName, waveformSize, waveformDataArray, waveformHandle);
#endif
}

ViStatus NiFgenLibrary::DefineUserStandardWaveform(ViSession vi, ViConstString channelName, ViInt32 waveformSize, ViReal64 waveformDataArray[])
{
  if (!function_pointers_.DefineUserStandardWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DefineUserStandardWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_DefineUserStandardWaveform(vi, channelName, waveformSize, waveformDataArray);
#else
  return function_pointers_.DefineUserStandardWaveform(vi, channelName, waveformSize, waveformDataArray);
#endif
}

ViStatus NiFgenLibrary::DeleteNamedWaveform(ViSession vi, ViConstString channelName, ViConstString waveformName)
{
  if (!function_pointers_.DeleteNamedWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DeleteNamedWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_DeleteNamedWaveform(vi, channelName, waveformName);
#else
  return function_pointers_.DeleteNamedWaveform(vi, channelName, waveformName);
#endif
}

ViStatus NiFgenLibrary::DeleteScript(ViSession vi, ViConstString channelName, ViConstString scriptName)
{
  if (!function_pointers_.DeleteScript) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DeleteScript.");
  }
#if defined(_MSC_VER)
  return niFgen_DeleteScript(vi, channelName, scriptName);
#else
  return function_pointers_.DeleteScript(vi, channelName, scriptName);
#endif
}

ViStatus NiFgenLibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_Disable.");
  }
#if defined(_MSC_VER)
  return niFgen_Disable(vi);
#else
  return function_pointers_.Disable(vi);
#endif
}

ViStatus NiFgenLibrary::DisableAnalogFilter(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableAnalogFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DisableAnalogFilter.");
  }
#if defined(_MSC_VER)
  return niFgen_DisableAnalogFilter(vi, channelName);
#else
  return function_pointers_.DisableAnalogFilter(vi, channelName);
#endif
}

ViStatus NiFgenLibrary::DisableDigitalFilter(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableDigitalFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DisableDigitalFilter.");
  }
#if defined(_MSC_VER)
  return niFgen_DisableDigitalFilter(vi, channelName);
#else
  return function_pointers_.DisableDigitalFilter(vi, channelName);
#endif
}

ViStatus NiFgenLibrary::DisableDigitalPatterning(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.DisableDigitalPatterning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DisableDigitalPatterning.");
  }
#if defined(_MSC_VER)
  return niFgen_DisableDigitalPatterning(vi, channelName);
#else
  return function_pointers_.DisableDigitalPatterning(vi, channelName);
#endif
}

ViStatus NiFgenLibrary::DisableScriptTrigger(ViSession vi, ViConstString triggerId)
{
  if (!function_pointers_.DisableScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DisableScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_DisableScriptTrigger(vi, triggerId);
#else
  return function_pointers_.DisableScriptTrigger(vi, triggerId);
#endif
}

ViStatus NiFgenLibrary::DisableStartTrigger(ViSession vi)
{
  if (!function_pointers_.DisableStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_DisableStartTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_DisableStartTrigger(vi);
#else
  return function_pointers_.DisableStartTrigger(vi);
#endif
}

ViStatus NiFgenLibrary::EnableAnalogFilter(ViSession vi, ViConstString channelName, ViReal64 filterCorrectionFrequency)
{
  if (!function_pointers_.EnableAnalogFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_EnableAnalogFilter.");
  }
#if defined(_MSC_VER)
  return niFgen_EnableAnalogFilter(vi, channelName, filterCorrectionFrequency);
#else
  return function_pointers_.EnableAnalogFilter(vi, channelName, filterCorrectionFrequency);
#endif
}

ViStatus NiFgenLibrary::EnableDigitalFilter(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.EnableDigitalFilter) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_EnableDigitalFilter.");
  }
#if defined(_MSC_VER)
  return niFgen_EnableDigitalFilter(vi, channelName);
#else
  return function_pointers_.EnableDigitalFilter(vi, channelName);
#endif
}

ViStatus NiFgenLibrary::EnableDigitalPatterning(ViSession vi, ViConstString channelName)
{
  if (!function_pointers_.EnableDigitalPatterning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_EnableDigitalPatterning.");
  }
#if defined(_MSC_VER)
  return niFgen_EnableDigitalPatterning(vi, channelName);
#else
  return function_pointers_.EnableDigitalPatterning(vi, channelName);
#endif
}

ViStatus NiFgenLibrary::ErrorHandler(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorHandler) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ErrorHandler.");
  }
#if defined(_MSC_VER)
  return niFgen_ErrorHandler(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorHandler(vi, errorCode, errorMessage);
#endif
}

ViStatus NiFgenLibrary::ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_error_message.");
  }
#if defined(_MSC_VER)
  return niFgen_error_message(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorMessage(vi, errorCode, errorMessage);
#endif
}

ViStatus NiFgenLibrary::ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[256])
{
  if (!function_pointers_.ErrorQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_error_query.");
  }
#if defined(_MSC_VER)
  return niFgen_error_query(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorQuery(vi, errorCode, errorMessage);
#endif
}

ViStatus NiFgenLibrary::ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 sizeInBytes, ViInt8 configuration[])
{
  if (!function_pointers_.ExportAttributeConfigurationBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ExportAttributeConfigurationBuffer.");
  }
#if defined(_MSC_VER)
  return niFgen_ExportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
#else
  return function_pointers_.ExportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
#endif
}

ViStatus NiFgenLibrary::ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.ExportAttributeConfigurationFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ExportAttributeConfigurationFile.");
  }
#if defined(_MSC_VER)
  return niFgen_ExportAttributeConfigurationFile(vi, filePath);
#else
  return function_pointers_.ExportAttributeConfigurationFile(vi, filePath);
#endif
}

ViStatus NiFgenLibrary::ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ExportSignal.");
  }
#if defined(_MSC_VER)
  return niFgen_ExportSignal(vi, signal, signalIdentifier, outputTerminal);
#else
  return function_pointers_.ExportSignal(vi, signal, signalIdentifier, outputTerminal);
#endif
}

ViStatus NiFgenLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niFgen_GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niFgen_GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* attributeValue)
{
  if (!function_pointers_.GetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niFgen_GetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niFgen_GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niFgen_GetAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.GetAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 arraySize, ViChar attributeValue[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niFgen_GetAttributeViString(vi, channelName, attributeId, arraySize, attributeValue);
#else
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, arraySize, attributeValue);
#endif
}

ViStatus NiFgenLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar channelString[])
{
  if (!function_pointers_.GetChannelName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetChannelName.");
  }
#if defined(_MSC_VER)
  return niFgen_GetChannelName(vi, index, bufferSize, channelString);
#else
  return function_pointers_.GetChannelName(vi, index, bufferSize, channelString);
#endif
}

ViStatus NiFgenLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetError.");
  }
#if defined(_MSC_VER)
  return niFgen_GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
#else
  return function_pointers_.GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
#endif
}

ViStatus NiFgenLibrary::GetExtCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetExtCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetExtCalLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return niFgen_GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
#else
  return function_pointers_.GetExtCalLastDateAndTime(vi, year, month, day, hour, minute);
#endif
}

ViStatus NiFgenLibrary::GetExtCalLastTemp(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.GetExtCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetExtCalLastTemp.");
  }
#if defined(_MSC_VER)
  return niFgen_GetExtCalLastTemp(vi, temperature);
#else
  return function_pointers_.GetExtCalLastTemp(vi, temperature);
#endif
}

ViStatus NiFgenLibrary::GetExtCalRecommendedInterval(ViSession vi, ViInt32* months)
{
  if (!function_pointers_.GetExtCalRecommendedInterval) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetExtCalRecommendedInterval.");
  }
#if defined(_MSC_VER)
  return niFgen_GetExtCalRecommendedInterval(vi, months);
#else
  return function_pointers_.GetExtCalRecommendedInterval(vi, months);
#endif
}

ViStatus NiFgenLibrary::GetFIRFilterCoefficients(ViSession vi, ViConstString channelName, ViInt32 arraySize, ViReal64 coefficientsArray[], ViInt32* numberOfCoefficientsRead)
{
  if (!function_pointers_.GetFIRFilterCoefficients) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetFIRFilterCoefficients.");
  }
#if defined(_MSC_VER)
  return niFgen_GetFIRFilterCoefficients(vi, channelName, arraySize, coefficientsArray, numberOfCoefficientsRead);
#else
  return function_pointers_.GetFIRFilterCoefficients(vi, channelName, arraySize, coefficientsArray, numberOfCoefficientsRead);
#endif
}

ViStatus NiFgenLibrary::GetHardwareState(ViSession vi, ViInt32* state)
{
  if (!function_pointers_.GetHardwareState) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetHardwareState.");
  }
#if defined(_MSC_VER)
  return niFgen_GetHardwareState(vi, state);
#else
  return function_pointers_.GetHardwareState(vi, state);
#endif
}

ViStatus NiFgenLibrary::GetNextCoercionRecord(ViSession vi, ViInt32 bufferSize, ViChar coercionRecord[])
{
  if (!function_pointers_.GetNextCoercionRecord) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetNextCoercionRecord.");
  }
#if defined(_MSC_VER)
  return niFgen_GetNextCoercionRecord(vi, bufferSize, coercionRecord);
#else
  return function_pointers_.GetNextCoercionRecord(vi, bufferSize, coercionRecord);
#endif
}

ViStatus NiFgenLibrary::GetNextInterchangeWarning(ViSession vi, ViInt32 bufferSize, ViChar interchangeWarning[])
{
  if (!function_pointers_.GetNextInterchangeWarning) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetNextInterchangeWarning.");
  }
#if defined(_MSC_VER)
  return niFgen_GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
#else
  return function_pointers_.GetNextInterchangeWarning(vi, bufferSize, interchangeWarning);
#endif
}

ViStatus NiFgenLibrary::GetSelfCalLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute)
{
  if (!function_pointers_.GetSelfCalLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetSelfCalLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return niFgen_GetSelfCalLastDateAndTime(vi, year, month, day, hour, minute);
#else
  return function_pointers_.GetSelfCalLastDateAndTime(vi, year, month, day, hour, minute);
#endif
}

ViStatus NiFgenLibrary::GetSelfCalLastTemp(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.GetSelfCalLastTemp) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetSelfCalLastTemp.");
  }
#if defined(_MSC_VER)
  return niFgen_GetSelfCalLastTemp(vi, temperature);
#else
  return function_pointers_.GetSelfCalLastTemp(vi, temperature);
#endif
}

ViStatus NiFgenLibrary::GetSelfCalSupported(ViSession vi, ViBoolean* selfCalSupported)
{
  if (!function_pointers_.GetSelfCalSupported) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetSelfCalSupported.");
  }
#if defined(_MSC_VER)
  return niFgen_GetSelfCalSupported(vi, selfCalSupported);
#else
  return function_pointers_.GetSelfCalSupported(vi, selfCalSupported);
#endif
}

ViStatus NiFgenLibrary::GetStreamEndpointHandle(ViSession vi, ViConstString streamEndpoint, ViUInt32* readerHandle)
{
  if (!function_pointers_.GetStreamEndpointHandle) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_GetStreamEndpointHandle.");
  }
#if defined(_MSC_VER)
  return niFgen_GetStreamEndpointHandle(vi, streamEndpoint, readerHandle);
#else
  return function_pointers_.GetStreamEndpointHandle(vi, streamEndpoint, readerHandle);
#endif
}

ViStatus NiFgenLibrary::ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 sizeInBytes, ViInt8 configuration[])
{
  if (!function_pointers_.ImportAttributeConfigurationBuffer) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ImportAttributeConfigurationBuffer.");
  }
#if defined(_MSC_VER)
  return niFgen_ImportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
#else
  return function_pointers_.ImportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
#endif
}

ViStatus NiFgenLibrary::ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath)
{
  if (!function_pointers_.ImportAttributeConfigurationFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ImportAttributeConfigurationFile.");
  }
#if defined(_MSC_VER)
  return niFgen_ImportAttributeConfigurationFile(vi, filePath);
#else
  return function_pointers_.ImportAttributeConfigurationFile(vi, filePath);
#endif
}

ViStatus NiFgenLibrary::Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi)
{
  if (!function_pointers_.Init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_init.");
  }
#if defined(_MSC_VER)
  return niFgen_init(resourceName, idQuery, resetDevice, vi);
#else
  return function_pointers_.Init(resourceName, idQuery, resetDevice, vi);
#endif
}

ViStatus NiFgenLibrary::InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViString optionString, ViSession* vi)
{
  if (!function_pointers_.InitWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_InitWithOptions.");
  }
#if defined(_MSC_VER)
  return niFgen_InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
#else
  return function_pointers_.InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
#endif
}

ViStatus NiFgenLibrary::InitializeWithChannels(ViRsrc resourceName, ViString channelName, ViBoolean resetDevice, ViString optionString, ViSession* vi)
{
  if (!function_pointers_.InitializeWithChannels) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_InitializeWithChannels.");
  }
#if defined(_MSC_VER)
  return niFgen_InitializeWithChannels(resourceName, channelName, resetDevice, optionString, vi);
#else
  return function_pointers_.InitializeWithChannels(resourceName, channelName, resetDevice, optionString, vi);
#endif
}

ViStatus NiFgenLibrary::InitiateGeneration(ViSession vi)
{
  if (!function_pointers_.InitiateGeneration) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_InitiateGeneration.");
  }
#if defined(_MSC_VER)
  return niFgen_InitiateGeneration(vi);
#else
  return function_pointers_.InitiateGeneration(vi);
#endif
}

ViStatus NiFgenLibrary::InvalidateAllAttributes(ViSession vi)
{
  if (!function_pointers_.InvalidateAllAttributes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_InvalidateAllAttributes.");
  }
#if defined(_MSC_VER)
  return niFgen_InvalidateAllAttributes(vi);
#else
  return function_pointers_.InvalidateAllAttributes(vi);
#endif
}

ViStatus NiFgenLibrary::IsDone(ViSession vi, ViBoolean* done)
{
  if (!function_pointers_.IsDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_IsDone.");
  }
#if defined(_MSC_VER)
  return niFgen_IsDone(vi, done);
#else
  return function_pointers_.IsDone(vi, done);
#endif
}

ViStatus NiFgenLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_LockSession.");
  }
  return function_pointers_.LockSession(vi, callerHasLock);
}

ViStatus NiFgenLibrary::ManualEnableP2PStream(ViSession vi, ViConstString endpointName)
{
  if (!function_pointers_.ManualEnableP2PStream) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ManualEnableP2PStream.");
  }
#if defined(_MSC_VER)
  return niFgen_ManualEnableP2PStream(vi, endpointName);
#else
  return function_pointers_.ManualEnableP2PStream(vi, endpointName);
#endif
}

ViStatus NiFgenLibrary::QueryArbSeqCapabilities(ViSession vi, ViInt32* maximumNumberOfSequences, ViInt32* minimumSequenceLength, ViInt32* maximumSequenceLength, ViInt32* maximumLoopCount)
{
  if (!function_pointers_.QueryArbSeqCapabilities) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_QueryArbSeqCapabilities.");
  }
#if defined(_MSC_VER)
  return niFgen_QueryArbSeqCapabilities(vi, maximumNumberOfSequences, minimumSequenceLength, maximumSequenceLength, maximumLoopCount);
#else
  return function_pointers_.QueryArbSeqCapabilities(vi, maximumNumberOfSequences, minimumSequenceLength, maximumSequenceLength, maximumLoopCount);
#endif
}

ViStatus NiFgenLibrary::QueryArbWfmCapabilities(ViSession vi, ViInt32* maximumNumberOfWaveforms, ViInt32* waveformQuantum, ViInt32* minimumWaveformSize, ViInt32* maximumWaveformSize)
{
  if (!function_pointers_.QueryArbWfmCapabilities) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_QueryArbWfmCapabilities.");
  }
#if defined(_MSC_VER)
  return niFgen_QueryArbWfmCapabilities(vi, maximumNumberOfWaveforms, waveformQuantum, minimumWaveformSize, maximumWaveformSize);
#else
  return function_pointers_.QueryArbWfmCapabilities(vi, maximumNumberOfWaveforms, waveformQuantum, minimumWaveformSize, maximumWaveformSize);
#endif
}

ViStatus NiFgenLibrary::QueryFreqListCapabilities(ViSession vi, ViInt32* maximumNumberOfFreqLists, ViInt32* minimumFrequencyListLength, ViInt32* maximumFrequencyListLength, ViReal64* minimumFrequencyListDuration, ViReal64* maximumFrequencyListDuration, ViReal64* frequencyListDurationQuantum)
{
  if (!function_pointers_.QueryFreqListCapabilities) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_QueryFreqListCapabilities.");
  }
#if defined(_MSC_VER)
  return niFgen_QueryFreqListCapabilities(vi, maximumNumberOfFreqLists, minimumFrequencyListLength, maximumFrequencyListLength, minimumFrequencyListDuration, maximumFrequencyListDuration, frequencyListDurationQuantum);
#else
  return function_pointers_.QueryFreqListCapabilities(vi, maximumNumberOfFreqLists, minimumFrequencyListLength, maximumFrequencyListLength, minimumFrequencyListDuration, maximumFrequencyListDuration, frequencyListDurationQuantum);
#endif
}

ViStatus NiFgenLibrary::ReadCurrentTemperature(ViSession vi, ViReal64* temperature)
{
  if (!function_pointers_.ReadCurrentTemperature) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ReadCurrentTemperature.");
  }
#if defined(_MSC_VER)
  return niFgen_ReadCurrentTemperature(vi, temperature);
#else
  return function_pointers_.ReadCurrentTemperature(vi, temperature);
#endif
}

ViStatus NiFgenLibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_reset.");
  }
#if defined(_MSC_VER)
  return niFgen_reset(vi);
#else
  return function_pointers_.Reset(vi);
#endif
}

ViStatus NiFgenLibrary::ResetAttribute(ViSession vi, ViConstString channelName, ViAttr attributeId)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ResetAttribute.");
  }
#if defined(_MSC_VER)
  return niFgen_ResetAttribute(vi, channelName, attributeId);
#else
  return function_pointers_.ResetAttribute(vi, channelName, attributeId);
#endif
}

ViStatus NiFgenLibrary::ResetDevice(ViSession vi)
{
  if (!function_pointers_.ResetDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ResetDevice.");
  }
#if defined(_MSC_VER)
  return niFgen_ResetDevice(vi);
#else
  return function_pointers_.ResetDevice(vi);
#endif
}

ViStatus NiFgenLibrary::ResetInterchangeCheck(ViSession vi)
{
  if (!function_pointers_.ResetInterchangeCheck) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ResetInterchangeCheck.");
  }
#if defined(_MSC_VER)
  return niFgen_ResetInterchangeCheck(vi);
#else
  return function_pointers_.ResetInterchangeCheck(vi);
#endif
}

ViStatus NiFgenLibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_ResetWithDefaults.");
  }
#if defined(_MSC_VER)
  return niFgen_ResetWithDefaults(vi);
#else
  return function_pointers_.ResetWithDefaults(vi);
#endif
}

ViStatus NiFgenLibrary::RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_revision_query.");
  }
#if defined(_MSC_VER)
  return niFgen_revision_query(vi, instrumentDriverRevision, firmwareRevision);
#else
  return function_pointers_.RevisionQuery(vi, instrumentDriverRevision, firmwareRevision);
#endif
}

ViStatus NiFgenLibrary::RouteSignalOut(ViSession vi, ViConstString channelName, ViInt32 routeSignalFrom, ViInt32 routeSignalTo)
{
  if (!function_pointers_.RouteSignalOut) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_RouteSignalOut.");
  }
#if defined(_MSC_VER)
  return niFgen_RouteSignalOut(vi, channelName, routeSignalFrom, routeSignalTo);
#else
  return function_pointers_.RouteSignalOut(vi, channelName, routeSignalFrom, routeSignalTo);
#endif
}

ViStatus NiFgenLibrary::SelfCal(ViSession vi)
{
  if (!function_pointers_.SelfCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SelfCal.");
  }
#if defined(_MSC_VER)
  return niFgen_SelfCal(vi);
#else
  return function_pointers_.SelfCal(vi);
#endif
}

ViStatus NiFgenLibrary::SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_self_test.");
  }
#if defined(_MSC_VER)
  return niFgen_self_test(vi, selfTestResult, selfTestMessage);
#else
  return function_pointers_.SelfTest(vi, selfTestResult, selfTestMessage);
#endif
}

ViStatus NiFgenLibrary::SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger, ViString triggerId)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SendSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return niFgen_SendSoftwareEdgeTrigger(vi, trigger, triggerId);
#else
  return function_pointers_.SendSoftwareEdgeTrigger(vi, trigger, triggerId);
#endif
}

ViStatus NiFgenLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niFgen_SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niFgen_SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue)
{
  if (!function_pointers_.SetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niFgen_SetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViInt64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niFgen_SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niFgen_SetAttributeViSession(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViSession(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niFgen_SetAttributeViString(vi, channelName, attributeId, attributeValue);
#else
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, attributeValue);
#endif
}

ViStatus NiFgenLibrary::SetNamedWaveformNextWritePosition(ViSession vi, ViConstString channelName, ViConstString waveformName, ViInt32 relativeTo, ViInt32 offset)
{
  if (!function_pointers_.SetNamedWaveformNextWritePosition) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetNamedWaveformNextWritePosition.");
  }
#if defined(_MSC_VER)
  return niFgen_SetNamedWaveformNextWritePosition(vi, channelName, waveformName, relativeTo, offset);
#else
  return function_pointers_.SetNamedWaveformNextWritePosition(vi, channelName, waveformName, relativeTo, offset);
#endif
}

ViStatus NiFgenLibrary::SetWaveformNextWritePosition(ViSession vi, ViConstString channelName, ViInt32 waveformHandle, ViInt32 relativeTo, ViInt32 offset)
{
  if (!function_pointers_.SetWaveformNextWritePosition) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_SetWaveformNextWritePosition.");
  }
#if defined(_MSC_VER)
  return niFgen_SetWaveformNextWritePosition(vi, channelName, waveformHandle, relativeTo, offset);
#else
  return function_pointers_.SetWaveformNextWritePosition(vi, channelName, waveformHandle, relativeTo, offset);
#endif
}

ViStatus NiFgenLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_UnlockSession.");
  }
  return function_pointers_.UnlockSession(vi, callerHasLock);
}

ViStatus NiFgenLibrary::WaitUntilDone(ViSession vi, ViInt32 maxTime)
{
  if (!function_pointers_.WaitUntilDone) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WaitUntilDone.");
  }
#if defined(_MSC_VER)
  return niFgen_WaitUntilDone(vi, maxTime);
#else
  return function_pointers_.WaitUntilDone(vi, maxTime);
#endif
}

ViStatus NiFgenLibrary::WriteBinary16Waveform(ViSession vi, ViConstString channelName, ViInt32 waveformHandle, ViInt32 size, ViInt16 data[])
{
  if (!function_pointers_.WriteBinary16Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteBinary16Waveform.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteBinary16Waveform(vi, channelName, waveformHandle, size, data);
#else
  return function_pointers_.WriteBinary16Waveform(vi, channelName, waveformHandle, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteComplexBinary16Waveform(ViSession vi, ViConstString channelName, ViInt32 waveformHandle, ViInt32 size, NIComplexI16_struct data[])
{
  if (!function_pointers_.WriteComplexBinary16Waveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteComplexBinary16Waveform.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteComplexBinary16Waveform(vi, channelName, waveformHandle, size, data);
#else
  return function_pointers_.WriteComplexBinary16Waveform(vi, channelName, waveformHandle, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteNamedWaveformComplexF64(ViSession vi, ViConstString channelName, ViConstString waveformName, ViInt32 size, NIComplexNumber_struct data[])
{
  if (!function_pointers_.WriteNamedWaveformComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteNamedWaveformComplexF64.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteNamedWaveformComplexF64(vi, channelName, waveformName, size, data);
#else
  return function_pointers_.WriteNamedWaveformComplexF64(vi, channelName, waveformName, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteNamedWaveformComplexI16(ViSession vi, ViConstString channelName, ViConstString waveformName, ViInt32 size, NIComplexI16_struct data[])
{
  if (!function_pointers_.WriteNamedWaveformComplexI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteNamedWaveformComplexI16.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteNamedWaveformComplexI16(vi, channelName, waveformName, size, data);
#else
  return function_pointers_.WriteNamedWaveformComplexI16(vi, channelName, waveformName, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteNamedWaveformF64(ViSession vi, ViConstString channelName, ViConstString waveformName, ViInt32 size, ViReal64 data[])
{
  if (!function_pointers_.WriteNamedWaveformF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteNamedWaveformF64.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteNamedWaveformF64(vi, channelName, waveformName, size, data);
#else
  return function_pointers_.WriteNamedWaveformF64(vi, channelName, waveformName, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteNamedWaveformI16(ViSession vi, ViConstString channelName, ViConstString waveformName, ViInt32 size, ViInt16 data[])
{
  if (!function_pointers_.WriteNamedWaveformI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteNamedWaveformI16.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteNamedWaveformI16(vi, channelName, waveformName, size, data);
#else
  return function_pointers_.WriteNamedWaveformI16(vi, channelName, waveformName, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteP2PEndpointI16(ViSession vi, ViConstString endpointName, ViInt32 numberOfSamples, ViInt16 endpointData[])
{
  if (!function_pointers_.WriteP2PEndpointI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteP2PEndpointI16.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteP2PEndpointI16(vi, endpointName, numberOfSamples, endpointData);
#else
  return function_pointers_.WriteP2PEndpointI16(vi, endpointName, numberOfSamples, endpointData);
#endif
}

ViStatus NiFgenLibrary::WriteScript(ViSession vi, ViConstString channelName, ViConstString script)
{
  if (!function_pointers_.WriteScript) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteScript.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteScript(vi, channelName, script);
#else
  return function_pointers_.WriteScript(vi, channelName, script);
#endif
}

ViStatus NiFgenLibrary::WriteWaveform(ViSession vi, ViConstString channelName, ViInt32 waveformHandle, ViInt32 size, ViReal64 data[])
{
  if (!function_pointers_.WriteWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteWaveform.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteWaveform(vi, channelName, waveformHandle, size, data);
#else
  return function_pointers_.WriteWaveform(vi, channelName, waveformHandle, size, data);
#endif
}

ViStatus NiFgenLibrary::WriteWaveformComplexF64(ViSession vi, ViConstString channelName, ViInt32 numberOfSamples, NIComplexNumber_struct data[], ViInt32 waveformHandle)
{
  if (!function_pointers_.WriteWaveformComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niFgen_WriteWaveformComplexF64.");
  }
#if defined(_MSC_VER)
  return niFgen_WriteWaveformComplexF64(vi, channelName, numberOfSamples, data, waveformHandle);
#else
  return function_pointers_.WriteWaveformComplexF64(vi, channelName, numberOfSamples, data, waveformHandle);
#endif
}

}  // namespace nifgen_grpc
