//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFSG Metadata
//---------------------------------------------------------------------
#include "nirfsg_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFSG_64.dll";
#else
static const char* kLibraryName = "libnirfsg.so";
#endif

namespace nirfsg_grpc {

NiRFSGLibrary::NiRFSGLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Abort = reinterpret_cast<AbortPtr>(shared_library_.get_function_pointer("niRFSG_Abort"));
  function_pointers_.AllocateArbWaveform = reinterpret_cast<AllocateArbWaveformPtr>(shared_library_.get_function_pointer("niRFSG_AllocateArbWaveform"));
  function_pointers_.CheckAttributeViBoolean = reinterpret_cast<CheckAttributeViBooleanPtr>(shared_library_.get_function_pointer("niRFSG_CheckAttributeViBoolean"));
  function_pointers_.CheckAttributeViInt32 = reinterpret_cast<CheckAttributeViInt32Ptr>(shared_library_.get_function_pointer("niRFSG_CheckAttributeViInt32"));
  function_pointers_.CheckAttributeViInt64 = reinterpret_cast<CheckAttributeViInt64Ptr>(shared_library_.get_function_pointer("niRFSG_CheckAttributeViInt64"));
  function_pointers_.CheckAttributeViReal64 = reinterpret_cast<CheckAttributeViReal64Ptr>(shared_library_.get_function_pointer("niRFSG_CheckAttributeViReal64"));
  function_pointers_.CheckAttributeViSession = reinterpret_cast<CheckAttributeViSessionPtr>(shared_library_.get_function_pointer("niRFSG_CheckAttributeViSession"));
  function_pointers_.CheckAttributeViString = reinterpret_cast<CheckAttributeViStringPtr>(shared_library_.get_function_pointer("niRFSG_CheckAttributeViString"));
  function_pointers_.CheckGenerationStatus = reinterpret_cast<CheckGenerationStatusPtr>(shared_library_.get_function_pointer("niRFSG_CheckGenerationStatus"));
  function_pointers_.CheckIfConfigurationListExists = reinterpret_cast<CheckIfConfigurationListExistsPtr>(shared_library_.get_function_pointer("niRFSG_CheckIfConfigurationListExists"));
  function_pointers_.CheckIfScriptExists = reinterpret_cast<CheckIfScriptExistsPtr>(shared_library_.get_function_pointer("niRFSG_CheckIfScriptExists"));
  function_pointers_.CheckIfWaveformExists = reinterpret_cast<CheckIfWaveformExistsPtr>(shared_library_.get_function_pointer("niRFSG_CheckIfWaveformExists"));
  function_pointers_.ClearAllArbWaveforms = reinterpret_cast<ClearAllArbWaveformsPtr>(shared_library_.get_function_pointer("niRFSG_ClearAllArbWaveforms"));
  function_pointers_.ClearArbWaveform = reinterpret_cast<ClearArbWaveformPtr>(shared_library_.get_function_pointer("niRFSG_ClearArbWaveform"));
  function_pointers_.ClearError = reinterpret_cast<ClearErrorPtr>(shared_library_.get_function_pointer("niRFSG_ClearError"));
  function_pointers_.ClearSelfCalibrateRange = reinterpret_cast<ClearSelfCalibrateRangePtr>(shared_library_.get_function_pointer("niRFSG_ClearSelfCalibrateRange"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("niRFSG_close"));
  function_pointers_.Commit = reinterpret_cast<CommitPtr>(shared_library_.get_function_pointer("niRFSG_Commit"));
  function_pointers_.ConfigureDeembeddingTableInterpolationLinear = reinterpret_cast<ConfigureDeembeddingTableInterpolationLinearPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDeembeddingTableInterpolationLinear"));
  function_pointers_.ConfigureDeembeddingTableInterpolationNearest = reinterpret_cast<ConfigureDeembeddingTableInterpolationNearestPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDeembeddingTableInterpolationNearest"));
  function_pointers_.ConfigureDeembeddingTableInterpolationSpline = reinterpret_cast<ConfigureDeembeddingTableInterpolationSplinePtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDeembeddingTableInterpolationSpline"));
  function_pointers_.ConfigureDigitalEdgeConfigurationListStepTrigger = reinterpret_cast<ConfigureDigitalEdgeConfigurationListStepTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger"));
  function_pointers_.ConfigureDigitalEdgeScriptTrigger = reinterpret_cast<ConfigureDigitalEdgeScriptTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDigitalEdgeScriptTrigger"));
  function_pointers_.ConfigureDigitalEdgeStartTrigger = reinterpret_cast<ConfigureDigitalEdgeStartTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDigitalEdgeStartTrigger"));
  function_pointers_.ConfigureDigitalLevelScriptTrigger = reinterpret_cast<ConfigureDigitalLevelScriptTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDigitalLevelScriptTrigger"));
  function_pointers_.ConfigureDigitalModulationUserDefinedWaveform = reinterpret_cast<ConfigureDigitalModulationUserDefinedWaveformPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureDigitalModulationUserDefinedWaveform"));
  function_pointers_.ConfigureGenerationMode = reinterpret_cast<ConfigureGenerationModePtr>(shared_library_.get_function_pointer("niRFSG_ConfigureGenerationMode"));
  function_pointers_.ConfigureOutputEnabled = reinterpret_cast<ConfigureOutputEnabledPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureOutputEnabled"));
  function_pointers_.ConfigureP2PEndpointFullnessStartTrigger = reinterpret_cast<ConfigureP2PEndpointFullnessStartTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureP2PEndpointFullnessStartTrigger"));
  function_pointers_.ConfigurePXIChassisClk10 = reinterpret_cast<ConfigurePXIChassisClk10Ptr>(shared_library_.get_function_pointer("niRFSG_ConfigurePXIChassisClk10"));
  function_pointers_.ConfigurePowerLevelType = reinterpret_cast<ConfigurePowerLevelTypePtr>(shared_library_.get_function_pointer("niRFSG_ConfigurePowerLevelType"));
  function_pointers_.ConfigureRF = reinterpret_cast<ConfigureRFPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureRF"));
  function_pointers_.ConfigureRefClock = reinterpret_cast<ConfigureRefClockPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureRefClock"));
  function_pointers_.ConfigureSignalBandwidth = reinterpret_cast<ConfigureSignalBandwidthPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureSignalBandwidth"));
  function_pointers_.ConfigureSoftwareScriptTrigger = reinterpret_cast<ConfigureSoftwareScriptTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureSoftwareScriptTrigger"));
  function_pointers_.ConfigureSoftwareStartTrigger = reinterpret_cast<ConfigureSoftwareStartTriggerPtr>(shared_library_.get_function_pointer("niRFSG_ConfigureSoftwareStartTrigger"));
  function_pointers_.ConfigureUpconverterPLLSettlingTime = reinterpret_cast<ConfigureUpconverterPLLSettlingTimePtr>(shared_library_.get_function_pointer("niRFSG_ConfigureUpconverterPLLSettlingTime"));
  function_pointers_.CreateConfigurationList = reinterpret_cast<CreateConfigurationListPtr>(shared_library_.get_function_pointer("niRFSG_CreateConfigurationList"));
  function_pointers_.CreateConfigurationListStep = reinterpret_cast<CreateConfigurationListStepPtr>(shared_library_.get_function_pointer("niRFSG_CreateConfigurationListStep"));
  function_pointers_.CreateDeembeddingSparameterTableArray = reinterpret_cast<CreateDeembeddingSparameterTableArrayPtr>(shared_library_.get_function_pointer("niRFSG_CreateDeembeddingSparameterTableArray"));
  function_pointers_.CreateDeembeddingSparameterTableS2PFile = reinterpret_cast<CreateDeembeddingSparameterTableS2PFilePtr>(shared_library_.get_function_pointer("niRFSG_CreateDeembeddingSparameterTableS2PFile"));
  function_pointers_.DeleteAllDeembeddingTables = reinterpret_cast<DeleteAllDeembeddingTablesPtr>(shared_library_.get_function_pointer("niRFSG_DeleteAllDeembeddingTables"));
  function_pointers_.DeleteConfigurationList = reinterpret_cast<DeleteConfigurationListPtr>(shared_library_.get_function_pointer("niRFSG_DeleteConfigurationList"));
  function_pointers_.DeleteDeembeddingTable = reinterpret_cast<DeleteDeembeddingTablePtr>(shared_library_.get_function_pointer("niRFSG_DeleteDeembeddingTable"));
  function_pointers_.DeleteScript = reinterpret_cast<DeleteScriptPtr>(shared_library_.get_function_pointer("niRFSG_DeleteScript"));
  function_pointers_.Disable = reinterpret_cast<DisablePtr>(shared_library_.get_function_pointer("niRFSG_Disable"));
  function_pointers_.DisableAllModulation = reinterpret_cast<DisableAllModulationPtr>(shared_library_.get_function_pointer("niRFSG_DisableAllModulation"));
  function_pointers_.DisableConfigurationListStepTrigger = reinterpret_cast<DisableConfigurationListStepTriggerPtr>(shared_library_.get_function_pointer("niRFSG_DisableConfigurationListStepTrigger"));
  function_pointers_.DisableScriptTrigger = reinterpret_cast<DisableScriptTriggerPtr>(shared_library_.get_function_pointer("niRFSG_DisableScriptTrigger"));
  function_pointers_.DisableStartTrigger = reinterpret_cast<DisableStartTriggerPtr>(shared_library_.get_function_pointer("niRFSG_DisableStartTrigger"));
  function_pointers_.ErrorMessage = reinterpret_cast<ErrorMessagePtr>(shared_library_.get_function_pointer("niRFSG_error_message"));
  function_pointers_.ErrorQuery = reinterpret_cast<ErrorQueryPtr>(shared_library_.get_function_pointer("niRFSG_error_query"));
  function_pointers_.ExportSignal = reinterpret_cast<ExportSignalPtr>(shared_library_.get_function_pointer("niRFSG_ExportSignal"));
  function_pointers_.GetAttributeViBoolean = reinterpret_cast<GetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niRFSG_GetAttributeViBoolean"));
  function_pointers_.GetAttributeViInt32 = reinterpret_cast<GetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niRFSG_GetAttributeViInt32"));
  function_pointers_.GetAttributeViInt64 = reinterpret_cast<GetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niRFSG_GetAttributeViInt64"));
  function_pointers_.GetAttributeViReal64 = reinterpret_cast<GetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niRFSG_GetAttributeViReal64"));
  function_pointers_.GetAttributeViSession = reinterpret_cast<GetAttributeViSessionPtr>(shared_library_.get_function_pointer("niRFSG_GetAttributeViSession"));
  function_pointers_.GetAttributeViString = reinterpret_cast<GetAttributeViStringPtr>(shared_library_.get_function_pointer("niRFSG_GetAttributeViString"));
  function_pointers_.GetChannelName = reinterpret_cast<GetChannelNamePtr>(shared_library_.get_function_pointer("niRFSG_GetChannelName"));
  function_pointers_.GetDeembeddingSparameters = reinterpret_cast<GetDeembeddingSparametersPtr>(shared_library_.get_function_pointer("niRFSG_GetDeembeddingSparameters"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("niRFSG_GetError"));
  function_pointers_.GetExternalCalibrationLastDateAndTime = reinterpret_cast<GetExternalCalibrationLastDateAndTimePtr>(shared_library_.get_function_pointer("niRFSG_GetExternalCalibrationLastDateAndTime"));
  function_pointers_.GetSelfCalibrationDateAndTime = reinterpret_cast<GetSelfCalibrationDateAndTimePtr>(shared_library_.get_function_pointer("niRFSG_GetSelfCalibrationDateAndTime"));
  function_pointers_.GetSelfCalibrationTemperature = reinterpret_cast<GetSelfCalibrationTemperaturePtr>(shared_library_.get_function_pointer("niRFSG_GetSelfCalibrationTemperature"));
  function_pointers_.GetTerminalName = reinterpret_cast<GetTerminalNamePtr>(shared_library_.get_function_pointer("niRFSG_GetTerminalName"));
  function_pointers_.GetUserData = reinterpret_cast<GetUserDataPtr>(shared_library_.get_function_pointer("niRFSG_GetUserData"));
  function_pointers_.GetWaveformBurstStartLocations = reinterpret_cast<GetWaveformBurstStartLocationsPtr>(shared_library_.get_function_pointer("niRFSG_GetWaveformBurstStartLocations"));
  function_pointers_.GetWaveformBurstStopLocations = reinterpret_cast<GetWaveformBurstStopLocationsPtr>(shared_library_.get_function_pointer("niRFSG_GetWaveformBurstStopLocations"));
  function_pointers_.GetWaveformMarkerEventLocations = reinterpret_cast<GetWaveformMarkerEventLocationsPtr>(shared_library_.get_function_pointer("niRFSG_GetWaveformMarkerEventLocations"));
  function_pointers_.Init = reinterpret_cast<InitPtr>(shared_library_.get_function_pointer("niRFSG_init"));
  function_pointers_.InitWithOptions = reinterpret_cast<InitWithOptionsPtr>(shared_library_.get_function_pointer("niRFSG_InitWithOptions"));
  function_pointers_.Initiate = reinterpret_cast<InitiatePtr>(shared_library_.get_function_pointer("niRFSG_Initiate"));
  function_pointers_.InvalidateAllAttributes = reinterpret_cast<InvalidateAllAttributesPtr>(shared_library_.get_function_pointer("niRFSG_InvalidateAllAttributes"));
  function_pointers_.LoadConfigurationsFromFile = reinterpret_cast<LoadConfigurationsFromFilePtr>(shared_library_.get_function_pointer("niRFSG_LoadConfigurationsFromFile"));
  function_pointers_.LockSession = reinterpret_cast<LockSessionPtr>(shared_library_.get_function_pointer("niRFSG_LockSession"));
  function_pointers_.PerformPowerSearch = reinterpret_cast<PerformPowerSearchPtr>(shared_library_.get_function_pointer("niRFSG_PerformPowerSearch"));
  function_pointers_.PerformThermalCorrection = reinterpret_cast<PerformThermalCorrectionPtr>(shared_library_.get_function_pointer("niRFSG_PerformThermalCorrection"));
  function_pointers_.QueryArbWaveformCapabilities = reinterpret_cast<QueryArbWaveformCapabilitiesPtr>(shared_library_.get_function_pointer("niRFSG_QueryArbWaveformCapabilities"));
  function_pointers_.ReadAndDownloadWaveformFromFileTDMS = reinterpret_cast<ReadAndDownloadWaveformFromFileTDMSPtr>(shared_library_.get_function_pointer("niRFSG_ReadAndDownloadWaveformFromFileTDMS"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("niRFSG_reset"));
  function_pointers_.ResetAttribute = reinterpret_cast<ResetAttributePtr>(shared_library_.get_function_pointer("niRFSG_ResetAttribute"));
  function_pointers_.ResetDevice = reinterpret_cast<ResetDevicePtr>(shared_library_.get_function_pointer("niRFSG_ResetDevice"));
  function_pointers_.ResetWithDefaults = reinterpret_cast<ResetWithDefaultsPtr>(shared_library_.get_function_pointer("niRFSG_ResetWithDefaults"));
  function_pointers_.ResetWithOptions = reinterpret_cast<ResetWithOptionsPtr>(shared_library_.get_function_pointer("niRFSG_ResetWithOptions"));
  function_pointers_.RevisionQuery = reinterpret_cast<RevisionQueryPtr>(shared_library_.get_function_pointer("niRFSG_revision_query"));
  function_pointers_.SaveConfigurationsToFile = reinterpret_cast<SaveConfigurationsToFilePtr>(shared_library_.get_function_pointer("niRFSG_SaveConfigurationsToFile"));
  function_pointers_.SelectArbWaveform = reinterpret_cast<SelectArbWaveformPtr>(shared_library_.get_function_pointer("niRFSG_SelectArbWaveform"));
  function_pointers_.SelfCal = reinterpret_cast<SelfCalPtr>(shared_library_.get_function_pointer("niRFSG_SelfCal"));
  function_pointers_.SelfCalibrateRange = reinterpret_cast<SelfCalibrateRangePtr>(shared_library_.get_function_pointer("niRFSG_SelfCalibrateRange"));
  function_pointers_.SelfTest = reinterpret_cast<SelfTestPtr>(shared_library_.get_function_pointer("niRFSG_self_test"));
  function_pointers_.SendSoftwareEdgeTrigger = reinterpret_cast<SendSoftwareEdgeTriggerPtr>(shared_library_.get_function_pointer("niRFSG_SendSoftwareEdgeTrigger"));
  function_pointers_.SetArbWaveformNextWritePosition = reinterpret_cast<SetArbWaveformNextWritePositionPtr>(shared_library_.get_function_pointer("niRFSG_SetArbWaveformNextWritePosition"));
  function_pointers_.SetAttributeViBoolean = reinterpret_cast<SetAttributeViBooleanPtr>(shared_library_.get_function_pointer("niRFSG_SetAttributeViBoolean"));
  function_pointers_.SetAttributeViInt32 = reinterpret_cast<SetAttributeViInt32Ptr>(shared_library_.get_function_pointer("niRFSG_SetAttributeViInt32"));
  function_pointers_.SetAttributeViInt64 = reinterpret_cast<SetAttributeViInt64Ptr>(shared_library_.get_function_pointer("niRFSG_SetAttributeViInt64"));
  function_pointers_.SetAttributeViReal64 = reinterpret_cast<SetAttributeViReal64Ptr>(shared_library_.get_function_pointer("niRFSG_SetAttributeViReal64"));
  function_pointers_.SetAttributeViSession = reinterpret_cast<SetAttributeViSessionPtr>(shared_library_.get_function_pointer("niRFSG_SetAttributeViSession"));
  function_pointers_.SetAttributeViString = reinterpret_cast<SetAttributeViStringPtr>(shared_library_.get_function_pointer("niRFSG_SetAttributeViString"));
  function_pointers_.SetUserData = reinterpret_cast<SetUserDataPtr>(shared_library_.get_function_pointer("niRFSG_SetUserData"));
  function_pointers_.SetWaveformBurstStartLocations = reinterpret_cast<SetWaveformBurstStartLocationsPtr>(shared_library_.get_function_pointer("niRFSG_SetWaveformBurstStartLocations"));
  function_pointers_.SetWaveformBurstStopLocations = reinterpret_cast<SetWaveformBurstStopLocationsPtr>(shared_library_.get_function_pointer("niRFSG_SetWaveformBurstStopLocations"));
  function_pointers_.SetWaveformMarkerEventLocations = reinterpret_cast<SetWaveformMarkerEventLocationsPtr>(shared_library_.get_function_pointer("niRFSG_SetWaveformMarkerEventLocations"));
  function_pointers_.UnlockSession = reinterpret_cast<UnlockSessionPtr>(shared_library_.get_function_pointer("niRFSG_UnlockSession"));
  function_pointers_.WaitUntilSettled = reinterpret_cast<WaitUntilSettledPtr>(shared_library_.get_function_pointer("niRFSG_WaitUntilSettled"));
  function_pointers_.WriteArbWaveform = reinterpret_cast<WriteArbWaveformPtr>(shared_library_.get_function_pointer("niRFSG_WriteArbWaveform"));
  function_pointers_.WriteArbWaveformComplexF32 = reinterpret_cast<WriteArbWaveformComplexF32Ptr>(shared_library_.get_function_pointer("niRFSG_WriteArbWaveformComplexF32"));
  function_pointers_.WriteArbWaveformComplexF64 = reinterpret_cast<WriteArbWaveformComplexF64Ptr>(shared_library_.get_function_pointer("niRFSG_WriteArbWaveformComplexF64"));
  function_pointers_.WriteArbWaveformComplexI16 = reinterpret_cast<WriteArbWaveformComplexI16Ptr>(shared_library_.get_function_pointer("niRFSG_WriteArbWaveformComplexI16"));
  function_pointers_.WriteArbWaveformF32 = reinterpret_cast<WriteArbWaveformF32Ptr>(shared_library_.get_function_pointer("niRFSG_WriteArbWaveformF32"));
  function_pointers_.WriteScript = reinterpret_cast<WriteScriptPtr>(shared_library_.get_function_pointer("niRFSG_WriteScript"));
}

NiRFSGLibrary::~NiRFSGLibrary()
{
}

::grpc::Status NiRFSGLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiRFSGLibrary::Abort(ViSession vi)
{
  if (!function_pointers_.Abort) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_Abort.");
  }
#if defined(_MSC_VER)
  return niRFSG_Abort(vi);
#else
  return function_pointers_.Abort(vi);
#endif
}

ViStatus NiRFSGLibrary::AllocateArbWaveform(ViSession vi, ViConstString waveformName, ViInt32 sizeInSamples)
{
  if (!function_pointers_.AllocateArbWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_AllocateArbWaveform.");
  }
#if defined(_MSC_VER)
  return niRFSG_AllocateArbWaveform(vi, waveformName, sizeInSamples);
#else
  return function_pointers_.AllocateArbWaveform(vi, waveformName, sizeInSamples);
#endif
}

ViStatus NiRFSGLibrary::CheckAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value)
{
  if (!function_pointers_.CheckAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckAttributeViBoolean(vi, channelName, attributeId, value);
#else
  return function_pointers_.CheckAttributeViBoolean(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::CheckAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value)
{
  if (!function_pointers_.CheckAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckAttributeViInt32(vi, channelName, attributeId, value);
#else
  return function_pointers_.CheckAttributeViInt32(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::CheckAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value)
{
  if (!function_pointers_.CheckAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckAttributeViInt64(vi, channelName, attributeId, value);
#else
  return function_pointers_.CheckAttributeViInt64(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::CheckAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value)
{
  if (!function_pointers_.CheckAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckAttributeViReal64(vi, channelName, attributeId, value);
#else
  return function_pointers_.CheckAttributeViReal64(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::CheckAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value)
{
  if (!function_pointers_.CheckAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckAttributeViSession(vi, channelName, attributeId, value);
#else
  return function_pointers_.CheckAttributeViSession(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::CheckAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value)
{
  if (!function_pointers_.CheckAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckAttributeViString.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckAttributeViString(vi, channelName, attributeId, value);
#else
  return function_pointers_.CheckAttributeViString(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::CheckGenerationStatus(ViSession vi, ViBoolean* isDone)
{
  if (!function_pointers_.CheckGenerationStatus) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckGenerationStatus.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckGenerationStatus(vi, isDone);
#else
  return function_pointers_.CheckGenerationStatus(vi, isDone);
#endif
}

ViStatus NiRFSGLibrary::CheckIfConfigurationListExists(ViSession vi, ViConstString listName, ViBoolean* listExists)
{
  if (!function_pointers_.CheckIfConfigurationListExists) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckIfConfigurationListExists.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckIfConfigurationListExists(vi, listName, listExists);
#else
  return function_pointers_.CheckIfConfigurationListExists(vi, listName, listExists);
#endif
}

ViStatus NiRFSGLibrary::CheckIfScriptExists(ViSession vi, ViConstString scriptName, ViBoolean* scriptExists)
{
  if (!function_pointers_.CheckIfScriptExists) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckIfScriptExists.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckIfScriptExists(vi, scriptName, scriptExists);
#else
  return function_pointers_.CheckIfScriptExists(vi, scriptName, scriptExists);
#endif
}

ViStatus NiRFSGLibrary::CheckIfWaveformExists(ViSession vi, ViConstString waveformName, ViBoolean* waveformExists)
{
  if (!function_pointers_.CheckIfWaveformExists) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CheckIfWaveformExists.");
  }
#if defined(_MSC_VER)
  return niRFSG_CheckIfWaveformExists(vi, waveformName, waveformExists);
#else
  return function_pointers_.CheckIfWaveformExists(vi, waveformName, waveformExists);
#endif
}

ViStatus NiRFSGLibrary::ClearAllArbWaveforms(ViSession vi)
{
  if (!function_pointers_.ClearAllArbWaveforms) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ClearAllArbWaveforms.");
  }
#if defined(_MSC_VER)
  return niRFSG_ClearAllArbWaveforms(vi);
#else
  return function_pointers_.ClearAllArbWaveforms(vi);
#endif
}

ViStatus NiRFSGLibrary::ClearArbWaveform(ViSession vi, ViConstString name)
{
  if (!function_pointers_.ClearArbWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ClearArbWaveform.");
  }
#if defined(_MSC_VER)
  return niRFSG_ClearArbWaveform(vi, name);
#else
  return function_pointers_.ClearArbWaveform(vi, name);
#endif
}

ViStatus NiRFSGLibrary::ClearError(ViSession vi)
{
  if (!function_pointers_.ClearError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ClearError.");
  }
#if defined(_MSC_VER)
  return niRFSG_ClearError(vi);
#else
  return function_pointers_.ClearError(vi);
#endif
}

ViStatus NiRFSGLibrary::ClearSelfCalibrateRange(ViSession vi)
{
  if (!function_pointers_.ClearSelfCalibrateRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ClearSelfCalibrateRange.");
  }
#if defined(_MSC_VER)
  return niRFSG_ClearSelfCalibrateRange(vi);
#else
  return function_pointers_.ClearSelfCalibrateRange(vi);
#endif
}

ViStatus NiRFSGLibrary::Close(ViSession vi)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_close.");
  }
#if defined(_MSC_VER)
  return niRFSG_close(vi);
#else
  return function_pointers_.Close(vi);
#endif
}

ViStatus NiRFSGLibrary::Commit(ViSession vi)
{
  if (!function_pointers_.Commit) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_Commit.");
  }
#if defined(_MSC_VER)
  return niRFSG_Commit(vi);
#else
  return function_pointers_.Commit(vi);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDeembeddingTableInterpolationLinear(ViSession vi, ViConstString port, ViConstString tableName, ViInt32 format)
{
  if (!function_pointers_.ConfigureDeembeddingTableInterpolationLinear) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDeembeddingTableInterpolationLinear.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDeembeddingTableInterpolationLinear(vi, port, tableName, format);
#else
  return function_pointers_.ConfigureDeembeddingTableInterpolationLinear(vi, port, tableName, format);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDeembeddingTableInterpolationNearest(ViSession vi, ViConstString port, ViConstString tableName)
{
  if (!function_pointers_.ConfigureDeembeddingTableInterpolationNearest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDeembeddingTableInterpolationNearest.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDeembeddingTableInterpolationNearest(vi, port, tableName);
#else
  return function_pointers_.ConfigureDeembeddingTableInterpolationNearest(vi, port, tableName);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDeembeddingTableInterpolationSpline(ViSession vi, ViConstString port, ViConstString tableName)
{
  if (!function_pointers_.ConfigureDeembeddingTableInterpolationSpline) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDeembeddingTableInterpolationSpline.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDeembeddingTableInterpolationSpline(vi, port, tableName);
#else
  return function_pointers_.ConfigureDeembeddingTableInterpolationSpline(vi, port, tableName);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDigitalEdgeConfigurationListStepTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeConfigurationListStepTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger(vi, source, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeConfigurationListStepTrigger(vi, source, edge);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDigitalEdgeScriptTrigger(ViSession vi, ViConstString triggerID, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDigitalEdgeScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDigitalEdgeScriptTrigger(vi, triggerID, source, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeScriptTrigger(vi, triggerID, source, edge);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  if (!function_pointers_.ConfigureDigitalEdgeStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDigitalEdgeStartTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDigitalEdgeStartTrigger(vi, source, edge);
#else
  return function_pointers_.ConfigureDigitalEdgeStartTrigger(vi, source, edge);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDigitalLevelScriptTrigger(ViSession vi, ViConstString triggerID, ViConstString source, ViInt32 level)
{
  if (!function_pointers_.ConfigureDigitalLevelScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDigitalLevelScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDigitalLevelScriptTrigger(vi, triggerID, source, level);
#else
  return function_pointers_.ConfigureDigitalLevelScriptTrigger(vi, triggerID, source, level);
#endif
}

ViStatus NiRFSGLibrary::ConfigureDigitalModulationUserDefinedWaveform(ViSession vi, ViInt32 numberOfSamples, ViInt8 userDefinedWaveform[])
{
  if (!function_pointers_.ConfigureDigitalModulationUserDefinedWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureDigitalModulationUserDefinedWaveform.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureDigitalModulationUserDefinedWaveform(vi, numberOfSamples, userDefinedWaveform);
#else
  return function_pointers_.ConfigureDigitalModulationUserDefinedWaveform(vi, numberOfSamples, userDefinedWaveform);
#endif
}

ViStatus NiRFSGLibrary::ConfigureGenerationMode(ViSession vi, ViInt32 generationMode)
{
  if (!function_pointers_.ConfigureGenerationMode) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureGenerationMode.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureGenerationMode(vi, generationMode);
#else
  return function_pointers_.ConfigureGenerationMode(vi, generationMode);
#endif
}

ViStatus NiRFSGLibrary::ConfigureOutputEnabled(ViSession vi, ViBoolean outputEnabled)
{
  if (!function_pointers_.ConfigureOutputEnabled) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureOutputEnabled.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureOutputEnabled(vi, outputEnabled);
#else
  return function_pointers_.ConfigureOutputEnabled(vi, outputEnabled);
#endif
}

ViStatus NiRFSGLibrary::ConfigureP2PEndpointFullnessStartTrigger(ViSession vi, ViInt64 p2pEndpointFullnessLevel)
{
  if (!function_pointers_.ConfigureP2PEndpointFullnessStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureP2PEndpointFullnessStartTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureP2PEndpointFullnessStartTrigger(vi, p2pEndpointFullnessLevel);
#else
  return function_pointers_.ConfigureP2PEndpointFullnessStartTrigger(vi, p2pEndpointFullnessLevel);
#endif
}

ViStatus NiRFSGLibrary::ConfigurePXIChassisClk10(ViSession vi, ViConstString pxiClk10Source)
{
  if (!function_pointers_.ConfigurePXIChassisClk10) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigurePXIChassisClk10.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigurePXIChassisClk10(vi, pxiClk10Source);
#else
  return function_pointers_.ConfigurePXIChassisClk10(vi, pxiClk10Source);
#endif
}

ViStatus NiRFSGLibrary::ConfigurePowerLevelType(ViSession vi, ViInt32 powerLevelType)
{
  if (!function_pointers_.ConfigurePowerLevelType) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigurePowerLevelType.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigurePowerLevelType(vi, powerLevelType);
#else
  return function_pointers_.ConfigurePowerLevelType(vi, powerLevelType);
#endif
}

ViStatus NiRFSGLibrary::ConfigureRF(ViSession vi, ViReal64 frequency, ViReal64 powerLevel)
{
  if (!function_pointers_.ConfigureRF) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureRF.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureRF(vi, frequency, powerLevel);
#else
  return function_pointers_.ConfigureRF(vi, frequency, powerLevel);
#endif
}

ViStatus NiRFSGLibrary::ConfigureRefClock(ViSession vi, ViConstString refClockSource, ViReal64 refClockRate)
{
  if (!function_pointers_.ConfigureRefClock) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureRefClock.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureRefClock(vi, refClockSource, refClockRate);
#else
  return function_pointers_.ConfigureRefClock(vi, refClockSource, refClockRate);
#endif
}

ViStatus NiRFSGLibrary::ConfigureSignalBandwidth(ViSession vi, ViReal64 signalBandwidth)
{
  if (!function_pointers_.ConfigureSignalBandwidth) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureSignalBandwidth.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureSignalBandwidth(vi, signalBandwidth);
#else
  return function_pointers_.ConfigureSignalBandwidth(vi, signalBandwidth);
#endif
}

ViStatus NiRFSGLibrary::ConfigureSoftwareScriptTrigger(ViSession vi, ViConstString triggerID)
{
  if (!function_pointers_.ConfigureSoftwareScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureSoftwareScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureSoftwareScriptTrigger(vi, triggerID);
#else
  return function_pointers_.ConfigureSoftwareScriptTrigger(vi, triggerID);
#endif
}

ViStatus NiRFSGLibrary::ConfigureSoftwareStartTrigger(ViSession vi)
{
  if (!function_pointers_.ConfigureSoftwareStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureSoftwareStartTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureSoftwareStartTrigger(vi);
#else
  return function_pointers_.ConfigureSoftwareStartTrigger(vi);
#endif
}

ViStatus NiRFSGLibrary::ConfigureUpconverterPLLSettlingTime(ViSession vi, ViReal64 pllSettlingTime, ViBoolean ensurePLLLocked, ViInt32 reservedForFutureUse)
{
  if (!function_pointers_.ConfigureUpconverterPLLSettlingTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ConfigureUpconverterPLLSettlingTime.");
  }
#if defined(_MSC_VER)
  return niRFSG_ConfigureUpconverterPLLSettlingTime(vi, pllSettlingTime, ensurePLLLocked, reservedForFutureUse);
#else
  return function_pointers_.ConfigureUpconverterPLLSettlingTime(vi, pllSettlingTime, ensurePLLLocked, reservedForFutureUse);
#endif
}

ViStatus NiRFSGLibrary::CreateConfigurationList(ViSession vi, ViConstString listName, ViInt32 numberOfAttributes, ViAttr configurationListAttributes[], ViBoolean setAsActiveList)
{
  if (!function_pointers_.CreateConfigurationList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CreateConfigurationList.");
  }
#if defined(_MSC_VER)
  return niRFSG_CreateConfigurationList(vi, listName, numberOfAttributes, configurationListAttributes, setAsActiveList);
#else
  return function_pointers_.CreateConfigurationList(vi, listName, numberOfAttributes, configurationListAttributes, setAsActiveList);
#endif
}

ViStatus NiRFSGLibrary::CreateConfigurationListStep(ViSession vi, ViBoolean setAsActiveStep)
{
  if (!function_pointers_.CreateConfigurationListStep) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CreateConfigurationListStep.");
  }
#if defined(_MSC_VER)
  return niRFSG_CreateConfigurationListStep(vi, setAsActiveStep);
#else
  return function_pointers_.CreateConfigurationListStep(vi, setAsActiveStep);
#endif
}

ViStatus NiRFSGLibrary::CreateDeembeddingSparameterTableArray(ViSession vi, ViConstString port, ViConstString tableName, ViReal64 frequencies[], ViInt32 frequenciesSize, NIComplexNumber_struct sparameterTable[], ViInt32 sparameterTableSize, ViInt32 numberOfPorts, ViInt32 sparameterOrientation)
{
  if (!function_pointers_.CreateDeembeddingSparameterTableArray) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CreateDeembeddingSparameterTableArray.");
  }
#if defined(_MSC_VER)
  return niRFSG_CreateDeembeddingSparameterTableArray(vi, port, tableName, frequencies, frequenciesSize, sparameterTable, sparameterTableSize, numberOfPorts, sparameterOrientation);
#else
  return function_pointers_.CreateDeembeddingSparameterTableArray(vi, port, tableName, frequencies, frequenciesSize, sparameterTable, sparameterTableSize, numberOfPorts, sparameterOrientation);
#endif
}

ViStatus NiRFSGLibrary::CreateDeembeddingSparameterTableS2PFile(ViSession vi, ViConstString port, ViConstString tableName, ViConstString s2pFilePath, ViInt32 sparameterOrientation)
{
  if (!function_pointers_.CreateDeembeddingSparameterTableS2PFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_CreateDeembeddingSparameterTableS2PFile.");
  }
#if defined(_MSC_VER)
  return niRFSG_CreateDeembeddingSparameterTableS2PFile(vi, port, tableName, s2pFilePath, sparameterOrientation);
#else
  return function_pointers_.CreateDeembeddingSparameterTableS2PFile(vi, port, tableName, s2pFilePath, sparameterOrientation);
#endif
}

ViStatus NiRFSGLibrary::DeleteAllDeembeddingTables(ViSession vi)
{
  if (!function_pointers_.DeleteAllDeembeddingTables) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DeleteAllDeembeddingTables.");
  }
#if defined(_MSC_VER)
  return niRFSG_DeleteAllDeembeddingTables(vi);
#else
  return function_pointers_.DeleteAllDeembeddingTables(vi);
#endif
}

ViStatus NiRFSGLibrary::DeleteConfigurationList(ViSession vi, ViConstString listName)
{
  if (!function_pointers_.DeleteConfigurationList) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DeleteConfigurationList.");
  }
#if defined(_MSC_VER)
  return niRFSG_DeleteConfigurationList(vi, listName);
#else
  return function_pointers_.DeleteConfigurationList(vi, listName);
#endif
}

ViStatus NiRFSGLibrary::DeleteDeembeddingTable(ViSession vi, ViConstString port, ViConstString tableName)
{
  if (!function_pointers_.DeleteDeembeddingTable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DeleteDeembeddingTable.");
  }
#if defined(_MSC_VER)
  return niRFSG_DeleteDeembeddingTable(vi, port, tableName);
#else
  return function_pointers_.DeleteDeembeddingTable(vi, port, tableName);
#endif
}

ViStatus NiRFSGLibrary::DeleteScript(ViSession vi, ViConstString scriptName)
{
  if (!function_pointers_.DeleteScript) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DeleteScript.");
  }
#if defined(_MSC_VER)
  return niRFSG_DeleteScript(vi, scriptName);
#else
  return function_pointers_.DeleteScript(vi, scriptName);
#endif
}

ViStatus NiRFSGLibrary::Disable(ViSession vi)
{
  if (!function_pointers_.Disable) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_Disable.");
  }
#if defined(_MSC_VER)
  return niRFSG_Disable(vi);
#else
  return function_pointers_.Disable(vi);
#endif
}

ViStatus NiRFSGLibrary::DisableAllModulation(ViSession vi)
{
  if (!function_pointers_.DisableAllModulation) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DisableAllModulation.");
  }
#if defined(_MSC_VER)
  return niRFSG_DisableAllModulation(vi);
#else
  return function_pointers_.DisableAllModulation(vi);
#endif
}

ViStatus NiRFSGLibrary::DisableConfigurationListStepTrigger(ViSession vi)
{
  if (!function_pointers_.DisableConfigurationListStepTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DisableConfigurationListStepTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_DisableConfigurationListStepTrigger(vi);
#else
  return function_pointers_.DisableConfigurationListStepTrigger(vi);
#endif
}

ViStatus NiRFSGLibrary::DisableScriptTrigger(ViSession vi, ViConstString triggerID)
{
  if (!function_pointers_.DisableScriptTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DisableScriptTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_DisableScriptTrigger(vi, triggerID);
#else
  return function_pointers_.DisableScriptTrigger(vi, triggerID);
#endif
}

ViStatus NiRFSGLibrary::DisableStartTrigger(ViSession vi)
{
  if (!function_pointers_.DisableStartTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_DisableStartTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_DisableStartTrigger(vi);
#else
  return function_pointers_.DisableStartTrigger(vi);
#endif
}

ViStatus NiRFSGLibrary::ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[1024])
{
  if (!function_pointers_.ErrorMessage) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_error_message.");
  }
#if defined(_MSC_VER)
  return niRFSG_error_message(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorMessage(vi, errorCode, errorMessage);
#endif
}

ViStatus NiRFSGLibrary::ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[1024])
{
  if (!function_pointers_.ErrorQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_error_query.");
  }
#if defined(_MSC_VER)
  return niRFSG_error_query(vi, errorCode, errorMessage);
#else
  return function_pointers_.ErrorQuery(vi, errorCode, errorMessage);
#endif
}

ViStatus NiRFSGLibrary::ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  if (!function_pointers_.ExportSignal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ExportSignal.");
  }
#if defined(_MSC_VER)
  return niRFSG_ExportSignal(vi, signal, signalIdentifier, outputTerminal);
#else
  return function_pointers_.ExportSignal(vi, signal, signalIdentifier, outputTerminal);
#endif
}

ViStatus NiRFSGLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* value)
{
  if (!function_pointers_.GetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetAttributeViBoolean(vi, channelName, attributeId, value);
#else
  return function_pointers_.GetAttributeViBoolean(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* value)
{
  if (!function_pointers_.GetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetAttributeViInt32(vi, channelName, attributeId, value);
#else
  return function_pointers_.GetAttributeViInt32(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* value)
{
  if (!function_pointers_.GetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetAttributeViInt64(vi, channelName, attributeId, value);
#else
  return function_pointers_.GetAttributeViInt64(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* value)
{
  if (!function_pointers_.GetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetAttributeViReal64(vi, channelName, attributeId, value);
#else
  return function_pointers_.GetAttributeViReal64(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* value)
{
  if (!function_pointers_.GetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetAttributeViSession(vi, channelName, attributeId, value);
#else
  return function_pointers_.GetAttributeViSession(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufSize, ViChar value[])
{
  if (!function_pointers_.GetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetAttributeViString(vi, channelName, attributeId, bufSize, value);
#else
  return function_pointers_.GetAttributeViString(vi, channelName, attributeId, bufSize, value);
#endif
}

ViStatus NiRFSGLibrary::GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar name[])
{
  if (!function_pointers_.GetChannelName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetChannelName.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetChannelName(vi, index, bufferSize, name);
#else
  return function_pointers_.GetChannelName(vi, index, bufferSize, name);
#endif
}

ViStatus NiRFSGLibrary::GetDeembeddingSparameters(ViSession vi, NIComplexNumber_struct sparameters[], ViInt32 sparametersArraySize, ViInt32* numberOfSparameters, ViInt32* numberOfPorts)
{
  if (!function_pointers_.GetDeembeddingSparameters) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetDeembeddingSparameters.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetDeembeddingSparameters(vi, sparameters, sparametersArraySize, numberOfSparameters, numberOfPorts);
#else
  return function_pointers_.GetDeembeddingSparameters(vi, sparameters, sparametersArraySize, numberOfSparameters, numberOfPorts);
#endif
}

ViStatus NiRFSGLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetError.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
#else
  return function_pointers_.GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
#endif
}

ViStatus NiRFSGLibrary::GetExternalCalibrationLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute, ViInt32* second)
{
  if (!function_pointers_.GetExternalCalibrationLastDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetExternalCalibrationLastDateAndTime.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetExternalCalibrationLastDateAndTime(vi, year, month, day, hour, minute, second);
#else
  return function_pointers_.GetExternalCalibrationLastDateAndTime(vi, year, month, day, hour, minute, second);
#endif
}

ViStatus NiRFSGLibrary::GetSelfCalibrationDateAndTime(ViSession vi, ViInt32 module, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute, ViInt32* second)
{
  if (!function_pointers_.GetSelfCalibrationDateAndTime) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetSelfCalibrationDateAndTime.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetSelfCalibrationDateAndTime(vi, module, year, month, day, hour, minute, second);
#else
  return function_pointers_.GetSelfCalibrationDateAndTime(vi, module, year, month, day, hour, minute, second);
#endif
}

ViStatus NiRFSGLibrary::GetSelfCalibrationTemperature(ViSession vi, ViInt32 module, ViReal64* temperature)
{
  if (!function_pointers_.GetSelfCalibrationTemperature) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetSelfCalibrationTemperature.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetSelfCalibrationTemperature(vi, module, temperature);
#else
  return function_pointers_.GetSelfCalibrationTemperature(vi, module, temperature);
#endif
}

ViStatus NiRFSGLibrary::GetTerminalName(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViInt32 bufferSize, ViChar terminalName[])
{
  if (!function_pointers_.GetTerminalName) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetTerminalName.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetTerminalName(vi, signal, signalIdentifier, bufferSize, terminalName);
#else
  return function_pointers_.GetTerminalName(vi, signal, signalIdentifier, bufferSize, terminalName);
#endif
}

ViStatus NiRFSGLibrary::GetUserData(ViSession vi, ViConstString identifier, ViInt32 bufferSize, ViInt8 data[], ViInt32* actualDataSize)
{
  if (!function_pointers_.GetUserData) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetUserData.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetUserData(vi, identifier, bufferSize, data, actualDataSize);
#else
  return function_pointers_.GetUserData(vi, identifier, bufferSize, data, actualDataSize);
#endif
}

ViStatus NiRFSGLibrary::GetWaveformBurstStartLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[], ViInt32* requiredSize)
{
  if (!function_pointers_.GetWaveformBurstStartLocations) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetWaveformBurstStartLocations.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetWaveformBurstStartLocations(vi, channelName, numberOfLocations, locations, requiredSize);
#else
  return function_pointers_.GetWaveformBurstStartLocations(vi, channelName, numberOfLocations, locations, requiredSize);
#endif
}

ViStatus NiRFSGLibrary::GetWaveformBurstStopLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[], ViInt32* requiredSize)
{
  if (!function_pointers_.GetWaveformBurstStopLocations) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetWaveformBurstStopLocations.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetWaveformBurstStopLocations(vi, channelName, numberOfLocations, locations, requiredSize);
#else
  return function_pointers_.GetWaveformBurstStopLocations(vi, channelName, numberOfLocations, locations, requiredSize);
#endif
}

ViStatus NiRFSGLibrary::GetWaveformMarkerEventLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[], ViInt32* requiredSize)
{
  if (!function_pointers_.GetWaveformMarkerEventLocations) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_GetWaveformMarkerEventLocations.");
  }
#if defined(_MSC_VER)
  return niRFSG_GetWaveformMarkerEventLocations(vi, channelName, numberOfLocations, locations, requiredSize);
#else
  return function_pointers_.GetWaveformMarkerEventLocations(vi, channelName, numberOfLocations, locations, requiredSize);
#endif
}

ViStatus NiRFSGLibrary::Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* newVi)
{
  if (!function_pointers_.Init) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_init.");
  }
#if defined(_MSC_VER)
  return niRFSG_init(resourceName, idQuery, resetDevice, newVi);
#else
  return function_pointers_.Init(resourceName, idQuery, resetDevice, newVi);
#endif
}

ViStatus NiRFSGLibrary::InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* vi)
{
  if (!function_pointers_.InitWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_InitWithOptions.");
  }
#if defined(_MSC_VER)
  return niRFSG_InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
#else
  return function_pointers_.InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
#endif
}

ViStatus NiRFSGLibrary::Initiate(ViSession vi)
{
  if (!function_pointers_.Initiate) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_Initiate.");
  }
#if defined(_MSC_VER)
  return niRFSG_Initiate(vi);
#else
  return function_pointers_.Initiate(vi);
#endif
}

ViStatus NiRFSGLibrary::InvalidateAllAttributes(ViSession vi)
{
  if (!function_pointers_.InvalidateAllAttributes) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_InvalidateAllAttributes.");
  }
#if defined(_MSC_VER)
  return niRFSG_InvalidateAllAttributes(vi);
#else
  return function_pointers_.InvalidateAllAttributes(vi);
#endif
}

ViStatus NiRFSGLibrary::LoadConfigurationsFromFile(ViSession vi, ViConstString channelName, ViConstString filePath)
{
  if (!function_pointers_.LoadConfigurationsFromFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_LoadConfigurationsFromFile.");
  }
#if defined(_MSC_VER)
  return niRFSG_LoadConfigurationsFromFile(vi, channelName, filePath);
#else
  return function_pointers_.LoadConfigurationsFromFile(vi, channelName, filePath);
#endif
}

ViStatus NiRFSGLibrary::LockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.LockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_LockSession.");
  }
  return function_pointers_.LockSession(vi, callerHasLock);
}

ViStatus NiRFSGLibrary::PerformPowerSearch(ViSession vi)
{
  if (!function_pointers_.PerformPowerSearch) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_PerformPowerSearch.");
  }
#if defined(_MSC_VER)
  return niRFSG_PerformPowerSearch(vi);
#else
  return function_pointers_.PerformPowerSearch(vi);
#endif
}

ViStatus NiRFSGLibrary::PerformThermalCorrection(ViSession vi)
{
  if (!function_pointers_.PerformThermalCorrection) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_PerformThermalCorrection.");
  }
#if defined(_MSC_VER)
  return niRFSG_PerformThermalCorrection(vi);
#else
  return function_pointers_.PerformThermalCorrection(vi);
#endif
}

ViStatus NiRFSGLibrary::QueryArbWaveformCapabilities(ViSession vi, ViInt32* maxNumberWaveforms, ViInt32* waveformQuantum, ViInt32* minWaveformSize, ViInt32* maxWaveformSize)
{
  if (!function_pointers_.QueryArbWaveformCapabilities) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_QueryArbWaveformCapabilities.");
  }
#if defined(_MSC_VER)
  return niRFSG_QueryArbWaveformCapabilities(vi, maxNumberWaveforms, waveformQuantum, minWaveformSize, maxWaveformSize);
#else
  return function_pointers_.QueryArbWaveformCapabilities(vi, maxNumberWaveforms, waveformQuantum, minWaveformSize, maxWaveformSize);
#endif
}

ViStatus NiRFSGLibrary::ReadAndDownloadWaveformFromFileTDMS(ViSession vi, ViConstString waveformName, ViConstString filePath, ViUInt32 waveformIndex)
{
  if (!function_pointers_.ReadAndDownloadWaveformFromFileTDMS) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ReadAndDownloadWaveformFromFileTDMS.");
  }
#if defined(_MSC_VER)
  return niRFSG_ReadAndDownloadWaveformFromFileTDMS(vi, waveformName, filePath, waveformIndex);
#else
  return function_pointers_.ReadAndDownloadWaveformFromFileTDMS(vi, waveformName, filePath, waveformIndex);
#endif
}

ViStatus NiRFSGLibrary::Reset(ViSession vi)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_reset.");
  }
#if defined(_MSC_VER)
  return niRFSG_reset(vi);
#else
  return function_pointers_.Reset(vi);
#endif
}

ViStatus NiRFSGLibrary::ResetAttribute(ViSession vi, ViConstString channelName, ViAttr attributeId)
{
  if (!function_pointers_.ResetAttribute) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ResetAttribute.");
  }
#if defined(_MSC_VER)
  return niRFSG_ResetAttribute(vi, channelName, attributeId);
#else
  return function_pointers_.ResetAttribute(vi, channelName, attributeId);
#endif
}

ViStatus NiRFSGLibrary::ResetDevice(ViSession vi)
{
  if (!function_pointers_.ResetDevice) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ResetDevice.");
  }
#if defined(_MSC_VER)
  return niRFSG_ResetDevice(vi);
#else
  return function_pointers_.ResetDevice(vi);
#endif
}

ViStatus NiRFSGLibrary::ResetWithDefaults(ViSession vi)
{
  if (!function_pointers_.ResetWithDefaults) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ResetWithDefaults.");
  }
#if defined(_MSC_VER)
  return niRFSG_ResetWithDefaults(vi);
#else
  return function_pointers_.ResetWithDefaults(vi);
#endif
}

ViStatus NiRFSGLibrary::ResetWithOptions(ViSession vi, ViUInt64 stepsToOmit)
{
  if (!function_pointers_.ResetWithOptions) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_ResetWithOptions.");
  }
#if defined(_MSC_VER)
  return niRFSG_ResetWithOptions(vi, stepsToOmit);
#else
  return function_pointers_.ResetWithOptions(vi, stepsToOmit);
#endif
}

ViStatus NiRFSGLibrary::RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  if (!function_pointers_.RevisionQuery) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_revision_query.");
  }
#if defined(_MSC_VER)
  return niRFSG_revision_query(vi, instrumentDriverRevision, firmwareRevision);
#else
  return function_pointers_.RevisionQuery(vi, instrumentDriverRevision, firmwareRevision);
#endif
}

ViStatus NiRFSGLibrary::SaveConfigurationsToFile(ViSession vi, ViConstString channelName, ViConstString filePath)
{
  if (!function_pointers_.SaveConfigurationsToFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SaveConfigurationsToFile.");
  }
#if defined(_MSC_VER)
  return niRFSG_SaveConfigurationsToFile(vi, channelName, filePath);
#else
  return function_pointers_.SaveConfigurationsToFile(vi, channelName, filePath);
#endif
}

ViStatus NiRFSGLibrary::SelectArbWaveform(ViSession vi, ViConstString name)
{
  if (!function_pointers_.SelectArbWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SelectArbWaveform.");
  }
#if defined(_MSC_VER)
  return niRFSG_SelectArbWaveform(vi, name);
#else
  return function_pointers_.SelectArbWaveform(vi, name);
#endif
}

ViStatus NiRFSGLibrary::SelfCal(ViSession vi)
{
  if (!function_pointers_.SelfCal) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SelfCal.");
  }
#if defined(_MSC_VER)
  return niRFSG_SelfCal(vi);
#else
  return function_pointers_.SelfCal(vi);
#endif
}

ViStatus NiRFSGLibrary::SelfCalibrateRange(ViSession vi, ViInt64 stepsToOmit, ViReal64 minFrequency, ViReal64 maxFrequency, ViReal64 minPowerLevel, ViReal64 maxPowerLevel)
{
  if (!function_pointers_.SelfCalibrateRange) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SelfCalibrateRange.");
  }
#if defined(_MSC_VER)
  return niRFSG_SelfCalibrateRange(vi, stepsToOmit, minFrequency, maxFrequency, minPowerLevel, maxPowerLevel);
#else
  return function_pointers_.SelfCalibrateRange(vi, stepsToOmit, minFrequency, maxFrequency, minPowerLevel, maxPowerLevel);
#endif
}

ViStatus NiRFSGLibrary::SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[2048])
{
  if (!function_pointers_.SelfTest) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_self_test.");
  }
#if defined(_MSC_VER)
  return niRFSG_self_test(vi, selfTestResult, selfTestMessage);
#else
  return function_pointers_.SelfTest(vi, selfTestResult, selfTestMessage);
#endif
}

ViStatus NiRFSGLibrary::SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger, ViConstString triggerIdentifier)
{
  if (!function_pointers_.SendSoftwareEdgeTrigger) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SendSoftwareEdgeTrigger.");
  }
#if defined(_MSC_VER)
  return niRFSG_SendSoftwareEdgeTrigger(vi, trigger, triggerIdentifier);
#else
  return function_pointers_.SendSoftwareEdgeTrigger(vi, trigger, triggerIdentifier);
#endif
}

ViStatus NiRFSGLibrary::SetArbWaveformNextWritePosition(ViSession vi, ViConstString waveformName, ViInt32 relativeTo, ViInt32 offset)
{
  if (!function_pointers_.SetArbWaveformNextWritePosition) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetArbWaveformNextWritePosition.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetArbWaveformNextWritePosition(vi, waveformName, relativeTo, offset);
#else
  return function_pointers_.SetArbWaveformNextWritePosition(vi, waveformName, relativeTo, offset);
#endif
}

ViStatus NiRFSGLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value)
{
  if (!function_pointers_.SetAttributeViBoolean) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetAttributeViBoolean.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetAttributeViBoolean(vi, channelName, attributeId, value);
#else
  return function_pointers_.SetAttributeViBoolean(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value)
{
  if (!function_pointers_.SetAttributeViInt32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetAttributeViInt32.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetAttributeViInt32(vi, channelName, attributeId, value);
#else
  return function_pointers_.SetAttributeViInt32(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value)
{
  if (!function_pointers_.SetAttributeViInt64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetAttributeViInt64.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetAttributeViInt64(vi, channelName, attributeId, value);
#else
  return function_pointers_.SetAttributeViInt64(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value)
{
  if (!function_pointers_.SetAttributeViReal64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetAttributeViReal64.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetAttributeViReal64(vi, channelName, attributeId, value);
#else
  return function_pointers_.SetAttributeViReal64(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value)
{
  if (!function_pointers_.SetAttributeViSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetAttributeViSession.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetAttributeViSession(vi, channelName, attributeId, value);
#else
  return function_pointers_.SetAttributeViSession(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value)
{
  if (!function_pointers_.SetAttributeViString) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetAttributeViString.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetAttributeViString(vi, channelName, attributeId, value);
#else
  return function_pointers_.SetAttributeViString(vi, channelName, attributeId, value);
#endif
}

ViStatus NiRFSGLibrary::SetUserData(ViSession vi, ViConstString identifier, ViInt32 bufferSize, ViInt8 data[])
{
  if (!function_pointers_.SetUserData) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetUserData.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetUserData(vi, identifier, bufferSize, data);
#else
  return function_pointers_.SetUserData(vi, identifier, bufferSize, data);
#endif
}

ViStatus NiRFSGLibrary::SetWaveformBurstStartLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[])
{
  if (!function_pointers_.SetWaveformBurstStartLocations) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetWaveformBurstStartLocations.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetWaveformBurstStartLocations(vi, channelName, numberOfLocations, locations);
#else
  return function_pointers_.SetWaveformBurstStartLocations(vi, channelName, numberOfLocations, locations);
#endif
}

ViStatus NiRFSGLibrary::SetWaveformBurstStopLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[])
{
  if (!function_pointers_.SetWaveformBurstStopLocations) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetWaveformBurstStopLocations.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetWaveformBurstStopLocations(vi, channelName, numberOfLocations, locations);
#else
  return function_pointers_.SetWaveformBurstStopLocations(vi, channelName, numberOfLocations, locations);
#endif
}

ViStatus NiRFSGLibrary::SetWaveformMarkerEventLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[])
{
  if (!function_pointers_.SetWaveformMarkerEventLocations) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_SetWaveformMarkerEventLocations.");
  }
#if defined(_MSC_VER)
  return niRFSG_SetWaveformMarkerEventLocations(vi, channelName, numberOfLocations, locations);
#else
  return function_pointers_.SetWaveformMarkerEventLocations(vi, channelName, numberOfLocations, locations);
#endif
}

ViStatus NiRFSGLibrary::UnlockSession(ViSession vi, ViBoolean* callerHasLock)
{
  if (!function_pointers_.UnlockSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_UnlockSession.");
  }
  return function_pointers_.UnlockSession(vi, callerHasLock);
}

ViStatus NiRFSGLibrary::WaitUntilSettled(ViSession vi, ViInt32 maxTimeMilliseconds)
{
  if (!function_pointers_.WaitUntilSettled) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WaitUntilSettled.");
  }
#if defined(_MSC_VER)
  return niRFSG_WaitUntilSettled(vi, maxTimeMilliseconds);
#else
  return function_pointers_.WaitUntilSettled(vi, maxTimeMilliseconds);
#endif
}

ViStatus NiRFSGLibrary::WriteArbWaveform(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, ViReal64 iData[], ViReal64 qData[], ViBoolean moreDataPending)
{
  if (!function_pointers_.WriteArbWaveform) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WriteArbWaveform.");
  }
#if defined(_MSC_VER)
  return niRFSG_WriteArbWaveform(vi, waveformName, numberOfSamples, iData, qData, moreDataPending);
#else
  return function_pointers_.WriteArbWaveform(vi, waveformName, numberOfSamples, iData, qData, moreDataPending);
#endif
}

ViStatus NiRFSGLibrary::WriteArbWaveformComplexF32(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, NIComplexNumberF32_struct wfmData[], ViBoolean moreDataPending)
{
  if (!function_pointers_.WriteArbWaveformComplexF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WriteArbWaveformComplexF32.");
  }
#if defined(_MSC_VER)
  return niRFSG_WriteArbWaveformComplexF32(vi, waveformName, numberOfSamples, wfmData, moreDataPending);
#else
  return function_pointers_.WriteArbWaveformComplexF32(vi, waveformName, numberOfSamples, wfmData, moreDataPending);
#endif
}

ViStatus NiRFSGLibrary::WriteArbWaveformComplexF64(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, NIComplexNumber_struct wfmData[], ViBoolean moreDataPending)
{
  if (!function_pointers_.WriteArbWaveformComplexF64) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WriteArbWaveformComplexF64.");
  }
#if defined(_MSC_VER)
  return niRFSG_WriteArbWaveformComplexF64(vi, waveformName, numberOfSamples, wfmData, moreDataPending);
#else
  return function_pointers_.WriteArbWaveformComplexF64(vi, waveformName, numberOfSamples, wfmData, moreDataPending);
#endif
}

ViStatus NiRFSGLibrary::WriteArbWaveformComplexI16(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, NIComplexI16_struct wfmData[])
{
  if (!function_pointers_.WriteArbWaveformComplexI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WriteArbWaveformComplexI16.");
  }
#if defined(_MSC_VER)
  return niRFSG_WriteArbWaveformComplexI16(vi, waveformName, numberOfSamples, wfmData);
#else
  return function_pointers_.WriteArbWaveformComplexI16(vi, waveformName, numberOfSamples, wfmData);
#endif
}

ViStatus NiRFSGLibrary::WriteArbWaveformF32(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, ViReal32 iData[], ViReal32 qData[], ViBoolean moreDataPending)
{
  if (!function_pointers_.WriteArbWaveformF32) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WriteArbWaveformF32.");
  }
#if defined(_MSC_VER)
  return niRFSG_WriteArbWaveformF32(vi, waveformName, numberOfSamples, iData, qData, moreDataPending);
#else
  return function_pointers_.WriteArbWaveformF32(vi, waveformName, numberOfSamples, iData, qData, moreDataPending);
#endif
}

ViStatus NiRFSGLibrary::WriteScript(ViSession vi, ViConstString script)
{
  if (!function_pointers_.WriteScript) {
    throw nidevice_grpc::LibraryLoadException("Could not find niRFSG_WriteScript.");
  }
#if defined(_MSC_VER)
  return niRFSG_WriteScript(vi, script);
#else
  return function_pointers_.WriteScript(vi, script);
#endif
}

}  // namespace nirfsg_grpc
