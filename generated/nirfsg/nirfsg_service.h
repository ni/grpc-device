
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFSG Metadata
//---------------------------------------------------------------------
#ifndef NIRFSG_GRPC_SERVICE_H
#define NIRFSG_GRPC_SERVICE_H

#include <nirfsg.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfsg_library_interface.h"

namespace nirfsg_grpc {

class NiRFSGService final : public NiRFSG::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<ViSession>>;

  NiRFSGService(
    NiRFSGLibraryInterface* library,
    ResourceRepositorySharedPtr session_repository,
    const nidevice_grpc::FeatureToggles& feature_toggles = {});
  virtual ~NiRFSGService();
  
  ::grpc::Status Init(::grpc::ServerContext* context, const InitRequest* request, InitResponse* response) override;
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status GetError(::grpc::ServerContext* context, const GetErrorRequest* request, GetErrorResponse* response) override;
  ::grpc::Status InitWithOptions(::grpc::ServerContext* context, const InitWithOptionsRequest* request, InitWithOptionsResponse* response) override;

  bool is_enabled();
private:
  NiRFSGLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  struct NiRFSGFeatureToggles
  {
    using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
    NiRFSGFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles);

    bool is_enabled;
  };

  NiRFSGFeatureToggles feature_toggles_;
};

} // namespace nirfsg_grpc

#endif  // NIRFSG_GRPC_SERVICE_H
