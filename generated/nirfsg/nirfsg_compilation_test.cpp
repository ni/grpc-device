//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Compilation test for the NI-RFSG Metadata
//---------------------------------------------------------------------
#include "nirfsg_library.h"

namespace nirfsg_grpc {

ViStatus Abort(ViSession vi)
{
  return niRFSG_Abort(vi);
}

ViStatus AllocateArbWaveform(ViSession vi, ViConstString waveformName, ViInt32 sizeInSamples)
{
  return niRFSG_AllocateArbWaveform(vi, waveformName, sizeInSamples);
}

ViStatus CheckAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value)
{
  return niRFSG_CheckAttributeViBoolean(vi, channelName, attributeId, value);
}

ViStatus CheckAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value)
{
  return niRFSG_CheckAttributeViInt32(vi, channelName, attributeId, value);
}

ViStatus CheckAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value)
{
  return niRFSG_CheckAttributeViInt64(vi, channelName, attributeId, value);
}

ViStatus CheckAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value)
{
  return niRFSG_CheckAttributeViReal64(vi, channelName, attributeId, value);
}

ViStatus CheckAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value)
{
  return niRFSG_CheckAttributeViSession(vi, channelName, attributeId, value);
}

ViStatus CheckAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value)
{
  return niRFSG_CheckAttributeViString(vi, channelName, attributeId, value);
}

ViStatus CheckGenerationStatus(ViSession vi, ViBoolean* isDone)
{
  return niRFSG_CheckGenerationStatus(vi, isDone);
}

ViStatus CheckIfConfigurationListExists(ViSession vi, ViConstString listName, ViBoolean* listExists)
{
  return niRFSG_CheckIfConfigurationListExists(vi, listName, listExists);
}

ViStatus CheckIfScriptExists(ViSession vi, ViConstString scriptName, ViBoolean* scriptExists)
{
  return niRFSG_CheckIfScriptExists(vi, scriptName, scriptExists);
}

ViStatus CheckIfWaveformExists(ViSession vi, ViConstString waveformName, ViBoolean* waveformExists)
{
  return niRFSG_CheckIfWaveformExists(vi, waveformName, waveformExists);
}

ViStatus ClearAllArbWaveforms(ViSession vi)
{
  return niRFSG_ClearAllArbWaveforms(vi);
}

ViStatus ClearArbWaveform(ViSession vi, ViConstString name)
{
  return niRFSG_ClearArbWaveform(vi, name);
}

ViStatus ClearError(ViSession vi)
{
  return niRFSG_ClearError(vi);
}

ViStatus ClearSelfCalibrateRange(ViSession vi)
{
  return niRFSG_ClearSelfCalibrateRange(vi);
}

ViStatus Close(ViSession vi)
{
  return niRFSG_close(vi);
}

ViStatus Commit(ViSession vi)
{
  return niRFSG_Commit(vi);
}

ViStatus ConfigureDeembeddingTableInterpolationLinear(ViSession vi, ViConstString port, ViConstString tableName, ViInt32 format)
{
  return niRFSG_ConfigureDeembeddingTableInterpolationLinear(vi, port, tableName, format);
}

ViStatus ConfigureDeembeddingTableInterpolationNearest(ViSession vi, ViConstString port, ViConstString tableName)
{
  return niRFSG_ConfigureDeembeddingTableInterpolationNearest(vi, port, tableName);
}

ViStatus ConfigureDeembeddingTableInterpolationSpline(ViSession vi, ViConstString port, ViConstString tableName)
{
  return niRFSG_ConfigureDeembeddingTableInterpolationSpline(vi, port, tableName);
}

ViStatus ConfigureDigitalEdgeConfigurationListStepTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  return niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger(vi, source, edge);
}

ViStatus ConfigureDigitalEdgeScriptTrigger(ViSession vi, ViConstString triggerID, ViConstString source, ViInt32 edge)
{
  return niRFSG_ConfigureDigitalEdgeScriptTrigger(vi, triggerID, source, edge);
}

ViStatus ConfigureDigitalEdgeStartTrigger(ViSession vi, ViConstString source, ViInt32 edge)
{
  return niRFSG_ConfigureDigitalEdgeStartTrigger(vi, source, edge);
}

ViStatus ConfigureDigitalLevelScriptTrigger(ViSession vi, ViConstString triggerID, ViConstString source, ViInt32 level)
{
  return niRFSG_ConfigureDigitalLevelScriptTrigger(vi, triggerID, source, level);
}

ViStatus ConfigureDigitalModulationUserDefinedWaveform(ViSession vi, ViInt32 numberOfSamples, ViInt8 userDefinedWaveform[])
{
  return niRFSG_ConfigureDigitalModulationUserDefinedWaveform(vi, numberOfSamples, userDefinedWaveform);
}

ViStatus ConfigureGenerationMode(ViSession vi, ViInt32 generationMode)
{
  return niRFSG_ConfigureGenerationMode(vi, generationMode);
}

ViStatus ConfigureOutputEnabled(ViSession vi, ViBoolean outputEnabled)
{
  return niRFSG_ConfigureOutputEnabled(vi, outputEnabled);
}

ViStatus ConfigureP2PEndpointFullnessStartTrigger(ViSession vi, ViInt64 p2pEndpointFullnessLevel)
{
  return niRFSG_ConfigureP2PEndpointFullnessStartTrigger(vi, p2pEndpointFullnessLevel);
}

ViStatus ConfigurePXIChassisClk10(ViSession vi, ViConstString pxiClk10Source)
{
  return niRFSG_ConfigurePXIChassisClk10(vi, pxiClk10Source);
}

ViStatus ConfigurePowerLevelType(ViSession vi, ViInt32 powerLevelType)
{
  return niRFSG_ConfigurePowerLevelType(vi, powerLevelType);
}

ViStatus ConfigureRF(ViSession vi, ViReal64 frequency, ViReal64 powerLevel)
{
  return niRFSG_ConfigureRF(vi, frequency, powerLevel);
}

ViStatus ConfigureRefClock(ViSession vi, ViConstString refClockSource, ViReal64 refClockRate)
{
  return niRFSG_ConfigureRefClock(vi, refClockSource, refClockRate);
}

ViStatus ConfigureSignalBandwidth(ViSession vi, ViReal64 signalBandwidth)
{
  return niRFSG_ConfigureSignalBandwidth(vi, signalBandwidth);
}

ViStatus ConfigureSoftwareScriptTrigger(ViSession vi, ViConstString triggerID)
{
  return niRFSG_ConfigureSoftwareScriptTrigger(vi, triggerID);
}

ViStatus ConfigureSoftwareStartTrigger(ViSession vi)
{
  return niRFSG_ConfigureSoftwareStartTrigger(vi);
}

ViStatus ConfigureUpconverterPLLSettlingTime(ViSession vi, ViReal64 pllSettlingTime, ViBoolean ensurePLLLocked, ViInt32 reservedForFutureUse)
{
  return niRFSG_ConfigureUpconverterPLLSettlingTime(vi, pllSettlingTime, ensurePLLLocked, reservedForFutureUse);
}

ViStatus CreateConfigurationList(ViSession vi, ViConstString listName, ViInt32 numberOfAttributes, ViAttr configurationListAttributes[], ViBoolean setAsActiveList)
{
  return niRFSG_CreateConfigurationList(vi, listName, numberOfAttributes, configurationListAttributes, setAsActiveList);
}

ViStatus CreateConfigurationListStep(ViSession vi, ViBoolean setAsActiveStep)
{
  return niRFSG_CreateConfigurationListStep(vi, setAsActiveStep);
}

ViStatus CreateDeembeddingSparameterTableArray(ViSession vi, ViConstString port, ViConstString tableName, ViReal64 frequencies[], ViInt32 frequenciesSize, NIComplexNumber_struct sparameterTable[], ViInt32 sparameterTableSize, ViInt32 numberOfPorts, ViInt32 sparameterOrientation)
{
  return niRFSG_CreateDeembeddingSparameterTableArray(vi, port, tableName, frequencies, frequenciesSize, sparameterTable, sparameterTableSize, numberOfPorts, sparameterOrientation);
}

ViStatus CreateDeembeddingSparameterTableS2PFile(ViSession vi, ViConstString port, ViConstString tableName, ViConstString s2pFilePath, ViInt32 sparameterOrientation)
{
  return niRFSG_CreateDeembeddingSparameterTableS2PFile(vi, port, tableName, s2pFilePath, sparameterOrientation);
}

ViStatus DeleteAllDeembeddingTables(ViSession vi)
{
  return niRFSG_DeleteAllDeembeddingTables(vi);
}

ViStatus DeleteConfigurationList(ViSession vi, ViConstString listName)
{
  return niRFSG_DeleteConfigurationList(vi, listName);
}

ViStatus DeleteDeembeddingTable(ViSession vi, ViConstString port, ViConstString tableName)
{
  return niRFSG_DeleteDeembeddingTable(vi, port, tableName);
}

ViStatus DeleteScript(ViSession vi, ViConstString scriptName)
{
  return niRFSG_DeleteScript(vi, scriptName);
}

ViStatus Disable(ViSession vi)
{
  return niRFSG_Disable(vi);
}

ViStatus DisableAllModulation(ViSession vi)
{
  return niRFSG_DisableAllModulation(vi);
}

ViStatus DisableConfigurationListStepTrigger(ViSession vi)
{
  return niRFSG_DisableConfigurationListStepTrigger(vi);
}

ViStatus DisableScriptTrigger(ViSession vi, ViConstString triggerID)
{
  return niRFSG_DisableScriptTrigger(vi, triggerID);
}

ViStatus DisableStartTrigger(ViSession vi)
{
  return niRFSG_DisableStartTrigger(vi);
}

ViStatus ErrorMessage(ViSession vi, ViStatus errorCode, ViChar errorMessage[1024])
{
  return niRFSG_error_message(vi, errorCode, errorMessage);
}

ViStatus ErrorQuery(ViSession vi, ViInt32* errorCode, ViChar errorMessage[1024])
{
  return niRFSG_error_query(vi, errorCode, errorMessage);
}

ViStatus ExportSignal(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViConstString outputTerminal)
{
  return niRFSG_ExportSignal(vi, signal, signalIdentifier, outputTerminal);
}

ViStatus GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* value)
{
  return niRFSG_GetAttributeViBoolean(vi, channelName, attributeId, value);
}

ViStatus GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* value)
{
  return niRFSG_GetAttributeViInt32(vi, channelName, attributeId, value);
}

ViStatus GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* value)
{
  return niRFSG_GetAttributeViInt64(vi, channelName, attributeId, value);
}

ViStatus GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* value)
{
  return niRFSG_GetAttributeViReal64(vi, channelName, attributeId, value);
}

ViStatus GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* value)
{
  return niRFSG_GetAttributeViSession(vi, channelName, attributeId, value);
}

ViStatus GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufSize, ViChar value[])
{
  return niRFSG_GetAttributeViString(vi, channelName, attributeId, bufSize, value);
}

ViStatus GetChannelName(ViSession vi, ViInt32 index, ViInt32 bufferSize, ViChar name[])
{
  return niRFSG_GetChannelName(vi, index, bufferSize, name);
}

ViStatus GetDeembeddingSparameters(ViSession vi, NIComplexNumber_struct sparameters[], ViInt32 sparametersArraySize, ViInt32* numberOfSparameters, ViInt32* numberOfPorts)
{
  return niRFSG_GetDeembeddingSparameters(vi, sparameters, sparametersArraySize, numberOfSparameters, numberOfPorts);
}

ViStatus GetError(ViSession vi, ViStatus* errorCode, ViInt32 errorDescriptionBufferSize, ViChar errorDescription[])
{
  return niRFSG_GetError(vi, errorCode, errorDescriptionBufferSize, errorDescription);
}

ViStatus GetExternalCalibrationLastDateAndTime(ViSession vi, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute, ViInt32* second)
{
  return niRFSG_GetExternalCalibrationLastDateAndTime(vi, year, month, day, hour, minute, second);
}

ViStatus GetSelfCalibrationDateAndTime(ViSession vi, ViInt32 module, ViInt32* year, ViInt32* month, ViInt32* day, ViInt32* hour, ViInt32* minute, ViInt32* second)
{
  return niRFSG_GetSelfCalibrationDateAndTime(vi, module, year, month, day, hour, minute, second);
}

ViStatus GetSelfCalibrationTemperature(ViSession vi, ViInt32 module, ViReal64* temperature)
{
  return niRFSG_GetSelfCalibrationTemperature(vi, module, temperature);
}

ViStatus GetTerminalName(ViSession vi, ViInt32 signal, ViConstString signalIdentifier, ViInt32 bufferSize, ViChar terminalName[])
{
  return niRFSG_GetTerminalName(vi, signal, signalIdentifier, bufferSize, terminalName);
}

ViStatus GetUserData(ViSession vi, ViConstString identifier, ViInt32 bufferSize, ViInt8 data[], ViInt32* actualDataSize)
{
  return niRFSG_GetUserData(vi, identifier, bufferSize, data, actualDataSize);
}

ViStatus GetWaveformBurstStartLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[], ViInt32* requiredSize)
{
  return niRFSG_GetWaveformBurstStartLocations(vi, channelName, numberOfLocations, locations, requiredSize);
}

ViStatus GetWaveformBurstStopLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[], ViInt32* requiredSize)
{
  return niRFSG_GetWaveformBurstStopLocations(vi, channelName, numberOfLocations, locations, requiredSize);
}

ViStatus GetWaveformMarkerEventLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[], ViInt32* requiredSize)
{
  return niRFSG_GetWaveformMarkerEventLocations(vi, channelName, numberOfLocations, locations, requiredSize);
}

ViStatus Init(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* newVi)
{
  return niRFSG_init(resourceName, idQuery, resetDevice, newVi);
}

ViStatus InitWithOptions(ViRsrc resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* vi)
{
  return niRFSG_InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
}

ViStatus Initiate(ViSession vi)
{
  return niRFSG_Initiate(vi);
}

ViStatus InvalidateAllAttributes(ViSession vi)
{
  return niRFSG_InvalidateAllAttributes(vi);
}

ViStatus LoadConfigurationsFromFile(ViSession vi, ViConstString channelName, ViConstString filePath)
{
  return niRFSG_LoadConfigurationsFromFile(vi, channelName, filePath);
}

ViStatus PerformPowerSearch(ViSession vi)
{
  return niRFSG_PerformPowerSearch(vi);
}

ViStatus PerformThermalCorrection(ViSession vi)
{
  return niRFSG_PerformThermalCorrection(vi);
}

ViStatus QueryArbWaveformCapabilities(ViSession vi, ViInt32* maxNumberWaveforms, ViInt32* waveformQuantum, ViInt32* minWaveformSize, ViInt32* maxWaveformSize)
{
  return niRFSG_QueryArbWaveformCapabilities(vi, maxNumberWaveforms, waveformQuantum, minWaveformSize, maxWaveformSize);
}

ViStatus ReadAndDownloadWaveformFromFileTDMS(ViSession vi, ViConstString waveformName, ViConstString filePath, ViUInt32 waveformIndex)
{
  return niRFSG_ReadAndDownloadWaveformFromFileTDMS(vi, waveformName, filePath, waveformIndex);
}

ViStatus Reset(ViSession vi)
{
  return niRFSG_reset(vi);
}

ViStatus ResetAttribute(ViSession vi, ViConstString channelName, ViAttr attributeId)
{
  return niRFSG_ResetAttribute(vi, channelName, attributeId);
}

ViStatus ResetDevice(ViSession vi)
{
  return niRFSG_ResetDevice(vi);
}

ViStatus ResetWithDefaults(ViSession vi)
{
  return niRFSG_ResetWithDefaults(vi);
}

ViStatus ResetWithOptions(ViSession vi, ViUInt64 stepsToOmit)
{
  return niRFSG_ResetWithOptions(vi, stepsToOmit);
}

ViStatus RevisionQuery(ViSession vi, ViChar instrumentDriverRevision[256], ViChar firmwareRevision[256])
{
  return niRFSG_revision_query(vi, instrumentDriverRevision, firmwareRevision);
}

ViStatus SaveConfigurationsToFile(ViSession vi, ViConstString channelName, ViConstString filePath)
{
  return niRFSG_SaveConfigurationsToFile(vi, channelName, filePath);
}

ViStatus SelectArbWaveform(ViSession vi, ViConstString name)
{
  return niRFSG_SelectArbWaveform(vi, name);
}

ViStatus SelfCal(ViSession vi)
{
  return niRFSG_SelfCal(vi);
}

ViStatus SelfCalibrateRange(ViSession vi, ViInt64 stepsToOmit, ViReal64 minFrequency, ViReal64 maxFrequency, ViReal64 minPowerLevel, ViReal64 maxPowerLevel)
{
  return niRFSG_SelfCalibrateRange(vi, stepsToOmit, minFrequency, maxFrequency, minPowerLevel, maxPowerLevel);
}

ViStatus SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[2048])
{
  return niRFSG_self_test(vi, selfTestResult, selfTestMessage);
}

ViStatus SendSoftwareEdgeTrigger(ViSession vi, ViInt32 trigger, ViConstString triggerIdentifier)
{
  return niRFSG_SendSoftwareEdgeTrigger(vi, trigger, triggerIdentifier);
}

ViStatus SetArbWaveformNextWritePosition(ViSession vi, ViConstString waveformName, ViInt32 relativeTo, ViInt32 offset)
{
  return niRFSG_SetArbWaveformNextWritePosition(vi, waveformName, relativeTo, offset);
}

ViStatus SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value)
{
  return niRFSG_SetAttributeViBoolean(vi, channelName, attributeId, value);
}

ViStatus SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value)
{
  return niRFSG_SetAttributeViInt32(vi, channelName, attributeId, value);
}

ViStatus SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value)
{
  return niRFSG_SetAttributeViInt64(vi, channelName, attributeId, value);
}

ViStatus SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value)
{
  return niRFSG_SetAttributeViReal64(vi, channelName, attributeId, value);
}

ViStatus SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value)
{
  return niRFSG_SetAttributeViSession(vi, channelName, attributeId, value);
}

ViStatus SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value)
{
  return niRFSG_SetAttributeViString(vi, channelName, attributeId, value);
}

ViStatus SetUserData(ViSession vi, ViConstString identifier, ViInt32 bufferSize, ViInt8 data[])
{
  return niRFSG_SetUserData(vi, identifier, bufferSize, data);
}

ViStatus SetWaveformBurstStartLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[])
{
  return niRFSG_SetWaveformBurstStartLocations(vi, channelName, numberOfLocations, locations);
}

ViStatus SetWaveformBurstStopLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[])
{
  return niRFSG_SetWaveformBurstStopLocations(vi, channelName, numberOfLocations, locations);
}

ViStatus SetWaveformMarkerEventLocations(ViSession vi, ViConstString channelName, ViInt32 numberOfLocations, ViReal64 locations[])
{
  return niRFSG_SetWaveformMarkerEventLocations(vi, channelName, numberOfLocations, locations);
}

ViStatus WaitUntilSettled(ViSession vi, ViInt32 maxTimeMilliseconds)
{
  return niRFSG_WaitUntilSettled(vi, maxTimeMilliseconds);
}

ViStatus WriteArbWaveform(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, ViReal64 iData[], ViReal64 qData[], ViBoolean moreDataPending)
{
  return niRFSG_WriteArbWaveform(vi, waveformName, numberOfSamples, iData, qData, moreDataPending);
}

ViStatus WriteArbWaveformComplexF32(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, NIComplexNumberF32_struct wfmData[], ViBoolean moreDataPending)
{
  return niRFSG_WriteArbWaveformComplexF32(vi, waveformName, numberOfSamples, wfmData, moreDataPending);
}

ViStatus WriteArbWaveformComplexF64(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, NIComplexNumber_struct wfmData[], ViBoolean moreDataPending)
{
  return niRFSG_WriteArbWaveformComplexF64(vi, waveformName, numberOfSamples, wfmData, moreDataPending);
}

ViStatus WriteArbWaveformComplexI16(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, NIComplexI16_struct wfmData[])
{
  return niRFSG_WriteArbWaveformComplexI16(vi, waveformName, numberOfSamples, wfmData);
}

ViStatus WriteArbWaveformF32(ViSession vi, ViConstString waveformName, ViInt32 numberOfSamples, ViReal32 iData[], ViReal32 qData[], ViBoolean moreDataPending)
{
  return niRFSG_WriteArbWaveformF32(vi, waveformName, numberOfSamples, iData, qData, moreDataPending);
}

ViStatus WriteScript(ViSession vi, ViConstString script)
{
  return niRFSG_WriteScript(vi, script);
}

}  // namespace nirfsg_grpc
