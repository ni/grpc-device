
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-FPGA Metadata
//---------------------------------------------------------------------
#ifndef NIFPGA_GRPC_SERVICE_H
#define NIFPGA_GRPC_SERVICE_H

#include <nifpga.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nifpga_library_interface.h"

namespace nifpga_grpc {

struct nifpgaFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  nifpgaFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class nifpgaService final : public nifpga::Service {
public:
  using LibrarySharedPtr = std::shared_ptr<nifpgaLibraryInterface>;
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<NiFpga_Session>>;

  nifpgaService(
    LibrarySharedPtr library,
    ResourceRepositorySharedPtr resource_repository,
    const nifpgaFeatureToggles& feature_toggles = {});
  virtual ~nifpgaService();

  ::grpc::Status Abort(::grpc::ServerContext* context, const AbortRequest* request, AbortResponse* response) override;
  ::grpc::Status Close(::grpc::ServerContext* context, const CloseRequest* request, CloseResponse* response) override;
  ::grpc::Status Download(::grpc::ServerContext* context, const DownloadRequest* request, DownloadResponse* response) override;
  ::grpc::Status Open(::grpc::ServerContext* context, const OpenRequest* request, OpenResponse* response) override;
  ::grpc::Status Reset(::grpc::ServerContext* context, const ResetRequest* request, ResetResponse* response) override;
  ::grpc::Status Run(::grpc::ServerContext* context, const RunRequest* request, RunResponse* response) override;
private:
  LibrarySharedPtr library_;
  ResourceRepositorySharedPtr session_repository_;
  ::grpc::Status ConvertApiErrorStatusForNiFpga_Session(::grpc::ServerContextBase* context, int32_t status, NiFpga_Session session);

  nifpgaFeatureToggles feature_toggles_;
};

} // namespace nifpga_grpc

#endif  // NIFPGA_GRPC_SERVICE_H
