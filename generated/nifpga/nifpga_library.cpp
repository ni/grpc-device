//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-FPGA Metadata
//---------------------------------------------------------------------
#include "nifpga_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "NiFpga.dll";
#else
static const char* kLibraryName = "libNiFpga.so";
#endif

namespace nifpga_grpc {

nifpgaLibrary::nifpgaLibrary() : nifpgaLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

nifpgaLibrary::nifpgaLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Abort = reinterpret_cast<AbortPtr>(shared_library_->get_function_pointer("NiFpga_Abort"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_->get_function_pointer("NiFpga_Close"));
  function_pointers_.Download = reinterpret_cast<DownloadPtr>(shared_library_->get_function_pointer("NiFpga_Download"));
  function_pointers_.Open = reinterpret_cast<OpenPtr>(shared_library_->get_function_pointer("NiFpga_Open"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_->get_function_pointer("NiFpga_Reset"));
  function_pointers_.Run = reinterpret_cast<RunPtr>(shared_library_->get_function_pointer("NiFpga_Run"));
}

nifpgaLibrary::~nifpgaLibrary()
{
}

::grpc::Status nifpgaLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

NiFpga_Status nifpgaLibrary::Abort(NiFpga_Session session)
{
  if (!function_pointers_.Abort) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Abort.");
  }
  return function_pointers_.Abort(session);
}

NiFpga_Status nifpgaLibrary::Close(NiFpga_Session session, uint32_t attribute)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Close.");
  }
  return function_pointers_.Close(session, attribute);
}

NiFpga_Status nifpgaLibrary::Download(NiFpga_Session session)
{
  if (!function_pointers_.Download) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Download.");
  }
  return function_pointers_.Download(session);
}

NiFpga_Status nifpgaLibrary::Open(const char bitfile[], const char signature[], const char resource[], uint32_t attribute, NiFpga_Session* session)
{
  if (!function_pointers_.Open) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Open.");
  }
  return function_pointers_.Open(bitfile, signature, resource, attribute, session);
}

NiFpga_Status nifpgaLibrary::Reset(NiFpga_Session session)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Reset.");
  }
  return function_pointers_.Reset(session);
}

NiFpga_Status nifpgaLibrary::Run(NiFpga_Session session, uint32_t attribute)
{
  if (!function_pointers_.Run) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Run.");
  }
  return function_pointers_.Run(session, attribute);
}

}  // namespace nifpga_grpc
