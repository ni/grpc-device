//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-FPGA
//---------------------------------------------------------------------
#ifndef NIFPGA_GRPC_LIBRARY_WRAPPER_H
#define NIFPGA_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>
#include <NiFpga.h>

namespace nifpga_grpc {

class NiFpgaLibraryInterface {
 public:
  virtual ~NiFpgaLibraryInterface() {}

  virtual NiFpga_Status Abort(NiFpga_Session session) = 0;
  virtual NiFpga_Status Close(NiFpga_Session session, uint32_t attribute) = 0;
  virtual NiFpga_Status CloseHostMemoryBuffer(NiFpga_Session session, const char memoryName[]) = 0;
  virtual NiFpga_Status CloseLowLatencyBuffer(NiFpga_Session session, const char memoryName[]) = 0;
  virtual NiFpga_Status CommitFifoConfiguration(NiFpga_Session session, uint32_t fifo) = 0;
  virtual NiFpga_Status Download(NiFpga_Session session) = 0;
  virtual NiFpga_Status Finalize() = 0;
  virtual NiFpga_Status Initialize() = 0;
  virtual NiFpga_Status Open(const char bitfile[], const char signature[], const char resource[], uint32_t attribute, NiFpga_Session* session) = 0;
  virtual NiFpga_Status ReleaseFifoElements(NiFpga_Session session, uint32_t fifo, size_t elements) = 0;
  virtual NiFpga_Status Reset(NiFpga_Session session) = 0;
  virtual NiFpga_Status Run(NiFpga_Session session, uint32_t attribute) = 0;
  virtual NiFpga_Status StartFifo(NiFpga_Session session, uint32_t fifo) = 0;
  virtual NiFpga_Status StopFifo(NiFpga_Session session, uint32_t fifo) = 0;
  virtual NiFpga_Status UnreserveFifo(NiFpga_Session session, uint32_t fifo) = 0;
};

}  // namespace nifpga_grpc
#endif  // NIFPGA_GRPC_LIBRARY_WRAPPER_H
