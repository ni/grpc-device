//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-FPGA
//---------------------------------------------------------------------
#ifndef NIFPGA_GRPC_LIBRARY_H
#define NIFPGA_GRPC_LIBRARY_H

#include "nifpga_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nifpga_grpc {

class NiFpgaLibrary : public nifpga_grpc::NiFpgaLibraryInterface {
 public:
  NiFpgaLibrary();
  explicit NiFpgaLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiFpgaLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  NiFpga_Status Abort(NiFpga_Session session) override;
  NiFpga_Status Close(NiFpga_Session session, uint32_t attribute) override;
  NiFpga_Status CloseHostMemoryBuffer(NiFpga_Session session, const char memoryName[]) override;
  NiFpga_Status CloseLowLatencyBuffer(NiFpga_Session session, const char memoryName[]) override;
  NiFpga_Status CommitFifoConfiguration(NiFpga_Session session, uint32_t fifo) override;
  NiFpga_Status Download(NiFpga_Session session) override;
  NiFpga_Status Finalize() override;
  NiFpga_Status Initialize() override;
  NiFpga_Status Open(const char bitfile[], const char signature[], const char resource[], uint32_t attribute, NiFpga_Session* session) override;
  NiFpga_Status ReleaseFifoElements(NiFpga_Session session, uint32_t fifo, size_t elements) override;
  NiFpga_Status Reset(NiFpga_Session session) override;
  NiFpga_Status Run(NiFpga_Session session, uint32_t attribute) override;
  NiFpga_Status StartFifo(NiFpga_Session session, uint32_t fifo) override;
  NiFpga_Status StopFifo(NiFpga_Session session, uint32_t fifo) override;
  NiFpga_Status UnreserveFifo(NiFpga_Session session, uint32_t fifo) override;

 private:
  using AbortPtr = decltype(&NiFpga_Abort);
  using ClosePtr = decltype(&NiFpga_Close);
  using CloseHostMemoryBufferPtr = decltype(&NiFpga_CloseHostMemoryBuffer);
  using CloseLowLatencyBufferPtr = decltype(&NiFpga_CloseLowLatencyBuffer);
  using CommitFifoConfigurationPtr = decltype(&NiFpga_CommitFifoConfiguration);
  using DownloadPtr = decltype(&NiFpga_Download);
  using FinalizePtr = decltype(&NiFpga_Finalize);
  using InitializePtr = decltype(&NiFpga_Initialize);
  using OpenPtr = decltype(&NiFpga_Open);
  using ReleaseFifoElementsPtr = decltype(&NiFpga_ReleaseFifoElements);
  using ResetPtr = decltype(&NiFpga_Reset);
  using RunPtr = decltype(&NiFpga_Run);
  using StartFifoPtr = decltype(&NiFpga_StartFifo);
  using StopFifoPtr = decltype(&NiFpga_StopFifo);
  using UnreserveFifoPtr = decltype(&NiFpga_UnreserveFifo);

  typedef struct FunctionPointers {
    AbortPtr Abort;
    ClosePtr Close;
    CloseHostMemoryBufferPtr CloseHostMemoryBuffer;
    CloseLowLatencyBufferPtr CloseLowLatencyBuffer;
    CommitFifoConfigurationPtr CommitFifoConfiguration;
    DownloadPtr Download;
    FinalizePtr Finalize;
    InitializePtr Initialize;
    OpenPtr Open;
    ReleaseFifoElementsPtr ReleaseFifoElements;
    ResetPtr Reset;
    RunPtr Run;
    StartFifoPtr StartFifo;
    StopFifoPtr StopFifo;
    UnreserveFifoPtr UnreserveFifo;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nifpga_grpc

#endif  // NIFPGA_GRPC_LIBRARY_H
