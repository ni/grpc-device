
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-FPGA.
//---------------------------------------------------------------------
#include "nifpga_client.h"

#include <grpcpp/grpcpp.h>

#include <nifpga.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nifpga_grpc::experimental::client {

AbortResponse
abort(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = AbortRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = AbortResponse{};

  raise_if_error(
      stub->Abort(&context, request, &response),
      context);

  return response;
}

AcknowledgeIrqsResponse
acknowledge_irqs(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& irqs)
{
  ::grpc::ClientContext context;

  auto request = AcknowledgeIrqsRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_irqs(irqs);

  auto response = AcknowledgeIrqsResponse{};

  raise_if_error(
      stub->AcknowledgeIrqs(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& session, const simple_variant<CloseAttribute, pb::uint32>& attribute)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_session()->CopyFrom(session);
  const auto attribute_ptr = attribute.get_if<CloseAttribute>();
  const auto attribute_raw_ptr = attribute.get_if<pb::uint32>();
  if (attribute_ptr) {
    request.set_attribute(*attribute_ptr);
  }
  else if (attribute_raw_ptr) {
    request.set_attribute_raw(*attribute_raw_ptr);
  }

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

CommitFifoConfigurationResponse
commit_fifo_configuration(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo)
{
  ::grpc::ClientContext context;

  auto request = CommitFifoConfigurationRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);

  auto response = CommitFifoConfigurationResponse{};

  raise_if_error(
      stub->CommitFifoConfiguration(&context, request, &response),
      context);

  return response;
}

ConfigureFifoResponse
configure_fifo(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& depth)
{
  ::grpc::ClientContext context;

  auto request = ConfigureFifoRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_depth(depth);

  auto response = ConfigureFifoResponse{};

  raise_if_error(
      stub->ConfigureFifo(&context, request, &response),
      context);

  return response;
}

ConfigureFifo2Response
configure_fifo2(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& requested_depth)
{
  ::grpc::ClientContext context;

  auto request = ConfigureFifo2Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_requested_depth(requested_depth);

  auto response = ConfigureFifo2Response{};

  raise_if_error(
      stub->ConfigureFifo2(&context, request, &response),
      context);

  return response;
}

DownloadResponse
download(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = DownloadRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = DownloadResponse{};

  raise_if_error(
      stub->Download(&context, request, &response),
      context);

  return response;
}

FindFifoResponse
find_fifo(const StubPtr& stub, const nidevice_grpc::Session& session, const std::string& fifo_name)
{
  ::grpc::ClientContext context;

  auto request = FindFifoRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo_name(fifo_name);

  auto response = FindFifoResponse{};

  raise_if_error(
      stub->FindFifo(&context, request, &response),
      context);

  return response;
}

FindRegisterResponse
find_register(const StubPtr& stub, const nidevice_grpc::Session& session, const std::string& register_name)
{
  ::grpc::ClientContext context;

  auto request = FindRegisterRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_register_name(register_name);

  auto response = FindRegisterResponse{};

  raise_if_error(
      stub->FindRegister(&context, request, &response),
      context);

  return response;
}

GetBitfileSignatureResponse
get_bitfile_signature(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = GetBitfileSignatureRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = GetBitfileSignatureResponse{};

  raise_if_error(
      stub->GetBitfileSignature(&context, request, &response),
      context);

  return response;
}

GetFifoPropertyI32Response
get_fifo_property_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property)
{
  ::grpc::ClientContext context;

  auto request = GetFifoPropertyI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }

  auto response = GetFifoPropertyI32Response{};

  raise_if_error(
      stub->GetFifoPropertyI32(&context, request, &response),
      context);

  return response;
}

GetFifoPropertyI64Response
get_fifo_property_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property)
{
  ::grpc::ClientContext context;

  auto request = GetFifoPropertyI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }

  auto response = GetFifoPropertyI64Response{};

  raise_if_error(
      stub->GetFifoPropertyI64(&context, request, &response),
      context);

  return response;
}

GetFifoPropertyU32Response
get_fifo_property_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property)
{
  ::grpc::ClientContext context;

  auto request = GetFifoPropertyU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }

  auto response = GetFifoPropertyU32Response{};

  raise_if_error(
      stub->GetFifoPropertyU32(&context, request, &response),
      context);

  return response;
}

GetFifoPropertyU64Response
get_fifo_property_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property)
{
  ::grpc::ClientContext context;

  auto request = GetFifoPropertyU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }

  auto response = GetFifoPropertyU64Response{};

  raise_if_error(
      stub->GetFifoPropertyU64(&context, request, &response),
      context);

  return response;
}

GetFpgaViStateResponse
get_fpga_vi_state(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = GetFpgaViStateRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = GetFpgaViStateResponse{};

  raise_if_error(
      stub->GetFpgaViState(&context, request, &response),
      context);

  return response;
}

OpenResponse
open(const StubPtr& stub, const std::string& bitfile, const std::string& signature, const std::string& resource, const simple_variant<OpenAttribute, std::int32_t>& attribute, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = OpenRequest{};
  request.set_bitfile(bitfile);
  request.set_signature(signature);
  request.set_resource(resource);
  const auto attribute_ptr = attribute.get_if<OpenAttribute>();
  const auto attribute_raw_ptr = attribute.get_if<std::int32_t>();
  if (attribute_ptr) {
    request.set_attribute_mapped(*attribute_ptr);
  }
  else if (attribute_raw_ptr) {
    request.set_attribute_raw(*attribute_raw_ptr);
  }
  request.set_initialization_behavior(initialization_behavior);

  auto response = OpenResponse{};

  raise_if_error(
      stub->Open(&context, request, &response),
      context);

  return response;
}

ReadArrayBoolResponse
read_array_bool(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayBoolRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayBoolResponse{};

  raise_if_error(
      stub->ReadArrayBool(&context, request, &response),
      context);

  return response;
}

ReadArrayDblResponse
read_array_dbl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayDblRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayDblResponse{};

  raise_if_error(
      stub->ReadArrayDbl(&context, request, &response),
      context);

  return response;
}

ReadArrayI16Response
read_array_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayI16Response{};

  raise_if_error(
      stub->ReadArrayI16(&context, request, &response),
      context);

  return response;
}

BeginReadArrayI16Response
begin_read_array_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayI16Response{};

  raise_if_error(
      stub->BeginReadArrayI16(&context, request, &response),
      context);

  return response;
}

ReadArrayI32Response
read_array_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayI32Response{};

  raise_if_error(
      stub->ReadArrayI32(&context, request, &response),
      context);

  return response;
}

BeginReadArrayI32Response
begin_read_array_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayI32Response{};

  raise_if_error(
      stub->BeginReadArrayI32(&context, request, &response),
      context);

  return response;
}

ReadArrayI64Response
read_array_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayI64Response{};

  raise_if_error(
      stub->ReadArrayI64(&context, request, &response),
      context);

  return response;
}

BeginReadArrayI64Response
begin_read_array_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayI64Response{};

  raise_if_error(
      stub->BeginReadArrayI64(&context, request, &response),
      context);

  return response;
}

ReadArrayI8Response
read_array_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayI8Response{};

  raise_if_error(
      stub->ReadArrayI8(&context, request, &response),
      context);

  return response;
}

BeginReadArrayI8Response
begin_read_array_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayI8Response{};

  raise_if_error(
      stub->BeginReadArrayI8(&context, request, &response),
      context);

  return response;
}

ReadArraySglResponse
read_array_sgl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArraySglRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArraySglResponse{};

  raise_if_error(
      stub->ReadArraySgl(&context, request, &response),
      context);

  return response;
}

ReadArrayU16Response
read_array_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayU16Response{};

  raise_if_error(
      stub->ReadArrayU16(&context, request, &response),
      context);

  return response;
}

BeginReadArrayU16Response
begin_read_array_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayU16Response{};

  raise_if_error(
      stub->BeginReadArrayU16(&context, request, &response),
      context);

  return response;
}

ReadArrayU32Response
read_array_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayU32Response{};

  raise_if_error(
      stub->ReadArrayU32(&context, request, &response),
      context);

  return response;
}

BeginReadArrayU32Response
begin_read_array_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayU32Response{};

  raise_if_error(
      stub->BeginReadArrayU32(&context, request, &response),
      context);

  return response;
}

ReadArrayU64Response
read_array_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayU64Response{};

  raise_if_error(
      stub->ReadArrayU64(&context, request, &response),
      context);

  return response;
}

BeginReadArrayU64Response
begin_read_array_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayU64Response{};

  raise_if_error(
      stub->BeginReadArrayU64(&context, request, &response),
      context);

  return response;
}

ReadArrayU8Response
read_array_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = ReadArrayU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = ReadArrayU8Response{};

  raise_if_error(
      stub->ReadArrayU8(&context, request, &response),
      context);

  return response;
}

BeginReadArrayU8Response
begin_read_array_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator, const pb::uint32& size)
{
  ::grpc::ClientContext context;

  auto request = BeginReadArrayU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);
  request.set_size(size);

  auto response = BeginReadArrayU8Response{};

  raise_if_error(
      stub->BeginReadArrayU8(&context, request, &response),
      context);

  return response;
}

ReadBoolResponse
read_bool(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadBoolRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadBoolResponse{};

  raise_if_error(
      stub->ReadBool(&context, request, &response),
      context);

  return response;
}

ReadDblResponse
read_dbl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadDblRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadDblResponse{};

  raise_if_error(
      stub->ReadDbl(&context, request, &response),
      context);

  return response;
}

ReadFifoBoolResponse
read_fifo_bool(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoBoolRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoBoolResponse{};

  raise_if_error(
      stub->ReadFifoBool(&context, request, &response),
      context);

  return response;
}

ReadFifoDblResponse
read_fifo_dbl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoDblRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoDblResponse{};

  raise_if_error(
      stub->ReadFifoDbl(&context, request, &response),
      context);

  return response;
}

ReadFifoI16Response
read_fifo_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoI16Response{};

  raise_if_error(
      stub->ReadFifoI16(&context, request, &response),
      context);

  return response;
}

ReadFifoI32Response
read_fifo_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoI32Response{};

  raise_if_error(
      stub->ReadFifoI32(&context, request, &response),
      context);

  return response;
}

ReadFifoI64Response
read_fifo_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoI64Response{};

  raise_if_error(
      stub->ReadFifoI64(&context, request, &response),
      context);

  return response;
}

ReadFifoI8Response
read_fifo_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoI8Response{};

  raise_if_error(
      stub->ReadFifoI8(&context, request, &response),
      context);

  return response;
}

ReadFifoSglResponse
read_fifo_sgl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoSglRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoSglResponse{};

  raise_if_error(
      stub->ReadFifoSgl(&context, request, &response),
      context);

  return response;
}

ReadFifoU16Response
read_fifo_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoU16Response{};

  raise_if_error(
      stub->ReadFifoU16(&context, request, &response),
      context);

  return response;
}

ReadFifoU32Response
read_fifo_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoU32Response{};

  raise_if_error(
      stub->ReadFifoU32(&context, request, &response),
      context);

  return response;
}

ReadFifoU64Response
read_fifo_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoU64Response{};

  raise_if_error(
      stub->ReadFifoU64(&context, request, &response),
      context);

  return response;
}

ReadFifoU8Response
read_fifo_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& number_of_elements, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = ReadFifoU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_number_of_elements(number_of_elements);
  request.set_timeout(timeout);

  auto response = ReadFifoU8Response{};

  raise_if_error(
      stub->ReadFifoU8(&context, request, &response),
      context);

  return response;
}

ReadI16Response
read_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadI16Response{};

  raise_if_error(
      stub->ReadI16(&context, request, &response),
      context);

  return response;
}

BeginReadI16Response
begin_read_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadI16Response{};

  raise_if_error(
      stub->BeginReadI16(&context, request, &response),
      context);

  return response;
}

ReadI32Response
read_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadI32Response{};

  raise_if_error(
      stub->ReadI32(&context, request, &response),
      context);

  return response;
}

BeginReadI32Response
begin_read_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadI32Response{};

  raise_if_error(
      stub->BeginReadI32(&context, request, &response),
      context);

  return response;
}

ReadI64Response
read_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadI64Response{};

  raise_if_error(
      stub->ReadI64(&context, request, &response),
      context);

  return response;
}

BeginReadI64Response
begin_read_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadI64Response{};

  raise_if_error(
      stub->BeginReadI64(&context, request, &response),
      context);

  return response;
}

ReadI8Response
read_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadI8Response{};

  raise_if_error(
      stub->ReadI8(&context, request, &response),
      context);

  return response;
}

BeginReadI8Response
begin_read_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadI8Response{};

  raise_if_error(
      stub->BeginReadI8(&context, request, &response),
      context);

  return response;
}

ReadSglResponse
read_sgl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadSglRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadSglResponse{};

  raise_if_error(
      stub->ReadSgl(&context, request, &response),
      context);

  return response;
}

ReadU16Response
read_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadU16Response{};

  raise_if_error(
      stub->ReadU16(&context, request, &response),
      context);

  return response;
}

BeginReadU16Response
begin_read_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadU16Response{};

  raise_if_error(
      stub->BeginReadU16(&context, request, &response),
      context);

  return response;
}

ReadU32Response
read_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadU32Response{};

  raise_if_error(
      stub->ReadU32(&context, request, &response),
      context);

  return response;
}

BeginReadU32Response
begin_read_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadU32Response{};

  raise_if_error(
      stub->BeginReadU32(&context, request, &response),
      context);

  return response;
}

ReadU64Response
read_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadU64Response{};

  raise_if_error(
      stub->ReadU64(&context, request, &response),
      context);

  return response;
}

BeginReadU64Response
begin_read_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadU64Response{};

  raise_if_error(
      stub->BeginReadU64(&context, request, &response),
      context);

  return response;
}

ReadU8Response
read_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = ReadU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = ReadU8Response{};

  raise_if_error(
      stub->ReadU8(&context, request, &response),
      context);

  return response;
}

BeginReadU8Response
begin_read_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& indicator)
{
  ::grpc::ClientContext context;

  auto request = BeginReadU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_indicator(indicator);

  auto response = BeginReadU8Response{};

  raise_if_error(
      stub->BeginReadU8(&context, request, &response),
      context);

  return response;
}

ReleaseFifoElementsResponse
release_fifo_elements(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const pb::uint32& elements)
{
  ::grpc::ClientContext context;

  auto request = ReleaseFifoElementsRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  request.set_elements(elements);

  auto response = ReleaseFifoElementsResponse{};

  raise_if_error(
      stub->ReleaseFifoElements(&context, request, &response),
      context);

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response),
      context);

  return response;
}

RunResponse
run(const StubPtr& stub, const nidevice_grpc::Session& session, const simple_variant<RunAttribute, pb::uint32>& attribute)
{
  ::grpc::ClientContext context;

  auto request = RunRequest{};
  request.mutable_session()->CopyFrom(session);
  const auto attribute_ptr = attribute.get_if<RunAttribute>();
  const auto attribute_raw_ptr = attribute.get_if<pb::uint32>();
  if (attribute_ptr) {
    request.set_attribute(*attribute_ptr);
  }
  else if (attribute_raw_ptr) {
    request.set_attribute_raw(*attribute_raw_ptr);
  }

  auto response = RunResponse{};

  raise_if_error(
      stub->Run(&context, request, &response),
      context);

  return response;
}

SetFifoPropertyI32Response
set_fifo_property_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property, const pb::int32& value)
{
  ::grpc::ClientContext context;

  auto request = SetFifoPropertyI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }
  request.set_value(value);

  auto response = SetFifoPropertyI32Response{};

  raise_if_error(
      stub->SetFifoPropertyI32(&context, request, &response),
      context);

  return response;
}

SetFifoPropertyI64Response
set_fifo_property_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property, const pb::int64& value)
{
  ::grpc::ClientContext context;

  auto request = SetFifoPropertyI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }
  request.set_value(value);

  auto response = SetFifoPropertyI64Response{};

  raise_if_error(
      stub->SetFifoPropertyI64(&context, request, &response),
      context);

  return response;
}

SetFifoPropertyU32Response
set_fifo_property_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property, const pb::uint32& value)
{
  ::grpc::ClientContext context;

  auto request = SetFifoPropertyU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }
  request.set_value(value);

  auto response = SetFifoPropertyU32Response{};

  raise_if_error(
      stub->SetFifoPropertyU32(&context, request, &response),
      context);

  return response;
}

SetFifoPropertyU64Response
set_fifo_property_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const simple_variant<FifoProperty, pb::uint32>& property, const pb::uint64& value)
{
  ::grpc::ClientContext context;

  auto request = SetFifoPropertyU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  const auto property_ptr = property.get_if<FifoProperty>();
  const auto property_raw_ptr = property.get_if<pb::uint32>();
  if (property_ptr) {
    request.set_property(*property_ptr);
  }
  else if (property_raw_ptr) {
    request.set_property_raw(*property_raw_ptr);
  }
  request.set_value(value);

  auto response = SetFifoPropertyU64Response{};

  raise_if_error(
      stub->SetFifoPropertyU64(&context, request, &response),
      context);

  return response;
}

StartFifoResponse
start_fifo(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo)
{
  ::grpc::ClientContext context;

  auto request = StartFifoRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);

  auto response = StartFifoResponse{};

  raise_if_error(
      stub->StartFifo(&context, request, &response),
      context);

  return response;
}

StopFifoResponse
stop_fifo(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo)
{
  ::grpc::ClientContext context;

  auto request = StopFifoRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);

  auto response = StopFifoResponse{};

  raise_if_error(
      stub->StopFifo(&context, request, &response),
      context);

  return response;
}

UnreserveFifoResponse
unreserve_fifo(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo)
{
  ::grpc::ClientContext context;

  auto request = UnreserveFifoRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);

  auto response = UnreserveFifoResponse{};

  raise_if_error(
      stub->UnreserveFifo(&context, request, &response),
      context);

  return response;
}

WaitOnIrqsResponse
wait_on_irqs(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& irqs, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WaitOnIrqsRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_irqs(irqs);
  request.set_timeout(timeout);

  auto response = WaitOnIrqsResponse{};

  raise_if_error(
      stub->WaitOnIrqs(&context, request, &response),
      context);

  return response;
}

WriteArrayBoolResponse
write_array_bool(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<bool>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayBoolRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayBoolResponse{};

  raise_if_error(
      stub->WriteArrayBool(&context, request, &response),
      context);

  return response;
}

WriteArrayDblResponse
write_array_dbl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<double>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayDblRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayDblResponse{};

  raise_if_error(
      stub->WriteArrayDbl(&context, request, &response),
      context);

  return response;
}

WriteArrayI16Response
write_array_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::int32>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayI16Response{};

  raise_if_error(
      stub->WriteArrayI16(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayI16Response
begin_write_array_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayI16Response{};

  raise_if_error(
      stub->BeginWriteArrayI16(&context, request, &response),
      context);

  return response;
}

WriteArrayI32Response
write_array_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::int32>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayI32Response{};

  raise_if_error(
      stub->WriteArrayI32(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayI32Response
begin_write_array_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayI32Response{};

  raise_if_error(
      stub->BeginWriteArrayI32(&context, request, &response),
      context);

  return response;
}

WriteArrayI64Response
write_array_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::int64>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayI64Response{};

  raise_if_error(
      stub->WriteArrayI64(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayI64Response
begin_write_array_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayI64Response{};

  raise_if_error(
      stub->BeginWriteArrayI64(&context, request, &response),
      context);

  return response;
}

WriteArrayI8Response
write_array_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::int32>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayI8Response{};

  raise_if_error(
      stub->WriteArrayI8(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayI8Response
begin_write_array_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayI8Response{};

  raise_if_error(
      stub->BeginWriteArrayI8(&context, request, &response),
      context);

  return response;
}

WriteArraySglResponse
write_array_sgl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<float>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArraySglRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArraySglResponse{};

  raise_if_error(
      stub->WriteArraySgl(&context, request, &response),
      context);

  return response;
}

WriteArrayU16Response
write_array_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::uint32>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayU16Response{};

  raise_if_error(
      stub->WriteArrayU16(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayU16Response
begin_write_array_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayU16Response{};

  raise_if_error(
      stub->BeginWriteArrayU16(&context, request, &response),
      context);

  return response;
}

WriteArrayU32Response
write_array_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::uint32>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayU32Response{};

  raise_if_error(
      stub->WriteArrayU32(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayU32Response
begin_write_array_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayU32Response{};

  raise_if_error(
      stub->BeginWriteArrayU32(&context, request, &response),
      context);

  return response;
}

WriteArrayU64Response
write_array_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::uint64>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayU64Response{};

  raise_if_error(
      stub->WriteArrayU64(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayU64Response
begin_write_array_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayU64Response{};

  raise_if_error(
      stub->BeginWriteArrayU64(&context, request, &response),
      context);

  return response;
}

WriteArrayU8Response
write_array_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const std::vector<pb::uint32>& array)
{
  ::grpc::ClientContext context;

  auto request = WriteArrayU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  copy_array(array, request.mutable_array());

  auto response = WriteArrayU8Response{};

  raise_if_error(
      stub->WriteArrayU8(&context, request, &response),
      context);

  return response;
}

BeginWriteArrayU8Response
begin_write_array_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteArrayU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteArrayU8Response{};

  raise_if_error(
      stub->BeginWriteArrayU8(&context, request, &response),
      context);

  return response;
}

WriteBoolResponse
write_bool(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const bool& value)
{
  ::grpc::ClientContext context;

  auto request = WriteBoolRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteBoolResponse{};

  raise_if_error(
      stub->WriteBool(&context, request, &response),
      context);

  return response;
}

WriteDblResponse
write_dbl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const double& value)
{
  ::grpc::ClientContext context;

  auto request = WriteDblRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteDblResponse{};

  raise_if_error(
      stub->WriteDbl(&context, request, &response),
      context);

  return response;
}

WriteFifoBoolResponse
write_fifo_bool(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<bool>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoBoolRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoBoolResponse{};

  raise_if_error(
      stub->WriteFifoBool(&context, request, &response),
      context);

  return response;
}

WriteFifoDblResponse
write_fifo_dbl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<double>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoDblRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoDblResponse{};

  raise_if_error(
      stub->WriteFifoDbl(&context, request, &response),
      context);

  return response;
}

WriteFifoI16Response
write_fifo_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::int32>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoI16Response{};

  raise_if_error(
      stub->WriteFifoI16(&context, request, &response),
      context);

  return response;
}

WriteFifoI32Response
write_fifo_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::int32>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoI32Response{};

  raise_if_error(
      stub->WriteFifoI32(&context, request, &response),
      context);

  return response;
}

WriteFifoI64Response
write_fifo_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::int64>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoI64Response{};

  raise_if_error(
      stub->WriteFifoI64(&context, request, &response),
      context);

  return response;
}

WriteFifoI8Response
write_fifo_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::int32>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoI8Response{};

  raise_if_error(
      stub->WriteFifoI8(&context, request, &response),
      context);

  return response;
}

WriteFifoSglResponse
write_fifo_sgl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<float>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoSglRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoSglResponse{};

  raise_if_error(
      stub->WriteFifoSgl(&context, request, &response),
      context);

  return response;
}

WriteFifoU16Response
write_fifo_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::uint32>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoU16Response{};

  raise_if_error(
      stub->WriteFifoU16(&context, request, &response),
      context);

  return response;
}

WriteFifoU32Response
write_fifo_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::uint32>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoU32Response{};

  raise_if_error(
      stub->WriteFifoU32(&context, request, &response),
      context);

  return response;
}

WriteFifoU64Response
write_fifo_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::uint64>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoU64Response{};

  raise_if_error(
      stub->WriteFifoU64(&context, request, &response),
      context);

  return response;
}

WriteFifoU8Response
write_fifo_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& fifo, const std::vector<pb::uint32>& data, const pb::uint32& timeout)
{
  ::grpc::ClientContext context;

  auto request = WriteFifoU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_fifo(fifo);
  copy_array(data, request.mutable_data());
  request.set_timeout(timeout);

  auto response = WriteFifoU8Response{};

  raise_if_error(
      stub->WriteFifoU8(&context, request, &response),
      context);

  return response;
}

WriteI16Response
write_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::int32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteI16Response{};

  raise_if_error(
      stub->WriteI16(&context, request, &response),
      context);

  return response;
}

BeginWriteI16Response
begin_write_i16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteI16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteI16Response{};

  raise_if_error(
      stub->BeginWriteI16(&context, request, &response),
      context);

  return response;
}

WriteI32Response
write_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::int32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteI32Response{};

  raise_if_error(
      stub->WriteI32(&context, request, &response),
      context);

  return response;
}

BeginWriteI32Response
begin_write_i32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteI32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteI32Response{};

  raise_if_error(
      stub->BeginWriteI32(&context, request, &response),
      context);

  return response;
}

WriteI64Response
write_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::int64& value)
{
  ::grpc::ClientContext context;

  auto request = WriteI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteI64Response{};

  raise_if_error(
      stub->WriteI64(&context, request, &response),
      context);

  return response;
}

BeginWriteI64Response
begin_write_i64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteI64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteI64Response{};

  raise_if_error(
      stub->BeginWriteI64(&context, request, &response),
      context);

  return response;
}

WriteI8Response
write_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::int32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteI8Response{};

  raise_if_error(
      stub->WriteI8(&context, request, &response),
      context);

  return response;
}

BeginWriteI8Response
begin_write_i8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteI8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteI8Response{};

  raise_if_error(
      stub->BeginWriteI8(&context, request, &response),
      context);

  return response;
}

WriteSglResponse
write_sgl(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const float& value)
{
  ::grpc::ClientContext context;

  auto request = WriteSglRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteSglResponse{};

  raise_if_error(
      stub->WriteSgl(&context, request, &response),
      context);

  return response;
}

WriteU16Response
write_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::uint32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteU16Response{};

  raise_if_error(
      stub->WriteU16(&context, request, &response),
      context);

  return response;
}

BeginWriteU16Response
begin_write_u16(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteU16Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteU16Response{};

  raise_if_error(
      stub->BeginWriteU16(&context, request, &response),
      context);

  return response;
}

WriteU32Response
write_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::uint32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteU32Response{};

  raise_if_error(
      stub->WriteU32(&context, request, &response),
      context);

  return response;
}

BeginWriteU32Response
begin_write_u32(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteU32Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteU32Response{};

  raise_if_error(
      stub->BeginWriteU32(&context, request, &response),
      context);

  return response;
}

WriteU64Response
write_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::uint64& value)
{
  ::grpc::ClientContext context;

  auto request = WriteU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteU64Response{};

  raise_if_error(
      stub->WriteU64(&context, request, &response),
      context);

  return response;
}

BeginWriteU64Response
begin_write_u64(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteU64Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteU64Response{};

  raise_if_error(
      stub->BeginWriteU64(&context, request, &response),
      context);

  return response;
}

WriteU8Response
write_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control, const pb::uint32& value)
{
  ::grpc::ClientContext context;

  auto request = WriteU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);
  request.set_value(value);

  auto response = WriteU8Response{};

  raise_if_error(
      stub->WriteU8(&context, request, &response),
      context);

  return response;
}

BeginWriteU8Response
begin_write_u8(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& control)
{
  ::grpc::ClientContext context;

  auto request = BeginWriteU8Request{};
  request.mutable_session()->CopyFrom(session);
  request.set_control(control);

  auto response = BeginWriteU8Response{};

  raise_if_error(
      stub->BeginWriteU8(&context, request, &response),
      context);

  return response;
}


} // namespace nifpga_grpc::experimental::client
