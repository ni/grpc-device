
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-FPGA.
//---------------------------------------------------------------------
#include "nifpga_client.h"

#include <grpcpp/grpcpp.h>

#include <nifpga.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nifpga_grpc::experimental::client {

AbortResponse
abort(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = AbortRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = AbortResponse{};

  raise_if_error(
      stub->Abort(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& attribute)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_attribute(attribute);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

DownloadResponse
download(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = DownloadRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = DownloadResponse{};

  raise_if_error(
      stub->Download(&context, request, &response),
      context);

  return response;
}

OpenResponse
open(const StubPtr& stub, const std::string& bitfile, const std::string& signature, const std::string& resource, const pb::uint32& attribute, const nidevice_grpc::SessionInitializationBehavior& initialization_behavior)
{
  ::grpc::ClientContext context;

  auto request = OpenRequest{};
  request.set_bitfile(bitfile);
  request.set_signature(signature);
  request.set_resource(resource);
  request.set_attribute(attribute);
  request.set_initialization_behavior(initialization_behavior);

  auto response = OpenResponse{};

  raise_if_error(
      stub->Open(&context, request, &response),
      context);

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& session)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_session()->CopyFrom(session);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response),
      context);

  return response;
}

RunResponse
run(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& attribute)
{
  ::grpc::ClientContext context;

  auto request = RunRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_attribute(attribute);

  auto response = RunResponse{};

  raise_if_error(
      stub->Run(&context, request, &response),
      context);

  return response;
}


} // namespace nifpga_grpc::experimental::client
