//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXSPECAN-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nirfmxspecan_restricted_library.h"
#include <server/shared_library.h>

#include <memory>

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxSpecAn.dll";
#else
static const char* kLibraryName = "libnirfmxspecan.so.1";
#endif

namespace nirfmxspecan_restricted_grpc {

NiRFmxSpecAnRestrictedLibrary::NiRFmxSpecAnRestrictedLibrary() : NiRFmxSpecAnRestrictedLibrary(std::make_shared<nidevice_grpc::SharedLibrary>()) {}

NiRFmxSpecAnRestrictedLibrary::NiRFmxSpecAnRestrictedLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library) : shared_library_(shared_library)
{
  shared_library_->set_library_name(kLibraryName);
  shared_library_->load();
  bool loaded = shared_library_->is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.AMPMLoadReferenceWaveformFromTDMSFile = reinterpret_cast<AMPMLoadReferenceWaveformFromTDMSFilePtr>(shared_library_->get_function_pointer("RFmxSpecAn_AMPMLoadReferenceWaveformFromTDMSFile"));
  function_pointers_.CacheResult = reinterpret_cast<CacheResultPtr>(shared_library_->get_function_pointer("RFmxSpecAn_CacheResult"));
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_->get_function_pointer("RFmxSpecAn_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_->get_function_pointer("RFmxSpecAn_GetErrorString"));
  function_pointers_.IQFetchDataOverrideBehavior = reinterpret_cast<IQFetchDataOverrideBehaviorPtr>(shared_library_->get_function_pointer("RFmxSpecAn_IQFetchDataOverrideBehavior"));
}

NiRFmxSpecAnRestrictedLibrary::~NiRFmxSpecAnRestrictedLibrary()
{
}

::grpc::Status NiRFmxSpecAnRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_->function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxSpecAnRestrictedLibrary::AMPMLoadReferenceWaveformFromTDMSFile(niRFmxInstrHandle instrumentHandle, char selectorString[], char waveformFilePath[], int32 idleDurationPresent, int32 signalType, int32 waveformIndex)
{
  if (!function_pointers_.AMPMLoadReferenceWaveformFromTDMSFile) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_AMPMLoadReferenceWaveformFromTDMSFile.");
  }
  return function_pointers_.AMPMLoadReferenceWaveformFromTDMSFile(instrumentHandle, selectorString, waveformFilePath, idleDurationPresent, signalType, waveformIndex);
}

int32 NiRFmxSpecAnRestrictedLibrary::CacheResult(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 selectorStringOutSize, char selectorStringOut[])
{
  if (!function_pointers_.CacheResult) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_CacheResult.");
  }
  return function_pointers_.CacheResult(instrumentHandle, selectorString, selectorStringOutSize, selectorStringOut);
}

int32 NiRFmxSpecAnRestrictedLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxSpecAnRestrictedLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxSpecAnRestrictedLibrary::IQFetchDataOverrideBehavior(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 recordToFetch, int64 samplesToRead, int32 deleteOnFetch, float64* t0, float64* dt, NIComplexSingle data[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.IQFetchDataOverrideBehavior) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxSpecAn_IQFetchDataOverrideBehavior.");
  }
  return function_pointers_.IQFetchDataOverrideBehavior(instrumentHandle, selectorString, timeout, recordToFetch, samplesToRead, deleteOnFetch, t0, dt, data, arraySize, actualArraySize);
}

}  // namespace nirfmxspecan_restricted_grpc
