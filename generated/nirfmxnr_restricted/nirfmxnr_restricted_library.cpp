//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-RFMXNR-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nirfmxnr_restricted_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "niRFmxNR.dll";
#else
static const char* kLibraryName = "libnirfmxnr.so.1";
#endif

namespace nirfmxnr_restricted_grpc {

NiRFmxNRRestrictedLibrary::NiRFmxNRRestrictedLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.GetError = reinterpret_cast<GetErrorPtr>(shared_library_.get_function_pointer("RFmxNR_GetError"));
  function_pointers_.GetErrorString = reinterpret_cast<GetErrorStringPtr>(shared_library_.get_function_pointer("RFmxNR_GetErrorString"));
  function_pointers_.ModAccFetchTransientPeriodLocationsTrace = reinterpret_cast<ModAccFetchTransientPeriodLocationsTracePtr>(shared_library_.get_function_pointer("RFmxNR_ModAccFetchTransientPeriodLocationsTrace"));
}

NiRFmxNRRestrictedLibrary::~NiRFmxNRRestrictedLibrary()
{
}

::grpc::Status NiRFmxNRRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32 NiRFmxNRRestrictedLibrary::GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetError) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetError.");
  }
  return function_pointers_.GetError(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxNRRestrictedLibrary::GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[])
{
  if (!function_pointers_.GetErrorString) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_GetErrorString.");
  }
  return function_pointers_.GetErrorString(instrumentHandle, errorCode, errorDescriptionBufferSize, errorDescription);
}

int32 NiRFmxNRRestrictedLibrary::ModAccFetchTransientPeriodLocationsTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 transientPeriodLocations[], int32 arraySize, int32* actualArraySize)
{
  if (!function_pointers_.ModAccFetchTransientPeriodLocationsTrace) {
    throw nidevice_grpc::LibraryLoadException("Could not find RFmxNR_ModAccFetchTransientPeriodLocationsTrace.");
  }
  return function_pointers_.ModAccFetchTransientPeriodLocationsTrace(instrumentHandle, selectorString, timeout, x0, dx, transientPeriodLocations, arraySize, actualArraySize);
}

}  // namespace nirfmxnr_restricted_grpc
