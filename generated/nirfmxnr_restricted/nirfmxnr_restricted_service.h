
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFMXNR-RESTRICTED Metadata
//---------------------------------------------------------------------
#ifndef NIRFMXNR_RESTRICTED_GRPC_SERVICE_H
#define NIRFMXNR_RESTRICTED_GRPC_SERVICE_H

#include <nirfmxnr_restricted.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfmxnr_restricted_library_interface.h"

namespace nirfmxnr_restricted_grpc {

struct NiRFmxNRRestrictedFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiRFmxNRRestrictedFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiRFmxNRRestrictedService final : public NiRFmxNRRestricted::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<niRFmxInstrHandle>>;

  NiRFmxNRRestrictedService(
    NiRFmxNRRestrictedLibraryInterface* library,
    ResourceRepositorySharedPtr resource_repository,
    const NiRFmxNRRestrictedFeatureToggles& feature_toggles = {});
  virtual ~NiRFmxNRRestrictedService();
  
  ::grpc::Status ModAccFetchTransientPeriodLocationsTrace(::grpc::ServerContext* context, const ModAccFetchTransientPeriodLocationsTraceRequest* request, ModAccFetchTransientPeriodLocationsTraceResponse* response) override;
private:
  NiRFmxNRRestrictedLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;
  ::grpc::Status ConvertApiErrorStatusForNiRFmxInstrHandle(::grpc::ServerContext* context, int32_t status, niRFmxInstrHandle instrumentHandle);

  NiRFmxNRRestrictedFeatureToggles feature_toggles_;
};

} // namespace nirfmxnr_restricted_grpc

#endif  // NIRFMXNR_RESTRICTED_GRPC_SERVICE_H
