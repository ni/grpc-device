//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-rfmxpulse
//---------------------------------------------------------------------
#ifndef NIRFMXPULSE_GRPC_LIBRARY_H
#define NIRFMXPULSE_GRPC_LIBRARY_H

#include "nirfmxpulse_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxpulse_grpc {

class NiRFmxPulseLibrary : public nirfmxpulse_grpc::NiRFmxPulseLibraryInterface {
 public:
  NiRFmxPulseLibrary();
  explicit NiRFmxPulseLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxPulseLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 AbortMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 AnalyzeIQ1Waveform(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, NIComplexSingle iq[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AnalyzeIQ1WaveformSplit(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[], float64 x0, float64 dx, float32 iqi[], float32 iqq[], int32 arraySize, int32 reset, int64 reserved) override;
  int32 AutoLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 bandwidth, float64 measurementInterval, float64* referenceLevel) override;
  int32 BuildSignalString(char signalName[], char resultName[], int32 selectorStringLength, char selectorString[]) override;
  int32 Cfg1ReferenceWaveform(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, NIComplexSingle referenceWaveform[], int32 arraySize) override;
  int32 Cfg1ReferenceWaveformSplit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 x0, float64 dx, float32 referenceWaveformI[], float32 referenceWaveformQ[], int32 arraySize) override;
  int32 CfgDigitalEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char digitalEdgeSource[], int32 digitalEdge, float64 triggerDelay, int32 enableTrigger) override;
  int32 CfgExternalAttenuation(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 externalAttenuation) override;
  int32 CfgFrequency(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency) override;
  int32 CfgFrequencyReference(niRFmxInstrHandle instrumentHandle, char channelName[], char frequencyReferenceSource[], float64 frequencyReferenceFrequency) override;
  int32 CfgIQPowerEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], char iqPowerEdgeSource[], int32 iqPowerEdgeSlope, float64 iqPowerEdgeLevel, float64 triggerDelay, int32 triggerMinQuietTimeMode, float64 triggerMinQuietTimeDuration, int32 iqPowerEdgeLevelType, int32 enableTrigger) override;
  int32 CfgMechanicalAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 mechanicalAttenuationAuto, float64 mechanicalAttenuationValue) override;
  int32 CfgRF(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 centerFrequency, float64 referenceLevel, float64 externalAttenuation) override;
  int32 CfgRFAttenuation(niRFmxInstrHandle instrumentHandle, char channelName[], int32 rfAttenuationAuto, float64 rfAttenuationValue) override;
  int32 CfgReferenceLevel(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 referenceLevel) override;
  int32 CfgSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 triggerDelay, int32 enableTrigger) override;
  int32 CheckMeasurementStatus(niRFmxInstrHandle instrumentHandle, char selectorString[], int32* isDone) override;
  int32 ClearAllNamedResults(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 ClearNamedResult(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CloneSignalConfiguration(niRFmxInstrHandle instrumentHandle, char oldSignalName[], char newSignalName[]) override;
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) override;
  int32 Commit(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 CreateSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DeleteSignalConfiguration(niRFmxInstrHandle instrumentHandle, char signalName[]) override;
  int32 DisableTrigger(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 FetchAcquiredAmplitudeTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 arraySize, float64* sampleDuration, float32 amplitude[], int32 amplitudeArraySize, int32* amplitudeActualArraySize, int32 startIndex[], float64 startTimeStamp[], int32 startArraySize, int32* startActualArraySize) override;
  int32 FetchAmplitudeTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 amplitude[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchBurstIntrapulseStabilityTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 intrapulseAverageAmplitudeStability[], float32 intrapulseAveragePhaseStability[], float32 intrapulseAverageTotalStability[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchBurstSelectedPositionStabilityTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pulseAmplitudeStability[], float32 pulsePhaseStability[], float32 pulseTotalStability[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchFrequencyTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 frequency[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchIQTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, NIComplexSingle iqData[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchIQTraceSplit(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 iqDataI[], float32 iqDataQ[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchIntrapulseStabilityTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 intrapulseAmplitudeStability[], float32 intrapulsePhaseStability[], float32 intrapulseTotalStability[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchMultipleMeasurementPointsStabilityTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pulseAverageAmplitudeStability[], float32 pulseAveragePhaseStability[], float32 pulseAverageTotalStability[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchPhaseWrappedTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 wrappedPhase[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchPulseToPulseStabilityTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, int32 pulseIndex[], float64 pulseToPulseAmplitudeStability[], float64 pulseToPulsePhaseStability[], float64 pulseToPulseTotalStability[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchStabilityTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 pulseAmplitudeStability[], float32 pulsePhaseStability[], float32 pulseTotalStability[], int32 arraySize, int32* actualArraySize) override;
  int32 FetchTimeSidelobeTrace(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout, float64* x0, float64* dx, float32 timeSidelobe[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAllNamedResultNames(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultNames[], int32 resultNamesBufferSize, int32* actualResultNamesSize, int32* defaultResultExists) override;
  int32 GetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32* attrVal) override;
  int32 GetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64* attrVal) override;
  int32 GetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16* attrVal) override;
  int32 GetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32* attrVal) override;
  int32 GetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64* attrVal) override;
  int32 GetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8* attrVal) override;
  int32 GetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 arraySize, char attrVal[]) override;
  int32 GetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16* attrVal) override;
  int32 GetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32* attrVal) override;
  int32 GetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8* attrVal) override;
  int32 GetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize, int32* actualArraySize) override;
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) override;
  int32 InitializeFromNIRFSASession(uInt32 nirfsaSession, niRFmxInstrHandle* handleOut) override;
  int32 Initiate(niRFmxInstrHandle instrumentHandle, char selectorString[], char resultName[]) override;
  int32 ResetAttribute(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID) override;
  int32 ResetToDefault(niRFmxInstrHandle instrumentHandle, char selectorString[]) override;
  int32 SelectMeasurements(niRFmxInstrHandle instrumentHandle, char selectorString[], uInt32 measurements, int32 enableAllTraces) override;
  int32 SendSoftwareEdgeTrigger(niRFmxInstrHandle instrumentHandle) override;
  int32 SetAttributeF32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal) override;
  int32 SetAttributeF32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float32 attrVal[], int32 arraySize) override;
  int32 SetAttributeF64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal) override;
  int32 SetAttributeF64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, float64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int16 attrVal) override;
  int32 SetAttributeI32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal) override;
  int32 SetAttributeI32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int32 attrVal[], int32 arraySize) override;
  int32 SetAttributeI64(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal) override;
  int32 SetAttributeI64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int64 attrVal[], int32 arraySize) override;
  int32 SetAttributeI8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal) override;
  int32 SetAttributeI8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, int8 attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexDoubleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexDouble attrVal[], int32 arraySize) override;
  int32 SetAttributeNIComplexSingleArray(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, NIComplexSingle attrVal[], int32 arraySize) override;
  int32 SetAttributeString(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, char attrVal[]) override;
  int32 SetAttributeU16(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt16 attrVal) override;
  int32 SetAttributeU32(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal) override;
  int32 SetAttributeU32Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt32 attrVal[], int32 arraySize) override;
  int32 SetAttributeU64Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt64 attrVal[], int32 arraySize) override;
  int32 SetAttributeU8(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal) override;
  int32 SetAttributeU8Array(niRFmxInstrHandle instrumentHandle, char selectorString[], int32 attributeID, uInt8 attrVal[], int32 arraySize) override;
  int32 WaitForAcquisitionComplete(niRFmxInstrHandle instrumentHandle, float64 timeout) override;
  int32 WaitForMeasurementComplete(niRFmxInstrHandle instrumentHandle, char selectorString[], float64 timeout) override;

 private:
  using AbortMeasurementsPtr = decltype(&RFmxPulse_AbortMeasurements);
  using AnalyzeIQ1WaveformPtr = decltype(&RFmxPulse_AnalyzeIQ1Waveform);
  using AnalyzeIQ1WaveformSplitPtr = decltype(&RFmxPulse_AnalyzeIQ1WaveformSplit);
  using AutoLevelPtr = decltype(&RFmxPulse_AutoLevel);
  using BuildSignalStringPtr = decltype(&RFmxPulse_BuildSignalString);
  using Cfg1ReferenceWaveformPtr = decltype(&RFmxPulse_Cfg1ReferenceWaveform);
  using Cfg1ReferenceWaveformSplitPtr = decltype(&RFmxPulse_Cfg1ReferenceWaveformSplit);
  using CfgDigitalEdgeTriggerPtr = decltype(&RFmxPulse_CfgDigitalEdgeTrigger);
  using CfgExternalAttenuationPtr = decltype(&RFmxPulse_CfgExternalAttenuation);
  using CfgFrequencyPtr = decltype(&RFmxPulse_CfgFrequency);
  using CfgFrequencyReferencePtr = decltype(&RFmxPulse_CfgFrequencyReference);
  using CfgIQPowerEdgeTriggerPtr = decltype(&RFmxPulse_CfgIQPowerEdgeTrigger);
  using CfgMechanicalAttenuationPtr = decltype(&RFmxPulse_CfgMechanicalAttenuation);
  using CfgRFPtr = decltype(&RFmxPulse_CfgRF);
  using CfgRFAttenuationPtr = decltype(&RFmxPulse_CfgRFAttenuation);
  using CfgReferenceLevelPtr = decltype(&RFmxPulse_CfgReferenceLevel);
  using CfgSoftwareEdgeTriggerPtr = decltype(&RFmxPulse_CfgSoftwareEdgeTrigger);
  using CheckMeasurementStatusPtr = decltype(&RFmxPulse_CheckMeasurementStatus);
  using ClearAllNamedResultsPtr = decltype(&RFmxPulse_ClearAllNamedResults);
  using ClearNamedResultPtr = decltype(&RFmxPulse_ClearNamedResult);
  using CloneSignalConfigurationPtr = decltype(&RFmxPulse_CloneSignalConfiguration);
  using ClosePtr = decltype(&RFmxPulse_Close);
  using CommitPtr = decltype(&RFmxPulse_Commit);
  using CreateSignalConfigurationPtr = decltype(&RFmxPulse_CreateSignalConfiguration);
  using DeleteSignalConfigurationPtr = decltype(&RFmxPulse_DeleteSignalConfiguration);
  using DisableTriggerPtr = decltype(&RFmxPulse_DisableTrigger);
  using FetchAcquiredAmplitudeTracePtr = decltype(&RFmxPulse_FetchAcquiredAmplitudeTrace);
  using FetchAmplitudeTracePtr = decltype(&RFmxPulse_FetchAmplitudeTrace);
  using FetchBurstIntrapulseStabilityTracePtr = decltype(&RFmxPulse_FetchBurstIntrapulseStabilityTrace);
  using FetchBurstSelectedPositionStabilityTracePtr = decltype(&RFmxPulse_FetchBurstSelectedPositionStabilityTrace);
  using FetchFrequencyTracePtr = decltype(&RFmxPulse_FetchFrequencyTrace);
  using FetchIQTracePtr = decltype(&RFmxPulse_FetchIQTrace);
  using FetchIQTraceSplitPtr = decltype(&RFmxPulse_FetchIQTraceSplit);
  using FetchIntrapulseStabilityTracePtr = decltype(&RFmxPulse_FetchIntrapulseStabilityTrace);
  using FetchMultipleMeasurementPointsStabilityTracePtr = decltype(&RFmxPulse_FetchMultipleMeasurementPointsStabilityTrace);
  using FetchPhaseWrappedTracePtr = decltype(&RFmxPulse_FetchPhaseWrappedTrace);
  using FetchPulseToPulseStabilityTracePtr = decltype(&RFmxPulse_FetchPulseToPulseStabilityTrace);
  using FetchStabilityTracePtr = decltype(&RFmxPulse_FetchStabilityTrace);
  using FetchTimeSidelobeTracePtr = decltype(&RFmxPulse_FetchTimeSidelobeTrace);
  using GetAllNamedResultNamesPtr = decltype(&RFmxPulse_GetAllNamedResultNames);
  using GetAttributeF32Ptr = decltype(&RFmxPulse_GetAttributeF32);
  using GetAttributeF32ArrayPtr = decltype(&RFmxPulse_GetAttributeF32Array);
  using GetAttributeF64Ptr = decltype(&RFmxPulse_GetAttributeF64);
  using GetAttributeF64ArrayPtr = decltype(&RFmxPulse_GetAttributeF64Array);
  using GetAttributeI16Ptr = decltype(&RFmxPulse_GetAttributeI16);
  using GetAttributeI32Ptr = decltype(&RFmxPulse_GetAttributeI32);
  using GetAttributeI32ArrayPtr = decltype(&RFmxPulse_GetAttributeI32Array);
  using GetAttributeI64Ptr = decltype(&RFmxPulse_GetAttributeI64);
  using GetAttributeI64ArrayPtr = decltype(&RFmxPulse_GetAttributeI64Array);
  using GetAttributeI8Ptr = decltype(&RFmxPulse_GetAttributeI8);
  using GetAttributeI8ArrayPtr = decltype(&RFmxPulse_GetAttributeI8Array);
  using GetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxPulse_GetAttributeNIComplexDoubleArray);
  using GetAttributeNIComplexSingleArrayPtr = decltype(&RFmxPulse_GetAttributeNIComplexSingleArray);
  using GetAttributeStringPtr = decltype(&RFmxPulse_GetAttributeString);
  using GetAttributeU16Ptr = decltype(&RFmxPulse_GetAttributeU16);
  using GetAttributeU32Ptr = decltype(&RFmxPulse_GetAttributeU32);
  using GetAttributeU32ArrayPtr = decltype(&RFmxPulse_GetAttributeU32Array);
  using GetAttributeU64ArrayPtr = decltype(&RFmxPulse_GetAttributeU64Array);
  using GetAttributeU8Ptr = decltype(&RFmxPulse_GetAttributeU8);
  using GetAttributeU8ArrayPtr = decltype(&RFmxPulse_GetAttributeU8Array);
  using GetErrorPtr = decltype(&RFmxPulse_GetError);
  using GetErrorStringPtr = decltype(&RFmxPulse_GetErrorString);
  using InitializePtr = decltype(&RFmxPulse_Initialize);
  using InitializeFromNIRFSASessionPtr = decltype(&RFmxPulse_InitializeFromNIRFSASession);
  using InitiatePtr = decltype(&RFmxPulse_Initiate);
  using ResetAttributePtr = decltype(&RFmxPulse_ResetAttribute);
  using ResetToDefaultPtr = decltype(&RFmxPulse_ResetToDefault);
  using SelectMeasurementsPtr = decltype(&RFmxPulse_SelectMeasurements);
  using SendSoftwareEdgeTriggerPtr = decltype(&RFmxPulse_SendSoftwareEdgeTrigger);
  using SetAttributeF32Ptr = decltype(&RFmxPulse_SetAttributeF32);
  using SetAttributeF32ArrayPtr = decltype(&RFmxPulse_SetAttributeF32Array);
  using SetAttributeF64Ptr = decltype(&RFmxPulse_SetAttributeF64);
  using SetAttributeF64ArrayPtr = decltype(&RFmxPulse_SetAttributeF64Array);
  using SetAttributeI16Ptr = decltype(&RFmxPulse_SetAttributeI16);
  using SetAttributeI32Ptr = decltype(&RFmxPulse_SetAttributeI32);
  using SetAttributeI32ArrayPtr = decltype(&RFmxPulse_SetAttributeI32Array);
  using SetAttributeI64Ptr = decltype(&RFmxPulse_SetAttributeI64);
  using SetAttributeI64ArrayPtr = decltype(&RFmxPulse_SetAttributeI64Array);
  using SetAttributeI8Ptr = decltype(&RFmxPulse_SetAttributeI8);
  using SetAttributeI8ArrayPtr = decltype(&RFmxPulse_SetAttributeI8Array);
  using SetAttributeNIComplexDoubleArrayPtr = decltype(&RFmxPulse_SetAttributeNIComplexDoubleArray);
  using SetAttributeNIComplexSingleArrayPtr = decltype(&RFmxPulse_SetAttributeNIComplexSingleArray);
  using SetAttributeStringPtr = decltype(&RFmxPulse_SetAttributeString);
  using SetAttributeU16Ptr = decltype(&RFmxPulse_SetAttributeU16);
  using SetAttributeU32Ptr = decltype(&RFmxPulse_SetAttributeU32);
  using SetAttributeU32ArrayPtr = decltype(&RFmxPulse_SetAttributeU32Array);
  using SetAttributeU64ArrayPtr = decltype(&RFmxPulse_SetAttributeU64Array);
  using SetAttributeU8Ptr = decltype(&RFmxPulse_SetAttributeU8);
  using SetAttributeU8ArrayPtr = decltype(&RFmxPulse_SetAttributeU8Array);
  using WaitForAcquisitionCompletePtr = decltype(&RFmxPulse_WaitForAcquisitionComplete);
  using WaitForMeasurementCompletePtr = decltype(&RFmxPulse_WaitForMeasurementComplete);

  typedef struct FunctionPointers {
    AbortMeasurementsPtr AbortMeasurements;
    AnalyzeIQ1WaveformPtr AnalyzeIQ1Waveform;
    AnalyzeIQ1WaveformSplitPtr AnalyzeIQ1WaveformSplit;
    AutoLevelPtr AutoLevel;
    BuildSignalStringPtr BuildSignalString;
    Cfg1ReferenceWaveformPtr Cfg1ReferenceWaveform;
    Cfg1ReferenceWaveformSplitPtr Cfg1ReferenceWaveformSplit;
    CfgDigitalEdgeTriggerPtr CfgDigitalEdgeTrigger;
    CfgExternalAttenuationPtr CfgExternalAttenuation;
    CfgFrequencyPtr CfgFrequency;
    CfgFrequencyReferencePtr CfgFrequencyReference;
    CfgIQPowerEdgeTriggerPtr CfgIQPowerEdgeTrigger;
    CfgMechanicalAttenuationPtr CfgMechanicalAttenuation;
    CfgRFPtr CfgRF;
    CfgRFAttenuationPtr CfgRFAttenuation;
    CfgReferenceLevelPtr CfgReferenceLevel;
    CfgSoftwareEdgeTriggerPtr CfgSoftwareEdgeTrigger;
    CheckMeasurementStatusPtr CheckMeasurementStatus;
    ClearAllNamedResultsPtr ClearAllNamedResults;
    ClearNamedResultPtr ClearNamedResult;
    CloneSignalConfigurationPtr CloneSignalConfiguration;
    ClosePtr Close;
    CommitPtr Commit;
    CreateSignalConfigurationPtr CreateSignalConfiguration;
    DeleteSignalConfigurationPtr DeleteSignalConfiguration;
    DisableTriggerPtr DisableTrigger;
    FetchAcquiredAmplitudeTracePtr FetchAcquiredAmplitudeTrace;
    FetchAmplitudeTracePtr FetchAmplitudeTrace;
    FetchBurstIntrapulseStabilityTracePtr FetchBurstIntrapulseStabilityTrace;
    FetchBurstSelectedPositionStabilityTracePtr FetchBurstSelectedPositionStabilityTrace;
    FetchFrequencyTracePtr FetchFrequencyTrace;
    FetchIQTracePtr FetchIQTrace;
    FetchIQTraceSplitPtr FetchIQTraceSplit;
    FetchIntrapulseStabilityTracePtr FetchIntrapulseStabilityTrace;
    FetchMultipleMeasurementPointsStabilityTracePtr FetchMultipleMeasurementPointsStabilityTrace;
    FetchPhaseWrappedTracePtr FetchPhaseWrappedTrace;
    FetchPulseToPulseStabilityTracePtr FetchPulseToPulseStabilityTrace;
    FetchStabilityTracePtr FetchStabilityTrace;
    FetchTimeSidelobeTracePtr FetchTimeSidelobeTrace;
    GetAllNamedResultNamesPtr GetAllNamedResultNames;
    GetAttributeF32Ptr GetAttributeF32;
    GetAttributeF32ArrayPtr GetAttributeF32Array;
    GetAttributeF64Ptr GetAttributeF64;
    GetAttributeF64ArrayPtr GetAttributeF64Array;
    GetAttributeI16Ptr GetAttributeI16;
    GetAttributeI32Ptr GetAttributeI32;
    GetAttributeI32ArrayPtr GetAttributeI32Array;
    GetAttributeI64Ptr GetAttributeI64;
    GetAttributeI64ArrayPtr GetAttributeI64Array;
    GetAttributeI8Ptr GetAttributeI8;
    GetAttributeI8ArrayPtr GetAttributeI8Array;
    GetAttributeNIComplexDoubleArrayPtr GetAttributeNIComplexDoubleArray;
    GetAttributeNIComplexSingleArrayPtr GetAttributeNIComplexSingleArray;
    GetAttributeStringPtr GetAttributeString;
    GetAttributeU16Ptr GetAttributeU16;
    GetAttributeU32Ptr GetAttributeU32;
    GetAttributeU32ArrayPtr GetAttributeU32Array;
    GetAttributeU64ArrayPtr GetAttributeU64Array;
    GetAttributeU8Ptr GetAttributeU8;
    GetAttributeU8ArrayPtr GetAttributeU8Array;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
    InitializeFromNIRFSASessionPtr InitializeFromNIRFSASession;
    InitiatePtr Initiate;
    ResetAttributePtr ResetAttribute;
    ResetToDefaultPtr ResetToDefault;
    SelectMeasurementsPtr SelectMeasurements;
    SendSoftwareEdgeTriggerPtr SendSoftwareEdgeTrigger;
    SetAttributeF32Ptr SetAttributeF32;
    SetAttributeF32ArrayPtr SetAttributeF32Array;
    SetAttributeF64Ptr SetAttributeF64;
    SetAttributeF64ArrayPtr SetAttributeF64Array;
    SetAttributeI16Ptr SetAttributeI16;
    SetAttributeI32Ptr SetAttributeI32;
    SetAttributeI32ArrayPtr SetAttributeI32Array;
    SetAttributeI64Ptr SetAttributeI64;
    SetAttributeI64ArrayPtr SetAttributeI64Array;
    SetAttributeI8Ptr SetAttributeI8;
    SetAttributeI8ArrayPtr SetAttributeI8Array;
    SetAttributeNIComplexDoubleArrayPtr SetAttributeNIComplexDoubleArray;
    SetAttributeNIComplexSingleArrayPtr SetAttributeNIComplexSingleArray;
    SetAttributeStringPtr SetAttributeString;
    SetAttributeU16Ptr SetAttributeU16;
    SetAttributeU32Ptr SetAttributeU32;
    SetAttributeU32ArrayPtr SetAttributeU32Array;
    SetAttributeU64ArrayPtr SetAttributeU64Array;
    SetAttributeU8Ptr SetAttributeU8;
    SetAttributeU8ArrayPtr SetAttributeU8Array;
    WaitForAcquisitionCompletePtr WaitForAcquisitionComplete;
    WaitForMeasurementCompletePtr WaitForMeasurementComplete;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxpulse_grpc

#endif  // NIRFMXPULSE_GRPC_LIBRARY_H
