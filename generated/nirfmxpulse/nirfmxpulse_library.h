//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-rfmxpulse
//---------------------------------------------------------------------
#ifndef NIRFMXPULSE_GRPC_LIBRARY_H
#define NIRFMXPULSE_GRPC_LIBRARY_H

#include "nirfmxpulse_library_interface.h"

#include <server/shared_library_interface.h>

#include <memory>

namespace nirfmxpulse_grpc {

class NiRFmxPulseLibrary : public nirfmxpulse_grpc::NiRFmxPulseLibraryInterface {
 public:
  NiRFmxPulseLibrary();
  explicit NiRFmxPulseLibrary(std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library);
  virtual ~NiRFmxPulseLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 Close(niRFmxInstrHandle instrumentHandle, int32 forceDestroy) override;
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]) override;
  int32 Initialize(char resourceName[], char optionString[], niRFmxInstrHandle* handleOut, int32* isNewSession) override;

 private:
  using ClosePtr = decltype(&RFmxPulse_Close);
  using GetErrorPtr = decltype(&RFmxPulse_GetError);
  using GetErrorStringPtr = decltype(&RFmxPulse_GetErrorString);
  using InitializePtr = decltype(&RFmxPulse_Initialize);

  typedef struct FunctionPointers {
    ClosePtr Close;
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
    InitializePtr Initialize;
  } FunctionLoadStatus;

  std::shared_ptr<nidevice_grpc::SharedLibraryInterface> shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxpulse_grpc

#endif  // NIRFMXPULSE_GRPC_LIBRARY_H
