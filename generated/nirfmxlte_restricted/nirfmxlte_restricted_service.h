
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-RFMXLTE-RESTRICTED Metadata
//---------------------------------------------------------------------
#ifndef NIRFMXLTE_RESTRICTED_GRPC_SERVICE_H
#define NIRFMXLTE_RESTRICTED_GRPC_SERVICE_H

#include <nirfmxlte_restricted.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "nirfmxlte_restricted_library_interface.h"

namespace nirfmxlte_restricted_grpc {

struct NiRFmxLTERestrictedFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiRFmxLTERestrictedFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiRFmxLTERestrictedService final : public NiRFmxLTERestricted::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<niRFmxInstrHandle>>;

  NiRFmxLTERestrictedService(
    NiRFmxLTERestrictedLibraryInterface* library,
    ResourceRepositorySharedPtr resource_repository,
    const NiRFmxLTERestrictedFeatureToggles& feature_toggles = {});
  virtual ~NiRFmxLTERestrictedService();
  
private:
  NiRFmxLTERestrictedLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;
  ::grpc::Status ConvertApiErrorStatusForNiRFmxInstrHandle(::grpc::ServerContext* context, int32_t status, niRFmxInstrHandle instrumentHandle);

  NiRFmxLTERestrictedFeatureToggles feature_toggles_;
};

} // namespace nirfmxlte_restricted_grpc

#endif  // NIRFMXLTE_RESTRICTED_GRPC_SERVICE_H
