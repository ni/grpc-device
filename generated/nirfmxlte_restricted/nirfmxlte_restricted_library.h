//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-RFMXLTE-RESTRICTED
//---------------------------------------------------------------------
#ifndef NIRFMXLTE_RESTRICTED_GRPC_LIBRARY_H
#define NIRFMXLTE_RESTRICTED_GRPC_LIBRARY_H

#include "nirfmxlte_restricted_library_interface.h"

#include <server/shared_library.h>

namespace nirfmxlte_restricted_grpc {

class NiRFmxLTERestrictedLibrary : public nirfmxlte_restricted_grpc::NiRFmxLTERestrictedLibraryInterface {
 public:
  NiRFmxLTERestrictedLibrary();
  virtual ~NiRFmxLTERestrictedLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  int32 GetError(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  int32 GetErrorString(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);

 private:
  using GetErrorPtr = int32 (*)(niRFmxInstrHandle instrumentHandle, int32* errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);
  using GetErrorStringPtr = int32 (*)(niRFmxInstrHandle instrumentHandle, int32 errorCode, int32 errorDescriptionBufferSize, char errorDescription[]);

  typedef struct FunctionPointers {
    GetErrorPtr GetError;
    GetErrorStringPtr GetErrorString;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nirfmxlte_restricted_grpc

#endif  // NIRFMXLTE_RESTRICTED_GRPC_LIBRARY_H
