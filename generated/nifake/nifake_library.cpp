//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-FAKE Metadata
//---------------------------------------------------------------------
#include "nifake_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nifake_64.dll";
#else
static const char* kLibraryName = "libnifake.so";
#endif

namespace ni {
namespace fake {
namespace grpc {

NiFakeLibrary::NiFakeLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&load_status_, false, sizeof(load_status_));
  if (!loaded) {
    return;
  }
  load_status_.AbortExists = shared_library_.function_exists("niFake_Abort");
  load_status_.AcceptListOfDurationsInSecondsExists = shared_library_.function_exists("niFake_AcceptListOfDurationsInSeconds");
  load_status_.BoolArrayOutputFunctionExists = shared_library_.function_exists("niFake_BoolArrayOutputFunction");
  load_status_.DoubleAllTheNumsExists = shared_library_.function_exists("niFake_DoubleAllTheNums");
  load_status_.EnumArrayOutputFunctionExists = shared_library_.function_exists("niFake_EnumArrayOutputFunction");
  load_status_.EnumInputFunctionWithDefaultsExists = shared_library_.function_exists("niFake_EnumInputFunctionWithDefaults");
  load_status_.ExportAttributeConfigurationBufferExists = shared_library_.function_exists("niFake_ExportAttributeConfigurationBuffer");
  load_status_.FetchWaveformExists = shared_library_.function_exists("niFake_FetchWaveform");
  load_status_.GetABooleanExists = shared_library_.function_exists("niFake_GetABoolean");
  load_status_.GetANumberExists = shared_library_.function_exists("niFake_GetANumber");
  load_status_.GetAStringOfFixedMaximumSizeExists = shared_library_.function_exists("niFake_GetAStringOfFixedMaximumSize");
  load_status_.GetAStringUsingPythonCodeExists = shared_library_.function_exists("niFake_GetAStringUsingPythonCode");
  load_status_.GetAnIviDanceStringExists = shared_library_.function_exists("niFake_GetAnIviDanceString");
  load_status_.GetAnIviDanceWithATwistStringExists = shared_library_.function_exists("niFake_GetAnIviDanceWithATwistString");
  load_status_.GetArrayForPythonCodeCustomTypeExists = shared_library_.function_exists("niFake_GetArrayForPythonCodeCustomType");
  load_status_.GetArrayForPythonCodeDoubleExists = shared_library_.function_exists("niFake_GetArrayForPythonCodeDouble");
  load_status_.GetArraySizeForPythonCodeExists = shared_library_.function_exists("niFake_GetArraySizeForPythonCode");
  load_status_.GetArrayUsingIviDanceExists = shared_library_.function_exists("niFake_GetArrayUsingIviDance");
  load_status_.GetAttributeViBooleanExists = shared_library_.function_exists("niFake_GetAttributeViBoolean");
  load_status_.GetAttributeViInt32Exists = shared_library_.function_exists("niFake_GetAttributeViInt32");
  load_status_.GetAttributeViInt64Exists = shared_library_.function_exists("niFake_GetAttributeViInt64");
  load_status_.GetAttributeViReal64Exists = shared_library_.function_exists("niFake_GetAttributeViReal64");
  load_status_.GetAttributeViStringExists = shared_library_.function_exists("niFake_GetAttributeViString");
  load_status_.GetCalDateAndTimeExists = shared_library_.function_exists("niFake_GetCalDateAndTime");
  load_status_.GetCalIntervalExists = shared_library_.function_exists("niFake_GetCalInterval");
  load_status_.GetCustomTypeExists = shared_library_.function_exists("niFake_GetCustomType");
  load_status_.GetCustomTypeArrayExists = shared_library_.function_exists("niFake_GetCustomTypeArray");
  load_status_.GetEnumValueExists = shared_library_.function_exists("niFake_GetEnumValue");
  load_status_.GetErrorExists = shared_library_.function_exists("niFake_GetError");
  load_status_.ImportAttributeConfigurationBufferExists = shared_library_.function_exists("niFake_ImportAttributeConfigurationBuffer");
  load_status_.InitWithOptionsExists = shared_library_.function_exists("niFake_InitWithOptions");
  load_status_.InitiateExists = shared_library_.function_exists("niFake_Initiate");
  load_status_.MultipleArrayTypesExists = shared_library_.function_exists("niFake_MultipleArrayTypes");
  load_status_.MultipleArraysSameSizeExists = shared_library_.function_exists("niFake_MultipleArraysSameSize");
  load_status_.OneInputFunctionExists = shared_library_.function_exists("niFake_OneInputFunction");
  load_status_.ParametersAreMultipleTypesExists = shared_library_.function_exists("niFake_ParametersAreMultipleTypes");
  load_status_.PoorlyNamedSimpleFunctionExists = shared_library_.function_exists("niFake_PoorlyNamedSimpleFunction");
  load_status_.ReadExists = shared_library_.function_exists("niFake_Read");
  load_status_.ReadFromChannelExists = shared_library_.function_exists("niFake_ReadFromChannel");
  load_status_.ReturnANumberAndAStringExists = shared_library_.function_exists("niFake_ReturnANumberAndAString");
  load_status_.ReturnDurationInSecondsExists = shared_library_.function_exists("niFake_ReturnDurationInSeconds");
  load_status_.ReturnListOfDurationsInSecondsExists = shared_library_.function_exists("niFake_ReturnListOfDurationsInSeconds");
  load_status_.ReturnMultipleTypesExists = shared_library_.function_exists("niFake_ReturnMultipleTypes");
  load_status_.SetAttributeViBooleanExists = shared_library_.function_exists("niFake_SetAttributeViBoolean");
  load_status_.SetAttributeViInt32Exists = shared_library_.function_exists("niFake_SetAttributeViInt32");
  load_status_.SetAttributeViInt64Exists = shared_library_.function_exists("niFake_SetAttributeViInt64");
  load_status_.SetAttributeViReal64Exists = shared_library_.function_exists("niFake_SetAttributeViReal64");
  load_status_.SetAttributeViStringExists = shared_library_.function_exists("niFake_SetAttributeViString");
  load_status_.SetCustomTypeExists = shared_library_.function_exists("niFake_SetCustomType");
  load_status_.SetCustomTypeArrayExists = shared_library_.function_exists("niFake_SetCustomTypeArray");
  load_status_.StringValuedEnumInputFunctionWithDefaultsExists = shared_library_.function_exists("niFake_StringValuedEnumInputFunctionWithDefaults");
  load_status_.TwoInputFunctionExists = shared_library_.function_exists("niFake_TwoInputFunction");
  load_status_.Use64BitNumberExists = shared_library_.function_exists("niFake_Use64BitNumber");
  load_status_.WriteWaveformExists = shared_library_.function_exists("niFake_WriteWaveform");
  load_status_.closeExists = shared_library_.function_exists("niFake_close");
  load_status_.error_messageExists = shared_library_.function_exists("niFake_error_message");
  load_status_.self_testExists = shared_library_.function_exists("niFake_self_test");
}

NiFakeLibrary::~NiFakeLibrary()
{
}

::grpc::Status NiFakeLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

ViStatus NiFakeLibrary::Abort(ViSession vi)
{
  if (!load_status_.AbortExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_Abort.");
  }
  return niFake_Abort(vi);
}

ViStatus NiFakeLibrary::AcceptListOfDurationsInSeconds(ViSession vi, ViInt32 count, ViReal64 delays[])
{
  if (!load_status_.AcceptListOfDurationsInSecondsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_AcceptListOfDurationsInSeconds.");
  }
  return niFake_AcceptListOfDurationsInSeconds(vi, count, delays);
}

ViStatus NiFakeLibrary::BoolArrayOutputFunction(ViSession vi, ViInt32 numberOfElements, ViBoolean anArray[])
{
  if (!load_status_.BoolArrayOutputFunctionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_BoolArrayOutputFunction.");
  }
  return niFake_BoolArrayOutputFunction(vi, numberOfElements, anArray);
}

ViStatus NiFakeLibrary::DoubleAllTheNums(ViSession vi, ViInt32 numberCount, ViReal64 numbers[])
{
  if (!load_status_.DoubleAllTheNumsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_DoubleAllTheNums.");
  }
  return niFake_DoubleAllTheNums(vi, numberCount, numbers);
}

ViStatus NiFakeLibrary::EnumArrayOutputFunction(ViSession vi, ViInt32 numberOfElements, ViInt16 anArray[])
{
  if (!load_status_.EnumArrayOutputFunctionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_EnumArrayOutputFunction.");
  }
  return niFake_EnumArrayOutputFunction(vi, numberOfElements, anArray);
}

ViStatus NiFakeLibrary::EnumInputFunctionWithDefaults(ViSession vi, ViInt16 aTurtle)
{
  if (!load_status_.EnumInputFunctionWithDefaultsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_EnumInputFunctionWithDefaults.");
  }
  return niFake_EnumInputFunctionWithDefaults(vi, aTurtle);
}

ViStatus NiFakeLibrary::ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 sizeInBytes, ViInt8 configuration[])
{
  if (!load_status_.ExportAttributeConfigurationBufferExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ExportAttributeConfigurationBuffer.");
  }
  return niFake_ExportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
}

ViStatus NiFakeLibrary::FetchWaveform(ViSession vi, ViInt32 numberOfSamples, ViReal64 waveformData[], ViInt32* actualNumberOfSamples)
{
  if (!load_status_.FetchWaveformExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_FetchWaveform.");
  }
  return niFake_FetchWaveform(vi, numberOfSamples, waveformData, actualNumberOfSamples);
}

ViStatus NiFakeLibrary::GetABoolean(ViSession vi, ViBoolean* aBoolean)
{
  if (!load_status_.GetABooleanExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetABoolean.");
  }
  return niFake_GetABoolean(vi, aBoolean);
}

ViStatus NiFakeLibrary::GetANumber(ViSession vi, ViInt16* aNumber)
{
  if (!load_status_.GetANumberExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetANumber.");
  }
  return niFake_GetANumber(vi, aNumber);
}

ViStatus NiFakeLibrary::GetAStringOfFixedMaximumSize(ViSession vi, ViChar aString[256])
{
  if (!load_status_.GetAStringOfFixedMaximumSizeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAStringOfFixedMaximumSize.");
  }
  return niFake_GetAStringOfFixedMaximumSize(vi, aString);
}

ViStatus NiFakeLibrary::GetAStringUsingPythonCode(ViSession vi, ViInt16 aNumber, ViChar aString[])
{
  if (!load_status_.GetAStringUsingPythonCodeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAStringUsingPythonCode.");
  }
  return niFake_GetAStringUsingPythonCode(vi, aNumber, aString);
}

ViStatus NiFakeLibrary::GetAnIviDanceString(ViSession vi, ViInt32 bufferSize, ViChar aString[])
{
  if (!load_status_.GetAnIviDanceStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAnIviDanceString.");
  }
  return niFake_GetAnIviDanceString(vi, bufferSize, aString);
}

ViStatus NiFakeLibrary::GetAnIviDanceWithATwistString(ViSession vi, ViInt32 bufferSize, ViChar aString[], ViInt32* actualSize)
{
  if (!load_status_.GetAnIviDanceWithATwistStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAnIviDanceWithATwistString.");
  }
  return niFake_GetAnIviDanceWithATwistString(vi, bufferSize, aString, actualSize);
}

ViStatus NiFakeLibrary::GetArrayForPythonCodeCustomType(ViSession vi, ViInt32 numberOfElements, struct CustomStruct arrayOut[])
{
  if (!load_status_.GetArrayForPythonCodeCustomTypeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetArrayForPythonCodeCustomType.");
  }
  return niFake_GetArrayForPythonCodeCustomType(vi, numberOfElements, arrayOut);
}

ViStatus NiFakeLibrary::GetArrayForPythonCodeDouble(ViSession vi, ViInt32 numberOfElements, ViReal64 arrayOut[])
{
  if (!load_status_.GetArrayForPythonCodeDoubleExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetArrayForPythonCodeDouble.");
  }
  return niFake_GetArrayForPythonCodeDouble(vi, numberOfElements, arrayOut);
}

ViStatus NiFakeLibrary::GetArraySizeForPythonCode(ViSession vi, ViInt32* sizeOut)
{
  if (!load_status_.GetArraySizeForPythonCodeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetArraySizeForPythonCode.");
  }
  return niFake_GetArraySizeForPythonCode(vi, sizeOut);
}

ViStatus NiFakeLibrary::GetArrayUsingIviDance(ViSession vi, ViInt32 arraySize, ViReal64 arrayOut[])
{
  if (!load_status_.GetArrayUsingIviDanceExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetArrayUsingIviDance.");
  }
  return niFake_GetArrayUsingIviDance(vi, arraySize, arrayOut);
}

ViStatus NiFakeLibrary::GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue)
{
  if (!load_status_.GetAttributeViBooleanExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAttributeViBoolean.");
  }
  return niFake_GetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue)
{
  if (!load_status_.GetAttributeViInt32Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAttributeViInt32.");
  }
  return niFake_GetAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64* attributeValue)
{
  if (!load_status_.GetAttributeViInt64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAttributeViInt64.");
  }
  return niFake_GetAttributeViInt64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue)
{
  if (!load_status_.GetAttributeViReal64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAttributeViReal64.");
  }
  return niFake_GetAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[])
{
  if (!load_status_.GetAttributeViStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetAttributeViString.");
  }
  return niFake_GetAttributeViString(vi, channelName, attributeId, bufferSize, attributeValue);
}

ViStatus NiFakeLibrary::GetCalDateAndTime(ViSession vi, ViInt32 calType, ViInt32* month, ViInt32* day, ViInt32* year, ViInt32* hour, ViInt32* minute)
{
  if (!load_status_.GetCalDateAndTimeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetCalDateAndTime.");
  }
  return niFake_GetCalDateAndTime(vi, calType, month, day, year, hour, minute);
}

ViStatus NiFakeLibrary::GetCalInterval(ViSession vi, ViInt32* months)
{
  if (!load_status_.GetCalIntervalExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetCalInterval.");
  }
  return niFake_GetCalInterval(vi, months);
}

ViStatus NiFakeLibrary::GetCustomType(ViSession vi, struct CustomStruct* cs)
{
  if (!load_status_.GetCustomTypeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetCustomType.");
  }
  return niFake_GetCustomType(vi, cs);
}

ViStatus NiFakeLibrary::GetCustomTypeArray(ViSession vi, ViInt32 numberOfElements, struct CustomStruct cs[])
{
  if (!load_status_.GetCustomTypeArrayExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetCustomTypeArray.");
  }
  return niFake_GetCustomTypeArray(vi, numberOfElements, cs);
}

ViStatus NiFakeLibrary::GetEnumValue(ViSession vi, ViInt32* aQuantity, ViInt16* aTurtle)
{
  if (!load_status_.GetEnumValueExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetEnumValue.");
  }
  return niFake_GetEnumValue(vi, aQuantity, aTurtle);
}

ViStatus NiFakeLibrary::GetError(ViSession vi, ViStatus* errorCode, ViInt32 bufferSize, ViChar description[])
{
  if (!load_status_.GetErrorExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_GetError.");
  }
  return niFake_GetError(vi, errorCode, bufferSize, description);
}

ViStatus NiFakeLibrary::ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 sizeInBytes, ViInt8 configuration[])
{
  if (!load_status_.ImportAttributeConfigurationBufferExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ImportAttributeConfigurationBuffer.");
  }
  return niFake_ImportAttributeConfigurationBuffer(vi, sizeInBytes, configuration);
}

ViStatus NiFakeLibrary::InitWithOptions(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViConstString optionString, ViSession* vi)
{
  if (!load_status_.InitWithOptionsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_InitWithOptions.");
  }
  return niFake_InitWithOptions(resourceName, idQuery, resetDevice, optionString, vi);
}

ViStatus NiFakeLibrary::Initiate(ViSession vi)
{
  if (!load_status_.InitiateExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_Initiate.");
  }
  return niFake_Initiate(vi);
}

ViStatus NiFakeLibrary::MultipleArrayTypes(ViSession vi, ViInt32 outputArraySize, ViReal64 outputArray[], ViReal64 outputArrayOfFixedLength[3], ViInt32 inputArraySizes, ViReal64 inputArrayOfFloats[], ViInt16 inputArrayOfIntegers[])
{
  if (!load_status_.MultipleArrayTypesExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_MultipleArrayTypes.");
  }
  return niFake_MultipleArrayTypes(vi, outputArraySize, outputArray, outputArrayOfFixedLength, inputArraySizes, inputArrayOfFloats, inputArrayOfIntegers);
}

ViStatus NiFakeLibrary::MultipleArraysSameSize(ViSession vi, ViReal64 values1[], ViReal64 values2[], ViReal64 values3[], ViReal64 values4[], ViInt32 size)
{
  if (!load_status_.MultipleArraysSameSizeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_MultipleArraysSameSize.");
  }
  return niFake_MultipleArraysSameSize(vi, values1, values2, values3, values4, size);
}

ViStatus NiFakeLibrary::OneInputFunction(ViSession vi, ViInt32 aNumber)
{
  if (!load_status_.OneInputFunctionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_OneInputFunction.");
  }
  return niFake_OneInputFunction(vi, aNumber);
}

ViStatus NiFakeLibrary::ParametersAreMultipleTypes(ViSession vi, ViBoolean aBoolean, ViInt32 anInt32, ViInt64 anInt64, ViInt16 anIntEnum, ViReal64 aFloat, ViReal64 aFloatEnum, ViInt32 stringSize, ViConstString aString)
{
  if (!load_status_.ParametersAreMultipleTypesExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ParametersAreMultipleTypes.");
  }
  return niFake_ParametersAreMultipleTypes(vi, aBoolean, anInt32, anInt64, anIntEnum, aFloat, aFloatEnum, stringSize, aString);
}

ViStatus NiFakeLibrary::PoorlyNamedSimpleFunction(ViSession vi)
{
  if (!load_status_.PoorlyNamedSimpleFunctionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_PoorlyNamedSimpleFunction.");
  }
  return niFake_PoorlyNamedSimpleFunction(vi);
}

ViStatus NiFakeLibrary::Read(ViSession vi, ViReal64 maximumTime, ViReal64* reading)
{
  if (!load_status_.ReadExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_Read.");
  }
  return niFake_Read(vi, maximumTime, reading);
}

ViStatus NiFakeLibrary::ReadFromChannel(ViSession vi, ViConstString channelName, ViInt32 maximumTime, ViReal64* reading)
{
  if (!load_status_.ReadFromChannelExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ReadFromChannel.");
  }
  return niFake_ReadFromChannel(vi, channelName, maximumTime, reading);
}

ViStatus NiFakeLibrary::ReturnANumberAndAString(ViSession vi, ViInt16* aNumber, ViChar aString[256])
{
  if (!load_status_.ReturnANumberAndAStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ReturnANumberAndAString.");
  }
  return niFake_ReturnANumberAndAString(vi, aNumber, aString);
}

ViStatus NiFakeLibrary::ReturnDurationInSeconds(ViSession vi, ViReal64* timedelta)
{
  if (!load_status_.ReturnDurationInSecondsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ReturnDurationInSeconds.");
  }
  return niFake_ReturnDurationInSeconds(vi, timedelta);
}

ViStatus NiFakeLibrary::ReturnListOfDurationsInSeconds(ViSession vi, ViInt32 numberOfElements, ViReal64 timedeltas[])
{
  if (!load_status_.ReturnListOfDurationsInSecondsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ReturnListOfDurationsInSeconds.");
  }
  return niFake_ReturnListOfDurationsInSeconds(vi, numberOfElements, timedeltas);
}

ViStatus NiFakeLibrary::ReturnMultipleTypes(ViSession vi, ViBoolean* aBoolean, ViInt32* anInt32, ViInt64* anInt64, ViInt16* anIntEnum, ViReal64* aFloat, ViReal64* aFloatEnum, ViInt32 arraySize, ViReal64 anArray[], ViInt32 stringSize, ViChar aString[])
{
  if (!load_status_.ReturnMultipleTypesExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_ReturnMultipleTypes.");
  }
  return niFake_ReturnMultipleTypes(vi, aBoolean, anInt32, anInt64, anIntEnum, aFloat, aFloatEnum, arraySize, anArray, stringSize, aString);
}

ViStatus NiFakeLibrary::SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue)
{
  if (!load_status_.SetAttributeViBooleanExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetAttributeViBoolean.");
  }
  return niFake_SetAttributeViBoolean(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue)
{
  if (!load_status_.SetAttributeViInt32Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetAttributeViInt32.");
  }
  return niFake_SetAttributeViInt32(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 attributeValue)
{
  if (!load_status_.SetAttributeViInt64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetAttributeViInt64.");
  }
  return niFake_SetAttributeViInt64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue)
{
  if (!load_status_.SetAttributeViReal64Exists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetAttributeViReal64.");
  }
  return niFake_SetAttributeViReal64(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString attributeValue)
{
  if (!load_status_.SetAttributeViStringExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetAttributeViString.");
  }
  return niFake_SetAttributeViString(vi, channelName, attributeId, attributeValue);
}

ViStatus NiFakeLibrary::SetCustomType(ViSession vi, struct CustomStruct cs)
{
  if (!load_status_.SetCustomTypeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetCustomType.");
  }
  return niFake_SetCustomType(vi, cs);
}

ViStatus NiFakeLibrary::SetCustomTypeArray(ViSession vi, ViInt32 numberOfElements, struct CustomStruct cs[])
{
  if (!load_status_.SetCustomTypeArrayExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_SetCustomTypeArray.");
  }
  return niFake_SetCustomTypeArray(vi, numberOfElements, cs);
}

ViStatus NiFakeLibrary::StringValuedEnumInputFunctionWithDefaults(ViSession vi, ViConstString aMobileOSName)
{
  if (!load_status_.StringValuedEnumInputFunctionWithDefaultsExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_StringValuedEnumInputFunctionWithDefaults.");
  }
  return niFake_StringValuedEnumInputFunctionWithDefaults(vi, aMobileOSName);
}

ViStatus NiFakeLibrary::TwoInputFunction(ViSession vi, ViReal64 aNumber, ViString aString)
{
  if (!load_status_.TwoInputFunctionExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_TwoInputFunction.");
  }
  return niFake_TwoInputFunction(vi, aNumber, aString);
}

ViStatus NiFakeLibrary::Use64BitNumber(ViSession vi, ViInt64 input, ViInt64* output)
{
  if (!load_status_.Use64BitNumberExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_Use64BitNumber.");
  }
  return niFake_Use64BitNumber(vi, input, output);
}

ViStatus NiFakeLibrary::WriteWaveform(ViSession vi, ViInt32 numberOfSamples, ViReal64 waveform[])
{
  if (!load_status_.WriteWaveformExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_WriteWaveform.");
  }
  return niFake_WriteWaveform(vi, numberOfSamples, waveform);
}

ViStatus NiFakeLibrary::close(ViSession vi)
{
  if (!load_status_.closeExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_close.");
  }
  return niFake_close(vi);
}

ViStatus NiFakeLibrary::error_message(ViSession vi, ViStatus errorCode, ViChar errorMessage[256])
{
  if (!load_status_.error_messageExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_error_message.");
  }
  return niFake_error_message(vi, errorCode, errorMessage);
}

ViStatus NiFakeLibrary::self_test(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256])
{
  if (!load_status_.self_testExists) {
    throw ni::hardware::grpc::internal::LibraryLoadException("Could not find niFake_self_test.");
  }
  return niFake_self_test(vi, selfTestResult, selfTestMessage);
}

}  // namespace ni
}  // namespace fake
}  // namespace grpc
