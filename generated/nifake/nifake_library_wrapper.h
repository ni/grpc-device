//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Library wrapper for implementing interactions with NI-FAKE
//---------------------------------------------------------------------
#ifndef NI_FAKE_GRPC_LIBRARY_WRAPPER_H
#define NI_FAKE_GRPC_LIBRARY_WRAPPER_H

#include <grpcpp/grpcpp.h>

namespace ni {
namespace fake {
namespace grpc {

class NiFakeLibraryWrapper {
public:
  virtual ::grpc::Status check_function_exists(const char* functionName) = 0;
  virtual std::uint32_t Abort(std::uint32_t vi) = 0;
  virtual std::uint32_t EnumInputFunctionWithDefaults(std::uint32_t vi, std::int32_t aTurtle) = 0;
  virtual std::uint32_t GetABoolean(std::uint32_t vi, bool* aBoolean) = 0;
  virtual std::uint32_t GetANumber(std::uint32_t vi, std::int32_t* aNumber) = 0;
  virtual std::uint32_t GetArraySizeForPythonCode(std::uint32_t vi, std::int32_t* sizeOut) = 0;
  virtual std::uint32_t GetAttributeViBoolean(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, bool* attributeValue) = 0;
  virtual std::uint32_t GetAttributeViInt32(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, std::int32_t* attributeValue) = 0;
  virtual std::uint32_t GetAttributeViInt64(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, std::int64_t* attributeValue) = 0;
  virtual std::uint32_t GetAttributeViReal64(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, double* attributeValue) = 0;
  virtual std::uint32_t GetCalDateAndTime(std::uint32_t vi, std::int32_t calType, std::int32_t* month, std::int32_t* day, std::int32_t* year, std::int32_t* hour, std::int32_t* minute) = 0;
  virtual std::uint32_t GetCalInterval(std::uint32_t vi, std::int32_t* months) = 0;
  virtual std::uint32_t GetEnumValue(std::uint32_t vi, std::int32_t* aQuantity, std::int32_t* aTurtle) = 0;
  virtual std::uint32_t InitWithOptions(std::string resourceName, bool idQuery, bool resetDevice, std::string optionString, std::uint32_t* vi) = 0;
  virtual std::uint32_t Initiate(std::uint32_t vi) = 0;
  virtual std::uint32_t OneInputFunction(std::uint32_t vi, std::int32_t aNumber) = 0;
  virtual std::uint32_t ParametersAreMultipleTypes(std::uint32_t vi, bool aBoolean, std::int32_t anInt32, std::int64_t anInt64, std::int32_t anIntEnum, double aFloat, double aFloatEnum, std::int32_t stringSize, std::string aString) = 0;
  virtual std::uint32_t PoorlyNamedSimpleFunction(std::uint32_t vi) = 0;
  virtual std::uint32_t Read(std::uint32_t vi, double maximumTime, double* reading) = 0;
  virtual std::uint32_t ReadFromChannel(std::uint32_t vi, std::string channelName, std::int32_t maximumTime, double* reading) = 0;
  virtual std::uint32_t ReturnDurationInSeconds(std::uint32_t vi, double* timedelta) = 0;
  virtual std::uint32_t SetAttributeViBoolean(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, bool attributeValue) = 0;
  virtual std::uint32_t SetAttributeViInt32(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, std::int32_t attributeValue) = 0;
  virtual std::uint32_t SetAttributeViInt64(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, std::int64_t attributeValue) = 0;
  virtual std::uint32_t SetAttributeViReal64(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, double attributeValue) = 0;
  virtual std::uint32_t SetAttributeViString(std::uint32_t vi, std::string channelName, std::uint32_t attributeId, std::string attributeValue) = 0;
  virtual std::uint32_t StringValuedEnumInputFunctionWithDefaults(std::uint32_t vi, std::string aMobileOSName) = 0;
  virtual std::uint32_t TwoInputFunction(std::uint32_t vi, double aNumber, std::string aString) = 0;
  virtual std::uint32_t Use64BitNumber(std::uint32_t vi, std::int64_t input, std::int64_t* output) = 0;
  virtual std::uint32_t close(std::uint32_t vi) = 0;
};

}  // namespace grpc
}  // namespace fake
}  // namespace ni
#endif  // NI_FAKE_GRPC_LIBRARY_WRAPPER_H
